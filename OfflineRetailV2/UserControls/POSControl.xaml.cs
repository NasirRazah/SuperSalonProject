/*
        purpose : Main Screen for POS Module
        USER CLASS : Opening Screen for POS Module
 *      note : using product type of cart itemse
 *      
 *      "U" - Unit of Mesure Item 
 *      
 *      "M" - Matrix Item
 *      "W" - Weighted Item
 *      "K" - Kit ItemLoad
 *      "E" - Serialized Item
 *      "F" - Fuel Item
 *      "T" - Tagged Item
 *      "G" - Gift Certificate 
 *      "A" - Account Payment
 *      "C" - Coupon
 *      "H" - Fees on Ticket
 *      "X" - Mercury / Precidia / Datacap / POSLink Gift Card issue
 *      "B" - Blank Item Type ( Not stored in Database )
 *      "O" - Bottle Refund
 *      "S" - Employee Service
 *      "Z" - Special Mix n Match
 *      "Y" - Buy 'n Get Free

 */

using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.Xpf.Grid;
using DevExpress.XtraReports.UI;

using Microsoft.PointOfService;

using OfflineRetailV2.Data;
using OfflineRetailV2.UserControls.POSSection;
using OfflineRetailV2.UserControls.Administrator;
using POSControls;
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.IO.Ports;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Threading;
using System.Xml;
using DevExpress.Xpf.RichEdit;
using System.Globalization;
using DevExpress.Xpf.Printing;
using System.Text.RegularExpressions;
using System.Windows.Markup;
using DevExpress.Office.Utils;
using System.Collections.Generic;
using DevExpress.Xpf.Core.DragAndDrop;
using System.Windows.Documents;


namespace OfflineRetailV2.UserControls
{
    /// <summary>
    /// Interaction logic for POSControl.xaml
    /// </summary>
    public partial class POSControl : System.Windows.Controls.UserControl
    {

        

        bool userControlHasFocus = false;


        FullKeyboard fkybrd;
        bool IsAboutFullKybrdOpen = false;

        private static readonly object padlock = new object();
        private static POSControl instance = null;
        public static POSControl Instance
        {
            get
            {
                lock (padlock)
                {
                    if (instance == null)
                    {
                        instance = new POSControl();
                    }
                    return instance;
                }
            }
        }
        private bool boolLoadAllItem = false;
        System.Windows.Controls.Button btnsupnd = new System.Windows.Controls.Button();
        System.Windows.Controls.Button btnsvrepiar = new System.Windows.Controls.Button();
        private bool bool_btnsupnd = false;
        private bool bool_btnsvrepiar = false;
        public DispatcherTimer timerdisplay;

        private DataTable dtblFunctionButton = null;

        private int intSetNavBarSetup = 0;


        private int NewPrintCopy = 1;
        private string NewPrinterName = "";
        private int NewTemplateID = 0;
        private string NewTemplateSize = "";
        private bool FindNewTemplate = false;
        private int T_Width = 270;
        private DataTable NewTemplateLinkData = null;

        private bool boolPaidOut = false;

        public POSControl()
        {
            InitializeComponent();

            timerdisplay = new DispatcherTimer();
            timerdisplay.Tick += Timerdisplay_Tick;
            SizeChanged += UserControl_SizeChanged;

          //  GeneralFunctions.SetFocus(txtSearch);
         //   GeneralFunctions.SetFocus(txtSKU);
             this.Loaded += page_Initialized;
        }

        private void page_Initialized(object sender, EventArgs e)
        {
            Console.WriteLine("page_Initialized");
        }

        private void Slider_OnMouseMove(object sender, System.Windows.Input.MouseEventArgs e)
        {
            try
            {
                var slider = (Slider)sender;
                Point position = e.GetPosition(slider);
                double d = 1.0d / slider.ActualWidth * position.X;
                var p = slider.Maximum * d;
                slider.Value = p;
            }
            catch (Exception ex) { }
        }
        /*
        void timelineThumb_MouseMove(object sender, System.Windows.Input.MouseEventArgs e)
        {
            try {
                var thumb = sender as Thumb;

                Point pos = e.GetPosition(slider2);
                double d = 1.0d / slider2.ActualWidth * pos.X;
                slider2.Value = slider2.Maximum * d;
            }
            catch (Exception e) { }   
        }
        */

        private int intSelectedReturnInvoiceNo;
        public int SelectedReturnInvoiceNo
        {
            get { return intSelectedReturnInvoiceNo; }
            set { intSelectedReturnInvoiceNo = value; }
        }
        DispatcherTimer clickTimer = new DispatcherTimer();
        DispatcherTimer clickTimer1 = new DispatcherTimer();

        #region forms and classes using this screen
        // Create Forms
        //private frmCustomerBrw frm_CustomerBrw;
        private POSSection.frmProductBrwUC frm_ProductBrw;
        //private frmReports frm_Reports;
        //private frmTaxBrw frm_TaxBrw;
        //private frmTenderTypesBrw frm_TenderTypesBrw;
        //private frmSecurityGroupBrw frm_SecurityGroupBrw;
        //private frmZipCodeBrw frm_ZipCodeBrw;
        //private frmDiscountBrw frm_DiscountBrw;
        //private frmMix_n_MatchBrw frm_Mix_n_MatchBrw;
        //private frmKeyboardDlg frm_KeyboardDlg;
        //private frmPOSMoreFunctionsH frm_POSMoreFunctionsH;
        //private frmPOSMoreFunctions frm_POSMoreFunctions;
        //private frmPOSMoreFunctions frm_mfv;
        //private frmPOSMoreFunctionsH frm_mfh;
        private SecondMonitor sm;
        private WinMediaPlayer winplay;

        // forms and classes using this modules

        #endregion
        private void Timerdisplay_Tick(object sender, EventArgs e)
        {
            if (Settings.LineDisplayDeviceType == "OPOS")
            {
                try
                {
                    this.timerdisplay.Interval = new TimeSpan(0, 0, 0, 0, 3000);
                    if (m_posCommon != null)
                    {
                        if (this.m_Count == 3)
                        {
                            this.m_Count = 0;
                        }

                        LineDisplay lineDisplay = (LineDisplay)m_posCommon;
                        int dc = lineDisplay.DeviceColumns;
                        this.m_Count++;

                        // Disable Marquee
                        DisableMarquee(lineDisplay);
                        lineDisplay.ClearText();
                        //Display line 1
                        if (blink1 != "")
                        {
                            int c1 = 0;
                            c1 = GeneralFunctions.fnInt32((Math.Ceiling(Convert.ToDecimal((dc - blink1.Length) / 2))));
                            if (c1 == 0) c1 = 1;
                            lineDisplay.CurrentWindow = 1;
                            lineDisplay.DisplayTextAt(0, c1, blink1);
                        }
                        // Display line 2
                        if (blink2 != "")
                        {
                            int c2 = 0;
                            c2 = GeneralFunctions.fnInt32((Math.Ceiling(Convert.ToDecimal((dc - blink2.Length) / 2))));
                            if (c2 == 0) c2 = 1;
                            lineDisplay.CurrentWindow = 2;
                            lineDisplay.DisplayTextAt(0, c2, blink2);
                        }
                    }
                }
                catch
                {
                }
            }

            if (Settings.LineDisplayDeviceType == "SERIAL")
            {
                try
                {
                    this.timerdisplay.Interval = new TimeSpan(0, 0, 0, 0, 3000);



                    ClearTextForPoleDisplayOnSerialPort();

                    DisplayTextForPoleDisplayOnSerialPort(blink1, blink2);

                }
                catch
                {
                }
            }
        }

        private void ClearTextForPoleDisplayOnSerialPort()
        {
            //SerialPort sp = new SerialPort();

            //try
            //{
            //    sp.PortName = Settings.LineDisplayDeviceSerial;
            //    sp.BaudRate = 9600;
            //    sp.Parity = Parity.None;
            //    sp.DataBits = 8;
            //    sp.StopBits = StopBits.One;
            //    sp.Open();
            //    sp.Write(Convert.ToString((char)12));
            //}
            //catch
            //{
            //}
            //finally
            //{
            //    sp.Close();
            //    sp.Dispose();
            //    sp = null;
            //}
        }

        private void DisplayTextForPoleDisplayOnSerialPort(string displaytxt1, string displaytxt2)
        {
            //SerialPort sp = new SerialPort();

            //try
            //{
            //    sp.PortName = Settings.LineDisplayDeviceSerial;
            //    sp.BaudRate = 9600;
            //    sp.Parity = Parity.None;
            //    sp.DataBits = 8;
            //    sp.StopBits = StopBits.One;
            //    sp.Open();
            //    if (displaytxt2 != "")
            //    {
            //        sp.WriteLine(displaytxt1);
            //        sp.WriteLine((char)13 + displaytxt2);
            //    }
            //    else
            //    {
            //        sp.WriteLine(displaytxt1);
            //    }

            //}
            //catch
            //{
            //}
            //}
            //finally
            //{
            //    sp.Close();
            //    sp.Dispose();
            //    sp = null;
            //}
        }



        private void ExecuteAutoSignout()
        {
            ComponentDispatcher.ThreadIdle -= IdleProcess;
            for (int intCounter = App.Current.Windows.Count - 1; intCounter > 0; intCounter--)
                App.Current.Windows[intCounter].Hide();
            CloseKeyboards();
            dtblPOS.Rows.Clear();
            
            UpdateUserCustomization();
            CloseKeyboards();
            Visibility = Visibility.Collapsed;
            OnPOSCloseCommand?.Execute(null);

            SystemVariables.CurrentUserID = -1;
            SystemVariables.CurrentUserName = "";


            Settings.PriceLevelForOneTime = "N";
            Settings.PriceLevelForThisSale = "N";

            ResMan.closeKeyboard();

            (Window.GetWindow(this) as MainWindow).LoggedInUserTextBlock.Text = Properties.Resources.NoLoggedInUser;
            (Window.GetWindow(this) as MainWindow).LoginMenuBorder.Visibility = Visibility.Visible;
            (Window.GetWindow(this) as MainWindow).LoginBorder.Visibility = Visibility.Collapsed;
            (Window.GetWindow(this) as MainWindow).LoginGrid.Visibility = Visibility.Visible;
            (Window.GetWindow(this) as MainWindow).SearchMemberTextBox.Visibility = Visibility.Hidden;
            (Window.GetWindow(this) as MainWindow).btnFrontOffice.Visibility = Visibility.Hidden;
            (Window.GetWindow(this) as MainWindow).UpdateLayout();
        }



        #region Idle Process

        private void IdleProcess(object sender, System.EventArgs e)
        {
            if (Settings.AutoSignout == "Y")
            {
                if (blInitAutoSignOut)
                {
                    if (GetIdleTime() > Settings.AutoSignoutTime * 1000)
                    {
                        
                        if (EmptyCart.Visibility == Visibility.Visible)
                        {
                            ExecuteAutoSignout();
                        }
                        else
                        {
                            if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0)
                            {
                                ExecuteAutoSignout();
                            }
                        }
                    }
                }
            }

            if (Settings.AutoSignoutTender == "Y")
            {
                if (blInitAutoSignOutAfterTender)
                {
                    ExecuteAutoSignout();
                }
            }
        }
        private int GetIdleTime()
        {
            LASTINPUTINFO lastone = new LASTINPUTINFO();
            lastone.cbSize = (uint)Marshal.SizeOf(lastone);
            lastone.dwTime = 0;
            int idleTime = 0;
            int tickCount = Environment.TickCount;
            if (GetLastInputInfo(ref lastone))
            {
                idleTime = tickCount - (int)lastone.dwTime;
                return idleTime;
            }
            else
                return 0;
        }

        #endregion

        public DispatcherTimer tmrDL = new DispatcherTimer();
        //   MessageBoxLoadingWindow MBLW = null;
        public void Load(MessageBoxLoadingWindow mblw)
        {
            
            blfetchProduct = false;
            blfetchCustomer = false;
            // this.MBLW = mblw;
            Thread t2 = new Thread(CloseLoadingWindow2);
            t2.Start();


            (Window.GetWindow(this) as MainWindow).btnFrontOffice.PreviewMouseLeftButtonDown += BtnFrontOffice_PreviewMouseLeftButtonDown;
            fkybrd = new FullKeyboard();
            tmrDL.Interval = new TimeSpan(0, 0, 0, 0, 1000);
            tmrDL.Tick += TmrDL_Tick;

            tcPOS.SelectedIndex = 0;

            Dispatcher.BeginInvoke(new Action(() => SetNavBar()));

            (Window.GetWindow(this) as MainWindow).SearchMemberTextBox.GotFocus += Find_GotFocus;
            (Window.GetWindow(this) as MainWindow).SearchMemberTextBox.LostFocus += Find_LostFocus;
            //(Window.GetWindow(this) as MainWindow).SearchMemberTextBox.TextChanged += Find_TextChanged;
            (Window.GetWindow(this) as MainWindow).SearchMemberTextBox.PreviewKeyDown += Find_PreviewKeyDown;

            lbCur1.Text = lbCur2.Text = lbCur3.Text = lbCur4.Text = SystemVariables.CurrencySymbol;

            /// Start calculating idle time if auto signout defined in setup.
            if (Settings.AutoSignout == "Y")
            {
                ComponentDispatcher.ThreadIdle += IdleProcess;
                blInitAutoSignOut = true;
            }
            if (Settings.AutoSignoutTender == "Y")
            {
                ComponentDispatcher.ThreadIdle += IdleProcess;
            }
            
            if (Settings.TaxInclusive == "N")
            {
                colGRate.Visible = colGPrice.Visible = false;
            }

            if (Settings.TaxInclusive == "Y")
            {
                colRate.Visible = colPrice.Visible = false;
            }

            if (Settings.LineDisplayDeviceType == "OPOS") InitLineDisplay();

            if (Settings.PoleScreen.Trim() != "")
            {
                string txt1 = "";

                string txt2 = "";
                ArrangePoleDisplayGreetings(ref txt1, ref txt2);
                DisplayPoleText(1, "N", "N", txt1, txt2);
            }
            else
            {
                DisplayPoleText(1, "N", "N", Properties.Resources.welcome_to, Settings.Company);
            }
            if (Settings.DemoVersion == "Y")
            {
                lbCompany.Text = Settings.Company + Properties.Resources.__demo_version;
            }
            else
            {
                lbCompany.Text = Settings.Company;
            }

            /// Display NTEP Cert.
            lbCompany.Text = lbCompany.Text + "    " + (Settings.NTEPCert != "" ? "  " + Properties.Resources.NTEP_Cert__No___ + " " + Settings.NTEPCert : "") +
                    (GeneralFunctions.GetScaleGraduationText() == "" ? "" :
                        "  " + Properties.Resources.Scale + "  " + GeneralFunctions.GetScaleGraduationText()) +
                        ("          " + Settings.TerminalTcpIp);

            /// Rearrange Numeric Button as Calculator Style ( depending upon setup parameter )
            RearrangeForCalculatorStyle(Settings.CalculatorStyleKeyboard == "Y");




            if ((Settings.PriceLevelForOneTime == "N") && (Settings.PriceLevelForOneTime == "N")) intUsePriceLevel = Settings.UsePriceLevel;
            if ((Settings.PriceLevelForOneTime == "Y") || (Settings.PriceLevelForOneTime == "Y")) intUsePriceLevel = Settings.TempPriceLevel;

            lbFStotal.Text = "";

            /// Show Logger User, Invoice # on the screen

            GetPOSCounterInfo();

            btnResumeSuspend.Content = new TextBlock()
            {
                Text = Properties.Resources.Resume
            };
            //txtSKU.Background = new SolidColorBrush(Colors.Transparent);
            //txtSKU.Background = new SolidColorBrush(Color.FromRgb(247, 245, 241));

            /// Set Panel for POS Screen Category 
            Dispatcher.BeginInvoke(new Action(() => AlignCategory()));

            Dispatcher.BeginInvoke(new Action(() => ResizeTabHeader()));

            blOpenCustomerOrder = false;
            blResumeTransaction = false;
            blWorkOrder = false;

            /// Set POS Screen Category and Item
            /// 


            

            boolLoadAllItem = false;
            menuGrid.Visibility = Visibility.Collapsed;
            ChangeMenuButtonColor("Cart");


            //await LoadPOSButtons();
            Dispatcher.BeginInvoke(new Action(() => LoadPOSButtons()));
            lbcustinfo1.Text = "";
            lbcustinfo2.Text = "";


            dtblRepairInfo = new DataTable();

            dtblPOS = new DataTable();
            dtblPOS.Columns.Add("ID", System.Type.GetType("System.String"));//1
            dtblPOS.Columns.Add("PRODUCT", System.Type.GetType("System.String"));//2
            dtblPOS.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));//3
            dtblPOS.Columns.Add("ONHANDQTY", System.Type.GetType("System.String"));//4
            dtblPOS.Columns.Add("NORMALQTY", System.Type.GetType("System.String"));//5
            dtblPOS.Columns.Add("COST", System.Type.GetType("System.String"));//6
            dtblPOS.Columns.Add("QTY", System.Type.GetType("System.String"));//7
            dtblPOS.Columns.Add("RATE", System.Type.GetType("System.Double"));//8
            dtblPOS.Columns.Add("NRATE", System.Type.GetType("System.String"));//9
            dtblPOS.Columns.Add("PRICE", System.Type.GetType("System.Double"));//10
            dtblPOS.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));//11
            dtblPOS.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));//12
            dtblPOS.Columns.Add("UOMDESC", System.Type.GetType("System.String"));//13
            dtblPOS.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));//14
            dtblPOS.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));//15
            dtblPOS.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));//16
            dtblPOS.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));//17
            dtblPOS.Columns.Add("UNIQUE", System.Type.GetType("System.String"));//18
            dtblPOS.Columns.Add("DP", System.Type.GetType("System.String"));//19
            dtblPOS.Columns.Add("NOTES", System.Type.GetType("System.String"));//20

            dtblPOS.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));//21
            dtblPOS.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));//22
            dtblPOS.Columns.Add("DISCOUNT", System.Type.GetType("System.String"));//23
            dtblPOS.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));//24
            dtblPOS.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));//25
            dtblPOS.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));//26

            // for blankline
            dtblPOS.Columns.Add("TAXID1", System.Type.GetType("System.String"));//27
            dtblPOS.Columns.Add("TAXID2", System.Type.GetType("System.String"));//28
            dtblPOS.Columns.Add("TAXID3", System.Type.GetType("System.String"));//29
            dtblPOS.Columns.Add("TAXNAME1", System.Type.GetType("System.String"));//30
            dtblPOS.Columns.Add("TAXNAME2", System.Type.GetType("System.String"));//31
            dtblPOS.Columns.Add("TAXNAME3", System.Type.GetType("System.String"));//32
            dtblPOS.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));//33
            dtblPOS.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));//34
            dtblPOS.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));//35
            dtblPOS.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));//36
            dtblPOS.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));//37
            dtblPOS.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));//38

            // service type
            dtblPOS.Columns.Add("SERVICE", System.Type.GetType("System.String"));//39

            // for rent
            dtblPOS.Columns.Add("RENTTYPE", System.Type.GetType("System.String"));//40
            dtblPOS.Columns.Add("RENTDURATION", System.Type.GetType("System.Double"));//41
            dtblPOS.Columns.Add("RENTAMOUNT", System.Type.GetType("System.Double"));//42
            dtblPOS.Columns.Add("RENTDEPOSIT", System.Type.GetType("System.Double"));//43

            // for repair
            dtblPOS.Columns.Add("REPAIRITEMTAG", System.Type.GetType("System.String"));//44
            dtblPOS.Columns.Add("REPAIRITEMSLNO", System.Type.GetType("System.String"));//45
            dtblPOS.Columns.Add("REPAIRITEMPURCHASEDATE", System.Type.GetType("System.String"));//46

            // for Tax pickup from Tax Table
            dtblPOS.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//47
            dtblPOS.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//48
            dtblPOS.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//49
            dtblPOS.Columns.Add("TX1ID", System.Type.GetType("System.Int32"));//50
            dtblPOS.Columns.Add("TX2ID", System.Type.GetType("System.Int32"));//51
            dtblPOS.Columns.Add("TX3ID", System.Type.GetType("System.Int32"));//52
            dtblPOS.Columns.Add("TX1", System.Type.GetType("System.Double"));//53
            dtblPOS.Columns.Add("TX2", System.Type.GetType("System.Double"));//54
            dtblPOS.Columns.Add("TX3", System.Type.GetType("System.Double"));//55

            // for Mix and Match
            dtblPOS.Columns.Add("MIXMATCHID", System.Type.GetType("System.Int32"));//56
            dtblPOS.Columns.Add("MIXMATCHFLAG", System.Type.GetType("System.String"));//57
            dtblPOS.Columns.Add("MIXMATCHTYPE", System.Type.GetType("System.String"));//58
            dtblPOS.Columns.Add("MIXMATCHVALUE", System.Type.GetType("System.Double"));//59
            dtblPOS.Columns.Add("MIXMATCHQTY", System.Type.GetType("System.Int32"));//60
            dtblPOS.Columns.Add("MIXMATCHUNIQUE", System.Type.GetType("System.Int32"));//61
            dtblPOS.Columns.Add("MIXMATCHLAST", System.Type.GetType("System.String"));//62

            // for Fees & Charges
            dtblPOS.Columns.Add("FEESID", System.Type.GetType("System.String"));//63
            dtblPOS.Columns.Add("FEESLOGIC", System.Type.GetType("System.String"));//64
            dtblPOS.Columns.Add("FEESVALUE", System.Type.GetType("System.String"));//65
            dtblPOS.Columns.Add("FEESTAXRATE", System.Type.GetType("System.String"));//66
            dtblPOS.Columns.Add("FEES", System.Type.GetType("System.String"));//67
            dtblPOS.Columns.Add("FEESTAX", System.Type.GetType("System.String"));//68
            dtblPOS.Columns.Add("FEESTEXT", System.Type.GetType("System.String"));//69
            dtblPOS.Columns.Add("FEESQTY", System.Type.GetType("System.String"));//70

            //for Sale Price
            dtblPOS.Columns.Add("SALEPRICEID", System.Type.GetType("System.Int32"));//71


            // customer Destination Tax
            dtblPOS.Columns.Add("DTXID", System.Type.GetType("System.Int32"));//72
            dtblPOS.Columns.Add("DTXTYPE", System.Type.GetType("System.Int32"));//73
            dtblPOS.Columns.Add("DTXRATE", System.Type.GetType("System.Double"));//74
            dtblPOS.Columns.Add("DTX", System.Type.GetType("System.Double"));//75

            dtblPOS.Columns.Add("EDITF", System.Type.GetType("System.String"));//76

            dtblPOS.Columns.Add("PROMPTPRICE", System.Type.GetType("System.String"));//77

            // Buy 'n Get Free

            dtblPOS.Columns.Add("BUYNGETFREEHEADERID", System.Type.GetType("System.String"));
            dtblPOS.Columns.Add("BUYNGETFREECATEGORY", System.Type.GetType("System.String"));
            dtblPOS.Columns.Add("SL", System.Type.GetType("System.Int32"));
            dtblPOS.Columns.Add("BUYNGETFREENAME", System.Type.GetType("System.String"));

            // Age Restriction if Applicable for Item
            dtblPOS.Columns.Add("AGE", System.Type.GetType("System.Int32"));

            // Add for Tax Inclusive
            dtblPOS.Columns.Add("GRATE", System.Type.GetType("System.Double"));
            dtblPOS.Columns.Add("GPRICE", System.Type.GetType("System.Double"));

            dtblPOS.Columns.Add("UOM", System.Type.GetType("System.String"));

            dtblPOS.Columns.Add("DISPLAY_ITEM", System.Type.GetType("System.String"));
            dtblPOS.Columns.Add("DISPLAY_QTY", System.Type.GetType("System.String"));
            dtblPOS.Columns.Add("DISPLAY_RATE", System.Type.GetType("System.String"));
            dtblPOS.Columns.Add("DISPLAY_TOTAL", System.Type.GetType("System.String"));

            dtblPOS.Columns.Add("PM", System.Type.GetType("System.String"));


            dtblPOS.DefaultView.Sort = "ITEMINDEX asc";
            dtblPOS.DefaultView.ApplyDefaultSort = true;

            gridControl1.ItemsSource = dtblPOS;
            ToggleWithEmptyCart();
            GeneralFunctions.SetFocus(txtSKU);
            SetDecimalPlace();

            dtblZeroStock = new DataTable();
            dtblZeroStock.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));

            dtblCustNotes = new DataTable();
            dtblCustNotes.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblCustNotes.Columns.Add("Note", System.Type.GetType("System.String"));
            dtblCustNotes.Columns.Add("DateTime", System.Type.GetType("System.String"));
            dtblCustNotes.Columns.Add("SpecialEvent", System.Type.GetType("System.String"));

            dtblTender = new DataTable();
            dtblTender.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("TENDER", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("AMOUNT", System.Type.GetType("System.Double"));
            dtblTender.Columns.Add("GIFTCERTIFICATE", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("NEWGC", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("OLDGC", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("OLDGCAMT", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("CCTRANNO", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("GCSTORE", System.Type.GetType("System.String"));
            dtblAppt = new DataTable();
            dtblAppt.Columns.Add("ID", System.Type.GetType("System.String"));

            cardidentity = new DataTable();
            cardidentity.Columns.Add("CardID", System.Type.GetType("System.String"));


            dtblFunctionButton = new DataTable();
            dtblFunctionButton.Columns.Add("SL", System.Type.GetType("System.Int32"));
            dtblFunctionButton.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFunctionButton.Columns.Add("NAME", System.Type.GetType("System.String"));

            /// Arrange Function Buttons

            Dispatcher.Invoke(new Action(() => ArrangeVisibleFunctions()));

            Dispatcher.BeginInvoke(new Action(() => DisplayFunctionButtons()));

            Dispatcher.BeginInvoke(new Action(() => SetServiceTypeButtonColor()));

            /// Setup of Tabs of this screen ( depending upon security access )

            Dispatcher.BeginInvoke(new Action(() => SetPOSTabPage()));

            if (strCurrentServiceType == "Sales") blSales = true;
            if (strCurrentServiceType == "Rent") blRentIssued = true;
            if (strCurrentServiceType == "Repair") blRepairIssued = true;


            
            /// Get Distinct Stores

            Dispatcher.BeginInvoke(new Action(() => PopulateCustomerStores()));

            if (Settings.CentralExportImport == "N") pnlcuststore.Visibility = Visibility.Collapsed;

            if (Settings.CentralExportImport == "Y")
            {
                txtCustStore.Visibility = Visibility.Visible;
                txtCustStore.Text = Settings.StoreCode;
            }
            else
            {
                txtCustStore.Visibility = Visibility.Collapsed;
            }

            if (Settings.ActiveAdminPswdForMercury)
            {
                lbLoginDue.Text = Settings.LoginExpireDue;
                tpSetup.Visibility = Visibility.Collapsed;
            }

            /// initialize scale device

            if (Settings.ScaleDevice == "Datalogic Scale")
            {
                PrepareDatalogicScale();
                PrepareDatalogicScanner();
            }

            if (Settings.ScaleDevice == "Kilotech")
            {
                DummyCall_SerialScale();
            }

            if (Settings.ScaleDevice == "Live Weight")
            {
                pnlLiveWeight.Height = 45;
                DummyCall_LiveWeightScale();
                blAttachToLWTimer = false;
                //tmrLW.Enabled = true;  --Sam
                dtblLiveWeightStable = new DataTable();
                dtblLiveWeightStable.Columns.Add("SL", System.Type.GetType("System.Int32"));
                dtblLiveWeightStable.Columns.Add("Weight", System.Type.GetType("System.String"));
                
            }
            else
            {
                //pnlLiveWeight.Height = 0; --Sam
            }

            

            /// Second Monitor Display

            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                SecondMonitor.SetupDisplayOnPOSLoad();
                SecondMonitor.InsertItem(dtblPOS, 0, lbCustName.Text.Trim(), Convert.ToDouble(numSubTotal.Text), Convert.ToDouble(numDiscount.Text), Convert.ToDouble(numTax.Text), Convert.ToDouble(numTotal.Text), dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg); // rajib
            }

            // Using Precidia as Card Payment Gateway

            if (Settings.POSCardPayment == "Y")
            {
                if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                {
                    PrecidiaLaneOpen();
                }
            }

            


            Dispatcher.BeginInvoke(new Action(() => GetCashTenderTypeData())); // Get Cash Tender Details 

            //if (CashTID == 0) pnlcurrency.Visible = false; --Sam


            Dispatcher.BeginInvoke(new Action(() => SetupQuickTendering()));


            Dispatcher.BeginInvoke(new Action(() => SetScreenByUserCustomization()));

            GeneralFunctions.SetFocus(txtSearch);


            
         

           // Thread t = new Thread(CloseLoadingWindow);
          //  t.Start();

            Thread t1 = new Thread(CloseLoadingWindow1);
            t1.Start();

            
        }

        void CloseLoadingWindow()
        {
            for (int i = 0; ; i++)
            {
                try
                {
                    Thread.Sleep(10);
                    if (i % 1000 == 0)
                    {
                        Dispatcher.BeginInvoke(new ThreadStart(() => FormAccessor.Forms.MsgLoadingBox.Hide()));
                        break;
                    }
                }
                catch (Exception e)
                {
                    WriteLog(e.Message);
                }
            }
        }

        void CloseLoadingWindow1()
        {
            try
            {
                Thread.Sleep(10);
                Dispatcher.BeginInvoke(new ThreadStart(() => FormAccessor.Forms.MsgLoadingBox.Hide()));
            }
            catch (Exception e)
            {
                WriteLog(e.Message);
            }

        }
       
        void CloseLoadingWindow2()
        {
            try
            {
                Thread.Sleep(12000);

                //FormAccessor forms = FormAccessor.Forms;
                //var loadingWin = forms.MsgLoadingBox;
                Dispatcher.BeginInvoke(new ThreadStart(() => FormAccessor.Forms.MsgLoadingBox.Hide()));
            }
            catch (Exception e)
            {
                WriteLog(e.Message);
            }
        }

        public void WriteLog(string Message)
        {
            try
            {
                // Create the source, if it does not already exist.
                if (!EventLog.SourceExists("XEPOS"))
                {
                    //An event log source should not be created and immediately used.
                    //There is a latency time to enable the source, it should be created
                    //prior to executing the application that uses the source.
                    //Execute this sample a second time to use the new source.
                    EventLog.CreateEventSource("XEPOS", "XEPOS");
                    Console.WriteLine("CreatedEventSource");
                    Console.WriteLine("Exiting, execute the application a second time to use the source.");
                }

                // Create an EventLog instance and assign its source.
                EventLog myLog = new EventLog();
                myLog.Source = "XEPOS";

                // Write an informational entry to the event log.
                myLog.WriteEntry(Message);
            }
            catch (Exception)
            {


            }
        }

        DataTable dtblDummyPOS = null;
        /// <summary>
        /// This function is to add a dummy row/item in our main items grid at page load, so that slowness is avoided on our actual 1st item addition.
        /// </summary>
        public void LoadDummyData()
        {
            dtblDummyPOS = new DataTable();
            dtblDummyPOS.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblDummyPOS.Rows.Add(new object[] { "11" });

            gridControl1.ItemsSource = dtblDummyPOS;
            EmptyCart.Visibility = Visibility.Visible;
            gridControl1.Visibility = Visibility.Hidden;
        }


        private void UpdateUserCustomization()
        {
            string v = "S";
            if (grdFB.Height == 0.0)
            {
                v = "H";
            }
            else
            {
                v = "S";
            }

            int rcdcnt = GeneralFunctions.GetUserCustomizationCount();

            if (rcdcnt == 0)
            {
                GeneralFunctions.AddUserCustomizationParameters(v);
            }
            else
            {
                GeneralFunctions.UpdateUserCustomizationParameters(v);
            }
        }

        private void SetScreenByUserCustomization()
        {
            if (Settings.POSFunctionButtonShowHideState_User == "S")
            {
                grdFB.Height = 100.0;
                lbShowHide.Text = "Hide";
                imgshow1.Visibility = Visibility.Hidden;
                imghide1.Visibility = Visibility.Visible;
            }
            else
            {
                grdFB.Height = 0.0;
                lbShowHide.Text = "Show";
                imgshow1.Visibility = Visibility.Visible;
                imghide1.Visibility = Visibility.Hidden;
            }
        }

        private void BtnFrontOffice_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (menuGrid.Visibility == Visibility.Visible) menuGrid.Visibility = Visibility.Collapsed;
            ChangeMenuButtonColor("Customer");
            tcPOS.SelectedIndex = 1;
        }

        private void CloseKeyboards()
        {
            if (fkybrd != null)
            {
                fkybrd.Close();
            }
        }

        private void Full_LostFocus(object sender, RoutedEventArgs e)
        {
            CloseKeyboards();

            if (sender is System.Windows.Controls.TextBox)
            {
                if ((sender as System.Windows.Controls.TextBox).Name == "txtCust")
                {
                    if (txtCust.Text.Trim() != "")
                    {
                        int intpCust = IsValidCustID();
                        if (intpCust > 0)
                        {
                            pnlCust.Visibility = System.Windows.Visibility.Visible;


                            blChangeCustomer = true;
                            string refTaxExempt = "";
                            string refDiscountLevel = "";
                            string refTaxID = "";
                            string refStoreCr = "";
                            string refCID = "";
                            string refCName = "";
                            string refCAdd = "";
                            double dblBalance = 0;
                            string refARCredit = "";
                            string refPOSNotes = "";

                            int refDTaxID = 0;
                            string refDTax = "";
                            double refDTaxRate = 0;
                            int refDTaxType = 0;

                            intCustID = GetCustID();

                            FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd,
                                ref refTaxExempt, ref refDiscountLevel, ref refTaxID, ref refStoreCr, ref refARCredit,
                                ref refPOSNotes, ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);

                            CustDTaxID = refDTaxID;
                            CustDTaxName = refDTax;
                            CustDTaxRate = refDTaxRate;
                            CustDTaxType = refDTaxType;

                            strTaxExempt = refTaxExempt;
                            strDiscountLevel = refDiscountLevel;
                            if (strDiscountLevel == "") strDiscountLevel = "A";
                            dblBalance = GetAccountBalance(intCustID);
                            txtCust.Text = refCID;
                            //lbCustID.Text = "Customer ID : " + refCID;
                            strCustomerID = refCID;
                            lbCustName.Text = refCName;
                            //DisplayPoleText(2, "N", "N", "welcome", refCName);

                            //lbCustAddress.Text = refCAdd;
                            //ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                            //lbCustNotes.Text = refPOSNotes;
                            blCustNotes = refPOSNotes != "";
                            // ShowCustomerPhoto();
                            FetchCustomerNote("", "Customer", intCustID, DateTime.Today.Year, DateTime.Today.Month);
                            //if (blCustNotes) lbcustinfo2.Text = "Check 'Cust Notes' Apps";
                            dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                            dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                            dblCustAcctBalance = dblBalance;
                            RearrangeProductAsCustomerChange();

                            int i = -1;
                            foreach (DataRowView dr in dtblPOS.DefaultView)
                            {
                                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                                || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                                || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                                || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                                i++;
                                AddAutoDiscountInCart_OnCustomerChange(GeneralFunctions.fnInt32(dr["ID"].ToString()), GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) > 0 ? false : true, i);
                            }
                            SetCartDisplay();
                            GetTotal();
                            ShowTax();
                            ResetQty();
                            //Block
                            /*
                            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                            {
                                int fval = gridView1.FocusedRowHandle;
                                //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);

                                SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), numSubTotal.Value, numDiscount.Value, numTax.Value, numTotal.Value, dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
                            }*/

                        }
                        else
                        {
                            pnlCust.Visibility = System.Windows.Visibility.Collapsed;
                            DocMessage.MsgInformation("Invalid/Inactive Customer ID");
                            intCustID = 0;
                            txtCust.Text = "";

                            if (Settings.CentralExportImport == "Y")
                            {
                                if (txtCustStore.Text.Trim() == "") txtCustStore.Text = Settings.StoreCode;
                            }
                            else
                            {
                                txtCustStore.Text = "";
                            }
                            //lbCustID.Text = "";
                            lbCustName.Text = "";
                            //lbCustAddress.Text = "";
                            //lbCustBal.Text = "";
                            //lbCustNotes.Text = "";
                            //lbcustinfo1.Text = "";
                            //lbcustinfo2.Text = "";
                            //lbCustTax.Text = "";
                            //picCustPhoto.Image = null;
                            strTaxExempt = "N";
                            strDiscountLevel = "A";
                            //btnViewCustomerDetails.Visible = false;
                            RearrangeProductAsCustomerChange();

                            int i = -1;
                            foreach (DataRowView dr in dtblPOS.DefaultView)
                            {
                                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                                || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                                || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                                || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                                i++;
                                AddAutoDiscountInCart_OnCustomerChange(GeneralFunctions.fnInt32(dr["ID"].ToString()), GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) > 0 ? false : true, i);
                            }
                            SetCartDisplay();
                            GetTotal();
                            ShowTax();
                            ResetQty();
                            /*
                            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                            {
                                int fval = gridView1.FocusedRowHandle;
                                //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);

                                SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), numSubTotal.Value, numDiscount.Value, numTax.Value, numTotal.Value, dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
                            }*/
                            GeneralFunctions.SetFocus(txtSKU);
                            return;
                        }
                    }
                    else
                    {
                        intCustID = 0;
                        //lbCustID.Text = "";
                        lbCustName.Text = "";
                        if (Settings.CentralExportImport == "Y")
                        {
                            if (txtCustStore.Text.Trim() == "") txtCustStore.Text = Settings.StoreCode;
                        }
                        else
                        {
                            txtCustStore.Text = "";
                        }

                        //lbCustAddress.Text = "";
                        //lbCustBal.Text = "";
                        //lbCustNotes.Text = "";

                        //lbcustinfo1.Text = "";
                        //lbcustinfo2.Text = "";
                        //lbCustTax.Text = "";
                        //picCustPhoto.Image = null;
                        strTaxExempt = "N";
                        strDiscountLevel = "A";
                        //btnViewCustomerDetails.Visible = false;
                        RearrangeProductAsCustomerChange();

                        int i = -1;
                        foreach (DataRowView dr in dtblPOS.DefaultView)
                        {
                            if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                            || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                            || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                            || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                            i++;
                            AddAutoDiscountInCart_OnCustomerChange(GeneralFunctions.fnInt32(dr["ID"].ToString()), GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) > 0 ? false : true, i);
                        }
                        SetCartDisplay();
                        GetTotal();
                        //Block ShowTax();
                        ResetQty();
                        //gridControl1.RefreshData();

                        /*
                        if (Settings.PoleScreen != "")
                        {
                            string txt1 = "";
                            string txt2 = "";
                            ArrangePoleDisplayGreetings(ref txt1, ref txt2);
                            DisplayPoleText(2, "N", "N", txt1, txt2);
                        }
                        else
                        {
                            DisplayPoleText(2, "N", "N", Translation.SetMultilingualTextInCodes("welcome to", "frmPOSN_welcometo"), Settings.Company);
                        }*/
                    }
                }
            }

        }





        private void Full_GotFocus(object sender, RoutedEventArgs e)
        {
            if (Settings.UseTouchKeyboardInPOS == "N") return;
            //(sender as DevExpress.Xpf.Editors.TextEdit).SetValue(FocusManager.IsFocusScopeProperty, true);
            CloseKeyboards();





            /*if (storedFocus != null)
                Keyboard.Focus((sender as DevExpress.Xpf.Editors.TextEdit));*/

            if (!IsAboutFullKybrdOpen)
            {
                fkybrd = new FullKeyboard();

                var location = (sender as System.Windows.Controls.TextBox).PointToScreen(new Point(0, 0));
                fkybrd.Left = GeneralFunctions.fnInt32((SystemParameters.WorkArea.Width - 800) / 2);
                if (location.Y + 35 + 320 > System.Windows.SystemParameters.WorkArea.Height)
                {
                    fkybrd.Top = location.Y - 35 - 320;
                }
                else
                {
                    fkybrd.Top = location.Y + 35;
                }

                fkybrd.Height = 320;
                fkybrd.Width = 800;
                fkybrd.IsWindow = false;
                fkybrd.calledusercontrol = this;
                fkybrd.UCEdit = sender as System.Windows.Controls.TextBox;

                fkybrd.Closing += new System.ComponentModel.CancelEventHandler(FKybrd_Closing);
                fkybrd.Show();
                IsAboutFullKybrdOpen = true;
            }

        }

        private void FKybrd_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (!IsAboutFullKybrdOpen)
            {
                e.Cancel = true;
            }
            else
            {
                IsAboutFullKybrdOpen = false;
                e.Cancel = false;
            }
        }

        private void TmrDL_Tick(object sender, EventArgs e)
        {
            try
            {
                if (weightitemid == 0)
                {
                    weightstring = m_posScale.ReadWeight(20000).ToString();
                    if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                    {
                        SecondMonitor.AddWeightInfo(GeneralFunctions.FormatDoubleForPrint("0.00") + " " + m_posScale.WeightUnit.ToString(), 0);
                    }
                }

            }

            catch (PosControlException)
            {

            }
            finally
            {

            }
        }

        //TextBlock lbCustName = new TextBlock() { Text = "" };
        /// Live Weight Scale Initialization

        public void DummyCall_LiveWeightScale()
        {
            try
            {
                if (Settings.COMPort != "(None)")
                {
                    int bd = GeneralFunctions.fnInt32(Settings.BaudRate);
                    int dbit = GeneralFunctions.fnInt32(Settings.DataBits);
                    Parity p = Parity.None;
                    StopBits sb = StopBits.One;
                    Handshake hshk = Handshake.None;
                    if (Settings.Parity == "Even") p = Parity.Even;
                    if (Settings.Parity == "Mark") p = Parity.Mark;
                    if (Settings.Parity == "None") p = Parity.None;
                    if (Settings.Parity == "Odd") p = Parity.Odd;
                    if (Settings.Parity == "Space") p = Parity.Space;

                    if (Settings.StopBits == "None") sb = StopBits.None;
                    if (Settings.StopBits == "One") sb = StopBits.One;
                    if (Settings.StopBits == "OnePointFive") sb = StopBits.OnePointFive;
                    if (Settings.StopBits == "Two") sb = StopBits.Two;

                    if (Settings.Handshake == "None") hshk = Handshake.None;
                    if (Settings.Handshake == "RequstToSend") hshk = Handshake.RequestToSend;
                    if (Settings.Handshake == "RequstToSendXOnXOff") hshk = Handshake.RequestToSendXOnXOff;
                    if (Settings.Handshake == "XOnXOff") hshk = Handshake.XOnXOff;

                    _slport = new SerialPort(Settings.COMPort, bd, p, dbit, sb);
                    _slport.Handshake = hshk;
                    _slport.ReadTimeout = GeneralFunctions.fnInt32(Settings.Timeout) < 3000 ? 3000 : GeneralFunctions.fnInt32(Settings.Timeout);
                    _slport.WriteTimeout = GeneralFunctions.fnInt32(Settings.Timeout) < 3000 ? 3000 : GeneralFunctions.fnInt32(Settings.Timeout);
                    try
                    {
                        if (!(_slport.IsOpen)) _slport.Open();

                        _slport.DataReceived += new SerialDataReceivedEventHandler(_slport_DataReceived_LiveWeight);

                    }
                    catch
                    {

                    }
                }

                else
                {

                }
            }
            catch
            {

            }

        }

        #region Response from Precidia Socket Transaction

        private void SocketResponse_Signature(XmlDocument XDoc1)
        {
            try
            {
                XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
                for (int i = 0; i < nd.Count; ++i)
                {
                    CGresp_signature = nd[i].InnerText.ToUpper();
                }
            }
            catch
            {
            }
        }

        private void SocketResponse_CashBack(XmlDocument XDoc1)
        {
            XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
            for (int i = 0; i < nd.Count; ++i)
            {
                CGresp_Cashbk = nd[i].InnerText.ToUpper();
            }

            CG_Cashbk = 0;
            try
            {
                XmlNodeList nd2 = XDoc1.GetElementsByTagName("Response");
                for (int i = 0; i < nd2.Count; ++i)
                {
                    if (nd2[i].InnerText != "")
                    {
                        CG_Cashbk = GeneralFunctions.fnDouble(nd2[i].InnerText.Replace(SystemVariables.CurrencySymbol, ""));
                    }
                }
            }
            catch
            {
            }
        }

        private void SocketResponse_Genaral(XmlDocument XDoc1)
        {
            XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
            for (int i = 0; i < nd.Count; ++i)
            {
                CGresp = nd[i].InnerText;
            }
            XmlNodeList nd1 = XDoc1.GetElementsByTagName("ResultText");
            for (int i = 0; i < nd1.Count; ++i)
            {
                CGresptxt = nd1[i].InnerText;
            }



            //if (CGresp.ToUpper().Trim() == "APPROVED")
            //{
            AuthCode = "";
            TranID = "";
            CardNum = "";
            CardExMM = "";
            CardExYY = "";
            CardLogo = "";
            CardType = "";
            ApprovedAmt = "";
            RefNo = "";
            CardEntry = "";
            AcqRef = "";
            Token = "";
            MerchantID = "";
            MercuryProcessData = "";
            MercuryTextResponse = "";
            MercuryPurchaseAmount = 0;
            MercuryTranCode = "";
            MercuryResponseOrigin = "";
            MercuryRecordNo = "";
            MercuryResponseReturnCode = "";

            try
            {
                XmlNodeList nd2 = XDoc1.GetElementsByTagName("Authorization");
                for (int i = 0; i < nd2.Count; ++i)
                {
                    AuthCode = nd2[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd3 = XDoc1.GetElementsByTagName("AuthAmt");
                for (int i = 0; i < nd3.Count; ++i)
                {
                    ApprovedAmt = nd3[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd4 = XDoc1.GetElementsByTagName("CardNumber");
                for (int i = 0; i < nd4.Count; ++i)
                {
                    CardNum = nd4[i].InnerText;
                }
            }
            catch
            {
            }
            try
            {
                XmlNodeList nd5 = XDoc1.GetElementsByTagName("Id");
                for (int i = 0; i < nd5.Count; ++i)
                {
                    Token = nd5[i].InnerText;
                }
            }
            catch
            {
            }
            try
            {
                XmlNodeList nd6 = XDoc1.GetElementsByTagName("RecNum");
                for (int i = 0; i < nd6.Count; ++i)
                {
                    TranID = nd6[i].InnerText;
                }
            }
            catch
            {
            }
            try
            {
                XmlNodeList nd7 = XDoc1.GetElementsByTagName("CardType");
                for (int i = 0; i < nd7.Count; ++i)
                {
                    CardLogo = nd7[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd8 = XDoc1.GetElementsByTagName("MerchantId");
                for (int i = 0; i < nd8.Count; ++i)
                {
                    MerchantID = nd8[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd9 = XDoc1.GetElementsByTagName("RefData");
                for (int i = 0; i < nd9.Count; ++i)
                {
                    RefNo = nd9[i].InnerText;
                }
            }
            catch
            {
            }
        }

        private void SocketResponse_Display(XmlDocument XDoc1)
        {
            XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
            for (int i = 0; i < nd.Count; ++i)
            {
                PrecidiaDisplayResult = nd[i].InnerText.ToUpper();
            }

            XmlNodeList nd1 = XDoc1.GetElementsByTagName("ResultText");
            for (int i = 0; i < nd1.Count; ++i)
            {
                PrecidiaDisplayResultText = nd1[i].InnerText;
            }

            XmlNodeList nd2 = XDoc1.GetElementsByTagName("Response");
            for (int i = 0; i < nd2.Count; ++i)
            {
                PrecidiaDisplayResponse = nd2[i].InnerText;
            }
        }

        #endregion

        #region Precidia Log

        private string PrecidiaLogFilePath()
        {
            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            //csConnPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\Precidia Logs";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\Precidia Logs";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath + "\\" + PrecidiaLogFile;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\" + PrecidiaLogFile;
            }
            return strfilename;
        }

        private void WriteToPrecidiaLogFile(string txt)
        {
            FileStream fileStrm;
            if (File.Exists(PrecidiaLogPath)) fileStrm = new FileStream(PrecidiaLogPath, FileMode.Append, FileAccess.Write);
            else fileStrm = new FileStream(PrecidiaLogPath, FileMode.OpenOrCreate, FileAccess.Write);

            StreamWriter sw = new StreamWriter(fileStrm);
            sw.WriteLine(txt);
            sw.Close();
            fileStrm.Close();
        }

        #endregion

        #region Precidia Functions

        private void PrecidiaLaneOpen()
        {
            PrecidiaDisplayResult = "";
            PrecidiaDisplayResultText = "";
            PrecidiaDisplayResponse = "";


            XmlDocument XDoc = new XmlDocument();

            // Create root node.
            XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

            XDoc.AppendChild(XElemRoot);

            XmlElement XTemp = XDoc.CreateElement("Command");
            XTemp.InnerText = "PPDISPLAY";
            XElemRoot.AppendChild(XTemp);

            XTemp = XDoc.CreateElement("Lines");
            XTemp.InnerText = "2";
            XElemRoot.AppendChild(XTemp);

            XTemp = XDoc.CreateElement("Text");
            XTemp.InnerText = "***Lane Open***";
            XElemRoot.AppendChild(XTemp);

            XmlDocument XmlResponse = new XmlDocument();

            XTemp = XDoc.CreateElement("KeepAlive");
            XTemp.InnerText = "N";
            XElemRoot.AppendChild(XTemp);

            XTemp = XDoc.CreateElement("ClientMAC");
            XTemp.InnerText = Settings.PrecidiaClientMAC;
            XElemRoot.AppendChild(XTemp);

            bool bTelnet = false;
            try
            {
                SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                bTelnet = true;
            }
            catch
            {
                bTelnet = false;
            }

            if (bTelnet)
            {
                if (XmlResponse.InnerXml != "")
                {
                    SocketResponse_Display(XmlResponse);


                    string DisplayResult = PrecidiaDisplayResult;
                    string DisplayResultText = PrecidiaDisplayResultText;
                    string DisplayResponse = PrecidiaDisplayResponse;
                }
            }
        }

        private void PrecidiaLaneClosed()
        {
            PrecidiaDisplayResult = "";
            PrecidiaDisplayResultText = "";
            PrecidiaDisplayResponse = "";

            XmlDocument XDoc = new XmlDocument();

            // Create root node.
            XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

            XDoc.AppendChild(XElemRoot);

            XmlElement XTemp = XDoc.CreateElement("Command");
            XTemp.InnerText = "PPDISPLAY";
            XElemRoot.AppendChild(XTemp);

            XTemp = XDoc.CreateElement("Lines");
            XTemp.InnerText = "2";
            XElemRoot.AppendChild(XTemp);

            XTemp = XDoc.CreateElement("Text");
            XTemp.InnerText = "***Lane Closed***";
            XElemRoot.AppendChild(XTemp);

            XmlDocument XmlResponse = new XmlDocument();

            XTemp = XDoc.CreateElement("KeepAlive");
            XTemp.InnerText = "N";
            XElemRoot.AppendChild(XTemp);

            XTemp = XDoc.CreateElement("ClientMAC");
            XTemp.InnerText = Settings.PrecidiaClientMAC;
            XElemRoot.AppendChild(XTemp);

            bool bTelnet = false;
            try
            {
                SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                bTelnet = true;
            }
            catch
            {
                bTelnet = false;
            }

            if (bTelnet)
            {
                if (XmlResponse.InnerXml != "")
                {
                    SocketResponse_Display(XmlResponse);

                    string DisplayResult = PrecidiaDisplayResult;
                    string DisplayResultText = PrecidiaDisplayResultText;
                    string DisplayResponse = PrecidiaDisplayResponse;
                }
            }
        }

        private void ShowTax()
        {
            if (((strTaxExempt == "N") && (blChangeCustomer)) || ((strTaxExempt == "N") && (intCustID == 0)))
            {
                DataTable dtblTax = new DataTable();
                DataTable dtblTax1 = new DataTable();
                dtblTax.Columns.Add("TAXID", System.Type.GetType("System.String"));
                dtblTax.Columns.Add("Tax", System.Type.GetType("System.String"));
                dtblTax.Columns.Add("Amount", System.Type.GetType("System.Double"));
                dtblTax.Columns.Add("DTax", System.Type.GetType("System.String"));

                double dblChangeTax = 0;
                double dblDiscountSum = 0;
                int intCountRow = dtblPOS.Rows.Count;
                int intCountCRow = dtblPOS.Rows.Count;

                foreach (DataRow dr in dtblPOS.Rows)
                {
                    intCountCRow++;
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "H")
                        || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "X")
                        || (dr["PRODUCTTYPE"].ToString() == "O")) continue;

                    int intPID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                    double dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? dr["PRICE"].ToString() : dr["GPRICE"].ToString()));
                    dblPrice = GeneralFunctions.FormatDouble(dblPrice);

                    double dblQty = 0;

                    if (dr["QTY"].ToString() == "")
                    {
                        dblQty = 1;
                    }
                    else
                    {
                        dblQty = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["QTY"].ToString()));
                    }

                    double dblTaxR = 0;
                    PosDataObject.Product objTax = new PosDataObject.Product();
                    objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    if ((dr["PRODUCTTYPE"].ToString() != "B") && (dr["EDITF"].ToString() == "N"))
                    {
                        if ((strCurrentServiceType == "Sales") || (strCurrentServiceType == "Repair")) dtblTax1 = objTax.ShowActiveTaxes(intPID);
                        if (strCurrentServiceType == "Rent") dtblTax1 = objTax.ShowActiveRentTaxes(intPID);
                    }
                    else
                    {
                        DataTable dtblTemp = new DataTable();
                        dtblTemp.Columns.Add("ID", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxID", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxType", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxName", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxRate", System.Type.GetType("System.String"));

                        double dblRate = 0.00;
                        string strTaxName = "";

                        if (dr["TAXABLE1"].ToString() == "Y")
                        {
                            if (dr["TAXRATE1"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString());
                            }
                            if (dr["TAXNAME1"].ToString() != "")
                            {
                                if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME1"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = dr["TAXNAME1"].ToString() + " (" + dblRate.ToString("f") + "%)";
                            }
                            else
                            {
                                string txnm = GetTaxName(GeneralFunctions.fnInt32(dr["TAXID1"].ToString()));
                                if (Settings.DecimalPlace == 3) strTaxName = txnm + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = txnm + " (" + dblRate.ToString("f") + "%)";
                            }

                            dtblTemp.Rows.Add(new object[] {
                                                "1",
                                                dr["TAXID1"].ToString(),
                                                dr["TX1TYPE"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE1"].ToString()});
                        }

                        if (dr["TAXABLE2"].ToString() == "Y")
                        {
                            if (dr["TAXRATE2"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString());
                            }
                            if (dr["TAXNAME2"].ToString() != "")
                            {
                                if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME2"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = dr["TAXNAME2"].ToString() + " (" + dblRate.ToString("f") + "%)";
                            }
                            else
                            {
                                string txnm = GetTaxName(GeneralFunctions.fnInt32(dr["TAXID2"].ToString()));
                                if (Settings.DecimalPlace == 3) strTaxName = txnm + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = txnm + " (" + dblRate.ToString("f") + "%)";
                            }

                            dtblTemp.Rows.Add(new object[] {
                                                "2",
                                                dr["TAXID2"].ToString(),
                                                dr["TX2TYPE"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE2"].ToString()});
                        }

                        if (dr["TAXABLE3"].ToString() == "Y")
                        {
                            if (dr["TAXRATE3"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString());
                            }
                            if (dr["TAXNAME3"].ToString() != "")
                            {
                                if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME3"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = dr["TAXNAME3"].ToString() + " (" + dblRate.ToString("f") + "%)";
                            }
                            else
                            {
                                string txnm = GetTaxName(GeneralFunctions.fnInt32(dr["TAXID3"].ToString()));
                                if (Settings.DecimalPlace == 3) strTaxName = txnm + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = txnm + " (" + dblRate.ToString("f") + "%)";
                            }

                            dtblTemp.Rows.Add(new object[] {
                                                "3",
                                                dr["TAXID3"].ToString(),
                                                dr["TX3TYPE"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE3"].ToString()});
                        }
                        dtblTax1 = dtblTemp;
                        dtblTemp.Dispose();
                    }

                    DataTable dtblF = new DataTable();

                    dtblF.Columns.Add("ID", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxID", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxType", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxName", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxRate", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("DTax", System.Type.GetType("System.String"));

                    foreach (DataRow drt in dtblTax1.Rows)
                    {
                        dtblF.Rows.Add(new object[] { drt["ID"].ToString(),drt["TaxID"].ToString(),drt["TaxType"].ToString(),
                                                      drt["TaxName"].ToString(),drt["TaxRate"].ToString(),"N" });
                    }

                    if (strCurrentServiceType == "Sales")
                    {
                        if (CustDTaxID > 0)
                        {
                            dtblF.Rows.Add(new object[] { "4",CustDTaxID.ToString(),CustDTaxType.ToString(),
                                                      CustDTaxName.ToString(),CustDTaxRate.ToString(),"Y" });
                        }
                    }

                    foreach (DataRow drt in dtblF.Rows)
                    {
                        if (bl100percinvdiscount) continue;
                        bool blfinddata = false;
                        foreach (DataRow dr1 in dtblTax.Rows)
                        {
                            if ((dr1["TAXID"].ToString() == drt["TAXID"].ToString()) && (dr1["DTax"].ToString() == drt["DTax"].ToString()))
                            {
                                double tx = 0;
                                if (drt["TaxType"].ToString() == "0")
                                {
                                    //tx = GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100;

                                    if (Settings.TaxInclusive == "N")
                                    {
                                        tx = (GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice) / 100;
                                    }
                                    else
                                    {
                                        //dblPrice = GeneralFunctions.FormatDouble(dblPrice / dblQty);
                                        //double tempApplicableAmount = dblPrice / ((100 + GeneralFunctions.fnDouble(drt["TaxRate"].ToString())) / 100);
                                        //tx = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(dblPrice - tempApplicableAmount) * dblQty);

                                        double tempApplicableAmount = dblPrice / ((100 + GeneralFunctions.fnDouble(drt["TaxRate"].ToString())) / 100);
                                        tx = GeneralFunctions.FormatDouble(dblPrice - tempApplicableAmount);
                                    }

                                }
                                else
                                {
                                    tx = GeneralFunctions.GetTaxFromTaxTable(GeneralFunctions.fnInt32(drt["TaxID"].ToString()), GeneralFunctions.fnDouble(drt["TaxRate"].ToString()), dblPrice);
                                }
                                dblChangeTax = dblChangeTax + GeneralFunctions.fnDouble(tx * ((100 - dblCouponPerc) / 100));
                                double prevtax = GeneralFunctions.fnDouble(dr1["Amount"].ToString());
                                double dblRate = tx * ((100 - dblCouponPerc) / 100);
                                dr1["Amount"] = Convert.ToString(prevtax + dblRate);
                                blfinddata = true;
                                break;
                            }
                        }
                        if (!blfinddata)
                        {
                            double tx = 0;
                            if (drt["TaxType"].ToString() == "0")
                            {
                                //tx = GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100;

                                if (Settings.TaxInclusive == "N")
                                {
                                    tx = (GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice) / 100;
                                }
                                else
                                {
                                    //dblPrice = GeneralFunctions.FormatDouble(dblPrice / dblQty);
                                    //double tempApplicableAmount = dblPrice / ((100 + GeneralFunctions.fnDouble(drt["TaxRate"].ToString())) / 100);
                                    //tx = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(dblPrice - tempApplicableAmount) * dblQty);

                                    double tempApplicableAmount = dblPrice / ((100 + GeneralFunctions.fnDouble(drt["TaxRate"].ToString())) / 100);
                                    tx = GeneralFunctions.FormatDouble(dblPrice - tempApplicableAmount);
                                }
                            }
                            else
                            {
                                tx = GeneralFunctions.GetTaxFromTaxTable(GeneralFunctions.fnInt32(drt["TaxID"].ToString()), GeneralFunctions.fnDouble(drt["TaxRate"].ToString()), dblPrice);
                            }

                            dtblTax.Rows.Add(new object[] { drt["TAXID"].ToString(), drt["TaxName"].ToString(), GeneralFunctions.fnDouble(tx * (100 - dblCouponPerc) / 100),
                            drt["DTax"].ToString()});
                            dblChangeTax = dblChangeTax + (tx * ((100 - dblCouponPerc) / 100));
                        }
                    }
                }
                dtblTax.DefaultView.Sort = "DTax asc";
                dtblTax.DefaultView.ApplyDefaultSort = true;

                grdTax.ItemsSource = dtblTax;
                dtblTax1.Dispose();
                dtblTax.Dispose();

                /* Adjust decimal */

                double tgrdval = 0;

                foreach (DataRow dr in (grdTax.ItemsSource as DataTable).Rows)
                {
                    tgrdval = tgrdval + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["Amount"].ToString()));
                }

                if (tgrdval != GeneralFunctions.FormatDouble(Convert.ToDouble(numTax.Text)))
                {
                    double divval = GeneralFunctions.FormatDouble(Convert.ToDouble(numTax.Text)) - tgrdval;

                    DataTable dtb = grdTax.ItemsSource as DataTable;
                    int cnt = dtb.Rows.Count;
                    int i = 0;

                    foreach (DataRow dr in dtb.Rows)
                    {
                        i++;
                        if (i == cnt)
                        {
                            dr["Amount"] = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["Amount"].ToString())) + divval;
                        }
                    }

                    grdTax.ItemsSource = dtb;

                    dtb.Dispose();
                }
            }
        }

        private string GetTaxName(int pTxID)
        {
            PosDataObject.Tax objtx = new PosDataObject.Tax();
            objtx.Connection = SystemVariables.Conn;
            return objtx.GetTaxName(pTxID);
        }
        private void PrecidiaTransactionDeclined()
        {
            new MessageBoxWindow().Show(Properties.Resources.Transaction_Declined, Properties.Resources.Error, MessageBoxButton.OK, MessageBoxImage.Information);
            PrecidiaLaneOpen();
        }
        private void ResetQty()
        {
            blPressQty = false;
            blCacheQty = false;
            intPressQty = 1;
            intPressCount = 0;
            btnMoreQty.IsChecked = false;
        }
        System.Windows.Controls.TextBox txtQty = new System.Windows.Controls.TextBox();
        private void SetTenderButton()
        {
            if (strCurrentServiceType == "Rent")
            {
                if (blRentRecall)
                {
                    BTextBlock.Text = "Return Rent Item";
                    b.ToolTip = "Return Rent Item";
                }
                else
                {
                    BTextBlock.Text = "Pay";
                    b.ToolTip = "Tender";
                }
            }
            /*else if (strCurrentServiceType == "Repair")
            {
                if (blRepairIssued)
                {
                    btnTender.Appearance.Font = new Font("Tahoma", 12.0F, FontStyle.Bold);
                    btnTender.Text = "Generate Repair Invoice";
                    btnTender.ToolTip = "Generate Repair Invoice";
                }
                else
                {
                    btnTender.Appearance.Font = new Font("Tahoma", 22.0F, FontStyle.Bold);
                    btnTender.Text = "$";
                    btnTender.ToolTip = "Tender";
                }
            }*/
            else
            {
                BTextBlock.Text = "Pay";
                b.ToolTip = "Tender";
            }
        }
        public void InitializeScreen()
        {
            intSelectedReturnInvoiceNo = 0;
         //   GeneralFunctions.SetFocus(txtSearch);
            Settings.PriceLevelForOneTime = "N";
            Settings.PriceLevelForThisSale = "N";
            intUsePriceLevel = Settings.UsePriceLevel;
            MixMatchUnique = 0;
            intCustID = 0;
            strCustomerID = "";

            dtCustomerDOB = Convert.ToDateTime(null);

            /*lbCustID.Text = "";

            lbCustAddress.Text = "";
            lbCustBal.Text = "";
            lbCustTax.Text = "";
            btnCustNote.Visible = false;
            */
            CartSL = 0;
            lbCustName.Text = "";
            btnViewCustomerDetails.Visibility = Visibility.Collapsed;
            //picCustPhoto.Image = null;
            blCustNotes = false;
            //lbCustNotes.Text = ""; --Sam
            lbcustinfo1.Text = "";
            lbcustinfo2.Text = "";
            CustDTaxID = 0;
            CustDTaxName = "";
            CustDTaxRate = 0;
            CustDTaxValue = 0;
            strTaxExempt = "N";
            strDiscountLevel = "A";

            txtCust.Text = "";
            if (dtblRepairInfo != null)
            {
                dtblRepairInfo.Rows.Clear();
            }
            if (Settings.CentralExportImport == "Y") txtCustStore.Text = Settings.StoreCode;
            dtblPOS.Rows.Clear();
            txtSKU.Text = "";
            txtQty.Text = intPressQty.ToString();
            numSubTotal.Text = "0.00";
            numDiscount.Text = "0.00";
            numTax.Text = "0.00";
            numTotal.Text = "0.00";
            intAcctPayID = 1000;

            intGiftAidID = 20000;

            btnResumeSuspend.Content = new TextBlock() { Text = "Resume" };
            //btnResumeSuspend.Style = this.FindResource("POSFunctionButtonStyle") as Style;
            intSuspendInvNo = 0;
            gridControl1.ItemsSource = dtblPOS;
            ToggleWithEmptyCart();
            grdTax.ItemsSource = null;
            blResumeTransaction = false;
            blOpenCustomerOrder = false;
            CurrentCustomerOrderID = 0;
            blWorkOrder = false;
            blReturnItem = false;
            blRentIssued = false;
            blRentRecall = false;
            blRepairIssued = false;
            blRepairRecall = false;
            blSales = false;
            GetPOSCounterInfo();
            blFunctionBtnAccess = true;
            intSuperUserID = 0;
            bl100percinvdiscount = false;
            dblRentSecurityDeposit = 0;
            repairadv = 0;
            repairdue = 0;
            repairtender = 0;
            repairparentinv = 0;
            intTaxID1 = 0;
            intTaxID2 = 0;
            intTaxID3 = 0;
            dblTax1 = 0;
            dblTax2 = 0;
            dblTax3 = 0;
            RentCalcFlag = "N";
            dblCouponAmount = 0;
            dblFeesCrg = 0;
            dblCouponPerc = 0;
            dblCouponApplicableTotal = 0;
            blExistCoupon = false;
            dtblAppt.Rows.Clear();
            lbFStotal.Text = "";

            intCardTranID = 0;

            blCardVarify = false;

            AuthCode = "";
            TranID = "";
            CardNum = "";
            CardExMM = "";
            CardExYY = "";
            CardLogo = "";
            CardType = "";
            ApprovedAmt = "";
            RefNo = "";
            CardEntry = "";
            AcqRef = "";
            Token = "";
            MerchantID = "";

            strMercuryMerchantID = "";
            MercuryProcessData = "";
            MercuryTextResponse = "";
            MercuryPurchaseAmount = 0;
            MercuryTranCode = "";
            MercuryResponseOrigin = "";
            MercuryRecordNo = "";
            MercuryResponseReturnCode = "";

            boolPAXCashBack = false;

            GeneralFunctions.SetFocus(txtSKU);

            strCurrentServiceType = Settings.POSDefaultService;
            if (strCurrentServiceType == "Sales") blSales = true;
            if (strCurrentServiceType == "Rent") blRentIssued = true;
            if (strCurrentServiceType == "Repair") blRepairIssued = true;
            if (NoOfService > 1)
            {
                ArrangeVisibleFunctions();
                AddRemoveRepairExtra();
                DisplayFunctionButtons();
            }
            SetServiceTypeButtonColor();
            SetTenderButton();

            dblTenderQT = 0;
            lbQuickTenderOutstanding.Visibility = Visibility.Collapsed;

            pnlCust.Visibility = Visibility.Collapsed;

            menuGrid.Visibility = Visibility.Collapsed;
            ChangeMenuButtonColor("Cart");
            tcPOS.SelectedIndex = 0;
            boolLoadAllItem = false;


            if (Settings.PoleScreen.Trim() != "")
            {
                string txt1 = "";
                string txt2 = "";
                ArrangePoleDisplayGreetings(ref txt1, ref txt2);
                DisplayPoleText(2, "N", "N", txt1, txt2);
            }
            else
            {
                DisplayPoleText(2, "N", "N", Properties.Resources.welcome_to, Settings.Company);
            }

            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor)) SecondMonitor.ClearTenderingDisplay();
                //SecondMonitor.ClearWeightInfo();
                SecondMonitor.InsertItem(dtblPOS, 0, lbCustName.Text.Trim(), Convert.ToDouble(numSubTotal.Text), Convert.ToDouble(numDiscount.Text), Convert.ToDouble(numTax.Text), Convert.ToDouble(numTotal.Text), dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg); // rajib

                /*
                if (Settings.CheckSecondMonitorWithPOS == "N")
                {
                    if ((sm as SecondMonitor) != null)
                    {
                        sm = null;
                        SecondMonitor.CloseSMForm();
                    }

                    if ((winplay as WinMediaPlayer) != null)
                    {
                        winplay = null;
                        WinMediaPlayer.CloseWinPlayer();
                    }

                    Process[] pArry = Process.GetProcesses();
                    foreach (Process p in pArry)
                    {
                        int procid = p.Id;
                        if ((procid == SystemVariables.SecondMonitorAppID) && (SystemVariables.SecondMonitorAppID > 0))
                        {
                            try
                            {
                                p.Kill();
                            }
                            catch
                            {
                            }
                        }
                    }
                }*/

            }



        //    GeneralFunctions.SetFocus(txtSearch);
            //ExecuteSecondMonitorApplication();
            //  GeneralFunctions.SetFocus()
        }
        public void btnFastCCClick()
        {
            PrecidiaResponse = -1;
            if (strCurrentServiceType != "Sales") return;

            dtblTender.Rows.Clear();

            if (blReturnItem) return;



            try
            {
                Cursor = System.Windows.Input.Cursors.Wait;
                if ((intCustID == 0) && (Settings.CustomerInfo == 2))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Customer_required_for_Fast_CC, "POS", MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtCust);
                    CloseMoreFunctions();
                    return;
                }
                if (intCustID > 0)
                {
                    if (!CheckActiveCustomer(intCustID))
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Transaction_is_possible_for_active_customer_only, Properties.Resources.Customer_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        GeneralFunctions.SetFocus(txtCust);
                        CloseMoreFunctions();
                        return;
                    }
                }
                if (dtblPOS.Rows.Count == 0)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Nothing_to_Tender, Properties.Resources.Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                else
                {
                    CheckStockBeforeTender();
                    if (dtblZeroStock.Rows.Count > 0)
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSOutOfStockDlg frm_POSOutOfStockDlg = new frm_POSOutOfStockDlg();
                        try
                        {
                            frm_POSOutOfStockDlg.Stock = dtblZeroStock;
                            blurGrid.Visibility = Visibility.Visible;
                            frm_POSOutOfStockDlg.ShowDialog();
                            blurGrid.Visibility = Visibility.Collapsed;
                            if (frm_POSOutOfStockDlg.DialogResult == true)
                            {
                                if (new MessageBoxWindow().Show("Are you want to remove out of stock products from the cart?",
                                    "Stock Validation", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.OK)
                                {
                                    RemoveProductFromCart();
                                    /// Set UP/Down Button to move cursor through Cart Item
                                    GetTotal(); /// Calculate and Display Cart Total
                                    ShowTax(); /// Calculate and Display Taxes of Cart Items
                                    ResetQty();  /// Reset Item Quantity
                                }
                            }
                        }
                        finally
                        {
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                        GeneralFunctions.SetFocus(txtSKU);
                    }
                }
                if (dtblZeroStock.Rows.Count > 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }


                if (dtblPOS.Rows.Count == 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                if (CheckZeroQuantity())
                {
                    if (new MessageBoxWindow().Show(Properties.Resources.Items_with_qty__0__in_the_cart__Do_you_want_to_continue_,
                        Properties.Resources.Validation, MessageBoxButton.YesNo, MessageBoxImage.Information) == MessageBoxResult.No)
                    {
                        GeneralFunctions.SetFocus(txtSKU);
                        CloseMoreFunctions();
                        return;
                    }
                }

                int ccnt = 0;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if (dr["PRODUCTTYPE"].ToString() == "C") ccnt++;
                }
                if (ccnt == dtblPOS.Rows.Count)
                {
                    new MessageBoxWindow().Show(Properties.Resources.No_item_selected_for_tendering, Properties.Resources.Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                if (Settings.DemoVersion == "Y")
                {
                    if (!ContinueWithDemoVersion())
                    {
                        new MessageBoxWindow().Show(Properties.Resources.DEMO_Version_does_not_permit_more_invoices_, Properties.Resources.DEMOVERSION, MessageBoxButton.OK, MessageBoxImage.Information);
                        Settings.PriceLevelForOneTime = "N";
                        Settings.PriceLevelForThisSale = "N";
                        CloseMoreFunctions();
                        return;
                    }
                }

                if (blWorkOrder)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Fast_CC_option_can_not_be_used_for_Work_Order_Transaction_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                    CloseMoreFunctions();
                    return;
                }

                if (Settings.POSCardPayment == "Y")
                {
                    if (Settings.PaymentGateway == 1)
                    {
                        if (Settings.ElementHPAccountID == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_Hosted_Payment_paramters_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }
                    }

                    if (Settings.PaymentGateway == 2)
                    {
                        if (Settings.MercuryHPMerchantID == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_Hosted_Payment_paramters_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }
                    }

                    if (Settings.PaymentGateway == 3)
                    {
                        if (Settings.PrecidiaClientMAC == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_Precidia_Client_MAC_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }

                        if (Settings.PrecidiaPOSLynxMAC == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_Precidia_POSLynx_MAC_in_General_Settings_, Properties.Resources.Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }
                    }

                    if (!CardVarify())
                    {
                        if (Settings.PaymentGateway == 6)
                        {
                            CallPadResetCount = 0;
                            CallEMVPadReset();

                            if (CallPadResetCount == 5)
                            {
                                CallPadResetCount = 0;
                                if (Dcap_PPAD_CmdStatus != "Success") new MessageBoxWindow().Show(Dcap_PPAD_CmdStatus + "\n\n" + Dcap_PPAD_TextResponse, Properties.Resources.Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                        }

                        if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                        if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;
                        PrecidiaDisplayOnError();
                        CloseMoreFunctions();
                        return;
                    }
                    else
                    {
                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                            PrecidiaResponse = 0;
                    }
                }

                else
                {
                    PosDataObject.TenderTypes tend = new PosDataObject.TenderTypes();
                    tend.Connection = SystemVariables.Conn;
                    int TenderID = tend.FetchCCID();

                    dtblTender.Rows.Add(new object[] { TenderID.ToString(), "Credit Card", Convert.ToDouble(numTotal.Text), "", "", "", "0", "", "" });
                }

                double tempamt = 0;

                foreach (DataRow dr in dtblTender.Rows)
                {
                    tempamt = tempamt + GeneralFunctions.fnDouble(dr["AMOUNT"].ToString());
                }

                if (tempamt == Convert.ToDouble(numTotal.Text))
                {

                    int intINV = 0;
                    string srterrmsg = "";
                    PosDataObject.POS objpos = new PosDataObject.POS();
                    objpos.Connection = SystemVariables.Conn;
                    objpos.EmployeeID = 0;
                    objpos.CustomerID = intCustID;
                    objpos.TransType = 1; // sales
                    objpos.ReceiptCnt = 1;
                    objpos.Status = 3;
                    objpos.Tax = Convert.ToDouble(numTax.Text);
                    double tempcoupon = 0;
                    //CouponCalculation(dtblPOS, ref tempcoupon);
                    //dblCouponAmount = 0;
                    dblCouponPerc = 0;
                    dblCouponApplicableTotal = 0;

                    CouponCalculation(dtblPOS, ref tempcoupon, ref dblCouponPerc, ref dblCouponApplicableTotal);

                    double totfee = 0;
                    double totfeetax = 0;

                    FeesCalculation(dtblPOS, ref totfee, ref totfeetax);

                    objpos.TotalFees = totfee;
                    objpos.TotalFeesTax = totfeetax;

                    double tempdtx = 0;
                    DTaxCalculation(dtblPOS, ref tempdtx);
                    objpos.DTaxID = CustDTaxID;
                    objpos.DTax = tempdtx;

                    objpos.Coupon = tempcoupon;
                    objpos.CouponPerc = dblCouponPerc;
                    objpos.Discount = Convert.ToDouble(numDiscount.Text);
                    objpos.DiscountReason = "";
                    objpos.TotalSale = Convert.ToDouble(numTotal.Text);


                    objpos.ItemDataTable = FastCashFinalDataTable();

                    objpos.TaxID1 = intTaxID1;
                    objpos.TaxID2 = intTaxID2;
                    objpos.TaxID3 = intTaxID3;
                    objpos.Tax1 = dblTax1;
                    objpos.Tax2 = dblTax2;
                    objpos.Tax3 = dblTax3;
                    objpos.ErrorMsg = "";
                    objpos.ChangeAmount = 0;
                    objpos.SuspendInvoiceNo = intSuspendInvNo;

                    objpos.ChangedByAdmin = intSuperUserID;
                    objpos.FunctionButtonAccess = blFunctionBtnAccess;

                    //AddTenderForFastCash();
                    objpos.TenderDataTable = dtblTender;
                    // static value
                    objpos.StoreID = 1;
                    objpos.RegisterID = 1;
                    objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
                    objpos.TransNoteNo = 0;
                    objpos.LayawayNo = 0;
                    objpos.TransMSeconds = 0;
                    // static value
                    objpos.TerminalName = Settings.TerminalName;
                    dtblForStockUpdate = FastCashFinalDataTable();

                    if (Settings.AcceptTips == "Y")
                    {
                        objpos.AuthorisedTranNo = AuthCode;
                        objpos.SaleTranNo = "";
                    }
                    else
                    {
                        objpos.AuthorisedTranNo = "";
                        objpos.SaleTranNo = AuthCode;
                    }

                    objpos.CardTranID = intCardTranID;
                    objpos.tblCardID = cardidentity;
                    objpos.Return = blReturnItem;
                    objpos.NewLayaway = false;
                    objpos.Layaway = false;
                    objpos.LayawayRefund = false;
                    objpos.ApptDataTable = dtblAppt;

                    objpos.ServiceType = strCurrentServiceType;
                    objpos.GCCentralFlag = Settings.CentralExportImport;
                    objpos.GCOPStore = Settings.StoreCode;

                    objpos.OperateStore = Settings.StoreCode;

                    objpos.BeginTransaction();
                    if (objpos.CreateInvoice())
                    {
                        intINV = objpos.ID;

                    }
                    objpos.EndTransaction();
                    srterrmsg = objpos.ErrorMsg;
                    if (srterrmsg == "")
                    {
                        /*
                        if (Settings.ReceiptPrinterName != "")
                        {
                            if (IsOpenCashDrawer())
                            {
                                try
                                {
                                    RawPrinterHelper.OpenCashDrawer1(Settings.ReceiptPrinterName, Settings.CashDrawerCode);
                                }
                                catch
                                {
                                }
                            }
                        }*/

                        if (dtblForStockUpdate != null)
                        {
                            if (dtblForStockUpdate.Rows.Count > 0)
                            {
                                string strId = ""; int intStock = 0;
                                System.Windows.Controls.Control[] findctrl;
                                PosDataObject.POS objPOS = new PosDataObject.POS();
                                objPOS.Connection = SystemVariables.Conn;

                                foreach (DataRow dr in dtblForStockUpdate.Rows)
                                {
                                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                                        || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "X")
                                        || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                                        || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                                    // avoid gift certificate, account payment,bottle refund
                                    strId = dr["ID"].ToString();
                                    if (strId != "")
                                    {
                                        /* Block By Rajib for (int i = 0; i < POSItemsListBox.Items.Count; i++)
                                        {
                                            ListBoxItem lbi = POSItemsListBox.Items[i] as ListBoxItem;
                                            if ((lbi.Tag as POSItem).ItemID.ToString() == strId)
                                            {
                                                (lbi.Tag as POSItem).CurrentStock = intStock;
                                                break;
                                            }

                                        } Block By Rajib */

                                        // findctrl = pnlCat.Controls.Find(strId, true);
                                        //POSItemsListBox.Items.IndexOf()
                                        //if (findctrl.Length > 0)
                                        //{
                                        //    if (findctrl != null)
                                        //    {
                                        //        if (findctrl[0] is POSControls.POSItem)
                                        //        {
                                        //            intStock = objPOS.GetStockforItem(GeneralFunctions.fnInt32(strId));
                                        //             //(findctrl[0] as POSControls.POSItem).CurrentStock = intStock;
                                        //        }
                                        //    }
                                        //}
                                    }
                                }
                            }
                        }
                        blInitAutoSignOut = true;
                        blInitAutoSignOutAfterTender = true;

                        if (Settings.POSCardPayment == "Y")
                        {
                            if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                            {
                                if (PrecidiaResponse == 0)
                                {
                                    PrecidiaLaneOpen();
                                }
                            }
                        }

                        InitializeScreen();
                    }

                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                }
                else
                {
                    bool blclearflg = false;
                    blurGrid.Visibility = Visibility.Visible;
                    frmPOSTenderDlg frm_POSTenderDlg = new frmPOSTenderDlg();
                    try
                    {

                        frm_POSTenderDlg.ResumeTransaction = blResumeTransaction;
                        frm_POSTenderDlg.WorkOrderTransaction = blWorkOrder;
                        if (blWorkOrder)
                        {
                            frm_POSTenderDlg.WODatatbl = FinalDataTable();
                        }
                        frm_POSTenderDlg.SelectedReturnInvoiceNo = intSelectedReturnInvoiceNo;
                        frm_POSTenderDlg.FashCC = true;
                        frm_POSTenderDlg.FashCCTender = dtblTender;
                        frm_POSTenderDlg.ApptDatatbl = dtblAppt;
                        frm_POSTenderDlg.SuspendInvoiceNo = intSuspendInvNo;
                        frm_POSTenderDlg.ReturnItem = blReturnItem;
                        frm_POSTenderDlg.ExistCoupon = blExistCoupon;
                        if (strCurrentServiceType == "Sales") frm_POSTenderDlg.Sale = true; else frm_POSTenderDlg.Sale = false;
                        frm_POSTenderDlg.ServiceType = strCurrentServiceType;
                        frm_POSTenderDlg.RentIssued = blRentIssued;
                        frm_POSTenderDlg.RentRecall = blRentRecall;
                        frm_POSTenderDlg.RepairIssued = blRepairIssued;
                        frm_POSTenderDlg.RepairRecall = blRepairRecall;
                        frm_POSTenderDlg.RepairAdvance = repairadv;
                        frm_POSTenderDlg.RepairDue = repairdue;
                        frm_POSTenderDlg.RepairTender = repairtender;
                        frm_POSTenderDlg.IssueRepairInvNo = repairparentinv;

                        frm_POSTenderDlg.RepairAmount = double.Parse(numTotal.Text);
                        frm_POSTenderDlg.dtlRepairItemInfo = dtblRepairInfo;

                        frm_POSTenderDlg.RentSecurityDeposit = dblRentSecurityDeposit;
                        frm_POSTenderDlg.IssueRentInvNo = RentReturnInv;
                        frm_POSTenderDlg.RentCalcFlag = RentCalcFlag;
                        frm_POSTenderDlg.FinalFlag = false;
                        frm_POSTenderDlg.CustID = intCustID;
                        frm_POSTenderDlg.TaxExempt = strTaxExempt;
                        frm_POSTenderDlg.StoreCr = dblStoreCr;
                        frm_POSTenderDlg.CustAcctLimit = dblCustAcctLimit;
                        frm_POSTenderDlg.CustAcctBalance = dblCustAcctBalance;
                        frm_POSTenderDlg.POSDatatbl = dtblPOS;
                        frm_POSTenderDlg.MaxInvNo = intMaxInvNo;
                        frm_POSTenderDlg.SuperUserID = intSuperUserID;
                        frm_POSTenderDlg.FunctionBtnAccess = blFunctionBtnAccess;
                        //frm_POSTenderDlg.calledfrm = this;--Sam
                        frm_POSTenderDlg.dcardidentityfromfastcc = cardidentity;
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSTenderDlg.ShowDialog();
                        blurGrid.Visibility = Visibility.Collapsed;
                    }
                    finally
                    {
                        blurGrid.Visibility = Visibility.Collapsed;
                        //Todo: frmPOSTenderDlg blclearflg = frm_POSTenderDlg.FinalFlag;
                        //    dtblForStockUpdate = frm_POSTenderDlg.dtblForStockUpdate;  /*** for stock update ****/
                        //    frm_POSTenderDlg.Dispose();
                    }
                    if (blclearflg)
                    {
                        //  Update Stock here using the datatable dtblForStockUpdate  //
                        if (dtblForStockUpdate != null)
                        {
                            if (dtblForStockUpdate.Rows.Count > 0)
                            {
                                string strId = ""; int intStock = 0;
                                System.Windows.Controls.Control[] findctrl;
                                PosDataObject.POS objPOS = new PosDataObject.POS();
                                objPOS.Connection = SystemVariables.Conn;

                                foreach (DataRow dr in dtblForStockUpdate.Rows)
                                {
                                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "H")
                                        || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")) continue;
                                    // avoid gift certificate, account payment
                                    strId = dr["ID"].ToString();
                                    if (strId != "")
                                    {

                                        /* Block By Rajib for (int i = 0; i < POSItemsListBox.Items.Count; i++)
                                        {
                                            ListBoxItem lbi = POSItemsListBox.Items[i] as ListBoxItem;
                                            if ((lbi.Tag as POSItem).ItemID.ToString() == strId)
                                            {
                                                (lbi.Tag as POSItem).CurrentStock = intStock;
                                                break;
                                            }

                                        }
                                        Block By Rajib */

                                        // findctrl = pnlCat.Controls.Find(strId, true);
                                        //    if (findctrl.Length > 0)
                                        //    {
                                        //        if (findctrl != null)
                                        //        {
                                        //         if (findctrl[0] is POSControls.POSItem)
                                        //                if (findctrl[0] is POSControls.POSItem)
                                        //                {
                                        //                    intStock = objPOS.GetStockforItem(GeneralFunctions.fnInt32(strId));
                                        //                    (findctrl[0] as POSControls.POSItem).CurrentStock = intStock;
                                        //                }
                                        //        }
                                        //    }
                                    }
                                }
                            }
                        }
                        blInitAutoSignOut = true;
                        blInitAutoSignOutAfterTender = true;
                        InitializeScreen();
                    }
                    else
                    {
                        int fval = gridView1.FocusedRowHandle;
                        //SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), numSubTotal.Text, numDiscount.Text, numTax.Text, numTotal.Text);
                    }
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                }
            }
            finally
            {
                Cursor = System.Windows.Input.Cursors.Arrow;
            }
        }
        private void CallEMVPadReset()
        {
            /*
            if (CallPadResetCount != 5)
            {
                DSIEMVXLib.DsiEMVX dd1 = new DSIEMVXLib.DsiEMVX();
                string output = dd1.ProcessTransaction(GeneralFunctions.PrepareEMVPadResetXML());
                Dcap_PPAD_CmdStatus = "";
                Dcap_PPAD_TextResponse = "";
                string cmdstatus = GeneralFunctions.GetEMVPadResetStatus(output);
                Dcap_PPAD_TextResponse = GeneralFunctions.GetEMVPadResetTextResponse(output);
                Dcap_PPAD_CmdStatus = cmdstatus;
                GeneralFunctions.StoreResponseSequence(output);
                if (cmdstatus != "Success")
                {
                    CallPadResetCount++;
                    CallEMVPadReset();
                }
                else
                {
                    CallPadResetCount = 0;
                }
            }
            else
            {
                return;
            }*/
        }
        private void FeesCalculation(DataTable dtbl, ref double resultFees, ref double resultFeesTax)
        {
            foreach (DataRow dr in dtbl.Rows)
            {
                if (dr["FEESID"].ToString() == "0") continue;
                double qty = GeneralFunctions.fnDouble(dr["QTY"].ToString());
                if (!blReturnItem)
                {
                    resultFees = resultFees + dr["FEESQTY"].ToString() == "Y" ? GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEES"].ToString())) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEES"].ToString()));
                    resultFeesTax = resultFeesTax + dr["FEESQTY"].ToString() == "Y" ? GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEESTAX"].ToString())) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEESTAX"].ToString()));
                }
                else
                {
                    resultFees = resultFees + dr["FEESQTY"].ToString() == "Y" ? -GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEES"].ToString())) : -GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEES"].ToString()));
                    resultFeesTax = resultFeesTax + dr["FEESQTY"].ToString() == "Y" ? -GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEESTAX"].ToString())) : -GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEESTAX"].ToString()));
                }
            }
        }
        private void DTaxCalculation(DataTable dtbl, ref double resultDTax)
        {
            foreach (DataRow dr in dtbl.Rows)
            {
                if (dr["DTXID"].ToString() == "0") continue;
                resultDTax = resultDTax + GeneralFunctions.fnDouble(dr["DTX"].ToString());
            }
        }
        private DataTable FastCashFinalDataTable()
        {
            DataTable dtblFinal = new DataTable();

            dtblFinal.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ONHANDQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NORMALQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("COST", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("QTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("RATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DEPT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("CAT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMDESC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("ITEMID", System.Type.GetType("System.String"));
            // add for layaway Invoice
            dtblFinal.Columns.Add("TAX1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TOTALSALE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTREASON", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("LAYAWAYAMOUNT", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("NOTES", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMDISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//38
            dtblFinal.Columns.Add("TX1", System.Type.GetType("System.Double"));//39
            dtblFinal.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//40
            dtblFinal.Columns.Add("TX2", System.Type.GetType("System.Double"));//41
            dtblFinal.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//42
            dtblFinal.Columns.Add("TX3", System.Type.GetType("System.Double"));//43

            dtblFinal.Columns.Add("MIXMATCHID", System.Type.GetType("System.Int32"));//56
            dtblFinal.Columns.Add("MIXMATCHFLAG", System.Type.GetType("System.String"));//57
            dtblFinal.Columns.Add("MIXMATCHTYPE", System.Type.GetType("System.String"));//58
            dtblFinal.Columns.Add("MIXMATCHVALUE", System.Type.GetType("System.Double"));//59
            dtblFinal.Columns.Add("MIXMATCHQTY", System.Type.GetType("System.Int32"));//60
            dtblFinal.Columns.Add("MIXMATCHUNIQUE", System.Type.GetType("System.Int32"));//61
            dtblFinal.Columns.Add("MIXMATCHLAST", System.Type.GetType("System.String"));//61

            dtblFinal.Columns.Add("FEESID", System.Type.GetType("System.String"));//62
            dtblFinal.Columns.Add("FEESLOGIC", System.Type.GetType("System.String"));//63
            dtblFinal.Columns.Add("FEESVALUE", System.Type.GetType("System.String"));//64
            dtblFinal.Columns.Add("FEESTAXRATE", System.Type.GetType("System.String"));//65
            dtblFinal.Columns.Add("FEES", System.Type.GetType("System.String"));//66
            dtblFinal.Columns.Add("FEESTAX", System.Type.GetType("System.String"));//67
            dtblFinal.Columns.Add("FEESTEXT", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("FEESQTY", System.Type.GetType("System.String"));//69

            dtblFinal.Columns.Add("SALEPRICEID", System.Type.GetType("System.Int32"));//70

            // customer Destination Tax
            dtblFinal.Columns.Add("DTXID", System.Type.GetType("System.Int32"));//71
            dtblFinal.Columns.Add("DTXTYPE", System.Type.GetType("System.Int32"));//72
            dtblFinal.Columns.Add("DTXRATE", System.Type.GetType("System.Double"));//73
            dtblFinal.Columns.Add("DTX", System.Type.GetType("System.Double"));//74

            dtblFinal.Columns.Add("EDITF", System.Type.GetType("System.String"));//75

            dtblFinal.Columns.Add("PROMPTPRICE", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("BUYNGETFREEHEADERID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREECATEGORY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREENAME", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("AGE", System.Type.GetType("System.Int32"));

            dtblFinal.Columns.Add("GRATE", System.Type.GetType("System.Double"));
            dtblFinal.Columns.Add("GPRICE", System.Type.GetType("System.Double"));

            dtblFinal.Columns.Add("UOM", System.Type.GetType("System.String"));

            // fetch TaxID, TaxName first

            string strTaxID1 = "0";
            string strTaxID2 = "0";
            string strTaxID3 = "0";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";
            string strTaxRate1 = "0";
            string strTaxRate2 = "0";
            string strTaxRate3 = "0";


            int intCount = 0;
            int iTaxType1 = 0;
            int iTaxType2 = 0;
            int iTaxType3 = 0;
            double TaxVal1 = 0;
            double TaxVal2 = 0;
            double TaxVal3 = 0;


            // Fees & Charges

            int iFeeID = 0;
            string sFeeLogic = "";
            double dFeeVal = 0;
            double dFeeTxRate = 0;
            double dFee = 0;
            double dFeeTx = 0;
            string sFeeText = "";
            string sFeeQty = "N";

            int idtxid = 0;
            int idtxtype = 0;
            double ddtxrate = 0;
            double ddtx = 0;

            int iAge = 0;

            double dGRate = 0;
            double dGPrice = 0;

            DataTable dtblTaxHeader = new DataTable();
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTaxHeader = objTax.FetchActiveTax();
            foreach (DataRow dr in dtblTaxHeader.Rows)
            {
                intCount++;
                if (intCount == 1)
                {
                    strTaxID1 = dr["ID"].ToString();
                    strTaxName1 = dr["TaxName"].ToString();
                    strTaxRate1 = dr["TaxRate"].ToString();
                }
                if (intCount == 2)
                {
                    strTaxID2 = dr["ID"].ToString();
                    strTaxName2 = dr["TaxName"].ToString();
                    strTaxRate2 = dr["TaxRate"].ToString();
                }
                if (intCount == 3)
                {
                    strTaxID3 = dr["ID"].ToString();
                    strTaxName3 = dr["TaxName"].ToString();
                    strTaxRate3 = dr["TaxRate"].ToString();
                    break;
                }
            }
            dtblTaxHeader.Dispose();

            if (!blReturnItem)
            {
                foreach (DataRow dr1 in dtblPOS.Rows)
                {
                    string pSKU = "";
                    string pDept = "";
                    string pCat = "";
                    string pT1 = "N";
                    string pT2 = "N";
                    string pT3 = "N";
                    string pPrA = "0";
                    string pPrB = "0";
                    string pPrC = "0";
                    string pDL = "A";
                    string pCID = "0";
                    int iSalePriceID = 0;
                    string pEdit = "N";
                    string pPrompt = "N";
                    int pBuyID = 0;
                    string pBuyCat = "X";
                    string pBuyCaption = "";

                    if (intCustID == 0)
                    {
                        pDL = "A";
                        pCID = "0";
                    }
                    else
                    {
                        pDL = strDiscountLevel;
                        pCID = intCustID.ToString();
                    }

                    iTaxType1 = 0;
                    iTaxType2 = 0;
                    iTaxType3 = 0;
                    TaxVal1 = 0;
                    TaxVal2 = 0;
                    TaxVal3 = 0;

                    int tx1ty = 0;
                    int tx2ty = 0;
                    int tx3ty = 0;

                    int tx1id = 0;
                    int tx2id = 0;
                    int tx3id = 0;

                    double tx1 = 0;
                    double tx2 = 0;
                    double tx3 = 0;

                    dGRate = 0;
                    dGPrice = 0;

                    tx1ty = GeneralFunctions.fnInt32(dr1["TX1TYPE"].ToString());
                    tx2ty = GeneralFunctions.fnInt32(dr1["TX2TYPE"].ToString());
                    tx3ty = GeneralFunctions.fnInt32(dr1["TX3TYPE"].ToString());

                    tx1id = GeneralFunctions.fnInt32(dr1["TX1ID"].ToString());
                    tx2id = GeneralFunctions.fnInt32(dr1["TX2ID"].ToString());
                    tx3id = GeneralFunctions.fnInt32(dr1["TX3ID"].ToString());

                    tx1 = GeneralFunctions.fnDouble(dr1["TX1"].ToString());
                    tx2 = GeneralFunctions.fnDouble(dr1["TX2"].ToString());
                    tx3 = GeneralFunctions.fnDouble(dr1["TX3"].ToString());

                    iFeeID = GeneralFunctions.fnInt32(dr1["FEESID"].ToString());
                    sFeeLogic = dr1["FEESLOGIC"].ToString();
                    dFeeVal = GeneralFunctions.fnDouble(dr1["FEESVALUE"].ToString());
                    dFeeTxRate = GeneralFunctions.fnDouble(dr1["FEESTAXRATE"].ToString());
                    dFee = GeneralFunctions.fnDouble(dr1["FEES"].ToString());
                    dFeeTx = GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString());
                    sFeeText = dr1["FEESTEXT"].ToString();
                    sFeeQty = dr1["FEESQTY"].ToString();
                    idtxid = GeneralFunctions.fnInt32(dr1["DTXID"].ToString());
                    idtxtype = GeneralFunctions.fnInt32(dr1["DTXTYPE"].ToString());
                    ddtxrate = GeneralFunctions.fnDouble(dr1["DTXRATE"].ToString());
                    ddtx = GeneralFunctions.fnDouble(dr1["DTX"].ToString());

                    pEdit = dr1["EDITF"].ToString();
                    pPrompt = dr1["PROMPTPRICE"].ToString();

                    pBuyID = GeneralFunctions.fnInt32(dr1["BUYNGETFREEHEADERID"].ToString());
                    pBuyCat = dr1["BUYNGETFREECATEGORY"].ToString();
                    pBuyCaption = dr1["BUYNGETFREENAME"].ToString();

                    iSalePriceID = GeneralFunctions.fnInt32(dr1["SALEPRICEID"].ToString());

                    iAge = GeneralFunctions.fnInt32(dr1["AGE"].ToString());

                    dGRate = GeneralFunctions.fnDouble(dr1["GRATE"].ToString());
                    dGPrice = GeneralFunctions.fnDouble(dr1["GPRICE"].ToString());

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx1id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx1id > 0))
                    {
                        iTaxType1 = tx1ty;
                        TaxVal1 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx2id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx2id > 0))
                    {
                        iTaxType1 = tx2ty;
                        TaxVal1 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx3id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx3id > 0))
                    {
                        iTaxType1 = tx3ty;
                        TaxVal1 = tx3;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx1id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx1id > 0))
                    {
                        iTaxType2 = tx1ty;
                        TaxVal2 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx2id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx2id > 0))
                    {
                        iTaxType2 = tx2ty;
                        TaxVal2 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx3id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx3id > 0))
                    {
                        iTaxType2 = tx3ty;
                        TaxVal2 = tx3;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx1id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx1id > 0))
                    {
                        iTaxType3 = tx1ty;
                        TaxVal3 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx2id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx2id > 0))
                    {
                        iTaxType3 = tx2ty;
                        TaxVal3 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx3id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx3id > 0))
                    {
                        iTaxType3 = tx3ty;
                        TaxVal3 = tx3;
                    }


                    if (dr1["PRODUCTTYPE"].ToString() == "G")                   // Gift Certificate
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "GC",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),"","0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString()),
                                        dr1["MIXMATCHFLAG"].ToString(),
                                        dr1["MIXMATCHTYPE"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString()),
                                        dr1["MIXMATCHLAST"].ToString(),
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,
                                        idtxid,idtxtype,ddtxrate,ddtx,pEdit,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "O")              // Bottle Refund
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "BTL",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),"","0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString()),
                                        dr1["MIXMATCHFLAG"].ToString(),
                                        dr1["MIXMATCHTYPE"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString()),
                                        dr1["MIXMATCHLAST"].ToString(),
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "C") // Coupon
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"2",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString()),
                                        dr1["MIXMATCHFLAG"].ToString(),
                                        dr1["MIXMATCHTYPE"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString()),
                                        dr1["MIXMATCHLAST"].ToString(),
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "H") // Fees in Ticket
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "FEE COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"2",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString()),
                                        dr1["MIXMATCHFLAG"].ToString(),
                                        dr1["MIXMATCHTYPE"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString()),
                                        dr1["MIXMATCHLAST"].ToString(),
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "Z") // Special Mix n Match
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "Mix n Match",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"9",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString()),
                                        dr1["MIXMATCHFLAG"].ToString(),
                                        dr1["MIXMATCHTYPE"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString()),
                                        dr1["MIXMATCHLAST"].ToString(),
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "A") // Account Pay
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "AR",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),"","0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString()),
                                        dr1["MIXMATCHFLAG"].ToString(),
                                        dr1["MIXMATCHTYPE"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString()),
                                        dr1["MIXMATCHLAST"].ToString(),
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "B") // Blank Line
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        "Blank",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString()),
                                        dr1["MIXMATCHFLAG"].ToString(),
                                        dr1["MIXMATCHTYPE"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString()),
                                        dr1["MIXMATCHLAST"].ToString(),
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else
                    {
                        int pID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                        FetchItemAdditionData(pID, ref pSKU, ref pDept, ref pCat, ref pPrA, ref pPrB, ref pPrC);

                        if (strTaxExempt == "N")
                        {
                            GetTaxable(pID, strTaxID1, strTaxID2, strTaxID3, ref pT1, ref pT2, ref pT3);
                        }
                        /*string strPrice = "0";
                        string strNewPrice = "0";
                        if (pDL == "A")
                        {
                            if (GeneralFunctions.fnDouble(pPrA) > GeneralFunctions.fnDouble(dr1["PRICE"].ToString())) strNewPrice = dr1["PRICE"].ToString();
                        }
                        if (pDL == "B")
                        {
                            if (GeneralFunctions.fnDouble(pPrB) > GeneralFunctions.fnDouble(dr1["PRICE"].ToString())) strNewPrice = dr1["PRICE"].ToString();
                        }
                        if (pDL == "C")
                        {
                            if (GeneralFunctions.fnDouble(pPrC) > GeneralFunctions.fnDouble(dr1["PRICE"].ToString())) strNewPrice = dr1["PRICE"].ToString();
                        }*/

                        if (pEdit == "N")
                        {

                            dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString()),
                                        dr1["MIXMATCHFLAG"].ToString(),
                                        dr1["MIXMATCHTYPE"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString()),
                                        dr1["MIXMATCHLAST"].ToString(),
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pPrompt,pBuyID,pBuyCat,pBuyCaption,iAge,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                        }

                        if (pEdit == "Y")
                        {

                            dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),

                                        "0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),

                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString()),
                                        dr1["MIXMATCHFLAG"].ToString(),
                                        dr1["MIXMATCHTYPE"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString()),
                                        GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString()),
                                        dr1["MIXMATCHLAST"].ToString(),
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pPrompt,pBuyID,pBuyCat,pBuyCaption,iAge,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                        }
                    }
                }

            }
            else
            {
                foreach (DataRow drR in dtblPOS.Rows)
                {

                    iFeeID = GeneralFunctions.fnInt32(drR["FEESID"].ToString());
                    sFeeLogic = drR["FEESLOGIC"].ToString();
                    dFeeVal = GeneralFunctions.fnDouble(drR["FEESVALUE"].ToString());
                    dFeeTxRate = GeneralFunctions.fnDouble(drR["FEESTAXRATE"].ToString());
                    dFee = GeneralFunctions.fnDouble(drR["FEES"].ToString());
                    dFeeTx = GeneralFunctions.fnDouble(drR["FEESTAX"].ToString());
                    sFeeText = drR["FEESTEXT"].ToString();
                    sFeeQty = drR["FEESQTY"].ToString();

                    idtxid = GeneralFunctions.fnInt32(drR["DTXID"].ToString());
                    idtxtype = GeneralFunctions.fnInt32(drR["DTXTYPE"].ToString());
                    ddtxrate = GeneralFunctions.fnDouble(drR["DTXRATE"].ToString());
                    ddtx = GeneralFunctions.fnDouble(drR["DTX"].ToString());


                    DataTable dtblR = new DataTable();
                    PosDataObject.POS objR = new PosDataObject.POS();
                    objR.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    int d = GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString());
                    dtblR = objR.FetchItemDetails(GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString()));
                    foreach (DataRow drR1 in dtblR.Rows)
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        drR1["ProductID"].ToString(),
                                        drR1["Description"].ToString(),
                                        drR1["ProductType"].ToString(),
                                        "0",
                                        "0",
                                        drR1["Cost"].ToString(),
                                        drR["Qty"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["NormalPrice"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["TaxID1"].ToString(),
                                        drR1["TaxID2"].ToString(),
                                        drR1["TaxID3"].ToString(),
                                        drR1["Taxable1"].ToString(),
                                        drR1["Taxable2"].ToString(),
                                        drR1["Taxable3"].ToString(),
                                        drR1["TaxRate1"].ToString(),
                                        drR1["TaxRate2"].ToString(),
                                        drR1["TaxRate3"].ToString(),
                                        drR1["SKU"].ToString(),
                                        drR1["DepartmentID"].ToString(),
                                        drR1["CategoryID"].ToString(),
                                        drR1["UOMCount"].ToString(),
                                        drR1["UOMPrice"].ToString(),
                                        drR1["UOMDesc"].ToString(),
                                        drR1["MatrixOptionID"].ToString(),
                                        drR1["OptionValue1"].ToString(),
                                        drR1["OptionValue2"].ToString(),
                                        drR1["OptionValue3"].ToString(),drR["MATRIXOID"].ToString(),
                                        "0","0","0","0","0","0","","0",
                                        GeneralFunctions.fnInt32(drR["MIXMATCHID"].ToString()),
                                        drR["MIXMATCHFLAG"].ToString(),
                                        drR["MIXMATCHTYPE"].ToString(),
                                        GeneralFunctions.fnDouble(drR["MIXMATCHVALUE"].ToString()),
                                        GeneralFunctions.fnInt32(drR["MIXMATCHQTY"].ToString()),
                                        GeneralFunctions.fnInt32(drR["MIXMATCHUNIQUE"].ToString()),
                                        drR["MIXMATCHLAST"].ToString(),
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        idtxid,idtxtype,ddtxrate,ddtx,
                                        drR["EDITF"].ToString(),drR["PROMPTPRICE"].ToString(),
                                        drR["BuyNGetFreeHeaderID"].ToString(),
                                        drR["BuyNGetFreeCategory"].ToString(),
                                        drR["BuyNGetFreeName"].ToString(),
                                        GeneralFunctions.fnInt32(drR["AGE"].ToString()),
                                        GeneralFunctions.fnDouble(drR["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(drR["GPRICE"].ToString()),
                                        drR["UOM"].ToString()});
                    }
                    dtblR.Dispose();
                }
            }

            intTaxID1 = GeneralFunctions.fnInt32(strTaxID1);
            intTaxID2 = GeneralFunctions.fnInt32(strTaxID2);
            intTaxID3 = GeneralFunctions.fnInt32(strTaxID3);

            if (strTaxExempt == "N")
            {
                GetTax();
                DataTable dtblTaxS = dtblTax;
                foreach (DataRow drTax in dtblTaxS.Rows)
                {
                    if (drTax["DTax"].ToString() == "Y") continue;
                    if (drTax["TAXID"].ToString() == strTaxID1) dblTax1 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                    if (drTax["TAXID"].ToString() == strTaxID2) dblTax2 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                    if (drTax["TAXID"].ToString() == strTaxID3) dblTax3 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                }
                dtblTaxS.Dispose();
                dtblTax.Dispose();
            }


            return dtblFinal;
        }


        private void GetTaxable(int pID, string pTID1, string pTID2, string pTID3,
                                ref string pT1, ref string pT2, ref string pT3)
        {
            pT1 = "N";
            pT2 = "N";
            pT3 = "N";
            DataTable dtblTax1 = new DataTable();
            PosDataObject.Product objTax = new PosDataObject.Product();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTax1 = objTax.ShowActiveTaxes(pID);
            foreach (DataRow drt in dtblTax1.Rows)
            {
                if (drt["TAXID"].ToString() == pTID1)
                {
                    pT1 = "Y";
                }
                if (drt["TAXID"].ToString() == pTID2)
                {
                    pT2 = "Y";
                }
                if (drt["TAXID"].ToString() == pTID3)
                {
                    pT3 = "Y";
                }
            }
            dtblTax1.Dispose();
        }

        private void GetTax()
        {
            if (strTaxExempt == "N")
            {
                dtblTax = new DataTable();
                DataTable dtblTax1 = new DataTable();
                dtblTax.Columns.Add("TAXID", System.Type.GetType("System.String"));
                dtblTax.Columns.Add("Tax", System.Type.GetType("System.String"));
                dtblTax.Columns.Add("Amount", System.Type.GetType("System.Double"));
                dtblTax.Columns.Add("DTax", System.Type.GetType("System.String"));
                int intRowID = 0;
                double dblChangeTax = 0;
                double dblDiscountSum = 0;
                int intCountRow = dtblPOS.Rows.Count;
                int intCountCRow = dtblPOS.Rows.Count;

                if (bl100percinvdiscount) return;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    intCountCRow++;
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                        || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                        || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                    int intPID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                    double dblPrice = GeneralFunctions.fnDouble(dr["PRICE"].ToString());
                    /*if (intCountCRow != intCountRow)
                    {
                        dblPrice = dblPrice - (dblPrice * dblDiscountPercent / 100);
                        dblDiscountSum = dblDiscountSum + (dblPrice * dblDiscountPercent / 100);
                    }
                    else
                    {
                        dblPrice = dblDiscount - dblDiscountSum;
                    }*/

                    double dblTaxR = 0;
                    PosDataObject.Product objTax = new PosDataObject.Product();
                    objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    if ((strCurrentServiceType == "Sales") || (strCurrentServiceType == "Repair")) dtblTax1 = objTax.ShowActiveTaxes(intPID);
                    if (strCurrentServiceType == "Rent") dtblTax1 = objTax.ShowActiveRentTaxes(intPID);
                    //if (strCurrentServiceType == "Repair") dtblTax1 = objTax.ShowActiveRepairTaxes(intPID);


                    DataTable dtblF = new DataTable();

                    dtblF.Columns.Add("ID", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxID", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxType", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxName", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxRate", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("DTax", System.Type.GetType("System.String"));




                    foreach (DataRow drt in dtblTax1.Rows)
                    {
                        dtblF.Rows.Add(new object[] { drt["ID"].ToString(),drt["TaxID"].ToString(),drt["TaxType"].ToString(),
                                                      drt["TaxName"].ToString(),drt["TaxRate"].ToString(),"N" });
                    }

                    if (strCurrentServiceType == "Sales")
                    {
                        if (CustDTaxID > 0)
                        {
                            dtblF.Rows.Add(new object[] { "4",CustDTaxID.ToString(),CustDTaxType.ToString(),
                                                      CustDTaxName.ToString(),CustDTaxRate.ToString(),"Y" });
                        }
                    }


                    foreach (DataRow drt in dtblF.Rows)
                    {
                        bool blfinddata = false;
                        foreach (DataRow dr1 in dtblTax.Rows)
                        {

                            if ((dr1["TAXID"].ToString() == drt["TAXID"].ToString()) && (dr1["DTax"].ToString() == drt["DTax"].ToString()))
                            {
                                dblChangeTax = dblChangeTax + GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100;
                                double prevtax = GeneralFunctions.fnDouble(dr1["Amount"].ToString());
                                double dblRate = GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100;
                                dr1["Amount"] = Convert.ToString(prevtax + dblRate);
                                blfinddata = true;
                                break;
                            }
                        }
                        if (!blfinddata)
                        {
                            dtblTax.Rows.Add(new object[] { drt["TAXID"].ToString(), drt["TaxName"].ToString(),
                                GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100, drt["DTax"].ToString()});
                            dblChangeTax = dblChangeTax + GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100;
                        }
                    }
                }
                dtblTax1.Dispose();
            }
        }
        private void CloseMoreFunctions()
        {
            if (iscallfromMFV)
            {
                //pnlmfV.Width = 1; --Sam
                //pnlmfV.Visible = false; --Sam
                if (frmPOSMoreFunctionsControl != null)
                {
                    frmPOSMoreFunctionsControl.Visibility = Visibility.Collapsed;
                }
                iscallfromMFV = false;
            }
            if (iscallfromMFH)
            {
                //pnlmfH.Height = 1;--Sam
                //pnlmfH.Visible = false; --Sam
                //if (frm_mfh != null) --Sam
                //{
                //    frm_mfh.Close(); --Sam
                //    frm_mfh.Dispose(); --Sam
                //}
                iscallfromMFH = false;
            }
        }
        private void PrecidiaTerminalError()
        {

            if (new MessageBoxWindow().Show(Properties.Resources.Terminal_Error___Resend_Transaction_, Properties.Resources.Error, MessageBoxButton.OKCancel, MessageBoxImage.Question) == MessageBoxResult.OK)
            {
                btnFastCCClick();
            }
            else
            {
                dtblTender.Rows.Clear();

                PrecidiaLaneOpen();
            }

        }

        private void PrecidiaDisplayOnError()
        {
            if (PrecidiaResponse == 1)
            {
                PrecidiaTransactionDeclined();
            }
            if (PrecidiaResponse == 2)
            {
                PrecidiaTerminalError();
            }
        }

        #endregion
        private bool ContinueWithDemoVersion()
        {
            PosDataObject.POS clsPOS = new PosDataObject.POS();
            clsPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return clsPOS.ContinueWithDemoInvNo(Settings.MaxDemoInvoiceNo);
        }

        #region POSLink Log

        private string POSLinkLogFilePath()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\POSLink Logs";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\POSLink Logs";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath + "\\" + POSLinkLogFile;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\" + POSLinkLogFile;
            }
            return strfilename;
        }

        private string POSLinkSignatureFilePath()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\POSLink Logs\\Sign";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\POSLink Logs\\Sign";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath;
            }
            return strfilename;
        }

        private void WriteToPOSLinkLogFile(string txt)
        {
            FileStream fileStrm;
            if (File.Exists(POSLinkLogPath)) fileStrm = new FileStream(POSLinkLogPath, FileMode.Append, FileAccess.Write);
            else fileStrm = new FileStream(POSLinkLogPath, FileMode.OpenOrCreate, FileAccess.Write);

            StreamWriter sw = new StreamWriter(fileStrm);
            sw.WriteLine(txt);
            sw.Close();
            fileStrm.Close();
        }

        #endregion
        private bool CardVarify()
        {
            cardidentity.Rows.Clear();

            intCardTranID = 0;
            blCardVarify = false;
            double dblCardAmt = Convert.ToDouble(numTotal.Text);
            string strCard = "Credit Card";
            AuthCode = "";


            PosDataObject.POS objcard = new PosDataObject.POS();
            objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
            objcard.CustomerID = intCustID;
            objcard.LoginUserID = SystemVariables.CurrentUserID;
            objcard.EmployeeID = SystemVariables.CurrentUserID;
            objcard.CardType = strCard;
            objcard.CardAmount = dblCardAmt;
            objcard.PaymentGateway = Settings.PaymentGateway;
            string strerr = objcard.InsertCardTrans();

            intCardTranID = objcard.CardTranID;
            cardidentity.Rows.Add(new object[] { intCardTranID.ToString() });
            string strAuthCode = "0";

            // element temp out
            /*
            if (Settings.PaymentGateway == 1)
            {
                try
                {
                    ElementExpress.ElementPS pg = new ElementExpress.ElementPS();
                    pg.ElementApplicationID = Settings.ElementHPApplicationID;
                    pg.ElementAccountID = Settings.ElementHPAccountID;
                    pg.ElementAccountToken = Settings.ElementHPAccountToken;
                    pg.ElementAcceptorID = Settings.ElementHPAcceptorID;
                    pg.TranAmount = GeneralFunctions.FormatDouble1(dblCardAmt);
                    pg.ElementTerminalID = Settings.ElementHPTerminalID.PadLeft(4, '0');
                    pg.RefNo = intCardTranID.ToString();
                    pg.TktNo = intCardTranID.ToString();
                    pg.ApplicationVersion = GeneralFunctions.PaymentGatewayApplicationVersion();

                    if (strCard != "Debit Card")
                    {
                        if (Settings.ElementZipProcessing == "Y")
                        {
                            frmPOSCCInfo frm_POSCCInfo = new frmPOSCCInfo();
                            try
                            {
                                frm_POSCCInfo.Amount = dblCardAmt;
                                frm_POSCCInfo.ShowDialog();
                                if (frm_POSCCInfo.DialogResult == true)
                                {
                                    pg.IsBillingInfo = true;
                                    pg.BillingAddress1 = frm_POSCCInfo.txtAdd.Text.Trim();
                                    pg.BillingZIP = frm_POSCCInfo.txtZIP.Text.Trim();
                                }
                                else
                                {
                                    pg.IsBillingInfo = false;
                                }
                            }
                            finally
                            {
                                frm_POSCCInfo.Dispose();
                            }
                        }
                        this.Refresh();
                    }

                    string msg1 = "";
                    string msg2 = "";

                    if (Settings.AcceptTips == "Y")
                    {
                        if (Settings.ElementHPMode == 0) pg.CreditAuthentication(ref msg1, ref msg2, ref strAuthCode);
                        if (Settings.ElementHPMode == 1) pg.TestCreditAuthentication(ref msg1, ref msg2, ref strAuthCode);
                    }
                    else
                    {
                        if (strCard != "Debit Card")
                        {
                            if (Settings.ElementHPMode == 0) pg.POSCreditSale(ref msg1, ref msg2, ref strAuthCode);
                            if (Settings.ElementHPMode == 1) pg.TestPOSCreditSale(ref msg1, ref msg2, ref strAuthCode);
                        }
                        else
                        {
                            if (Settings.ElementHPMode == 0) pg.POSDebitSale(ref msg1, ref msg2, ref strAuthCode);
                            if (Settings.ElementHPMode == 1) pg.TestPOSDebitSale(ref msg1, ref msg2, ref strAuthCode);
                        }
                    }


                    if (msg1 == "0")
                    {
                        frmPaymentWindow frm_PaymentWindow = new frmPaymentWindow();
                        try
                        {
                            frm_PaymentWindow.TranID = strAuthCode;
                            if (Settings.ElementHPMode == 0) frm_PaymentWindow.IsTestMode = false;
                            if (Settings.ElementHPMode == 1) frm_PaymentWindow.IsTestMode = true;
                            frm_PaymentWindow.ShowDialog();

                            if (frm_PaymentWindow.DialogResult == true)
                            {
                                blCardVarify = true;
                                AuthCode = frm_PaymentWindow.ApprovalNumber;
                                TranID = frm_PaymentWindow.TranID;
                                CardNum = frm_PaymentWindow.CardNumber;
                                CardExMM = frm_PaymentWindow.CardExMM;
                                CardExYY = frm_PaymentWindow.CardExYY;
                                CardLogo = frm_PaymentWindow.CardLogo;
                                CardType = frm_PaymentWindow.CardType;
                                ApprovedAmt = frm_PaymentWindow.ApprovedAmt;
                                RefNo = frm_PaymentWindow.RefNo;
                                CardEntry = frm_PaymentWindow.CardEntry;
                            }
                        }
                        finally
                        {
                            frm_PaymentWindow.Dispose();
                        }
                        if (blCardVarify)
                        {
                            bool find = false;
                            foreach (DataRow dra1 in dtblTender.Rows)
                            {
                                if (dra1["TENDER"].ToString() == strCard)
                                {
                                    dra1["CCTRANNO"] = intCardTranID.ToString();
                                    find = true;
                                    break;
                                }
                            }
                            if (!find)
                            {
                                PosDataObject.TenderTypes tend = new PosDataObject.TenderTypes();
                                tend.Connection = SystemVariables.Conn;
                                int TenderID = tend.FetchCCID();
                                dtblTender.Rows.Add(new object[] { TenderID.ToString(), strCard, GeneralFunctions.fnDouble(ApprovedAmt), "", "", "", "0", intCardTranID.ToString(), "" });
                            }
                            string updtstr = "";
                            objcard.MercuryRecordNo = "";
                            objcard.MercuryResponseOrigin = "";
                            objcard.MercuryResponseReturnCode = "";
                            objcard.MercuryTextResponse = "";
                            objcard.RefCardBalAmount = 0;
                            objcard.MercuryInvNo = "";
                            objcard.MercuryProcessData = "";
                            objcard.MercuryTranCode = "";
                            objcard.MercuryPurchaseAmount = 0;
                            objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                            objcard.CardType = CardLogo;
                            objcard.AuthCode = AuthCode;
                            objcard.Reference = RefNo;
                            objcard.AcqRefData = "";
                            objcard.TokenData = "";

                            objcard.RefCardAct = CardNum;
                            objcard.RefCardLogo = CardLogo;
                            objcard.RefCardEntry = CardEntry;
                            objcard.RefCardAuthID = AuthCode;
                            objcard.RefCardTranID = TranID;
                            objcard.RefCardMerchID = "";
                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                            objcard.CardTranType = "Sale";
                            objcard.AdjustFlag = "N";
                            objcard.RefCardBalAmount = 0;
                            objcard.PrintXml = "";
                            updtstr = objcard.UpdateCardResponse();

                            if (updtstr == "")
                            {
                                blCardVarify = true;
                            }
                            else
                            {
                                blCardVarify = false;
                            }
                            Cursor = System.Windows.Input.Cursors.Arrow;
                        }
                        Cursor = System.Windows.Input.Cursors.Arrow;
                    }
                    else
                    {
                        blCardVarify = false;
                        new MessageBoxWindow().Show(msg2, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                    }
                }
                catch (Exception ex)
                {
                    blCardVarify = false;
                    new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.","frmPOSN_msg_Erroroccuredduringtransaction"),Properties.Resources."Credit Card Payment","frmPOSN_msg_CreditCardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                    Cursor = System.Windows.Input.Cursors.Arrow;
                }
            }



            if (Settings.PaymentGateway == 2)
            {
                try
                {
                    MercuryPayment.clsMercuryPymnt mp = new MercuryPayment.clsMercuryPymnt();
                    mp.MerchantID = Settings.MercuryHPMerchantID;
                    mp.UserID = Settings.MercuryHPUserID;
                    mp.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                    mp.InvNo = intCardTranID.ToString();
                    mp.PurchaseAmount = dblCardAmt;

                    string msg1 = "";
                    string msg2 = "";


                    if (Settings.AcceptTips == "Y")
                    {
                        if (Settings.ElementHPMode == 0) mp.CreditPreAuth(ref msg1);
                        if (Settings.ElementHPMode == 1) mp.TestCreditPreAuth(ref msg1);
                    }
                    else
                    {
                        if (strCard != "Debit Card")
                        {
                            if (strCard == "Credit Card")
                            {

                                if (Settings.ElementHPMode == 0) mp.CreditSales(ref msg1);
                                if (Settings.ElementHPMode == 1) mp.TestCreditSales(ref msg1);

                            }
                            if (strCard == "Credit Card - Voice Auth")
                            {
                                if (Settings.ElementHPMode == 0) mp.VoiceAuth(ref msg1);
                                if (Settings.ElementHPMode == 1) mp.TestVoiceAuth(ref msg1);
                            }
                            if (strCard == "Credit Card (STAND-IN)")
                            {
                                if (Settings.ElementHPMode == 0) mp.StandInCreditSales(ref msg1);
                                if (Settings.ElementHPMode == 1) mp.TestStandInCreditSales(ref msg1);
                            }
                            if (strCard == "Credit Card - Voice Auth (STAND-IN)")
                            {
                                if (Settings.ElementHPMode == 0) mp.StandInVoiceAuth(ref msg1);
                                if (Settings.ElementHPMode == 1) mp.TestStandInVoiceAuth(ref msg1);
                            }

                            if (strCard == "Mercury Gift Card")
                            {
                                if (Settings.ElementHPMode == 0) mp.GiftCardSales(ref msg1);
                                if (Settings.ElementHPMode == 1) mp.TestGiftCardSales(ref msg1);
                            }

                            if (strCard == "EBT Voucher")
                            {
                                if (Settings.ElementHPMode == 0) mp.EBTVoucher(ref msg1);
                                if (Settings.ElementHPMode == 1) mp.TestEBTVoucher(ref msg1);
                            }
                        }
                        else
                        {
                            string strdummy = ""; 
                            if (Settings.ElementHPMode == 0) mp.DebitSales(ref msg1);
                            if (Settings.ElementHPMode == 1) mp.TestDebitSales(ref msg1);

                        }
                    }

                    GeneralFunctions.CreateMercuryTransactionXML(mp.MercuryXmlResponse, mp.Token);

                    if (msg1 != "")
                    {
                        if (msg1.ToUpper().Trim() == "APPROVED")
                        {
                            double AthAmount = mp.ApprovedAmt == null ? 0 : GeneralFunctions.fnDouble(mp.ApprovedAmt);
                            if (AthAmount < dblCardAmt)
                            {
                                new MessageBoxWindow().Show(Properties.Resources."Card only authorized $","frmPOSN_msg_Cardonlyauthorized") + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources."Please select another tender to finish the transaction.","frmPOSN_msg_Pleaseselectanothertendertofin"), Properties.Resources."Gift Card Payment","frmPOSN_msg_GiftCardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                            try
                            {
                                AuthCode = mp.AuthID;
                                TranID = mp.TranID;
                                CardNum = mp.CardNumber;
                                CardExMM = mp.CardExMM;
                                CardExYY = mp.CardExYY;
                                CardLogo = mp.CardLogo;
                                CardType = mp.CardType;
                                ApprovedAmt = mp.ApprovedAmt;
                                RefNo = mp.RefNo;
                                MercuryPurchaseAmount = mp.PurchaseAmount;
                                MercuryProcessData = mp.MercuryProcessData;
                                MercuryTranCode = mp.MercuryTranCode;
                                MercuryTextResponse = mp.MercuryTextResponse;
                                MercuryRecordNo = mp.MercuryRecordNo;
                                MercuryResponseOrigin = mp.MercuryResponseOrigin;
                                MercuryResponseReturnCode = mp.MercuryResponseReturnCode;
                                MercuryGiftCardBalance = mp.BalanceAmt;
                                CardEntry = mp.CardEntry;
                                Token = mp.Token;
                                AcqRef = mp.AcqRefData;
                                strMercuryMerchantID = mp.MerchantID;


                                if (AuthCode == null) AuthCode = "";
                                if (TranID == null) TranID = "";
                                if (CardNum == null) CardNum = "";
                                if (CardExMM == null) CardExMM = "";
                                if (CardExYY == null) CardExYY = "";
                                if (CardLogo == null) CardLogo = "";
                                if (CardType == null) CardType = "";
                                if (ApprovedAmt == null) ApprovedAmt = "0";
                                if (RefNo == null) RefNo = "";
                                if (CardEntry == null) CardEntry = "";
                                if (Token == null) Token = "";
                                if (AcqRef == null) AcqRef = "";

                                if (MercuryProcessData == null) MercuryProcessData = "";
                                if (MercuryTranCode == null) MercuryTranCode = "";
                                if (MercuryRecordNo == null) MercuryRecordNo = "";
                                if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                                if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                                if (MercuryTextResponse == null) MercuryTextResponse = "";
                                if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";

                                if ((MercuryTextResponse.ToUpper().Trim() == "AP") || (MercuryTextResponse.ToUpper().Trim() == "AP*") ||
                                    (MercuryTextResponse.ToUpper().Trim() == "APPROVED STANDIN") ||
                                    (MercuryTextResponse.ToUpper().Trim() == "AP-NEW INFO")
                                    || (MercuryTextResponse.ToUpper().Trim() == "APPROVED"))
                                {

                                    bool find = false;
                                    foreach (DataRow dra in dtblTender.Rows)
                                    {
                                        if (dra["TENDER"].ToString() == strCard)
                                        {
                                            dra["CCTRANNO"] = intCardTranID.ToString();
                                            find = true;
                                            break;
                                        }
                                    }

                                    if (!find)
                                    {
                                        PosDataObject.TenderTypes tend = new PosDataObject.TenderTypes();
                                        tend.Connection = SystemVariables.Conn;
                                        int TenderID = tend.FetchCCID();
                                        dtblTender.Rows.Add(new object[] { TenderID.ToString(), strCard, GeneralFunctions.fnDouble(ApprovedAmt), "", "", "", "0", intCardTranID.ToString(), "" });
                                    }

                                    string updtstr = "";

                                    objcard.MercuryInvNo = TranID;
                                    objcard.MercuryProcessData = MercuryProcessData;
                                    objcard.MercuryTranCode = MercuryTranCode;
                                    objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                    objcard.MercuryRecordNo = MercuryRecordNo;
                                    objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                    objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                    objcard.MercuryTextResponse = MercuryTextResponse;

                                    objcard.CardType = CardLogo;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = AcqRef;
                                    objcard.TokenData = Token;

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = strMercuryMerchantID;
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardTranType = "Sale";
                                    objcard.AdjustFlag = "N";
                                    objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();

                                    if (updtstr == "") blCardVarify = true;
                                    else
                                    {
                                        GeneralFunctions.SetTransactionLog("credit card update after approved fail", updtstr);
                                        blCardVarify = false;
                                    }
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                }

                                if (MercuryTextResponse.ToUpper().Trim() == "PARTIAL AP")
                                {
                                    bool find = false;
                                    foreach (DataRow dra in dtblTender.Rows)
                                    {
                                        if (dra["TENDER"].ToString() == strCard)
                                        {
                                            dra["CCTRANNO"] = intCardTranID.ToString();
                                            find = true;
                                            break;
                                        }
                                    }

                                    if (!find)
                                    {
                                        PosDataObject.TenderTypes tend = new PosDataObject.TenderTypes();
                                        tend.Connection = SystemVariables.Conn;
                                        int TenderID = tend.FetchCCID();
                                        dtblTender.Rows.Add(new object[] { TenderID.ToString(), strCard, GeneralFunctions.fnDouble(ApprovedAmt), "", "", "", "0", intCardTranID.ToString(), "" });
                                    }

                                    string updtstr = "";
                                    objcard.MercuryInvNo = TranID;
                                    objcard.MercuryProcessData = MercuryProcessData;
                                    objcard.MercuryTranCode = MercuryTranCode;
                                    objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                    objcard.MercuryRecordNo = MercuryRecordNo;
                                    objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                    objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                    objcard.MercuryTextResponse = MercuryTextResponse;

                                    objcard.CardType = CardLogo;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = AcqRef;
                                    objcard.TokenData = Token;

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = strMercuryMerchantID;
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardTranType = "Sale";
                                    objcard.AdjustFlag = "N";
                                    objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();
                                    if (updtstr == "")
                                    {
                                        blCardVarify = true;
                                        GeneralFunctions.SetTransactionLog("credit card partial approved", updtstr);
                                    }
                                    else
                                    {
                                        GeneralFunctions.SetTransactionLog("credit card update after partial approved fail", updtstr);
                                        blCardVarify = false;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                GeneralFunctions.SetTransactionLog("Catch - credit card update after approved", ex.Message);
                                blCardVarify = false;
                            }

                        }
                        else
                        {
                            blCardVarify = false;
                            if (strCard != "Mercury Gift Card") new MessageBoxWindow().Show(msg1, Properties.Resources."Credit Card Payment","frmPOSN_msg_CreditCardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                            else new MessageBoxWindow().Show(msg1, Properties.Resources."Gift Card Payment","frmPOSN_msg_GiftCardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                            Cursor = System.Windows.Input.Cursors.Arrow;
                        }
                    }
                }
                catch (Exception ex)
                {
                    GeneralFunctions.SetTransactionLog("Catch - credit card update", ex.Message);
                    blCardVarify = false;
                    if (strCard != "Mercury Gift Card") new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.","frmPOSN_msg_Erroroccuredduringtransaction"), Properties.Resources."Credit Card Payment","frmPOSN_msg_CreditCardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                    else new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.","frmPOSN_msg_Erroroccuredduringtransaction"), Properties.Resources."Credit Card Payment","frmPOSN_msg_GiftCardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                    Cursor = System.Windows.Input.Cursors.Arrow;
                }
            }

            if (Settings.PaymentGateway == 3)
            {
                blCG = false;
                blCG1 = false;
                blCG2 = false;

                string resp = "";
                string resptxt = "";

                //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);


                if (Settings.AcceptTips == "Y")
                {
                    CGtrantype = "CCPREAUTH";
                }
                else
                {
                    if (strCard == "Credit Card") CGtrantype = "CCSALE";
                    if (strCard == "Debit Card") CGtrantype = "DCSALE";
                }


                if (strCard != "Debit Card")
                {
                    if (strCard == "Credit Card")
                    {
                        if (Settings.AcceptTips == "Y")
                        {
                            CGtrantype = "CCPREAUTH";
                        }
                        else
                        {
                            CGtrantype = "CCSALE";
                        }

                    }
                    if (strCard == "Credit Card - Voice Auth")
                    {
                        CGtrantype = "CCVOICE";
                    }
                    if (strCard == "Credit Card (STAND-IN)")
                    {
                        CGtrantype = "CCVOICE";
                    }
                    if (strCard == "Credit Card - Voice Auth (STAND-IN)")
                    {
                        CGtrantype = "CCVOICE";
                    }

                    if (strCard == "Precidia Gift Card")
                    {
                        CGtrantype = "GCSALE";
                    }

                    if (strCard == "Food Stamps")
                    {
                        CGtrantype = "EBTFOODSALE";
                    }

                    if (strCard == "EBT Cash")
                    {
                        CGtrantype = "EBTCASHSALE";
                    }

                    if (strCard == "EBT Voucher")
                    {
                        CGtrantype = "EBTCASHVOUCHERSALE";
                    }
                }
                else
                {
                    string strdummy = "";
                    CGtrantype = "DCSALE";

                }

                PrecidiaLogFile = "";
                PrecidiaLogFile = CGtrantype + "_" + DateTime.Now.ToString("MMddyyyy") + "_" + DateTime.Now.ToString("HHmmss") + ".txt";

                PrecidiaLogPath = PrecidiaLogFilePath();

                WriteToPrecidiaLogFile("Start: " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));


                CGamt = dblCardAmt;
                PosDataObject.POS objPOS = new PosDataObject.POS();
                objPOS.Connection = SystemVariables.Conn;
                CGinv = objPOS.FetchMaxInvoiceNo();



                XmlDocument XDoc = new XmlDocument();

                // Create root node.
                XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

                XDoc.AppendChild(XElemRoot);

                XmlElement XTemp = XDoc.CreateElement("Command");
                XTemp.InnerText = CGtrantype;
                XElemRoot.AppendChild(XTemp);

                XTemp = XDoc.CreateElement("Id");
                XTemp.InnerText = CGinv.ToString();
                XElemRoot.AppendChild(XTemp);

                if ((strCard == "Credit Card") && (Settings.AcceptTips == "Y"))
                {
                    XTemp = XDoc.CreateElement("AuthAmt");
                    XTemp.InnerText = CGamt.ToString("f");
                    XElemRoot.AppendChild(XTemp);
                }
                else
                {
                    XTemp = XDoc.CreateElement("Amount");
                    XTemp.InnerText = CGamt.ToString("f");
                    XElemRoot.AppendChild(XTemp);
                }

                if ((strCard == "Credit Card") || (strCard == "Credit Card - Voice Auth") || (strCard == "Credit Card (STAND-IN)") || (strCard == "EBT Cash") || (strCard == "EBT Voucher"))
                {
                    XTemp = XDoc.CreateElement("ReqPPSigCapture");
                    XTemp.InnerText = "Yes";
                    XElemRoot.AppendChild(XTemp);
                }


                if (strCard != "Debit Card")
                {
                    if (Settings.PrecidiaUsePINPad == "Y")
                    {
                        XTemp = XDoc.CreateElement("Input");
                        XTemp.InnerText = "EXTERNAL";
                        XElemRoot.AppendChild(XTemp);
                    }
                }

                if (strCard == "Debit Card")
                {
                    XTemp = XDoc.CreateElement("Input");
                    XTemp.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                    XElemRoot.AppendChild(XTemp);
                }

                bool procd = true;

                if (strCard == "Debit Card")
                {
                    string cbk_resp = "";
                    XmlDocument XDoc1 = new XmlDocument();
                    XmlElement XElemRoot1 = XDoc1.CreateElement("PLRequest");
                    XDoc1.AppendChild(XElemRoot1);

                    XmlElement XTemp1 = XDoc1.CreateElement("Command");
                    XTemp1.InnerText = "PPGETCASHBACK";
                    XElemRoot1.AppendChild(XTemp1);

                    XmlDocument XmlResponse1 = new XmlDocument();

                    XTemp1 = XDoc1.CreateElement("KeepAlive");
                    XTemp1.InnerText = "N";
                    XElemRoot1.AppendChild(XTemp1);

                    XTemp1 = XDoc1.CreateElement("ClientMAC");
                    XTemp1.InnerText = Settings.PrecidiaClientMAC;
                    XElemRoot1.AppendChild(XTemp1);

                    if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML CashBack: \n" + XDoc1.OuterXml);

                    bool bTelnet = false;
                    try
                    {
                        SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc1, ref XmlResponse1);
                        bTelnet = true;
                    }
                    catch (Exception ex)
                    {
                        bTelnet = false;
                    }

                    if (bTelnet)
                    {
                        if (XmlResponse1.InnerXml != "")
                        {
                            if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML CashBack: \n" + XmlResponse1.InnerXml);
                            SocketResponse_CashBack(XmlResponse1);

                            cbk_resp = CGresp_Cashbk;

                            WriteToPrecidiaLogFile("Cash Back Response: " + CGresp_Cashbk);

                            if ((cbk_resp == "SUCCESS") || (cbk_resp == ""))
                            {
                                procd = true;
                                if (CG_Cashbk > 0)
                                {
                                    XTemp = XDoc.CreateElement("Cashback");
                                    XTemp.InnerText = CG_Cashbk.ToString("f");
                                    XElemRoot.AppendChild(XTemp);
                                }
                            }
                            else
                            {
                                procd = false;
                            }
                        }
                        else
                        {
                            procd = false;
                        }
                    }
                    else
                    {
                        procd = false;
                    }

                }

                if (procd)
                {

                    XmlDocument XmlResponse = new XmlDocument();

                    XTemp = XDoc.CreateElement("KeepAlive");
                    XTemp.InnerText = "N";
                    XElemRoot.AppendChild(XTemp);

                    XTemp = XDoc.CreateElement("ClientMAC");
                    XTemp.InnerText = Settings.PrecidiaClientMAC;
                    XElemRoot.AppendChild(XTemp);

                    if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc.OuterXml);

                    bool bTelnet = false;
                    try
                    {
                        SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                        bTelnet = true;
                    }
                    catch (Exception ex)
                    {
                        bTelnet = false;
                    }

                    if (bTelnet)
                    {
                        if (XmlResponse.InnerXml != "")
                        {
                            if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse.InnerXml);
                            SocketResponse_Genaral(XmlResponse);

                            resp = CGresp;
                            resptxt = CGresptxt;

                            WriteToPrecidiaLogFile("Response: " + resp);

                            if (resp != "")
                            {
                                if (resp != "APPROVED")
                                {
                                    DocMessage.MsgInformation(resptxt);
                                    blCardVarify = false;
                                }
                                else
                                {

                                    if ((strCard == "Credit Card") && (Settings.PrecidiaUsePINPad == "Y") && (CGtrantype == "CCSALE") && (CGamt >= Settings.PrecidiaSignAmount))
                                    {
                                        string sign_resp = "";
                                        XmlDocument XDoc2 = new XmlDocument();
                                        XmlElement XElemRoot2 = XDoc2.CreateElement("PLRequest");
                                        XDoc2.AppendChild(XElemRoot2);

                                        XmlElement XTemp2 = XDoc2.CreateElement("Command");
                                        XTemp2.InnerText = "PPGETSIGNATURE";
                                        XElemRoot2.AppendChild(XTemp2);

                                        XTemp2 = XDoc2.CreateElement("KeepAlive");
                                        XTemp2.InnerText = "N";
                                        XElemRoot2.AppendChild(XTemp2);

                                        XTemp2 = XDoc2.CreateElement("ClientMAC");
                                        XTemp2.InnerText = Settings.PrecidiaClientMAC;
                                        XElemRoot2.AppendChild(XTemp2);

                                        if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML Signature: \n" + XDoc2.OuterXml);

                                        XmlDocument XmlResponseSignature = new XmlDocument();

                                        bool bTelnet2 = false;
                                        try
                                        {
                                            SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc2, ref XmlResponseSignature);
                                            bTelnet2 = true;
                                        }
                                        catch (Exception ex)
                                        {
                                            WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                                            bTelnet2 = false;
                                        }


                                        if (bTelnet2)
                                        {
                                            if (XmlResponseSignature.InnerXml != "")
                                            {
                                                if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML Signature: \n" + XmlResponseSignature.InnerXml);

                                                SocketResponse_Signature(XmlResponseSignature);

                                                sign_resp = CGresp_signature;

                                                WriteToPrecidiaLogFile("Signature Response: " + sign_resp);
                                                WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));
                                                if (sign_resp != "SUCCESS")
                                                {
                                                    //PrecidiaErrorText = "Signature Failed. Please Get Signature";
                                                    //PrecidiaSignature = false;
                                                }
                                            }
                                            else
                                            {
                                                //PrecidiaErrorText = "Failed to get signature";
                                                //PrecidiaSignature = false;
                                            }

                                        }
                                        else
                                        {
                                            //PrecidiaErrorText = "Socket Error - Signature Capture";
                                            //PrecidiaSignature = false;
                                        }
                                    }

                                    double AthAmount = ApprovedAmt == null ? 0 : GeneralFunctions.fnDouble(ApprovedAmt);
                                    if (AthAmount < CGamt)
                                    {
                                        new MessageBoxWindow().Show(Properties.Resources."Card only authorized $","frmPOSN_msg_Cardonlyauthorized") + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources."Please select another tender to finish the transaction.","frmPOSN_msg_Pleaseselectanothertendertofin"), Properties.Resources."Gift Card Payment","frmPOSN_msg_GiftCardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                                    }

                                    bool find = false;
                                    foreach (DataRow dra1 in dtblTender.Rows)
                                    {
                                        if (dra1["TENDER"].ToString() == strCard)
                                        {
                                            dra1["CCTRANNO"] = intCardTranID.ToString();
                                            find = true;
                                            break;
                                        }
                                    }

                                    if (!find)
                                    {
                                        PosDataObject.TenderTypes tend = new PosDataObject.TenderTypes();
                                        tend.Connection = SystemVariables.Conn;
                                        int TenderID = tend.FetchCCID();
                                        dtblTender.Rows.Add(new object[] { TenderID.ToString(), strCard, GeneralFunctions.fnDouble(ApprovedAmt), "", "", "", "0", intCardTranID.ToString(), "" });
                                    }

                                    string updtstr = "";
                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = 0;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardType = CardLogo;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = "";
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardTranType = "Sale";
                                    objcard.AdjustFlag = "N";
                                    objcard.RefCardBalAmount = 0;
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();
                                    WriteToPrecidiaLogFile("card trans updates");
                                    blCardVarify = true;
                                }
                            }
                        }
                    }
                }
            }


            if (Settings.PaymentGateway == 5) // Datacap 
            {
                Dcap_CmdStatus = "";
                Dcap_TextResponse = "";
                Dcap_AcctNo = "";
                Dcap_Merchant = "";
                Dcap_TranCode = "";
                Dcap_CardType = "";
                Dcap_AuthCode = "";
                Dcap_RefNo = "";
                Dcap_AcqRefData = "";
                Dcap_RecordNo = "";
                Dcap_InvoiceNo = "";
                Dcap_TranAmt = 0;
                Dcap_AuthAmt = 0;
                Dcap_CashBkAmt = 0;
                Dcap_BalAmt = 0;

                bool boolDatacapLessAuthorised = false;
                bool bproceed = true;
                string request_xml = "";
                string response_xml = "";
                string request_xml_signature = "";
                string response_xml_signature = "";
                DSIPDCXLib.DsiPDCX dsipdx = new DSIPDCXLib.DsiPDCX();
                DSIPDCXLib.DsiPDCX dsipdx1 = new DSIPDCXLib.DsiPDCX();
                DSIPDCXLib.DsiPDCX dsipdx2 = new DSIPDCXLib.DsiPDCX();

                dsipdx.ServerIPConfig(Settings.DatacapServer, 1);

                dsipdx1.ServerIPConfig(Settings.DatacapServer, 1);

                PosDataObject.POS objPOS = new PosDataObject.POS();
                objPOS.Connection = SystemVariables.Conn;
                int dcap_max_inv = objPOS.FetchMaxInvoiceNo();

                if (strCard == "Credit Card")
                {
                    if ((dblCardAmt < Settings.DatacapSignAmount) || (Settings.DatacapCardEntryMode == 1))
                    {
                        request_xml = GeneralFunctions.Datacap_CreditSale_Request_XML(dblCardAmt, dcap_max_inv,false);
                        try
                        {
                            response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                        }
                        catch
                        {
                            bproceed = false;
                        }
                    }
                    else
                    {
                        request_xml_signature = GeneralFunctions.Datacap_GetSignature_Request_XML(false);
                        try
                        {
                            response_xml_signature = dsipdx1.ProcessTransaction(request_xml_signature, 1, null, null);
                        }
                        catch
                        {
                            bproceed = false;
                        }
                        string s_status = "";
                        string s_response = "";
                        GeneralFunctions.Datacap_Signature_Response(response_xml_signature, ref s_status, ref s_response, ref Dcap_Sign);
                        if (s_status == "Success")
                        {
                            request_xml = GeneralFunctions.Datacap_CreditSale_Request_XML(dblCardAmt, dcap_max_inv, Dcap_Sign,false);
                            try
                            {
                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                            }
                            catch
                            {
                                bproceed = false;
                            }
                        }
                        else
                        {
                            new MessageBoxWindow().Show(s_status + "\n\n" + s_response, Properties.Resources."Card Payment - Signature Capture","frmPOSN_msg_CardPaymentSignatureCapture"), MessageBoxButton.OK, MessageBoxImage.Information);
                            bproceed = false;
                        }



                        //request_xml = GeneralFunctions.Datacap_CreditSale_Request_XML(dblCardAmt, dcap_max_inv, false);
                        //try
                        //{
                            //response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                        //}
                        //catch
                        //{
                        //    bproceed = false;
                        //}

                        //if (bproceed)
                        //{

                            //request_xml_signature = GeneralFunctions.Datacap_GetSignature_Request_XML(false);
                            //try
                            //{
                            //    response_xml_signature = dsipdx1.ProcessTransaction(request_xml_signature, 1, null, null);
                            //}
                            //catch
                            //{
                                //bproceed = false;
                            //}

                            //string s_status = "";
                           // string s_response = "";
                           // GeneralFunctions.Datacap_Signature_Response(response_xml_signature, ref s_status, ref s_response, ref Dcap_Sign);
                           // if (s_status == "Success")
                           // {

                           // }
                           // else
                           // {
                           //     new MessageBoxWindow().Show(s_status + "\n\n" + s_response, "Card Payment - Signature Capture", MessageBoxButton.OK, MessageBoxImage.Information);
                           //     bproceed = false;
                          //  }
                        //}


                    }

                }

                if (strCard == "Debit Card")
                {
                    Dcap_CashBkAmt = 0;
                    frmPOSCashBackPopup fcbkpopup = new frmPOSCashBackPopup();
                    try
                    {
                        fcbkpopup.ShowDialog();
                        if (fcbkpopup.DialogResult == System.Windows.Forms.DialogResult.OK)
                        {
                            Dcap_CashBkAmt = fcbkpopup.CashBackAmount;
                        }
                    }
                    finally
                    {
                        fcbkpopup.Dispose();
                    }

                    request_xml = GeneralFunctions.Datacap_DebitSale_Request_XML(dblCardAmt, dcap_max_inv, Dcap_CashBkAmt);
                    try
                    {
                        response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                    }
                    catch
                    {
                        bproceed = false;
                    }
                }

                if (strCard == "Datacap Gift Card")
                {
                    request_xml = GeneralFunctions.Datacap_PrePaidSale_Request_XML(dblCardAmt, dcap_max_inv);
                    try
                    {
                        response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                    }
                    catch
                    {
                        bproceed = false;
                    }
                }

                if (strCard == "EBT Cash")
                {
                    Dcap_CashBkAmt = 0;
                    frmPOSCashBackPopup fcbkpopup = new frmPOSCashBackPopup();
                    try
                    {
                        fcbkpopup.ShowDialog();
                        if (fcbkpopup.DialogResult == System.Windows.Forms.DialogResult.OK)
                        {
                            Dcap_CashBkAmt = fcbkpopup.CashBackAmount;
                        }
                    }
                    finally
                    {
                        fcbkpopup.Dispose();
                    }

                    request_xml = GeneralFunctions.Datacap_EBTCashSale_Request_XML(dblCardAmt, dcap_max_inv, Dcap_CashBkAmt,false);
                    try
                    {
                        response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                    }
                    catch
                    {
                        bproceed = false;
                    }
                }

                if (bproceed)
                {
                    GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                        ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                        ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);
                }

                if (Dcap_CmdStatus == "Approved")
                {
                    double AthAmount = Dcap_AuthAmt;

                    if (AthAmount < Dcap_TranAmt)
                    {
                        //WriteToPrecidiaLogFile("Less authorized");
                        new MessageBoxWindow().Show(Properties.Resources."Card only authorized $","frmPOSN_msg_Cardonlyauthorized") + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources."Please select another tender to finish the transaction.","frmPOSN_msg_Pleaseselectanothertendertofin"), Properties.Resources."Card Payment","frmPOSN_msg_CardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                        boolDatacapLessAuthorised = true;
                    }

                    bool find = false;
                    foreach (DataRow dra1 in dtblTender.Rows)
                    {
                        if (dra1["TENDER"].ToString() == strCard)
                        {
                            dra1["CCTRANNO"] = intCardTranID.ToString();
                            find = true;
                            break;
                        }
                    }

                    if (!find)
                    {
                        PosDataObject.TenderTypes tend = new PosDataObject.TenderTypes();
                        tend.Connection = SystemVariables.Conn;
                        int TenderID = tend.FetchCCID();
                        dtblTender.Rows.Add(new object[] { TenderID.ToString(), strCard, GeneralFunctions.fnDouble(Dcap_AuthAmt), "", "", "", "0", intCardTranID.ToString(), "" });
                    }


                    string updtstr = "";

                    objcard.MercuryRecordNo = "";
                    objcard.MercuryResponseOrigin = "";
                    objcard.MercuryResponseReturnCode = "";
                    objcard.MercuryTextResponse = "";

                    objcard.MercuryInvNo = Dcap_InvoiceNo;
                    objcard.MercuryProcessData = "";
                    objcard.MercuryTranCode = "";
                    objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                    objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                    objcard.CardType = Dcap_CardType;
                    objcard.AuthCode = Dcap_AuthCode;
                    objcard.Reference = Dcap_RefNo;
                    objcard.AcqRefData = Dcap_AcqRefData;
                    objcard.TokenData = Dcap_RecordNo;

                    objcard.RefCardAct = Dcap_AcctNo;
                    objcard.RefCardLogo = Dcap_CardType;
                    objcard.RefCardEntry = Settings.DatacapCardEntryMode == 1 ? "Manual" : "Swipe";
                    objcard.RefCardAuthID = Dcap_AuthCode;
                    objcard.RefCardTranID = TranID;
                    objcard.RefCardMerchID = Dcap_Merchant;
                    objcard.RefCardAuthAmount = Dcap_AuthAmt;
                    objcard.CardTranType = "Sale";
                    objcard.AdjustFlag = "N";
                    objcard.RefCardBalAmount = Dcap_BalAmt;
                    objcard.PrintXml = Dcap_PrintDraft;
                    updtstr = objcard.UpdateCardResponse();

                    if (!boolDatacapLessAuthorised)
                    {
                        if (updtstr == "")
                        {
                            blCardVarify = true;
                        }
                        else
                        {
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            blCardVarify = false;
                        }
                    }
                    else
                    {
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        blCardVarify = false;
                    }
                }
                else
                {
                    if (Dcap_CmdStatus != "") new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse,  Properties.Resources."Card Payment","frmPOSN_msg_CardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                    Cursor = System.Windows.Input.Cursors.Arrow;
                    blCardVarify = false;
                }

            }




            if (Settings.PaymentGateway == 6) // Datacap EMV
            {
                CallPadResetCount = 0;
                CallEMVPadReset();
                if (CallPadResetCount == 5)
                {
                    CallPadResetCount = 0;
                    if (Dcap_PPAD_CmdStatus != "Success") new MessageBoxWindow().Show(Dcap_PPAD_CmdStatus + "\n\n" + Dcap_PPAD_TextResponse,  Properties.Resources."Card Payment","frmPOSN_msg_CardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                    Cursor = System.Windows.Input.Cursors.Arrow;
                    blCardVarify = false;
                }
                else
                {
                    Dcap_CmdStatus = "";
                    Dcap_TextResponse = "";
                    Dcap_AcctNo = "";
                    Dcap_Merchant = "";
                    Dcap_TranCode = "";
                    Dcap_CardType = "";
                    Dcap_AuthCode = "";
                    Dcap_RefNo = "";
                    Dcap_AcqRefData = "";
                    Dcap_RecordNo = "";
                    Dcap_InvoiceNo = "";
                    Dcap_TranAmt = 0;
                    Dcap_AuthAmt = 0;
                    Dcap_CashBkAmt = 0;
                    Dcap_ProcessData = "";

                    bool boolDatacapLessAuthorised = false;
                    bool bproceed = true;
                    string request_xml = "";
                    string response_xml = "";
                    DSIEMVXLib.DsiEMVX dsiEMV = new DSIEMVXLib.DsiEMVX();

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int dcap_max_inv = objPOS.FetchMaxInvoiceNo();

                    if (strCard == "Credit Card")
                    {
                        request_xml = GeneralFunctions.PrepareEMVSaleXML(dcap_max_inv, dblCardAmt, false,Settings.DatacapEMVManual);
                        try
                        {
                            response_xml = dsiEMV.ProcessTransaction(request_xml);
                        }
                        catch
                        {
                            bproceed = false;
                        }
                    }

                    if (strCard == "Debit Card")
                    {
                        request_xml = GeneralFunctions.PrepareEMVSaleXML(dcap_max_inv, dblCardAmt, true,Settings.DatacapEMVManual);
                        try
                        {
                            response_xml = dsiEMV.ProcessTransaction(request_xml);
                        }
                        catch
                        {
                            bproceed = false;
                        }
                    }


                    if (bproceed)
                    {
                        GeneralFunctions.DatacapEMV_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                            ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                            ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_ProcessData, ref Dcap_PrintDraft);
                    }

                    if (Dcap_CmdStatus == "Approved")
                    {
                        GeneralFunctions.StoreResponseSequence(response_xml);
                        double AthAmount = Dcap_AuthAmt;

                        if (AthAmount < Dcap_TranAmt)
                        {
                            //WriteToPrecidiaLogFile("Less authorized");
                            new MessageBoxWindow().Show(Properties.Resources."Card only authorized $", "frmPOSN_msg_Cardonlyauthorized") + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources."Please select another tender to finish the transaction.", "frmPOSN_msg_Pleaseselectanothertendertofin"), Properties.Resources."Card Payment", "frmPOSN_msg_CardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                            boolDatacapLessAuthorised = true;
                        }

                        bool find = false;
                        foreach (DataRow dra1 in dtblTender.Rows)
                        {
                            if (dra1["TENDER"].ToString() == strCard)
                            {
                                dra1["CCTRANNO"] = intCardTranID.ToString();
                                find = true;
                                break;
                            }
                        }

                        if (!find)
                        {
                            PosDataObject.TenderTypes tend = new PosDataObject.TenderTypes();
                            tend.Connection = SystemVariables.Conn;
                            int TenderID = tend.FetchCCID();
                            dtblTender.Rows.Add(new object[] { TenderID.ToString(), strCard, GeneralFunctions.fnDouble(Dcap_AuthAmt), "", "", "", "0", intCardTranID.ToString(), "" });
                        }


                        string updtstr = "";

                        objcard.MercuryRecordNo = "";
                        objcard.MercuryResponseOrigin = "";
                        objcard.MercuryResponseReturnCode = "";
                        objcard.MercuryTextResponse = "";

                        objcard.MercuryInvNo = Dcap_InvoiceNo;
                        objcard.MercuryProcessData = Dcap_ProcessData;
                        objcard.MercuryTranCode = Dcap_TranCode;
                        objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                        objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                        objcard.CardType = Dcap_CardType;
                        objcard.AuthCode = Dcap_AuthCode;
                        objcard.Reference = Dcap_RefNo;
                        objcard.AcqRefData = Dcap_AcqRefData;
                        objcard.TokenData = Dcap_RecordNo;

                        objcard.RefCardAct = Dcap_AcctNo;
                        objcard.RefCardLogo = Dcap_CardType;
                        objcard.RefCardEntry = CardEntry;
                        objcard.RefCardAuthID = Dcap_AuthCode;
                        objcard.RefCardTranID = TranID;
                        objcard.RefCardMerchID = Dcap_Merchant;
                        objcard.RefCardAuthAmount = Dcap_AuthAmt;
                        objcard.CardTranType = "Sale";
                        objcard.AdjustFlag = "N";
                        objcard.RefCardBalAmount = Dcap_BalAmt;
                        objcard.PrintXml = Dcap_PrintDraft;
                        updtstr = objcard.UpdateCardResponse();

                        if (!boolDatacapLessAuthorised)
                        {
                            if (updtstr == "")
                            {
                                blCardVarify = true;
                            }
                            else
                            {
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blCardVarify = false;
                            }
                        }
                        else
                        {
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            blCardVarify = false;
                        }
                    }
                    else
                    {
                        if (Dcap_CmdStatus != "") new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse,  Properties.Resources."Card Payment","frmPOSN_msg_CardPayment"), MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        blCardVarify = false;
                    }
                }
            }

            */



            /*
            if (Settings.PaymentGateway == 7) // POSLink
            {
                POSLinkLogPath = POSLinkLogFilePath();

                bool boolPOSLinkLessAuthorised = false;
                POSLink_ResultCode = "";
                POSLink_ResultTxt = "";
                POSLink_RefNum = "";
                POSLink_AuthCode = "";
                POSLink_CardType = "";
                POSLink_BogusAccountNum = "";
                POSLink_CashBack = 0;
                POSLink_RequestedAmt = 0;
                POSLink_ApprovedAmt = 0;
                POSLink_RemainingBalance = 0;
                POSLink_ExtraBalance = 0;

                PosDataObject.POS objPOS = new PosDataObject.POS();
                objPOS.Connection = SystemVariables.Conn;
                int refinv = objPOS.FetchMaxInvoiceNo();

                POSLink.PosLink pg = new POSLink.PosLink();

                pg.CommSetting = GeneralFunctions.GetPOSLinkCommSetup();

                POSLink.LogManagement plog = new POSLink.LogManagement();
                plog.LogLevel = 1;
                plog.LogFilePath = System.IO.Path.GetDirectoryName(POSLinkLogPath);
                pg.LogManageMent = plog;

                POSLink.PaymentRequest paymentRequest = new POSLink.PaymentRequest();

                if (strCard == "Credit Card")
                {
                    paymentRequest.TenderType = paymentRequest.ParseTenderType("CREDIT");
                    paymentRequest.SigSavePath = POSLinkSignatureFilePath();
                }

                if (strCard == "Debit Card")
                {
                    paymentRequest.TenderType = paymentRequest.ParseTenderType("DEBIT");


                    //POSLink_CashBack = 0;
                    //frmPOSCashBackPopup fcbkpopup = new frmPOSCashBackPopup();
                    //try
                    //{
                    //fcbkpopup.ShowDialog();
                    //if (fcbkpopup.DialogResult == System.Windows.Forms.DialogResult.OK)
                    //{
                    //POSLink_CashBack = fcbkpopup.CashBackAmount;
                    //}
                    //}
                    //finally
                    //{
                    //fcbkpopup.Dispose();
                    //}
                    //paymentRequest.CashBackAmt = Convert.ToString(POSLink_CashBack * 100);
                }

                if (strCard == "POSLink Gift Card")
                {
                    paymentRequest.TenderType = paymentRequest.ParseTenderType("GIFT");
                }

                if (strCard == "EBT Cash")
                {
                    paymentRequest.TenderType = paymentRequest.ParseTenderType("EBT_CASHBENEFIT");
                }

                if (strCard == "Food Stamps")
                {
                    paymentRequest.TenderType = paymentRequest.ParseTenderType("EBT_FOODSTAMP");
                }

                paymentRequest.TransType = paymentRequest.ParseTransType("SALE");

                paymentRequest.Amount = Convert.ToString(dblCardAmt * 100);

                paymentRequest.OrigRefNum = "";
                paymentRequest.InvNum = refinv.ToString();
                paymentRequest.UserID = "";
                paymentRequest.PassWord = "";
                paymentRequest.ClerkID = "";
                paymentRequest.ServerID = "";
                paymentRequest.ECRRefNum = "1";

                pg.PaymentRequest = paymentRequest;

                POSLink.ProcessTransResult result = new POSLink.ProcessTransResult();

                result = pg.ProcessTrans();

                if (result.Code == POSLink.ProcessTransResultCode.OK)
                {
                    POSLink.PaymentResponse paymentResponse = pg.PaymentResponse;
                    if (paymentResponse != null && paymentResponse.ResultCode != null)
                    {
                        POSLink_ResultCode = paymentResponse.ResultCode;
                        POSLink_ResultTxt = paymentResponse.ResultTxt;
                        POSLink_RefNum = paymentResponse.RefNum;

                        POSLink_RequestedAmt = GeneralFunctions.fnDouble(paymentResponse.RequestedAmount) / 100;
                        POSLink_ApprovedAmt = GeneralFunctions.fnDouble(paymentResponse.ApprovedAmount) / 100;
                        POSLink_RemainingBalance = GeneralFunctions.fnDouble(paymentResponse.RemainingBalance) / 100;
                        POSLink_ExtraBalance = GeneralFunctions.fnDouble(paymentResponse.ExtraBalance) / 100;

                        POSLink_BogusAccountNum = paymentResponse.BogusAccountNum;
                        POSLink_CardType = paymentResponse.CardType;


                        POSLink_AuthCode = paymentResponse.AuthCode;

                        POSLink_CashBack = GeneralFunctions.GetPAXCashback(paymentResponse.ExtData);

                        if (POSLink_CashBack != 0) boolPAXCashBack = true;

                        if (POSLink_ResultCode == "000000") // Approved
                        {
                            double AthAmount = POSLink_ApprovedAmt;

                            if (AthAmount < POSLink_RequestedAmt)
                            {
                                //WriteToPrecidiaLogFile("Less authorized");
                                new MessageBoxWindow().Show(Properties.Resources.Card_only_authorized.Replace("$", SystemVariables.CurrencySymbol) + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources.Please_select_another_tender_to_finish_the_transaction_, Properties.Resources.Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                boolPOSLinkLessAuthorised = true;
                            }

                            bool find = false;
                            foreach (DataRow dra1 in dtblTender.Rows)
                            {
                                if (dra1["TENDER"].ToString() == strCard)
                                {
                                    dra1["CCTRANNO"] = intCardTranID.ToString();
                                    find = true;
                                    break;
                                }
                            }


                            if (!find)
                            {
                                PosDataObject.TenderTypes tend = new PosDataObject.TenderTypes();
                                tend.Connection = SystemVariables.Conn;
                                int TenderID = tend.FetchCCID();
                                dtblTender.Rows.Add(new object[] { TenderID.ToString(), strCard, GeneralFunctions.fnDouble(POSLink_ApprovedAmt), "", "", "", "0", intCardTranID.ToString(), "" });
                            }



                            string updtstr = "";

                            objcard.MercuryRecordNo = "";
                            objcard.MercuryResponseOrigin = "";
                            objcard.MercuryResponseReturnCode = "";
                            objcard.MercuryTextResponse = "";

                            objcard.MercuryInvNo = "";
                            objcard.MercuryProcessData = "";
                            objcard.MercuryTranCode = "";
                            objcard.MercuryPurchaseAmount = POSLink_RequestedAmt;
                            objcard.CardAmount = POSLink_ApprovedAmt - POSLink_CashBack;
                            objcard.CardType = POSLink_CardType;
                            objcard.AuthCode = POSLink_AuthCode;
                            objcard.Reference = POSLink_RefNum;
                            objcard.AcqRefData = "";
                            objcard.TokenData = "";

                            objcard.RefCardAct = POSLink_BogusAccountNum;
                            objcard.RefCardLogo = POSLink_CardType;
                            objcard.RefCardEntry = "";
                            objcard.RefCardAuthID = POSLink_AuthCode;
                            objcard.RefCardTranID = POSLink_RefNum;
                            objcard.RefCardMerchID = "";
                            objcard.RefCardAuthAmount = POSLink_ApprovedAmt;
                            objcard.CardTranType = "Sale";
                            objcard.AdjustFlag = "N";
                            objcard.RefCardBalAmount = POSLink_RemainingBalance;
                            objcard.PrintXml = "";
                            updtstr = objcard.UpdateCardResponse();

                            if (!boolPOSLinkLessAuthorised)
                            {
                                if (updtstr == "")
                                {
                                    blCardVarify = true;
                                }
                                else
                                {
                                    blCardVarify = false;
                                }
                            }
                            else
                            {
                                blCardVarify = false;
                            }

                        }
                        else
                        {
                            blCardVarify = false;
                        }

                    }
                    else
                    {
                        blCardVarify = false;
                    }

                }
                else if (result.Code == POSLink.ProcessTransResultCode.TimeOut)
                {
                    blCardVarify = false;
                }
                else
                {
                    blCardVarify = false;

                }
            }
            */








            if (blCardVarify)
            {
                return true;
            }
            else
            {
                if (blCardVarify)
                {
                    /*if (strCard != "Mercury Gift Card") new MessageBoxWindow().Show(Properties.Resources."Transaction failed.", "Credit Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                    else new MessageBoxWindow().Show(Properties.Resources."Transaction failed.", "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);*/
                    return false;
                }
                else
                {
                    blCardVarify = false;
                    return false;
                }
            }
        }
        private bool CheckZeroQuantity()
        {
            bool val = false;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "C")
                    || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")) continue;

                if (GeneralFunctions.fnDouble(dr["QTY"].ToString()) == 0)
                {
                    val = true;
                    break;
                }
            }
            return val;
        }
        private bool CheckActiveCustomer(int pCust)
        {
            if ((blReturnItem) || (blRentRecall) || (blRepairRecall)) return true;
            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            return objpos.IsActiveCustomer(pCust);
        }
        private DataTable GetGeneralStockData(int PID)
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchGeneralStockData(PID);
        }
        private double GetMartixStock(int MOID, string OV1, string OV2, string OV3)
        {
            PosDataObject.POS objpos2 = new PosDataObject.POS();
            objpos2.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos2.FetchMatrixAvailableStock(MOID, OV1, OV2, OV3);
        }
        private double PrevQty(int PID)
        {
            double dbqty = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if (((dr["PRODUCTTYPE"].ToString() != "G") && (dr["PRODUCTTYPE"].ToString() != "AR")
                    && (dr["PRODUCTTYPE"].ToString() != "X") && (dr["PRODUCTTYPE"].ToString() != "O")
                    && (dr["PRODUCTTYPE"].ToString() != "C") && (dr["PRODUCTTYPE"].ToString() != "Z") && (dr["PRODUCTTYPE"].ToString() != "H")) &&
                    (dr["ID"].ToString() == PID.ToString())) dbqty = dbqty + GeneralFunctions.fnDouble(dr["QTY"].ToString());

            }
            return dbqty;
        }
        private DataTable GetMatrixData(int PID)
        {
            PosDataObject.POS objpos3 = new PosDataObject.POS();
            objpos3.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos3.FetchMatrixOptionData(PID);
        }
        private void RemoveProductFromCart()
        {
            foreach (DataRow dr in dtblZeroStock.Rows)
            {
                int inIndex = -1;
                System.Collections.ArrayList CheckArray = new System.Collections.ArrayList();
                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "AR") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")
                    || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                foreach (DataRow dr1 in dtblPOS.Rows)
                {
                    inIndex++;
                    if ((dr["PRODUCTTYPE"].ToString() == dr1["PRODUCTTYPE"].ToString()) &&
                        (dr["ID"].ToString() == dr1["ID"].ToString()) &&
                        (dr["MATRIXOID"].ToString() == dr1["MATRIXOID"].ToString()) &&
                        (dr["MATRIXOV1"].ToString() == dr1["MATRIXOV1"].ToString()) &&
                        (dr["MATRIXOV2"].ToString() == dr1["MATRIXOV2"].ToString()) &&
                        (dr["MATRIXOV3"].ToString() == dr1["MATRIXOV3"].ToString()))
                    {
                        CheckArray.Add(dr1["UNIQUE"].ToString());

                    }
                }
                for (int i = 0; i <= CheckArray.Count - 1; i++)
                {
                    string iID = CheckArray[i].ToString();
                    DeleteRowfromBasket(dtblPOS, iID);
                }
                CheckArray.Clear();

            }
            dtblZeroStock.Rows.Clear();
        }
        private string GetFStamp(int PID)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objProduct.GetFoodStampFlag(PID);
        }
        private bool IsFoodStampableFees(int FID)
        {
            PosDataObject.POS opos = new PosDataObject.POS();
            opos.Connection = SystemVariables.Conn;
            return opos.IsFoodStampableFees(FID);
        }
        private bool IsApplyToQtyFees(int FID)
        {
            PosDataObject.POS opos = new PosDataObject.POS();
            opos.Connection = SystemVariables.Conn;
            return opos.IsApplyToQtyFees(FID);
        }
        private double GetFoodStampAmount()
        {
            double pr = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "C")
                    || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")) continue;
                if (GetFStamp(GeneralFunctions.fnInt32(dr["ID"].ToString())) != "Y") continue;
                double rate = 0;
                double qty = 1;
                //if (dr["RATE"].ToString() == "") rate = 0; else rate = GeneralFunctions.fnDouble(dr["RATE"].ToString());
                //if (dr["QTY"].ToString() == "") qty = 1; else qty = GeneralFunctions.fnDouble(dr["QTY"].ToString());

                pr = pr + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
            }

            foreach (DataRow dr1 in dtblPOS.Rows)
            {
                if (dr1["FEESID"].ToString() == "0") continue;
                if (dr1["PRODUCTTYPE"].ToString() == "H") continue;
                if (IsFoodStampableFees(GeneralFunctions.fnInt32(dr1["FEESID"].ToString())))
                {
                    if (IsApplyToQtyFees(GeneralFunctions.fnInt32(dr1["FEESID"].ToString())))
                    {
                        pr = pr + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr1["QTY"].ToString()) * (GeneralFunctions.fnDouble(dr1["FEES"].ToString()) + GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString())));
                    }
                    else
                    {
                        pr = pr + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr1["FEES"].ToString()) + GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString()));
                    }
                }
            }

            double cpnAmount = 0;
            double cpnPerc = 0;
            double cpnTotal = 0;

            CouponCalculation_FoodStamp(dtblPOS, ref cpnAmount, ref cpnPerc, ref cpnTotal);
            pr = pr - cpnAmount;
            return pr;
        }
        private bool IsNonDiscountableItem(int pID)
        {
            PosDataObject.POS ops = new PosDataObject.POS();
            ops.Connection = SystemVariables.Conn;
            return ops.IsNonDiscountableItem(pID);
        }
        private bool CheckIfRestrictedItem(int pID)
        {
            bool ret = false;
            PosDataObject.POS objps1 = new PosDataObject.POS();
            objps1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            ret = objps1.IsRestrictedDiscount(pID);
            return ret;
        }
        private double RestrictItemApplicableAmount_FS(int DID)
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "H")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["DISCOUNTID"].ToString() != "0") continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                if (GetFStamp(GeneralFunctions.fnInt32(dr["ID"].ToString())) != "Y") continue;
                string chr = "N";
                PosDataObject.POS objp = new PosDataObject.POS();
                objp.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objp.IsApplicableForRestrictedDiscount(GeneralFunctions.fnInt32(dr["ID"].ToString()), DID, ref chr);
                if (chr == "Y") ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }
        private double AllItemApplicableAmount_FS()
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "H")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["DISCOUNTID"].ToString() != "0") continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                if (GetFStamp(GeneralFunctions.fnInt32(dr["ID"].ToString())) != "Y") continue;
                ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }
        private void CouponCalculation_FoodStamp(DataTable dtbl, ref double resultAmount, ref double resultPerc, ref double TotAmount)
        {
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "H")
                    || (dr["PRODUCTTYPE"].ToString() == "Z")) continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                if (GetFStamp(GeneralFunctions.fnInt32(dr["ID"].ToString())) != "Y") continue;
                TotAmount = TotAmount + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            double dpp = 0;
            double dAA = 0;
            double dp = 0;
            double dA = 0;
            double retamt = 0;
            resultAmount = 0;
            double AppAmount = 0;
            if (strCurrentServiceType == "Repair") return;
            int cnt = -1;

            dtbl.DefaultView.Sort = "ITEMINDEX asc";
            dtbl.DefaultView.ApplyDefaultSort = true;

            foreach (DataRowView dr in dtbl.DefaultView)
            {
                cnt++;
                dp = 0;
                dA = 0;
                AppAmount = 0;
                if (dr["PRODUCTTYPE"].ToString() != "C") continue;
                if (dr["DISCLOGIC"].ToString() == "P") dp = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());
                if (dr["DISCLOGIC"].ToString() == "A") dA = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());


                if (CheckIfRestrictedItem(GeneralFunctions.fnInt32(dr["ID"].ToString())))
                {
                    // discount calculation on restricted items
                    AppAmount = RestrictItemApplicableAmount_FS(GeneralFunctions.fnInt32(dr["ID"].ToString()));

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    resultAmount = resultAmount + retamt;
                }
                else
                {
                    // discount calculation on all items

                    AppAmount = AllItemApplicableAmount_FS();

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    resultAmount = resultAmount + retamt;
                }
            }
            resultAmount = GeneralFunctions.FormatDouble(resultAmount);
            if (TotAmount != 0) resultPerc = dpp + GeneralFunctions.fnDouble(dAA * 100 / TotAmount);
        }
        private void CouponCalculation(DataTable dtbl, ref double resultAmount, ref double resultPerc, ref double TotAmount)
        {
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "H")
                    || (dr["PRODUCTTYPE"].ToString() == "Z")) continue;
                if ((dr["BUYNGETFREECATEGORY"].ToString() == "B") || (dr["BUYNGETFREECATEGORY"].ToString() == "F")) continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                TotAmount = TotAmount + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            double dpp = 0;
            double dAA = 0;
            double dp = 0;
            double dA = 0;
            double retamt = 0;
            resultAmount = 0;
            double AppAmount = 0;
            if (strCurrentServiceType == "Repair") return;
            int cnt = -1;

            dtbl.DefaultView.Sort = "ITEMINDEX asc";
            dtbl.DefaultView.ApplyDefaultSort = true;

            foreach (DataRowView dr in dtbl.DefaultView)
            {
                cnt++;
                dp = 0;
                dA = 0;
                AppAmount = 0;
                if (dr["PRODUCTTYPE"].ToString() != "C") continue;
                if (dr["DISCLOGIC"].ToString() == "P") dp = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());
                if (dr["DISCLOGIC"].ToString() == "A") dA = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());


                if (CheckIfRestrictedItem(GeneralFunctions.fnInt32(dr["ID"].ToString())))
                {
                    // discount calculation on restricted items
                    AppAmount = RestrictItemApplicableAmount(GeneralFunctions.fnInt32(dr["ID"].ToString()));

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    //gridControl1.SetCellValue(cnt, colDisc, retamt.ToString());
                    gridControl1.SetCellValue(cnt, colDisc, retamt.ToString());
                    resultAmount = resultAmount + retamt;


                }
                else
                {
                    // discount calculation on all items

                    AppAmount = AllItemApplicableAmount();

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    gridControl1.SetCellValue(cnt, colDisc, retamt.ToString());
                    resultAmount = resultAmount + retamt;
                }
            }
            resultAmount = GeneralFunctions.FormatDouble(resultAmount);
            if (TotAmount != 0) resultPerc = dpp + GeneralFunctions.fnDouble(dAA * 100 / TotAmount);

        }
        private double AllItemApplicableAmount()
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["DISCOUNTID"].ToString() != "0") continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }

        private double AllItemApplicableAmount_Fees()
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["FEESID"].ToString() != "0") continue;
                ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }
        private double RestrictItemApplicableAmount(int DID)
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["DISCOUNTID"].ToString() != "0") continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                string chr = "N";
                PosDataObject.POS objp = new PosDataObject.POS();
                objp.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objp.IsApplicableForRestrictedDiscount(GeneralFunctions.fnInt32(dr["ID"].ToString()), DID, ref chr);
                if (chr == "Y") ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }
        private bool CheckIfRestrictedItem_Fees(int pID)
        {
            bool ret = false;
            PosDataObject.POS objps1 = new PosDataObject.POS();
            objps1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            ret = objps1.IsRestrictedFees(pID);
            return ret;
        }
        private double GetTaxRate(int ProductID, double ApplicableAmount, string Qty, ref int tx1ty, ref int tx1id, ref double tx1, ref int tx2ty, ref int tx2id, ref double tx2,
                             ref int tx3ty, ref int tx3id, ref double tx3, ref double TaxInclusiveRate)
        {
            DataTable dtblTax = new DataTable();
            double dblTax = 0;
            PosDataObject.Product objTax = new PosDataObject.Product();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);

            if ((strCurrentServiceType == "Sales") || (strCurrentServiceType == "Repair")) dtblTax = objTax.ShowActiveTaxes(ProductID);
            if (strCurrentServiceType == "Rent") dtblTax = objTax.ShowActiveRentTaxes(ProductID);
            //if (strCurrentServiceType == "Repair") dtblTax = objTax.ShowActiveRepairTaxes(ProductID);
            int cnt = 0;

            double tqty = 0;
            if (Qty == "")
            {
                tqty = 1;
            }
            else
            {
                tqty = GeneralFunctions.fnDouble(Qty);
            }

            foreach (DataRow drT in dtblTax.Rows)
            {
                cnt++;
                if (drT["TaxRate"].ToString() != "")
                {
                    if (cnt == 1)
                    {
                        tx1ty = GeneralFunctions.fnInt32(drT["TaxType"].ToString());
                        tx1id = GeneralFunctions.fnInt32(drT["TaxID"].ToString());
                    }
                    if (cnt == 2)
                    {
                        tx2ty = GeneralFunctions.fnInt32(drT["TaxType"].ToString());
                        tx2id = GeneralFunctions.fnInt32(drT["TaxID"].ToString());
                    }
                    if (cnt == 3)
                    {
                        tx3ty = GeneralFunctions.fnInt32(drT["TaxType"].ToString());
                        tx3id = GeneralFunctions.fnInt32(drT["TaxID"].ToString());
                    }
                    double tx = 0;
                    if (drT["TaxType"].ToString() == "0")
                    {
                        if (Settings.TaxInclusive == "N")
                        {
                            tx = (GeneralFunctions.fnDouble(drT["TaxRate"].ToString()) * ApplicableAmount) / 100;
                        }
                        else
                        {

                            double TxApplicableAmount = GeneralFunctions.FormatDouble(ApplicableAmount / tqty);

                            //double tempApplicableAmount = TxApplicableAmount / ((100 + GeneralFunctions.fnDouble(drT["TaxRate"].ToString())) / 100);

                            //tx = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(TxApplicableAmount - tempApplicableAmount) * tqty);

                            double tempApplicableAmount = ApplicableAmount / ((100 + GeneralFunctions.fnDouble(drT["TaxRate"].ToString())) / 100);
                            tx = GeneralFunctions.FormatDouble(ApplicableAmount - tempApplicableAmount);

                        }
                    }
                    else
                    {
                        //tx = (GeneralFunctions.fnDouble(drT["TaxRate"].ToString()) * ApplicableAmount) / 100;
                        tx = GeneralFunctions.GetTaxFromTaxTable(GeneralFunctions.fnInt32(drT["TaxID"].ToString()), GeneralFunctions.fnDouble(drT["TaxRate"].ToString()), ApplicableAmount);
                    }
                    if (cnt == 1) tx1 = tx; // GeneralFunctions.FormatDouble(tx);
                    if (cnt == 2) tx2 = tx;// GeneralFunctions.FormatDouble(tx);
                    if (cnt == 3) tx3 = tx;// GeneralFunctions.FormatDouble(tx);

                    dblTax = dblTax + tx;
                }
            }

            if (Settings.TaxInclusive == "Y")
            {
                ApplicableAmount = GeneralFunctions.FormatDouble(ApplicableAmount / tqty);
                TaxInclusiveRate = (ApplicableAmount * tqty - dblTax) / tqty;
            }

            dtblTax.Dispose();
            return dblTax;
        }
        private double GetTaxRate(int ProductID, double ApplicableAmount)
        {
            DataTable dtblTax = new DataTable();
            double dblTax = 0;
            PosDataObject.Product objTax = new PosDataObject.Product();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);

            if (strServiceTypeQT == "Sales") dtblTax = objTax.ShowActiveTaxes(ProductID);
            if (strServiceTypeQT == "Rent") dtblTax = objTax.ShowActiveRentTaxes(ProductID);

            foreach (DataRow drT in dtblTax.Rows)
            {

                if (drT["TaxRate"].ToString() != "")
                {
                    double tx = 0;
                    if (drT["TaxType"].ToString() == "0")
                    {
                        //tx = (GeneralFunctions.fnDouble(drT["TaxRate"].ToString()) * ApplicableAmount) / 100;

                        if (Settings.TaxInclusive == "N")
                        {
                            tx = (GeneralFunctions.fnDouble(drT["TaxRate"].ToString()) * ApplicableAmount) / 100;
                        }
                        else
                        {
                            double tempApplicableAmount = ApplicableAmount / ((100 + GeneralFunctions.fnDouble(drT["TaxRate"].ToString())) / 100);
                            tx = GeneralFunctions.FormatDouble(ApplicableAmount - tempApplicableAmount);
                        }
                    }
                    else
                    {
                        tx = GeneralFunctions.GetTaxFromTaxTable(GeneralFunctions.fnInt32(drT["TaxID"].ToString()), GeneralFunctions.fnDouble(drT["TaxRate"].ToString()), ApplicableAmount);
                    }
                    dblTax = dblTax + tx;
                }
            }
            dtblTax.Dispose();
            return dblTax;
        }
        private void FeesCouponCalculation(DataTable dtbl, ref double resultAmount, ref double resultPerc, ref double TotAmount, ref double TxAmount)
        {
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "H")
                    || (dr["PRODUCTTYPE"].ToString() == "Z")) continue;
                TotAmount = TotAmount + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            double dpp = 0;
            double dAA = 0;
            double dp = 0;
            double dA = 0;
            double retamt = 0;
            resultAmount = 0;
            double AppAmount = 0;
            if (strCurrentServiceType == "Repair") return;
            int cnt = -1;

            dtbl.DefaultView.Sort = "ITEMINDEX asc";
            dtbl.DefaultView.ApplyDefaultSort = true;

            foreach (DataRowView dr in dtbl.DefaultView)
            {
                cnt++;
                dp = 0;
                dA = 0;
                AppAmount = 0;
                if (dr["PRODUCTTYPE"].ToString() != "H") continue;
                if (dr["DISCLOGIC"].ToString() == "P") dp = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());
                if (dr["DISCLOGIC"].ToString() == "A") dA = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());


                if (CheckIfRestrictedItem_Fees(GeneralFunctions.fnInt32(dr["ID"].ToString())))
                {
                    // discount calculation on restricted items
                    AppAmount = RestrictItemApplicableAmount_Fees(GeneralFunctions.fnInt32(dr["ID"].ToString()));

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    gridControl1.SetCellValue(cnt, colDisc, retamt.ToString());
                    resultAmount = resultAmount + retamt;

                }
                else
                {
                    // discount calculation on all items

                    AppAmount = AllItemApplicableAmount_Fees();

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    gridControl1.SetCellValue(cnt, colDisc, retamt.ToString());
                    resultAmount = resultAmount + retamt;
                }

                resultAmount = GeneralFunctions.FormatDouble(retamt);

                double feestax = 0;
                double taxrate = 0;
                string tx = "";
                if (dr["FEESQTY"].ToString() == "Y")
                {
                    PosDataObject.POS objpos = new PosDataObject.POS();
                    objpos.Connection = SystemVariables.Conn;
                    objpos.GetFeesTax(GeneralFunctions.fnInt32(dr["ID"].ToString()), ref taxrate, ref tx);
                    try
                    {
                        //feestax = GeneralFunctions.FormatDouble(retamt * taxrate / 100);

                        if (Settings.TaxInclusive == "N")
                        {
                            feestax = GeneralFunctions.FormatDouble(retamt * taxrate / 100);
                        }
                        else
                        {
                            double tempApplicableAmount = retamt / ((100 + taxrate) / 100);
                            feestax = GeneralFunctions.FormatDouble(retamt - tempApplicableAmount);
                        }
                    }
                    catch
                    {
                        feestax = 0;
                    }

                    TxAmount = TxAmount + feestax;
                }

                if (Settings.TaxInclusive == "Y")
                {
                    retamt = retamt - feestax;
                }

                dr["FEESID"] = dr["ID"].ToString();
                dr["FEESLOGIC"] = dr["DISCLOGIC"].ToString();
                dr["FEESVALUE"] = dr["DISCVALUE"].ToString();
                dr["FEESTAXRATE"] = taxrate.ToString();
                dr["FEES"] = retamt.ToString();
                dr["FEESTAX"] = GeneralFunctions.FormatDouble(feestax).ToString();

            }

            resultAmount = GeneralFunctions.FormatDouble(resultAmount);
            TxAmount = GeneralFunctions.FormatDouble(TxAmount);
            if (TotAmount != 0) resultPerc = dpp + GeneralFunctions.fnDouble(dAA * 100 / TotAmount);

        }
        private int GetTaxType(int TaxID)
        {
            PosDataObject.Tax objtx = new PosDataObject.Tax();
            objtx.Connection = SystemVariables.Conn;
            return objtx.GetTaxType(TaxID);
        }
        private void SpecialMixMatchCalculation(DataTable dtbl, ref double resultAmount)
        {

            double dpp = 0;
            double dAA = 0;
            double dp = 0;
            double dA = 0;
            double retamt = 0;
            resultAmount = 0;
            double AppAmount = 0;
            if (strCurrentServiceType == "Repair") return;
            int cnt = -1;

            dtbl.DefaultView.Sort = "ITEMINDEX asc";
            dtbl.DefaultView.ApplyDefaultSort = true;

            foreach (DataRowView dr in dtbl.DefaultView)
            {
                cnt++;
                dp = 0;
                dA = 0;
                AppAmount = 0;
                if (dr["PRODUCTTYPE"].ToString() != "Z") continue;
                if (dr["DISCLOGIC"].ToString() == "P") dp = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());
                if (dr["DISCLOGIC"].ToString() == "A") dA = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());


                AppAmount = GeneralFunctions.fnDouble(dr["DTXRATE"].ToString());

                if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                {
                    retamt = (AppAmount * dp / 100) + dA;
                    dAA = dAA + dA;
                    dpp = dpp + dp;
                }
                gridControl1.SetCellValue(cnt, colDisc, retamt.ToString());
                resultAmount = resultAmount + retamt;
            }
            resultAmount = GeneralFunctions.FormatDouble(resultAmount);

        }
        private double RestrictItemApplicableAmount_Fees(int DID)
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["FEESID"].ToString() != "0") continue;

                string chr = "N";
                PosDataObject.POS objp = new PosDataObject.POS();
                objp.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objp.IsApplicableForRestrictedFees(GeneralFunctions.fnInt32(dr["ID"].ToString()), DID, ref chr);
                if (chr == "Y") ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }
        private void GetTotal()
        {
            if (Settings.ShowFoodStampTotal == "Y")
            {
                double val = GetFoodStampAmount();
                if (val != 0)
                {
                    lbFStotal.Text = "FS:" + GeneralFunctions.FormatDouble1(val); // Properties.Resources."Food Stamp ", "frmPOSN_FoodStamp")
                }
                else
                {
                    lbFStotal.Text = "";
                }
            }
            else
            {
                lbFStotal.Text = "";
            }

            bl100percinvdiscount = false;
            foreach (DataRow drc in dtblPOS.Rows)
            {
                if (drc["PRODUCTTYPE"].ToString() != "C") continue;
                if (drc["PRODUCTTYPE"].ToString() != "H") continue;
                if (drc["PRODUCTTYPE"].ToString() != "Z") continue;
                if ((drc["DISCLOGIC"].ToString() == "P") && (GeneralFunctions.fnDouble(drc["DISCVALUE"].ToString()) == 100))
                {
                    bl100percinvdiscount = true;
                    break;
                }
            }
            dblFeesCrg = 0;
            dblCouponAmount = 0;
            dblCouponPerc = 0;
            dblCouponApplicableTotal = 0;

            dblSpecialMixMatchAmount = 0;


            dblFeesCouponAmount = 0;
            dblFeesCouponPerc = 0;
            dblFeesCouponApplicableTotal = 0;
            dblFeesCouponTaxAmount = 0;
            dblFeesCouponTaxRate = 0;

            CouponCalculation(dtblPOS, ref dblCouponAmount, ref dblCouponPerc, ref dblCouponApplicableTotal);

            FeesCouponCalculation(dtblPOS, ref dblFeesCouponAmount, ref dblFeesCouponPerc, ref dblFeesCouponApplicableTotal, ref dblFeesCouponTaxAmount);

            SpecialMixMatchCalculation(dtblPOS, ref dblSpecialMixMatchAmount);

            numSubTotal.Text = "0";
            numDiscount.Text = "0";
            numTotal.Text = "0";
            numTax.Text = "0";
            double dblSubTotal = 0;
            double dblDisc = 0;
            double dblTax = 0;
            double dblDTax = 0;
            double rate = 0;
            double qty = 0;
            double renttime = 0;
            double fees = 0;
            double feestax = 0;
            string feeqty = "N";

            double totalTaxRate = 0;

            foreach (DataRow dr in dtblPOS.Rows)
            {


                if (dr["QTY"].ToString() == "") qty = 1; else qty = GeneralFunctions.fnDouble(dr["QTY"].ToString());




                if (((strTaxExempt == "N") && (blChangeCustomer)) || ((strTaxExempt == "N") && (intCustID == 0)))
                {
                    if ((dr["PRODUCTTYPE"].ToString() != "G") && (dr["PRODUCTTYPE"].ToString() != "A") && (dr["PRODUCTTYPE"].ToString() != "C")
                        && (dr["PRODUCTTYPE"].ToString() != "Z") && (dr["PRODUCTTYPE"].ToString() != "H")
                        && (dr["PRODUCTTYPE"].ToString() != "X") && (dr["PRODUCTTYPE"].ToString() != "O"))
                    {
                        if (!bl100percinvdiscount)
                        {
                            int tx1ty = 0;
                            int tx1id = 0;
                            double tx1 = 0;
                            int tx2ty = 0;
                            int tx2id = 0;
                            double tx2 = 0;
                            int tx3ty = 0;
                            int tx3id = 0;
                            double tx3 = 0;
                            double tempDTax = 0;
                            double taxInclusiveRate = 0;

                            if (dr["PRODUCTTYPE"].ToString() != "B")
                            {
                                if (dr["EDITF"].ToString() == "N")
                                {
                                    dblTax = dblTax + GeneralFunctions.fnDouble((GetTaxRate(GeneralFunctions.fnInt32(dr["ID"].ToString()), (Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())), dr["QTY"].ToString(), ref tx1ty, ref tx1id, ref tx1, ref tx2ty, ref tx2id, ref tx2, ref tx3ty, ref tx3id, ref tx3, ref taxInclusiveRate)) * (100 - dblCouponPerc) / 100);

                                    if (dr["SERVICE"].ToString() == "Sales")
                                    {
                                        if (CustDTaxID > 0)
                                        {
                                            tempDTax = GetDTaxAmount(CustDTaxID, CustDTaxRate, CustDTaxType, GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                                            dblDTax = dblDTax + tempDTax;
                                            dblTax = dblTax + tempDTax;
                                        }
                                    }
                                }
                                else
                                {
                                    double dblAppTax = 0;

                                    if (dr["TAXABLE1"].ToString() == "Y")
                                    {
                                        tx1id = GeneralFunctions.fnInt32(dr["TAXID1"].ToString());
                                        tx1ty = GetTaxType(tx1id);
                                        if (tx1ty == 0)
                                        {
                                            if (Settings.TaxInclusive == "N")
                                            {
                                                tx1 = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                            }
                                            else
                                            {
                                                //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                                //double tempApplicableAmount = unitAmount / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString())) / 100);
                                                //tx1 = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(unitAmount - tempApplicableAmount) * qty);

                                                double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString())) / 100);
                                                tx1 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);
                                            }

                                        }
                                        else tx1 = GeneralFunctions.GetTaxFromTaxTable(tx1id, GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString()), GeneralFunctions.fnDouble(dr["PRICE"].ToString()));

                                        dblAppTax = GeneralFunctions.FormatDouble(dblAppTax + tx1 * (100 - dblCouponPerc) / 100);
                                    }
                                    if (dr["TAXABLE2"].ToString() == "Y")
                                    {
                                        tx2id = GeneralFunctions.fnInt32(dr["TAXID2"].ToString());
                                        tx2ty = GetTaxType(tx2id);
                                        if (tx2ty == 0)
                                        {
                                            if (Settings.TaxInclusive == "N")
                                            {
                                                tx2 = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                            }
                                            else
                                            {
                                                //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                                //double tempApplicableAmount = unitAmount / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString())) / 100);
                                                //tx2 = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(unitAmount - tempApplicableAmount) * qty);

                                                double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString())) / 100);
                                                tx2 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);
                                            }

                                        }
                                        else tx2 = GeneralFunctions.GetTaxFromTaxTable(tx2id, GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString()), GeneralFunctions.fnDouble(dr["PRICE"].ToString()));

                                        dblAppTax = GeneralFunctions.FormatDouble(dblAppTax + tx2 * (100 - dblCouponPerc) / 100);
                                    }

                                    if (dr["TAXABLE3"].ToString() == "Y")
                                    {
                                        tx3id = GeneralFunctions.fnInt32(dr["TAXID3"].ToString());
                                        tx3ty = GetTaxType(tx3id);
                                        if (tx3ty == 0)
                                        {
                                            if (Settings.TaxInclusive == "N")
                                            {
                                                tx3 = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                            }
                                            else
                                            {
                                                //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                                //double tempApplicableAmount = unitAmount / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString())) / 100);
                                                //tx3 = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(unitAmount - tempApplicableAmount) * qty);

                                                double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString())) / 100);
                                                tx3 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);
                                            }
                                        }
                                        else tx3 = GeneralFunctions.GetTaxFromTaxTable(tx3id, GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString()), GeneralFunctions.fnDouble(dr["PRICE"].ToString()));

                                        dblAppTax = GeneralFunctions.FormatDouble(dblAppTax + tx3 * (100 - dblCouponPerc) / 100);
                                    }

                                    if (dr["SERVICE"].ToString() == "Sales")
                                    {
                                        if (CustDTaxID > 0)
                                        {
                                            tempDTax = GetDTaxAmount(CustDTaxID, CustDTaxRate, CustDTaxType, GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                                            dblDTax = dblDTax + tempDTax;
                                            dblTax = dblTax + tempDTax;
                                        }
                                    }

                                    if (Settings.TaxInclusive == "Y")
                                    {

                                        taxInclusiveRate = GeneralFunctions.FormatDouble((GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString()))) - GeneralFunctions.FormatDouble(tx1 + tx2 + tx3)) / qty);
                                        //taxInclusiveRate = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) - GeneralFunctions.FormatDouble(tx1 + tx2 + tx3)) / qty);
                                    }

                                    dblTax = dblTax + dblAppTax;
                                }
                            }
                            else
                            {
                                double dblAppTax = 0;

                                if (dr["TAXABLE1"].ToString() == "Y")
                                {
                                    tx1id = GeneralFunctions.fnInt32(dr["TAXID1"].ToString());
                                    tx1ty = GetTaxType(tx1id);
                                    if (tx1ty == 0)
                                    {
                                        totalTaxRate = totalTaxRate + GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString());
                                        if (Settings.TaxInclusive == "N")
                                        {
                                            tx1 = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                        }
                                        else
                                        {
                                            //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                            //double tempApplicableAmount = unitAmount / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString())) / 100);
                                            //tx1 = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(unitAmount - tempApplicableAmount) * qty);

                                            double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString())) / 100);
                                            tx1 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);
                                        }
                                    }
                                    else tx1 = GeneralFunctions.GetTaxFromTaxTable(tx1id, GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString()), GeneralFunctions.fnDouble(dr["PRICE"].ToString()));

                                    dblAppTax = GeneralFunctions.FormatDouble(dblAppTax + tx1 * (100 - dblCouponPerc) / 100);
                                }
                                if (dr["TAXABLE2"].ToString() == "Y")
                                {
                                    tx2id = GeneralFunctions.fnInt32(dr["TAXID2"].ToString());
                                    tx2ty = GetTaxType(tx2id);
                                    if (tx2ty == 0)
                                    {
                                        totalTaxRate = totalTaxRate + GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString());
                                        if (Settings.TaxInclusive == "N")
                                        {
                                            tx2 = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                        }
                                        else
                                        {
                                            //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                            //double tempApplicableAmount = unitAmount / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString())) / 100);
                                            //tx2 = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(unitAmount - tempApplicableAmount) * qty);

                                            double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString())) / 100);
                                            tx2 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);
                                        }
                                    }
                                    else tx2 = GeneralFunctions.GetTaxFromTaxTable(tx2id, GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString()), GeneralFunctions.fnDouble(dr["PRICE"].ToString()));

                                    dblAppTax = GeneralFunctions.FormatDouble(dblAppTax + tx2 * (100 - dblCouponPerc) / 100);
                                }

                                if (dr["TAXABLE3"].ToString() == "Y")
                                {
                                    tx3id = GeneralFunctions.fnInt32(dr["TAXID3"].ToString());
                                    tx3ty = GetTaxType(tx3id);
                                    if (tx3ty == 0)
                                    {
                                        totalTaxRate = totalTaxRate + GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString());
                                        if (Settings.TaxInclusive == "N")
                                        {
                                            tx3 = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                        }
                                        else
                                        {
                                            //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                            //double tempApplicableAmount = unitAmount / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString())) / 100);
                                            //tx3 = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(unitAmount - tempApplicableAmount) * qty);

                                            double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString())) / 100);
                                            tx3 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);
                                        }
                                    }
                                    else tx3 = GeneralFunctions.GetTaxFromTaxTable(tx3id, GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString()), GeneralFunctions.fnDouble(dr["PRICE"].ToString()));

                                    dblAppTax = GeneralFunctions.FormatDouble(dblAppTax + tx3 * (100 - dblCouponPerc) / 100);
                                }

                                if (dr["SERVICE"].ToString() == "Sales")
                                {
                                    if (CustDTaxID > 0)
                                    {
                                        tempDTax = GetDTaxAmount(CustDTaxID, CustDTaxRate, CustDTaxType, GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                                        dblDTax = dblDTax + tempDTax;
                                        dblTax = dblTax + tempDTax;
                                    }
                                }

                                if (Settings.TaxInclusive == "Y")
                                {
                                    //taxInclusiveRate = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) - GeneralFunctions.FormatDouble(tx1 + tx2 + tx3)) / qty);
                                    //taxInclusiveRate = GeneralFunctions.FormatDouble((GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString()))) - GeneralFunctions.FormatDouble(tx1 + tx2 + tx3)) / qty);

                                    taxInclusiveRate = (GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - GeneralFunctions.FormatDouble(tx1 + tx2 + tx3)) / qty;
                                }

                                dblTax = dblTax + dblAppTax;
                            }

                            dr["TX1TYPE"] = tx1ty;
                            dr["TX1ID"] = tx1id;
                            dr["TX1"] = tx1;
                            dr["TX2TYPE"] = tx2ty;
                            dr["TX2ID"] = tx2id;
                            dr["TX2"] = tx2;
                            dr["TX3TYPE"] = tx3ty;
                            dr["TX3ID"] = tx3id;
                            dr["TX3"] = tx3;

                            dr["DTXTYPE"] = CustDTaxType;
                            dr["DTXID"] = CustDTaxID;
                            dr["DTXRATE"] = CustDTaxRate;
                            dr["DTX"] = tempDTax;

                            if (Settings.TaxInclusive == "Y")
                            {
                                if (blReturnItem)
                                {
                                    taxInclusiveRate = -taxInclusiveRate;
                                }
                                dr["RATE"] = taxInclusiveRate;
                                /*if (GeneralFunctions.fnDouble(dr["DISCOUNT"].ToString()) == 0)
                                {
                                    dr["NRATE"] = taxInclusiveRate;
                                }*/
                                dr["PRICE"] = GeneralFunctions.FormatDouble((blReturnItem == true ? -taxInclusiveRate : taxInclusiveRate) * qty);
                            }
                        }
                    }
                }

                if (dr["RATE"].ToString() == "") rate = 0; else rate = GeneralFunctions.fnDouble(dr["RATE"].ToString());

                if ((dr["RENTDURATION"].ToString() == "") || (dr["RENTDURATION"].ToString() == "0"))
                {
                    if ((blRentIssued) && (Settings.CalculateRentLater == "Y")) renttime = 0;
                    else renttime = 1;
                }
                else
                {
                    renttime = GeneralFunctions.fnDouble(dr["RENTDURATION"].ToString());
                }


                if (dr["PRODUCTTYPE"].ToString() != "C")
                {
                    if (dr["PRODUCTTYPE"].ToString() == "Z") continue;
                    if (dr["PRODUCTTYPE"].ToString() == "H") continue;
                    if (dr["PRODUCTTYPE"].ToString() != "O")
                    {
                        if ((dr["SERVICE"].ToString() == "Sales") || (dr["SERVICE"].ToString() == "Repair")) dblSubTotal = GeneralFunctions.FormatDouble(dblSubTotal + rate * qty);
                        if (dr["SERVICE"].ToString() == "Rent")
                        {
                            if (Settings.TaxInclusive == "N")
                            {
                                dblSubTotal = GeneralFunctions.FormatDouble(dblSubTotal + rate * qty * renttime);
                            }
                            else
                            {
                                dblSubTotal = GeneralFunctions.FormatDouble(dblSubTotal + rate * qty);
                            }
                        }
                        dblDisc = GeneralFunctions.FormatDouble(dblDisc + GeneralFunctions.fnDouble(dr["DISCOUNT"].ToString()));
                    }
                    else
                    {
                        dblSubTotal = GeneralFunctions.FormatDouble(dblSubTotal + GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                    }
                }

                if (GeneralFunctions.fnInt32(dr["FEESID"].ToString()) > 0)
                {
                    if (dr["PRODUCTTYPE"].ToString() != "H")
                    {
                        feeqty = dr["FEESQTY"].ToString();

                        if (!blReturnItem)
                        {
                            fees = fees + (feeqty == "Y" ? GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEES"].ToString())) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEES"].ToString())));
                            feestax = feestax + (feeqty == "Y" ? GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEESTAX"].ToString())) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEESTAX"].ToString())));
                        }
                        else
                        {
                            fees = fees + (feeqty == "Y" ? -GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEES"].ToString())) : -GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEES"].ToString())));
                            feestax = feestax + (feeqty == "Y" ? -GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEESTAX"].ToString())) : -GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEESTAX"].ToString())));
                        }
                    }
                }

            }

            if (blReturnItem)
            {
                if (dblSubTotal >= 0)
                {
                    dblSubTotal = -dblSubTotal;
                }
            }

            //CouponCalculation(dtblPOS, ref dblCouponAmount);

            /*
            if (Settings.TaxInclusive == "Y")
            {
                dblSubTotal = GeneralFunctions.FormatDouble(dblSubTotal - dblTax);
            }*/

            numSubTotal.Text = dblSubTotal.ToString("f2");
            numDiscount.Text = dblDisc.ToString("f2");
            numTax.Text = dblTax.ToString("f2");

            if (Settings.TaxInclusive == "N")
            {
                numTotal.Text = (Convert.ToDouble(numSubTotal.Text) - Convert.ToDouble(numDiscount.Text) + fees + feestax + Convert.ToDouble(numTax.Text) + dblFeesCouponAmount + dblFeesCouponTaxAmount - dblCouponAmount - dblSpecialMixMatchAmount).ToString("f2");
            }
            else
            {
                numTotal.Text = (Convert.ToDouble(numSubTotal.Text) + fees + feestax + Convert.ToDouble(numTax.Text) + dblFeesCouponAmount + dblFeesCouponTaxAmount - dblCouponAmount - dblSpecialMixMatchAmount).ToString("f2");
            }
            /*if (Settings.TaxInclusive == "N")
            {
                numTotal.Text = numSubTotal.Text - numDiscount.Text + fees + feestax + numTax.Text + dblFeesCouponAmount + dblFeesCouponTaxAmount - dblCouponAmount - dblSpecialMixMatchAmount;
            }
            else
            {
                numTotal.Text = numSubTotal.Text - numDiscount.Text + fees + feestax + dblFeesCouponAmount + dblFeesCouponTaxAmount - dblCouponAmount - dblSpecialMixMatchAmount;
            }*/

            dblFeesCrg = fees + feestax;
            CustDTaxValue = dblDTax;

            if (bool_btnsupnd)
            {
                if (dtblPOS.Rows.Count > 0) btnsupnd.Content = new TextBlock() { Text = Properties.Resources.Suspend, Foreground=Brushes.White };
                else btnsupnd.Content = new TextBlock() { Text = Properties.Resources.Resume, Foreground = Brushes.White };
            }
            if (strCurrentServiceType == "Repair")
            {
                if (dtblPOS.Rows.Count > 0)
                {
                    btnsvrepiar.Content = new TextBlock() { Text = "Save Invoice", Foreground = System.Windows.Media.Brushes.HotPink };

                }
                else
                {
                    if (blRepairRecall)
                    {
                        btnsvrepiar.Content = new TextBlock() { Text = "Save Invoice", Foreground = System.Windows.Media.Brushes.HotPink };

                    }
                    else
                    {
                        btnsvrepiar.Content = new TextBlock() { Text = "Open Invoice", Foreground = System.Windows.Media.Brushes.HotPink };

                    }
                }
            }
            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                int fval = gridView1.FocusedRowHandle;

                //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);

                SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), Convert.ToDouble(numSubTotal.Text), Convert.ToDouble(numDiscount.Text), Convert.ToDouble(numTax.Text), Convert.ToDouble(numTotal.Text), dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg); // raji
            }
        }

        private void DeleteRowfromBasket(DataTable BasketTbl, string DeleteID)
        {
            int intDeleteIndex = -1;

            DataRow dr;
            for (int i = 0; i <= BasketTbl.Rows.Count - 1; i++)
            {
                dr = BasketTbl.Rows[i];

                if (dr["UNIQUE"].ToString() == DeleteID)
                {
                    intDeleteIndex = i;
                    break;
                }
            }
            if (intDeleteIndex != -1)
                BasketTbl.Rows[intDeleteIndex].Delete();
        }
        private void CheckStockBeforeTender()
        {
            dtblZeroStock.Rows.Clear();
            int intLine = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "C")
                    || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")) continue;
                int PID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                bool blExists = false;
                string cPType = "";
                string cZeroStock = "Y";
                double cQty = 0;
                double AddQty = 0;
                string mxid = "";
                DataTable dtblstk = new DataTable();
                dtblstk = GetGeneralStockData(PID);
                foreach (DataRow dr4 in dtblstk.Rows)
                {
                    cPType = dr4["ProductType"].ToString();
                    cZeroStock = dr4["AllowZeroStock"].ToString();
                    cQty = GeneralFunctions.fnDouble(dr4["QtyOnHand"].ToString());
                }
                dtblstk.Dispose();
                if (cZeroStock == "Y")
                {
                    continue;
                }
                else
                {
                    if (cPType == "M")
                    {
                        cQty = GetMartixStock(GeneralFunctions.fnInt32(dr["MATRIXOID"].ToString()),
                               dr["MATRIXOV1"].ToString(), dr["MATRIXOV2"].ToString(), dr["MATRIXOV3"].ToString());
                        mxid = dr["MATRIXOID"].ToString();
                    }

                    AddQty = PrevQty(PID);
                    if (cQty - AddQty < 0)
                    {
                        foreach (DataRow dr1 in dtblZeroStock.Rows)
                        {
                            if (dr1["ID"].ToString() == PID.ToString())
                            {
                                if (dr1["PRODUCTTYPE"].ToString() != "M")
                                {
                                    blExists = true;
                                    break;
                                }
                                else
                                {
                                    if (dr1["MATRIXOID"].ToString() == mxid)
                                        blExists = true;
                                    break;
                                }
                            }
                        }

                        if (!blExists)
                        {
                            intLine++;

                            if (dr["PRODUCTTYPE"].ToString() != "M")
                            {
                                dtblZeroStock.Rows.Add(new object[] {  dr["ID"].ToString(),
                                              intLine.ToString() + ". " + dr["PRODUCT"].ToString(),dr["PRODUCTTYPE"].ToString(),"","","","","N"});

                            }
                            else
                            {
                                string strNM1 = "";
                                string strNM2 = "";
                                string strNM3 = "";
                                DataTable dtblM = new DataTable();
                                dtblM = GetMatrixData(GeneralFunctions.fnInt32(mxid));
                                foreach (DataRow dr2 in dtblM.Rows)
                                {
                                    strNM1 = dr2["ON1"].ToString();
                                    strNM2 = dr2["ON2"].ToString();
                                    strNM3 = dr2["ON3"].ToString();
                                }
                                dtblM.Dispose();

                                dtblZeroStock.Rows.Add(new object[] {  dr["ID"].ToString(),
                                              intLine.ToString() + ". " +dr["PRODUCT"].ToString() + "   " + strNM1 + ": " + dr["MATRIXOV1"].ToString()
                                              + "  " + strNM2 + ": " + dr["MATRIXOV2"].ToString() + "  " + strNM3 + ": " + dr["MATRIXOV3"].ToString(),
                                              dr["PRODUCTTYPE"].ToString(),mxid,dr["MATRIXOV1"].ToString(),dr["MATRIXOV2"].ToString(),dr["MATRIXOV3"].ToString()});
                            }
                            blExists = false;
                        }
                    }

                }

            }
        }

        private void SetupQuickTendering()
        {
            if (SystemVariables.Country == "USA")
            {
                //pnldeno2.Visible = false; --Sam
            }
            if (SystemVariables.Country == "UK")
            {
                //pnldeno7.Visible = false; --Sam
            }

            if (SystemVariables.Country == "USA")
            {
                //pnldeno1.Width = pnldeno3.Width = pnldeno4.Width = pnldeno5.Width = pnldeno6.Width = pnldeno7.Width = pnldeno1.Width + 5; --Sam
            }

            if (SystemVariables.Country == "UK")
            {
                //pnldeno1.Width = pnldeno3.Width = pnldeno4.Width = pnldeno5.Width = pnldeno6.Width = pnldeno2.Width = pnldeno1.Width + 5; --Sam
            }

            if ((SystemVariables.Country == "EURO") || (SystemVariables.Country == "CANADA"))
            {
                //pnlLeft.Width = 435; --Sam
            }
        }
        private void SetDecimalPlace()
        {
            if (Settings.DecimalPlace == 3)
            {
                //colRate.DisplayFormat.FormatString = "f3";
                //colPrice.DisplayFormat.FormatString = "f3"; --Sam
                colPrice.EditSettings = new TextEditSettings() { DisplayFormat = "f3", MaskType = MaskType.Numeric };
                colTaxName.EditSettings = new TextEditSettings() { DisplayFormat = "f3", MaskType = MaskType.Numeric };
                colTaxAmount.EditSettings = new TextEditSettings() { DisplayFormat = "f3", MaskType = MaskType.Numeric };
                //numSubTotal.Decimals = 3; --Sam
                //numDiscount.Decimals = 3; --Sam
                //numTax.Decimals = 3; --Sam
                //numTotal.Decimals = 3; --Sam
                numSubTotal.Text = "0.000";
                numDiscount.Text = "0.000";
                numTax.Text = "0.000";
                numTotal.Text = "0.000";
            }
            else
            {
                //colRate.DisplayFormat.FormatString = "f";
                //colPrice.DisplayFormat.FormatString = "f"; //Sam: already have format in ui
                colTaxName.EditSettings = new TextEditSettings() { DisplayFormat = "f", MaskType = MaskType.Numeric };
                colTaxAmount.EditSettings = new TextEditSettings() { DisplayFormat = "f", MaskType = MaskType.Numeric };
                //numSubTotal.Decimals = 2; --Sam
                //numDiscount.Decimals = 2; --Sam
                //numTax.Decimals = 2; --Sam
                //numTotal.Decimals = 2; --Sam
                numSubTotal.Text = "0.00";
                numDiscount.Text = "0.00";
                numTax.Text = "0.00";
                numTotal.Text = "0.00";
            }
        }
        public void SetPOSTabPage()
        {
            if (SystemVariables.CurrentUserID > 0)
            {
                /* if (SecurityPermission.AcssPOSCustomer) tpCustomer.Visibility = Visibility.Visible;
                 else tpCustomer.Visibility = Visibility.Collapsed;
                 if (SecurityPermission.AcssPOSProduct) tpProduct.Visibility = Visibility.Visible;
                 else tpProduct.Visibility = Visibility.Collapsed;
                 if (SecurityPermission.AcssPOSSetup) tpSetup.Visibility = Visibility.Visible;
                 else tpSetup.Visibility = Visibility.Collapsed;*/
            }
        }
        TextBlock lbLoginDue = new TextBlock();

        #region Datalogic Scale & Scanner

        private void PrepareDatalogicScale()
        {
            bool blFind = false;
            m_posExplorer = new PosExplorer();

            Microsoft.PointOfService.DeviceInfo deviceInfo = null;
            DeviceCollection deviceCollection = m_posExplorer.GetDevices();
            string deviceName = Settings.Datalogic_Scale;
            for (int i = 0; i < deviceCollection.Count; i++)
            {
                deviceInfo = deviceCollection[i];
                if (deviceInfo.ServiceObjectName == deviceName)
                {
                    blFind = true;
                    break;
                }
            }

            if (blFind)
            {
                if (deviceInfo != null)
                {
                    try
                    {
                        m_posScale = (Scale)m_posExplorer.CreateInstance(deviceInfo);
                        try
                        {
                            m_posScale.Open();
                            m_posScale.Claim(20000);
                            m_posScale.DeviceEnabled = true;
                            m_posScale.DataEventEnabled = true;

                            m_posScale.DataEvent += new DataEventHandler(m_posScale_DataEvent);
                        }
                        catch
                        {
                        }
                    }
                    catch
                    {
                    }
                }
            }
            m_posExplorer = null;
        }

        private void PrepareDatalogicScanner()
        {
            SCAN = "";
            bool blFind = false;
            m_posExplorer = new PosExplorer();

            Microsoft.PointOfService.DeviceInfo deviceInfo = null;
            DeviceCollection deviceCollection = m_posExplorer.GetDevices();
            string deviceName = Settings.Datalogic_Scanner;
            for (int i = 0; i < deviceCollection.Count; i++)
            {
                deviceInfo = deviceCollection[i];
                if (deviceInfo.ServiceObjectName == deviceName)
                {
                    blFind = true;
                    break;
                }
            }

            if (blFind)
            {
                if (deviceInfo != null)
                {
                    if (m_posScanner != null) { m_posScanner.Release(); m_posScanner.Close(); }

                    try
                    {
                        m_posScanner = (Scanner)m_posExplorer.CreateInstance(deviceInfo);

                        m_posScanner.Open();
                        m_posScanner.Claim(20000);

                        m_posScanner.DeviceEnabled = true;
                        m_posScanner.DataEventEnabled = true;
                        m_posScanner.DecodeData = true;
                        m_posScanner.DataEvent += M_posScanner_DataEvent;
                    }
                    catch
                    {
                    }
                }

            }
            m_posExplorer = null;
        }

        private async void M_posScanner_DataEvent(object sender, DataEventArgs e)
        {
            await _Scanner_DataEvent(sender, e);
        }

        void m_posScale_DataEvent(object sender, DataEventArgs e)
        {
            try
            {
                weightstring = m_posScale.ReadWeight(20000).ToString();

                double Tare = 0;
                double Tr1 = 0;
                double Tr2 = 0;
                FetchTare(weightitemid, ref Tr1, ref Tr2);

                Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);
                if (blTareEntry)
                {
                    Tare = dblTareEntryValue;
                }
                if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                {
                    SecondMonitor.AddWeightInfo(GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()) + " " + m_posScale.WeightUnit.ToString(), Tare);
                }

                m_posScale.DataEventEnabled = true;
                m_posScale.DeviceEnabled = true;
            }

            catch (PosControlException)
            {

            }
            finally
            {

            }

        }


        /// Open Serial Port Scale 

        public void DummyCall_SerialScale()
        {
            try
            {
                if (Settings.COMPort != "(None)")
                {
                    int bd = GeneralFunctions.fnInt32(Settings.BaudRate);
                    int dbit = GeneralFunctions.fnInt32(Settings.DataBits);
                    Parity p = Parity.None;
                    StopBits sb = StopBits.One;
                    Handshake hshk = Handshake.None;
                    if (Settings.Parity == "Even") p = Parity.Even;
                    if (Settings.Parity == "Mark") p = Parity.Mark;
                    if (Settings.Parity == "None") p = Parity.None;
                    if (Settings.Parity == "Odd") p = Parity.Odd;
                    if (Settings.Parity == "Space") p = Parity.Space;

                    if (Settings.StopBits == "None") sb = StopBits.None;
                    if (Settings.StopBits == "One") sb = StopBits.One;
                    if (Settings.StopBits == "OnePointFive") sb = StopBits.OnePointFive;
                    if (Settings.StopBits == "Two") sb = StopBits.Two;

                    if (Settings.Handshake == "None") hshk = Handshake.None;
                    if (Settings.Handshake == "RequstToSend") hshk = Handshake.RequestToSend;
                    if (Settings.Handshake == "RequstToSendXOnXOff") hshk = Handshake.RequestToSendXOnXOff;
                    if (Settings.Handshake == "XOnXOff") hshk = Handshake.XOnXOff;

                    _slport = new SerialPort(Settings.COMPort, bd, p, dbit, sb);
                    _slport.Handshake = hshk;
                    _slport.ReadTimeout = GeneralFunctions.fnInt32(Settings.Timeout);
                    _slport.WriteTimeout = GeneralFunctions.fnInt32(Settings.Timeout);
                    try
                    {
                        if (!(_slport.IsOpen)) _slport.Open();

                        _slport.DataReceived += new SerialDataReceivedEventHandler(_slport_DataReceived);

                        _slport.Write("W\r\n");

                    }
                    catch
                    {

                    }
                }

                else
                {

                }
            }
            catch
            {

            }

        }




        #region Serial Port Scale

        public bool IsActiveScale()
        {
            bool bflag = false;
            try
            {
                if (_slport != null)
                {
                    if (_slport.IsOpen)
                    {
                        _slport.Close();
                    }
                }
                if (Settings.COMPort != "(None)")
                {
                    int bd = GeneralFunctions.fnInt32(Settings.BaudRate);
                    int dbit = GeneralFunctions.fnInt32(Settings.DataBits);
                    Parity p = Parity.None;
                    StopBits sb = StopBits.One;
                    Handshake hshk = Handshake.None;
                    if (Settings.Parity == "Even") p = Parity.Even;
                    if (Settings.Parity == "Mark") p = Parity.Mark;
                    if (Settings.Parity == "None") p = Parity.None;
                    if (Settings.Parity == "Odd") p = Parity.Odd;
                    if (Settings.Parity == "Space") p = Parity.Space;

                    if (Settings.StopBits == "None") sb = StopBits.None;
                    if (Settings.StopBits == "One") sb = StopBits.One;
                    if (Settings.StopBits == "OnePointFive") sb = StopBits.OnePointFive;
                    if (Settings.StopBits == "Two") sb = StopBits.Two;

                    if (Settings.Handshake == "None") hshk = Handshake.None;
                    if (Settings.Handshake == "RequstToSend") hshk = Handshake.RequestToSend;
                    if (Settings.Handshake == "RequstToSendXOnXOff") hshk = Handshake.RequestToSendXOnXOff;
                    if (Settings.Handshake == "XOnXOff") hshk = Handshake.XOnXOff;

                    _slport = new SerialPort(Settings.COMPort, bd, p, dbit, sb);
                    _slport.Handshake = hshk;
                    _slport.ReadTimeout = 500;
                    //_slport.ErrorReceived += new SerialErrorReceivedEventHandler(PortError);

                    try
                    {
                        _slport.Open();
                        //System.Threading.Thread.Sleep(1000);
                        if (_slport.IsOpen)
                            bflag = true;
                        _slport.DataReceived += new SerialDataReceivedEventHandler(sp_DataReceived);
                    }
                    catch
                    {
                        bflag = false;
                    }
                }

                else
                {
                    bflag = false;
                }
            }
            catch
            {
                bflag = false;
            }
            return bflag;

        }

        // check and open serial port scale

        public bool IsActiveScale1()
        {
            bool bflag = false;
            try
            {
                if (Settings.COMPort != "(None)")
                {
                    int bd = GeneralFunctions.fnInt32(Settings.BaudRate);
                    int dbit = GeneralFunctions.fnInt32(Settings.DataBits);
                    Parity p = Parity.None;
                    StopBits sb = StopBits.One;
                    Handshake hshk = Handshake.None;
                    if (Settings.Parity == "Even") p = Parity.Even;
                    if (Settings.Parity == "Mark") p = Parity.Mark;
                    if (Settings.Parity == "None") p = Parity.None;
                    if (Settings.Parity == "Odd") p = Parity.Odd;
                    if (Settings.Parity == "Space") p = Parity.Space;

                    if (Settings.StopBits == "None") sb = StopBits.None;
                    if (Settings.StopBits == "One") sb = StopBits.One;
                    if (Settings.StopBits == "OnePointFive") sb = StopBits.OnePointFive;
                    if (Settings.StopBits == "Two") sb = StopBits.Two;

                    if (Settings.Handshake == "None") hshk = Handshake.None;
                    if (Settings.Handshake == "RequstToSend") hshk = Handshake.RequestToSend;
                    if (Settings.Handshake == "RequstToSendXOnXOff") hshk = Handshake.RequestToSendXOnXOff;
                    if (Settings.Handshake == "XOnXOff") hshk = Handshake.XOnXOff;

                    _slport = new SerialPort(Settings.COMPort, bd, p, dbit, sb);
                    _slport.Handshake = hshk;
                    _slport.ReadTimeout = GeneralFunctions.fnInt32(Settings.Timeout);
                    _slport.WriteTimeout = GeneralFunctions.fnInt32(Settings.Timeout);
                    try
                    {
                        if (!(_slport.IsOpen)) _slport.Open();

                        _slport.DataReceived += new SerialDataReceivedEventHandler(_slport_DataReceived);

                        _slport.Write("W\r\n");

                        bflag = true;
                    }
                    catch
                    {
                        bflag = false;
                    }
                }

                else
                {
                    bflag = false;
                }
            }
            catch
            {
                bflag = false;
            }
            return bflag;
        }

        // read weight in serial port scale

        void _slport_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            int bytes = _slport.BytesToRead;
            byte[] buffer = new byte[bytes];
            _slport.Read(buffer, 0, bytes);
            Thread.Sleep(1500);
            LogSerialWeight(ByteArrayToHex(buffer));
            _slport.Close();
        }

        private delegate void SetTextDeleg(string text);

        private void DisplayWeight(string data)
        {
            data = data.Replace("- ", "-");
            double Tare = 0;
            double Tr1 = 0;
            double Tr2 = 0;
            FetchTare(weightitemid, ref Tr1, ref Tr2);

            Tare = GetTareOnWeight(GeneralFunctions.fnDouble(data.Substring(0, data.IndexOf("LB"))), Tr1, Tr2);

            if (blTareEntry)
            {
                Tare = dblTareEntryValue;
            }

            double TempWeight = GeneralFunctions.fnDouble(data.Substring(0, data.IndexOf("LB")));

            bool displaymaxweight = false;
            if ((TempWeight > 0) && (Settings.MaxScaleWeight > 0) && (TempWeight > Settings.MaxScaleWeight)) displaymaxweight = true;
            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                SecondMonitor.AddWeightInfo(!displaymaxweight ? GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(data.Substring(0, data.IndexOf("LB"))) - Tare).ToString()) + " lb" : "---", Tare);
            }



            if (!blLoading)
            {
                if (TempWeight > 0)
                {
                    blLoading = true;
                    DocMessage.MsgInformation(Properties.Resources.Remove_all_weights_from_scale);
                }
                else
                {

                }

                blLoading = true;
            }


            if (!GeneralFunctions.IsValidScaleWeight_POS(data.Substring(0, data.IndexOf("LB")), false))
            {
                if (lberror.Tag.ToString() != "Remove all weights from scale and rezero it")
                {
                    lberror.Text = Properties.Resources.Removeallweightsfromscaleandrezeroit;
                    lberror.Tag = "Remove all weights from scale and rezero it";
                    lberror.Foreground = new SolidColorBrush(Colors.Red);
                }
            }
            else
            {
                lberror.Text = Properties.Resources.Weight_ + GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(data.Substring(0, data.IndexOf("LB"))) - Tare).ToString()) + " lb";
                lberror.Tag = "Weight: " + GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(data.Substring(0, data.IndexOf("LB"))) - Tare).ToString()) + " lb";
                lberror.Foreground = new SolidColorBrush(Colors.White);
            }






        }

        // Live Weight
        void _slport_DataReceived_LiveWeight(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                if (_slport.IsOpen)
                {
                    string inpt = "";

                    try
                    {
                        inpt = _slport.ReadLine();
                    }
                    catch
                    {
                    }

                    if (inpt.Trim() != "")
                    {
                        if (inpt.Contains("KG"))
                        {
                            _slport.Write("U\r");
                            Thread.Sleep(1000);
                            _slport.Write("W\r");
                            //DocMessage.MsgInformation(Properties.Resources."Weight should be in lb. Please change scale unit from scale setup");
                            //tmrLW.Enabled = false;
                            //_slport.Close();
                            //return;
                        }
                    }
                    if (inpt.Contains("LB"))
                    {
                        //if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                        //{
                        Dispatcher.BeginInvoke(new SetTextDeleg(DisplayWeight), new object[] { inpt });
                        //}
                    }
                    else
                    {
                        return;
                    }
                    //int datacnt = dtblLiveWeightStable.Rows.Count;
                    //dtblLiveWeightStable.Rows.Add(new object[] { datacnt + 1, inpt });
                    //if (dtblLiveWeightStable.Rows.Count < 2) return;
                    string returnweight = inpt; //GetLiveWeightStableData();
                    if (returnweight != "")
                    {
                        LogLiveWeight(returnweight);
                        try
                        {
                            string wt = "";
                            blGetWeight = false;
                            wt = s_wght.ToString();
                            if (wt != "")
                            {
                                weightstring = wt;


                                /*double Tare = 0;
                                FetchTare(weightitemid, ref Tare);
                                if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                {
                                    this.BeginInvoke(new SetTextDeleg(AddWeightedItemForLiveWeight), new object[] { weightstring });

                                }
                                else
                                {
                                    DocMessage.MsgInformation(Properties.Resources."No scale weight");
                                    return;
                                }*/
                            }
                            else
                            {
                                blGetWeight = false;
                                //DocMessage.MsgInformation(Properties.Resources."Cannot read from scale device");
                                //return;
                            }
                        }
                        catch
                        {
                            //DocMessage.MsgInformation(Properties.Resources."Cannot read from scale device");
                            return;
                        }
                        //tmrLW.Enabled = false;
                        //_slport.Close();

                    }
                }
            }
            catch
            {
            }
        }

        // not used
        private string GetLiveWeightStableData()
        {
            if (dtblLiveWeightStable.Rows.Count < 3) return "";
            else
            {
                string data1 = "";
                string data2 = "";
                string data3 = "";
                int strt = dtblLiveWeightStable.Rows.Count - 2;
                int i = 0;
                foreach (DataRow dr in dtblLiveWeightStable.Rows)
                {
                    if (GeneralFunctions.fnInt32(dr["SL"].ToString()) < strt) continue;
                    i++;
                    if (i == 1)
                    {
                        data1 = dr["Weight"].ToString();
                    }
                    if (i == 2)
                    {
                        data2 = dr["Weight"].ToString();
                    }
                    if (i == 3)
                    {
                        data3 = dr["Weight"].ToString();
                    }
                }

                if ((data1 == data2) && (data1 == data3) && (data2 == data3))
                {
                    return data1;
                }
                else
                {
                    return "";
                }
            }
        }

        // Live Weight
        private void LogLiveWeight(string msg)
        {
            try
            {
                if (!blGetWeight)
                {
                    s_wght = 0;
                    s_wght_u = "";
                    if (msg == "")
                    {
                        s_wght = 0;
                    }
                    else
                    {
                        if (msg.Contains("?"))
                        {
                            s_wght = 0;
                        }
                        else
                        {
                            string s = "";
                            string u = "";
                            char[] c = msg.Trim().ToCharArray();
                            bool f = true;
                            foreach (char _c in c)
                            {
                                if (_c == ' ') continue;
                                if (!((_c == '0') || (_c == '1') || (_c == '2') || (_c == '3') || (_c == '4') || (_c == '5') || (_c == '6') || (_c == '7') || (_c == '8') || (_c == '9')
                                    || (_c == '.') || (_c == '-')))
                                {
                                    if (u.Length < 2) u = u + _c;
                                    continue;
                                }
                                if ((_c == '0') || (_c == '1') || (_c == '2') || (_c == '3') || (_c == '4') || (_c == '5') || (_c == '6') || (_c == '7') || (_c == '8') || (_c == '9')
                                    || (_c == '.') || (_c == '-'))
                                {
                                    s = s + _c;
                                }

                            }

                            s_wght = GeneralFunctions.fnDouble(s);

                            s_wght_u = u;
                        }
                    }
                    blGetWeight = true;
                }

            }
            catch
            {

            }

        }

        private void LogSerialWeight(string msg)
        {
            try
            {
                if (!blGetWeight)
                {
                    s_wght = 0;
                    s_wght_u = "";
                    if (msg == "")
                    {
                        s_wght = 0;
                    }
                    else
                    {
                        if (msg.Contains("?"))
                        {
                            s_wght = 0;
                        }
                        else
                        {
                            string s = "";
                            string u = "";
                            char[] c = msg.ToCharArray();
                            bool f = true;
                            foreach (char _c in c)
                            {
                                if (!((_c == '0') || (_c == '1') || (_c == '2') || (_c == '3') || (_c == '4') || (_c == '5') || (_c == '6') || (_c == '7') || (_c == '8') || (_c == '9')
                                    || (_c == '.')))
                                {
                                    u = u + _c;
                                    continue;
                                }
                                if ((_c == '0') || (_c == '1') || (_c == '2') || (_c == '3') || (_c == '4') || (_c == '5') || (_c == '6') || (_c == '7') || (_c == '8') || (_c == '9')
                                    || (_c == '.'))
                                {
                                    s = s + _c;
                                }

                            }

                            s_wght = GeneralFunctions.fnDouble(s);

                            s_wght_u = u;
                        }
                    }
                    blGetWeight = true;
                }

            }
            catch
            {

            }

        }

        private string ByteArrayToHex(byte[] data)
        {
            StringBuilder sb = new StringBuilder(data.Length * 3);
            foreach (byte b in data)
                sb.Append(Convert.ToString(b, 16).PadLeft(2, '0').PadRight(3, ' '));
            return GetWeight(sb.ToString().ToUpper());

        }

        private string GetWeight(string str)
        {
            string rval = "";
            string[] hex = str.Split(' ');
            foreach (string h in hex)
            {
                if (h == "") continue;
                int val = Convert.ToInt32(h, 16);
                string sval = Char.ConvertFromUtf32(val);
                char cval = (char)val;
                rval = rval + cval;
            }
            return rval;
        }

        protected void PortError(object sender, SerialErrorReceivedEventArgs e)
        {
            _slerr = 0;
            _slerr = e.EventType;
        }

        #endregion

        /// Get Tare on Specific Weight

        private double GetTareOnWeight(double Wt, double t1, double t2)
        {
            double retval = 0;
            if (Settings.Grad_ScaleType != "")
            {
                if ((Wt >= Settings.Grad_S_Range1) && (Wt <= Settings.Grad_S_Range2))
                {
                    if (t1 <= Settings.Grad_S_Range2)
                    {
                        retval = t1;
                    }
                }

                if ((Wt >= Settings.Grad_D_Range1) && (Wt <= Settings.Grad_D_Range2))
                {
                    if (t2 <= Settings.Grad_D_Range1)
                    {
                        retval = t2;
                    }
                }
            }
            else
            {
                retval = 0;
            }

            return retval;
        }
        /// Get Tare value of a weighted item

        private void FetchTare(int iProdID, ref double refTr, ref double refTr2)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            objPOS.GetTare(iProdID, ref refTr, ref refTr2);
        }
        async Task _Scanner_DataEvent(object sender, DataEventArgs e)
        {
            try
            {
                ASCIIEncoding encoding = new ASCIIEncoding();

                byte[] b = m_posScanner.ScanData;

                string str = "";

                b = m_posScanner.ScanDataLabel;
                for (int i = 0; i < b.Length; i++)
                    str += (char)b[i];

                m_posScanner.DataEventEnabled = true;
                m_posScanner.DeviceEnabled = true;

                if (Settings.Scanner_8200 == "Y")
                {
                    try
                    {
                        str = str.Remove(0, 3);
                    }
                    catch
                    {
                    }
                }

                SCAN = str;
                txtSKU.Text = SCAN;
                try
                {
                    m_posScanner.DeviceEnabled = false;
                    await AddtoCart();
                }
                finally
                {
                    m_posScanner.DeviceEnabled = true;
                }
            }
            catch (PosControlException)
            {

            }
            finally
            {

            }
        }

        #endregion
        private int IfExistsSKU(string SKU)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.DuplicateCount(SKU);
        }
        private int IfActiveProduct(string SKU)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objProduct.IfActiveProduct(SKU);
        }
        private int IfExistsAltSKU(string SKU)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.DuplicateAltSKUCount(SKU);
        }
        /// Check if Alt SKU 2 Exists
        private int IfExistsAltSKU2(string SKU)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.DuplicateAltSKU2Count(SKU);
        }
        private string SKUfromAltSKU(string SKU)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.GetSKUFromAltSKU(SKU);
        }
        /// Get SKU from Alt SKU 2
        private string SKUfromAltSKU2(string SKU)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.GetSKUFromAltSKU2(SKU);
        }
        private int IfExistsUPC(string SKU)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.DuplicateUPCCount(SKU);
        }
        private string SKUfromUPC(string SKU)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.GetSKUFromUPC(SKU);
        }
        private int GetProductID(string SKU)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.GetProductID(SKU);
        }

        private string GetProductExpiry(string SKU)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.GetProductExpiryFromSKU(SKU);
        }

        private string GetProductExpiry2(int refId)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.GetProductExpiryFromProductID(refId);
        }

        private async Task AddSKURecordForMixMatch(string SKU, bool WFlag, double WPrice)
        {
            if (strCurrentServiceType == "Sales")
            {
                if ((blReturnItem) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blReturnItem) && (dtblPOS.Rows.Count == 0))
                {
                    blReturnItem = false;
                }
            }



            string strID = "";
            string strDesc = "";
            string strPrice = "";
            string strSKU = "";
            string refWPrice = WPrice.ToString();
            string refSKU = "";
            bool refWFlag = false;
            string line1 = "";
            string line2 = "";
            /*if ((SKU.Length == 12) && (SKU.Substring(0, 1) == "2"))
            {
                IsWeighedItem(SKU, ref refWFlag, ref refSKU, ref refWPrice);
                if (WFlag) strSKU = refSKU;
                else
                {
                    return;
                }
            }
            else
                strSKU = SKU;*/
            strSKU = SKU;
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            DataTable dtbl = objProduct.ShowSKURecord(strSKU.Trim());
            foreach (DataRow dr in dtbl.Rows)
            {
                strID = dr["ID"].ToString();
                strDesc = dr["Description"].ToString();
                strPrice = dr["PriceA"].ToString();
            }
            dtbl.Dispose();

            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";
            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";
            string refRentPrompt = "";

            int MixMatchID = 0;
            string MixMatchFlag = "N";
            string MixMatchCat = "";
            string MixMatchType = "";
            double MixMatchVal = 0;
            int MixMatchPlus = 0;
            double MixMatchPartPrice = 0;
            bool MixMatchApplicableLast = false;

            int SaleID = 0;
            double SalePrice = 0;
            int iAge = 0;

            string refUOM = "";
            string refExpiry = "";
            FetchProduct(GeneralFunctions.fnInt32(strID), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                            ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI, ref refRentHR,
                            ref refRentHDY, ref refRentDY, ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt,
                            ref refRentPrompt, ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

            if ((refType == "P") || (refType == "M") || (refType == "K") || (refType == "U")
                        || (refType == "W") || (refType == "E") || (refType == "F") || (refType == "S") || (refType == "T"))
            {
                if (strCurrentServiceType == "Sales")
                {
                    FetchActiveSale(GeneralFunctions.fnInt32(strID), ref SaleID, ref SalePrice);
                    if (SaleID == 0)
                    {
                        FetchMix_n_Match(GeneralFunctions.fnInt32(strID), ref MixMatchID, ref MixMatchFlag, ref MixMatchCat, ref MixMatchType,
                                         ref MixMatchVal, ref MixMatchPlus, ref MixMatchPartPrice, ref MixMatchApplicableLast);

                        // MixMatchFlag = N / Y - Not Applicable / Applicale
                        // MixMatchCat = N / P - Normal Pricing / Plus Pricing
                        // MixMatchType = P/A - % off / Amount off
                    }
                }
            }

            if (strCurrentServiceType == "Rent")
            {
                if ((blRentRecall) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blRentRecall) && (dtblPOS.Rows.Count == 0))
                {
                    blRentRecall = false;
                    blRentIssued = true;
                }
                else if ((refType == "S") || (refType == "W")) return;
            }
            if (strCurrentServiceType == "Repair")
            {
                /*if ((blRepairRecall) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blRepairRecall) && (dtblPOS.Rows.Count == 0))
                {
                    blRepairRecall = false;
                    blRepairIssued = true;
                }
                else if ((refType == "S") || (refType == "W")) return; */

                if (refType == "W") return;
            }

            if (Settings.POSIDRequired == "Y")
            {
                if (GeneralFunctions.fnInt32(refAge) > 0)
                {
                    iAge = GeneralFunctions.fnInt32(refAge);
                    if (!AgeCheck(DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)))) return;
                    //if (new MessageBoxWindow().Show(Properties.Resources."Minimum Age ","frmPOSN_msg_MinimumAge") + refAge + Properties.Resources." : Birthday on or before ","frmPOSN_msg_Birthdayonorbefore") + DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)).ToString("MM/dd/yyyy"), Properties.Resources."Age Verification","frmPOSN_msg_AgeVerification"), MessageBoxButton.OKCancel, MessageBoxImage.Information) == DialogResult.Cancel) return;
                }
            }

            // if exist then update

            bool blfinddata = false;
            string strselectid = strID;
            int intfocusrow = 0;
            double dblRate = 0;

            int Qty = 1;

            string strUOMCount = "";
            string strUOMPrice = "";
            string strUOMDesc = "";

            string strMatxOID = "";
            string strMatxOV1 = "";
            string strMatxOV2 = "";
            string strMatxOV3 = "";

            string strSLID = "0";

            bool blExit = false;

            if (refType == "U")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {
                    frm_POSProductAddnDlg.ProductType = "Unit of Measure";
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Unit_of_Measure_Data__ + " " + strDesc;
                    frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(strID);
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strUOMCount = frm_POSProductAddnDlg.UOMCount;
                        strUOMPrice = frm_POSProductAddnDlg.UOMPrice;
                        strUOMDesc = frm_POSProductAddnDlg.UOMDesc;
                    }
                    else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }

            if (refType == "M")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {

                    frm_POSProductAddnDlg.ProductType = "Matrix";
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Matrix_Data__ + " " + strDesc;
                    frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(strID);
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strMatxOID = frm_POSProductAddnDlg.MatrixOID;
                        strMatxOV1 = frm_POSProductAddnDlg.MatrixOV1;
                        strMatxOV2 = frm_POSProductAddnDlg.MatrixOV2;
                        strMatxOV3 = frm_POSProductAddnDlg.MatrixOV3;
                    }
                    //else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }

            if (refType == "E")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {

                    frm_POSProductAddnDlg.ProductType = "Serialized";
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Serialized_Data__ + " " + strDesc;
                    frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(strID);
                    frm_POSProductAddnDlg.dtblS = dtblPOS;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strSLID = frm_POSProductAddnDlg.SLID;
                    }
                    else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }

            //if (strCurrentServiceType != "Repair")
            //{
            if (!CheckStock(GeneralFunctions.fnInt32(strselectid), 1, strMatxOID, strMatxOV1, strMatxOV2, strMatxOV3))
            {
                new MessageBoxWindow().Show(Properties.Resources.No_Stock_available_, Properties.Resources.Stock_Validation, MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            // }


            // get Rental data //

            string strRentType = "NA";
            double dblRentDuration = 0;
            double dblRentValue = 0;
            double dblRentDeposit = 0;

            if (strCurrentServiceType == "Rent")
            {
                if (!blRentRecall)
                {
                    frmPOSRentalSelectDlg frmrentsel = new frmPOSRentalSelectDlg();
                    try
                    {

                        frmrentsel.PID = GeneralFunctions.fnInt32(strID);
                        blurGrid.Visibility = Visibility.Visible;
                        frmrentsel.ShowDialog();
                        blurGrid.Visibility = Visibility.Collapsed;
                        if (frmrentsel.DialogResult == true)
                        {
                            strRentType = frmrentsel.RentType;
                            dblRentDuration = frmrentsel.RentDuration;
                            dblRentValue = frmrentsel.RentValue;
                            dblRentDeposit = frmrentsel.RentDeposit;
                        }
                        else blExit = true;
                    }
                    finally
                    {
                    }
                    if (blExit) return;
                }
            }

            // 

            string strRepairItemTag = "";
            string strRepairItemSlNo = "";
            string strRepairItemPurchaseDate = "";


            if (strCurrentServiceType == "Sales")
            {
                if (SaleID > 0)
                {
                    refPrompt = "N";
                    refPrice = SalePrice.ToString();
                    if (refType == "U") strUOMPrice = SalePrice.ToString();
                }

                if (!WFlag)
                {
                    if (!blfinddata)
                    {
                        if (refType == "U")
                        {
                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc + " * " + strUOMDesc, GeneralFunctions.fnDouble(strUOMPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                        { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost, "1",
                                          promptPrice,refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                          strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                          promptPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + " * " + strUOMDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                        { strID, linetxt,refType,refOHQty,refNQty,refCost, "1",
                                          promptPrice,refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                          strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"",
                                          MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " +Properties.Resources.Mix_n_Match  +amtstr,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                        "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                         promptPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});

                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, "1", promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                          { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost, "1",
                                            strUOMPrice,refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(strUOMPrice)).ToString(),
                                            strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            strUOMPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(strUOMPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {

                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(strUOMPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + " * " + strUOMDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                          { strID, linetxt,refType,refOHQty,refNQty,refCost, "1",
                                            strUOMPrice,refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                            strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"",
                                            MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match+amtstr,"1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            strUOMPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, "1", strUOMPrice,
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                        }
                        else if (refType == "M")
                        {
                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost, "1",promptPrice,refNPrice,
                                            Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                            "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                            "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,
                                            Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                            { strID,linetxt,refType,refOHQty,refNQty,refCost, "1",promptPrice,refNPrice,
                                            Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                            "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                            "",
                                            MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,
                                            Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                                { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",refPrice,refNPrice,
                                                  Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                                  "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                                  "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                                  strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                  dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                  0,0,0,0,0,0,0,0,0,
                                                  MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                                  "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                  refPrice,
                                                  Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                                { strID,linetxt,refType,refOHQty,refNQty,refCost,"1",refPrice,refNPrice,
                                                  Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                                  "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"",
                                                  MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                                  "0","0","0","","","","0","0","0","N","N","N",
                                                  strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                  dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                  0,0,0,0,0,0,0,0,0,
                                                  MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                                  "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                  refPrice,
                                                  Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", refPrice, ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                        }
                        else if (refType == "E")
                        {
                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {

                                    dtblPOS.Rows.Add(new object[]
                                          { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",promptPrice,refNPrice,
                                            Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                            strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,
                                            Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                          { strID,linetxt,refType,refOHQty,refNQty,refCost,"1",promptPrice,refNPrice,
                                            Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                            strSLID,"0","0","","","","",GetUniqueString(),refDP,"",
                                            MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,
                                            Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }


                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { strID, strDesc,refType,refOHQty,refNQty,refCost, "1",refPrice,refNPrice,
                                              Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                              strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,
                                              Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                            { strID, linetxt,refType,refOHQty,refNQty,refCost, "1",refPrice,refNPrice,
                                              Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                              strSLID,"0","0","","","","",GetUniqueString(),refDP,"",
                                              MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                              "0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,
                                              Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", refPrice, ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                        }
                        else if (refType == "W")
                        {
                            if (CheckForFixedWeight(GeneralFunctions.fnInt32(strID)))
                            {
                                weightitemid = GeneralFunctions.fnInt32(strID);
                                weightitemname = strDesc;
                                await AddFixedWeightedItem();
                            }
                            else
                            {
                                if ((Settings.ScaleDevice == "Datalogic Scale") && (m_posScale != null))
                                {
                                    try
                                    {
                                        //if (!tmrDL.Enabled) tmrDL.Enabled = true; --Sam
                                        weightitemid = GeneralFunctions.fnInt32(strID);
                                        weightitemname = strDesc;
                                        weightstring = m_posScale.ReadWeight(20000).ToString();

                                        double Tare = 0;
                                        double Tr1 = 0;
                                        double Tr2 = 0;
                                        FetchTare(weightitemid, ref Tr1, ref Tr2);

                                        Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                                        if (blTareEntry)
                                        {
                                            Tare = dblTareEntryValue;
                                        }

                                        if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                        {
                                            SecondMonitor.AddWeightInfo(GeneralFunctions.FormatDoubleForPrint((GeneralFunctions.fnDouble(weightstring) - Tare).ToString("0.###")) + " " + m_posScale.WeightUnit.ToString(), Tare);
                                        }

                                        if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                        {
                                            /*if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                            {
                                                SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + m_posScale.WeightUnit.ToString());
                                            }*/
                                            await AddWeightedItem();

                                        }
                                        else
                                        {
                                            DocMessage.MsgInformation(Properties.Resources.Invalid_scale_weight);
                                            return;
                                        }
                                    }
                                    catch
                                    {
                                        DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                        return;
                                    }
                                }
                                else if ((Settings.ScaleDevice == "Kilotech") && (Settings.COMPort != "(None)"))
                                {
                                    try
                                    {
                                        string wt = "";
                                        blGetWeight = false;
                                        if (IsActiveScale1())
                                        {
                                            if (s_wght != 0) wt = s_wght.ToString();
                                            if (wt != "")
                                            {
                                                weightitemid = GeneralFunctions.fnInt32(strID);
                                                weightitemname = strDesc;
                                                weightstring = wt;

                                                double Tare = 0;
                                                double Tr1 = 0;
                                                double Tr2 = 0;
                                                FetchTare(weightitemid, ref Tr1, ref Tr2);

                                                Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);
                                                weightuom = s_wght_u;
                                                if (blTareEntry)
                                                {
                                                    Tare = dblTareEntryValue;
                                                }

                                                if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                {
                                                    if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                    {
                                                        SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + s_wght_u, Tare);
                                                    }
                                                    await AddWeightedItem();

                                                }
                                                else
                                                {
                                                    DocMessage.MsgInformation(Properties.Resources.No_scale_weight);
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                blGetWeight = false;
                                                DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                            return;
                                        }
                                    }
                                    catch
                                    {
                                        DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                        return;
                                    }

                                }
                                else if ((Settings.ScaleDevice == "Live Weight") && (Settings.COMPort != "(None)"))
                                {
                                    weightitemid = GeneralFunctions.fnInt32(strID);
                                    weightitemname = strDesc;
                                    //dtblLiveWeightStable.Rows.Clear();
                                    //tmrLW.Enabled = true;
                                    await AddWeightedItem();
                                }
                                else if (Settings.ScaleDevice == "XEPOS")
                                {
                                    string strfilename = "";
                                    strfilename = System.AppDomain.CurrentDomain.BaseDirectory;
                                    if (strfilename.EndsWith("\\"))
                                    {
                                        strfilename = strfilename + "Weight.exe";
                                    }
                                    else
                                    {
                                        strfilename = strfilename + "\\Weight.exe";
                                    }
                                    if (!System.IO.File.Exists(strfilename)) return;
                                    blopenweight = true;
                                    weightcallfrom = "FromSKU";

                                    weightitemid = GeneralFunctions.fnInt32(strID);
                                    weightitemname = strDesc;

                                    Process p = new Process();
                                    p.StartInfo.FileName = strfilename;
                                    p.Start();
                                }

                                else
                                {
                                    bool proceedflag = false;
                                    double wqty = 0;
                                    double wdisc = 0;
                                    string val1 = "";
                                    string val2 = "0";
                                    string val3 = "0";
                                    string val4 = "";
                                    string val5 = "";

                                    frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                                    try
                                    {

                                        frm_POSItemDlg.BlankLine = false;
                                        //frm_POSItemDlg.ParentForm = this; --Sam
                                        frm_POSItemDlg.IsEdit = false;
                                        frm_POSItemDlg.ServiceType = strCurrentServiceType;
                                        frm_POSItemDlg.ProductDesc = strDesc;
                                        frm_POSItemDlg.Qty = 1;
                                        frm_POSItemDlg.Price = GeneralFunctions.fnDouble(refPrice);
                                        frm_POSItemDlg.Weighted = true;
                                        frm_POSItemDlg.WeightedUOM = refUOM;
                                        blurGrid.Visibility = Visibility.Visible;
                                        frm_POSItemDlg.ShowDialog();
                                        blurGrid.Visibility = Visibility.Collapsed;
                                        if (frm_POSItemDlg.DialogResult == true)
                                        {
                                            proceedflag = true;
                                            wqty = frm_POSItemDlg.Qty;
                                            wdisc = frm_POSItemDlg.Discount;
                                            if (!GeneralFunctions.IsValidScaleWeight_POS(wqty.ToString(), true)) return;
                                            if (blTareEntry)
                                            {
                                                wqty = wqty - dblTareEntryValue;
                                                if (wqty <= 0)
                                                {
                                                    new MessageBoxWindow().Show(Properties.Resources.Enter_valid_weight, Properties.Resources.Weight_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                    finally
                                    {
                                    }
                                    if (!proceedflag) return;

                                    if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                    {
                                        SecondMonitor.AddWeightInfo(GeneralFunctions.fnDouble(wqty).ToString(), 0);
                                    }

                                    if (wdisc > 0)
                                    {
                                        val1 = "A";
                                        val2 = wdisc.ToString();
                                        val3 = wdisc.ToString();
                                        val4 = "9988";
                                        val5 = Properties.Resources.Discount__.Replace("$", SystemVariables.CurrencySymbol) + wdisc.ToString("f");
                                    }

                                    if (refPrompt == "Y")
                                    {
                                        double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                        if (promptPrice == -99999) return;

                                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                            {
                                                strID,wdisc == 0 ? strDesc : strDesc + "\n",refType,refOHQty,refNQty,refCost,wqty.ToString(),promptPrice,refNPrice,
                                                Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(promptPrice) - wdisc).ToString(),"0","0","0",
                                                "","","","",GetUniqueString(),refDP,"",val1,val2,val3,val4,val5,"1","0","0","0","","","",
                                                "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                                dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                                strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                                promptPrice,
                                                Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(promptPrice) - wdisc).ToString(),refUOM,"","","","","N"});

                                        }
                                        else
                                        {
                                            double discntamt = 0;
                                            string damt = "0";
                                            double newpretaxamt = 0;
                                            string amtstr = "";
                                            if (MixMatchCat == "N")  // Normal Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                amtstr = "";
                                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                            }

                                            if (MixMatchCat == "P")  // Plus Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                amtstr = "";
                                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                damt = (promptPrice - newpretaxamt).ToString("f");
                                            }

                                            if (MixMatchCat == "A")  // Absolute Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = MixMatchVal - MixMatchPartPrice;
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                amtstr = "";
                                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            }


                                            string linetxt = "";
                                            linetxt = strDesc + "\n";

                                            dtblPOS.Rows.Add(new object[]
                                            {
                                                strID,linetxt,refType,refOHQty,refNQty,refCost,wqty.ToString(),promptPrice,refNPrice,
                                                Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),"0","0","0",
                                                "","","","",GetUniqueString(),refDP,"",
                                                MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                                "0","0","0","","","",
                                                "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                                dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                                strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                                promptPrice,
                                                Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                        }

                                        line1 = "";
                                        line2 = "";
                                        RearrangeCartItemTextBeforePoleDisplay(strDesc, wqty.ToString(), promptPrice.ToString(),
                                        ref line1, ref line2);
                                        DisplayPoleText(2, "N", "N", line1, line2);
                                    }
                                    else
                                    {
                                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                        { strID,wdisc == 0 ? strDesc : strDesc + "\n",refType,refOHQty,refNQty,refCost, wqty.ToString(),refPrice,refNPrice,
                                          Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"",val1,val2,val3,val4,val5,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),refUOM,"","","","","N"});
                                        }
                                        else
                                        {
                                            double discntamt = 0;
                                            string damt = "0";
                                            double newpretaxamt = 0;
                                            string amtstr = "";
                                            if (MixMatchCat == "N")  // Normal Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                amtstr = "";
                                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                            }

                                            if (MixMatchCat == "P")  // Plus Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                amtstr = "";
                                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                            }

                                            if (MixMatchCat == "A")  // Absolute Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = MixMatchVal - MixMatchPartPrice;
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                amtstr = "";
                                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            }

                                            string linetxt = "";
                                            linetxt = strDesc + "\n";

                                            dtblPOS.Rows.Add(new object[]
                                        { strID,linetxt,refType,refOHQty,refNQty,refCost, wqty.ToString(),refPrice,refNPrice,
                                          Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"",
                                          MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                        }

                                        line1 = "";
                                        line2 = "";
                                        RearrangeCartItemTextBeforePoleDisplay(strDesc, wqty.ToString(), refPrice,
                                        ref line1, ref line2);
                                        DisplayPoleText(2, "N", "N", line1, line2);
                                    }
                                }
                            }
                        }
                        else if ((refType == "F") && (Settings.AddGallon == "Y"))
                        {
                            double gl = 0;
                            bool pf = false;
                            frm_POSGallonEntryDlg fgaldlg = new frm_POSGallonEntryDlg();
                            try
                            {
                                blurGrid.Visibility = Visibility.Visible;
                                fgaldlg.ShowDialog();
                                blurGrid.Visibility = Visibility.Collapsed;
                                if (fgaldlg.DialogResult == true)
                                {
                                    pf = true;
                                    gl = fgaldlg.Gallon;
                                }
                            }
                            finally
                            {
                            }
                            if (!pf) return;


                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost,gl.ToString(),promptPrice,refNPrice,
                                              Convert.ToDecimal(gl * GeneralFunctions.fnDouble(promptPrice)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(gl * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }


                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                            { strID,linetxt,refType,refOHQty,refNQty,refCost,gl.ToString(),promptPrice,refNPrice,
                                              Convert.ToDecimal(gl * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"",
                                              MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                              "0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(gl * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost,gl.ToString(),refPrice,refNPrice,
                                          Convert.ToDecimal(gl * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(gl * GeneralFunctions.fnDouble(refPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                        { strID,linetxt,refType,refOHQty,refNQty,refCost, gl.ToString(),refPrice,refNPrice,
                                          Convert.ToDecimal(gl * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"",
                                          MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(gl * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", refPrice,
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);

                            }
                        }
                        else
                        {
                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",promptPrice,refNPrice,
                                              Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }


                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                            { strID,linetxt,refType,refOHQty,refNQty,refCost,"1",promptPrice,refNPrice,
                                              Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"",
                                              MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                              "0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",refPrice,refNPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }


                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                        { strID,linetxt,refType,refOHQty,refNQty,refCost, "1",refPrice,refNPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"",
                                          MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", refPrice,
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);

                            }
                        }
                        if (Settings.PriceLevelForOneTime == "Y")
                        {
                            Settings.PriceLevelForOneTime = "N";
                            intUsePriceLevel = Settings.UsePriceLevel;
                        }
                        blScan = true;
                        SetCartDisplay();
                        gridControl1.ItemsSource = dtblPOS;
                        ToggleWithEmptyCart();
                        gridView1.FocusedRowHandle = (gridControl1.ItemsSource as DataTable).Rows.Count - 1;
                        GeneralFunctions.SetFocus(txtSKU);
                    }
                    else
                    {
                        blScan = true;

                        SetCartDisplay();
                        gridControl1.ItemsSource = dtblPOS;
                        ToggleWithEmptyCart();
                        gridView1.FocusedRowHandle = intfocusrow;
                        GeneralFunctions.SetFocus(txtSKU);
                    }
                }
                else
                {
                    if (!blfinddata)
                    {
                        if (refType == "U")
                        {
                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc + " * " + strUOMDesc, GeneralFunctions.fnDouble(strUOMPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost,"1",promptPrice,
                                              refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                              strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }


                                    string linetxt = "";
                                    linetxt = strDesc + " * " + strUOMDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost,"1",promptPrice,
                                              refNPrice,Convert.ToDecimal(1* GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                              strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"",
                                              MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                              "0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(1* GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }
                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, "1", promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);

                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                          { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost, "1",strUOMPrice,
                                            refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(strUOMPrice)).ToString(),
                                            strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            strUOMPrice,
                                            Convert.ToDecimal(1 * GeneralFunctions.fnDouble(strUOMPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(strUOMPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + " * " + strUOMDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                          { strID,linetxt,refType,refOHQty,refNQty,refCost, "1",strUOMPrice,
                                            refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                            strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"",
                                            MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            strUOMPrice,
                                            Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, "1", strUOMPrice,
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);

                            }
                        }
                        else if (refType == "M")
                        {
                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost, "1",promptPrice,refNPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                          "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                          "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                        promptPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                        { strID,linetxt,refType,refOHQty,refNQty,refCost, "1",promptPrice,refNPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                          "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"",
                                          MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                          promptPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);

                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            {   strID, strDesc,refType,refOHQty,refNQty,refCost, "1",
                                                refPrice,refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                                "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                                "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                            {   strID,linetxt,refType,refOHQty,refNQty,refCost, "1",
                                                refPrice,refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                                "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"",
                                                MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                                "0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", refPrice,
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                        }
                        else if (refType == "W")
                        {

                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                     { strID, strDesc,refType,refOHQty,refNQty,refCost, "1",promptPrice,refNPrice,
                                       Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                       "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                       "0","0","0","","","","0","0","0","N","N","N",
                                       strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                       dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                       MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                       "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                       promptPrice,
                                       Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {

                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }


                                    string linetxt = "";
                                    linetxt = strDesc + "\n";


                                    dtblPOS.Rows.Add(new object[]
                                     { strID,linetxt,refType,refOHQty,refNQty,refCost, "1",promptPrice,refNPrice,
                                       Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                       "0","0","0","","","","",GetUniqueString(),refDP,"",
                                       MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                       "0","0","0","","","","0","0","0","N","N","N",
                                       strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                       dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                       MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                       "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                       promptPrice,
                                       Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                      { strID,strDesc,refType,refOHQty,refNQty,refCost, "1",
                                        GeneralFunctions.fnDouble(refWPrice)/100,(GeneralFunctions.fnDouble(refWPrice)/100).ToString(),
                                        Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refWPrice)/100).ToString(),
                                       "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                       "0","0","0","","","","0","0","0","N","N","N",
                                       strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                       dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                       MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                       "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      GeneralFunctions.fnDouble(refWPrice)/100,
                                        Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refWPrice)/100).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refWPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refWPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refWPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refWPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refWPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refWPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                      { strID,linetxt,refType,refOHQty,refNQty,refCost, "1",
                                        GeneralFunctions.fnDouble(refWPrice)/100,(GeneralFunctions.fnDouble(refWPrice)/100).ToString(),
                                        Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)/100).ToString(),
                                       "0","0","0","","","","",GetUniqueString(),refDP,"",
                                       MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                       "0","0","0","","","","0","0","0","N","N","N",
                                       strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                       dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                       MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                       "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                       GeneralFunctions.fnDouble(refWPrice)/100,
                                        Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)/100).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", (GeneralFunctions.fnDouble(refWPrice) / 100).ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                        }
                        else
                        {
                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",promptPrice,refNPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                          promptPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                        { strID,linetxt,refType,refOHQty,refNQty,refCost,"1",promptPrice,refNPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"",
                                          MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                          promptPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }
                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",refPrice,refNPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";


                                    dtblPOS.Rows.Add(new object[]
                                        { strID,linetxt,refType,refOHQty,refNQty,refCost,"1",refPrice,refNPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"",
                                          MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                        refPrice,
                                          Convert.ToDecimal(1 * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", (GeneralFunctions.fnDouble(refWPrice) / 100).ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                        }
                        if (Settings.PriceLevelForOneTime == "Y")
                        {
                            Settings.PriceLevelForOneTime = "N";
                            intUsePriceLevel = Settings.UsePriceLevel;
                        }
                        blScan = true;
                        SetCartDisplay();
                        gridControl1.ItemsSource = dtblPOS;
                        ToggleWithEmptyCart();
                        gridView1.FocusedRowHandle = (gridControl1.ItemsSource as DataTable).Rows.Count - 1;
                        GeneralFunctions.SetFocus(txtSKU);
                    }
                    else
                    {
                        blScan = true;
                        SetCartDisplay();
                        gridControl1.ItemsSource = dtblPOS;
                        ToggleWithEmptyCart();
                        gridView1.FocusedRowHandle = intfocusrow;
                        GeneralFunctions.SetFocus(txtSKU);
                    }
                }
            }

            if (strCurrentServiceType == "Rent")
            {
                if (!blfinddata)
                {
                    if (refType == "U")
                    {
                        if (refRentPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc + " * " + strUOMDesc, dblRentValue);
                            if (promptPrice == -99999) return;

                            dtblPOS.Rows.Add(new object[]
                                        { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost, "1",
                                          promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice),
                                          strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                        promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice),refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                          { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost,"1",
                                            dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),
                                            strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0, 0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, "1", strUOMPrice,
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else if (refType == "M")
                    {
                        if (refRentPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, dblRentValue);
                            if (promptPrice == -99999) return;

                            dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost, "1",
                                             promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice),
                                            "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                            "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0, 0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice),refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                                { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",
                                                  dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),
                                                  "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                                  "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                                  strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                  dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                  0,0,0,0,0,0,0,0,0, 0,"","",0,0,0,"",
                                                  "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                  dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else if (refType == "E")
                    {
                        if (refRentPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, dblRentValue);
                            if (promptPrice == -99999) return;
                            dtblPOS.Rows.Add(new object[]
                                          { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",
                                            promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice),
                                            strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice),refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                            { strID, strDesc,refType,refOHQty,refNQty,refCost, "1",
                                              dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),
                                              strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0, 0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else
                    {
                        if (refRentPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, dblRentValue);
                            if (promptPrice == -99999) return;
                            dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",
                                              promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice),
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              promptPrice.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice),refUOM, "","","",""});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost, "1",
                                          dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", refPrice,
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    if (Settings.PriceLevelForOneTime == "Y")
                    {
                        Settings.PriceLevelForOneTime = "N";
                        intUsePriceLevel = Settings.UsePriceLevel;
                    }
                    blScan = true;
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = (gridControl1.ItemsSource as DataTable).Rows.Count - 1;
                    GeneralFunctions.SetFocus(txtSKU);
                }
                else
                {
                    blScan = true;
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = intfocusrow;
                    GeneralFunctions.SetFocus(txtSKU);
                }

                int rwindx = -1;
                foreach (DataRowView drv in dtblPOS.DefaultView)
                {
                    rwindx++;
                    if ((drv["ITEMINDEX"].ToString() == "1") && (drv["SERVICE"].ToString() == "Rent"))
                    {
                        gridControl1.SetCellValue(rwindx, colProduct, drv["PRODUCT"].ToString().Replace("\n", "") + "\n");
                    }
                }
            }


            if (strCurrentServiceType == "Repair")
            {
                if (!blfinddata)
                {
                    if (refRepairPromptTag == "Y")
                    {
                        frmPOSRepairItemInfoDlg frm_POSRepairItemInfoDlg = new frmPOSRepairItemInfoDlg();
                        try
                        {
                            blurGrid.Visibility = Visibility.Visible;
                            frm_POSRepairItemInfoDlg.ShowDialog();
                            blurGrid.Visibility = Visibility.Collapsed;
                            if (frm_POSRepairItemInfoDlg.DialogResult == true)
                            {
                                strRepairItemTag = frm_POSRepairItemInfoDlg.RepairItemTag;
                                strRepairItemSlNo = frm_POSRepairItemInfoDlg.RepairItemSlNo;
                                if (frm_POSRepairItemInfoDlg.RepairItemPurchaseDate == Convert.ToDateTime(null)) strRepairItemPurchaseDate = "";
                                else strRepairItemPurchaseDate = frm_POSRepairItemInfoDlg.RepairItemPurchaseDate.ToString("d");
                            }
                            else return;
                        }
                        finally
                        {
                        }
                    }

                    if (refType == "U")
                    {
                        if (refRepairPromptAmt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc + " * " + strUOMDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;

                            dtblPOS.Rows.Add(new object[]
                                        { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost, "1",
                                          promptPrice,refNPrice,promptPrice,
                                          strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                          promptPrice,promptPrice,refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                          { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost,"1",
                                            refPrice,refNPrice,refPrice,
                                            strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            refPrice,refPrice,refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, "1", strUOMPrice,
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else if (refType == "M")
                    {
                        if (refRepairPromptAmt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;

                            dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost, "1",
                                             refPrice,refNPrice,refPrice,
                                            "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                            "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            refPrice,refPrice,refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                                { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",
                                                  refRepairAmt,refRepairAmt,refRepairAmt,
                                                  "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                                  "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                                  strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                  dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                  0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                                  "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                  refRepairAmt,refRepairAmt,refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else if (refType == "E")
                    {
                        if (refRepairPromptAmt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;
                            dtblPOS.Rows.Add(new object[]
                                          { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",
                                            promptPrice,refNPrice,promptPrice,
                                            strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,promptPrice,refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                            { strID, strDesc,refType,refOHQty,refNQty,refCost, "1",
                                              refPrice,refNPrice,refPrice,
                                              strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,refPrice,refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else
                    {
                        if (refRepairPromptAmt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;
                            dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost,"1",
                                              promptPrice,refPrice,promptPrice, "0","0","0",
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              promptPrice.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,promptPrice,refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost, "1",
                                          refPrice,refNPrice,refPrice,
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                           refPrice,refPrice,refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, "1", refPrice,
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    if (Settings.PriceLevelForOneTime == "Y")
                    {
                        Settings.PriceLevelForOneTime = "N";
                        intUsePriceLevel = Settings.UsePriceLevel;
                    }
                    blScan = true;
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = (gridControl1.ItemsSource as DataTable).Rows.Count - 1;
                    GeneralFunctions.SetFocus(txtSKU);
                }
                else
                {
                    blScan = true;
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = intfocusrow;
                    GeneralFunctions.SetFocus(txtSKU);
                }
            }

            // Automatic Discount Add in Cart
            if (strCurrentServiceType == "Sales") await AddAutoDiscountInCart(GeneralFunctions.fnInt32(strID), SaleID > 0 ? false : true);

            await AddAutoFeesInCart(GeneralFunctions.fnInt32(strID));
            // Automatic Discount Add in Cart

            //  Automatic MixnMatch
            if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();

            //gridControl1.RefreshData();
        }
        private async Task AddtoCart()
        {
            bool blFindBySKU = false;
            bool blFindByAltSKU = false;
            bool blFindByAltSKU2 = false;
            bool blFindByUPC = false;
            string SKU = "";

            try
            {
                if (blReturnItem) return;
                if (txtSKU.Text.Trim() == "") return;

                if ((intCustID == 0) && (Settings.CustomerInfo == 2))
                {
                    if (dtblPOS.Rows.Count == 0)
                    {
                        System.Media.SystemSounds.Hand.Play();
                        new MessageBoxWindow().Show(Properties.Resources.Enter_valid_customer_before_ringing_item, "POS", MessageBoxButton.OK, MessageBoxImage.Information);
                        GeneralFunctions.SetFocus(txtCust);
                        return;
                    }
                }

                if (IfExistsSKU(txtSKU.Text.Trim()) == 1)
                {
                    blFindBySKU = true;
                    SKU = txtSKU.Text.Trim();
                    if (IfActiveProduct(SKU) == 0)
                    {
                        System.Media.SystemSounds.Hand.Play();
                        new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }
                else
                {
                    blFindBySKU = false;
                }
                if (!blFindBySKU)
                {
                    if (IfExistsAltSKU(txtSKU.Text.Trim()) == 1)
                    {
                        blFindByAltSKU = true;
                        SKU = SKUfromAltSKU(txtSKU.Text.Trim());
                        if (IfActiveProduct(SKU) == 0)
                        {
                            System.Media.SystemSounds.Hand.Play();
                            new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                    else
                    {
                        blFindByAltSKU = false;
                    }

                    if (!blFindByAltSKU)
                    {
                        if (IfExistsAltSKU2(txtSKU.Text.Trim()) == 1)
                        {
                            blFindByAltSKU2 = true;
                            SKU = SKUfromAltSKU2(txtSKU.Text.Trim());
                            if (IfActiveProduct(SKU) == 0)
                            {
                                System.Media.SystemSounds.Hand.Play();
                                new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                return;
                            }
                        }
                        else
                        {
                            blFindByAltSKU2 = false;
                        }

                        if (!blFindByAltSKU2)
                        {
                            if (IfExistsUPC(txtSKU.Text.Trim()) == 1)
                            {
                                blFindByUPC = true;
                                SKU = SKUfromUPC(txtSKU.Text.Trim());
                                if (IfActiveProduct(SKU) == 0)
                                {
                                    System.Media.SystemSounds.Hand.Play();
                                    new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                    return;
                                }
                            }
                            else
                            {
                                blFindByUPC = false;
                            }
                        }
                    }

                    
                }
                bool refWFlag = false;
                string refSKU = "";
                string refWPrice = "0";
                string strSKU = "";
                double isvalidprice = 0;

                // 03-15-2013    Add both UPC A and EAN 13 barcode

                if ((Settings.NotReadBarcodeCheckDigit == "N" ? ((txtSKU.Text.Trim().Length == 12) || (txtSKU.Text.Trim().Length == 13)) : ((txtSKU.Text.Trim().Length == 11) || (txtSKU.Text.Trim().Length == 12))) && (txtSKU.Text.Trim().Substring(0, 1) == Settings.EmbeddedBarcodeNumberSystemChar))   //  (txtSKU.Text.Trim().Substring(0, 1) == "2")
                {
                    IsWeighedItem(txtSKU.Text.Trim(), ref refWFlag, ref refSKU, ref refWPrice);

                    if (refWFlag)
                    {
                        strSKU = refSKU;
                        try
                        {
                            isvalidprice = GeneralFunctions.fnDouble(refWPrice);
                        }
                        catch
                        {
                            System.Media.SystemSounds.Hand.Play();
                            new MessageBoxWindow().Show(Properties.Resources.Invalid_embedded_bar_code_product_price,
                                Properties.Resources.Embedded_bar_code_Item_Price_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                    else
                    {
                        System.Media.SystemSounds.Hand.Play();
                        new MessageBoxWindow().Show(Properties.Resources.Invalid_embedded_bar_code_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }
                else
                    strSKU = SKU;

                if (strCurrentServiceType != "Sales")
                {
                    if (refWFlag) return;
                }

                if (IfExistsSKU(strSKU) == 1)
                {
                    

                    if (!GeneralFunctions.ProceedFromItemImage(GetProductID(strSKU))) return;

                    int MixMatchID = 0;
                    string MixMatchFlag = "N";
                    string MixMatchCat = "";
                    string MixMatchType = "";
                    double MixMatchVal = 0;
                    int MixMatchPlus = 0;
                    double MixMatchPartPrice = 0;
                    bool MixMatchApplicableLast = false;

                    int SaleID = 0;
                    double SalePrice = 0;
                    DataTable dtblBuyGetFree = new DataTable();
                    int TBuyNFreeID = 0;
                    int TBuyNFreeQty = 0;
                    bool TBuyNFreeProceed = false;
                    ArrayList TBuyNFree_ItemToBeDeletedFirst = new ArrayList();

                    /// For Sale, before adding an item into cart, first check if active sale price is present or not. If not present then check Mix n Match. 
                    /// If active Mix n Match found, then cart added with Mix n Match data.
                    /// If no active Mix n Match found then check for Buy n Get Free promotion, if satisfied then Buy n Get Free data will the added into cart


                    if (strCurrentServiceType == "Sales")
                    {
                        string itemexpiredt = GetProductExpiry(strSKU);
                        if (itemexpiredt != "")
                        {
                            DisplayItemExpiryAlert(itemexpiredt);
                        }
                    }

                    if (strCurrentServiceType == "Sales")
                    {

                        if (!refWFlag)
                        {
                            FetchActiveSale(GetProductID(strSKU), ref SaleID, ref SalePrice);

                            if (SaleID == 0)
                            {
                                PosDataObject.POS objPOS = new PosDataObject.POS();
                                objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                MixMatchID = objPOS.ActiveMixNMatch(GetProductID(strSKU));
                            }
                            if (MixMatchID > 0)
                            {
                                for (int lp = 1; lp <= intPressQty; lp++)
                                {
                                    await AddSKURecordForMixMatch(strSKU, refWFlag, isvalidprice);
                                }
                            }
                            else
                            {
                                dtblBuyGetFree = CheckIfActiveBuyNGetFree(GetProductID(strSKU));

                                if (dtblBuyGetFree.Rows.Count > 0)
                                {
                                    TBuyNFreeProceed = CheckCartForProceedBuyNGetFree(GetProductID(strSKU), dtblBuyGetFree, ref TBuyNFreeID, ref TBuyNFreeQty, ref TBuyNFree_ItemToBeDeletedFirst);
                                }
                                else
                                {
                                    TBuyNFreeProceed = false;
                                }

                                if (TBuyNFreeProceed)
                                {
                                    AddBuyNGetFreeQty(GetProductID(strSKU), GetProductName(GetProductID(strSKU)), TBuyNFreeID, TBuyNFreeQty, TBuyNFree_ItemToBeDeletedFirst, SaleID, SalePrice);
                                }
                                else
                                {
                                    await AddSKURecord(strSKU, refWFlag, isvalidprice);
                                }
                            }
                        }
                        else
                        {
                            await AddSKURecordForEmbeddedProduct(strSKU, refWFlag, isvalidprice);
                        }


                    }
                    else
                    {
                        await AddSKURecord(strSKU, refWFlag, isvalidprice);
                    }

                    if (TBuyNFreeProceed)
                    {
                        // Automatic Discount Add in Cart
                        if (strCurrentServiceType == "Sales") await AddAutoDiscountInCart(GetProductID(strSKU), SaleID > 0 ? false : true);
                        //  Automatic MixnMatch
                        if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();
                        // Automatic Fees Add in Cart
                        await AddAutoFeesInCart(GetProductID(strSKU));
                    }
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    GetTotal();
                    ShowTax();
                    ResetQty();
                    //gridControl1.RefreshData();
                }
                else
                {
                    if (((SecurityPermission.AcssProductAdd) && (SystemVariables.CurrentUserID > 0)) ||
                        (SystemVariables.CurrentUserID <= 0))
                    {
                        if (txtSKU.Text.Trim() != "")
                        {
                            System.Media.SystemSounds.Hand.Play();
                            if (new MessageBoxWindow().Show(Properties.Resources.This_is_a_new_item_ + "\n" + Properties.Resources.Do_you_want_to_add_it_to_the_system_, Properties.Resources.New_Item, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                            {
                                int CatID = 0;
                                string DisplayPOS = "N";
                                int intNewRecID = 0;
                                AddProductWindow frm_ProductDlg = new AddProductWindow();
                                try
                                {

                                    frm_ProductDlg.AddSKU = GeneralFunctions.CheckLengthOfString(txtSKU.Text.Trim(),16);
                                    frm_ProductDlg.AddFromPOS = true;
                                    frm_ProductDlg.Duplicate = false;
                                    frm_ProductDlg.ID = 0;
                                    blurGrid.Visibility = Visibility.Visible;
                                    frm_ProductDlg.ShowDialog();
                                    blurGrid.Visibility = Visibility.Collapsed;
                                    intNewRecID = frm_ProductDlg.NewID;
                                    DisplayPOS = frm_ProductDlg.AddDisplayItemInPOS;
                                    CatID = frm_ProductDlg.AddCategory;
                                }
                                finally
                                {
                                }

                                if (intNewRecID > 0)
                                {
                                    FetchItemData();
                                    /*
                                    pnlProdtMain.Children.Clear();
                                    frm_ProductBrw = new POSSection.frmProductBrwUC();
                                    frm_ProductBrw.bar1.Visibility = Visibility.Collapsed;
                                    frm_ProductBrw.bar2.Visibility = Visibility.Collapsed;
                                    frm_ProductBrw.cmbFilter.EditValue = "Active Products";
                                    frm_ProductBrw.IsPOS = true;
                                    frm_ProductBrw.FetchData(true, "Active Products");
                                    frm_ProductBrw.SetDecimalPlace();
                                    blfetchProduct = true;
                                    /// Set UP/Down Button to move cursor through Cart Item
                                    EnableDisableButton(btnUpProduct, btnDownProduct, grdProduct);
                                    */
                                    if (DisplayPOS == "Y")
                                    {
                                        SetNewPOSItem(CatID, intNewRecID);
                                    }

                                    await AddSKURecord(txtSKU.Text.Trim(), false, 0);



                                    GetTotal();
                                    ShowTax();
                                    ResetQty();
                                }
                                else
                                {
                                    blleavenotoscan = true;
                                }
                            }
                            else
                            {
                                blleavenotoscan = true;
                            }
                        }
                    }
                }
                txtSKU.Text = "";
                txtQty.Text = intPressQty.ToString();
                //txtSKU.BackColor = Color.FromArgb(247, 245, 241);
                /// Set UP/Down Button to move cursor through Cart Item
                EnableDisableButton(btnUP, btnDown, gridControl1);
                blleave = true;
            }
            finally
            {
                txtSKU.Focus();
            }

        }
        /// set New Item button under Item Category 

        private void SetNewPOSItem(int CATID, int ITEMID)
        {
            //Todo: foreach (Control cr in pnlCat1.Controls)
            //{
            //    if (cr is POSControls.POSCategory)
            //    {
            //        POSControls.POSCategory LoopCat = (cr as POSControls.POSCategory);
            //        if (LoopCat.CategoryID != CATID) continue;
            //        if (LoopCat.CategoryID == CATID)
            //        {
            //            GetNewPOSItem(LoopCat, ITEMID);
            //            break;
            //        }
            //    }

            //}

            //foreach (Control cr in pnlCat2.Controls)
            //{
            //    if (cr is POSControls.POSCategory)
            //    {
            //        POSControls.POSCategory LoopCat = (cr as POSControls.POSCategory);
            //        if (LoopCat.CategoryID != CATID) continue;
            //        if (LoopCat.CategoryID == CATID)
            //        {
            //            GetNewPOSItem(LoopCat, ITEMID);
            //            break;
            //        }
            //    }
            //}

            //foreach (Control cr in pnlCat3.Controls)
            //{
            //    if (cr is POSControls.POSCategory)
            //    {
            //        POSControls.POSCategory LoopCat = (cr as POSControls.POSCategory);
            //        if (LoopCat.CategoryID != CATID) continue;
            //        if (LoopCat.CategoryID == CATID)
            //        {
            //            GetNewPOSItem(LoopCat, ITEMID);
            //            break;
            //        }
            //    }
            //}


            //foreach (Control cr in pnlCat4.Controls)
            //{
            //    if (cr is POSControls.POSCategory)
            //    {
            //        POSControls.POSCategory LoopCat = (cr as POSControls.POSCategory);
            //        if (LoopCat.CategoryID != CATID) continue;
            //        if (LoopCat.CategoryID == CATID)
            //        {
            //            GetNewPOSItem(LoopCat, ITEMID);
            //            break;
            //        }
            //    }
            //}


            //foreach (Control cr in pnlCat5.Controls)
            //{
            //    if (cr is POSControls.POSCategory)
            //    {
            //        POSControls.POSCategory LoopCat = (cr as POSControls.POSCategory);
            //        if (LoopCat.CategoryID != CATID) continue;
            //        if (LoopCat.CategoryID == CATID)
            //        {
            //            GetNewPOSItem(LoopCat, ITEMID);
            //            break;
            //        }
            //    }
            //}
        }

        // set New Item button under Item Category 
        private void GetNewPOSItem(POSControls.POSCategory PosCategory, int ItemID)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            DataTable dtblItemButtons = objPOS.FetchPOSItems(ItemID, false);

            foreach (DataRow dr in dtblItemButtons.Rows)
            {
                POSControls.POSItem PosItem = new POSControls.POSItem(1);
                PosItem.Name = dr["ID"].ToString();
                PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                PosItem.ItemName = dr["DESCRIPTION"].ToString();
                PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                PosItem.CurrentStock = GeneralFunctions.fnInt32(dr["QTYONHAND"].ToString());
                PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");
                GeneralFunctions.LoadPhotofromDB(PosItem);
                //PosItem.Click += new System.EventHandler(this.posItem1Click); --Sam
                PosItem.Visible = true;
                PosItem.Parent = PosCategory;

                //-- Sam Wrapper
                Random rnd = new Random();
                Color randomColor = Color.FromRgb((byte)rnd.Next(128, 255), (byte)rnd.Next(128, 255), (byte)rnd.Next(128, 255));
                ListBoxItem lbi = MakePOSItem(PosItem);
                lbi.BorderBrush = new SolidColorBrush(randomColor);
                lbi.PreviewMouseLeftButtonDown += Lbi_PreviewMouseLeftButtonDown;
                // Block By Rajib POSItemsListBox.Items.Add(lbi);
                //--
            }
        }
        public void EnableDisableButton(System.Windows.Controls.Button bup, System.Windows.Controls.Button bdown, GridControl grdvw)
        {

            if (grdvw.ItemsSource != null)
                if (((grdvw.ItemsSource as DataTable).Rows.Count == 0) || ((grdvw.ItemsSource as DataTable).Rows.Count == 1))
                {
                    bup.IsEnabled = false;
                    bdown.IsEnabled = false;
                }

                /*else if (grdvw.IsFirstRow)
                {
                    bup.Enabled = false;
                    bdown.Enabled = true;
                }
                else if (grdvw.IsLastRow)
                {
                    bup.Enabled = true;
                    bdown.Enabled = false;
                }*/
                else
                {
                    bup.IsEnabled = true;
                    bdown.IsEnabled = true;
                }
        }

        /// Get Item Name from Item Record ID
        private string GetProductName(int RefID)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.GetProductName(RefID);
        }

        /// Add Item into Cart
        private async Task AddSKURecord(string SKU, bool WFlag, double WPrice)
        {
            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                //SecondMonitor.ClearWeightInfo();
            }

            if (strCurrentServiceType == "Sales")
            {
                if ((blReturnItem) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blReturnItem) && (dtblPOS.Rows.Count == 0))
                {
                    blReturnItem = false;
                }
            }





            string strID = "";
            string strDesc = "";
            string strPrice = "";
            string strSKU = "";
            string refWPrice = WPrice.ToString();
            string refSKU = "";
            bool refWFlag = false;
            string line1 = "";
            string line2 = "";
            /*if ((SKU.Length == 12) && (SKU.Substring(0, 1) == "2"))
            {
                IsWeighedItem(SKU, ref refWFlag, ref refSKU, ref refWPrice);
                if (WFlag) strSKU = refSKU;
                else
                {
                    return;
                }
            }
            else
                strSKU = SKU;*/
            strSKU = SKU;
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            DataTable dtbl = objProduct.ShowSKURecord(strSKU.Trim());
            foreach (DataRow dr in dtbl.Rows)
            {
                strID = dr["ID"].ToString();
                strDesc = dr["Description"].ToString();
                strPrice = dr["PriceA"].ToString();
            }
            dtbl.Dispose();

            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";
            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";
            string refRentPrompt = "";

            int MixMatchID = 0;
            string MixMatchFlag = "N";
            string MixMatchCat = "";
            string MixMatchType = "";
            double MixMatchVal = 0;
            int MixMatchPlus = 0;
            double MixMatchPartPrice = 0;
            bool MixMatchApplicableLast = false;

            int SaleID = 0;
            double SalePrice = 0;
            int iAge = 0;

            string refUOM = "";
            string refExpiry = "";
            FetchProduct(GeneralFunctions.fnInt32(strID), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                            ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI, ref refRentHR,
                            ref refRentHDY, ref refRentDY, ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt,
                            ref refRentPrompt, ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

            if ((refType == "P") || (refType == "M") || (refType == "K") || (refType == "U")
                        || (refType == "W") || (refType == "E") || (refType == "F") || (refType == "S") || (refType == "T"))
            {
                if (strCurrentServiceType == "Sales")
                {
                    FetchActiveSale(GeneralFunctions.fnInt32(strID), ref SaleID, ref SalePrice);
                    if (SaleID == 0)
                    {
                        FetchMix_n_Match(GeneralFunctions.fnInt32(strID), ref MixMatchID, ref MixMatchFlag, ref MixMatchCat, ref MixMatchType,
                                         ref MixMatchVal, ref MixMatchPlus, ref MixMatchPartPrice, ref MixMatchApplicableLast);

                        // MixMatchFlag = N / Y - Not Applicable / Applicale
                        // MixMatchCat = N / P - Normal Pricing / Plus Pricing
                        // MixMatchType = P/A - % off / Amount off
                    }
                }
            }


            if (strCurrentServiceType == "Sales")
            {
                if (refType == "Q")
                {

                    if (!ValidCartForEntryTicket())
                    {
                        if (new MessageBoxWindow().Show("Items other than entry ticket exists in the cart." + "\n" + "You must remove items from the cart." + "\n" + Properties.Resources.Do_you_want_to_continue_, Properties.Resources.Validation, MessageBoxButton.YesNo, MessageBoxImage.Information) == MessageBoxResult.Yes)
                        {
                            InitializeScreen();
                        }
                        else
                        {
                            return;
                        }
                    }
                }
            }


            if (strCurrentServiceType == "Rent")
            {
                if ((blRentRecall) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blRentRecall) && (dtblPOS.Rows.Count == 0))
                {
                    blRentRecall = false;
                    blRentIssued = true;
                }
                else if ((refType == "S") || (refType == "W")) return;
            }
            if (strCurrentServiceType == "Repair")
            {
                /*if ((blRepairRecall) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blRepairRecall) && (dtblPOS.Rows.Count == 0))
                {
                    blRepairRecall = false;
                    blRepairIssued = true;
                }
                else if ((refType == "S") || (refType == "W")) return; */

                if (refType == "W") return;
            }

            if (Settings.POSIDRequired == "Y")
            {
                if (GeneralFunctions.fnInt32(refAge) > 0)
                {
                    iAge = GeneralFunctions.fnInt32(refAge);
                    if (!AgeCheck(DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)))) return;
                    //if (new MessageBoxWindow().Show(Properties.Resources."Minimum Age ","frmPOSN_msg_MinimumAge") + refAge + Properties.Resources." : Birthday on or before ","frmPOSN_msg_Birthdayonorbefore") + DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)).ToString("MM/dd/yyyy"), Properties.Resources."Age Verification","frmPOSN_msg_AgeVerification"), MessageBoxButton.OKCancel, MessageBoxImage.Information) == DialogResult.Cancel) return;
                }
            }

            // if exist then update

            bool blfinddata = false;
            string strselectid = strID;
            int intfocusrow = 0;
            double dblRate = 0;

            int Qty = GeneralFunctions.fnInt32(intPressQty);

            string strUOMCount = "";
            string strUOMPrice = "";
            string strUOMDesc = "";

            string strMatxOID = "";
            string strMatxOV1 = "";
            string strMatxOV2 = "";
            string strMatxOV3 = "";

            string strSLID = "0";

            bool blExit = false;

            if (refType == "U")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {
                    frm_POSProductAddnDlg.ProductType = "Unit of Measure";
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Unit_of_Measure_Data__ + " " + strDesc;
                    frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(strID);
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strUOMCount = frm_POSProductAddnDlg.UOMCount;
                        strUOMPrice = frm_POSProductAddnDlg.UOMPrice;
                        strUOMDesc = frm_POSProductAddnDlg.UOMDesc;
                    }
                    else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }

            if (refType == "M")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {
                    frm_POSProductAddnDlg.ProductType = "Matrix";
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Matrix_Data__ + " " + strDesc;
                    frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(strID);
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strMatxOID = frm_POSProductAddnDlg.MatrixOID;
                        strMatxOV1 = frm_POSProductAddnDlg.MatrixOV1;
                        strMatxOV2 = frm_POSProductAddnDlg.MatrixOV2;
                        strMatxOV3 = frm_POSProductAddnDlg.MatrixOV3;
                    }
                    else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }

            if (refType == "E")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {
                    frm_POSProductAddnDlg.ProductType = "Serialized";
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Serialized_Data__ + " " + strDesc;
                    frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(strID);
                    frm_POSProductAddnDlg.dtblS = dtblPOS;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strSLID = frm_POSProductAddnDlg.SLID;
                    }
                    else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }

            //if (strCurrentServiceType != "Repair")
            //{
            if (!CheckStock(GeneralFunctions.fnInt32(strselectid), 1, strMatxOID, strMatxOV1, strMatxOV2, strMatxOV3))
            {
                new MessageBoxWindow().Show(Properties.Resources.No_Stock_available_, Properties.Resources.Stock_Validation, MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            // }


            // get Rental data //

            string strRentType = "NA";
            double dblRentDuration = 0;
            double dblRentValue = 0;
            double dblRentDeposit = 0;

            if (strCurrentServiceType == "Rent")
            {
                if (!blRentRecall)
                {
                    frmPOSRentalSelectDlg frmrentsel = new frmPOSRentalSelectDlg();
                    try
                    {
                        frmrentsel.PID = GeneralFunctions.fnInt32(strID);
                        blurGrid.Visibility = Visibility.Visible;
                        frmrentsel.ShowDialog();
                        blurGrid.Visibility = Visibility.Collapsed;
                        if (frmrentsel.DialogResult == true)
                        {
                            strRentType = frmrentsel.RentType;
                            dblRentDuration = frmrentsel.RentDuration;
                            dblRentValue = frmrentsel.RentValue;
                            dblRentDeposit = frmrentsel.RentDeposit;
                        }
                        else blExit = true;
                    }
                    finally
                    {
                    }
                    if (blExit) return;
                }
            }

            // 

            string strRepairItemTag = "";
            string strRepairItemSlNo = "";
            string strRepairItemPurchaseDate = "";


            if (strCurrentServiceType == "Sales")
            {


                if (SaleID > 0)
                {
                    refPrompt = "N";
                    refPrice = SalePrice.ToString();
                    if (refType == "U") strUOMPrice = SalePrice.ToString();
                }



                if (!WFlag)
                {
                    if (!blfinddata)
                    {
                        if (refType == "D")
                        {
                            double promptPrice = GetDonationPrice(strDesc, GeneralFunctions.fnDouble(refPrice),refPrompt);
                            if (promptPrice == -99999) return;

                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                            {
                                dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),promptPrice,refNPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(promptPrice)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                            }
                            else
                            {
                                double discntamt = 0;
                                string damt = "0";
                                double newpretaxamt = 0;
                                string amtstr = "";
                                if (MixMatchCat == "N")  // Normal Pricing
                                {
                                    discntamt = 0;
                                    discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                }

                                if (MixMatchCat == "P")  // Plus Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    damt = (promptPrice - newpretaxamt).ToString("f");
                                }

                                if (MixMatchCat == "A")  // Absolute Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                    damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                    amtstr = "";
                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                }

                                string linetxt = "";
                                linetxt = strDesc + "\n";

                                dtblPOS.Rows.Add(new object[]
                                        { strID,linetxt,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),promptPrice,refNPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"",
                                              MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " +Properties.Resources.Mix_n_Match  +amtstr,"1",
                                              "0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else if (refType == "U")
                        {
                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc + " * " + strUOMDesc, GeneralFunctions.fnDouble(strUOMPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable 
                                {
                                    dtblPOS.Rows.Add(new object[]
                                        { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                          promptPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                          strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                          promptPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + " * " + strUOMDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                        { strID, linetxt,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                          promptPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                          strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"",
                                          MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match  +amtstr,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                        "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                        promptPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});

                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, intPressQty.ToString(), promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                          { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                            strUOMPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)).ToString(),
                                            strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            strUOMPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {

                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(strUOMPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + " * " + strUOMDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                          { strID, linetxt,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                            strUOMPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                            strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"",
                                            MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match  +amtstr,"1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            strUOMPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, intPressQty.ToString(), strUOMPrice,
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                        }
                        else if (refType == "M")
                        {
                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),promptPrice,refNPrice,
                                            Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                            "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                            "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,
                                            Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                            { strID,linetxt,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),promptPrice,refNPrice,
                                            Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                            "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                            "",
                                            MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match  +amtstr,"1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,
                                            Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                                { strID,strDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),refPrice,refNPrice,
                                                  Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                                  "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                                  "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                                  strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                  dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                  0,0,0,0,0,0,0,0,0,
                                                  MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                                  "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                  refPrice,
                                                  Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                                { strID,linetxt,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),refPrice,refNPrice,
                                                  Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                                  "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"",
                                                  MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match  +amtstr,"1",
                                                  "0","0","0","","","","0","0","0","N","N","N",
                                                  strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                  dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                  0,0,0,0,0,0,0,0,0,
                                                  MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                                  "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                  refPrice,
                                                  Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), refPrice, ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                        }
                        else if (refType == "E")
                        {
                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {

                                    dtblPOS.Rows.Add(new object[]
                                          { strID,strDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),promptPrice,refNPrice,
                                            Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                            strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,
                                            Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                          { strID,linetxt,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),promptPrice,refNPrice,
                                            Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                            strSLID,"0","0","","","","",GetUniqueString(),refDP,"",
                                            MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match  +amtstr,"1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,
                                            MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,
                                            Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }


                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { strID, strDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),refPrice,refNPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                              strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                            { strID, linetxt,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),refPrice,refNPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                              strSLID,"0","0","","","","",GetUniqueString(),refDP,"",
                                              MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " +Properties.Resources.Mix_n_Match  +amtstr,"1",
                                              "0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), refPrice, ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                        }
                        else if (refType == "W")
                        {
                            if (CheckForFixedWeight(GeneralFunctions.fnInt32(strID)))
                            {
                                weightitemid = GeneralFunctions.fnInt32(strID);
                                weightitemname = strDesc;
                                await AddFixedWeightedItem();
                            }
                            else
                            {
                                if ((Settings.ScaleDevice == "Datalogic Scale") && (m_posScale != null))
                                {
                                    try
                                    {
                                        if (!tmrDL.IsEnabled) tmrDL.IsEnabled = true;
                                        weightitemid = GeneralFunctions.fnInt32(strID);
                                        weightitemname = strDesc;
                                        weightstring = m_posScale.ReadWeight(20000).ToString();

                                        double Tare = 0;
                                        double Tr1 = 0;
                                        double Tr2 = 0;
                                        FetchTare(weightitemid, ref Tr1, ref Tr2);

                                        Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                                        if (blTareEntry)
                                        {
                                            Tare = dblTareEntryValue;
                                        }

                                        if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                        {
                                            SecondMonitor.AddWeightInfo(GeneralFunctions.FormatDoubleForPrint((GeneralFunctions.fnDouble(weightstring) - Tare).ToString("0.###")) + " " + m_posScale.WeightUnit.ToString(), Tare);
                                        }

                                        if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                        {
                                            /*if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                            {
                                                SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + m_posScale.WeightUnit.ToString());
                                            }*/
                                            await AddWeightedItem();

                                        }
                                        else
                                        {
                                            DocMessage.MsgInformation(Properties.Resources.Invalid_scale_weight);
                                            return;
                                        }
                                    }
                                    catch
                                    {
                                        DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                        return;
                                    }
                                }
                                else if ((Settings.ScaleDevice == "Kilotech") && (Settings.COMPort != "(None)"))
                                {
                                    try
                                    {
                                        string wt = "";
                                        blGetWeight = false;
                                        if (IsActiveScale1())
                                        {
                                            if (s_wght != 0) wt = s_wght.ToString();

                                            if (wt != "")
                                            {
                                                weightitemid = GeneralFunctions.fnInt32(strID);
                                                weightitemname = strDesc;
                                                weightstring = wt;
                                                weightuom = s_wght_u;
                                                double Tare = 0;
                                                double Tr1 = 0;
                                                double Tr2 = 0;
                                                FetchTare(weightitemid, ref Tr1, ref Tr2);

                                                Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                                                if (blTareEntry)
                                                {
                                                    Tare = dblTareEntryValue;
                                                }

                                                if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                {
                                                    if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                    {
                                                        SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + s_wght_u, Tare);
                                                    }
                                                    await AddWeightedItem();

                                                }
                                                else
                                                {
                                                    DocMessage.MsgInformation(Properties.Resources.No_scale_weight);
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                blGetWeight = false;
                                                DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                            return;
                                        }
                                    }
                                    catch
                                    {
                                        DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                        return;
                                    }
                                }
                                else if ((Settings.ScaleDevice == "Live Weight") && (Settings.COMPort != "(None)"))
                                {
                                    weightitemid = GeneralFunctions.fnInt32(strID);
                                    weightitemname = strDesc;
                                    //dtblLiveWeightStable.Rows.Clear();
                                    //tmrLW.Enabled = true;
                                    await AddWeightedItem();
                                }
                                else if (Settings.ScaleDevice == "XEPOS")
                                {
                                    string strfilename = "";
                                    strfilename = System.AppDomain.CurrentDomain.BaseDirectory;
                                    if (strfilename.EndsWith("\\"))
                                    {
                                        strfilename = strfilename + "Weight.exe";
                                    }
                                    else
                                    {
                                        strfilename = strfilename + "\\Weight.exe";
                                    }
                                    if (!System.IO.File.Exists(strfilename)) return;
                                    blopenweight = true;
                                    weightcallfrom = "FromSKU";

                                    weightitemid = GeneralFunctions.fnInt32(strID);
                                    weightitemname = strDesc;

                                    Process p = new Process();
                                    p.StartInfo.FileName = strfilename;
                                    p.Start();
                                }

                                else
                                {
                                    bool proceedflag = false;
                                    double wqty = 0;
                                    double wdisc = 0;
                                    string val1 = "";
                                    string val2 = "0";
                                    string val3 = "0";
                                    string val4 = "";
                                    string val5 = "";

                                    frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                                    try
                                    {
                                        frm_POSItemDlg.BlankLine = false;
                                        //Todo: frm_POSItemDlg.ParentForm = this;
                                        frm_POSItemDlg.IsEdit = false;
                                        frm_POSItemDlg.ServiceType = strCurrentServiceType;
                                        frm_POSItemDlg.ProductDesc = strDesc;
                                        frm_POSItemDlg.Qty = intPressQty;
                                        frm_POSItemDlg.Weighted = true;
                                        frm_POSItemDlg.Price = GeneralFunctions.fnDouble(refPrice);
                                        frm_POSItemDlg.WeightedUOM = refUOM;
                                        blurGrid.Visibility = Visibility.Visible;
                                        frm_POSItemDlg.ShowDialog();
                                        blurGrid.Visibility = Visibility.Collapsed;
                                        if (frm_POSItemDlg.DialogResult == true)
                                        {
                                            proceedflag = true;
                                            wqty = frm_POSItemDlg.Qty;
                                            wdisc = frm_POSItemDlg.Discount;

                                            if (!GeneralFunctions.IsValidScaleWeight_POS(wqty.ToString(), true)) return;


                                            if (blTareEntry)
                                            {
                                                wqty = wqty - dblTareEntryValue;
                                                if (wqty <= 0)
                                                {
                                                    new MessageBoxWindow().Show(Properties.Resources.Enter_valid_weight, Properties.Resources.Weight_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                    finally
                                    {
                                    }
                                    if (!proceedflag) return;

                                    if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                    {
                                        SecondMonitor.AddWeightInfo(GeneralFunctions.fnDouble(wqty).ToString(), 0);
                                    }

                                    if (wdisc > 0)
                                    {
                                        val1 = "A";
                                        val2 = wdisc.ToString();
                                        val3 = wdisc.ToString();
                                        val4 = "9988";
                                        val5 = Properties.Resources.Discount__.Replace("$", SystemVariables.CurrencySymbol) + wdisc.ToString("f");
                                    }

                                    if (refPrompt == "Y")
                                    {
                                        double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                        if (promptPrice == -99999) return;

                                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                            {
                                                strID,wdisc == 0 ? strDesc : strDesc + "\n",refType,refOHQty,refNQty,refCost,wqty.ToString(),promptPrice,refNPrice,
                                                Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(promptPrice) - wdisc).ToString(),"0","0","0",
                                                "","","","",GetUniqueString(),refDP,"",val1,val2,val3,val4,val5,"1","0","0","0","","","",
                                                "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                                dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                                strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                                promptPrice,
                                                Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(promptPrice) - wdisc).ToString(),refUOM, "","","",""});

                                        }
                                        else
                                        {
                                            double discntamt = 0;
                                            string damt = "0";
                                            double newpretaxamt = 0;
                                            string amtstr = "";
                                            if (MixMatchCat == "N")  // Normal Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                amtstr = "";
                                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                            }

                                            if (MixMatchCat == "P")  // Plus Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                amtstr = "";
                                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                damt = (promptPrice - newpretaxamt).ToString("f");
                                            }

                                            if (MixMatchCat == "A")  // Absolute Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = MixMatchVal - MixMatchPartPrice;
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                amtstr = "";
                                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            }

                                            string linetxt = "";
                                            linetxt = strDesc + "\n";

                                            dtblPOS.Rows.Add(new object[]
                                            {
                                                strID,linetxt,refType,refOHQty,refNQty,refCost,wqty.ToString(),promptPrice,refNPrice,
                                                Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),"0","0","0",
                                                "","","","",GetUniqueString(),refDP,"",
                                                MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                                "0","0","0","","","",
                                                "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                                dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                                strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                                promptPrice,
                                                Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                        }

                                        line1 = "";
                                        line2 = "";
                                        RearrangeCartItemTextBeforePoleDisplay(strDesc, wqty.ToString(), promptPrice.ToString(),
                                        ref line1, ref line2);
                                        DisplayPoleText(2, "N", "N", line1, line2);
                                    }
                                    else
                                    {
                                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                        { strID,wdisc == 0 ? strDesc : strDesc + "\n",refType,refOHQty,refNQty,refCost, wqty.ToString(),refPrice,refNPrice,
                                          Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"",val1,val2,val3,val4,val5,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),refUOM,"","","","","N"});
                                        }
                                        else
                                        {
                                            double discntamt = 0;
                                            string damt = "0";
                                            double newpretaxamt = 0;
                                            string amtstr = "";
                                            if (MixMatchCat == "N")  // Normal Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                amtstr = "";
                                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                            }

                                            if (MixMatchCat == "P")  // Plus Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                amtstr = "";
                                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                            }

                                            if (MixMatchCat == "A")  // Absolute Pricing
                                            {
                                                discntamt = 0;
                                                discntamt = MixMatchVal - MixMatchPartPrice;
                                                damt = "0";
                                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                newpretaxamt = 0;
                                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                amtstr = "";
                                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            }

                                            string linetxt = "";
                                            linetxt = strDesc + "\n";

                                            dtblPOS.Rows.Add(new object[]
                                        { strID,linetxt,refType,refOHQty,refNQty,refCost, wqty.ToString(),refPrice,refNPrice,
                                          Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"",
                                          MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                        }

                                        line1 = "";
                                        line2 = "";
                                        RearrangeCartItemTextBeforePoleDisplay(strDesc, wqty.ToString(), refPrice,
                                        ref line1, ref line2);
                                        DisplayPoleText(2, "N", "N", line1, line2);

                                    }

                                    blTareEntry = false;
                                    dblTareEntryValue = 0;
                                }
                            }
                        }
                        else if ((refType == "F") && (Settings.AddGallon == "Y"))
                        {
                            double gl = 0;
                            bool pf = false;
                            frm_POSGallonEntryDlg fgaldlg = new frm_POSGallonEntryDlg();
                            try
                            {
                                blurGrid.Visibility = Visibility.Visible;
                                fgaldlg.ShowDialog();
                                blurGrid.Visibility = Visibility.Collapsed;
                                if (fgaldlg.DialogResult == true)
                                {
                                    pf = true;
                                    gl = fgaldlg.Gallon;
                                }
                            }
                            finally
                            {
                            }
                            if (!pf) return;


                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost,gl.ToString(),promptPrice,refNPrice,
                                              Convert.ToDecimal(gl * GeneralFunctions.fnDouble(promptPrice)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(gl * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                            { strID,linetxt,refType,refOHQty,refNQty,refCost,gl.ToString(),promptPrice,refNPrice,
                                              Convert.ToDecimal(gl * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"",
                                              MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                              "0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(gl * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost,gl.ToString(),refPrice,refNPrice,
                                          Convert.ToDecimal(gl * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(gl * GeneralFunctions.fnDouble(refPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                        { strID,linetxt,refType,refOHQty,refNQty,refCost, gl.ToString(),refPrice,refNPrice,
                                          Convert.ToDecimal(gl * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"",
                                          MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(gl * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), refPrice,
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);

                            }
                        }
                        else
                        {
                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),promptPrice,refNPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(promptPrice)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                            { strID,linetxt,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),promptPrice,refNPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"",
                                              MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " +Properties.Resources.Mix_n_Match  +amtstr,"1",
                                              "0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              dblRentValue.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,
                                              Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),refPrice,refNPrice,
                                          Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = strDesc + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                        { strID,linetxt,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),refPrice,refNPrice,
                                          Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"",
                                          MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " +Properties.Resources.Mix_n_Match  +amtstr,"1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,
                                          MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,"Y",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,
                                          Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(newpretaxamt)).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), refPrice,
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);

                            }
                        }
                        if (Settings.PriceLevelForOneTime == "Y")
                        {
                            Settings.PriceLevelForOneTime = "N";
                            intUsePriceLevel = Settings.UsePriceLevel;
                        }
                        blScan = true;
                        SetCartDisplay();
                        gridControl1.ItemsSource = dtblPOS;
                        ToggleWithEmptyCart();
                        gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                        GeneralFunctions.SetFocus(txtSKU);
                    }
                    else
                    {
                        blScan = true;
                        SetCartDisplay();
                        gridControl1.ItemsSource = dtblPOS;
                        ToggleWithEmptyCart();
                        gridView1.FocusedRowHandle = intfocusrow;
                        GeneralFunctions.SetFocus(txtSKU);
                    }
                }
                else
                {
                    if (!blfinddata)
                    {



                        if (CheckForFixedWeight(GeneralFunctions.fnInt32(strID)))
                        {
                            dtblPOS.Rows.Add(new object[]
                                      { strID,strDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                        GeneralFunctions.fnDouble(refWPrice)/100,(GeneralFunctions.fnDouble(refWPrice)/100).ToString(),
                                        Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refWPrice)/100).ToString(),
                                       "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                       "0","0","0","","","","0","0","0","N","N","N",
                                       strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                       dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                       MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                       "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      GeneralFunctions.fnDouble(refWPrice)/100,
                                        Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refWPrice)/100).ToString(),refUOM,"","","","","N"});
                        }
                        else
                        {
                            if ((Settings.ScaleDevice == "Datalogic Scale") && (m_posScale != null))
                            {
                                try
                                {
                                    if (!tmrDL.IsEnabled) tmrDL.IsEnabled = true;
                                    weightitemid = GeneralFunctions.fnInt32(strID);
                                    weightitemname = strDesc;
                                    weightstring = m_posScale.ReadWeight(20000).ToString();

                                    double Tare = 0;
                                    double Tr1 = 0;
                                    double Tr2 = 0;
                                    FetchTare(weightitemid, ref Tr1, ref Tr2);

                                    Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                                    if (blTareEntry)
                                    {
                                        Tare = dblTareEntryValue;
                                    }

                                    if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                    {
                                        SecondMonitor.AddWeightInfo(GeneralFunctions.FormatDoubleForPrint((GeneralFunctions.fnDouble(weightstring) - Tare).ToString("0.###")) + " " + m_posScale.WeightUnit.ToString(), Tare);
                                    }

                                    if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                    {
                                        /*if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                        {
                                            SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + m_posScale.WeightUnit.ToString());
                                        }*/
                                        await AddWeightedItem(GeneralFunctions.fnDouble(refWPrice) / 100);

                                    }
                                    else
                                    {
                                        DocMessage.MsgInformation(Properties.Resources.Invalid_scale_weight);
                                        return;
                                    }
                                }
                                catch
                                {
                                    DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                    return;
                                }
                            }
                            else if ((Settings.ScaleDevice == "Kilotech") && (Settings.COMPort != "(None)"))
                            {
                                try
                                {
                                    string wt = "";
                                    blGetWeight = false;
                                    if (IsActiveScale1())
                                    {
                                        if (s_wght != 0) wt = s_wght.ToString();

                                        if (wt != "")
                                        {
                                            weightitemid = GeneralFunctions.fnInt32(strID);
                                            weightitemname = strDesc;
                                            weightstring = wt;
                                            weightuom = s_wght_u;
                                            double Tare = 0;
                                            double Tr1 = 0;
                                            double Tr2 = 0;
                                            FetchTare(weightitemid, ref Tr1, ref Tr2);

                                            Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                                            if (blTareEntry)
                                            {
                                                Tare = dblTareEntryValue;
                                            }

                                            if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                            {
                                                if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                {
                                                    SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + s_wght_u, Tare);
                                                }
                                                await AddWeightedItem(GeneralFunctions.fnDouble(refWPrice) / 100);

                                            }
                                            else
                                            {
                                                DocMessage.MsgInformation(Properties.Resources.No_scale_weight);
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            blGetWeight = false;
                                            DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                        return;
                                    }
                                }
                                catch
                                {
                                    DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                    return;
                                }
                            }
                            else if ((Settings.ScaleDevice == "Live Weight") && (Settings.COMPort != "(None)"))
                            {
                                weightitemid = GeneralFunctions.fnInt32(strID);
                                weightitemname = strDesc;
                                await AddWeightedItem(GeneralFunctions.fnDouble(refWPrice) / 100);
                            }
                            else if (Settings.ScaleDevice == "XEPOS")
                            {
                                string strfilename = "";
                                strfilename = System.AppDomain.CurrentDomain.BaseDirectory;
                                if (strfilename.EndsWith("\\"))
                                {
                                    strfilename = strfilename + "Weight.exe";
                                }
                                else
                                {
                                    strfilename = strfilename + "\\Weight.exe";
                                }
                                if (!System.IO.File.Exists(strfilename)) return;
                                blopenweight = true;
                                weightcallfrom = "FromSKU";

                                weightitemid = GeneralFunctions.fnInt32(strID);
                                weightitemname = strDesc;

                                Process p = new Process();
                                p.StartInfo.FileName = strfilename;
                                p.Start();
                            }
                            else
                            {

                                dtblPOS.Rows.Add(new object[]
                                      { strID,strDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                        GeneralFunctions.fnDouble(refWPrice)/100,(GeneralFunctions.fnDouble(refWPrice)/100).ToString(),
                                        Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refWPrice)/100).ToString(),
                                       "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                       "0","0","0","","","","0","0","0","N","N","N",
                                       strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                       dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                       MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                       "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      GeneralFunctions.fnDouble(refWPrice)/100,
                                        Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refWPrice)/100).ToString(),refUOM,"","","","","N"});
                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), (GeneralFunctions.fnDouble(refWPrice) / 100).ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);


                            if (Settings.PriceLevelForOneTime == "Y")
                            {
                                Settings.PriceLevelForOneTime = "N";
                                intUsePriceLevel = Settings.UsePriceLevel;
                            }
                            blScan = true;
                            SetCartDisplay();
                            gridControl1.ItemsSource = dtblPOS;
                            ToggleWithEmptyCart();
                            gridView1.FocusedRowHandle = (gridControl1.ItemsSource as DataTable).Rows.Count - 1;
                            GeneralFunctions.SetFocus(txtSKU);
                        }
                    }
                    else
                    {
                        blScan = true;
                        SetCartDisplay();
                        gridControl1.ItemsSource = dtblPOS;
                        ToggleWithEmptyCart();
                        gridView1.FocusedRowHandle = intfocusrow;
                        GeneralFunctions.SetFocus(txtSKU);
                    }
                }
            }

            if (strCurrentServiceType == "Rent")
            {
                if (!blfinddata)
                {
                    if (refType == "U")
                    {
                        if (refRentPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc + " * " + strUOMDesc, dblRentValue);
                            if (promptPrice == -99999) return;

                            dtblPOS.Rows.Add(new object[]
                                        { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                          promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice),
                                          strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                          0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                          promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice),refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, intPressQty.ToString(), promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                          { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),
                                            dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),
                                            strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0, 0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, intPressQty.ToString(), strUOMPrice,
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else if (refType == "M")
                    {
                        if (refRentPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, dblRentValue);
                            if (promptPrice == -99999) return;

                            dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                             promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice),
                                            "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                            "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0, 0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice),refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                                { strID,strDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),
                                                  dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),
                                                  "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                                  "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                                  strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                  dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                  0,0,0,0,0,0,0,0,0, 0,"","",0,0,0,"",
                                                  "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                  dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else if (refType == "E")
                    {
                        if (refRentPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, dblRentValue);
                            if (promptPrice == -99999) return;
                            dtblPOS.Rows.Add(new object[]
                                          { strID,strDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),
                                            promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice),
                                            strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice),refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                            { strID, strDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                              dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),
                                              strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0, 0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else
                    {
                        if (refRentPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, dblRentValue);
                            if (promptPrice == -99999) return;
                            dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),
                                              promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice),
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              promptPrice.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice),refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                          dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), refPrice,
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    if (Settings.PriceLevelForOneTime == "Y")
                    {
                        Settings.PriceLevelForOneTime = "N";
                        intUsePriceLevel = Settings.UsePriceLevel;
                    }
                    blScan = true;
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = (gridControl1.ItemsSource as DataTable).Rows.Count - 1;
                    GeneralFunctions.SetFocus(txtSKU);
                }
                else
                {
                    blScan = true;
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = intfocusrow;
                    GeneralFunctions.SetFocus(txtSKU);
                }

                int rwindx = -1;
                foreach (DataRowView drv in dtblPOS.DefaultView)
                {
                    rwindx++;
                    if ((drv["ITEMINDEX"].ToString() == "1") && (drv["SERVICE"].ToString() == "Rent"))
                    {
                        gridControl1.SetCellValue(rwindx, colProduct, drv["PRODUCT"].ToString().Replace("\n", "") + "\n");
                    }
                }
            }


            if (strCurrentServiceType == "Repair")
            {
                if (!blfinddata)
                {
                    if (refRepairPromptTag == "Y")
                    {
                        frmPOSRepairItemInfoDlg frm_POSRepairItemInfoDlg = new frmPOSRepairItemInfoDlg();
                        try
                        {
                            blurGrid.Visibility = Visibility.Visible;
                            frm_POSRepairItemInfoDlg.ShowDialog();
                            blurGrid.Visibility = Visibility.Collapsed;
                            if (frm_POSRepairItemInfoDlg.DialogResult == true)
                            {
                                strRepairItemTag = frm_POSRepairItemInfoDlg.RepairItemTag;
                                strRepairItemSlNo = frm_POSRepairItemInfoDlg.RepairItemSlNo;
                                if (frm_POSRepairItemInfoDlg.RepairItemPurchaseDate == Convert.ToDateTime(null)) strRepairItemPurchaseDate = "";
                                else strRepairItemPurchaseDate = frm_POSRepairItemInfoDlg.RepairItemPurchaseDate.ToString("d");
                            }
                            else return;
                        }
                        finally
                        {
                        }
                    }

                    if (refType == "U")
                    {
                        if (refRepairPromptAmt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc + " * " + strUOMDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;

                            dtblPOS.Rows.Add(new object[]
                                        { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                          promptPrice,refNPrice,promptPrice,
                                          strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                          promptPrice,promptPrice,refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, intPressQty.ToString(), promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                          { strID, strDesc + " * " + strUOMDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),
                                            refPrice,refNPrice,refPrice,
                                            strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            refPrice,refPrice,refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc + " * " + strUOMDesc, intPressQty.ToString(), strUOMPrice,
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else if (refType == "M")
                    {
                        if (refRepairPromptAmt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;

                            dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                             refPrice,refNPrice,refPrice,
                                            "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                            "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            refPrice,refPrice,refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                                { strID,strDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),
                                                  refRepairAmt,refRepairAmt,refRepairAmt,
                                                  "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                                  "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                                  strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                  dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                  0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                                  "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                  refRepairAmt,refRepairAmt,refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else if (refType == "E")
                    {
                        if (refRepairPromptAmt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;
                            dtblPOS.Rows.Add(new object[]
                                          { strID,strDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),
                                            promptPrice,refNPrice,promptPrice,
                                            strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",
                                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                            0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,promptPrice,refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                            { strID, strDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                              refPrice,refNPrice,refPrice,
                                              strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,refPrice,refUOM,"","","","","N"});

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else
                    {
                        if (refRepairPromptAmt == "Y")
                        {
                            double promptPrice = GetPromptPrice(strDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;
                            dtblPOS.Rows.Add(new object[]
                                            { strID,strDesc,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),
                                              promptPrice,refPrice,promptPrice, "0","0","0",
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),
                                              promptPrice.ToString(),dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,
                                              strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,promptPrice,refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[]
                                        { strID,strDesc,refType,refOHQty,refNQty,refCost, intPressQty.ToString(),
                                          refPrice,refNPrice,refPrice,
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                          dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                          0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                          "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                          refPrice,refPrice,refUOM,"","","","","N"});
                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(strDesc, intPressQty.ToString(), refPrice,
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    if (Settings.PriceLevelForOneTime == "Y")
                    {
                        Settings.PriceLevelForOneTime = "N";
                        intUsePriceLevel = Settings.UsePriceLevel;
                    }
                    blScan = true;
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = (gridControl1.ItemsSource as DataTable).Rows.Count - 1;
                    GeneralFunctions.SetFocus(txtSKU);
                }
                else
                {
                    blScan = true;
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = intfocusrow;
                    GeneralFunctions.SetFocus(txtSKU);
                }
            }

            // Automatic Discount Add in Cart
            if (strCurrentServiceType == "Sales") await AddAutoDiscountInCart(GeneralFunctions.fnInt32(strID), SaleID > 0 ? false : true);

            await AddAutoFeesInCart(GeneralFunctions.fnInt32(strID));
            // Automatic Discount Add in Cart

            //  Automatic MixnMatch
            if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();

            SetCartDisplay();
            gridControl1.ItemsSource = dtblPOS;
            ToggleWithEmptyCart();
            //gridControl1.RefreshData();
        }

        /// Add Embedded Item into Cart
        private async Task AddSKURecordForEmbeddedProduct(string SKU, bool WFlag, double WPrice)
        {
            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                //SecondMonitor.ClearWeightInfo();
            }

            if (strCurrentServiceType == "Sales")
            {
                if ((blReturnItem) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blReturnItem) && (dtblPOS.Rows.Count == 0))
                {
                    blReturnItem = false;
                }
            }



            string strID = "";
            string strDesc = "";
            string strPrice = "";
            string strSKU = "";
            string refWPrice = WPrice.ToString();
            string refSKU = "";
            bool refWFlag = false;
            string line1 = "";
            string line2 = "";

            strSKU = SKU;
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            DataTable dtbl = objProduct.ShowSKURecord(strSKU.Trim());
            foreach (DataRow dr in dtbl.Rows)
            {
                strID = dr["ID"].ToString();
                strDesc = dr["Description"].ToString();
                strPrice = dr["PriceA"].ToString();
            }
            dtbl.Dispose();

            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";
            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";
            string refRentPrompt = "";

            int MixMatchID = 0;
            string MixMatchFlag = "N";
            string MixMatchCat = "";
            string MixMatchType = "";
            double MixMatchVal = 0;
            int MixMatchPlus = 0;
            double MixMatchPartPrice = 0;
            bool MixMatchApplicableLast = false;

            int SaleID = 0;
            double SalePrice = 0;


            double dqty = 0;

            int iAge = 0;

            string refUOM = "";
            string refExpiry = "";
            FetchProduct(GeneralFunctions.fnInt32(strID), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                            ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI, ref refRentHR,
                            ref refRentHDY, ref refRentDY, ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt,
                            ref refRentPrompt, ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

            if (refType == "W")
            {
                if (strCurrentServiceType == "Sales")
                {
                    FetchActiveSale(GeneralFunctions.fnInt32(strID), ref SaleID, ref SalePrice);
                    if (SaleID > 0)
                    {
                        dqty = (GeneralFunctions.fnDouble(refWPrice) / 100) / SalePrice;
                        if (Double.IsInfinity(dqty))
                        {
                            dqty = 0;
                        }
                        strPrice = SalePrice.ToString("f");
                    }
                    else
                    {
                        dqty = (GeneralFunctions.fnDouble(refWPrice) / 100) / GeneralFunctions.fnDouble(strPrice);

                        if (Double.IsInfinity(dqty))
                        {
                            dqty = 0;
                        }

                    }
                }
            }
            else
            {
                return;
            }

            if (strCurrentServiceType == "Rent")
            {
                if ((blRentRecall) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blRentRecall) && (dtblPOS.Rows.Count == 0))
                {
                    blRentRecall = false;
                    blRentIssued = true;
                }
                else if ((refType == "S") || (refType == "W")) return;
            }
            if (strCurrentServiceType == "Repair")
            {
                if (refType == "W") return;
            }

            if (Settings.POSIDRequired == "Y")
            {
                if (GeneralFunctions.fnInt32(refAge) > 0)
                {
                    iAge = GeneralFunctions.fnInt32(refAge);
                    if (!AgeCheck(DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)))) return;
                    //if (new MessageBoxWindow().Show(Properties.Resources."Minimum Age ", "frmPOSN_msg_MinimumAge") + refAge + Properties.Resources." : Birthday on or before ", "frmPOSN_msg_Birthdayonorbefore") + DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)).ToString("MM/dd/yyyy"), Properties.Resources."Age Verification", "frmPOSN_msg_AgeVerification"), MessageBoxButton.OKCancel, MessageBoxImage.Information) == DialogResult.Cancel) return;
                }
            }

            // if exist then update


            string strselectid = strID;


            int Qty = GeneralFunctions.fnInt32(intPressQty);

            string strMatxOID = "";
            string strMatxOV1 = "";
            string strMatxOV2 = "";
            string strMatxOV3 = "";

            bool blExit = false;

            if (!CheckStock(GeneralFunctions.fnInt32(strselectid), 1, strMatxOID, strMatxOV1, strMatxOV2, strMatxOV3))
            {
                new MessageBoxWindow().Show(Properties.Resources.No_Stock_available_, Properties.Resources.Stock_Validation, MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            string strRentType = "NA";
            double dblRentDuration = 0;
            double dblRentValue = 0;
            double dblRentDeposit = 0;

            if (strCurrentServiceType == "Rent")
            {
                if (!blRentRecall)
                {
                    frmPOSRentalSelectDlg frmrentsel = new frmPOSRentalSelectDlg();
                    try
                    {
                        frmrentsel.PID = GeneralFunctions.fnInt32(strID);
                        blurGrid.Visibility = Visibility.Visible;
                        frmrentsel.ShowDialog();
                        blurGrid.Visibility = Visibility.Collapsed;
                        if (frmrentsel.DialogResult == true)
                        {
                            strRentType = frmrentsel.RentType;
                            dblRentDuration = frmrentsel.RentDuration;
                            dblRentValue = frmrentsel.RentValue;
                            dblRentDeposit = frmrentsel.RentDeposit;
                        }
                        else blExit = true;
                    }
                    finally
                    {
                    }
                    if (blExit) return;
                }
            }

            // 

            string strRepairItemTag = "";
            string strRepairItemSlNo = "";
            string strRepairItemPurchaseDate = "";


            if (strCurrentServiceType == "Sales")
            {
                dtblPOS.Rows.Add(new object[]
                                      { strID,strDesc,refType,refOHQty,refNQty,refCost, dqty.ToString("f3"),
                                        strPrice,strPrice,
                                        (GeneralFunctions.fnDouble(refWPrice)/ 100).ToString(),
                                       "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                       "0","0","0","","","","0","0","0","N","N","N",
                                       strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                       dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                       MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                       "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                         strPrice,
                                        (GeneralFunctions.fnDouble(refWPrice)/ 100).ToString(),refUOM,"","","","","N"});

                line1 = "";
                line2 = "";
                RearrangeCartItemTextBeforePoleDisplay(strDesc, dqty.ToString("f3"), (GeneralFunctions.fnDouble(refWPrice) / 100).ToString(),
                ref line1, ref line2);
                DisplayPoleText(2, "N", "N", line1, line2);


                if (Settings.PriceLevelForOneTime == "Y")
                {
                    Settings.PriceLevelForOneTime = "N";
                    intUsePriceLevel = Settings.UsePriceLevel;
                }
                blScan = true;
                SetCartDisplay();
                gridControl1.ItemsSource = dtblPOS;
                ToggleWithEmptyCart();
                gridView1.FocusedRowHandle = (gridControl1.ItemsSource as DataTable).Rows.Count - 1;
                GeneralFunctions.SetFocus(txtSKU);
            }


            if (strCurrentServiceType == "Sales") await AddAutoDiscountInCart(GeneralFunctions.fnInt32(strID), SaleID > 0 ? false : true);

            await AddAutoFeesInCart(GeneralFunctions.fnInt32(strID));

            //  Automatic MixnMatch
            if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();

            //gridControl1.RefreshData();

            // Automatic Discount Add in Cart
        }

        /// Check Duplicate Weghted item
        private int IfExistsWeightedSKU(string SKU)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objProduct.DuplicateWeightedCount(SKU);
        }

        /// Check if Weighted Item
        private void IsWeighedItem(string inpSKU, ref bool wfalg, ref string wSKU, ref string wPrice)
        {
            // 03-15-2013    Add both UPC A and EAN 13 barcode
            wfalg = false;
            if ((Settings.NotReadBarcodeCheckDigit == "N" ? ((inpSKU.Length == 12) || (inpSKU.Length == 13)) : ((inpSKU.Length == 11) || (inpSKU.Length == 12))) && (inpSKU.Trim().Substring(0, 1) == Settings.EmbeddedBarcodeNumberSystemChar)) //&& (inpSKU.Trim().Substring(0, 1) == "2")
            {
                string tempSKU = inpSKU.Substring(1, 5);
                string tempPrice = "";

                if (inpSKU.Length == (Settings.NotReadBarcodeCheckDigit == "N" ? 12 : 11)) tempPrice = inpSKU.Substring(7, 4);
                if (inpSKU.Length == (Settings.NotReadBarcodeCheckDigit == "N" ? 13 : 12)) tempPrice = inpSKU.Substring(7, 5);

                wPrice = tempPrice;
                if (IfExistsWeightedSKU(tempSKU) == 1)
                {
                    wfalg = true;
                    wSKU = tempSKU;
                    return;
                }
                else
                {
                    if (tempSKU.Substring(0, 1) == "0")
                    {
                        if (IfExistsWeightedSKU(tempSKU.Substring(1, 4)) == 1)
                        {
                            wfalg = true;
                            wSKU = tempSKU.Substring(1, 4);
                            return;
                        }
                    }
                    if (tempSKU.Substring(0, 2) == "00")
                    {
                        if (IfExistsWeightedSKU(tempSKU.Substring(2, 3)) == 1)
                        {
                            wfalg = true;
                            wSKU = tempSKU.Substring(2, 3);
                            return;
                        }
                    }
                    if (tempSKU.Substring(0, 3) == "000")
                    {
                        if (IfExistsWeightedSKU(tempSKU.Substring(3, 2)) == 1)
                        {
                            wfalg = true;
                            wSKU = tempSKU.Substring(3, 2);
                            return;
                        }
                    }
                    if (tempSKU.Substring(0, 4) == "0000")
                    {
                        if (IfExistsWeightedSKU(tempSKU.Substring(4, 1)) == 1)
                        {
                            wfalg = true;
                            wSKU = tempSKU.Substring(4, 1);
                            return;
                        }
                    }
                }
            }
            else
            {
                wfalg = false;
                wSKU = inpSKU;
                wPrice = "0";
            }
        }
        public void PopulateCustomerStores()
        {
            PosDataObject.Customer objCustomer = new PosDataObject.Customer();
            objCustomer.Connection = SystemVariables.Conn;
            DataTable dbtblCust = new DataTable();
            dbtblCust = objCustomer.FetchLookupCustomerStore();
            cmbStore.Items.Clear();
            foreach (DataRow dr in dbtblCust.Rows)
            {
                cmbStore.Items.Add(dr["IssueStore"].ToString());
            }
            dbtblCust.Dispose();
            cmbStore.Text = Settings.StoreCode;
        }
        private void FetchMix_n_Match(int iProdID, ref int refMixMatchID, ref string refSetFlag, ref string refDCat,
                                        ref string refDType, ref double refVal, ref int refQty, ref double refPartPrice, ref bool applicableplus)
        {

            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            refMixMatchID = objPOS.ActiveMixNMatch(iProdID);

            if (refMixMatchID > 0)
            {
                PosDataObject.POS objPOS1 = new PosDataObject.POS();
                objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                DataTable dtbl = objPOS1.GetMixNmatchInfo(refMixMatchID);

                foreach (DataRow dr in dtbl.Rows)
                {
                    refDCat = dr["DiscountCategory"].ToString();
                    refDType = dr["DiscountType"].ToString();
                    refVal = dr["DiscountType"].ToString() == "A" ?
                                GeneralFunctions.fnDouble(dr["DiscountAmount"].ToString()) : GeneralFunctions.fnDouble(dr["DiscountPercentage"].ToString());
                    refQty = GeneralFunctions.fnInt32(dr["DiscountPlusQty"].ToString());

                    if (refDCat == "A") // Absolute Pricing
                    {
                        refDType = "X";
                        refVal = GeneralFunctions.fnDouble(dr["AbsolutePrice"].ToString());
                    }


                }

                dtbl.Dispose();

                DataTable dtbl1 = dtblPOS.Clone();

                DataRow[] d = dtblPOS.Select("MIXMATCHID > 0 and MIXMATCHID = " + refMixMatchID);
                foreach (DataRow dr1 in d)
                {
                    dtbl1.ImportRow(dr1);
                }

                bool f = true;

                if (refDCat == "X")
                {
                    refSetFlag = "X";
                }

                if ((refDCat == "N") || (refDCat == "A"))
                {
                    PosDataObject.POS objPOS2 = new PosDataObject.POS();
                    objPOS2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    int cnt = objPOS.GetMixNMatchDetailCount(refMixMatchID);
                    int cnt1 = 0;

                    foreach (DataRow dr in dtbl1.DefaultView.ToTable(false, new string[] { "ID", "MIXMATCHFLAG" }).Rows)
                    {
                        if (dr["MIXMATCHFLAG"].ToString() == "N") cnt1++;
                    }

                    if (cnt1 == refQty - 1)
                    {
                        int t = 0;
                        refSetFlag = "Y";
                        foreach (DataRow dr1 in dtblPOS.Rows)
                        {
                            if ((dr1["MIXMATCHID"].ToString() == refMixMatchID.ToString()) && (dr1["MIXMATCHFLAG"].ToString() == "N"))
                            {
                                if (f)
                                {
                                    MixMatchUnique++;
                                    f = false;
                                }
                                t++;
                                dr1["MIXMATCHFLAG"] = "Y";
                                dr1["MIXMATCHUNIQUE"] = MixMatchUnique.ToString();
                                refPartPrice = refPartPrice + (Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr1["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()));
                                if (t == refQty - 1) break;
                            }
                        }
                    }
                }

                if (refDCat == "P")
                {
                    int cnt1 = 0;

                    DataTable dtbl2 = dtbl1.DefaultView.ToTable(false, new string[] { "ID", "MIXMATCHFLAG" }).Clone();

                    foreach (DataRow dr in dtbl1.DefaultView.ToTable(false, new string[] { "ID", "MIXMATCHFLAG" }).Rows)
                    {
                        //if (dr["MIXMATCHFLAG"].ToString() == "N")
                        //{
                        cnt1++;
                        dtbl2.Rows.Add(new object[] { dr["ID"].ToString(), dr["MIXMATCHFLAG"].ToString() });
                        //}
                    }


                    if ((cnt1 > 0) && (cnt1 >= refQty - 1))
                    {
                        refSetFlag = "Y";
                        int i = 0;
                        foreach (DataRow dr1 in dtblPOS.Rows)
                        {
                            i++;
                            if (f)
                            {
                                MixMatchUnique++;
                                f = false;
                            }

                            if (dr1["MIXMATCHID"].ToString() == refMixMatchID.ToString())
                            {
                                dr1["MIXMATCHFLAG"] = "Y";
                                dr1["MIXMATCHUNIQUE"] = MixMatchUnique.ToString();

                                if (i <= refQty)
                                {
                                    refPartPrice = refPartPrice + (Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr1["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr1["GPRICE"].ToString())); ;
                                }
                                if (cnt1 >= refQty)
                                {
                                    applicableplus = true;
                                }
                            }
                        }
                    }

                    /*if ((cnt1 > 0) && (cnt1 + 1 > refQty))

                    foreach (DataRow dr in dtbl1.Rows)
                    {
                        if ((GeneralFunctions.fnInt32(dr["ID"].ToString()) != iProdID) && (dr["MIXMATCHFLAG"].ToString() == "N")) cnt1++;
                        if ((GeneralFunctions.fnInt32(dr["ID"].ToString()) == iProdID) && (GeneralFunctions.fnInt32(dr["MIXMATCHID"].ToString()) > 0))
                            cnt1 = cnt1 + GeneralFunctions.fnInt32(dr["QTY"].ToString());
                    }
                    if ((cnt1 > 0) && (cnt1+1 > refQty))
                    {
                        refSetFlag = "Y";
                        foreach (DataRow dr1 in dtblPOS.Rows)
                        {
                            if ((dr1["MIXMATCHID"].ToString() == refMixMatchID.ToString()) && (dr1["MIXMATCHFLAG"].ToString() == "N")
                                && (GeneralFunctions.fnInt32(dr1["ID"].ToString()) == iProdID))
                            {
                                if (f)
                                {
                                    MixMatchUnique++;
                                    f = false;
                                }

                                dr1["MIXMATCHFLAG"] = "Y";
                                dr1["MIXMATCHUNIQUE"] = MixMatchUnique.ToString();
                                refPartPrice = refPartPrice + GeneralFunctions.fnDouble(dr1["PRICE"].ToString());
                            }
                        }
                    }*/
                }
            }
        }
        private bool AgeCheck(DateTime dtDOB)
        {
            DateTime dtToCompare = new DateTime(dtDOB.Year, dtDOB.Month, dtDOB.Day, 0, 0, 0);
            bool bProceed = false;
            if (dtCustomerDOB == Convert.ToDateTime(null))
            {
                if (intCustID > 0)
                {
                    PosDataObject.POS objpos = new PosDataObject.POS();
                    objpos.Connection = SystemVariables.Conn;
                    string custdate = objpos.GetCustomerDOB(intCustID);
                    if (custdate == "") bProceed = true;
                    else
                    {
                        if (GeneralFunctions.fnDate(custdate) > dtToCompare) bProceed = true;
                    }
                }
                else
                {
                    bProceed = true;
                }
            }
            else
            {
                if (dtCustomerDOB > dtToCompare) bProceed = true;
            }

            if (bProceed)
            {
                DateTime dtEntered = Convert.ToDateTime(null);

                frm_Calendar frm = new frm_Calendar();
                try
                {
                    frm.iscallforAge = true;
                    frm.PassingValue = dtToCompare.ToString();
                    blurGrid.Visibility = Visibility.Visible;
                    frm.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm.DialogResult == true)
                    {
                        dtEntered = frm.caldate;
                    }
                }
                finally
                {

                }

                if (dtEntered == Convert.ToDateTime(null)) return false;
                else
                {
                    if (dtEntered <= dtToCompare)
                    {
                        dtCustomerDOB = dtEntered;
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            else
            {
                return true;
            }
        }
        private async Task SelectLoadItemMixMatch(int RecordID, string RecordDesc)
        {
            bool blExit = false;
            string line1 = "";
            string line2 = "";
            int intRowID = 0;

            intRowID = RecordID;

            bool blfinddata = false;
            string strselectid = RecordID.ToString();
            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";
            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";
            string refRentPrompt = "";

            int MixMatchID = 0;
            string MixMatchFlag = "N";
            string MixMatchCat = "";
            string MixMatchType = "";
            double MixMatchVal = 0;
            int MixMatchPlus = 0;
            double MixMatchPartPrice = 0;
            bool MixMatchApplicableLast = false;

            int SaleID = 0;
            int iAge = 0;
            double SalePrice = 0;

            string refUOM = "";
            string refExpiry = "";
            FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                        ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY,
                        ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt, ref refRentPrompt, ref refRepairAmt,
                        ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

            if ((refType == "P") || (refType == "M") || (refType == "K") || (refType == "U") || (refType == "W") || (refType == "E")
                        || (refType == "F") || (refType == "S") || (refType == "T"))
            {
                if (strCurrentServiceType == "Sales")
                {
                    FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref SaleID, ref SalePrice);
                    if (SalePrice == 0)
                    {
                        FetchMix_n_Match(GeneralFunctions.fnInt32(strselectid), ref MixMatchID, ref MixMatchFlag, ref MixMatchCat, ref MixMatchType,
                                            ref MixMatchVal, ref MixMatchPlus, ref MixMatchPartPrice, ref MixMatchApplicableLast);

                        // MixMatchFlag = N / Y - Not Applicable / Applicale
                        // MixMatchCat = N / P / A - Normal Pricing / Plus Pricing / Absolute Pricing
                        // MixMatchType = P/A/X - % off / Amount off / Absolute
                    }
                }
            }

            if (Settings.POSIDRequired == "Y")
            {
                if (GeneralFunctions.fnInt32(refAge) > 0)
                {
                    iAge = GeneralFunctions.fnInt32(refAge);
                    if (!AgeCheck(DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)))) return;
                    //if (new MessageBoxWindow().Show(Properties.Resources."Minimum Age ","frmPOSN_msg_MinimumAge") + refAge + Properties.Resources." : Birthday on or before ","frmPOSN_msg_Birthdayonorbefore") + DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)).ToString("MM/dd/yyyy"), Properties.Resources."Age Verification","frmPOSN_msg_AgeVerification"), MessageBoxButton.OKCancel, MessageBoxImage.Information) == DialogResult.Cancel) return;
                }
            }
            string strUOMCount = "";
            string strUOMPrice = "";
            string strUOMDesc = "";

            string strMatxOID = "";
            string strMatxOV1 = "";
            string strMatxOV2 = "";
            string strMatxOV3 = "";
            string strSLID = "0";

            if (refType == "U")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {

                    frm_POSProductAddnDlg.ProductType = "Unit of Measure";
                    frm_POSProductAddnDlg.PID = intRowID;
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Unit_of_Measure_Data__ + " " + RecordDesc;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strUOMCount = frm_POSProductAddnDlg.UOMCount;
                        strUOMPrice = frm_POSProductAddnDlg.UOMPrice;
                        strUOMDesc = frm_POSProductAddnDlg.UOMDesc;
                    }
                    else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }

            if (refType == "M")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {

                    frm_POSProductAddnDlg.ProductType = "Matrix";
                    frm_POSProductAddnDlg.PID = intRowID;
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Matrix_Data__ + " " + RecordDesc;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strMatxOID = frm_POSProductAddnDlg.MatrixOID;
                        strMatxOV1 = frm_POSProductAddnDlg.MatrixOV1;
                        strMatxOV2 = frm_POSProductAddnDlg.MatrixOV2;
                        strMatxOV3 = frm_POSProductAddnDlg.MatrixOV3;
                    }
                    else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }

            if (refType == "E")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {

                    frm_POSProductAddnDlg.ProductType = "Serialized";
                    frm_POSProductAddnDlg.dtblS = dtblPOS;
                    frm_POSProductAddnDlg.PID = intRowID;
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Serialized_Data__ + " " + RecordDesc;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strSLID = frm_POSProductAddnDlg.SLID;
                    }
                    else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }

            // get Rental data //

            string strRentType = "NA";
            double dblRentDuration = 0;
            double dblRentValue = 0;
            double dblRentDeposit = 0;

            if (strCurrentServiceType == "Rent")
            {
                if (!blRentRecall)
                {
                    frmPOSRentalSelectDlg frmrentsel = new frmPOSRentalSelectDlg();
                    try
                    {

                        frmrentsel.PID = intRowID;
                        blurGrid.Visibility = Visibility.Visible;
                        frmrentsel.ShowDialog();
                        blurGrid.Visibility = Visibility.Collapsed;
                        if (frmrentsel.DialogResult == true)
                        {
                            strRentType = frmrentsel.RentType;
                            dblRentDuration = frmrentsel.RentDuration;
                            dblRentValue = frmrentsel.RentValue;
                            dblRentDeposit = frmrentsel.RentDeposit;
                        }
                        else blExit = true;
                    }
                    finally
                    {
                    }
                    if (blExit) return;
                }
            }

            // 

            string strRepairItemTag = "";
            string strRepairItemSlNo = "";
            string strRepairItemPurchaseDate = "";

            int intfocusrow = 0;
            double dblRate = 0;
            double dblPrice = 0;

            //if (strCurrentServiceType != "Repair")
            //{
            if (!CheckStock(GeneralFunctions.fnInt32(strselectid), 1, strMatxOID, strMatxOV1, strMatxOV2, strMatxOV3))
            {
                new MessageBoxWindow().Show(Properties.Resources.No_Stock_available_, Properties.Resources.Stock_Validation, MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }




            if (!blfinddata)
            {
                if (strCurrentServiceType == "Sales")
                {
                    if (SaleID > 0)
                    {
                        refPrompt = "N";
                        refPrice = SalePrice.ToString();
                        if (refType == "U") strUOMPrice = SalePrice.ToString();
                    }

                    if (refType == "U")
                    {
                        if (refPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(RecordDesc + " * " + strUOMDesc,
                                                                 GeneralFunctions.fnDouble(strUOMPrice));

                            if (promptPrice == -99999) return;

                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                            {
                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc + " * " + strUOMDesc,refType,refOHQty,
                                              refNQty,refCost,1,promptPrice,refNPrice,Convert.ToDecimal(1*promptPrice),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(1*promptPrice),refUOM,"","","","","N"});
                            }
                            else
                            {
                                double discntamt = 0;
                                string damt = "0";
                                double newpretaxamt = 0;
                                string amtstr = "";
                                if (MixMatchCat == "N")  // Normal Pricing
                                {
                                    discntamt = 0;
                                    discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                }

                                if (MixMatchCat == "P")  // Plus Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    damt = (promptPrice - newpretaxamt).ToString("f");
                                }

                                if (MixMatchCat == "A")  // Absolute Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                    damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                    amtstr = "";
                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                }


                                string linetxt = "";
                                linetxt = RecordDesc + " * " + strUOMDesc + "\n";

                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,
                                              refNQty,refCost,1,promptPrice,refNPrice,Convert.ToDecimal(1*newpretaxamt),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(1*newpretaxamt),refUOM,"","","","","N"});
                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(RecordDesc + " * " + strUOMDesc, "1",
                            promptPrice.ToString(), ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                            {
                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc+ " * "+ strUOMDesc,refType,refOHQty,
                                              refNQty,refCost,1,strUOMPrice,refNPrice,Convert.ToDecimal(1*GeneralFunctions.fnDouble(strUOMPrice)),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              strUOMPrice,Convert.ToDecimal(1*GeneralFunctions.fnDouble(strUOMPrice)),refUOM,"","","","","N"});
                            }
                            else
                            {
                                double discntamt = 0;
                                string damt = "0";
                                double newpretaxamt = 0;
                                string amtstr = "";
                                if (MixMatchCat == "N")  // Normal Pricing
                                {
                                    discntamt = 0;
                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                }

                                if (MixMatchCat == "P")  // Plus Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                }

                                if (MixMatchCat == "A")  // Absolute Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                    damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                    amtstr = "";
                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                }

                                string linetxt = "";
                                linetxt = RecordDesc + " * " + strUOMDesc + "\n";

                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,
                                              refNQty,refCost,1,refPrice,refNPrice,Convert.ToDecimal(1*newpretaxamt),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(1*newpretaxamt),refUOM,"","","","","N"});
                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(RecordDesc + " * " + strUOMDesc, "1", strUOMPrice,
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else if (refType == "M")
                    {
                        if (refPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(RecordDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;

                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                            {
                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              1,promptPrice,refNPrice,Convert.ToDecimal(1*promptPrice),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(1*promptPrice),refUOM,"","","","","N"});
                            }
                            else
                            {
                                double discntamt = 0;
                                string damt = "0";
                                double newpretaxamt = 0;
                                string amtstr = "";
                                if (MixMatchCat == "N")  // Normal Pricing
                                {
                                    discntamt = 0;
                                    discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                }

                                if (MixMatchCat == "P")  // Plus Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    damt = (promptPrice - newpretaxamt).ToString("f");
                                }

                                if (MixMatchCat == "A")  // Absolute Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                    damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                    amtstr = "";
                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                }

                                string linetxt = "";
                                linetxt = RecordDesc + "\n";

                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              1,promptPrice,refNPrice,Convert.ToDecimal(1*newpretaxamt),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(1*newpretaxamt),refUOM,"","","","","N"});
                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(RecordDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                            {
                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,1,
                                              refPrice,refNPrice,Convert.ToDecimal(1*GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(1*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                            }
                            else
                            {
                                double discntamt = 0;
                                string damt = "0";
                                double newpretaxamt = 0;
                                string amtstr = "";
                                if (MixMatchCat == "N")  // Normal Pricing
                                {
                                    discntamt = 0;
                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                }

                                if (MixMatchCat == "P")  // Plus Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                }

                                if (MixMatchCat == "A")  // Absolute Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                    damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                    amtstr = "";
                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                }


                                string linetxt = "";
                                linetxt = RecordDesc + "\n";

                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,1,
                                              refPrice,refNPrice,Convert.ToDecimal(1*newpretaxamt),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(1*newpretaxamt),refUOM,"","","","","N"});
                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(RecordDesc, "1", refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else if (refType == "E")
                    {
                        if (refPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(RecordDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;

                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                            {
                                dtblPOS.Rows.Add(new object[]
                                            {intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              1,promptPrice,refNPrice,Convert.ToDecimal(1*promptPrice),strSLID,"0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(1*promptPrice),refUOM,"","","","","N"});
                            }
                            else
                            {
                                double discntamt = 0;
                                string damt = "0";
                                double newpretaxamt = 0;
                                string amtstr = "";
                                if (MixMatchCat == "N")  // Normal Pricing
                                {
                                    discntamt = 0;
                                    discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                }

                                if (MixMatchCat == "P")  // Plus Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    damt = (promptPrice - newpretaxamt).ToString("f");
                                }

                                if (MixMatchCat == "A")  // Absolute Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                    damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                    amtstr = "";
                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                }

                                string linetxt = "";
                                linetxt = RecordDesc + "\n";

                                dtblPOS.Rows.Add(new object[]
                                            {intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              1,promptPrice,refNPrice,Convert.ToDecimal(1*newpretaxamt),strSLID,"0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(1*newpretaxamt),refUOM,"","","","","N"});
                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(RecordDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                        else
                        {
                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                            {
                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              1,refPrice,refNPrice,Convert.ToDecimal(1*GeneralFunctions.fnDouble(refPrice)),strSLID,"0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(1*GeneralFunctions.fnDouble(refPrice)),"","","","","N"});
                            }
                            else
                            {
                                double discntamt = 0;
                                string damt = "0";
                                double newpretaxamt = 0;
                                string amtstr = "";
                                if (MixMatchCat == "N")  // Normal Pricing
                                {
                                    discntamt = 0;
                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                }

                                if (MixMatchCat == "P")  // Plus Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                }

                                if (MixMatchCat == "A")  // Absolute Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                    damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                    amtstr = "";
                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                }


                                string linetxt = "";
                                linetxt = RecordDesc + "\n";

                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              1,refPrice,refNPrice,Convert.ToDecimal(1*newpretaxamt),strSLID,"0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(1*newpretaxamt),refUOM,"","","","","N"});
                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(RecordDesc, "1", refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }
                    else if (refType == "W")
                    {
                        if (CheckForFixedWeight(intRowID))
                        {
                            weightitemid = intRowID;
                            weightitemname = RecordDesc;
                            await AddFixedWeightedItem();
                        }
                        else
                        {
                            if ((Settings.ScaleDevice == "Datalogic Scale") && (m_posScale != null))
                            {
                                try
                                {
                                    //if (!tmrDL.Enabled) tmrDL.Enabled = true; --Sam

                                    weightitemid = intRowID;
                                    weightitemname = RecordDesc;
                                    weightstring = m_posScale.ReadWeight(20000).ToString();

                                    double Tare = 0;
                                    double Tr1 = 0;
                                    double Tr2 = 0;
                                    FetchTare(weightitemid, ref Tr1, ref Tr2);

                                    Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);
                                    if (blTareEntry)
                                    {
                                        Tare = dblTareEntryValue;
                                    }
                                    if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                    {
                                        SecondMonitor.AddWeightInfo(GeneralFunctions.FormatDoubleForPrint((GeneralFunctions.fnDouble(weightstring) - Tare).ToString("0.###")) + " " + m_posScale.WeightUnit.ToString(), Tare);
                                    }
                                    if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                    {
                                        /*if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                        {
                                            SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + m_posScale.WeightUnit.ToString());
                                        }*/
                                        await AddWeightedItem();

                                    }
                                    else
                                    {
                                        DocMessage.MsgInformation(Properties.Resources.Invalid_scale_weight);
                                        return;
                                    }
                                }
                                catch
                                {
                                    DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                    return;
                                }
                            }
                            else if ((Settings.ScaleDevice == "Kilotech") && (Settings.COMPort != "(None)"))
                            {

                                try
                                {
                                    string wt = "";
                                    blGetWeight = false;
                                    if (IsActiveScale1())
                                    {
                                        if (s_wght != 0) wt = s_wght.ToString();
                                        if (wt != "")
                                        {
                                            weightitemid = intRowID;
                                            weightitemname = RecordDesc;
                                            weightstring = wt;
                                            weightuom = s_wght_u;
                                            double Tare = 0;
                                            double Tr1 = 0;
                                            double Tr2 = 0;
                                            FetchTare(weightitemid, ref Tr1, ref Tr2);

                                            Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);
                                            if (blTareEntry)
                                            {
                                                Tare = dblTareEntryValue;
                                            }
                                            if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                            {
                                                if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                {
                                                    SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + s_wght_u, Tare);
                                                }
                                                await AddWeightedItem();

                                            }
                                            else
                                            {
                                                DocMessage.MsgInformation(Properties.Resources.No_scale_weight);
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            blGetWeight = false;
                                            DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                        return;
                                    }
                                }
                                catch
                                {
                                    DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                    return;
                                }

                            }
                            else if ((Settings.ScaleDevice == "Live Weight") && (Settings.COMPort != "(None)"))
                            {
                                weightitemid = intRowID;
                                weightitemname = RecordDesc;
                                //dtblLiveWeightStable.Rows.Clear();
                                //tmrLW.Enabled = true;
                                await AddWeightedItem();
                            }
                            else if (Settings.ScaleDevice == "XEPOS")
                            {
                                string strfilename = "";
                                strfilename = System.AppDomain.CurrentDomain.BaseDirectory;
                                if (strfilename.EndsWith("\\"))
                                {
                                    strfilename = strfilename + "Weight.exe";
                                }
                                else
                                {
                                    strfilename = strfilename + "\\Weight.exe";
                                }
                                if (!System.IO.File.Exists(strfilename)) return;

                                blopenweight = true;
                                weightcallfrom = "POSItem";

                                weightitemid = intRowID;
                                weightitemname = RecordDesc;

                                Process p = new Process();
                                p.StartInfo.FileName = strfilename;
                                p.Start();
                            }

                            else
                            {
                                bool proceedflag = false;
                                double wqty = 0;
                                double wdisc = 0;
                                string val1 = "";
                                string val2 = "0";
                                string val3 = "0";
                                string val4 = "";
                                string val5 = "";

                                frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                                try
                                {

                                    frm_POSItemDlg.BlankLine = false;
                                    //Todo: frm_POSItemDlg.ParentForm = this;
                                    frm_POSItemDlg.IsEdit = false;
                                    frm_POSItemDlg.ServiceType = strCurrentServiceType;
                                    frm_POSItemDlg.ProductDesc = RecordDesc;
                                    frm_POSItemDlg.Qty = 1;
                                    frm_POSItemDlg.Price = GeneralFunctions.fnDouble(refPrice);
                                    frm_POSItemDlg.Weighted = true;
                                    frm_POSItemDlg.WeightedUOM = refUOM;
                                    blurGrid.Visibility = Visibility.Visible;
                                    frm_POSItemDlg.ShowDialog();
                                    blurGrid.Visibility = Visibility.Collapsed;
                                    if (frm_POSItemDlg.DialogResult == true)
                                    {
                                        proceedflag = true;
                                        wqty = frm_POSItemDlg.Qty;
                                        wdisc = frm_POSItemDlg.Discount;
                                        if (!GeneralFunctions.IsValidScaleWeight_POS(wqty.ToString(), true)) return;
                                        if (blTareEntry)
                                        {
                                            wqty = wqty - dblTareEntryValue;
                                            if (wqty <= 0)
                                            {
                                                new MessageBoxWindow().Show(Properties.Resources.Enter_valid_weight, Properties.Resources.Weight_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                                return;
                                            }
                                        }
                                    }
                                }
                                finally
                                {
                                }
                                if (!proceedflag) return;

                                if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                {
                                    SecondMonitor.AddWeightInfo(GeneralFunctions.fnDouble(wqty).ToString(), 0);
                                }

                                if (wdisc > 0)
                                {
                                    val1 = "A";
                                    val2 = wdisc.ToString();
                                    val3 = wdisc.ToString();
                                    val4 = "9988";
                                    val5 = Properties.Resources.Discount__.Replace("$", SystemVariables.CurrencySymbol) + wdisc.ToString("f");
                                }

                                if (refPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(RecordDesc, GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;

                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),wdisc == 0 ? RecordDesc : RecordDesc + "\n",refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (promptPrice * wqty - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (promptPrice * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }


                                        string linetxt = "";
                                        linetxt = RecordDesc + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),refUOM,"","","","","N"});
                                    }

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(RecordDesc, wqty.ToString(), promptPrice.ToString(),
                                    ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);

                                }
                                else
                                {
                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                            {
                                                intRowID.ToString(),wdisc == 0 ? RecordDesc : RecordDesc + "\n",refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (GeneralFunctions.fnDouble(refPrice) * wqty - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = RecordDesc + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            {
                                                intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),refUOM,"","","","","N"});
                                    }

                                    line1 = "";
                                    line2 = "";

                                    RearrangeCartItemTextBeforePoleDisplay(RecordDesc, wqty.ToString(), refPrice, ref line1, ref line2);

                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }
                        }
                    }
                    else if ((refType == "F") && (Settings.AddGallon == "Y"))
                    {

                        double gl = 0;
                        bool pf = false;
                        frm_POSGallonEntryDlg fgaldlg = new frm_POSGallonEntryDlg();
                        try
                        {
                            blurGrid.Visibility = Visibility.Visible;
                            fgaldlg.ShowDialog();
                            blurGrid.Visibility = Visibility.Collapsed;
                            if (fgaldlg.DialogResult == true)
                            {
                                pf = true;

                                gl = fgaldlg.Gallon;
                            }
                        }
                        finally
                        {
                        }
                        if (!pf) return;


                        if (refPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(RecordDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;

                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                            {
                                dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              gl,promptPrice,refNPrice,Convert.ToDecimal(gl*promptPrice),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                             promptPrice,Convert.ToDecimal(gl*promptPrice),refUOM,"","","","","N"});
                            }
                            else
                            {
                                double discntamt = 0;
                                string damt = "0";
                                double newpretaxamt = 0;
                                string amtstr = "";
                                if (MixMatchCat == "N")  // Normal Pricing
                                {
                                    discntamt = 0;
                                    discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                }

                                if (MixMatchCat == "P")  // Plus Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    damt = (promptPrice - newpretaxamt).ToString("f");
                                }

                                if (MixMatchCat == "A")  // Absolute Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                    damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                    amtstr = "";
                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                }

                                string linetxt = "";
                                linetxt = RecordDesc + "\n";

                                dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              gl,promptPrice,refNPrice,Convert.ToDecimal(gl*newpretaxamt),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(gl*newpretaxamt),refUOM,"","","","","N"});
                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(RecordDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);

                        }
                        else
                        {
                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                            {

                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              gl,refPrice,refNPrice,Convert.ToDecimal(gl*GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(gl*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                            }
                            else
                            {
                                double discntamt = 0;
                                string damt = "0";
                                double newpretaxamt = 0;
                                string amtstr = "";
                                if (MixMatchCat == "N")  // Normal Pricing
                                {
                                    discntamt = 0;
                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                }

                                if (MixMatchCat == "P")  // Plus Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                }

                                if (MixMatchCat == "A")  // Absolute Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                    damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                    amtstr = "";
                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                }

                                string linetxt = "";
                                linetxt = RecordDesc + "\n";

                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              gl,refPrice,refNPrice,Convert.ToDecimal(gl*newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(gl*newpretaxamt).ToString(),refUOM,"","","","","N"});

                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(RecordDesc, "1", refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }


                    }
                    else
                    {
                        if (refPrompt == "Y")
                        {
                            double promptPrice = GetPromptPrice(RecordDesc, GeneralFunctions.fnDouble(refPrice));
                            if (promptPrice == -99999) return;

                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                            {
                                dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              1,promptPrice,refNPrice,Convert.ToDecimal(1*promptPrice),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(1*promptPrice),refUOM,"","","","","N"});
                            }
                            else
                            {
                                double discntamt = 0;
                                string damt = "0";
                                double newpretaxamt = 0;
                                string amtstr = "";
                                if (MixMatchCat == "N")  // Normal Pricing
                                {
                                    discntamt = 0;
                                    discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                }

                                if (MixMatchCat == "P")  // Plus Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    damt = (promptPrice - newpretaxamt).ToString("f");
                                }

                                if (MixMatchCat == "A")  // Absolute Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                    damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                    amtstr = "";
                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                }


                                string linetxt = "";
                                linetxt = RecordDesc + "\n";

                                dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              1,promptPrice,refNPrice,Convert.ToDecimal(1*newpretaxamt),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(1*newpretaxamt),refUOM,"","","","","N"});
                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(RecordDesc, "1", promptPrice.ToString(),
                            ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);

                        }
                        else
                        {
                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X")) // Mix n Match not applicable
                            {

                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              1,refPrice,refNPrice,Convert.ToDecimal(1*GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                             refPrice,Convert.ToDecimal(1*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                            }
                            else
                            {
                                double discntamt = 0;
                                string damt = "0";
                                double newpretaxamt = 0;
                                string amtstr = "";
                                if (MixMatchCat == "N")  // Normal Pricing
                                {
                                    discntamt = 0;
                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                }

                                if (MixMatchCat == "P")  // Plus Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                    amtstr = "";
                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                }

                                if (MixMatchCat == "A")  // Absolute Pricing
                                {
                                    discntamt = 0;
                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                    damt = "0";
                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                    newpretaxamt = 0;
                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                    damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                    amtstr = "";
                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                }

                                string linetxt = "";
                                linetxt = RecordDesc + "\n";

                                dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              1,refPrice,refNPrice,Convert.ToDecimal(1*newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(1*newpretaxamt).ToString(),refUOM,"","","",""
                                            });

                            }

                            line1 = "";
                            line2 = "";
                            RearrangeCartItemTextBeforePoleDisplay(RecordDesc, "1", refPrice, ref line1, ref line2);
                            DisplayPoleText(2, "N", "N", line1, line2);
                        }
                    }

                    if (Settings.PriceLevelForOneTime == "Y")
                    {
                        Settings.PriceLevelForOneTime = "N";
                        intUsePriceLevel = Settings.UsePriceLevel;
                    }
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                    GeneralFunctions.SetFocus(txtSKU);
                }

            }


        }

        private bool CheckStock(int PID, double dbcurrQty, string MOID, string OV1, string OV2, string OV3)
        {

            string cPType = "";
            string cZeroStock = "Y";
            double cQty = 0;
            double AddQty = 0;
            DataTable dtblstk = new DataTable();
            dtblstk = GetGeneralStockData(PID);
            foreach (DataRow dr in dtblstk.Rows)
            {
                cPType = dr["ProductType"].ToString();
                cZeroStock = dr["AllowZeroStock"].ToString();
                cQty = GeneralFunctions.fnDouble(dr["QtyOnHand"].ToString());
            }
            dtblstk.Dispose();
            if (cZeroStock == "Y")
            {
                return true;
            }
            else
            {
                if (cPType == "M") cQty = GetMartixStock(GeneralFunctions.fnInt32(MOID), OV1, OV2, OV3);
                AddQty = PrevQty(PID) + dbcurrQty;

                if (cQty - AddQty < 0) return false;
            }
            return true;
        }
        private double GetPromptPrice(string desc, double price)
        {
            double dblPrice = -99999;
            frmPOSPromptPriceDlg frm_POSPromptPriceDlg = new frmPOSPromptPriceDlg();
            try
            {

                frm_POSPromptPriceDlg.Title.Text = Properties.Resources.Product + " : " + desc;
                frm_POSPromptPriceDlg.Price = price;
                blurGrid.Visibility = Visibility.Visible;
                frm_POSPromptPriceDlg.ShowDialog();
                blurGrid.Visibility = Visibility.Collapsed;
                if (frm_POSPromptPriceDlg.DialogResult == true)
                {
                    dblPrice = frm_POSPromptPriceDlg.Price;
                }
            }
            finally
            {
            }
            return dblPrice;
        }

        private double GetDonationPrice(string desc, double price, string prompt)
        {
            double dblPrice = -99999;
            frm_POSDonationPromptDlg frm_POSPromptPriceDlg = new frm_POSDonationPromptDlg();
            try
            {

                frm_POSPromptPriceDlg.Title.Text = "Donation" + " : " + desc;
                frm_POSPromptPriceDlg.PromptChecked = prompt == "Y";
                frm_POSPromptPriceDlg.Price = price;
                blurGrid.Visibility = Visibility.Visible;
                frm_POSPromptPriceDlg.ShowDialog();
                blurGrid.Visibility = Visibility.Collapsed;
                if (frm_POSPromptPriceDlg.DialogResult == true)
                {
                    dblPrice = frm_POSPromptPriceDlg.Price;
                }
            }
            finally
            {
            }
            return dblPrice;
        }


        private string GetEnrtyTicket()
        {
            string dblPrice = "";
            frm_POSEntryTicketDlg frm_POSPromptPriceDlg = new frm_POSEntryTicketDlg();
            try
            {

                
                
                blurGrid.Visibility = Visibility.Visible;
                frm_POSPromptPriceDlg.ShowDialog();
                blurGrid.Visibility = Visibility.Collapsed;
                if (frm_POSPromptPriceDlg.DialogResult == true)
                {
                    dblPrice = "1234";
                }
            }
            finally
            {
            }
            return dblPrice;
        }

        private string GetUniqueString()
        {
            return Convert.ToString(DateTime.Now.Hour) + Convert.ToString(DateTime.Now.Minute) +
                Convert.ToString(DateTime.Now.Second) + Convert.ToString(DateTime.Now.Millisecond);
        }

        private double calculateitemdiscount(double pr, string dt, double da)
        {
            if (dt == "A") return da; else return pr * da / 100;
        }

        private double calculatemixnmatchpdiscount(double pr, string dt, double da, int pqty)
        {
            if (dt == "A") return pr / pqty; else return pr / pqty;
        }

        private void RearrangeCartItemTextBeforePoleDisplay(string pProduct, string pQty, string pPrice, ref string Line1, ref string Line2)
        {
            string templine2 = "";
            string templine1 = "";
            /*if (pQty != "")
            {
                templine2 = pQty;

            }
            if (pPrice != "")
            {
                if (templine2 != "")
                {
                    templine2 = templine2 + " " + GeneralFunctions.fnDouble(pPrice).ToString("f") + " " + (GeneralFunctions.fnDouble(pPrice) * GeneralFunctions.fnDouble(pQty)).ToString("f") + " ";
                }
                else
                {
                    templine2 = GeneralFunctions.fnDouble(pPrice).ToString("f") + " " + GeneralFunctions.fnDouble(pPrice).ToString("f") + " ";
                }
            }*/

            if (pPrice != "")
            {
                if (pQty != "")
                {
                    templine2 = (GeneralFunctions.fnDouble(pPrice) * GeneralFunctions.fnDouble(pQty)).ToString("f") + " ";
                }
                else
                {
                    templine2 = GeneralFunctions.fnDouble(pPrice).ToString("f") + " ";
                }
            }

            templine2 = "  " + templine2;

            if (pProduct.Length <= 20)
            {
                templine1 = pProduct;
                int i = 20 - templine2.Length;
                string blk = "";
                for (int j = 0; j < i; j++)
                {
                    blk = blk + " ";
                }
                templine2 = blk + templine2;
            }
            else
            {
                templine1 = pProduct.Substring(0, 20);
                string tempstr = pProduct.Substring(20, pProduct.Length - 20);
                int ln1 = templine2.Length;
                int ln2 = tempstr.Length;
                if (ln2 == (20 - ln1))
                {
                    templine2 = tempstr + templine2;
                }
                else if (ln2 < (20 - ln1))
                {
                    int i = 20 - ln2 - ln1;
                    string blk = "";
                    for (int j = 0; j < i; j++)
                    {
                        blk = blk + " ";
                    }
                    templine2 = tempstr + blk + templine2;
                }
                else
                {
                    templine2 = tempstr.Substring(0, (20 - ln1)) + templine2;
                }
            }
            Line1 = templine1;
            Line2 = templine2;
        }

        private bool CheckForFixedWeight(int pID)
        {
            int prcnt = 0;
            PosDataObject.Product objpos1 = new PosDataObject.Product();
            objpos1.Connection = SystemVariables.Conn;
            prcnt = objpos1.GetScaleRecordCountForWeightedItem(pID);
            if (prcnt == 1)
            {
                string val = "";
                val = objpos1.GetWeightedItemType(pID);
                if (val == "Fixed Weight")
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        public async Task AddFixedWeightedItem()
        {
            try
            {
                string line1 = "";
                string line2 = "";
                bool blfinddata = false;
                string strselectid = weightitemid.ToString();
                string refType = "";
                string refOHQty = "";
                string refNQty = "";
                string refPrice = "";
                string refNPrice = "";
                string refCost = "";
                string refPrompt = "";
                string refDP = "";
                string refAge = "";
                string refRentMI = "";
                string refRentHR = "";
                string refRentHDY = "";
                string refRentDY = "";
                string refRentWK = "";
                string refRentMN = "";
                string refRentDeposit = "";
                string refRentMinHR = "";
                string refRentMinAmt = "";
                string refRepairAmt = "";
                string refRepairPromptAmt = "";
                string refRepairPromptTag = "";
                string refRentPrompt = "";
                int SaleID = 0;
                double SalePrice = 0;
                double Tare = 0;

                string refUOM = "";
                string refExpiry = "";
                FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                             ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY,
                             ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt, ref refRentPrompt, ref refRepairAmt,
                             ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

                FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref SaleID, ref SalePrice);

                /*FetchTare(GeneralFunctions.fnInt32(strselectid), ref Tare);

                if (blTareEntry)
                {
                    Tare = dblTareEntryValue;
                    dblTareEntryValue = 0;
                    blTareEntry = false;
                }*/

                if (SaleID > 0)
                {
                    refPrompt = "N";
                    refPrice = SalePrice.ToString();
                }

                if (refPrompt == "Y")
                {
                    double promptPrice = GetPromptPrice(weightitemname, GeneralFunctions.fnDouble(refPrice));
                    if (promptPrice == -99999) return;
                    dtblPOS.Rows.Add(new object[]
                                            { strselectid,weightitemname,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),promptPrice,promptPrice.ToString(),
                                              Convert.ToDecimal(intPressQty  * GeneralFunctions.fnDouble(promptPrice)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,"NA","0",
                                              "0","0","","","",0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",0,
                                              promptPrice,
                                              Convert.ToDecimal(intPressQty  * GeneralFunctions.fnDouble(promptPrice)).ToString(),refUOM,"","","","","N"});
                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(weightitemname, intPressQty.ToString(), promptPrice.ToString(),
                    ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);
                }
                else
                {
                    dtblPOS.Rows.Add(new object[]
                                        { strselectid,weightitemname,refType,refOHQty,refNQty,refCost,intPressQty.ToString(),refPrice,refNPrice,
                                          Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                          0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",0,
                                          refPrice,
                                          Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)).ToString(),refUOM,"","","","","N"});
                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(weightitemname, intPressQty.ToString(), refPrice,
                    ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);

                }

                weightstring = "";
                intPressQty = 1;

                if (Settings.PriceLevelForOneTime == "Y")
                {
                    Settings.PriceLevelForOneTime = "N";
                    intUsePriceLevel = Settings.UsePriceLevel;
                }
                SetCartDisplay();
                gridControl1.ItemsSource = dtblPOS;
                ToggleWithEmptyCart();
                gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                GeneralFunctions.SetFocus(txtSKU);
                /// Automatic Discount Add in Cart
                await AddAutoDiscountInCart(weightitemid, SaleID > 0 ? false : true);
                /// Automatic Fees and Charge Add in Cart
                await AddAutoFeesInCart(weightitemid);

                //  Automatic MixnMatch
                if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();

                GetTotal(); /// Calculate and Display Cart Total
                ShowTax(); /// Calculate and Display Taxes of Cart Items
                ResetQty();  /// Reset Item Quantity

                //gridControl1.RefreshData();
            }
            catch
            {

            }
        }
        private void AddAutoMixNMatch()
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            DataTable dtbl = objPOS.FetchActiveAmountTypeMixNMatch();

            foreach (DataRow dr in dtbl.Rows)
            {


                int refMixMatchID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                string itmdiscname = dr["Name"].ToString() + " applied";
                string itmdisctype = dr["Type"].ToString();
                double itmdiscamt = GeneralFunctions.fnDouble(dr["Value"].ToString());

                DataTable dtbl1 = new DataTable();
                dtbl1 = dtblPOS.Clone();
                dtbl1.Rows.Clear();
                DataRow[] d = null;
                d = dtblPOS.Select("MIXMATCHID > 0 and PRODUCTTYPE <> 'Z' and MIXMATCHID = " + refMixMatchID);
                foreach (DataRow dr1 in d)
                {
                    dtbl1.Rows.Add(dr1.ItemArray);
                }

                double tempval = 0;

                foreach (DataRow dr1 in dtbl1.Rows)
                {
                    tempval = tempval + GeneralFunctions.fnDouble(dr1["PRICE"].ToString());
                }

                dtbl1.Dispose();

                if ((tempval > 0) && (tempval >= GeneralFunctions.fnDouble(dr["CutoffAmount"].ToString())))
                {
                    bool flg = false;
                    foreach (DataRow dr1 in dtblPOS.Rows)
                    {
                        if (dr1["PRODUCTTYPE"].ToString() != "Z") continue;
                        if (dr["ID"].ToString() == dr1["ID"].ToString())
                        {
                            flg = true;
                            break;
                        }
                    }

                    if (!flg)
                    {
                        string amt = "";
                        if (Settings.DecimalPlace == 2) amt = itmdiscamt.ToString("f");
                        if (Settings.DecimalPlace == 3) amt = itmdiscamt.ToString("f3");

                        string amtstr = "";
                        if (itmdisctype == "P")
                            amtstr = " @" + amt + "%" + " on purchase " + GeneralFunctions.fnDouble(dr["CutoffAmount"].ToString()).ToString("f2") + " or more";
                        else
                            amtstr = " - " + SystemVariables.CurrencySymbol + amt + " on purchase " + GeneralFunctions.fnDouble(dr["CutoffAmount"].ToString()).ToString("f2") + " or more";

                        if (Settings.DecimalPlace == 3)
                        {
                            dtblPOS.Rows.Add(new object[] {refMixMatchID.ToString()," " + itmdiscname + amtstr,
                                              "Z","0","0","0",999888777,"99988863777.000","0","99988863777.000","0","0","0","","","",
                                              "",GetUniqueString(),"3","",itmdisctype,amt,"0","0","","9","0","0","0","","","","0","0","0",
                                              "N","N","N",strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              refMixMatchID,"","",0,0,0,"Y","0","","0","0","0","0","","N",0,0,0,tempval,0,"N","N","0","X",++CartSL,"",0,"0","0",""
                            ,"","","","","N"});
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[] {refMixMatchID.ToString(),"  " +itmdiscname + amtstr,
                                              "Z","0","0","0",999888777,"99988863777.000","0","99988863777.000","0","0","0","","","",
                                              "",GetUniqueString(),"2","",itmdisctype,amt,"0","0","","9","0","0","0","","","","0",
                                              "0","0","N","N","N",strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              refMixMatchID,"","",0,0,0,"Y",
                                              "0","","0","0","0","0","","N",0,0,0,tempval,0,"N","N","0","X",++CartSL,"",0,"0","0","","","","","","N"});
                        }

                        int pi = 0;
                        foreach (DataRow drt1 in dtblPOS.Rows)
                        {

                            if (GeneralFunctions.fnInt32(drt1["MIXMATCHID"].ToString()) == refMixMatchID)
                            {
                                pi++;
                                if (pi == 1) MixMatchUnique++;
                                drt1["MIXMATCHFLAG"] = "Y";
                                drt1["MIXMATCHUNIQUE"] = MixMatchUnique;
                                if (drt1["PRODUCTTYPE"].ToString() != "Z") drt1["MIXMATCHLAST"] = "X";
                            }
                        }
                    }

                    if (flg)
                    {
                        foreach (DataRow drt1 in dtblPOS.Rows)
                        {
                            if ((GeneralFunctions.fnInt32(drt1["ID"].ToString()) == refMixMatchID) && (drt1["PRODUCTTYPE"].ToString() == "Z"))
                            {
                                drt1["DTXRATE"] = tempval;
                                break;
                            }
                        }

                        int pi = 0;
                        foreach (DataRow drt1 in dtblPOS.Rows)
                        {

                            if (GeneralFunctions.fnInt32(drt1["MIXMATCHID"].ToString()) == refMixMatchID)
                            {
                                pi++;
                                if (pi == 1) MixMatchUnique++;
                                drt1["MIXMATCHFLAG"] = "Y";
                                drt1["MIXMATCHUNIQUE"] = MixMatchUnique;
                                if (drt1["PRODUCTTYPE"].ToString() != "Z") drt1["MIXMATCHLAST"] = "X";
                            }
                        }
                    }
                }
                else
                {
                    DataRow drTemp = null;
                    foreach (DataRow drt1 in dtblPOS.Rows)
                    {
                        if ((GeneralFunctions.fnInt32(drt1["ID"].ToString()) == refMixMatchID) && (drt1["PRODUCTTYPE"].ToString() == "Z"))
                        {
                            drTemp = drt1;
                            break;
                        }
                    }
                    if (drTemp != null) dtblPOS.Rows.Remove(drTemp);

                    foreach (DataRow drt1 in dtblPOS.Rows)
                    {
                        if (GeneralFunctions.fnInt32(drt1["MIXMATCHID"].ToString()) == refMixMatchID)
                        {
                            drt1["MIXMATCHFLAG"] = "X";
                            drt1["MIXMATCHUNIQUE"] = 0;
                            drt1["MIXMATCHLAST"] = "X";
                        }
                    }
                }

            }
        }
        private async Task AddAutoFeesInCart(int PID)
        {

            /* 
                purpose : Calculate Automatic Fees and Charge applied on the Cart
            */

            string adid = "";

            adid = GetAutoFeesID(PID, "Item");
            if (adid != "")
            {

                int rwindx = -1;
                foreach (DataRowView drv in dtblPOS.DefaultView)
                {
                    if (drv["ITEMINDEX"].ToString() == "1") rwindx++;
                }
                DataTable dtbl = new DataTable();
                PosDataObject.POS objpos = new PosDataObject.POS();
                objpos.Connection = SystemVariables.Conn;
                dtbl = objpos.FetchFees(adid);

                int fid = 0;
                string fnm = "";
                string fty = "";
                string fdchk = "";
                string ftchk = "";
                double fval = 0;
                double fees = 0;
                double feestax = 0;
                double discntamt = 0;
                double taxrate = 0;
                string tx1 = "";
                string fqtychk = "N";

                foreach (DataRow dr in dtbl.Rows)
                {
                    fid = GeneralFunctions.fnInt32(dr["ID"].ToString());
                    fnm = dr["Name"].ToString();
                    fty = dr["Type"].ToString();
                    fval = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                    fdchk = dr["CheckDiscount"].ToString();
                    ftchk = dr["CheckTax"].ToString();
                    fqtychk = dr["CheckQty"].ToString();
                }
                dtbl.Dispose();


                string dlogic = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colDLogic);
                double dval = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colDVal));
                double pr = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ?
                    await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colPrice) :
                    await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colGPrice));
                double disc = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colDisc));

                fees = calculateitemdiscount(pr + disc, fty, fval);

                if (fdchk == "Y")
                {
                    fees = fees - calculateitemdiscount(fees, dlogic, dval);
                }

                if (ftchk == "Y")
                {
                    PosDataObject.POS objpos1 = new PosDataObject.POS();
                    objpos1.Connection = SystemVariables.Conn;
                    objpos.GetFeesTax(fid, ref taxrate, ref tx1);
                    try
                    {
                        if (Settings.TaxInclusive == "N")
                        {
                            feestax = GeneralFunctions.FormatDouble(fees * taxrate / 100);
                        }
                        else
                        {
                            double tempApplicableAmount = fees / ((100 + taxrate) / 100);
                            feestax = GeneralFunctions.FormatDouble(fees - tempApplicableAmount);
                        }
                    }
                    catch
                    {
                        feestax = 0;
                    }

                    if (Settings.TaxInclusive == "Y")
                    {
                        fees = fees - feestax;
                    }
                }

                /*if (fqtychk == "Y")
                {
                    double qty = GeneralFunctions.fnDouble(GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle,gridControl1, colQty));
                    fees = GeneralFunctions.FormatDouble(qty * fees);
                    feestax = GeneralFunctions.FormatDouble(qty * feestax);
                }*/

                discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ?
                    await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colPrice) :
                    await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colGPrice)), fty,
                fval);
                string damt = "0";
                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                double newpretaxamt = 0;
                newpretaxamt = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ?
                    await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colPrice) :
                    await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colGPrice)) - GeneralFunctions.fnDouble(damt);

                string srv = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colService);

                gridControl1.SetFocusedRowCellValue(colFee, fees.ToString("f"));
                gridControl1.SetFocusedRowCellValue(colFeeTax, feestax);
                gridControl1.SetFocusedRowCellValue(colFeeID, fid.ToString());
                gridControl1.SetFocusedRowCellValue(colFeeVal, fval);
                gridControl1.SetFocusedRowCellValue(colFeeType, fty);
                gridControl1.SetFocusedRowCellValue(colFeeTaxRate, taxrate);
                gridControl1.SetFocusedRowCellValue(colFeeQty, fqtychk);

                string amtstr = "";
                if (fty == "P") amtstr = " @" + fval.ToString() + "%";
                else amtstr = " - " + SystemVariables.CurrencySymbol + fval.ToString("0.00");

                gridControl1.SetFocusedRowCellValue(colFeeText, "  " + fnm + amtstr);

                string linetxt = "";
                linetxt = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProduct) + "\n";

                gridControl1.SetFocusedRowCellValue(colProduct, linetxt);
                string tx = "0";
                CalculateTaxAfterLineDiscount(GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colID)).ToString()), newpretaxamt, ref tx);
            }

            adid = "";
            adid = GetAutoFeesID(0, "Ticket");
            if (adid != "")
            {
                DataTable dtbl = new DataTable();
                dtbl.Columns.Add("ID", System.Type.GetType("System.String"));

                string OrginalH = adid;
                char FindH = ',';
                int NumberOfOccurancesH = 0;

                string CopyOrginalH = string.Copy(OrginalH);
                int PlaceH = 0;

                NumberOfOccurancesH = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                int i = 0;
                while (PlaceH != -1)
                {
                    string temp = "";
                    int length = 0;
                    temp = CopyOrginalH.Substring(length, PlaceH);

                    dtbl.Rows.Add(new object[] { temp });
                    length = temp.Length + 1;
                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    NumberOfOccurancesH++;
                    i++;
                }

                foreach (DataRow dr in dtbl.Rows)
                {
                    bool flg = false;
                    foreach (DataRow dr1 in dtblPOS.Rows)
                    {
                        if (dr1["PRODUCTTYPE"].ToString() != "H") continue;
                        if (dr["ID"].ToString() == dr1["ID"].ToString())
                        {
                            flg = true;
                            break;
                        }
                    }
                    if (!flg)
                    {
                        DataTable dtbl2 = new DataTable();
                        PosDataObject.POS objpos = new PosDataObject.POS();
                        objpos.Connection = SystemVariables.Conn;
                        dtbl2 = objpos.FetchFees(dr["ID"].ToString());
                        int fid = 0;
                        string fnm = "";
                        string fty = "";
                        string fdchk = "";
                        string ftchk = "";
                        double fval = 0;
                        double fees = 0;
                        double feestax = 0;
                        double discntamt = 0;
                        double taxrate = 0;
                        string tx1 = "";
                        string fqtychk = "N";

                        foreach (DataRow dr2 in dtbl2.Rows)
                        {
                            fid = GeneralFunctions.fnInt32(dr2["ID"].ToString());
                            fnm = dr2["Name"].ToString();
                            fty = dr2["Type"].ToString();
                            fval = GeneralFunctions.fnDouble(dr2["Amount"].ToString());
                            fdchk = dr2["CheckDiscount"].ToString();
                            ftchk = dr2["CheckTax"].ToString();
                            fqtychk = dr2["CheckQty"].ToString();
                        }
                        dtbl2.Dispose();





                        string amt = "";
                        if (Settings.DecimalPlace == 2) amt = fval.ToString("f");
                        if (Settings.DecimalPlace == 3) amt = fval.ToString("f3");
                        int intSID = fid;

                        string amtstr = "";
                        if (fty == "P")
                        {
                            amtstr = " @" + amt + "%";
                        }
                        else
                        {
                            amtstr = " - " + SystemVariables.CurrencySymbol + fval.ToString("0.00");
                        }

                        if (Settings.DecimalPlace == 3)
                        {
                            dtblPOS.Rows.Add(new object[] {intSID.ToString(),"  " + fnm + amtstr,
                                              "H","0","0","0",999888777,"99988863777.000","0","99988863777.000","0","0","0","","","",
                                              "",GetUniqueString(),"3","",fty,amt,"0","0","","2","0","0","0","","","","0","0","0",
                                              "N","N","N",strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"","0","","0","0","0","0","",ftchk,0,0,0,0,0,"N","N","0","X",++CartSL,"",0,0,0,"","","","","","N"});
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[] {intSID.ToString(),"  " + fnm + amtstr,
                                              "H","0","0","0",999888777,"99988863777.000","0","99988863777.000","0","0","0","","","",
                                              "",GetUniqueString(),"2","",fty,amt,"0","0","","2","0","0","0","","","","0",
                                              "0","0","N","N","N",strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"",
                                              "0","","0","0","0","0","",ftchk,0,0,0,0,0,"N","N","0","X",++CartSL,"",0,0,0,"","","","","","N"});
                        }
                    }
                }
            }
        }

        /// Get Auto Fees and charges ID

        private string GetAutoFeesID(int PID, string pType)
        {
            string ret = "";
            PosDataObject.POS objp1 = new PosDataObject.POS();
            objp1.Connection = SystemVariables.Conn;
            if (pType == "Item")
            {
                objp1.GetAutoFeesNCharges(PID, ref ret);
            }
            int TotalItem = 0;
            if (pType == "Ticket")
            {
                PosDataObject.POS ob1 = new PosDataObject.POS();
                ob1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                ob1.DeleteRecordFromTempDiscount(Settings.TerminalName);
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                        || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "X")
                        || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "H")
                        || (dr["PRODUCTTYPE"].ToString() == "Z")) continue;
                    if (dr["PRICE"].ToString() == "") continue;
                    TotalItem++;

                    PosDataObject.POS ob2 = new PosDataObject.POS();
                    ob2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    ob2.InsertDataIntoTempDiscount(Settings.TerminalName, GeneralFunctions.fnInt32(dr["ID"].ToString()));
                }
                if (TotalItem > 0)
                {
                    PosDataObject.POS objp2 = new PosDataObject.POS();
                    objp2.Connection = SystemVariables.Conn;
                    objp2.GetAutoTicketFeesNCharges(Settings.TerminalName, ref ret);
                }
            }
            return ret;
        }

        private void CalculateTaxAfterLineDiscount(int PID, double PR, ref string TX)
        {
            string str1 = "";
            double txr = 0;
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = new SqlConnection(SystemVariables.ConnectionString);
            objp.GetLineTax(PID, ref txr, ref str1);
            double tmp = 0;
            tmp = PR * txr / 100;
            if (Settings.DecimalPlace == 2) TX = tmp.ToString("f");
            if (Settings.DecimalPlace == 2) TX = tmp.ToString("f3");
        }
        public async Task AddWeightedItem(double pr)
        {
            try
            {
                if (!GeneralFunctions.IsValidScaleWeight_POS(pr.ToString(), true)) return;

                string line1 = "";
                string line2 = "";
                bool blfinddata = false;
                string strselectid = weightitemid.ToString();
                string refType = "";
                string refOHQty = "";
                string refNQty = "";
                string refPrice = "";
                string refNPrice = "";
                string refCost = "";
                string refPrompt = "";
                string refDP = "";
                string refAge = "";
                string refRentMI = "";
                string refRentHR = "";
                string refRentHDY = "";
                string refRentDY = "";
                string refRentWK = "";
                string refRentMN = "";
                string refRentDeposit = "";
                string refRentMinHR = "";
                string refRentMinAmt = "";
                string refRepairAmt = "";
                string refRepairPromptAmt = "";
                string refRepairPromptTag = "";
                string refRentPrompt = "";
                int SaleID = 0;
                double SalePrice = 0;
                double Tare = 0;

                string refUOM = "";
                string refExpiry = "";
                FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                             ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY,
                             ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt, ref refRentPrompt, ref refRepairAmt,
                             ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);


                refPrice = pr.ToString();


                double Tr1 = 0;
                double Tr2 = 0;
                FetchTare(GeneralFunctions.fnInt32(strselectid), ref Tr1, ref Tr2);

                Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                if (blTareEntry)
                {
                    Tare = dblTareEntryValue;
                    dblTareEntryValue = 0;
                    blTareEntry = false;
                }

                if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                {
                    dtblPOS.Rows.Add(new object[]
                                        { strselectid,weightitemname,refType,refOHQty,refNQty,refCost,GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()),refPrice,refNPrice,
                                          Convert.ToDecimal((GeneralFunctions.fnDouble(GeneralFunctions.SetWeightAccuracy(weightstring)) - Tare) * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                          0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",0,
                                          refPrice,
                                          Convert.ToDecimal((GeneralFunctions.fnDouble(GeneralFunctions.SetWeightAccuracy(weightstring)) - Tare) * GeneralFunctions.fnDouble(refPrice)).ToString(),weightuom == ""? refUOM:weightuom, "","","",""});
                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(weightitemname, GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()), refPrice,
                    ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);
                }
                else
                {
                    if (Tare > GeneralFunctions.fnDouble(weightstring))
                    {
                        DocMessage.MsgInformation(Properties.Resources.Tare_Weight_exceeds_Gross_Weight);

                    }
                }
                weightstring = "";
                if (Settings.PriceLevelForOneTime == "Y")
                {
                    Settings.PriceLevelForOneTime = "N";
                    intUsePriceLevel = Settings.UsePriceLevel;
                }
                SetCartDisplay();
                gridControl1.ItemsSource = dtblPOS;
                ToggleWithEmptyCart();
                gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                GeneralFunctions.SetFocus(txtSKU);
                /// Set UP/Down Button to move cursor through Cart Item
                EnableDisableButton(btnUP, btnDown, gridControl1);
                /// Automatic Discount Add in Cart
                await AddAutoDiscountInCart(weightitemid, SaleID > 0 ? false : true);
                /// Automatic Fees and Charge Add in Cart
                await AddAutoFeesInCart(weightitemid);

                //  Automatic MixnMatch
                if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();


                GetTotal(); /// Calculate and Display Cart Total
                ShowTax(); /// Calculate and Display Taxes of Cart Items
                ResetQty();  /// Reset Item Quantity
                //gridControl1.RefreshData();
            }
            catch
            {

            }
        }
        public async Task AddWeightedItem()
        {
            try
            {
                //if (weightitemid == 2346) weightstring = Settings.TestScaleWeight;
                //if (weightitemid == 8955) weightstring = "4.001";
                if (!GeneralFunctions.IsValidScaleWeight_POS(weightstring, true)) return;

                string line1 = "";
                string line2 = "";
                bool blfinddata = false;
                string strselectid = weightitemid.ToString();
                string refType = "";
                string refOHQty = "";
                string refNQty = "";
                string refPrice = "";
                string refNPrice = "";
                string refCost = "";
                string refPrompt = "";
                string refDP = "";
                string refAge = "";
                string refRentMI = "";
                string refRentHR = "";
                string refRentHDY = "";
                string refRentDY = "";
                string refRentWK = "";
                string refRentMN = "";
                string refRentDeposit = "";
                string refRentMinHR = "";
                string refRentMinAmt = "";
                string refRepairAmt = "";
                string refRepairPromptAmt = "";
                string refRepairPromptTag = "";
                string refRentPrompt = "";
                int SaleID = 0;
                double SalePrice = 0;
                double Tare = 0;

                string refUOM = "";
                string refExpiry = "";
                FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                             ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY,
                             ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt, ref refRentPrompt, ref refRepairAmt,
                             ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

                FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref SaleID, ref SalePrice);


                double Tr1 = 0;
                double Tr2 = 0;
                FetchTare(GeneralFunctions.fnInt32(strselectid), ref Tr1, ref Tr2);

                Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                if (blTareEntry)
                {
                    Tare = dblTareEntryValue;
                    dblTareEntryValue = 0;
                    blTareEntry = false;
                }

                if (SaleID > 0)
                {
                    refPrompt = "N";
                    refPrice = SalePrice.ToString();
                }

                if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                {

                    if (refPrompt == "Y")
                    {
                        double promptPrice = GetPromptPrice(weightitemname, GeneralFunctions.fnDouble(refPrice));
                        if (promptPrice == -99999) return;
                        dtblPOS.Rows.Add(new object[]
                                            { strselectid,weightitemname,refType,refOHQty,refNQty,refCost,GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()),promptPrice,promptPrice.ToString(),
                                              Convert.ToDecimal((GeneralFunctions.fnDouble(GeneralFunctions.SetWeightAccuracy(weightstring)) - Tare)  * GeneralFunctions.fnDouble(promptPrice)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,"NA","0",
                                              "0","0","","","",0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",0,
                                              promptPrice,
                                              Convert.ToDecimal((GeneralFunctions.fnDouble(GeneralFunctions.SetWeightAccuracy(weightstring)) - Tare)  * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                              weightuom == ""? refUOM: weightuom,"","","","","N"});
                        line1 = "";
                        line2 = "";
                        RearrangeCartItemTextBeforePoleDisplay(weightitemname, intPressQty.ToString(), promptPrice.ToString(),
                        ref line1, ref line2);
                        DisplayPoleText(2, "N", "N", line1, line2);
                    }
                    else
                    {
                        dtblPOS.Rows.Add(new object[]
                                        { strselectid,weightitemname,refType,refOHQty,refNQty,refCost,GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()),refPrice,refNPrice,
                                          Convert.ToDecimal((GeneralFunctions.fnDouble(GeneralFunctions.SetWeightAccuracy(weightstring)) - Tare) * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                          0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",0,
                                          refPrice,
                                          Convert.ToDecimal((GeneralFunctions.fnDouble(GeneralFunctions.SetWeightAccuracy(weightstring)) - Tare) * GeneralFunctions.fnDouble(refPrice)).ToString(),weightuom == ""? refUOM: weightuom,"","","","","N"});
                        line1 = "";
                        line2 = "";
                        RearrangeCartItemTextBeforePoleDisplay(weightitemname, GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()), refPrice,
                        ref line1, ref line2);
                        DisplayPoleText(2, "N", "N", line1, line2);

                    }
                }
                else
                {
                    if (Tare > GeneralFunctions.fnDouble(weightstring))
                    {
                        DocMessage.MsgInformation(Properties.Resources.Tare_Weight_exceeds_Gross_Weight);
                    }
                }

                weightstring = "";
                if (Settings.PriceLevelForOneTime == "Y")
                {
                    Settings.PriceLevelForOneTime = "N";
                    intUsePriceLevel = Settings.UsePriceLevel;
                }
                SetCartDisplay();
                gridControl1.ItemsSource = dtblPOS;
                ToggleWithEmptyCart();
                gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                GeneralFunctions.SetFocus(txtSKU);
                /// Set UP/Down Button to move cursor through Cart Item
                EnableDisableButton(btnUP, btnDown, gridControl1);
                /// Automatic Discount Add in Cart
                await AddAutoDiscountInCart(weightitemid, SaleID > 0 ? false : true);
                /// Automatic Fees and Charge Add in Cart
                await AddAutoFeesInCart(weightitemid);

                //  Automatic MixnMatch
                if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();

                GetTotal(); /// Calculate and Display Cart Total
                ShowTax(); /// Calculate and Display Taxes of Cart Items
                ResetQty();  /// Reset Item Quantity
                //gridControl1.RefreshData();
            }
            catch
            {

            }
        }
        private bool IsCustomerDiscountApplicable(int pID)
        {
            PosDataObject.POS ops = new PosDataObject.POS();
            ops.Connection = SystemVariables.Conn;
            return ops.IsCustomerDiscountApplicable(pID);
        }
        private string GetAutoDiscountID(string strDiscountType, int PID)
        {
            string ret = "";
            if (strDiscountType == "Item")
            {
                bool fc = false;
                if (intCustID > 0)
                {
                    if (IsCustomerDiscountApplicable(intCustID)) fc = true;
                }
                if (!IsNonDiscountableItem(PID))
                {
                    PosDataObject.POS objp1 = new PosDataObject.POS();
                    objp1.Connection = SystemVariables.Conn;

                    if (!fc) objp1.GetAutoItemDiscount(PID, DateTime.Now, ref ret);
                    if (fc) objp1.GetAutoItemDiscount_Cust(PID, intCustID, DateTime.Now, ref ret);
                }
            }

            if (strDiscountType == "Ticket")
            {
                int TotalItem = 0;
                int NonDiscountableItem = 0;

                PosDataObject.POS ob1 = new PosDataObject.POS();
                ob1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                ob1.DeleteRecordFromTempDiscount(Settings.TerminalName);
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                        || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "X")
                        || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "H")
                        || (dr["PRODUCTTYPE"].ToString() == "Z")) continue;
                    if (dr["PRICE"].ToString() == "") continue;
                    TotalItem++;
                    if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString())))
                    {
                        NonDiscountableItem++;
                        continue;
                    }
                    PosDataObject.POS ob2 = new PosDataObject.POS();
                    ob2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    ob2.InsertDataIntoTempDiscount(Settings.TerminalName, GeneralFunctions.fnInt32(dr["ID"].ToString()));
                }
                if ((TotalItem > 0) && (TotalItem > NonDiscountableItem))
                {
                    bool fc = false;
                    if (intCustID > 0)
                    {
                        if (IsCustomerDiscountApplicable(intCustID)) fc = true;
                    }

                    PosDataObject.POS objp2 = new PosDataObject.POS();
                    objp2.Connection = SystemVariables.Conn;

                    if (!fc) objp2.GetAutoTicketDiscount(Settings.TerminalName, DateTime.Now, ref ret);
                    if (fc) objp2.GetAutoTicketDiscount_Cust(intCustID, Settings.TerminalName, DateTime.Now, ref ret);
                }
            }
            return ret;
        }
        private async Task AddAutoDiscountInCart(int PID, bool ItemDiscount)
        {

            /* 
                purpose : Calculate Automatic Discount applied on the Cart
            */

            string adid = "";
            if (IsNonDiscountableItem(PID)) return;
            if (ItemDiscount) adid = GetAutoDiscountID("Item", PID);
            if (adid != "")
            {

                int rwindx = -1;
                foreach (DataRowView drv in dtblPOS.DefaultView)
                {
                    if (drv["ITEMINDEX"].ToString() == "1") rwindx++;
                }
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colBuyGetFreeHeader)) > 0) return;
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colMixID)) > 0) return;
                DataTable dtbl = new DataTable();
                PosDataObject.POS objpos = new PosDataObject.POS();
                objpos.Connection = SystemVariables.Conn;
                dtbl = objpos.FetchDiscounts(adid);
                int itmdiscid = 0;
                string itmdiscname = "";
                string itmdisctype = "";
                double itmdiscamt = 0;
                foreach (DataRow dr in dtbl.Rows)
                {
                    itmdiscid = GeneralFunctions.fnInt32(dr["ID"].ToString());
                    itmdiscname = dr["Name"].ToString();
                    itmdisctype = dr["Type"].ToString();
                    itmdiscamt = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                }
                dtbl.Dispose();
                string amt = "";
                if (Settings.DecimalPlace == 2) amt = itmdiscamt.ToString("f");
                if (Settings.DecimalPlace == 3) amt = itmdiscamt.ToString("f3");
                int intSID = itmdiscid;

                double discntamt = 0;
                discntamt = calculateitemdiscount(
                    GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ?
                    await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colPrice) :
                    await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colGPrice)),
                                                  itmdisctype, itmdiscamt);
                string damt = "0";
                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                double newpretaxamt = 0;
                newpretaxamt = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ?
                    await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colPrice) :
                    await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colGPrice)) - GeneralFunctions.fnDouble(damt);

                gridControl1.SetCellValue(rwindx, colPrice, newpretaxamt.ToString("f"));

                if (Settings.TaxInclusive == "Y")
                {
                    gridControl1.SetFocusedRowCellValue(colGRate, (newpretaxamt / GeneralFunctions.fnDouble(
                        await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colQty))).ToString("f"));
                    gridControl1.SetFocusedRowCellValue(colGPrice, newpretaxamt.ToString("f"));
                }

                gridControl1.SetCellValue(rwindx, colDisc, damt);
                gridControl1.SetCellValue(rwindx, colDiscountID, intSID.ToString());
                gridControl1.SetCellValue(rwindx, colDVal, amt);
                gridControl1.SetCellValue(rwindx, colDLogic, itmdisctype);

                string amtstr = "";
                if (itmdisctype == "P") amtstr = " @" + amt + "%";
                else amtstr = " - " + SystemVariables.CurrencySymbol + amt;

                gridControl1.SetCellValue(rwindx, colDiscountText, "  " + itmdiscname + amtstr);

                string linetxt = await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colProduct) + "\n";
                gridControl1.SetCellValue(rwindx, colProduct, linetxt);
                string tx = "0";
                CalculateTaxAfterLineDiscount(GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colID)).ToString()), newpretaxamt, ref tx);
            }

            adid = "";
            adid = GetAutoDiscountID("Ticket", 0);
            if (adid != "")
            {
                DataTable dtbl = new DataTable();
                dtbl.Columns.Add("ID", System.Type.GetType("System.String"));

                string OrginalH = adid;
                char FindH = ',';
                int NumberOfOccurancesH = 0;

                string CopyOrginalH = string.Copy(OrginalH);
                int PlaceH = 0;

                NumberOfOccurancesH = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                int i = 0;
                while (PlaceH != -1)
                {
                    string temp = "";
                    int length = 0;
                    temp = CopyOrginalH.Substring(length, PlaceH);

                    dtbl.Rows.Add(new object[] { temp });
                    length = temp.Length + 1;
                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    NumberOfOccurancesH++;
                    i++;
                }

                foreach (DataRow dr in dtbl.Rows)
                {
                    bool flg = false;
                    foreach (DataRow dr1 in dtblPOS.Rows)
                    {
                        if (dr1["PRODUCTTYPE"].ToString() != "C") continue;
                        if (dr["ID"].ToString() == dr1["ID"].ToString())
                        {
                            flg = true;
                            break;
                        }
                    }
                    if (!flg)
                    {
                        DataTable dtbl2 = new DataTable();
                        PosDataObject.POS objpos = new PosDataObject.POS();
                        objpos.Connection = SystemVariables.Conn;
                        dtbl2 = objpos.FetchDiscounts(dr["ID"].ToString());
                        int itmdiscid = 0;
                        string itmdiscname = "";
                        string itmdisctype = "";
                        double itmdiscamt = 0;
                        foreach (DataRow dr2 in dtbl2.Rows)
                        {
                            itmdiscid = GeneralFunctions.fnInt32(dr2["ID"].ToString());
                            itmdiscname = dr2["Name"].ToString();
                            itmdisctype = dr2["Type"].ToString();
                            itmdiscamt = GeneralFunctions.fnDouble(dr2["Amount"].ToString());
                        }
                        dtbl2.Dispose();
                        string amt = "";
                        if (Settings.DecimalPlace == 2) amt = itmdiscamt.ToString("f");
                        if (Settings.DecimalPlace == 3) amt = itmdiscamt.ToString("f3");

                        int intSID = itmdiscid;

                        string amtstr = "";
                        if (itmdisctype == "P")
                            amtstr = " @" + amt + "%";
                        else
                            amtstr = " - " + SystemVariables.CurrencySymbol + amt;

                        if (Settings.DecimalPlace == 3)
                        {
                            dtblPOS.Rows.Add(new object[] {intSID.ToString(),"  " + itmdiscname + amtstr,
                                              "C","0","0","0",999888777,"99988863777.000","0","99988863777.000","0","0","0","","","",
                                              "",GetUniqueString(),"3","",itmdisctype,amt,"0","0","","2","0","0","0","","","","0","0","0",
                                              "N","N","N",strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"","0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,"99988863777.000","99988863777.000","","","","","","N"});
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[] {intSID.ToString(),"  " +itmdiscname + amtstr,
                                              "C","0","0","0",999888777,"99988863777.00","0","99988863777.00","0","0","0","","","",
                                              "",GetUniqueString(),"2","",itmdisctype,amt,"0","0","","2","0","0","0","","","","0",
                                              "0","0","N","N","N",strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,"99988863777.00","99988863777.00","","","","","","N"});
                        }
                    }
                }
            }
        }

        #region POS Screen Category and Item set in POS tab on Runtime

        private int CurrentParentCategoryLevel = 1;
        private int ParentCategoryID = 0;
        /// Polulate  POS Screen Category
        private void LoadPOSButtons()
        {
            try
            {
                pnlCategory.Visibility = Visibility.Collapsed;


                //-- Sam wrapper

                // Block By Rajib POSItemsListBox.Items.Clear();

                // Block By Rajib ProductCategoriesPanel.Children.Clear();
                System.Windows.Controls.RadioButton posHeader = new System.Windows.Controls.RadioButton()
                {
                    Content = new TextBlock() { Text = "ALL" },
                    Tag = "All",
                    IsChecked = true
                };

                posHeader.Checked += PosHeader_Checked;

                // Block By Rajib ProductCategoriesPanel.Children.Add(posHeader);
                //--

                pnlCat1.Children.Clear();
                pnlCat2.Children.Clear();
                pnlCat3.Children.Clear();
                pnlCat4.Children.Clear();
                pnlCat5.Children.Clear();

                PosDataObject.POS objPOS = new PosDataObject.POS();
                objPOS.Connection = SystemVariables.Conn;
                DataTable dtblCatButtons = objPOS.FetchPOSCategories(ParentCategoryID, CurrentParentCategoryLevel);
                //  dtblCatButtons.DefaultView.Sort = "POSDISPLAYORDER asc";
                //  dtblCatButtons.DefaultView.ApplyDefaultSort = true;
                int intCatTotal = dtblCatButtons.Rows.Count;
                int intOrder = 0;
                bool boolProceed = false;
                double dcat1 = 0;
                double dcat2 = 0;
                double dcat3 = 0;
                double dcat4 = 0;
                double dcat5 = 0;

                foreach (DataRowView dr in dtblCatButtons.DefaultView)
                {

                    boolProceed = false;



                    /*POSControls.POSCategory posCat = new POSControls.POSCategory();
                    try
                    {

                        posCat.SuspendLayout();
                        posCat.CategoryName = dr["DESCRIPTION"].ToString();
                        posCat.CategoryID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                        posCat.CategoryFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), "Y", dr["ISITALICS"].ToString());
                        posCat.CategoryForeColor = dr["POSFONTCOLOR"].ToString();
                        posCat.CategoryBackground = dr["POSBACKGROUND"].ToString();
                        posCat.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                        posCat.CategoryColor = dr["POSSCREENCOLOR"].ToString();
                        posCat.CategoryStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                        posCat.MaxProducts = GeneralFunctions.fnInt32(dr["MAXITEMSFORPOS"].ToString());
                        if ((Settings.UseStyle == "NO") && (dr["POSFONTCOLOR"].ToString() != "0"))
                        {
                            posCat.CategoryForeColor = "Black";
                            posCat.CategoryBackground = "Color";
                            posCat.CategoryColor = dr["POSFONTCOLOR"].ToString();
                        }



                        posPanel.Children.Add(box);

                        // Block By Rajib ProductCategoriesPanel.Children.Add(posHeader);



                        await LoadPOSItemsNew(posCat, box);
                        //--

                        //objFifthRowCat.HeaderCaption.Click += new System.EventHandler(this.posHeaderClick);--Sam


                        //objFifthRowCat.Refresh();


                    }
                    finally
                    {
                        posCat.ResumeLayout();


                    }*/


                    System.Windows.Controls.Border box = new System.Windows.Controls.Border();
                    box.Name = "catgroup";
                    box.Padding = new Thickness(0, 0, 0, 0);
                    box.Margin = new Thickness(10);
                    box.CornerRadius = new CornerRadius(5);
                    box.BorderThickness = new Thickness(5);
                    box.Width = pnlCat1.Width - 10;



                    Random rnd = new Random();
                    Color randomColor = Color.FromRgb((byte)rnd.Next(128, 255), (byte)rnd.Next(128, 255), (byte)rnd.Next(128, 255));

                    intOrder = GeneralFunctions.fnInt32(dr["POSDISPLAYORDER"].ToString());
                    if (intOrder > 5)
                    {
                        if ((intOrder % 5) != 0)
                            intOrder = (intOrder % 5);
                    }

                    if ((intOrder % 5) == 0)
                    {
                        if (boolProceed) continue;
                        POSControls.POSCategory objFifthRowCat = new POSControls.POSCategory();
                        try
                        {

                            objFifthRowCat.SuspendLayout();
                            objFifthRowCat.CategoryName = dr["DESCRIPTION"].ToString();
                            objFifthRowCat.CategoryID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                            objFifthRowCat.CategoryFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), "Y", dr["ISITALICS"].ToString());
                            objFifthRowCat.CategoryFontFamily = dr["POSFONTTYPE"].ToString();
                            objFifthRowCat.CategoryFontSize = dr["POSFONTSIZE"].ToString();
                            objFifthRowCat.CategoryFontBold = "Y";
                            objFifthRowCat.CategoryFontItalic = dr["ISITALICS"].ToString();
                            objFifthRowCat.CategoryForeColor = dr["POSFONTCOLOR"].ToString();
                            objFifthRowCat.CategoryBackground = dr["POSBACKGROUND"].ToString();
                            objFifthRowCat.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                            objFifthRowCat.CategoryColor = dr["POSSCREENCOLOR"].ToString();
                            objFifthRowCat.CategoryStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                            objFifthRowCat.MaxProducts = GeneralFunctions.fnInt32(dr["MAXITEMSFORPOS"].ToString());
                            if ((Settings.UseStyle == "NO") && (dr["POSFONTCOLOR"].ToString() != "0"))
                            {
                                objFifthRowCat.CategoryForeColor = "Black";
                                objFifthRowCat.CategoryBackground = "Color";
                                objFifthRowCat.CategoryColor = dr["POSFONTCOLOR"].ToString();
                            }
                            objFifthRowCat.ParentCategoryID = GeneralFunctions.fnInt32(dr["PARENTCATEGORY"].ToString());
                            //objFifthRowCat.Parent = pnlCat5; ---SAM comment
                            //--Sam Wrapper



                            // Block By Rajib ProductCategoriesPanel.Children.Add(posHeader);


                            double boxheight = 0;
                            LoadPOSItemsNew(objFifthRowCat, box, ref boxheight);


                            box.SetValue(Canvas.TopProperty, dcat5);
                            pnlCat5.Children.Add(box);
                            dcat5 = dcat5 + boxheight + 20;
                            objFifthRowCat.Refresh();
                            boolProceed = true;

                        }
                        finally
                        {
                            objFifthRowCat.ResumeLayout();


                        }
                    }
                    else if ((intOrder % 4) == 0)
                    {
                        POSControls.POSCategory objFourthRowCat = new POSControls.POSCategory();
                        try
                        {
                            if (boolProceed) continue;
                            objFourthRowCat.SuspendLayout();

                            objFourthRowCat.CategoryName = dr["DESCRIPTION"].ToString();
                            objFourthRowCat.CategoryID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                            objFourthRowCat.CategoryFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), "Y", dr["ISITALICS"].ToString());
                            objFourthRowCat.CategoryFontFamily = dr["POSFONTTYPE"].ToString();
                            objFourthRowCat.CategoryFontSize = dr["POSFONTSIZE"].ToString();
                            objFourthRowCat.CategoryFontBold = "Y";
                            objFourthRowCat.CategoryFontItalic = dr["ISITALICS"].ToString();
                            objFourthRowCat.CategoryForeColor = dr["POSFONTCOLOR"].ToString();
                            objFourthRowCat.CategoryBackground = dr["POSBACKGROUND"].ToString();
                            objFourthRowCat.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                            objFourthRowCat.CategoryColor = dr["POSSCREENCOLOR"].ToString();
                            objFourthRowCat.CategoryStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                            objFourthRowCat.MaxProducts = GeneralFunctions.fnInt32(dr["MAXITEMSFORPOS"].ToString());
                            if ((Settings.UseStyle == "NO") && (dr["POSFONTCOLOR"].ToString() != "0"))
                            {
                                objFourthRowCat.CategoryForeColor = "Black";
                                objFourthRowCat.CategoryBackground = "Color";
                                objFourthRowCat.CategoryColor = dr["POSFONTCOLOR"].ToString();
                            }
                            double boxheight = 0;
                            objFourthRowCat.ParentCategoryID = GeneralFunctions.fnInt32(dr["PARENTCATEGORY"].ToString());
                            LoadPOSItemsNew(objFourthRowCat, box, ref boxheight);


                            box.SetValue(Canvas.TopProperty, dcat4);
                            pnlCat4.Children.Add(box);
                            dcat4 = dcat4 + boxheight + 20;

                            objFourthRowCat.Refresh();
                            boolProceed = true;
                        }
                        finally
                        {
                            objFourthRowCat.ResumeLayout();

                        }
                    }
                    else if ((intOrder % 3) == 0)
                    {
                        POSControls.POSCategory objThirdRowCat = new POSControls.POSCategory();

                        try
                        {
                            if (boolProceed) continue;
                            objThirdRowCat.SuspendLayout();

                            objThirdRowCat.CategoryName = dr["DESCRIPTION"].ToString();
                            objThirdRowCat.CategoryID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                            objThirdRowCat.CategoryFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), "Y", dr["ISITALICS"].ToString());
                            objThirdRowCat.CategoryFontFamily = dr["POSFONTTYPE"].ToString();
                            objThirdRowCat.CategoryFontSize = dr["POSFONTSIZE"].ToString();
                            objThirdRowCat.CategoryFontBold = "Y";
                            objThirdRowCat.CategoryFontItalic = dr["ISITALICS"].ToString();
                            objThirdRowCat.CategoryForeColor = dr["POSFONTCOLOR"].ToString();
                            objThirdRowCat.CategoryBackground = dr["POSBACKGROUND"].ToString();
                            objThirdRowCat.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                            objThirdRowCat.CategoryColor = dr["POSSCREENCOLOR"].ToString();
                            objThirdRowCat.CategoryStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                            objThirdRowCat.MaxProducts = GeneralFunctions.fnInt32(dr["MAXITEMSFORPOS"].ToString());
                            if ((Settings.UseStyle == "NO") && (dr["POSFONTCOLOR"].ToString() != "0"))
                            {
                                objThirdRowCat.CategoryForeColor = "Black";
                                objThirdRowCat.CategoryBackground = "Color";
                                objThirdRowCat.CategoryColor = dr["POSFONTCOLOR"].ToString();
                            }
                            double boxheight = 0;
                            objThirdRowCat.ParentCategoryID = GeneralFunctions.fnInt32(dr["PARENTCATEGORY"].ToString());
                            LoadPOSItemsNew(objThirdRowCat, box, ref boxheight);

                            box.SetValue(Canvas.TopProperty, dcat3);
                            pnlCat3.Children.Add(box);
                            dcat3 = dcat3 + boxheight + 20;

                            objThirdRowCat.Refresh();
                            boolProceed = true;
                        }
                        finally
                        {
                            objThirdRowCat.ResumeLayout();

                        }
                    }
                    else if ((intOrder % 2) == 0)
                    {
                        POSControls.POSCategory objSecondRowCat = new POSControls.POSCategory();
                        try
                        {

                            objSecondRowCat.SuspendLayout();

                            objSecondRowCat.CategoryName = dr["DESCRIPTION"].ToString();
                            objSecondRowCat.CategoryID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                            objSecondRowCat.CategoryFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), "Y", dr["ISITALICS"].ToString());
                            objSecondRowCat.CategoryFontFamily = dr["POSFONTTYPE"].ToString();
                            objSecondRowCat.CategoryFontSize = dr["POSFONTSIZE"].ToString();
                            objSecondRowCat.CategoryFontBold = "Y";
                            objSecondRowCat.CategoryFontItalic = dr["ISITALICS"].ToString();
                            objSecondRowCat.CategoryForeColor = dr["POSFONTCOLOR"].ToString();
                            objSecondRowCat.CategoryBackground = dr["POSBACKGROUND"].ToString();
                            objSecondRowCat.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                            objSecondRowCat.CategoryColor = dr["POSSCREENCOLOR"].ToString();
                            objSecondRowCat.CategoryStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                            objSecondRowCat.MaxProducts = GeneralFunctions.fnInt32(dr["MAXITEMSFORPOS"].ToString());
                            if ((Settings.UseStyle == "NO") && (dr["POSFONTCOLOR"].ToString() != "0"))
                            {
                                objSecondRowCat.CategoryForeColor = "Black";
                                objSecondRowCat.CategoryBackground = "Color";
                                objSecondRowCat.CategoryColor = dr["POSFONTCOLOR"].ToString();
                            }
                            double boxheight = 0;
                            objSecondRowCat.ParentCategoryID = GeneralFunctions.fnInt32(dr["PARENTCATEGORY"].ToString());
                            LoadPOSItemsNew(objSecondRowCat, box, ref boxheight);

                            box.SetValue(Canvas.TopProperty, dcat2);
                            pnlCat2.Children.Add(box);
                            dcat2 = dcat2 + boxheight + 20;

                            objSecondRowCat.Refresh();
                        }
                        finally
                        {
                            objSecondRowCat.ResumeLayout();

                        }
                    }
                    else
                    {
                        POSControls.POSCategory objFirstRowCat = new POSControls.POSCategory();
                        try
                        {
                            if (boolProceed) continue;
                            objFirstRowCat.SuspendLayout();

                            objFirstRowCat.CategoryName = dr["DESCRIPTION"].ToString();
                            objFirstRowCat.CategoryID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                            objFirstRowCat.CategoryFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), "Y", dr["ISITALICS"].ToString());
                            objFirstRowCat.CategoryFontFamily = dr["POSFONTTYPE"].ToString();
                            objFirstRowCat.CategoryFontSize = dr["POSFONTSIZE"].ToString();
                            objFirstRowCat.CategoryFontBold = "Y";
                            objFirstRowCat.CategoryFontItalic = dr["ISITALICS"].ToString();
                            objFirstRowCat.CategoryForeColor = dr["POSFONTCOLOR"].ToString();
                            objFirstRowCat.CategoryBackground = dr["POSBACKGROUND"].ToString();
                            objFirstRowCat.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                            objFirstRowCat.CategoryColor = dr["POSSCREENCOLOR"].ToString();
                            objFirstRowCat.CategoryStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                            objFirstRowCat.MaxProducts = GeneralFunctions.fnInt32(dr["MAXITEMSFORPOS"].ToString());
                            if ((Settings.UseStyle == "NO") && (dr["POSFONTCOLOR"].ToString() != "0"))
                            {
                                objFirstRowCat.CategoryForeColor = "Black";
                                objFirstRowCat.CategoryBackground = "Color";
                                objFirstRowCat.CategoryColor = dr["POSFONTCOLOR"].ToString();
                            }
                            double boxheight = 0;
                            objFirstRowCat.ParentCategoryID = GeneralFunctions.fnInt32(dr["PARENTCATEGORY"].ToString());
                            LoadPOSItemsNew(objFirstRowCat, box, ref boxheight);

                            box.SetValue(Canvas.TopProperty, dcat1);
                            pnlCat1.Children.Add(box);
                            dcat1 = dcat1 + boxheight + 20;
                            objFirstRowCat.Refresh();
                            boolProceed = true;
                        }
                        finally
                        {
                            objFirstRowCat.ResumeLayout();

                        }
                    }
                }

                if (ParentCategoryID > 0)
                {
                    PosDataObject.POS objPOSA = new PosDataObject.POS();
                    objPOSA.Connection = SystemVariables.Conn;
                    DataTable dtblItemButtons = objPOSA.FetchPOSItemsforCategory1(ParentCategoryID);

                    DataTable dtblDummy = dtblItemButtons.Clone();

                    int i = 0;

                    foreach (DataRow dr1 in dtblItemButtons.Rows)
                    {
                        dtblDummy.ImportRow(dr1);

                        //    i++;
                        //dr1["POSDISPLAYORDER"] = i.ToString();
                    }

                    if (dtblItemButtons.Rows.Count > dtblDummy.Rows.Count)
                    {
                        int dispordcnt = 0;
                        foreach (DataRow dr in dtblDummy.Rows)
                        {
                            dispordcnt++;
                            dr["POSDISPLAYORDER"] = dispordcnt.ToString();
                        }
                        dtblItemButtons = dtblDummy;
                        dtblDummy.Dispose();
                    }

                    foreach (DataRow dr in dtblItemButtons.Rows)
                    {
                        dr["POSDISPLAYORDER"] = GeneralFunctions.fnInt32(dr["POSDISPLAYORDER"].ToString()) + intCatTotal;
                    }


                    //    pnlCategory.Visibility = Visibility.Visible;
                    //lbCategory.Text = "Products for: " + pCat.CategoryName + " (" + i.ToString() + ")";
                    intOrder = 0;
                    foreach (DataRow dr in dtblItemButtons.Rows)
                    {
                        boolProceed = false;
                        System.Windows.Controls.Border box = new System.Windows.Controls.Border();
                        box.Name = "catgroup";
                        box.Padding = new Thickness(0, 0, 0, 0);
                        box.Margin = new Thickness(10);
                        box.CornerRadius = new CornerRadius(5);
                        box.BorderThickness = new Thickness(5);
                        box.Width = pnlCat1.Width - 10;
                        if (currentParentCategory.CategoryBackground == "Color")
                        {

                            if ((currentParentCategory.CategoryColor == "") || (currentParentCategory.CategoryColor == "0") || (currentParentCategory.CategoryColor.Contains("#00000000")))
                            {
                                box.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#74A88E")); //System.Windows.Media.Brushes.Transparent;

                            }
                            else
                            {
                                box.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(currentParentCategory.CategoryColor));
                            }
                        }
                        else
                        {
                            box.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#74A88E"));
                        }

                        box.Background = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)box.Background).Color) { Opacity = 0.4 };
                        box.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)box.Background).Color) { Opacity = 0.4 };

                        // box.Width = pnlCat1.Width - 3;

                        intOrder = GeneralFunctions.fnInt32(dr["POSDISPLAYORDER"].ToString());
                        if (intOrder > 5)
                        {
                            if ((intOrder % 5) != 0)
                                intOrder = (intOrder % 5);
                        }

                        if ((intOrder % 5) == 0)
                        {
                            if (boolProceed) continue;
                            double boxHeight = 0;

                            POSControls.POSItem PosItem = new POSControls.POSItem(1);

                            //  PosItem.SuspendLayout();

                            PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                            PosItem.Name = dr["ID"].ToString();
                            PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                            PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                            PosItem.ItemFontFamily = dr["POSFONTTYPE"].ToString();
                            PosItem.ItemFontSize = dr["POSFONTSIZE"].ToString();
                            PosItem.ItemFontBold = dr["ISBOLD"].ToString();
                            PosItem.ItemFontItalic = dr["ISITALICS"].ToString();

                            PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                            PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                            PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                            PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                            PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                            PosItem.ItemSKU = dr["SKU"].ToString();
                            PosItem.ItemName = dr["DESCRIPTION"].ToString();

                            double qtyhand = 0;

                            if (dr["LINKSKU"].ToString() == "0")
                            {
                                PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                            }
                            else
                            {
                                if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                                {
                                    PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                    PosDataObject.POS objPOS1 = new PosDataObject.POS();
                                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                    qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                                }
                                else
                                {
                                    PosItem.DisplayStockinPOS = false;
                                    qtyhand = 0;
                                }
                            }

                            PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                            PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                            PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");

                            //GeneralFunctions.LoadPhotofromDB(PosItem);
                            //PosItem.Parent = CategoryID;
                            //PosItem.Refresh();
                            PosItem.Visible = true;

                            System.Windows.Controls.Button btn = new System.Windows.Controls.Button();

                            string itemtext = "";

                            if (PosItem.DisplayStockinPOS)
                            {
                                itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")" : PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")";
                            }
                            else
                            {
                                itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName : PosItem.ItemName;
                            }

                            TextBlock tb = new TextBlock();
                            tb.Text = itemtext;
                            tb.TextAlignment = TextAlignment.Center;
                            tb.TextWrapping = TextWrapping.WrapWithOverflow;
                            tb.VerticalAlignment = VerticalAlignment.Center;
                            tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                            GeneralFunctions.SetWpfFont(tb, dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                            if ((PosItem.ItemForeColor == "") || (PosItem.ItemForeColor == "0") || (PosItem.ItemForeColor.Contains("#00000000")))
                            {

                            }
                            else
                            {
                                tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemForeColor));
                            }



                            double ApproxHeight = 60;

                            btn.Height = ApproxHeight;
                            boxHeight = boxHeight + ApproxHeight;

                            btn.Tag = PosItem;
                            btn.Opacity = 1.0;
                            btn.Focusable = false;
                            btn.Click += Btn_Click;

                            tb.Width = box.Width * 0.85;
                            Viewbox vwbx1 = new Viewbox();
                            vwbx1.Stretch = Stretch.None;
                            vwbx1.Child = tb;
                            bool blFindImage = false;
                            var img = new Image();
                            bool boolDisplayImageButton = false;

                            GeneralFunctions.LoadPhotofromDB("Product", PosItem.ItemID, img);
                            if (img.Source != null) blFindImage = true;

                            if (blFindImage)
                            {
                                btn.Content = new Image
                                {
                                    Source = img.Source,
                                    Stretch = Stretch.Fill,
                                    Margin = new Thickness(-4)
                                };
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);

                                Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                                if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                                {
                                    if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                    if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                }
                                else
                                {
                                    bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                }

                                btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                                string template =
                                    "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                    " TargetType =\"Button\">" +
                                    "<Grid>" +
                                    "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                    "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                    "</Border>" +
                                    "</Grid>" +
                                    "</ControlTemplate>";
                                btn.Template = (ControlTemplate)XamlReader.Parse(template);
                            }
                            else
                            {
                                btn.Content = vwbx1;

                                if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                                {
                                    btn.Background = System.Windows.Media.Brushes.Transparent;
                                    if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                    if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                    btn.BorderThickness = new Thickness(0);
                                    btn.Margin = new Thickness(0, 0, 0, 0);
                                }
                                else
                                {
                                    btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                    btn.BorderThickness = new Thickness(0);
                                    btn.Margin = new Thickness(0, 0, 0, 0);
                                }

                                btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                                string template =
                                    "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                    " TargetType =\"Button\">" +
                                    "<Grid>" +
                                    "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                                    "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                    "</Border>" +
                                    "</Grid>" +
                                    "</ControlTemplate>";
                                btn.Template = (ControlTemplate)XamlReader.Parse(template);


                            }



                            Grid grd = new Grid();
                            grd.Name = "contentgrid";
                            grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
                            grd.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(100, GridUnitType.Star) });

                            System.Windows.Controls.DockPanel stack1 = new System.Windows.Controls.DockPanel();
                            stack1.Children.Add(btn);
                            Grid.SetColumn(stack1, 0);
                            Grid.SetRow(stack1, 0);
                            grd.Children.Add(stack1);
                            box.Child = grd;
                            box.SetValue(Canvas.TopProperty, dcat5);
                            pnlCat5.Children.Add(box);
                            dcat5 = dcat5 + boxHeight + 20;
                            boolProceed = true;
                        }
                        else if ((intOrder % 4) == 0)
                        {
                            if (boolProceed) continue;
                            double boxHeight = 0;

                            POSControls.POSItem PosItem = new POSControls.POSItem(1);

                            //  PosItem.SuspendLayout();

                            PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                            PosItem.Name = dr["ID"].ToString();
                            PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                            PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                            PosItem.ItemFontFamily = dr["POSFONTTYPE"].ToString();
                            PosItem.ItemFontSize = dr["POSFONTSIZE"].ToString();
                            PosItem.ItemFontBold = dr["ISBOLD"].ToString();
                            PosItem.ItemFontItalic = dr["ISITALICS"].ToString();

                            PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                            PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                            PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                            PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                            PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                            PosItem.ItemSKU = dr["SKU"].ToString();
                            PosItem.ItemName = dr["DESCRIPTION"].ToString();

                            double qtyhand = 0;

                            if (dr["LINKSKU"].ToString() == "0")
                            {
                                PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                            }
                            else
                            {
                                if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                                {
                                    PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                    PosDataObject.POS objPOS1 = new PosDataObject.POS();
                                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                    qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                                }
                                else
                                {
                                    PosItem.DisplayStockinPOS = false;
                                    qtyhand = 0;
                                }
                            }

                            PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                            PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                            PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");
                            GeneralFunctions.LoadPhotofromDB(PosItem);
                            //PosItem.Parent = CategoryID;
                            //PosItem.Refresh();
                            PosItem.Visible = true;

                            System.Windows.Controls.Button btn = new System.Windows.Controls.Button();

                            string itemtext = "";

                            if (PosItem.DisplayStockinPOS)
                            {
                                itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")" : PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")";
                            }
                            else
                            {
                                itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName : PosItem.ItemName;
                            }

                            TextBlock tb = new TextBlock();
                            tb.Text = itemtext;
                            tb.TextAlignment = TextAlignment.Center;
                            tb.TextWrapping = TextWrapping.WrapWithOverflow;
                            tb.VerticalAlignment = VerticalAlignment.Center;
                            tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                            GeneralFunctions.SetWpfFont(tb, dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                            if ((PosItem.ItemForeColor == "") || (PosItem.ItemForeColor == "0") || (PosItem.ItemForeColor.Contains("#00000000")))
                            {

                            }
                            else
                            {
                                tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemForeColor));
                            }



                            double ApproxHeight = 60;

                            btn.Height = ApproxHeight;
                            boxHeight = boxHeight + ApproxHeight;

                            btn.Tag = PosItem;
                            btn.Opacity = 1.0;
                            btn.Focusable = false;
                            btn.Click += Btn_Click;

                            tb.Width = box.Width * 0.85;
                            Viewbox vwbx1 = new Viewbox();
                            vwbx1.Stretch = Stretch.None;
                            vwbx1.Child = tb;
                            bool blFindImage = false;
                            var img = new Image();
                            bool boolDisplayImageButton = false;

                            GeneralFunctions.LoadPhotofromDB("Product", PosItem.ItemID, img);
                            if (img.Source != null) blFindImage = true;

                            if (blFindImage)
                            {
                                btn.Content = new Image
                                {
                                    Source = img.Source,
                                    Stretch = Stretch.Fill,
                                    Margin = new Thickness(-4)
                                };
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);

                                Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                                if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                                {
                                    if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                    if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                }
                                else
                                {
                                    bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                }

                                btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                                string template =
                                    "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                    " TargetType =\"Button\">" +
                                    "<Grid>" +
                                    "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                    "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                    "</Border>" +
                                    "</Grid>" +
                                    "</ControlTemplate>";
                                btn.Template = (ControlTemplate)XamlReader.Parse(template);
                            }
                            else
                            {
                                btn.Content = vwbx1;

                                if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                                {
                                    btn.Background = System.Windows.Media.Brushes.Transparent;
                                    if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                    if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                    btn.BorderThickness = new Thickness(0);
                                    btn.Margin = new Thickness(0, 0, 0, 0);
                                }
                                else
                                {
                                    btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                    btn.BorderThickness = new Thickness(0);
                                    btn.Margin = new Thickness(0, 0, 0, 0);
                                }

                                btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                                string template =
                                    "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                    " TargetType =\"Button\">" +
                                    "<Grid>" +
                                    "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                                    "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                    "</Border>" +
                                    "</Grid>" +
                                    "</ControlTemplate>";
                                btn.Template = (ControlTemplate)XamlReader.Parse(template);


                            }

                            Grid grd = new Grid();
                            grd.Name = "contentgrid";
                            grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
                            grd.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(100, GridUnitType.Star) });


                            System.Windows.Controls.DockPanel stack1 = new System.Windows.Controls.DockPanel();
                            stack1.Children.Add(btn);
                            Grid.SetColumn(stack1, 0);
                            Grid.SetRow(stack1, 0);
                            grd.Children.Add(stack1);
                            box.Child = grd;
                            box.SetValue(Canvas.TopProperty, dcat4);
                            pnlCat4.Children.Add(box);
                            dcat4 = dcat4 + boxHeight + 20;
                            boolProceed = true;
                        }
                        else if ((intOrder % 3) == 0)
                        {
                            if (boolProceed) continue;
                            double boxHeight = 0;

                            POSControls.POSItem PosItem = new POSControls.POSItem(1);

                            //  PosItem.SuspendLayout();

                            PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                            PosItem.Name = dr["ID"].ToString();
                            PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                            PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                            PosItem.ItemFontFamily = dr["POSFONTTYPE"].ToString();
                            PosItem.ItemFontSize = dr["POSFONTSIZE"].ToString();
                            PosItem.ItemFontBold = dr["ISBOLD"].ToString();
                            PosItem.ItemFontItalic = dr["ISITALICS"].ToString();

                            PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                            PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                            PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                            PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                            PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                            PosItem.ItemSKU = dr["SKU"].ToString();
                            PosItem.ItemName = dr["DESCRIPTION"].ToString();

                            double qtyhand = 0;

                            if (dr["LINKSKU"].ToString() == "0")
                            {
                                PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                            }
                            else
                            {
                                if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                                {
                                    PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                    PosDataObject.POS objPOS1 = new PosDataObject.POS();
                                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                    qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                                }
                                else
                                {
                                    PosItem.DisplayStockinPOS = false;
                                    qtyhand = 0;
                                }
                            }

                            PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                            PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                            PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");
                            GeneralFunctions.LoadPhotofromDB(PosItem);
                            //PosItem.Parent = CategoryID;
                            //PosItem.Refresh();
                            PosItem.Visible = true;

                            System.Windows.Controls.Button btn = new System.Windows.Controls.Button();

                            string itemtext = "";

                            if (PosItem.DisplayStockinPOS)
                            {
                                itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")" : PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")";
                            }
                            else
                            {
                                itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName : PosItem.ItemName;
                            }

                            TextBlock tb = new TextBlock();
                            tb.Text = itemtext;
                            tb.TextAlignment = TextAlignment.Center;
                            tb.TextWrapping = TextWrapping.WrapWithOverflow;
                            tb.VerticalAlignment = VerticalAlignment.Center;
                            tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                            GeneralFunctions.SetWpfFont(tb, dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                            if ((PosItem.ItemForeColor == "") || (PosItem.ItemForeColor == "0") || (PosItem.ItemForeColor.Contains("#00000000")))
                            {

                            }
                            else
                            {
                                tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemForeColor));
                            }

                            /*Size sz = MeasureString(tb, tb.Text);
                            double szMultiply = GeneralFunctions.FormatDouble(sz.Width * sz.Height);
                            double ApproxHeight = 0;
                            if (szMultiply <= 499.99)
                            {
                                ApproxHeight = 45;
                            }
                            else if (szMultiply >= 500 && szMultiply <= 999.99)
                            {
                                ApproxHeight = 58;
                            }
                            else if (szMultiply >= 1000 && itemtext.Length <= 1499.99)
                            {
                                ApproxHeight = 71;
                            }
                            else if (szMultiply >= 1500 && szMultiply <= 1999.99)
                            {
                                ApproxHeight = 84;
                            }
                            else if (szMultiply >= 2000 && szMultiply <= 2499.99)
                            {
                                ApproxHeight = 97;
                            }
                            else
                            {
                                ApproxHeight = 110;
                            }*/

                            double ApproxHeight = 60;

                            btn.Height = ApproxHeight;
                            boxHeight = boxHeight + ApproxHeight;


                            btn.Tag = PosItem;
                            btn.Opacity = 1.0;
                            btn.Focusable = false;
                            btn.Click += Btn_Click;

                            tb.Width = box.Width * 0.85;
                            Viewbox vwbx1 = new Viewbox();
                            vwbx1.Stretch = Stretch.None;
                            vwbx1.Child = tb;
                            bool blFindImage = false;
                            var img = new Image();
                            bool boolDisplayImageButton = false;

                            GeneralFunctions.LoadPhotofromDB("Product", PosItem.ItemID, img);
                            if (img.Source != null) blFindImage = true;

                            if (blFindImage)
                            {
                                btn.Content = new Image
                                {
                                    Source = img.Source,
                                    Stretch = Stretch.Fill,
                                    Margin = new Thickness(-4)
                                };
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);

                                Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                                if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                                {
                                    if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                    if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                }
                                else
                                {
                                    bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                }

                                btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                                string template =
                                    "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                    " TargetType =\"Button\">" +
                                    "<Grid>" +
                                    "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                    "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                    "</Border>" +
                                    "</Grid>" +
                                    "</ControlTemplate>";
                                btn.Template = (ControlTemplate)XamlReader.Parse(template);
                            }
                            else
                            {
                                btn.Content = vwbx1;

                                if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                                {
                                    btn.Background = System.Windows.Media.Brushes.Transparent;
                                    if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                    if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                    btn.BorderThickness = new Thickness(0);
                                    btn.Margin = new Thickness(0, 0, 0, 0);
                                }
                                else
                                {
                                    btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                    btn.BorderThickness = new Thickness(0);
                                    btn.Margin = new Thickness(0, 0, 0, 0);
                                }

                                btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                                string template =
                                    "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                    " TargetType =\"Button\">" +
                                    "<Grid>" +
                                    "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                                    "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                    "</Border>" +
                                    "</Grid>" +
                                    "</ControlTemplate>";
                                btn.Template = (ControlTemplate)XamlReader.Parse(template);


                            }

                            Grid grd = new Grid();
                            grd.Name = "contentgrid";
                            grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
                            grd.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(100, GridUnitType.Star) });

                            System.Windows.Controls.DockPanel stack1 = new System.Windows.Controls.DockPanel();
                            stack1.Children.Add(btn);
                            Grid.SetColumn(stack1, 0);
                            Grid.SetRow(stack1, 0);
                            grd.Children.Add(stack1);
                            box.Child = grd;
                            box.SetValue(Canvas.TopProperty, dcat3);
                            pnlCat3.Children.Add(box);
                            dcat3 = dcat3 + boxHeight + 20;
                            boolProceed = true;
                        }
                        else if ((intOrder % 2) == 0)
                        {
                            if (boolProceed) continue;
                            double boxHeight = 0;

                            POSControls.POSItem PosItem = new POSControls.POSItem(1);

                            //   PosItem.SuspendLayout();

                            PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                            PosItem.Name = dr["ID"].ToString();
                            PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                            PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                            PosItem.ItemFontFamily = dr["POSFONTTYPE"].ToString();
                            PosItem.ItemFontSize = dr["POSFONTSIZE"].ToString();
                            PosItem.ItemFontBold = dr["ISBOLD"].ToString();
                            PosItem.ItemFontItalic = dr["ISITALICS"].ToString();

                            PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                            PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                            PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                            PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                            PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                            PosItem.ItemSKU = dr["SKU"].ToString();
                            PosItem.ItemName = dr["DESCRIPTION"].ToString();

                            double qtyhand = 0;

                            if (dr["LINKSKU"].ToString() == "0")
                            {
                                PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                            }
                            else
                            {
                                if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                                {
                                    PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                    PosDataObject.POS objPOS1 = new PosDataObject.POS();
                                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                    qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                                }
                                else
                                {
                                    PosItem.DisplayStockinPOS = false;
                                    qtyhand = 0;
                                }
                            }

                            PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                            PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                            PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");
                            GeneralFunctions.LoadPhotofromDB(PosItem);
                            //PosItem.Parent = CategoryID;
                            // PosItem.Refresh();
                            PosItem.Visible = true;

                            System.Windows.Controls.Button btn = new System.Windows.Controls.Button();

                            string itemtext = "";

                            if (PosItem.DisplayStockinPOS)
                            {
                                itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")" : PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")";
                            }
                            else
                            {
                                itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName : PosItem.ItemName;
                            }

                            TextBlock tb = new TextBlock();
                            tb.Text = itemtext;
                            tb.TextAlignment = TextAlignment.Center;
                            tb.TextWrapping = TextWrapping.WrapWithOverflow;
                            tb.VerticalAlignment = VerticalAlignment.Center;
                            tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                            GeneralFunctions.SetWpfFont(tb, dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                            if ((PosItem.ItemForeColor == "") || (PosItem.ItemForeColor == "0") || (PosItem.ItemForeColor.Contains("#00000000")))
                            {

                            }
                            else
                            {
                                tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemForeColor));
                            }

                            /*Size sz = MeasureString(tb, tb.Text);
                            double szMultiply = GeneralFunctions.FormatDouble(sz.Width * sz.Height);
                            double ApproxHeight = 0;
                            if (szMultiply <= 499.99)
                            {
                                ApproxHeight = 45;
                            }
                            else if (szMultiply >= 500 && szMultiply <= 999.99)
                            {
                                ApproxHeight = 58;
                            }
                            else if (szMultiply >= 1000 && itemtext.Length <= 1499.99)
                            {
                                ApproxHeight = 71;
                            }
                            else if (szMultiply >= 1500 && szMultiply <= 1999.99)
                            {
                                ApproxHeight = 84;
                            }
                            else if (szMultiply >= 2000 && szMultiply <= 2499.99)
                            {
                                ApproxHeight = 97;
                            }
                            else
                            {
                                ApproxHeight = 110;
                            }*/

                            double ApproxHeight = 60;

                            btn.Height = ApproxHeight;
                            boxHeight = boxHeight + ApproxHeight;

                            btn.Tag = PosItem;
                            btn.Opacity = 1.0;
                            btn.Focusable = false;
                            btn.Click += Btn_Click;

                            tb.Width = box.Width * 0.85;
                            Viewbox vwbx1 = new Viewbox();
                            vwbx1.Stretch = Stretch.None;
                            vwbx1.Child = tb;
                            bool blFindImage = false;
                            var img = new Image();
                            bool boolDisplayImageButton = false;

                            GeneralFunctions.LoadPhotofromDB("Product", PosItem.ItemID, img);
                            if (img.Source != null) blFindImage = true;

                            if (blFindImage)
                            {
                                btn.Content = new Image
                                {
                                    Source = img.Source,
                                    Stretch = Stretch.Fill,
                                    Margin = new Thickness(-4)
                                };
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);

                                Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                                if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                                {
                                    if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                    if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                }
                                else
                                {
                                    bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                }

                                btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                                string template =
                                    "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                    " TargetType =\"Button\">" +
                                    "<Grid>" +
                                    "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                    "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                    "</Border>" +
                                    "</Grid>" +
                                    "</ControlTemplate>";
                                btn.Template = (ControlTemplate)XamlReader.Parse(template);
                            }
                            else
                            {
                                btn.Content = vwbx1;

                                if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                                {
                                    btn.Background = System.Windows.Media.Brushes.Transparent;
                                    if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                    if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                    btn.BorderThickness = new Thickness(0);
                                    btn.Margin = new Thickness(0, 0, 0, 0);
                                }
                                else
                                {
                                    btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                    btn.BorderThickness = new Thickness(0);
                                    btn.Margin = new Thickness(0, 0, 0, 0);
                                }

                                btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                                string template =
                                    "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                    " TargetType =\"Button\">" +
                                    "<Grid>" +
                                    "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                                    "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                    "</Border>" +
                                    "</Grid>" +
                                    "</ControlTemplate>";
                                btn.Template = (ControlTemplate)XamlReader.Parse(template);


                            }

                            Grid grd = new Grid();
                            grd.Name = "contentgrid";
                            grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
                            grd.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(100, GridUnitType.Star) });

                            System.Windows.Controls.DockPanel stack1 = new System.Windows.Controls.DockPanel();
                            stack1.Children.Add(btn);
                            Grid.SetColumn(stack1, 0);
                            Grid.SetRow(stack1, 0);
                            grd.Children.Add(stack1);
                            box.Child = grd;
                            box.SetValue(Canvas.TopProperty, dcat2);
                            pnlCat2.Children.Add(box);
                            dcat2 = dcat2 + boxHeight + 20;
                            boolProceed = true;

                        }
                        else
                        {
                            if (boolProceed) continue;
                            double boxHeight = 0;

                            POSControls.POSItem PosItem = new POSControls.POSItem(1);

                            // PosItem.SuspendLayout();

                            PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                            PosItem.Name = dr["ID"].ToString();
                            PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                            PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                            PosItem.ItemFontFamily = dr["POSFONTTYPE"].ToString();
                            PosItem.ItemFontSize = dr["POSFONTSIZE"].ToString();
                            PosItem.ItemFontBold = dr["ISBOLD"].ToString();
                            PosItem.ItemFontItalic = dr["ISITALICS"].ToString();

                            PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                            PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                            PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                            PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                            PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                            PosItem.ItemSKU = dr["SKU"].ToString();
                            PosItem.ItemName = dr["DESCRIPTION"].ToString();

                            double qtyhand = 0;

                            if (dr["LINKSKU"].ToString() == "0")
                            {
                                PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                            }
                            else
                            {
                                if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                                {
                                    PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                    PosDataObject.POS objPOS1 = new PosDataObject.POS();
                                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                    qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                                }
                                else
                                {
                                    PosItem.DisplayStockinPOS = false;
                                    qtyhand = 0;
                                }
                            }

                            PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                            PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                            PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");
                            GeneralFunctions.LoadPhotofromDB(PosItem);
                            //PosItem.Parent = CategoryID;
                            //  PosItem.Refresh();
                            PosItem.Visible = true;
                            System.Windows.Controls.Button btn = new System.Windows.Controls.Button();

                            string itemtext = "";

                            if (PosItem.DisplayStockinPOS)
                            {
                                itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")" : PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")";
                            }
                            else
                            {
                                itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName : PosItem.ItemName;
                            }

                            TextBlock tb = new TextBlock();
                            tb.Text = itemtext;
                            tb.TextAlignment = TextAlignment.Center;
                            tb.TextWrapping = TextWrapping.WrapWithOverflow;
                            tb.VerticalAlignment = VerticalAlignment.Center;
                            tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                            GeneralFunctions.SetWpfFont(tb, dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                            if ((PosItem.ItemForeColor == "") || (PosItem.ItemForeColor == "0") || (PosItem.ItemForeColor.Contains("#00000000")))
                            {

                            }
                            else
                            {
                                tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemForeColor));
                            }



                            double ApproxHeight = 60;

                            btn.Height = ApproxHeight;
                            boxHeight = boxHeight + ApproxHeight;

                            btn.Tag = PosItem;
                            btn.Opacity = 1.0;
                            btn.Focusable = false;
                            btn.Click += Btn_Click;

                            tb.Width = box.Width * 0.85;
                            Viewbox vwbx1 = new Viewbox();
                            vwbx1.Stretch = Stretch.None;
                            vwbx1.Child = tb;
                            bool blFindImage = false;
                            var img = new Image();
                            bool boolDisplayImageButton = false;

                            GeneralFunctions.LoadPhotofromDB("Product", PosItem.ItemID, img);
                            if (img.Source != null) blFindImage = true;

                            if (blFindImage)
                            {
                                btn.Content = new Image
                                {
                                    Source = img.Source,
                                    Stretch = Stretch.Fill,
                                    Margin = new Thickness(-4)
                                };
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);

                                Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                                if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                                {
                                    if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                    if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                }
                                else
                                {
                                    bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                }

                                btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                                string template =
                                    "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                    " TargetType =\"Button\">" +
                                    "<Grid>" +
                                    "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                    "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                    "</Border>" +
                                    "</Grid>" +
                                    "</ControlTemplate>";
                                btn.Template = (ControlTemplate)XamlReader.Parse(template);
                            }
                            else
                            {
                                btn.Content = vwbx1;

                                if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                                {
                                    btn.Background = System.Windows.Media.Brushes.Transparent;
                                    if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                    if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                    btn.BorderThickness = new Thickness(0);
                                    btn.Margin = new Thickness(0, 0, 0, 0);
                                }
                                else
                                {
                                    btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                    btn.BorderThickness = new Thickness(0);
                                    btn.Margin = new Thickness(0, 0, 0, 0);
                                }

                                btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                                string template =
                                    "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                    " TargetType =\"Button\">" +
                                    "<Grid>" +
                                    "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                                    "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                    "</Border>" +
                                    "</Grid>" +
                                    "</ControlTemplate>";
                                btn.Template = (ControlTemplate)XamlReader.Parse(template);


                            }

                            Grid grd = new Grid();
                            grd.Name = "contentgrid";
                            grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
                            grd.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(100, GridUnitType.Star) });

                            System.Windows.Controls.DockPanel stack1 = new System.Windows.Controls.DockPanel();
                            stack1.Children.Add(btn);
                            Grid.SetColumn(stack1, 0);
                            Grid.SetRow(stack1, 0);
                            grd.Children.Add(stack1);
                            box.Child = grd;
                            box.SetValue(Canvas.TopProperty, dcat1);
                            pnlCat1.Children.Add(box);
                            dcat1 = dcat1 + boxHeight + 20;
                            boolProceed = true;
                        }
                    }

                }

                double dhgt = 0;

                if (dcat1 > dhgt) dhgt = dcat1;
                if (dcat2 > dhgt) dhgt = dcat2;
                if (dcat3 > dhgt) dhgt = dcat3;
                if (dcat4 > dhgt) dhgt = dcat4;
                if (dcat5 > dhgt) dhgt = dcat5;

                double screenH = System.Windows.SystemParameters.PrimaryScreenHeight;
                double screenH4 = screenH * 0.4;
                double screenH5 = screenH * 0.5;
                double screenH6 = screenH * 0.6;

                //posPanel.Margin = new Thickness(0, 0, 0, 0);

                if (dhgt < screenH4)
                {
                    posPanel.Height = dhgt;
                }
                else if ((dhgt > screenH4) && (dhgt <= screenH5))
                {
                    posPanel.Height = dhgt + screenH * 0.1;
                    //posPanel.Margin = new Thickness(0, -60, 0, 0);
                }
                else if ((dhgt > screenH5) && (dhgt <= screenH6))
                {
                    posPanel.Height = dhgt + screenH * 0.1;

                }
                else
                {
                    posPanel.Height = dhgt + screenH * 0.1;
                }


                //Point targetLoc1 = pnlInfo.PointToScreen(new Point(0, 0));
                //Point targetLoc2 = pnlFB.PointToScreen(new Point(0, 0));

                /*if (dhgt > posPanel.ActualHeight)
                {
                    posPanel.Height = dhgt + 100;
                }*/
            }
            finally
            {
                //pnlCat.ResumeLayout(); ---SAM comment
            }


        }

        private async void PosHeader_Checked(object sender, RoutedEventArgs e)
        {
            //-- Sam Wrapper
            if (sender is System.Windows.Controls.RadioButton rb)
            {
                if (rb.Tag.ToString() == "All")
                {
                    //await LoadPOSButtons();
                    LoadPOSButtons();
                }
                else
                    posHeaderClick((POSControls.POSCategory)rb.Tag, ((SolidColorBrush)rb.BorderBrush).Color);
            }
            //--
        }

        /// Populate Items under POS Screen Category

        private async Task LoadPOSItems(POSControls.POSCategory PosCategory, Color borderColor)
        {
            /* 
                purpose : Create custom Item buttons
            */

            //-- Sam Wrapper
            await Task.Delay(5);
            //--

            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            DataTable dtblItemButtons = objPOS.FetchPOSItemsforCategory(PosCategory.CategoryID, false);

            if (dtblItemButtons.Rows.Count == 0)
            {
                PosCategory.AutoSize = false;
                PosCategory.Size = new System.Drawing.Size(PosCategory.Width, 47);
            }
            else
            {
                PosCategory.AutoSize = true;
            }

            POSControls.POSItem PosItem = new POSControls.POSItem(1);



            foreach (DataRow dr in dtblItemButtons.Rows)
            {
                PosItem = new POSControls.POSItem(1);

                try
                {
                    PosItem.SuspendLayout();

                    PosItem.ItemExpiryDate = dr["EXPIRYDATE"].ToString();

                    PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                    PosItem.Name = dr["ID"].ToString();
                    PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                    PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                    PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                    PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                    PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                    PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                    PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                    PosItem.ItemSKU = dr["SKU"].ToString();
                    PosItem.ItemName = dr["DESCRIPTION"].ToString();

                    double qtyhand = 0;

                    if (dr["LINKSKU"].ToString() == "0")
                    {
                        PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                        qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                    }
                    else
                    {
                        if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                        {
                            PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                            PosDataObject.POS objPOS1 = new PosDataObject.POS();
                            objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                        }
                        else
                        {
                            PosItem.DisplayStockinPOS = false;
                            qtyhand = 0;
                        }
                    }

                    PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                    PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                    PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");
                    GeneralFunctions.LoadPhotofromDB(PosItem);
                    PosItem.Parent = PosCategory;
                    PosItem.Refresh();

                    //-- Sam Wrapper
                    ListBoxItem lbi = MakePOSItem(PosItem);
                    lbi.BorderBrush = new SolidColorBrush(borderColor);
                    lbi.PreviewMouseLeftButtonDown += Lbi_PreviewMouseLeftButtonDown;

                    // Block By Rajib POSItemsListBox.Items.Add(lbi);
                    //--
                }
                finally
                {
                    PosItem.ResumeLayout();
                }
            }
        }

        private void Cat_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (pnlMenuHeaderD.Visibility == Visibility.Visible)
            {
                pnlMenuHeaderD.Visibility = Visibility.Collapsed;
                pnlMenuHeader.Visibility = Visibility.Visible;
            }

            (sender as System.Windows.Controls.Button).Opacity = 1.0;
        }

        private void LoadPOSItemsNew(POSControls.POSCategory PosCategory, System.Windows.Controls.Border gbox, ref double gboxHeight)
        {
            /* 
                purpose : Create custom Item buttons
            */


            Grid grd = new Grid();
            grd.Name = "contentgrid";
            grd.RowDefinitions.Add(new RowDefinition() { Height = new GridLength(50) });
            grd.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(100, GridUnitType.Star) });

            //gboxHeight = 50;

            gboxHeight = 0;

            double vwwidth = gbox.Width / 2;



            TextBlock header = new TextBlock()
            {
                Text = PosCategory.CategoryName,
                TextAlignment = TextAlignment.Center,
                TextWrapping = TextWrapping.WrapWithOverflow,
                VerticalAlignment = VerticalAlignment.Center

            };



            if (PosCategory.CategoryBackground == "Color")
            {

                if ((PosCategory.CategoryColor == "") || (PosCategory.CategoryColor == "0") || (PosCategory.CategoryColor.Contains("#00000000")))
                {
                    header.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FF800080")); //System.Windows.Media.Brushes.Transparent;

                }
                else
                {
                    header.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosCategory.CategoryColor));
                }
            }
            else
            {
                header.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#364A5D"));
            }

            gbox.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)header.Background).Color) { Opacity = 0.4 };
            gbox.Background = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)header.Background).Color) { Opacity = 0.4 };

            if ((PosCategory.CategoryForeColor == "") || (PosCategory.CategoryForeColor == "0") || (PosCategory.CategoryForeColor.Contains("#00000000")))
            {
                header.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FFFFFF"));
            }
            else
            {
                header.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosCategory.CategoryForeColor));
            }

            GeneralFunctions.SetWpfFont(header, PosCategory.CategoryFontFamily, PosCategory.CategoryFontSize, PosCategory.CategoryFontBold, PosCategory.CategoryFontItalic);

            System.Windows.Controls.Button btncat = new System.Windows.Controls.Button();


            Size szh = MeasureString(header, header.Text);
            double szMultiplyh = GeneralFunctions.FormatDouble(szh.Width * szh.Height);
            double ApproxHeightH = 0;
            if (szMultiplyh <= 1999.99)
            {
                ApproxHeightH = 50;
            }
            else if ((szMultiplyh >= 2000.00) && (szMultiplyh <= 2499.00))
            {
                ApproxHeightH = 65;
            }
            else
            {
                ApproxHeightH = 70;
            }

            gboxHeight = gboxHeight + ApproxHeightH;


            btncat.Height = ApproxHeightH;
            btncat.Tag = PosCategory;
            btncat.Opacity = 1.0;
            btncat.PreviewMouseLeftButtonDown += Cat_PreviewMouseLeftButtonDown;
            btncat.PreviewMouseLeftButtonUp += Cat_PreviewMouseLeftButtonUp;

            double ifactor = 0.3;
            if (PosCategory.CategoryName.Length <= 8)
            {
                ifactor = 0.6;
            }
            else if ((PosCategory.CategoryName.Length >= 9) && (PosCategory.CategoryName.Length <= 15))
            {
                ifactor = 0.8;
            }
            else if ((PosCategory.CategoryName.Length >= 16) && (PosCategory.CategoryName.Length <= 22))
            {
                ifactor = 0.8;
            }
            else
            {
                ifactor = 0.85;
            }
            header.Width = gbox.Width * ifactor;

            Viewbox vwbx = new Viewbox();
            vwbx.Stretch = Stretch.Uniform;
            vwbx.Child = header;
            btncat.Content = vwbx;

            //btncat.Content = header;

            btncat.Background = header.Background;

            string templatecat =
           "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
           " TargetType =\"Button\">" +
           "<Grid>" +
             "<Border Background=\"" + btncat.Background + "\" CornerRadius=\"5\">" +
             "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
             "</Border>" +

        "</Grid>" +
    "</ControlTemplate>";
            btncat.Template = (ControlTemplate)XamlReader.Parse(templatecat);


            /*System.Windows.Controls.DockPanel stack = new System.Windows.Controls.DockPanel();
            stack.Tag = PosCategory;
            stack.PreviewMouseLeftButtonDown += Cat_PreviewMouseLeftButtonDown;


            stack.Background = header.Background;
            stack.Children.Add(header);*/


            Grid.SetColumn(btncat, 0);
            Grid.SetRow(btncat, 0);


            grd.Children.Add(btncat);

            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            DataTable dtblItemButtons = objPOS.FetchPOSItemsforCategory(PosCategory.CategoryID, false);

            if (dtblItemButtons.Rows.Count == 0)
            {
                PosCategory.AutoSize = false;
                PosCategory.Size = new System.Drawing.Size(PosCategory.Width, 47);
            }
            else
            {
                PosCategory.AutoSize = true;
            }

            POSControls.POSItem PosItem = new POSControls.POSItem(1);


            int i = 1;

            foreach (DataRow dr in dtblItemButtons.Rows)
            {
                PosItem = new POSControls.POSItem(1);

                try
                {
                    PosItem.SuspendLayout();

                    PosItem.ItemExpiryDate = dr["EXPIRYDATE"].ToString();

                    PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                    PosItem.Name = dr["ID"].ToString();
                    PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                    PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                    PosItem.ItemFontFamily = dr["POSFONTTYPE"].ToString();
                    PosItem.ItemFontSize = dr["POSFONTSIZE"].ToString();
                    PosItem.ItemFontBold = dr["ISBOLD"].ToString();
                    PosItem.ItemFontItalic = dr["ISITALICS"].ToString();

                    PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                    PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                    PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                    PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                    PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                    PosItem.ItemSKU = dr["SKU"].ToString();
                    PosItem.ItemName = dr["DESCRIPTION"].ToString();

                    double qtyhand = 0;

                    if (dr["LINKSKU"].ToString() == "0")
                    {
                        PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                        qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                    }
                    else
                    {
                        if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                        {
                            PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                            PosDataObject.POS objPOS1 = new PosDataObject.POS();
                            objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                        }
                        else
                        {
                            PosItem.DisplayStockinPOS = false;
                            qtyhand = 0;
                        }
                    }

                    PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                    PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                    PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");

                    //GeneralFunctions.LoadPhotofromDB(PosItem);

                    PosItem.Parent = PosCategory;
                    PosItem.Refresh();


                    grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });

                    System.Windows.Controls.Button btn = new System.Windows.Controls.Button();


                    string itemtext = "";

                    if (PosItem.DisplayStockinPOS)
                    {
                        itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")" : PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")";
                    }
                    else
                    {
                        itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName : PosItem.ItemName;
                    }

                    TextBlock tb = new TextBlock();
                    tb.Text = itemtext;
                    tb.TextAlignment = TextAlignment.Center;
                    tb.TextWrapping = TextWrapping.WrapWithOverflow;
                    tb.VerticalAlignment = VerticalAlignment.Center;
                    tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                    GeneralFunctions.SetWpfFont(tb, dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                    if ((PosItem.ItemForeColor == "") || (PosItem.ItemForeColor == "0") || (PosItem.ItemForeColor.Contains("#00000000")))
                    {

                    }
                    else
                    {
                        tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemForeColor));
                    }

                    Size sz = MeasureString(tb, tb.Text);
                    double szMultiply = GeneralFunctions.FormatDouble(sz.Width * sz.Height);
                    double ApproxHeight = 0;
                    if (szMultiply <= 499.99)
                    {
                        ApproxHeight = 45;
                    }
                    else if (szMultiply >= 500 && szMultiply <= 999.99)
                    {
                        ApproxHeight = 58;
                    }
                    else if (szMultiply >= 1000 && itemtext.Length <= 1499.99)
                    {
                        ApproxHeight = 71;
                    }
                    else if (szMultiply >= 1500 && szMultiply <= 1999.99)
                    {
                        ApproxHeight = 84;
                    }
                    else if (szMultiply >= 2000 && szMultiply <= 2499.99)
                    {
                        ApproxHeight = 97;
                    }
                    else
                    {
                        ApproxHeight = 110;
                    }

                    btn.Height = ApproxHeight;
                    gboxHeight = gboxHeight + ApproxHeight;

                    btn.Tag = PosItem;
                    btn.Click += Btn_Click;

                    //btn.PreviewMouseLeftButtonDown += Lbi_PreviewMouseLeftButtonDown;

                    tb.Width = gbox.Width * 0.85;
                    Viewbox vwbx1 = new Viewbox();
                    vwbx1.Stretch = Stretch.Fill;
                    vwbx1.Child = tb;


                    //btn.Content = tb;


                    bool blFindImage = false;
                    var img = new Image();
                    GeneralFunctions.LoadPhotofromDB("Product", PosItem.ItemID, img);
                    if (img.Source != null) blFindImage = true;

                    if (blFindImage)
                    {
                        btn.Content = new Image
                        {
                            Source = img.Source,
                            Stretch = Stretch.Fill,
                            Margin = new Thickness(-4)
                        };
                        btn.BorderThickness = new Thickness(5);
                        btn.Margin = new Thickness(0, 3, 0, 0);

                        Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                        if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                        {
                            if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                            if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                        }
                        else
                        {
                            bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                        }

                        btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)gbox.BorderBrush).Color) { Opacity = 0.1 };

                        string template1 =
                            "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                            " TargetType =\"Button\">" +
                            "<Grid>" +
                            "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                            "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                            "</Border>" +
                            "</Grid>" +
                            "</ControlTemplate>";
                        btn.Template = (ControlTemplate)XamlReader.Parse(template1);
                    }
                    else
                    {
                        btn.Content = vwbx1;

                        if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                        {
                            btn.Background = System.Windows.Media.Brushes.Transparent;
                            if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                            if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                            btn.BorderThickness = new Thickness(5);
                            btn.Margin = new Thickness(0, 3, 0, 0);
                        }
                        else
                        {
                            btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                            btn.BorderThickness = new Thickness(5);
                            btn.Margin = new Thickness(0, 3, 0, 0);
                        }

                        btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)gbox.BorderBrush).Color) { Opacity = 0.1 };

                        string template1 =
                            "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                            " TargetType =\"Button\">" +
                            "<Grid>" +
                            "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                            "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                            "</Border>" +
                            "</Grid>" +
                            "</ControlTemplate>";
                        btn.Template = (ControlTemplate)XamlReader.Parse(template1);


                    }


                    /*

                    if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                    {
                        btn.Background = System.Windows.Media.Brushes.Transparent;
                        if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                        if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                        btn.BorderThickness = new Thickness(5);
                        btn.Margin = new Thickness(0, 3, 0, 0);
                        //btn.BorderBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FF6EC1DA"));
                    }
                    else
                    {
                        btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                        btn.BorderThickness = new Thickness(5);
                        btn.Margin = new Thickness(0, 3, 0, 0);
                        //btn.BorderBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FF6EC1DA"));
                    }

                    btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)gbox.BorderBrush).Color) { Opacity = 0.1 };


                    string template =
               "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
               " TargetType =\"Button\">" +
               "<Grid>" +
                 "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                 "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                 "</Border>" +

            "</Grid>" +
        "</ControlTemplate>";
                    btn.Template = (ControlTemplate)XamlReader.Parse(template);

                    //btn.Style = this.FindResource("RoundPOSButton") as Style;
                    */


                    System.Windows.Controls.DockPanel stack1 = new System.Windows.Controls.DockPanel();
                    stack1.Children.Add(btn);
                    Grid.SetColumn(stack1, 0);
                    Grid.SetRow(stack1, i);
                    grd.Children.Add(stack1);
                    i = i + 1;

                    // Block By Rajib POSItemsListBox.Items.Add(lbi);
                    //--
                }
                finally
                {
                    PosItem.ResumeLayout();
                }
            }

            gbox.Child = grd;
        }

        private async void Btn_Click(object sender, RoutedEventArgs e)
        {
            await posItem1Click((sender as System.Windows.Controls.Button).Tag as POSControls.POSItem);
        }

        private async Task LoadPOSItemsOnly(POSControls.POSCategory pCat, int CategoryID)
        {
            try
            {
                pnlCat1.Children.Clear();
                pnlCat2.Children.Clear();
                pnlCat3.Children.Clear();
                pnlCat4.Children.Clear();
                pnlCat5.Children.Clear();

                double dcat1 = 0;
                double dcat2 = 0;
                double dcat3 = 0;
                double dcat4 = 0;
                double dcat5 = 0;

                PosDataObject.POS objPOS = new PosDataObject.POS();
                objPOS.Connection = SystemVariables.Conn;
                DataTable dtblItemButtons = objPOS.FetchPOSItemsforCategory1(CategoryID);

                int i = 0;

                foreach (DataRow dr1 in dtblItemButtons.Rows)
                {
                    i++;
                    dr1["POSDISPLAYORDER"] = i.ToString();
                }

                pnlCategory.Visibility = Visibility.Visible;
                lbCategory.Text = "Products for: " + pCat.CategoryName + " (" + i.ToString() + ")";
                int intOrder = 0;
                foreach (DataRow dr in dtblItemButtons.Rows)
                {

                    System.Windows.Controls.Border box = new System.Windows.Controls.Border();
                    box.Name = "catgroup";
                    box.Padding = new Thickness(0, 0, 0, 0);
                    box.Margin = new Thickness(3);
                    box.CornerRadius = new CornerRadius(5);
                    box.BorderThickness = new Thickness(2);
                    box.Width = pnlCat1.Width - 3;

                    if (pCat.CategoryBackground == "Color")
                    {

                        if ((pCat.CategoryColor == "") || (pCat.CategoryColor == "0") || (pCat.CategoryColor.Contains("#00000000")))
                        {
                            box.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FF800080")); //System.Windows.Media.Brushes.Transparent;

                        }
                        else
                        {
                            box.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(pCat.CategoryColor));
                        }
                    }
                    else
                    {
                        box.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#364A5D"));
                    }

                    box.Background = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)box.Background).Color) { Opacity = 0.4 };
                    box.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)box.Background).Color) { Opacity = 0.4 };



                    //box.BorderBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FF6EC1DA"));
                    //box.BorderBrush.Opacity = 0.6;
                    box.Width = pnlCat1.Width - 3;

                    intOrder = GeneralFunctions.fnInt32(dr["POSDISPLAYORDER"].ToString());
                    if (intOrder > 5)
                    {
                        if ((intOrder % 5) != 0)
                            intOrder = (intOrder % 5);
                    }

                    if ((intOrder % 5) == 0)
                    {
                        double boxHeight = 0;

                        POSControls.POSItem PosItem = new POSControls.POSItem(1);

                        PosItem.SuspendLayout();

                        PosItem.ItemExpiryDate = dr["EXPIRYDATE"].ToString();
                        PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                        PosItem.Name = dr["ID"].ToString();
                        PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                        PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                        PosItem.ItemFontFamily = dr["POSFONTTYPE"].ToString();
                        PosItem.ItemFontSize = dr["POSFONTSIZE"].ToString();
                        PosItem.ItemFontBold = dr["ISBOLD"].ToString();
                        PosItem.ItemFontItalic = dr["ISITALICS"].ToString();

                        PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                        PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                        PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                        PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                        PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                        PosItem.ItemSKU = dr["SKU"].ToString();
                        PosItem.ItemName = dr["DESCRIPTION"].ToString();

                        double qtyhand = 0;

                        if (dr["LINKSKU"].ToString() == "0")
                        {
                            PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                            qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                        }
                        else
                        {
                            if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                            {
                                PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                PosDataObject.POS objPOS1 = new PosDataObject.POS();
                                objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                            }
                            else
                            {
                                PosItem.DisplayStockinPOS = false;
                                qtyhand = 0;
                            }
                        }

                        PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                        PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                        PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");

                        //GeneralFunctions.LoadPhotofromDB(PosItem);
                        //PosItem.Parent = CategoryID;
                        PosItem.Refresh();

                        System.Windows.Controls.Button btn = new System.Windows.Controls.Button();

                        string itemtext = "";

                        if (PosItem.DisplayStockinPOS)
                        {
                            itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")" : PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")";
                        }
                        else
                        {
                            itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName : PosItem.ItemName;
                        }

                        TextBlock tb = new TextBlock();
                        tb.Text = itemtext;
                        tb.TextAlignment = TextAlignment.Center;
                        tb.TextWrapping = TextWrapping.WrapWithOverflow;
                        tb.VerticalAlignment = VerticalAlignment.Center;
                        tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                        GeneralFunctions.SetWpfFont(tb, dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                        if ((PosItem.ItemForeColor == "") || (PosItem.ItemForeColor == "0") || (PosItem.ItemForeColor.Contains("#00000000")))
                        {

                        }
                        else
                        {
                            tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemForeColor));
                        }

                        /*Size sz = MeasureString(tb, tb.Text);
                        double szMultiply = GeneralFunctions.FormatDouble(sz.Width * sz.Height);
                        double ApproxHeight = 0;
                        if (szMultiply <= 499.99)
                        {
                            ApproxHeight = 45;
                        }
                        else if (szMultiply >= 500 && szMultiply <= 999.99)
                        {
                            ApproxHeight = 58;
                        }
                        else if (szMultiply >= 1000 && itemtext.Length <= 1499.99)
                        {
                            ApproxHeight = 71;
                        }
                        else if (szMultiply >= 1500 && szMultiply <= 1999.99)
                        {
                            ApproxHeight = 84;
                        }
                        else if (szMultiply >= 2000 && szMultiply <= 2499.99)
                        {
                            ApproxHeight = 97;
                        }
                        else
                        {
                            ApproxHeight = 110;
                        }*/

                        double ApproxHeight = 60;

                        btn.Height = ApproxHeight;
                        boxHeight = boxHeight + ApproxHeight;

                        btn.Tag = PosItem;
                        btn.Opacity = 1.0;
                        btn.Focusable = false;
                        btn.Click += Btn_Click;


                        bool blFindImage = false;
                        var img = new Image();
                        bool boolDisplayImageButton = false;

                        GeneralFunctions.LoadPhotofromDB("Product", PosItem.ItemID, img);
                        if (img.Source != null) blFindImage = true;


                        double ifactor = 0.3;
                        if (itemtext.Length <= 8)
                        {
                            ifactor = 0.6;
                        }
                        else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                        {
                            ifactor = 0.8;
                        }
                        else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                        {
                            ifactor = 0.8;
                        }
                        else
                        {
                            ifactor = 0.85;
                        }

                        tb.Width = box.Width * ifactor;
                        Viewbox vwbx1 = new Viewbox();
                        vwbx1.Stretch = Stretch.Uniform;
                        vwbx1.Child = tb;

                        if (blFindImage)
                        {
                            btn.Content = new Image
                            {
                                Source = img.Source,
                                Stretch = Stretch.Fill,
                                Margin = new Thickness(-4)
                            };
                            btn.BorderThickness = new Thickness(0);
                            btn.Margin = new Thickness(0, 0, 0, 0);

                            Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                            if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                            {
                                if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                            }
                            else
                            {
                                bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                            }

                            btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                            string template =
                                "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                " TargetType =\"Button\">" +
                                "<Grid>" +
                                "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                "</Border>" +
                                "</Grid>" +
                                "</ControlTemplate>";
                            btn.Template = (ControlTemplate)XamlReader.Parse(template);
                        }
                        else
                        {
                            btn.Content = vwbx1;

                            if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                            {
                                btn.Background = System.Windows.Media.Brushes.Transparent;
                                if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);
                            }
                            else
                            {
                                btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);
                            }

                            btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                            string template =
                                "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                " TargetType =\"Button\">" +
                                "<Grid>" +
                                "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                                "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                "</Border>" +
                                "</Grid>" +
                                "</ControlTemplate>";
                            btn.Template = (ControlTemplate)XamlReader.Parse(template);


                        }

                        //btn.PreviewMouseLeftButtonDown += Lbi_PreviewMouseLeftButtonDown;



                        //btn.Content = tb;

                        /*if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                        {
                            btn.Background = System.Windows.Media.Brushes.Transparent;
                            if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                            if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                            btn.BorderThickness = new Thickness(0);
                            btn.Margin = new Thickness(0, 0, 0, 0);
                            //btn.BorderBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FF6EC1DA"));
                        }
                        else
                        {
                            btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                            btn.BorderThickness = new Thickness(0);
                            btn.Margin = new Thickness(0, 0, 0, 0);
                            //btn.BorderBrush = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FF6EC1DA"));
                        }

                        btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };
                        */

                        Grid grd = new Grid();
                        grd.Name = "contentgrid";
                        grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
                        grd.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(100, GridUnitType.Star) });

                        System.Windows.Controls.DockPanel stack1 = new System.Windows.Controls.DockPanel();
                        stack1.Children.Add(btn);
                        Grid.SetColumn(stack1, 0);
                        Grid.SetRow(stack1, 0);
                        grd.Children.Add(stack1);
                        box.Child = grd;
                        box.SetValue(Canvas.TopProperty, dcat5);
                        pnlCat5.Children.Add(box);
                        dcat5 = dcat5 + boxHeight + 20;

                    }
                    else if ((intOrder % 4) == 0)
                    {
                        double boxHeight = 0;

                        POSControls.POSItem PosItem = new POSControls.POSItem(1);

                        PosItem.SuspendLayout();

                        PosItem.ItemExpiryDate = dr["EXPIRYDATE"].ToString();
                        PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                        PosItem.Name = dr["ID"].ToString();
                        PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                        PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                        PosItem.ItemFontFamily = dr["POSFONTTYPE"].ToString();
                        PosItem.ItemFontSize = dr["POSFONTSIZE"].ToString();
                        PosItem.ItemFontBold = dr["ISBOLD"].ToString();
                        PosItem.ItemFontItalic = dr["ISITALICS"].ToString();

                        PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                        PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                        PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                        PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                        PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                        PosItem.ItemSKU = dr["SKU"].ToString();
                        PosItem.ItemName = dr["DESCRIPTION"].ToString();

                        double qtyhand = 0;

                        if (dr["LINKSKU"].ToString() == "0")
                        {
                            PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                            qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                        }
                        else
                        {
                            if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                            {
                                PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                PosDataObject.POS objPOS1 = new PosDataObject.POS();
                                objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                            }
                            else
                            {
                                PosItem.DisplayStockinPOS = false;
                                qtyhand = 0;
                            }
                        }

                        PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                        PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                        PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");
                        GeneralFunctions.LoadPhotofromDB(PosItem);
                        //PosItem.Parent = CategoryID;
                        PosItem.Refresh();

                        System.Windows.Controls.Button btn = new System.Windows.Controls.Button();

                        string itemtext = "";

                        if (PosItem.DisplayStockinPOS)
                        {
                            itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")" : PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")";
                        }
                        else
                        {
                            itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName : PosItem.ItemName;
                        }

                        TextBlock tb = new TextBlock();
                        tb.Text = itemtext;
                        tb.TextAlignment = TextAlignment.Center;
                        tb.TextWrapping = TextWrapping.WrapWithOverflow;
                        tb.VerticalAlignment = VerticalAlignment.Center;
                        tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                        GeneralFunctions.SetWpfFont(tb, dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                        if ((PosItem.ItemForeColor == "") || (PosItem.ItemForeColor == "0") || (PosItem.ItemForeColor.Contains("#00000000")))
                        {

                        }
                        else
                        {
                            tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemForeColor));
                        }

                        /*Size sz = MeasureString(tb, tb.Text);
                        double szMultiply = GeneralFunctions.FormatDouble(sz.Width * sz.Height);
                        double ApproxHeight = 0;
                        if (szMultiply <= 499.99)
                        {
                            ApproxHeight = 45;
                        }
                        else if (szMultiply >= 500 && szMultiply <= 999.99)
                        {
                            ApproxHeight = 58;
                        }
                        else if (szMultiply >= 1000 && itemtext.Length <= 1499.99)
                        {
                            ApproxHeight = 71;
                        }
                        else if (szMultiply >= 1500 && szMultiply <= 1999.99)
                        {
                            ApproxHeight = 84;
                        }
                        else if (szMultiply >= 2000 && szMultiply <= 2499.99)
                        {
                            ApproxHeight = 97;
                        }
                        else
                        {
                            ApproxHeight = 110;
                        }*/

                        double ApproxHeight = 60;

                        btn.Height = ApproxHeight;
                        boxHeight = boxHeight + ApproxHeight;

                        btn.Tag = PosItem;
                        btn.Tag = PosItem;
                        btn.Opacity = 1.0;
                        btn.Focusable = false;
                        btn.Click += Btn_Click;

                        double ifactor = 0.3;
                        if (itemtext.Length <= 8)
                        {
                            ifactor = 0.6;
                        }
                        else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                        {
                            ifactor = 0.8;
                        }
                        else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                        {
                            ifactor = 0.8;
                        }
                        else
                        {
                            ifactor = 0.85;
                        }

                        tb.Width = box.Width * ifactor;
                        Viewbox vwbx1 = new Viewbox();
                        vwbx1.Stretch = Stretch.Uniform;
                        vwbx1.Child = tb;
                        bool blFindImage = false;
                        var img = new Image();
                        bool boolDisplayImageButton = false;

                        GeneralFunctions.LoadPhotofromDB("Product", PosItem.ItemID, img);
                        if (img.Source != null) blFindImage = true;

                        if (blFindImage)
                        {
                            btn.Content = new Image
                            {
                                Source = img.Source,
                                Stretch = Stretch.Fill,
                                Margin = new Thickness(-4)
                            };
                            btn.BorderThickness = new Thickness(0);
                            btn.Margin = new Thickness(0, 0, 0, 0);

                            Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                            if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                            {
                                if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                            }
                            else
                            {
                                bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                            }

                            btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                            string template =
                                "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                " TargetType =\"Button\">" +
                                "<Grid>" +
                                "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                "</Border>" +
                                "</Grid>" +
                                "</ControlTemplate>";
                            btn.Template = (ControlTemplate)XamlReader.Parse(template);
                        }
                        else
                        {
                            btn.Content = vwbx1;

                            if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                            {
                                btn.Background = System.Windows.Media.Brushes.Transparent;
                                if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);
                            }
                            else
                            {
                                btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);
                            }

                            btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                            string template =
                                "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                " TargetType =\"Button\">" +
                                "<Grid>" +
                                "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                                "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                "</Border>" +
                                "</Grid>" +
                                "</ControlTemplate>";
                            btn.Template = (ControlTemplate)XamlReader.Parse(template);


                        }

                        Grid grd = new Grid();
                        grd.Name = "contentgrid";
                        grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
                        grd.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(100, GridUnitType.Star) });


                        System.Windows.Controls.DockPanel stack1 = new System.Windows.Controls.DockPanel();
                        stack1.Children.Add(btn);
                        Grid.SetColumn(stack1, 0);
                        Grid.SetRow(stack1, 0);
                        grd.Children.Add(stack1);
                        box.Child = grd;
                        box.SetValue(Canvas.TopProperty, dcat4);
                        pnlCat4.Children.Add(box);
                        dcat4 = dcat4 + boxHeight + 20;

                    }
                    else if ((intOrder % 3) == 0)
                    {
                        double boxHeight = 0;

                        POSControls.POSItem PosItem = new POSControls.POSItem(1);

                        PosItem.SuspendLayout();

                        PosItem.ItemExpiryDate = dr["EXPIRYDATE"].ToString();
                        PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                        PosItem.Name = dr["ID"].ToString();
                        PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                        PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                        PosItem.ItemFontFamily = dr["POSFONTTYPE"].ToString();
                        PosItem.ItemFontSize = dr["POSFONTSIZE"].ToString();
                        PosItem.ItemFontBold = dr["ISBOLD"].ToString();
                        PosItem.ItemFontItalic = dr["ISITALICS"].ToString();

                        PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                        PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                        PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                        PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                        PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                        PosItem.ItemSKU = dr["SKU"].ToString();
                        PosItem.ItemName = dr["DESCRIPTION"].ToString();

                        double qtyhand = 0;

                        if (dr["LINKSKU"].ToString() == "0")
                        {
                            PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                            qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                        }
                        else
                        {
                            if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                            {
                                PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                PosDataObject.POS objPOS1 = new PosDataObject.POS();
                                objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                            }
                            else
                            {
                                PosItem.DisplayStockinPOS = false;
                                qtyhand = 0;
                            }
                        }

                        PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                        PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                        PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");
                        GeneralFunctions.LoadPhotofromDB(PosItem);
                        //PosItem.Parent = CategoryID;
                        PosItem.Refresh();

                        System.Windows.Controls.Button btn = new System.Windows.Controls.Button();

                        string itemtext = "";

                        if (PosItem.DisplayStockinPOS)
                        {
                            itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")" : PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")";
                        }
                        else
                        {
                            itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName : PosItem.ItemName;
                        }

                        TextBlock tb = new TextBlock();
                        tb.Text = itemtext;
                        tb.TextAlignment = TextAlignment.Center;
                        tb.TextWrapping = TextWrapping.WrapWithOverflow;
                        tb.VerticalAlignment = VerticalAlignment.Center;
                        tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                        GeneralFunctions.SetWpfFont(tb, dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                        if ((PosItem.ItemForeColor == "") || (PosItem.ItemForeColor == "0") || (PosItem.ItemForeColor.Contains("#00000000")))
                        {

                        }
                        else
                        {
                            tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemForeColor));
                        }

                        /*Size sz = MeasureString(tb, tb.Text);
                        double szMultiply = GeneralFunctions.FormatDouble(sz.Width * sz.Height);
                        double ApproxHeight = 0;
                        if (szMultiply <= 499.99)
                        {
                            ApproxHeight = 45;
                        }
                        else if (szMultiply >= 500 && szMultiply <= 999.99)
                        {
                            ApproxHeight = 58;
                        }
                        else if (szMultiply >= 1000 && itemtext.Length <= 1499.99)
                        {
                            ApproxHeight = 71;
                        }
                        else if (szMultiply >= 1500 && szMultiply <= 1999.99)
                        {
                            ApproxHeight = 84;
                        }
                        else if (szMultiply >= 2000 && szMultiply <= 2499.99)
                        {
                            ApproxHeight = 97;
                        }
                        else
                        {
                            ApproxHeight = 110;
                        }*/

                        double ApproxHeight = 60;

                        btn.Height = ApproxHeight;
                        boxHeight = boxHeight + ApproxHeight;


                        btn.Tag = PosItem;
                        btn.Opacity = 1.0;
                        btn.Focusable = false;
                        btn.Click += Btn_Click;

                        double ifactor = 0.3;
                        if (itemtext.Length <= 8)
                        {
                            ifactor = 0.6;
                        }
                        else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                        {
                            ifactor = 0.8;
                        }
                        else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                        {
                            ifactor = 0.8;
                        }
                        else
                        {
                            ifactor = 0.85;
                        }

                        tb.Width = box.Width * ifactor;
                        Viewbox vwbx1 = new Viewbox();
                        vwbx1.Stretch = Stretch.Uniform;
                        vwbx1.Child = tb;
                        bool blFindImage = false;
                        var img = new Image();
                        bool boolDisplayImageButton = false;

                        GeneralFunctions.LoadPhotofromDB("Product", PosItem.ItemID, img);
                        if (img.Source != null) blFindImage = true;

                        if (blFindImage)
                        {
                            btn.Content = new Image
                            {
                                Source = img.Source,
                                Stretch = Stretch.Fill,
                                Margin = new Thickness(-4)
                            };
                            btn.BorderThickness = new Thickness(0);
                            btn.Margin = new Thickness(0, 0, 0, 0);

                            Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                            if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                            {
                                if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                            }
                            else
                            {
                                bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                            }

                            btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                            string template =
                                "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                " TargetType =\"Button\">" +
                                "<Grid>" +
                                "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                "</Border>" +
                                "</Grid>" +
                                "</ControlTemplate>";
                            btn.Template = (ControlTemplate)XamlReader.Parse(template);
                        }
                        else
                        {
                            btn.Content = vwbx1;

                            if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                            {
                                btn.Background = System.Windows.Media.Brushes.Transparent;
                                if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);
                            }
                            else
                            {
                                btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);
                            }

                            btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                            string template =
                                "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                " TargetType =\"Button\">" +
                                "<Grid>" +
                                "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                                "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                "</Border>" +
                                "</Grid>" +
                                "</ControlTemplate>";
                            btn.Template = (ControlTemplate)XamlReader.Parse(template);


                        }

                        Grid grd = new Grid();
                        grd.Name = "contentgrid";
                        grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
                        grd.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(100, GridUnitType.Star) });

                        System.Windows.Controls.DockPanel stack1 = new System.Windows.Controls.DockPanel();
                        stack1.Children.Add(btn);
                        Grid.SetColumn(stack1, 0);
                        Grid.SetRow(stack1, 0);
                        grd.Children.Add(stack1);
                        box.Child = grd;
                        box.SetValue(Canvas.TopProperty, dcat3);
                        pnlCat3.Children.Add(box);
                        dcat3 = dcat3 + boxHeight + 20;

                    }
                    else if ((intOrder % 2) == 0)
                    {
                        double boxHeight = 0;

                        POSControls.POSItem PosItem = new POSControls.POSItem(1);

                        PosItem.SuspendLayout();

                        PosItem.ItemExpiryDate = dr["EXPIRYDATE"].ToString();

                        PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                        PosItem.Name = dr["ID"].ToString();
                        PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                        PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                        PosItem.ItemFontFamily = dr["POSFONTTYPE"].ToString();
                        PosItem.ItemFontSize = dr["POSFONTSIZE"].ToString();
                        PosItem.ItemFontBold = dr["ISBOLD"].ToString();
                        PosItem.ItemFontItalic = dr["ISITALICS"].ToString();

                        PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                        PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                        PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                        PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                        PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                        PosItem.ItemSKU = dr["SKU"].ToString();
                        PosItem.ItemName = dr["DESCRIPTION"].ToString();

                        double qtyhand = 0;

                        if (dr["LINKSKU"].ToString() == "0")
                        {
                            PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                            qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                        }
                        else
                        {
                            if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                            {
                                PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                PosDataObject.POS objPOS1 = new PosDataObject.POS();
                                objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                            }
                            else
                            {
                                PosItem.DisplayStockinPOS = false;
                                qtyhand = 0;
                            }
                        }

                        PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                        PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                        PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");
                        GeneralFunctions.LoadPhotofromDB(PosItem);
                        //PosItem.Parent = CategoryID;
                        PosItem.Refresh();

                        System.Windows.Controls.Button btn = new System.Windows.Controls.Button();

                        string itemtext = "";

                        if (PosItem.DisplayStockinPOS)
                        {
                            itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")" : PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")";
                        }
                        else
                        {
                            itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName : PosItem.ItemName;
                        }

                        TextBlock tb = new TextBlock();
                        tb.Text = itemtext;
                        tb.TextAlignment = TextAlignment.Center;
                        tb.TextWrapping = TextWrapping.WrapWithOverflow;
                        tb.VerticalAlignment = VerticalAlignment.Center;
                        tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                        GeneralFunctions.SetWpfFont(tb, dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                        if ((PosItem.ItemForeColor == "") || (PosItem.ItemForeColor == "0") || (PosItem.ItemForeColor.Contains("#00000000")))
                        {

                        }
                        else
                        {
                            tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemForeColor));
                        }

                        /*Size sz = MeasureString(tb, tb.Text);
                        double szMultiply = GeneralFunctions.FormatDouble(sz.Width * sz.Height);
                        double ApproxHeight = 0;
                        if (szMultiply <= 499.99)
                        {
                            ApproxHeight = 45;
                        }
                        else if (szMultiply >= 500 && szMultiply <= 999.99)
                        {
                            ApproxHeight = 58;
                        }
                        else if (szMultiply >= 1000 && itemtext.Length <= 1499.99)
                        {
                            ApproxHeight = 71;
                        }
                        else if (szMultiply >= 1500 && szMultiply <= 1999.99)
                        {
                            ApproxHeight = 84;
                        }
                        else if (szMultiply >= 2000 && szMultiply <= 2499.99)
                        {
                            ApproxHeight = 97;
                        }
                        else
                        {
                            ApproxHeight = 110;
                        }*/

                        double ApproxHeight = 60;

                        btn.Height = ApproxHeight;
                        boxHeight = boxHeight + ApproxHeight;

                        btn.Tag = PosItem;
                        btn.Opacity = 1.0;
                        btn.Focusable = false;
                        btn.Click += Btn_Click;

                        double ifactor = 0.3;
                        if (itemtext.Length <= 8)
                        {
                            ifactor = 0.6;
                        }
                        else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                        {
                            ifactor = 0.8;
                        }
                        else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                        {
                            ifactor = 0.8;
                        }
                        else
                        {
                            ifactor = 0.85;
                        }

                        tb.Width = box.Width * ifactor;
                        Viewbox vwbx1 = new Viewbox();
                        vwbx1.Stretch = Stretch.Uniform;
                        vwbx1.Child = tb;
                        bool blFindImage = false;
                        var img = new Image();
                        bool boolDisplayImageButton = false;

                        GeneralFunctions.LoadPhotofromDB("Product", PosItem.ItemID, img);
                        if (img.Source != null) blFindImage = true;

                        if (blFindImage)
                        {
                            btn.Content = new Image
                            {
                                Source = img.Source,
                                Stretch = Stretch.Fill,
                                Margin = new Thickness(-4)
                            };
                            btn.BorderThickness = new Thickness(0);
                            btn.Margin = new Thickness(0, 0, 0, 0);

                            Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                            if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                            {
                                if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                            }
                            else
                            {
                                bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                            }

                            btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                            string template =
                                "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                " TargetType =\"Button\">" +
                                "<Grid>" +
                                "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                "</Border>" +
                                "</Grid>" +
                                "</ControlTemplate>";
                            btn.Template = (ControlTemplate)XamlReader.Parse(template);
                        }
                        else
                        {
                            btn.Content = vwbx1;

                            if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                            {
                                btn.Background = System.Windows.Media.Brushes.Transparent;
                                if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);
                            }
                            else
                            {
                                btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);
                            }

                            btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                            string template =
                                "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                " TargetType =\"Button\">" +
                                "<Grid>" +
                                "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                                "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                "</Border>" +
                                "</Grid>" +
                                "</ControlTemplate>";
                            btn.Template = (ControlTemplate)XamlReader.Parse(template);


                        }

                        Grid grd = new Grid();
                        grd.Name = "contentgrid";
                        grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
                        grd.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(100, GridUnitType.Star) });

                        System.Windows.Controls.DockPanel stack1 = new System.Windows.Controls.DockPanel();
                        stack1.Children.Add(btn);
                        Grid.SetColumn(stack1, 0);
                        Grid.SetRow(stack1, 0);
                        grd.Children.Add(stack1);
                        box.Child = grd;
                        box.SetValue(Canvas.TopProperty, dcat2);
                        pnlCat2.Children.Add(box);
                        dcat2 = dcat2 + boxHeight + 20;

                    }
                    else
                    {
                        double boxHeight = 0;

                        POSControls.POSItem PosItem = new POSControls.POSItem(1);

                        PosItem.SuspendLayout();

                        PosItem.ItemExpiryDate = dr["EXPIRYDATE"].ToString();

                        PosItem.ShowSKU = (Settings.ShowSKUOnPOSButton == "Y");
                        PosItem.Name = dr["ID"].ToString();
                        PosItem.ItemID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                        PosItem.ItemFont = GeneralFunctions.GetPOSFont(dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                        PosItem.ItemFontFamily = dr["POSFONTTYPE"].ToString();
                        PosItem.ItemFontSize = dr["POSFONTSIZE"].ToString();
                        PosItem.ItemFontBold = dr["ISBOLD"].ToString();
                        PosItem.ItemFontItalic = dr["ISITALICS"].ToString();

                        PosItem.ItemForeColor = dr["POSFONTCOLOR"].ToString();
                        PosItem.ItemBackground = dr["POSBACKGROUND"].ToString();
                        PosItem.ApplicationStyle = GeneralFunctions.GetPOSApplicationStyle(dr["POSSCREENSTYLE"].ToString());
                        PosItem.ItemColor = dr["POSSCREENCOLOR"].ToString();
                        PosItem.ItemStyle = GeneralFunctions.GetPOSStyle(dr["POSBACKGROUND"].ToString(), dr["POSSCREENSTYLE"].ToString());
                        PosItem.ItemSKU = dr["SKU"].ToString();
                        PosItem.ItemName = dr["DESCRIPTION"].ToString();

                        double qtyhand = 0;

                        if (dr["LINKSKU"].ToString() == "0")
                        {
                            PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                            qtyhand = GeneralFunctions.fnDouble(dr["QTYONHAND"].ToString());
                        }
                        else
                        {
                            if (GeneralFunctions.fnDouble(dr["BREAKPACKRATIO"].ToString()) == 1)
                            {
                                PosItem.DisplayStockinPOS = (dr["DISPLAYSTOCKINPOS"].ToString() == "Y");
                                PosDataObject.POS objPOS1 = new PosDataObject.POS();
                                objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                qtyhand = objPOS1.GetOnHandQty(GeneralFunctions.fnInt32(dr["LINKSKU"].ToString()));
                            }
                            else
                            {
                                PosItem.DisplayStockinPOS = false;
                                qtyhand = 0;
                            }
                        }

                        PosItem.CurrentStock = GeneralFunctions.fnInt32(qtyhand);
                        PosItem.ItemType = dr["PRODUCTTYPE"].ToString();
                        PosItem.NegativeStock = (dr["ALLOWZEROSTOCK"].ToString() == "Y");
                        GeneralFunctions.LoadPhotofromDB(PosItem);
                        //PosItem.Parent = CategoryID;
                        PosItem.Refresh();

                        System.Windows.Controls.Button btn = new System.Windows.Controls.Button();

                        string itemtext = "";

                        if (PosItem.DisplayStockinPOS)
                        {
                            itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")" : PosItem.ItemName + " (" + PosItem.CurrentStock.ToString() + ")";
                        }
                        else
                        {
                            itemtext = PosItem.ShowSKU ? PosItem.ItemSKU + " - " + PosItem.ItemName : PosItem.ItemName;
                        }

                        TextBlock tb = new TextBlock();
                        tb.Text = itemtext;
                        tb.TextAlignment = TextAlignment.Center;
                        tb.TextWrapping = TextWrapping.WrapWithOverflow;
                        tb.VerticalAlignment = VerticalAlignment.Center;
                        tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                        GeneralFunctions.SetWpfFont(tb, dr["POSFONTTYPE"].ToString(), dr["POSFONTSIZE"].ToString(), dr["ISBOLD"].ToString(), dr["ISITALICS"].ToString());
                        if ((PosItem.ItemForeColor == "") || (PosItem.ItemForeColor == "0") || (PosItem.ItemForeColor.Contains("#00000000")))
                        {

                        }
                        else
                        {
                            tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemForeColor));
                        }

                        /*Size sz = MeasureString(tb, tb.Text);
                        double szMultiply = GeneralFunctions.FormatDouble(sz.Width * sz.Height);
                        double ApproxHeight = 0;
                        if (szMultiply <= 499.99)
                        {
                            ApproxHeight = 45;
                        }
                        else if (szMultiply >= 500 && szMultiply <= 999.99)
                        {
                            ApproxHeight = 58;
                        }
                        else if (szMultiply >= 1000 && itemtext.Length <= 1499.99)
                        {
                            ApproxHeight = 71;
                        }
                        else if (szMultiply >= 1500 && szMultiply <= 1999.99)
                        {
                            ApproxHeight = 84;
                        }
                        else if (szMultiply >= 2000 && szMultiply <= 2499.99)
                        {
                            ApproxHeight = 97;
                        }
                        else
                        {
                            ApproxHeight = 110;
                        }*/

                        double ApproxHeight = 60;

                        btn.Height = ApproxHeight;
                        boxHeight = boxHeight + ApproxHeight;

                        btn.Tag = PosItem;
                        btn.Opacity = 1.0;
                        btn.Focusable = false;
                        btn.Click += Btn_Click;

                        double ifactor = 0.3;
                        if (itemtext.Length <= 8)
                        {
                            ifactor = 0.6;
                        }
                        else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                        {
                            ifactor = 0.8;
                        }
                        else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                        {
                            ifactor = 0.8;
                        }
                        else
                        {
                            ifactor = 0.85;
                        }

                        tb.Width = box.Width * ifactor;
                        Viewbox vwbx1 = new Viewbox();
                        vwbx1.Stretch = Stretch.Uniform;
                        vwbx1.Child = tb;
                        bool blFindImage = false;
                        var img = new Image();
                        bool boolDisplayImageButton = false;

                        GeneralFunctions.LoadPhotofromDB("Product", PosItem.ItemID, img);
                        if (img.Source != null) blFindImage = true;

                        if (blFindImage)
                        {
                            btn.Content = new Image
                            {
                                Source = img.Source,
                                Stretch = Stretch.Fill,
                                Margin = new Thickness(-4)
                            };
                            btn.BorderThickness = new Thickness(0);
                            btn.Margin = new Thickness(0, 0, 0, 0);

                            Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                            if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                            {
                                if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                            }
                            else
                            {
                                bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                            }

                            btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                            string template =
                                "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                " TargetType =\"Button\">" +
                                "<Grid>" +
                                "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                "</Border>" +
                                "</Grid>" +
                                "</ControlTemplate>";
                            btn.Template = (ControlTemplate)XamlReader.Parse(template);
                        }
                        else
                        {
                            btn.Content = vwbx1;

                            if ((PosItem.ItemColor == "") || (PosItem.ItemColor == "0") || (PosItem.ItemColor.Contains("#00000000")))
                            {
                                btn.Background = System.Windows.Media.Brushes.Transparent;
                                if (SystemVariables.SelectedTheme == "Dark") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                if (SystemVariables.SelectedTheme == "Light") btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);
                            }
                            else
                            {
                                btn.Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(PosItem.ItemColor));
                                btn.BorderThickness = new Thickness(0);
                                btn.Margin = new Thickness(0, 0, 0, 0);
                            }

                            btn.BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)btn.BorderBrush).Color) { Opacity = 0.1 };

                            string template =
                                "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                " TargetType =\"Button\">" +
                                "<Grid>" +
                                "<Border Background=\"" + btn.Background + "\" CornerRadius=\"5\">" +
                                "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                "</Border>" +
                                "</Grid>" +
                                "</ControlTemplate>";
                            btn.Template = (ControlTemplate)XamlReader.Parse(template);


                        }

                        Grid grd = new Grid();
                        grd.Name = "contentgrid";
                        grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
                        grd.ColumnDefinitions.Add(new ColumnDefinition() { Width = new GridLength(100, GridUnitType.Star) });

                        System.Windows.Controls.DockPanel stack1 = new System.Windows.Controls.DockPanel();
                        stack1.Children.Add(btn);
                        Grid.SetColumn(stack1, 0);
                        Grid.SetRow(stack1, 0);
                        grd.Children.Add(stack1);
                        box.Child = grd;
                        box.SetValue(Canvas.TopProperty, dcat1);
                        pnlCat1.Children.Add(box);
                        dcat1 = dcat1 + boxHeight + 20;

                    }


                }

                double dhgt = 0;
                if (dcat1 > dhgt) dhgt = dcat1;
                if (dcat2 > dhgt) dhgt = dcat2;
                if (dcat3 > dhgt) dhgt = dcat3;
                if (dcat4 > dhgt) dhgt = dcat4;
                if (dcat5 > dhgt) dhgt = dcat5;

                double screenH = System.Windows.SystemParameters.PrimaryScreenHeight;
                double screenH4 = screenH * 0.4;
                double screenH5 = screenH * 0.5;
                double screenH6 = screenH * 0.6;




                posPanel.Margin = new Thickness(0, 0, 0, 0);

                if (dhgt < screenH4)
                {
                    posPanel.Height = dhgt;
                }
                else if ((dhgt > screenH4) && (dhgt <= screenH5))
                {
                    posPanel.Height = dhgt + screenH * 0.1;
                    //posPanel.Margin = new Thickness(0, -60, 0, 0);
                }
                else if ((dhgt > screenH5) && (dhgt <= screenH6))
                {
                    posPanel.Height = dhgt + screenH * 0.1;

                }
                else
                {
                    posPanel.Height = dhgt + screenH * 0.1;
                }
            }
            finally
            {

            }
        }


        public async void Lbi_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            await posItem1Click((sender as System.Windows.Controls.Button).Tag as POSControls.POSItem);
        }
        private POSCategory currentParentCategory;
        private bool blOnlyItem = false;
        private POSCategory currentSearchCategory;
        private async void Cat_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            ///aaa
            if (pnlMenuHeaderD.Visibility == Visibility.Visible)
            {
                pnlMenuHeaderD.Visibility = Visibility.Collapsed;
                pnlMenuHeader.Visibility = Visibility.Visible;
            }

            (sender as System.Windows.Controls.Button).Opacity = 0.7;
            (sender as System.Windows.Controls.Button).Refresh();
            await Task.Delay(300);
            txtSearch.InfoText = "Search Items";
            txtSearch.Text = "";

            if (blReturnItem) return;

            (sender as System.Windows.Controls.Button).Opacity = 0.7;
            (sender as System.Windows.Controls.Button).Refresh();
            POSControls.POSCategory poscat = (sender as System.Windows.Controls.Button).Tag as POSControls.POSCategory;
            int GetSubCategoryCount = 0;

            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            GetSubCategoryCount = objPOS.GetChildOfAParentGroup(poscat.CategoryID);


            if (GetSubCategoryCount > 0)
            {
                pnlCategory.Visibility = Visibility.Visible;
                lbCategory.Text = poscat.CategoryName;
                CurrentParentCategoryLevel = CurrentParentCategoryLevel + 1;
                ParentCategoryID = poscat.CategoryID;
                blOnlyItem = false;
                currentParentCategory = poscat;
                LoadPOSButtons();
            }
            else
            {
                pnlCategory.Visibility = Visibility.Visible;
                lbCategory.Text = poscat.CategoryName;
                blOnlyItem = true;
                currentSearchCategory = poscat;
                ParentCategoryID = poscat.ParentCategoryID;
                await LoadPOSItemsOnly(poscat, poscat.CategoryID);
            }
            //await LoadPOSItemsOnly(poscat, poscat.CategoryID);

            boolLoadAllItem = true;


            /*
            POSControls.POSCategory poscat = (sender as System.Windows.Controls.DockPanel).Tag as POSControls.POSCategory;
            blurGrid.Visibility = Visibility.Visible;
            frm_POSAllProducts frmAllProd = new frm_POSAllProducts();
            try
            {
                Point targetLoc = pnlInfo.PointToScreen(new Point(0, 0));

                frmAllProd.FValue1 = targetLoc.X + 15;
                frmAllProd.FValue2 = targetLoc.Y + 32;
                frmAllProd.FValue3 = posPanel.ActualHeight;
                frmAllProd.FValue4 = posPanel.ActualWidth;
                frmAllProd.FValue5 = poscat.CategoryID;

                //frm_Cat = frmAllProd;
                frmAllProd.POSForm = this;
                frmAllProd.Title.Text = "Products for :" + " " + poscat.CategoryName;
                blActiveCategoryScreen = true;
                frmAllProd.ShowDialog();
            }
            finally
            {
                frmAllProd.Close();
                blActiveCategoryScreen = false;
                blurGrid.Visibility = Visibility.Collapsed;
                //frm_Cat = null;
            }*/
        }

        private void Cat_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            //DocMessage.MsgInformation(((sender as System.Windows.Controls.DockPanel).Tag as POSControls.POSCategory).CategoryName);
            //await posItem1Click((sender as System.Windows.Controls.DockPanel).Tag as POSControls.POSCategory);
        }

        private ListBoxItem MakePOSItem(POSControls.POSItem posItem)
        {
            ListBoxItem lbi = new ListBoxItem();
            Grid grd = new Grid();
            grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });
            grd.RowDefinitions.Add(new RowDefinition() { Height = new GridLength(6) });
            grd.RowDefinitions.Add(new RowDefinition() { Height = GridLength.Auto });

            Image img = new Image()
            {
                Width = 40,
                Height = 40,
                Stretch = Stretch.Uniform,
                Visibility = Visibility.Collapsed
            };
            try
            {
                using (var ms = new MemoryStream())
                {
                    if (posItem.Image != null)
                    {
                        posItem.Image.Save(ms, System.Drawing.Imaging.ImageFormat.Bmp);
                        ms.Seek(0, SeekOrigin.Begin);

                        var bitmapImage = new BitmapImage();
                        bitmapImage.BeginInit();
                        bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                        bitmapImage.StreamSource = ms;
                        bitmapImage.EndInit();

                        img.Source = bitmapImage;
                    }
                    else
                    {
                        img.Source = null;
                    }
                }
            }
            catch (Exception)
            {
                img.Source = null;
            }

            Grid.SetRow(img, 0);

            TextBlock txt = new TextBlock()
            {
                Text = posItem.ItemName
            };
            Grid.SetRow(txt, 2);

            grd.Children.Add(img);
            grd.Children.Add(txt);

            lbi.Tag = posItem;
            lbi.Content = grd;

            return lbi;
        }

        public void SetQtyFromCategory(int qty)
        {
            intPressQty = qty;
        }

        /// Add Item Click Event
        int _GlobalposItem1ClickCounter = 0;



        public async Task posItem1Click(POSControls.POSItem sender)
        {
            var watch = System.Diagnostics.Stopwatch.StartNew();
            Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked");

            /* 
                purpose : assign Click event to Items
            */

            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                //SecondMonitor.ClearWeightInfo();
            }

            if (strCurrentServiceType == "Sales")
            {
                if ((blReturnItem) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blReturnItem) && (dtblPOS.Rows.Count == 0))
                {
                    blReturnItem = false;
                }
            }

            if (IsDonationRecordExistsInCart()) return;

            if (strCurrentServiceType == "Rent")
            {
                if ((blRentRecall) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blRentRecall) && (dtblPOS.Rows.Count == 0))
                {
                    blRentRecall = false;
                    blRentIssued = true;
                }
                else if (((sender as POSControls.POSItem).ItemType == "S") || ((sender as POSControls.POSItem).ItemType == "W")) return;
            }

            if (strCurrentServiceType == "Repair")
            {
                /*if ((blRepairRecall)&& (dtblPOS.Rows.Count > 0)) return;
                else if ((blRepairRecall) && (dtblPOS.Rows.Count == 0))
                {
                    blRepairRecall = false;
                    blRepairIssued = true;
                }
                else 
                 */
                if ((sender as POSControls.POSItem).ItemType == "W") return;
            }

            if ((intCustID == 0) && (Settings.CustomerInfo == 2))
            {
                if (dtblPOS.Rows.Count == 0)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Enter_valid_customer_before_ringing_item, "POS", MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtCust);
                    return;
                }
            }

            if (strCurrentServiceType == "Sales")
            {
                if ((sender as POSControls.POSItem).ItemType == "Q")
                {

                    if (!ValidCartForEntryTicket())
                    {
                        if (new MessageBoxWindow().Show("Items other than entry ticket exists in the cart." + "\n" + "You must remove items from the cart." + "\n" + Properties.Resources.Do_you_want_to_continue_, Properties.Resources.Validation, MessageBoxButton.YesNo, MessageBoxImage.Information) == MessageBoxResult.Yes)
                        {
                            InitializeScreen();
                        }
                        else
                        {
                            return;


                        }

                        string xxxx = GetEnrtyTicket();
                        if (xxxx == "") return;
                    }
                    else
                    {
                        string xxxx1 = GetEnrtyTicket();
                        if (xxxx1 == "") return;
                    }
                }
            }


            bool blExit = false;
            string line1 = "";
            string line2 = "";
            int intRowID = 0;

            intRowID = (sender as POSControls.POSItem).ItemID;

            bool blfinddata = false;
            string strselectid = intRowID.ToString();
            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";
            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";
            string refRentPrompt = "";

            int MixMatchID = 0;
            string MixMatchFlag = "N";
            string MixMatchCat = "";
            string MixMatchType = "";
            double MixMatchVal = 0;
            int MixMatchPlus = 0;
            double MixMatchPartPrice = 0;
            bool MixMatchApplicableLast = false;

            int SaleID = 0;
            double SalePrice = 0;

            int iAge = 0;

            string refUOM = "";
            string refExpiry = "";
            if (!GeneralFunctions.ProceedFromItemImage((sender as POSControls.POSItem).ItemID)) return;
            //Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked timebefore fetch ");
            //Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
            FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                         ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY,
                         ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt, ref refRentPrompt, ref refRepairAmt,
                         ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

            DataTable dtblBuyGetFree = new DataTable();
            //Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked timeafter fetch ");
            //Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
            int TBuyNFreeID = 0;
            int TBuyNFreeQty = 0;
            bool TBuyNFreeProceed = false;
            ArrayList TBuyNFree_ItemToBeDeletedFirst = new ArrayList();

            int TSaleID = 0;
            double TSalePrice = 0;
            int TMixMatchID = 0;


            /// For Sale, before adding an item into cart, first check if active sale price is present or not. If not present then check Mix n Match. 
            /// If active Mix n Match found, then cart added with Mix n Match data.
            /// If no active Mix n Match found then check for Buy n Get Free promotion, if satisfied then Buy n Get Free data will the added into cart

            if (strCurrentServiceType == "Sales")
            {
                if ((sender as POSControls.POSItem).ItemExpiryDate != "")
                {
                    DisplayItemExpiryAlert((sender as POSControls.POSItem).ItemExpiryDate);
                }
            }


            if (strCurrentServiceType == "Sales")
            {
                //Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked timebefore FetchActiveSale ");
                //Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
                FetchActiveSale((sender as POSControls.POSItem).ItemID, ref TSaleID, ref TSalePrice);
                //Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked timebefore FetchActiveSale");
                //Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
                if (TSaleID == 0)
                {
                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    TMixMatchID = objPOS.ActiveMixNMatch((sender as POSControls.POSItem).ItemID);
                }
                if (TMixMatchID == 0)
                {
                    dtblBuyGetFree = CheckIfActiveBuyNGetFree((sender as POSControls.POSItem).ItemID);
                    if (dtblBuyGetFree.Rows.Count > 0)
                    {
                        TBuyNFreeProceed = CheckCartForProceedBuyNGetFree((sender as POSControls.POSItem).ItemID, dtblBuyGetFree, ref TBuyNFreeID, ref TBuyNFreeQty, ref TBuyNFree_ItemToBeDeletedFirst);
                    }
                    else
                    {
                        TBuyNFreeProceed = false;
                    }
                }

                if (TBuyNFreeProceed)
                {
                    AddBuyNGetFreeQty((sender as POSControls.POSItem).ItemID, (sender as POSControls.POSItem).ItemName, TBuyNFreeID, TBuyNFreeQty, TBuyNFree_ItemToBeDeletedFirst, TSaleID, TSalePrice);
                }

            }


            if (!TBuyNFreeProceed)
            {

                if ((strCurrentServiceType == "Sales") && (TMixMatchID > 0))
                {
                    for (int lp = 1; lp <= intPressQty; lp++)
                    {
                        await SelectLoadItemMixMatch((sender as POSControls.POSItem).ItemID, (sender as POSControls.POSItem).ItemName);
                    }
                }
                else
                {
                    if ((refType == "P") || (refType == "M") || (refType == "K") || (refType == "U") || (refType == "W") || (refType == "E")
                            || (refType == "F") || (refType == "S") || (refType == "T"))
                    {
                        if (strCurrentServiceType == "Sales")
                        {
                            //Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked timebefore FetchActiveSale");
                            //Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
                            FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref SaleID, ref SalePrice);
                            //Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked timebefore FetchActiveSale");
                            //Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
                            if (SalePrice == 0)
                            {
                                FetchMix_n_Match(GeneralFunctions.fnInt32(strselectid), ref MixMatchID, ref MixMatchFlag, ref MixMatchCat, ref MixMatchType,
                                                 ref MixMatchVal, ref MixMatchPlus, ref MixMatchPartPrice, ref MixMatchApplicableLast);

                                // MixMatchFlag = N / Y - Not Applicable / Applicale
                                // MixMatchCat = N / P - Normal Pricing / Plus Pricing
                                // MixMatchType = P/A - % off / Amount off
                            }
                        }
                    }

                    if (Settings.POSIDRequired == "Y")
                    {
                        if (GeneralFunctions.fnInt32(refAge) > 0)
                        {
                            iAge = GeneralFunctions.fnInt32(refAge);
                            if (!AgeCheck(DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)))) return;
                            //if (new MessageBoxWindow().Show(Properties.Resources."Minimum f", "frmPOSN_msg_MinimumAge") + refAge + Properties.Resources." : Birthday on or before ", "frmPOSN_msg_Birthdayonorbefore") + DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)).ToString("MM/dd/yyyy"), Properties.Resources."Age Verification", "frmPOSN_msg_AgeVerification"), MessageBoxButton.OKCancel, MessageBoxImage.Information) == DialogResult.Cancel) return;
                        }
                    }
                    string strUOMCount = "";
                    string strUOMPrice = "";
                    string strUOMDesc = "";

                    string strMatxOID = "";
                    string strMatxOV1 = "";
                    string strMatxOV2 = "";
                    string strMatxOV3 = "";
                    string strSLID = "0";

                    if ((sender as POSControls.POSItem).ItemType == "U")
                    {
                        frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                        try
                        {

                            frm_POSProductAddnDlg.ProductType = "Unit of Measure";
                            frm_POSProductAddnDlg.PID = intRowID;
                            frm_POSProductAddnDlg.Heading = Properties.Resources.Unit_of_Measure_Data__ + " " + (sender as POSControls.POSItem).ItemName;
                            blurGrid.Visibility = Visibility.Visible;
                            frm_POSProductAddnDlg.ShowDialog();
                            blurGrid.Visibility = Visibility.Collapsed;
                            if (frm_POSProductAddnDlg.DialogResult == true)
                            {
                                strUOMCount = frm_POSProductAddnDlg.UOMCount;
                                strUOMPrice = frm_POSProductAddnDlg.UOMPrice;
                                strUOMDesc = frm_POSProductAddnDlg.UOMDesc;
                            }
                            else blExit = true;
                        }
                        finally
                        {
                        }
                        if (blExit) return;
                    }

                    if ((sender as POSControls.POSItem).ItemType == "M")
                    {
                        frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                        try
                        {

                            frm_POSProductAddnDlg.ProductType = "Matrix";
                            frm_POSProductAddnDlg.PID = intRowID;
                            frm_POSProductAddnDlg.Heading = Properties.Resources.Matrix_Data__ + " " + (sender as POSControls.POSItem).ItemName;
                            blurGrid.Visibility = Visibility.Visible;
                            frm_POSProductAddnDlg.ShowDialog();
                            blurGrid.Visibility = Visibility.Collapsed;
                            if (frm_POSProductAddnDlg.DialogResult == true)
                            {
                                strMatxOID = frm_POSProductAddnDlg.MatrixOID;
                                strMatxOV1 = frm_POSProductAddnDlg.MatrixOV1;
                                strMatxOV2 = frm_POSProductAddnDlg.MatrixOV2;
                                strMatxOV3 = frm_POSProductAddnDlg.MatrixOV3;
                            }
                            else blExit = true;
                        }
                        finally
                        {
                        }
                        if (blExit) return;
                    }

                    if ((sender as POSControls.POSItem).ItemType == "E")
                    {
                        frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                        try
                        {

                            frm_POSProductAddnDlg.ProductType = "Serialized";
                            frm_POSProductAddnDlg.dtblS = dtblPOS;
                            frm_POSProductAddnDlg.PID = intRowID;
                            frm_POSProductAddnDlg.Heading = Properties.Resources.Serialized_Data__ + " " + (sender as POSControls.POSItem).ItemName;
                            blurGrid.Visibility = Visibility.Visible;
                            frm_POSProductAddnDlg.ShowDialog();
                            blurGrid.Visibility = Visibility.Collapsed;
                            if (frm_POSProductAddnDlg.DialogResult == true)
                            {
                                strSLID = frm_POSProductAddnDlg.SLID;
                            }
                            else blExit = true;
                        }
                        finally
                        {
                        }
                        if (blExit) return;
                    }

                    // get Rental data //

                    string strRentType = "NA";
                    double dblRentDuration = 0;
                    double dblRentValue = 0;
                    double dblRentDeposit = 0;

                    if (strCurrentServiceType == "Rent")
                    {
                        if (!blRentRecall)
                        {
                            frmPOSRentalSelectDlg frmrentsel = new frmPOSRentalSelectDlg();
                            try
                            {

                                frmrentsel.PID = intRowID;
                                blurGrid.Visibility = Visibility.Visible;
                                frmrentsel.ShowDialog();
                                blurGrid.Visibility = Visibility.Collapsed;
                                if (frmrentsel.DialogResult == true)
                                {
                                    strRentType = frmrentsel.RentType;
                                    dblRentDuration = frmrentsel.RentDuration;
                                    dblRentValue = frmrentsel.RentValue;
                                    dblRentDeposit = frmrentsel.RentDeposit;
                                }
                                else blExit = true;
                            }
                            finally
                            {
                            }
                            if (blExit) return;
                        }
                    }

                    // 

                    string strRepairItemTag = "";
                    string strRepairItemSlNo = "";
                    string strRepairItemPurchaseDate = "";

                    int intfocusrow = 0;
                    double dblRate = 0;
                    double dblPrice = 0;

                    //if (strCurrentServiceType != "Repair")
                    //{
                    if (!CheckStock(GeneralFunctions.fnInt32(strselectid), 1, strMatxOID, strMatxOV1, strMatxOV2, strMatxOV3))
                    {
                        new MessageBoxWindow().Show(Properties.Resources.No_Stock_available_, Properties.Resources.Stock_Validation, MessageBoxButton.OK, MessageBoxImage.Error);
                        return;
                    }
                    //}

                    if (!blfinddata)
                    {
                        if (strCurrentServiceType == "Sales")
                        {
                            if (SaleID > 0)
                            {
                                refPrompt = "N";
                                refPrice = SalePrice.ToString();
                                if (refType == "U") strUOMPrice = SalePrice.ToString();
                            }
                            if (refType == "D")
                            {

                                double promptPrice = GetDonationPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice), refPrompt);
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                        {
                                              intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                        {
                                              intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(intPressQty*newpretaxamt),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", promptPrice.ToString(),
                                ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);

                            }
                            else if (refType == "U")
                            {
                                if (refPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName + " * " + strUOMDesc,
                                                                         GeneralFunctions.fnDouble(strUOMPrice));

                                    if (promptPrice == -99999) return;

                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName + " * " + strUOMDesc,refType,refOHQty,
                                              refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = (sender as POSControls.POSItem).ItemName + " * " + strUOMDesc + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,
                                              refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " +  Properties.Resources.Mix_n_Match + amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,Convert.ToDecimal(intPressQty*newpretaxamt),refUOM,"","","","","N"});
                                    }

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName + " * " + strUOMDesc, "1",
                                    promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                                else
                                {
                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName+ " * "+ strUOMDesc,refType,refOHQty,
                                              refNQty,refCost,intPressQty,strUOMPrice,refNPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(strUOMPrice)),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            strUOMPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(strUOMPrice)),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = (sender as POSControls.POSItem).ItemName + " * " + strUOMDesc + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,
                                              refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                            refPrice,Convert.ToDecimal(intPressQty*newpretaxamt),refUOM,"","","","","N"});
                                    }

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName + " * " + strUOMDesc, "1", strUOMPrice,
                                    ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }
                            else if (refType == "M")
                            {
                                if (refPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;

                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,Convert.ToDecimal(intPressQty*newpretaxamt),refUOM,"","","","","N"});
                                    }

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", promptPrice.ToString(),
                                    ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                                else
                                {
                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,intPressQty,
                                              refPrice,refNPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,intPressQty,
                                              refPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(intPressQty*newpretaxamt),refUOM,"","","","","N"});
                                    }

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }
                            else if (refType == "E")
                            {
                                if (refPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;

                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                            {intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strSLID,"0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            {intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt),strSLID,"0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                            promptPrice,Convert.ToDecimal(intPressQty*newpretaxamt),refUOM,"","","","","N"});
                                    }

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", promptPrice.ToString(),
                                    ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                                else
                                {
                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable 
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),strSLID,"0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt),strSLID,"0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(intPressQty*newpretaxamt),refUOM,"","","","","N"});
                                    }

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }
                            else if (refType == "W")
                            {
                                if (CheckForFixedWeight(intRowID))
                                {
                                    weightitemid = intRowID;
                                    weightitemname = (sender as POSControls.POSItem).ItemName;
                                    await AddFixedWeightedItem();
                                }
                                else
                                {
                                    if ((Settings.ScaleDevice == "Datalogic Scale") && (m_posScale != null))
                                    {
                                        try
                                        {
                                            //if (!tmrDL.Enabled) tmrDL.Enabled = true; --Sam
                                            weightitemid = intRowID;
                                            weightitemname = (sender as POSControls.POSItem).ItemName;
                                            weightstring = m_posScale.ReadWeight(20000).ToString();

                                            double Tare = 0;

                                            double Tr1 = 0;
                                            double Tr2 = 0;
                                            FetchTare(weightitemid, ref Tr1, ref Tr2);

                                            Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);


                                            if (blTareEntry)
                                            {
                                                Tare = dblTareEntryValue;
                                            }

                                            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                            {
                                                SecondMonitor.AddWeightInfo(GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()) + " " + m_posScale.WeightUnit.ToString(), Tare);
                                            }

                                            if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                            {
                                                /*if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                {
                                                    SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + m_posScale.WeightUnit.ToString());
                                                }*/
                                                await AddWeightedItem();

                                            }
                                            else
                                            {
                                                DocMessage.MsgInformation(Properties.Resources.Invalid_scale_weight);
                                                return;
                                            }
                                        }
                                        catch
                                        {
                                            DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                            return;
                                        }

                                    }
                                    else if ((Settings.ScaleDevice == "Kilotech") && (Settings.COMPort != "(None)"))
                                    {
                                        try
                                        {
                                            string wt = "";
                                            blGetWeight = false;
                                            if (IsActiveScale1())
                                            {
                                                if (s_wght != 0) wt = s_wght.ToString();
                                                if (wt != "")
                                                {
                                                    weightitemid = intRowID;
                                                    weightitemname = (sender as POSControls.POSItem).ItemName;
                                                    weightstring = wt;
                                                    weightuom = s_wght_u;
                                                    double Tare = 0;
                                                    double Tr1 = 0;
                                                    double Tr2 = 0;
                                                    FetchTare(weightitemid, ref Tr1, ref Tr2);

                                                    Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                                                    if (blTareEntry)
                                                    {
                                                        Tare = dblTareEntryValue;
                                                    }

                                                    if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                    {
                                                        if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                        {
                                                            SecondMonitor.AddWeightInfo(GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()) + " " + s_wght_u, Tare);
                                                        }

                                                        await AddWeightedItem();


                                                    }
                                                    else
                                                    {
                                                        DocMessage.MsgInformation(Properties.Resources.No_scale_weight);
                                                        return;
                                                    }
                                                }
                                                else
                                                {
                                                    blGetWeight = false;
                                                    DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                return;
                                            }
                                        }
                                        catch
                                        {
                                            DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                            return;
                                        }

                                    }
                                    else if ((Settings.ScaleDevice == "Live Weight") && (Settings.COMPort1 != "(None)"))
                                    {
                                        //weightitemid = intRowID;
                                        //weightitemname = (sender as POSControls.POSItem).ItemName;
                                        ////dtblLiveWeightStable.Rows.Clear();
                                        ////tmrLW.Enabled = true;
                                        //await AddWeightedItem();
                                        /*try
                                        {
                                            string wt = "";
                                            blGetWeight = false;
                                            if (s_wght != 0) wt = s_wght.ToString();
                                            if (wt != "")
                                            {
                                                weightitemid = intRowID;
                                                weightitemname = (sender as POSControls.POSItem).ItemName;
                                                weightstring = wt;

                                                double Tare = 0;
                                                FetchTare(weightitemid, ref Tare);
                                                if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                {
                                                    if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                    {
                                                        SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + s_wght_u);
                                                    }

                                                    AddWeightedItem();

                                                }
                                                else
                                                {
                                                    DocMessage.MsgInformation(Properties.Resources."No scale weight");
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                blGetWeight = false;
                                                DocMessage.MsgInformation(Properties.Resources."Cannot read from scale device");
                                                return;
                                            }
                                        }
                                        catch
                                        {
                                            DocMessage.MsgInformation(Properties.Resources."Cannot read from scale device");
                                            return;
                                        }*/

                                        bool proceedflag = false;
                                        double wqty = 0;
                                        double wdisc = 0;
                                        string val1 = "";
                                        string val2 = "0";
                                        string val3 = "0";
                                        string val4 = "";
                                        string val5 = "";

                                        frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                                        try
                                        {

                                            frm_POSItemDlg.BlankLine = false;
                                            //Todo: frm_POSItemDlg.ParentForm = this;
                                            frm_POSItemDlg.IsEdit = false;
                                            frm_POSItemDlg.ServiceType = strCurrentServiceType;
                                            frm_POSItemDlg.ProductDesc = (sender as POSControls.POSItem).ItemName;
                                            //frm_POSItemDlg.Qty = intPressQty;
                                            frm_POSItemDlg.Qty = 0.00;
                                            frm_POSItemDlg.Price = GeneralFunctions.fnDouble(refPrice);
                                            frm_POSItemDlg.Weighted = true;
                                            frm_POSItemDlg.WeightedUOM = refUOM;
                                            frm_POSItemDlg.txtQty.Mask = "f3";
                                            blurGrid.Visibility = Visibility.Visible;
                                            frm_POSItemDlg.ShowDialog();
                                            blurGrid.Visibility = Visibility.Collapsed;
                                            if (frm_POSItemDlg.DialogResult == true)
                                            {
                                                proceedflag = true;
                                                wqty = frm_POSItemDlg.Qty;
                                                wdisc = frm_POSItemDlg.Discount;
                                                if (!GeneralFunctions.IsValidScaleWeight_POS(wqty.ToString(), true)) return;
                                                if (blTareEntry)
                                                {
                                                    wqty = wqty - dblTareEntryValue;
                                                    if (wqty <= 0)
                                                    {
                                                        new MessageBoxWindow().Show(Properties.Resources.Enter_valid_weight, Properties.Resources.Weight_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        finally
                                        {
                                        }
                                        if (!proceedflag) return;

                                        if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                        {
                                            SecondMonitor.AddWeightInfo(GeneralFunctions.fnDouble(wqty).ToString(), 0);
                                        }

                                        if (wdisc > 0)
                                        {
                                            val1 = "A";
                                            val2 = wdisc.ToString();
                                            val3 = wdisc.ToString();
                                            val4 = "9988";
                                            val5 = Properties.Resources.Discount__.Replace("$", SystemVariables.CurrencySymbol) + wdisc.ToString("f");
                                        }

                                        if (refPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                            if (promptPrice == -99999) return;

                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable 
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),wdisc == 0 ? (sender as POSControls.POSItem).ItemName : (sender as POSControls.POSItem).ItemName + "\n",refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),refUOM,"","","","","N"});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (promptPrice * wqty - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (promptPrice * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                                dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),refUOM,"","","","","N"});
                                            }

                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, wqty.ToString(), promptPrice.ToString(),
                                            ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);

                                        }
                                        else
                                        {
                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                            {
                                                intRowID.ToString(),wdisc == 0 ?(sender as POSControls.POSItem).ItemName : (sender as POSControls.POSItem).ItemName + "\n",refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),refUOM,"","","","","N"});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (GeneralFunctions.fnDouble(refPrice) * wqty - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                                dtblPOS.Rows.Add(new object[]
                                            {
                                                intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"","","","","N"});
                                            }

                                            line1 = "";
                                            line2 = "";

                                            RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, wqty.ToString(), refPrice, ref line1, ref line2);

                                            DisplayPoleText(2, "N", "N", line1, line2);
                                        }

                                        blTareEntry = false;
                                        dblTareEntryValue = 0;

                                    }
                                    else if (Settings.ScaleDevice == "XEPOS")
                                    {
                                        string strfilename = "";
                                        strfilename = System.AppDomain.CurrentDomain.BaseDirectory;
                                        if (strfilename.EndsWith("\\"))
                                        {
                                            strfilename = strfilename + "Weight.exe";
                                        }
                                        else
                                        {
                                            strfilename = strfilename + "\\Weight.exe";
                                        }
                                        if (!System.IO.File.Exists(strfilename)) return;

                                        blopenweight = true;
                                        weightcallfrom = "POSItem";

                                        weightitemid = intRowID;
                                        weightitemname = (sender as POSControls.POSItem).ItemName;

                                        Process p = new Process();
                                        p.StartInfo.FileName = strfilename;
                                        p.Start();
                                    }
                                    else
                                    {
                                        bool proceedflag = false;
                                        double wqty = 0;
                                        double wdisc = 0;
                                        string val1 = "";
                                        string val2 = "0";
                                        string val3 = "0";
                                        string val4 = "";
                                        string val5 = "";

                                        frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                                        try
                                        {

                                            frm_POSItemDlg.BlankLine = false;
                                            //Todo: frm_POSItemDlg.ParentForm = this;
                                            frm_POSItemDlg.IsEdit = false;
                                            frm_POSItemDlg.ServiceType = strCurrentServiceType;
                                            frm_POSItemDlg.ProductDesc = (sender as POSControls.POSItem).ItemName;
                                            frm_POSItemDlg.Qty = intPressQty;
                                            frm_POSItemDlg.Price = GeneralFunctions.fnDouble(refPrice);
                                            frm_POSItemDlg.Weighted = true;
                                            frm_POSItemDlg.WeightedUOM = refUOM;
                                            blurGrid.Visibility = Visibility.Visible;
                                            frm_POSItemDlg.ShowDialog();
                                            blurGrid.Visibility = Visibility.Collapsed;
                                            if (frm_POSItemDlg.DialogResult == true)
                                            {
                                                proceedflag = true;
                                                wqty = frm_POSItemDlg.Qty;
                                                wdisc = frm_POSItemDlg.Discount;
                                                if (!GeneralFunctions.IsValidScaleWeight_POS(wqty.ToString(), true)) return;
                                                if (blTareEntry)
                                                {
                                                    wqty = wqty - dblTareEntryValue;
                                                    if (wqty <= 0)
                                                    {
                                                        new MessageBoxWindow().Show(Properties.Resources.Enter_valid_weight, Properties.Resources.Weight_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        finally
                                        {
                                        }
                                        if (!proceedflag) return;

                                        if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                        {
                                            SecondMonitor.AddWeightInfo(GeneralFunctions.fnDouble(wqty).ToString(), 0);
                                        }

                                        if (wdisc > 0)
                                        {
                                            val1 = "A";
                                            val2 = wdisc.ToString();
                                            val3 = wdisc.ToString();
                                            val4 = "9988";
                                            val5 = Properties.Resources.Discount__.Replace("$", SystemVariables.CurrencySymbol) + wdisc.ToString("f");
                                        }

                                        if (refPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                            if (promptPrice == -99999) return;

                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable 
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),wdisc == 0 ? (sender as POSControls.POSItem).ItemName : (sender as POSControls.POSItem).ItemName + "\n",refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),refUOM,"","","","","N"});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (promptPrice * wqty - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (promptPrice * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                                dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),refUOM,"","","","","N"});
                                            }

                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, wqty.ToString(), promptPrice.ToString(),
                                            ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);

                                        }
                                        else
                                        {
                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                            {
                                                intRowID.ToString(),wdisc == 0 ?(sender as POSControls.POSItem).ItemName : (sender as POSControls.POSItem).ItemName + "\n",refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),refUOM,"","","","","N"});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (GeneralFunctions.fnDouble(refPrice) * wqty - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                                dtblPOS.Rows.Add(new object[]
                                            {
                                                intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"","","","","N"});
                                            }

                                            line1 = "";
                                            line2 = "";

                                            RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, wqty.ToString(), refPrice, ref line1, ref line2);

                                            DisplayPoleText(2, "N", "N", line1, line2);
                                        }

                                        blTareEntry = false;
                                        dblTareEntryValue = 0;
                                    }


                                    ////****
                                }
                            }
                            else if ((refType == "F") && (Settings.AddGallon == "Y"))
                            {

                                double gl = 0;
                                bool pf = false;
                                frm_POSGallonEntryDlg fgaldlg = new frm_POSGallonEntryDlg();
                                try
                                {
                                    blurGrid.Visibility = Visibility.Visible;
                                    fgaldlg.ShowDialog();
                                    blurGrid.Visibility = Visibility.Collapsed;
                                    if (fgaldlg.DialogResult == true)
                                    {
                                        pf = true;
                                        gl = fgaldlg.Gallon;
                                        gl = fgaldlg.Gallon;
                                    }
                                }
                                finally
                                {
                                }
                                if (!pf) return;


                                if (refPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;

                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable 
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              gl,promptPrice,refNPrice,Convert.ToDecimal(gl*promptPrice),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(gl*promptPrice),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              gl,promptPrice,refNPrice,Convert.ToDecimal(gl*newpretaxamt),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(gl*newpretaxamt),refUOM,"","","","","N"});
                                    }

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", promptPrice.ToString(),
                                    ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);

                                }
                                else
                                {
                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {

                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              gl,refPrice,refNPrice,Convert.ToDecimal(gl*GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(gl*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              gl,refPrice,refNPrice,Convert.ToDecimal(gl*newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                             refPrice,Convert.ToDecimal(gl*newpretaxamt).ToString(),refUOM,"","","","","N"});

                                    }

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }


                            }
                            else
                            {
                                if (refPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;

                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(intPressQty*newpretaxamt),refUOM,"","","","","N"});
                                    }

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", promptPrice.ToString(),
                                    ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);

                                }
                                else
                                {
                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {

                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N", "0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = (sender as POSControls.POSItem).ItemName + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),linetxt,refType,refOHQty,refNQty,refCost,
                                              intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),refUOM,"","","","","N"});

                                    }

                                    line1 = "";
                                    line2 = "";
                                    //Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked timebefore Display");
                                    //Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", refPrice, ref line1, ref line2);
                                    //Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked timebefore Display");
                                    //Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                    //Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked timebefore Display");
                                    //Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
                                }
                            }

                            if (Settings.PriceLevelForOneTime == "Y")
                            {
                                Settings.PriceLevelForOneTime = "N";
                                intUsePriceLevel = Settings.UsePriceLevel;
                            }

                        }

                        if (strCurrentServiceType == "Rent")
                        {
                            if (refType == "U")
                            {
                                if (refRentPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName + " * " + strUOMDesc, dblRentValue);
                                    if (promptPrice == -99999) return;

                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName + " * " + strUOMDesc,refType,
                                              refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice*intPressQty),
                                              strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,
                                              strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice*intPressQty),refUOM,"","","","","N"});
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName + " * " + strUOMDesc, "1",
                                    promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName+ " * "+ strUOMDesc,refType,refOHQty,
                                              refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue*intPressQty),
                                              strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,
                                              strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue*intPressQty),refUOM,"","","","","N"});

                                    line1 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName + " * " + strUOMDesc, "1", strUOMPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }
                            else if (refType == "M")
                            {
                                if (refRentPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, dblRentValue);
                                    if (promptPrice == -99999) return;
                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice*intPressQty),"0","0","0",
                                              strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,
                                              strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice*intPressQty),refUOM,"","","","","N"});
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),
                                              "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue),refUOM, "","","",""});
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }
                            else if (refType == "E")
                            {
                                if (refRentPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;
                                    dtblPOS.Rows.Add(new object[]
                                          {   intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice*intPressQty),
                                              strSLID,"0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,
                                              strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                             "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice*intPressQty),refUOM,"","","","","N"});
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                                          {   intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue*intPressQty),strSLID,
                                              "0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,
                                              strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"","0","X",++CartSL,"",iAge,
                                              dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue*intPressQty),refUOM,"","","","","N"});
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }
                            /*else if (refType == "W")
                            {
                                frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                                try
                                {
                                    frm_POSItemDlg.BlankLine = false;
                                    frm_POSItemDlg.Weighted = true;
                                    frm_POSItemDlg.IsEdit = false;
                                    frm_POSItemDlg.ProductDesc = (sender as POSControls.POSItem).ItemName;
                                    frm_POSItemDlg.Qty = 1;
                                    frm_POSItemDlg.Price = GeneralFunctions.fnDouble(refPrice);
                                    frm_POSItemDlg.ShowDialog();
                                    if (frm_POSItemDlg.DialogResult == true)
                                    {
                                        dtblPOS.Rows.Add(new object[] {   intRowID.ToString(),
                                                      (sender as POSControls.POSItem).ItemName,
                                                      refType,refOHQty,refNQty,refCost,
                                                      frm_POSItemDlg.Qty,
                                                      frm_POSItemDlg.Price,
                                                      refNPrice,
                                                      Convert.ToDecimal(frm_POSItemDlg.Qty * frm_POSItemDlg.Price),"0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1" });

                                        line1 = "";
                                        line2 = "";
                                        RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, frm_POSItemDlg.Qty.ToString(), frm_POSItemDlg.Price.ToString(), ref line1, ref line2);
                                        DisplayPoleText(2, "N", "N", line1, line2);
                                    }
                                    else
                                    {
                                        return;
                                    }
                                }
                                finally
                                {
                                    frm_POSItemDlg.Dispose();
                                }
                            }*/
                            else
                            {

                                if (refRentPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, dblRentValue);
                                    if (promptPrice == -99999) return;
                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(dblRentDuration*promptPrice*intPressQty),"0","0","0","","","","",
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),promptPrice.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(dblRentDuration*promptPrice*intPressQty),refUOM,"","","","","N"});
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);

                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                                                { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                                  intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue*intPressQty),"0","0","0",
                                                  "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0",
                                                  "N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                  dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                  0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                  dblRentValue,Convert.ToDecimal(dblRentDuration*dblRentValue*intPressQty),refUOM,"","","","","N"});
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }

                            if (Settings.PriceLevelForOneTime == "Y")
                            {
                                Settings.PriceLevelForOneTime = "N";
                                intUsePriceLevel = Settings.UsePriceLevel;
                            }
                            SetCartDisplay();
                            gridControl1.ItemsSource = dtblPOS;
                            ToggleWithEmptyCart();
                            gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                            GeneralFunctions.SetFocus(txtSKU);

                            int rwindx = -1;
                            foreach (DataRowView drv in dtblPOS.DefaultView)
                            {
                                rwindx++;
                                if ((drv["ITEMINDEX"].ToString() == "1") && (drv["SERVICE"].ToString() == "Rent"))
                                {
                                    gridControl1.SetCellValue(rwindx, colProduct, drv["PRODUCT"].ToString().Replace("\n", "") + "\n");
                                }
                            }
                        }


                        /////// REPAIR 

                        if (strCurrentServiceType == "Repair")
                        {
                            if (refRepairPromptTag == "Y")
                            {
                                frmPOSRepairItemInfoDlg frm_POSRepairItemInfoDlg = new frmPOSRepairItemInfoDlg();
                                try
                                {
                                    blurGrid.Visibility = Visibility.Visible;
                                    frm_POSRepairItemInfoDlg.ShowDialog();
                                    blurGrid.Visibility = Visibility.Collapsed;
                                    if (frm_POSRepairItemInfoDlg.DialogResult == true)
                                    {

                                        strRepairItemTag = frm_POSRepairItemInfoDlg.RepairItemTag;
                                        strRepairItemSlNo = frm_POSRepairItemInfoDlg.RepairItemSlNo;
                                        if (frm_POSRepairItemInfoDlg.RepairItemPurchaseDate == Convert.ToDateTime(null)) strRepairItemPurchaseDate = "";
                                        else strRepairItemPurchaseDate = frm_POSRepairItemInfoDlg.RepairItemPurchaseDate.ToString("d");
                                    }
                                    else return;
                                }
                                finally
                                {
                                }
                            }


                            if (refType == "U")
                            {
                                if (refRepairPromptAmt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName + " * " + strUOMDesc, GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;

                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName + " * " + strUOMDesc,refType,refOHQty,
                                              refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strUOMCount,strUOMPrice,strUOMDesc,
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,
                                              strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),dblRentDeposit.ToString(),
                                              strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName + " * " + strUOMDesc, "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName+ " * "+ strUOMDesc,refType,refOHQty,
                                              refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),strUOMCount,strUOMPrice,strUOMDesc,
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,
                                              strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),dblRentDeposit.ToString(),
                                              strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName + " * " + strUOMDesc, "1", strUOMPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }
                            else if (refType == "M")
                            {
                                if (refRepairPromptAmt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;
                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }
                            else if (refType == "E")
                            {
                                if (refRepairPromptAmt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;
                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strSLID,"0","0","","","","",GetUniqueString(),
                                              refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,
                                              strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),dblRentDeposit.ToString(),
                                              strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),strSLID,"0","0","","","","",GetUniqueString(),
                                              refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,
                                              strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),dblRentDeposit.ToString(),
                                              strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }
                            /*else if (refType == "W")
                            {
                                frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                                try
                                {
                                    frm_POSItemDlg.BlankLine = false;
                                    frm_POSItemDlg.Weighted = true;
                                    frm_POSItemDlg.IsEdit = false;
                                    frm_POSItemDlg.ProductDesc = (sender as POSControls.POSItem).ItemName;
                                    frm_POSItemDlg.Qty = 1;
                                    frm_POSItemDlg.Price = GeneralFunctions.fnDouble(refPrice);
                                    frm_POSItemDlg.ShowDialog();
                                    if (frm_POSItemDlg.DialogResult == true)
                                    {
                                        dtblPOS.Rows.Add(new object[] {   intRowID.ToString(),
                                                      (sender as POSControls.POSItem).ItemName,
                                                      refType,refOHQty,refNQty,refCost,
                                                      frm_POSItemDlg.Qty,
                                                      frm_POSItemDlg.Price,
                                                      refNPrice,
                                                      Convert.ToDecimal(frm_POSItemDlg.Qty * frm_POSItemDlg.Price),"0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1" });

                                        line1 = "";
                                        line2 = "";
                                        RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, frm_POSItemDlg.Qty.ToString(), frm_POSItemDlg.Price.ToString(), ref line1, ref line2);
                                        DisplayPoleText(2, "N", "N", line1, line2);
                                    }
                                    else
                                    {
                                        return;
                                    }
                                }
                                finally
                                {
                                    frm_POSItemDlg.Dispose();
                                }
                            }*/
                            else
                            {
                                if (refRepairPromptAmt == "Y")
                                {
                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;
                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),"0","0","0","","","","",GetUniqueString(),refDP,"","",
                                              "0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,
                                              strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),dblRentDeposit.ToString(),
                                              strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);

                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),(sender as POSControls.POSItem).ItemName,refType,refOHQty,refNQty,refCost,
                                              intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0",
                                              "","1","0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,
                                              strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),dblRentDeposit.ToString(),
                                              strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),"","","","","N"});
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay((sender as POSControls.POSItem).ItemName, "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                            }

                            if (Settings.PriceLevelForOneTime == "Y")
                            {
                                Settings.PriceLevelForOneTime = "N";
                                intUsePriceLevel = Settings.UsePriceLevel;
                            }
                            SetCartDisplay();
                            gridControl1.ItemsSource = dtblPOS;
                            ToggleWithEmptyCart();
                            gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                            GeneralFunctions.SetFocus(txtSKU);
                        }

                    }
                    else
                    {
                        SetCartDisplay();
                        gridControl1.ItemsSource = dtblPOS;
                        ToggleWithEmptyCart();
                        gridView1.FocusedRowHandle = intfocusrow;
                    }
                }
            }
            //Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked timeafter display2 ");
            //Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
            /// Set UP/Down Button to move cursor through Cart Item
            EnableDisableButton(btnUP, btnDown, gridControl1);

            // Automatic Discount Add in Cart
            if (strCurrentServiceType == "Sales") await AddAutoDiscountInCart(intRowID, SaleID > 0 ? false : true);

            //  Automatic MixnMatch
            if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();

            // Automatic Fees Add in Cart
            await AddAutoFeesInCart(intRowID);

            SetCartDisplay();
            gridControl1.ItemsSource = dtblPOS;
            //Console.WriteLine("\n\n\t" + (++_GlobalposItem1ClickCounter) + ") posItem1Click clicked timeafter display2 ");
            //Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
            ToggleWithEmptyCart();
            if (!blfinddata)
            {
                gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                GeneralFunctions.SetFocus(txtSKU);
            }


            if (strCurrentServiceType == "Sales")
            {
                CheckAndExecuteReorderStockAlert(intRowID);
            }



            GetTotal(); /// Calculate and Display Cart Total
            ShowTax(); /// Calculate and Display Taxes of Cart Items
            ResetQty();  /// Reset Item Quantity
            //gridControl1.RefreshData();
            if (blActiveCategoryScreen && Settings.CloseCategoryAfterRinging == "Y")
            {
                blActiveCategoryScreen = false;
                //Todo: frm_Cat.CloseForm();
            }

            watch.Stop();
            Console.WriteLine("\t" + (_GlobalposItem1ClickCounter) + ") elapsedMs = " + watch.ElapsedMilliseconds + "\n");
        }

        /// Add POS Screen Category Click Event

        private async void posHeaderClick(POSControls.POSCategory posCat, Color borderColor)
        {
            /* 
                purpose : Assign Click Event on Category ( Display new window with all products under that category )
            */

            if (blReturnItem) return;
            POSControls.POSCategory poscat = posCat;

            //-- Sam wrapper
            // Block By Rajib POSItemsListBox.Items.Clear();
            await LoadPOSItems(posCat, borderColor);
            //--

            //frm_POSAllProducts frmAllProd = new frm_POSAllProducts();--SamAll
            //try
            //{
            //    frmAllProd.FValue1 = (int)tcPOS.Margin.Left + 15;
            //    frmAllProd.FValue2 = (int)tcPOS.Margin.Top + 25;// panel2.Height;
            //    frmAllProd.FValue3 = (int)tcPOS.Height;
            //    frmAllProd.FValue4 = (int)tcPOS.Width;
            //    frmAllProd.FValue5 = poscat.CategoryID;

            //    frm_Cat = frmAllProd;
            //    //Todo: frmAllProd.POSForm = this;
            //    frmAllProd.Title.Text = Properties.Resources.Products_for__ + " " + poscat.CategoryName;
            //    blActiveCategoryScreen = true;
            //    frmAllProd.ShowDialog();
            //}
            //finally
            //{
            //    blActiveCategoryScreen = false;
            //    frm_Cat = null;
            //}
        }


        #endregion

        #region Buy n Get Free

        /// Check if an item active as Buy Item in Buy N Get Free Promotion

        private DataTable CheckIfActiveBuyNGetFree(int pItem)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            return objPOS.IsActiveBuyNGetFree(pItem);
        }

        /// Check Buy N Get Free Promotion on Cart whether to add Free Items or Not

        private bool CheckCartForProceedBuyNGetFree(int pItem, DataTable dtblActivePromotion, ref int BuyHeader, ref int BuyQty, ref ArrayList ary)
        {

            int curr_qty = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["ProductType"].ToString() == "P") || (dr["ProductType"].ToString() == "M") || (dr["ProductType"].ToString() == "E")
                    || (dr["ProductType"].ToString() == "K") || (dr["ProductType"].ToString() == "U"))
                {
                    if (GeneralFunctions.fnInt32(dr["ID"].ToString()) == pItem)
                    {
                        if (GeneralFunctions.fnInt32(dr["BUYNGETFREEHEADERID"].ToString()) == 0)
                        {
                            curr_qty = curr_qty + GeneralFunctions.fnInt32(dr["QTY"].ToString());
                        }
                        if ((GeneralFunctions.fnInt32(dr["BUYNGETFREEHEADERID"].ToString()) > 0) && (dr["BUYNGETFREECATEGORY"].ToString() == "B"))
                        {
                            curr_qty = curr_qty + GeneralFunctions.fnInt32(dr["QTY"].ToString());
                        }
                    }
                }
            }

            DataTable dtblW = new DataTable();
            dtblW.Columns.Add("HeaderID", System.Type.GetType("System.String"));
            dtblW.Columns.Add("HeaderQty", System.Type.GetType("System.Int32"));


            curr_qty = curr_qty + intPressQty;
            int pHeader = 0;
            int pAppQty = 0;
            foreach (DataRow dr in dtblActivePromotion.Rows)
            {
                int tHeader = GeneralFunctions.fnInt32(dr["HeaderID"].ToString());
                int tAppQty = GeneralFunctions.fnInt32(dr["HeaderQty"].ToString());
                if (tAppQty <= curr_qty)
                {
                    dtblW.Rows.Add(new object[] { tHeader, tAppQty });
                }
            }

            if (dtblW.Rows.Count == 0)
            {
                return false;
            }
            else
            {
                bool bFind = false;
                foreach (DataRow dr1 in dtblW.Rows)
                {
                    if (GeneralFunctions.fnInt32(dr1["HeaderQty"].ToString()) == curr_qty)
                    {
                        pHeader = GeneralFunctions.fnInt32(dr1["HeaderID"].ToString());
                        pAppQty = GeneralFunctions.fnInt32(dr1["HeaderQty"].ToString());
                        bFind = true;
                        break;
                    }

                }

                if (bFind)
                {
                    dtblPOS.DefaultView.Sort = "SL desc";
                    dtblPOS.DefaultView.ApplyDefaultSort = true;
                    foreach (DataRowView dr in dtblPOS.DefaultView)
                    {
                        int cartqty = 0;
                        if ((dr["ProductType"].ToString() == "P") || (dr["ProductType"].ToString() == "M") || (dr["ProductType"].ToString() == "E")
                            || (dr["ProductType"].ToString() == "K") || (dr["ProductType"].ToString() == "U"))
                        {
                            if (GeneralFunctions.fnInt32(dr["ID"].ToString()) == pItem)
                            {
                                if (GeneralFunctions.fnInt32(dr["BUYNGETFREEHEADERID"].ToString()) == 0)
                                {
                                    cartqty = cartqty + GeneralFunctions.fnInt32(dr["QTY"].ToString());
                                    ary.Add(dr["SL"].ToString());
                                }
                                if ((GeneralFunctions.fnInt32(dr["BUYNGETFREEHEADERID"].ToString()) > 0) && (dr["BUYNGETFREECATEGORY"].ToString() == "B"))
                                {
                                    cartqty = cartqty + GeneralFunctions.fnInt32(dr["QTY"].ToString());
                                    ary.Add(dr["SL"].ToString());
                                }

                                if (cartqty + intPressQty == curr_qty) break;
                            }
                        }
                    }
                }
                else
                {
                    int CurrApplicableQty = 0;
                    int MinQty = 0;
                    int MaxQty = 0;
                    int i = 0;
                    foreach (DataRow dr1 in dtblW.Rows)
                    {
                        i++;
                        if (i == 1) MinQty = GeneralFunctions.fnInt32(dr1["HeaderQty"].ToString());
                        MaxQty = GeneralFunctions.fnInt32(dr1["HeaderQty"].ToString());
                    }


                    CurrApplicableQty = curr_qty - MaxQty;

                    dtblW.DefaultView.Sort = "HeaderQty desc";
                    dtblW.DefaultView.ApplyDefaultSort = true;
                    foreach (DataRowView dr1 in dtblW.DefaultView)
                    {
                        int iDiv = 0;
                        int iMod = 0;
                        iDiv = CurrApplicableQty / GeneralFunctions.fnInt32(dr1["HeaderQty"].ToString());
                        iMod = CurrApplicableQty % GeneralFunctions.fnInt32(dr1["HeaderQty"].ToString());
                        if (iDiv == 0) continue;
                        if (iDiv > 0)
                        {
                            if (iMod == 0)
                            {

                                pHeader = GeneralFunctions.fnInt32(dr1["HeaderID"].ToString());
                                pAppQty = GeneralFunctions.fnInt32(dr1["HeaderQty"].ToString());
                                CurrApplicableQty = pAppQty;
                                bFind = true;
                                break;
                            }
                            else
                            {
                                CurrApplicableQty = iMod;
                            }
                        }
                    }





                    if (bFind)
                    {
                        dtblPOS.DefaultView.Sort = "SL desc";
                        dtblPOS.DefaultView.ApplyDefaultSort = true;
                        foreach (DataRowView dr in dtblPOS.DefaultView)
                        {
                            int cartqty = 0;
                            if ((dr["ProductType"].ToString() == "P") || (dr["ProductType"].ToString() == "M") || (dr["ProductType"].ToString() == "E")
                                || (dr["ProductType"].ToString() == "K") || (dr["ProductType"].ToString() == "U"))
                            {
                                if (GeneralFunctions.fnInt32(dr["ID"].ToString()) == pItem)
                                {
                                    if (GeneralFunctions.fnInt32(dr["BUYNGETFREEHEADERID"].ToString()) == 0)
                                    {
                                        cartqty = cartqty + GeneralFunctions.fnInt32(dr["QTY"].ToString());
                                        if (cartqty < CurrApplicableQty) ary.Add(dr["SL"].ToString());
                                    }
                                    if ((GeneralFunctions.fnInt32(dr["BUYNGETFREEHEADERID"].ToString()) > 0) && (dr["BUYNGETFREECATEGORY"].ToString() == "B"))
                                    {
                                        cartqty = cartqty + GeneralFunctions.fnInt32(dr["QTY"].ToString());
                                        if (cartqty < CurrApplicableQty) ary.Add(dr["SL"].ToString());
                                    }

                                    if (cartqty + intPressQty == curr_qty) break;
                                }
                            }
                        }
                    }
                }

                BuyHeader = pHeader;
                BuyQty = pAppQty;
                return bFind;
            }
        }

        /// Add Buy N Get Promotion Record into Cart 

        private void AddBuyNGetFreeQty(int RecordID, string RecordDesc, int pHeaderID, int pApplicableQty, ArrayList ItemDeleteList, int SaleID, double SalePrice)
        {
            bool blExit = false;
            string line1 = "";
            string line2 = "";
            int intRowID = 0;

            intRowID = RecordID;

            bool blfinddata = false;
            string strselectid = RecordID.ToString();
            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";
            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";
            string refRentPrompt = "";

            int MixMatchID = 0;
            string MixMatchFlag = "N";
            string MixMatchCat = "";
            string MixMatchType = "";
            double MixMatchVal = 0;
            int MixMatchPlus = 0;
            double MixMatchPartPrice = 0;
            bool MixMatchApplicableLast = false;
            int iAge = 0;
            string refUOM = "";
            string refExpiry = "";
            FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                        ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY,
                        ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt, ref refRentPrompt, ref refRepairAmt,
                        ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);



            if (Settings.POSIDRequired == "Y")
            {
                if (GeneralFunctions.fnInt32(refAge) > 0)
                {
                    iAge = GeneralFunctions.fnInt32(refAge);
                    if (!AgeCheck(DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)))) return;
                    //if (new MessageBoxWindow().Show(Properties.Resources."Minimum Age ", "frmPOSN_msg_MinimumAge") + refAge + Properties.Resources." : Birthday on or before ", "frmPOSN_msg_Birthdayonorbefore") + DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)).ToString("MM/dd/yyyy"), Properties.Resources."Age Verification", "frmPOSN_msg_AgeVerification"), MessageBoxButton.OKCancel, MessageBoxImage.Information) == DialogResult.Cancel) return;
                }
            }
            string strUOMCount = "";
            string strUOMPrice = "";
            string strUOMDesc = "";

            string strMatxOID = "";
            string strMatxOV1 = "";
            string strMatxOV2 = "";
            string strMatxOV3 = "";
            string strSLID = "0";

            if (refType == "U")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {

                    frm_POSProductAddnDlg.ProductType = "Unit of Measure";
                    frm_POSProductAddnDlg.PID = intRowID;
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Unit_of_Measure_Data__ + " " + RecordDesc;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strUOMCount = frm_POSProductAddnDlg.UOMCount;
                        strUOMPrice = frm_POSProductAddnDlg.UOMPrice;
                        strUOMDesc = frm_POSProductAddnDlg.UOMDesc;
                    }
                    else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }

            if (refType == "M")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {

                    frm_POSProductAddnDlg.ProductType = "Matrix";
                    frm_POSProductAddnDlg.PID = intRowID;
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Matrix_Data__ + " " + RecordDesc;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strMatxOID = frm_POSProductAddnDlg.MatrixOID;
                        strMatxOV1 = frm_POSProductAddnDlg.MatrixOV1;
                        strMatxOV2 = frm_POSProductAddnDlg.MatrixOV2;
                        strMatxOV3 = frm_POSProductAddnDlg.MatrixOV3;
                    }
                    else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }

            if (refType == "E")
            {
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {

                    frm_POSProductAddnDlg.ProductType = "Serialized";
                    frm_POSProductAddnDlg.dtblS = dtblPOS;
                    frm_POSProductAddnDlg.PID = intRowID;
                    frm_POSProductAddnDlg.Heading = Properties.Resources.Serialized_Data__ + " " + RecordDesc;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSProductAddnDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strSLID = frm_POSProductAddnDlg.SLID;
                    }
                    else blExit = true;
                }
                finally
                {
                }
                if (blExit) return;
            }


            string strRentType = "NA";
            double dblRentDuration = 0;
            double dblRentValue = 0;
            double dblRentDeposit = 0;

            string strRepairItemTag = "";
            string strRepairItemSlNo = "";
            string strRepairItemPurchaseDate = "";

            int intfocusrow = 0;
            double dblRate = 0;
            double dblPrice = 0;

            //if (strCurrentServiceType != "Repair")
            //{
            if (!CheckStock(GeneralFunctions.fnInt32(strselectid), pApplicableQty, strMatxOID, strMatxOV1, strMatxOV2, strMatxOV3))
            {
                new MessageBoxWindow().Show(Properties.Resources.No_Stock_available_, Properties.Resources.Stock_Validation, MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            if (SaleID > 0)
            {
                refPrompt = "N";
                refPrice = SalePrice.ToString();
                if (refType == "U") strUOMPrice = SalePrice.ToString();
            }


            DeleteCartBeforeAddBuyNGetFree(ItemDeleteList);

            string promoname = "";
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            promoname = objPOS.GetBuyNGetFreePromotionName(pHeaderID);
            RecordDesc = "\n" + RecordDesc;

            if (refType == "U")
            {
                if (refPrompt == "Y")
                {
                    double promptPrice = GetPromptPrice(RecordDesc + " * " + strUOMDesc,
                                                         GeneralFunctions.fnDouble(strUOMPrice));

                    if (promptPrice == -99999) return;

                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc + " * " + strUOMDesc,refType,refOHQty,
                                              refNQty,refCost,pApplicableQty,promptPrice,refNPrice,Convert.ToDecimal(pApplicableQty*promptPrice),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y",pHeaderID,"B",++CartSL, promoname, iAge,
                                              promptPrice,Convert.ToDecimal(pApplicableQty*promptPrice),refUOM,"","","","","N"});

                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(RecordDesc + " * " + strUOMDesc, pApplicableQty.ToString(),
                    promptPrice.ToString(), ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);
                }
                else
                {
                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc+ " * "+ strUOMDesc,refType,refOHQty,
                                              refNQty,refCost,pApplicableQty,strUOMPrice,refNPrice,Convert.ToDecimal(pApplicableQty*GeneralFunctions.fnDouble(strUOMPrice)),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N",pHeaderID,"B",++CartSL, promoname,iAge,
                                              strUOMPrice,Convert.ToDecimal(pApplicableQty*GeneralFunctions.fnDouble(strUOMPrice)),"","","","","N"});

                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(RecordDesc + " * " + strUOMDesc, pApplicableQty.ToString(), strUOMPrice,
                    ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);
                }
            }
            else if (refType == "M")
            {
                if (refPrompt == "Y")
                {
                    double promptPrice = GetPromptPrice(RecordDesc, GeneralFunctions.fnDouble(refPrice));
                    if (promptPrice == -99999) return;

                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              pApplicableQty,promptPrice,refNPrice,Convert.ToDecimal(pApplicableQty*promptPrice),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y",pHeaderID,"B",++CartSL, promoname,iAge,
                                              promptPrice,Convert.ToDecimal(pApplicableQty*promptPrice),refUOM,"","","","","N"});

                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(RecordDesc, pApplicableQty.ToString(), promptPrice.ToString(),
                    ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);
                }
                else
                {
                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,pApplicableQty,
                                              refPrice,refNPrice,Convert.ToDecimal(pApplicableQty*GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N",pHeaderID,"B",++CartSL, promoname,iAge,
                                              refPrice,Convert.ToDecimal(pApplicableQty*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});

                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(RecordDesc, pApplicableQty.ToString(), refPrice, ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);
                }
            }
            else if (refType == "E")
            {
                if (refPrompt == "Y")
                {
                    double promptPrice = GetPromptPrice(RecordDesc, GeneralFunctions.fnDouble(refPrice));
                    if (promptPrice == -99999) return;

                    dtblPOS.Rows.Add(new object[]
                                            {intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              pApplicableQty,promptPrice,refNPrice,Convert.ToDecimal(pApplicableQty*promptPrice),strSLID,"0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y",pHeaderID,"B",++CartSL, promoname,iAge,
                                              promptPrice,Convert.ToDecimal(pApplicableQty*promptPrice),refUOM,"","","","","N"});

                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(RecordDesc, pApplicableQty.ToString(), promptPrice.ToString(),
                    ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);
                }
                else
                {
                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              pApplicableQty,refPrice,refNPrice,Convert.ToDecimal(pApplicableQty*GeneralFunctions.fnDouble(refPrice)),strSLID,"0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N",pHeaderID,"B",++CartSL, promoname,iAge,
                                               refPrice,Convert.ToDecimal(pApplicableQty*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});

                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(RecordDesc, pApplicableQty.ToString(), refPrice, ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);
                }
            }


            else
            {
                if (refPrompt == "Y")
                {
                    double promptPrice = GetPromptPrice(RecordDesc, GeneralFunctions.fnDouble(refPrice));
                    if (promptPrice == -99999) return;

                    dtblPOS.Rows.Add(new object[]
                                            {
                                              intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              pApplicableQty,promptPrice,refNPrice,Convert.ToDecimal(pApplicableQty*promptPrice),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y",pHeaderID,"B",++CartSL, promoname,iAge,
                                            promptPrice,Convert.ToDecimal(pApplicableQty*promptPrice),refUOM,"","","","","N"});

                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(RecordDesc, pApplicableQty.ToString(), promptPrice.ToString(),
                    ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);

                }
                else
                {
                    dtblPOS.Rows.Add(new object[]
                                            { intRowID.ToString(),RecordDesc,refType,refOHQty,refNQty,refCost,
                                              pApplicableQty,refPrice,refNPrice,Convert.ToDecimal(pApplicableQty*GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N",pHeaderID,"B",++CartSL, promoname,iAge,
                                              refPrice,Convert.ToDecimal(pApplicableQty*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});

                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(RecordDesc, pApplicableQty.ToString(), refPrice, ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);
                }
            }

            int HeaderSL = CartSL;

            PosDataObject.POS objP = new PosDataObject.POS();
            objP.Connection = SystemVariables.Conn;
            DataTable dtblFree = objP.GetFreeItems(pHeaderID);
            foreach (DataRow dr in dtblFree.Rows)
            {
                dtblPOS.Rows.Add(new object[]
                                            { dr["ID"].ToString(),dr["Name"].ToString(),dr["Type"].ToString(),dr["OnHandQty"].ToString(),dr["NormalQty"].ToString(),dr["Cost"].ToString(),
                                              dr["Qty"].ToString(),0,dr["Price"].ToString(),0,"0","0","0","","","","",GetUniqueString(),"2",
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N",pHeaderID,"F",++CartSL, "",iAge,0,0,refUOM,"","","","","N"});
            }


            if (Settings.PriceLevelForOneTime == "Y")
            {
                Settings.PriceLevelForOneTime = "N";
                intUsePriceLevel = Settings.UsePriceLevel;
            }
            dtblPOS.DefaultView.Sort = "ItemIndex asc";
            dtblPOS.DefaultView.ApplyDefaultSort = true;
            SetCartDisplay();
            gridControl1.ItemsSource = dtblPOS;
            ToggleWithEmptyCart();
            int RowH = -1;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                RowH++;
                if (GeneralFunctions.fnInt32(dr["SL"].ToString()) == HeaderSL) break;
            }
            gridView1.FocusedRowHandle = RowH;

            //GeneralFunctions.SetFocus(txtSKU);



        }

        /// Delete Specific Items from cart before Add Buy N Get Promotion into Cart 

        private void DeleteCartBeforeAddBuyNGetFree(ArrayList ary)
        {

            ArrayList arytemp = new ArrayList();
            for (int i = 0; i <= ary.Count - 1; i++)
            {
                string key = "";
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if (ary[i].ToString() == dr["SL"].ToString())
                    {
                        string buyfreeheader = dr["BUYNGETFREEHEADERID"].ToString();
                        if (buyfreeheader != "0")
                        {
                            key = buyfreeheader;
                            foreach (DataRow dr1 in dtblPOS.Rows)
                            {
                                if (dr1["BUYNGETFREEHEADERID"].ToString() == buyfreeheader)
                                {
                                    if (!arytemp.Contains(dr1["SL"].ToString()))
                                        arytemp.Add(dr1["SL"].ToString());
                                }
                            }

                        }
                        else
                        {
                            if (!arytemp.Contains(ary[i].ToString()))
                                arytemp.Add(ary[i].ToString());
                        }
                    }
                }
            }


            for (int j = 0; j <= arytemp.Count - 1; j++)
            {
                int delindx = -1;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    delindx++;
                    if (arytemp[j].ToString() == dr["SL"].ToString())
                    {
                        break;
                    }
                }
                if (delindx != -1) dtblPOS.Rows[delindx].Delete();
            }

        }

        #endregion

        /// check if item is in Active Sale

        private void FetchActiveSale(int iProdID, ref int refID, ref double refPr)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            objPOS.ActiveSale(iProdID, ref refID, ref refPr);
        }

        // Show Logger User, Invoice # on the screen

        private void GetPOSCounterInfo()
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            intMaxInvNo = objPOS.FetchMaxInvoiceNo();

            if (SystemVariables.CurrentUserID <= 0)
                lbClerk.Text = Properties.Resources.Clerk__ + "  " + Properties.Resources.Admin;
            else
                lbClerk.Text = Properties.Resources.Clerk__ + "  " + SystemVariables.CurrentUserCode;

            lbRedTop.Text = Properties.Resources.Invoice__ + "  " + intMaxInvNo.ToString() + "  ";
        }

        private void InitializeFunctions()
        {

            btnsrvSales.Visibility = Visibility.Collapsed;
            btnsrvRent.Visibility = Visibility.Collapsed;
            btnsrvRepair.Visibility = Visibility.Collapsed;
            btnSaveRepair.Visibility = Visibility.Collapsed;
            btnOrdering.Visibility = Visibility.Collapsed;

            btnHelp.Visibility = Visibility.Collapsed;
            btnPaidOut.Visibility = Visibility.Collapsed;
            btnNoSale.Visibility = Visibility.Collapsed;
            btnCancel.Visibility = Visibility.Collapsed;
            btnLayAway.Visibility = Visibility.Collapsed;
            btnAcctPay.Visibility = Visibility.Collapsed;
            btnGiftCert.Visibility = Visibility.Collapsed;
            btnResumeSuspend.Visibility = Visibility.Collapsed;
            btnReprint.Visibility = Visibility.Collapsed;
            btnStockRefresh.Visibility = Visibility.Collapsed;
            btnCustomize.Visibility = Visibility.Collapsed;
            btnCustPhoto.Visibility = Visibility.Collapsed;
            btnCustNotes.Visibility = Visibility.Collapsed;
            btnProductPhoto.Visibility = Visibility.Collapsed;
            btnProductNote.Visibility = Visibility.Collapsed;
            btnEmpPhoto.Visibility = Visibility.Collapsed;
            btnViewPrice.Visibility = Visibility.Collapsed;
            btnChangePrice.Visibility = Visibility.Collapsed;
            btnUsePrice.Visibility = Visibility.Collapsed;
            btnMoreFunctions.Visibility = Visibility.Collapsed;
            btnFastCash.Visibility = Visibility.Collapsed;
            btnGiftCertBalance.Visibility = Visibility.Collapsed;
            btnINVNotes.Visibility = Visibility.Collapsed;
            btnWorkOrder.Visibility = Visibility.Collapsed;
            btnPrintLabel.Visibility = Visibility.Collapsed;
            btnPrintGiftReceipt.Visibility = Visibility.Collapsed;
            btnCoupon.Visibility = Visibility.Collapsed;
            btnApptBook.Visibility = Visibility.Collapsed;
            btnApptRecall.Visibility = Visibility.Collapsed;
            btnRentRecall.Visibility = Visibility.Collapsed;
            btnRepairRecall.Visibility = Visibility.Collapsed;
            btnCardTran.Visibility = Visibility.Collapsed;
            btnMcryGiftCard.Visibility = Visibility.Collapsed;
            btnFastCC.Visibility = Visibility.Collapsed;
            btnFees.Visibility = Visibility.Collapsed;
            btnEBTBal.Visibility = Visibility.Collapsed;
            btnBottleRefund.Visibility = Visibility.Collapsed;
            btnDiscItem.Visibility = Visibility.Collapsed;
            btnAddQty.Visibility = Visibility.Collapsed;
            btnMinusQty.Visibility = Visibility.Collapsed;
            btnTare.Visibility = Visibility.Collapsed;
            btnFeesCoupon.Visibility = Visibility.Collapsed;
            btnCheckInOut.Visibility = Visibility.Collapsed;
            btnPointToStoreCredit.Visibility = Visibility.Collapsed;
            btnLottoPayout.Visibility = Visibility.Collapsed;
        }


        private void ArrangeVisibleFunctions()
        {
            dtblFunctionButton.Rows.Clear();
            VisibleServiceButton = 0;
            VisibleFunctionButton = 0;


            int intServiceCount = 0;

            string QS = "N";
            string TS = "N";
            string TO = "N";

            bool blQS = false;
            bool blTS = false;
            bool blTO = false;

            bool blCO = false;

            if (Settings.RegOrderingAccess == "Y")
            {
                blCO = true;
            }


            if (Settings.SalesService == "Y")
            {
                intServiceCount++;
                QS = "Y";
            }

            if (Settings.RentService == "Y")
            {
                intServiceCount++;
                TS = "Y";
            }

            if (Settings.RepairService == "Y")
            {
                intServiceCount++;
                TO = "Y";
            }

            NoOfService = intServiceCount;

            if (strCurrentServiceType == "Repair") intServiceCount++;



            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            DataTable dtblFn = new DataTable();
            bool blf = false;
            if (Settings.POSCardPayment == "Y")
            {
                if (Settings.PaymentGateway == 1) blf = false;
                else blf = true;
            }
            else
            {
                blf = false;
            }
            dtblFn = objPOS.FetchVisiblePOSFunction(blf, SystemVariables.CurrentUserID);
            int intTotal = dtblFn.Rows.Count;

            if (intTotal == 0)
            {
                if (intServiceCount == 1)
                {
                    if (Settings.RepairService == "Y")
                    {
                        intTotal = 2;
                        VisibleServiceButton = 2;
                    }
                    else
                    {
                        VisibleServiceButton = 0;
                        return;
                    }
                }
                else
                {
                    intTotal = intServiceCount;
                    VisibleServiceButton = intServiceCount;
                }
            }
            else
            {
                if (intServiceCount == 1)
                {
                    if (Settings.RepairService == "Y")
                    {
                        intTotal = intTotal + 2;
                        VisibleServiceButton = 2;
                    }
                    else
                    {
                        VisibleServiceButton = intServiceCount;
                    }

                }
                else
                {
                    intTotal = intTotal + intServiceCount;
                    VisibleServiceButton = intServiceCount;
                }
            }

            if (blCO)
            {
                intTotal = intTotal + 1;
            }


            int i = 0;

            if (intServiceCount > 1)
            {
                if (QS == "Y")
                {
                    i++;
                    dtblFunctionButton.Rows.Add(new object[] { i.ToString(), "999", "Sales" });
                }

                if (TS == "Y")
                {
                    i++;
                    dtblFunctionButton.Rows.Add(new object[] { i.ToString(), "999", "Rent" });
                }

                if (TO == "Y")
                {
                    i++;
                    dtblFunctionButton.Rows.Add(new object[] { i.ToString(), "999", "Repair" });
                }

                if (strCurrentServiceType == "Repair")
                {
                    i++;
                    //dtblFunctionButton.Rows.Add(new object[] { i.ToString(), "99999", "Save Repair" });
                    dtblFunctionButton.Rows.Add(new object[] { i.ToString(), "99999", "Save Invoice" }); 
                }
            }

            if (blCO)
            {
                i++;
                dtblFunctionButton.Rows.Add(new object[] { i.ToString(), "999", "Ordering" });
            }

            int ib = 0;
            ib = i;
            foreach (DataRow dr in dtblFn.Rows)
            {
                ib++;
                dtblFunctionButton.Rows.Add(new object[] { ib.ToString(), dr["ID"].ToString(), dr["FunctionName"].ToString() });
            }
            dtblFn.Dispose();
        }

        private void DisplayFunctionButtons()
        {
            bool_btnsupnd = false;
            bool_btnsvrepiar = false;
            pnlFB.Children.Clear();
            int i = 0;
            int rowi = 1;
            foreach (DataRow dr in dtblFunctionButton.Rows)
            {
                //if (dr["VISIBLE"].ToString() == "") continue;
                //i++;
                //rowi = i > 6 ? i - 6 : i;

                System.Windows.Controls.Button btn = new System.Windows.Controls.Button();

                btn.Height = 42;
                btn.Width = 70;
                btn.Margin = new Thickness(2, 2, 2, 3);
                btn.Style = this.FindResource("POSFunctionButtonStyle") as Style;

                if ((dr["NAME"].ToString() == "Save Invoice") || (dr["NAME"].ToString() == "Open Invoice"))
                {
                    btn.Tag = "Save";
                    btnsvrepiar = btn;

                }
                else
                {
                    btn.Tag = dr["NAME"].ToString();
                }
                string contenttext = "";
                if (dr["NAME"].ToString() == "Resume/Suspend")
                {
                    bool_btnsupnd = true;
                    btnsupnd = btn;
                    if (dtblPOS.Rows.Count > 0)
                    {
                        contenttext = "Suspend";
                        //btn.Content = "Suspend";
                    }
                    else
                    {
                        contenttext = "Resume";
                        //btn.Content = "Resume";
                    }
                }
                else
                {
                    if (dr["NAME"].ToString() == "Fees & Charges Item")
                    {
                        contenttext = "Fees & Crg. Item";
                    }
                    else if (dr["NAME"].ToString() == "Fees & Charges Ticket")
                    {
                        contenttext = "Fees & Crg. Ticket";
                    }
                    else
                    {
                        contenttext = dr["NAME"].ToString();
                    }
                    //btn.Content = dr["NAME"].ToString();
                }

                TextBlock tblk = new TextBlock();
                tblk.Text = contenttext;
                tblk.TextWrapping = TextWrapping.WrapWithOverflow;
                tblk.TextAlignment = TextAlignment.Center;
                btn.Content = tblk;

                if (btn.Tag.ToString() == "Save")
                {
                    (btnsvrepiar.Content as TextBlock).Foreground = System.Windows.Media.Brushes.HotPink;
                }

                /*btn.Foreground = (SolidColorBrush)new BrushConverter().ConvertFromString("#FF64C1DA");
                btn.FontFamily = new System.Windows.Media.FontFamily("Open Sans");
                btn.FontSize = 13f;
                btn.FontWeight = FontWeights.Bold;

                btn.SetValue(Canvas.LeftProperty, Convert.ToDouble(117 * (rowi - 1)));
                if (i <= 6)
                {
                    btn.SetValue(Canvas.TopProperty, Convert.ToDouble(5));
                }
                else
                {
                    btn.SetValue(Canvas.TopProperty, Convert.ToDouble(85));
                }
                btn.Template = this.FindResource("POS_Function") as ControlTemplate;
                */
                if (dr["NAME"].ToString() == "Sales")
                {
                    btn.Click += btnsrvSales_Click;
                }
                if (dr["NAME"].ToString() == "Rent")
                {
                    btn.Click += btnsrvSales_Click;
                }
                if (dr["NAME"].ToString() == "Repair")
                {
                    btn.Click += btnsrvSales_Click;
                }

                if (dr["NAME"].ToString() == "Discount Item")
                {
                    btn.Click += btnDiscItem_Click;
                }

                if (dr["NAME"].ToString() == "Discount Ticket")
                {
                    btn.Click += btnCoupon_Click;
                }
                if (dr["NAME"].ToString() == "Fees & Charges Item")
                {
                    btn.Click += btnFees_Click;
                }
                if (dr["NAME"].ToString() == "Fees & Charges Ticket")
                {
                    btn.Click += btnFeesCoupon_Click;
                }

                if (dr["NAME"].ToString() == "Cancel")
                {
                    btn.Click += btnCancelClick;
                }

                if (dr["NAME"].ToString() == "Acct Pay")
                {
                    btn.Click += btnAcctPayClick;
                }

                if (dr["NAME"].ToString() == "Gift Aid")
                {
                    btn.Click += btnGiftAidClick;
                }


                if (dr["NAME"].ToString() == "Qty (+)")
                {
                    btn.Click += btnAddQty_Click;
                }

                if (dr["NAME"].ToString() == "Qty (-)")
                {
                    btn.Click += btnMinusQty_Click;
                }

                if (dr["NAME"].ToString() == "Resume/Suspend")
                {
                    btn.Click += btnResumeSuspendClick;
                }

                if (dr["NAME"].ToString() == "Gift Cert")
                {
                    btn.Click += btnGiftCertClick;
                }

                if (dr["NAME"].ToString() == "Gift Cert Balance")
                {
                    btn.Click += btnGiftCertBalanceClick;
                }

                if (dr["NAME"].ToString() == "View Product Price")
                {
                    btn.Click += btnViewPrice_Click;
                }

                if (dr["NAME"].ToString() == "Change Product Price")
                {
                    btn.Click += btnChangePrice_Click;
                }

                if (dr["NAME"].ToString() == "Product Picture")
                {
                    btn.Click += btnProductPhoto_Click;
                }

                if (dr["NAME"].ToString() == "Cust. Picture")
                {
                    btn.Click += btnCustPhotoClick;
                }

                if (dr["NAME"].ToString() == "Use Price Level")
                {
                    btn.Click += btnUsePriceClick;
                }

                if (dr["NAME"].ToString() == "Paid Out")
                {
                    btn.Click += btnPaidOut_Click;
                }

                if (dr["NAME"].ToString() == "Paid In")
                {
                    btn.Click += btnPaidIn_Click;
                }

                if (dr["NAME"].ToString() == "Safe Drop")
                {
                    btn.Click += btnSafeDrop_Click;
                }

                if (dr["NAME"].ToString() == "No Sale")
                {
                    btn.Click += btnNoSaleClick;
                }

                if (dr["NAME"].ToString() == "Fast Cash")
                {
                    btn.Click += btnFastCashClick;
                }

                if (dr["NAME"].ToString() == "Product Notes")
                {
                    btn.Click += btnProductNote_Click;
                }

                if (dr["NAME"].ToString() == "Invoice Item Notes")
                {
                    btn.Click += btnINVNotes_Click;
                }

                if (dr["NAME"].ToString() == "Return Reprint")
                {
                    btn.Click += btnReprintClick;
                }

                if ((dr["NAME"].ToString() == "Save Invoice") || (dr["NAME"].ToString() == "Open Invoice"))
                {
                    btn.Click += btnSaveRepair_Click;
                }

                if (dr["NAME"].ToString() == "Recall Repair")
                {
                    btn.Click += btnRepairRecallClick;
                }

                if (dr["NAME"].ToString() == "Recall Rent")
                {
                    btn.Click += btnRentRecall_Click;
                }

                if (dr["NAME"].ToString() == "Bottle Refund")
                {
                    btn.Click += btnBottleRefundClick;
                }

                if (dr["NAME"].ToString() == "Points to Store Credit")
                {
                    btn.Click += btnPointToStoreCreditclick;
                }

                if (dr["NAME"].ToString() == "Work Order")
                {
                    btn.Click += btnWorkOrderClick;
                }

                if (dr["NAME"].ToString() == "Emp. Picture")
                {
                    btn.Click += btnEmpPhotoClick;
                }

                if (dr["NAME"].ToString() == "Layaway")
                {
                    btn.Click += btnLayawayClick;
                }

                if (dr["NAME"].ToString() == "Book Appt.")
                {
                    btn.Click += btnApptBookClick;
                }

                if (dr["NAME"].ToString() == "Recall Appt.")
                {
                    btn.Click += btnApptRecall_Click;
                }

                if (dr["NAME"].ToString() == "Lotto Payout")
                {
                    btn.Click += btnLottoPayoutClick;
                }

                if (dr["NAME"].ToString() == "Refresh Stock")
                {
                    btn.Click += btnStockRefresh_Click;
                }

                if (dr["NAME"].ToString() == "Up")
                {
                    btn.Click += btnUp_Click1;
                }

                if (dr["NAME"].ToString() == "Down")
                {
                    btn.Click += btnDown_Click1;
                }

                if (dr["NAME"].ToString() == "Cust. Notes")
                {
                    btn.Click += btnCustNotes_Click;
                }

                if (dr["NAME"].ToString() == "Print Gift Receipt")
                {
                    btn.Click += btnPrintGiftReceipt_Click;
                }


                if (dr["NAME"].ToString() == "Select Apps")
                {
                    btn.Click += btnCustomize_Click;
                }

                pnlFB.Children.Add(btn);
            }

        }

        private void RearrangeForCalculatorStyle(bool bCalculatorStyle)
        {
            if (bCalculatorStyle)
            {
                btnKey1.Content = "7";
                btnKey1.Tag = 7;
                btnKey2.Content = "8";
                btnKey2.Tag = 8;
                btnKey3.Content = "9";
                btnKey3.Tag = 9;
                btnKey7.Content = "1";
                btnKey7.Tag = 1;
                btnKey8.Content = "2";
                btnKey8.Tag = 2;
                btnKey9.Content = "3";
                btnKey9.Tag = 3;
            }
        }
        public void DisplayPoleText(int callcount, string dispcat1, string dispcat2, string displaytxt1, string displaytxt2)
        {
            if (Settings.LineDisplayDeviceType == "OPOS")
            {
                try
                {
                    if (m_posCommon != null)
                    {
                        if (dispcat2 != "B") this.timerdisplay.Stop();
                        string line1 = displaytxt1;
                        string line2 = displaytxt2;



                        LineDisplay lineDisplay = (LineDisplay)m_posCommon;

                        m_rowCount = lineDisplay.Rows;
                        m_colCount = lineDisplay.Columns;

                        if (callcount == 1)
                        {
                            lineDisplay.CreateWindow(0, 0, m_rowCount - 1, m_colCount, 1, m_colCount);
                            lineDisplay.CreateWindow(1, 0, m_rowCount - 1, m_colCount, 1, m_colCount + line2.Length);
                            lineDisplay.CreateWindow(1, 0, m_rowCount - 1, m_colCount, 1, m_colCount);
                        }

                        DisableMarquee(lineDisplay);
                        lineDisplay.CurrentWindow = 1;
                        lineDisplay.ClearText();
                        lineDisplay.CurrentWindow = 2;
                        lineDisplay.ClearText();
                        lineDisplay.CurrentWindow = 1;
                        lineDisplay.DisplayText(line1);
                        if (dispcat2 != "B")
                        {

                            if (line2 != "")
                            {
                                lineDisplay.CurrentWindow = 2;
                                lineDisplay.DisplayText(line2);
                            }
                            if (dispcat1 == "M")
                                EnableMarquee(lineDisplay);
                        }
                        if (dispcat2 == "B")
                        {
                            lineDisplay.ClearText();
                            blink1 = line1;
                            blink2 = line2;
                            this.timerdisplay.Interval = new TimeSpan(0, 0, 0, 0, 100);
                            this.timerdisplay.Start();
                        }

                    }
                }
                catch
                {
                }
            }



            if (Settings.LineDisplayDeviceType == "SERIAL")
            {
                try
                {
                    if (dispcat2 != "B") this.timerdisplay.Stop();
                    string line1 = displaytxt1;
                    string line2 = displaytxt2;


                    ClearTextForPoleDisplayOnSerialPort();

                    DisplayTextForPoleDisplayOnSerialPort(line1, line2);



                    if (dispcat2 == "B")
                    {
                        ClearTextForPoleDisplayOnSerialPort();
                        blink1 = line1;
                        blink2 = line2;
                        this.timerdisplay.Interval = new TimeSpan(0, 0, 0, 0, 100);
                        this.timerdisplay.Start();
                    }
                }
                catch
                {
                }
            }
        }

        private void EnableMarquee(LineDisplay lineDisplay)
        {
            try
            {
                boolMarq = true;
                lineDisplay.MarqueeRepeatWait = 400;
                lineDisplay.MarqueeUnitWait = 400;
                lineDisplay.MarqueeFormat = DisplayMarqueeFormat.Walk;
                lineDisplay.MarqueeType = DisplayMarqueeType.Left;
            }
            catch
            {
            }
        }

        /// Disable Marquee for Pole Display

        private void DisableMarquee(LineDisplay lineDisplay)
        {
            try
            {
                if (!boolMarq) return;
                lineDisplay.CurrentWindow = 2;
                lineDisplay.MarqueeType = DisplayMarqueeType.None;
            }
            catch
            {
            }
        }
        private void ArrangePoleDisplayGreetings(ref string txt1, ref string txt2)
        {
            try
            {
                if (Settings.PoleScreen != null)
                {
                    if (Settings.PoleScreen != "")
                    {
                        if (Settings.PoleScreen.Length <= 20)
                        {
                            txt1 = Settings.PoleScreen.Trim();
                            txt2 = "";
                        }
                        else
                        {
                            txt1 = Settings.PoleScreen.Substring(0, 20).Trim();
                            txt2 = Settings.PoleScreen.Substring(20, 20).Trim();
                        }
                    }
                }
            }
            catch
            {
            }
        }
        private void InitLineDisplay()
        {
            bool blFind = false;
           m_posExplorer = new PosExplorer();

            Microsoft.PointOfService.DeviceInfo deviceInfo = null;
            DeviceCollection deviceCollection = m_posExplorer.GetDevices();
            string deviceName = Settings.LineDisplayDevice;
            for (int i = 0; i < deviceCollection.Count; i++)
            {

                deviceInfo = deviceCollection[i];

                if (deviceInfo.ServiceObjectName == deviceName)
                {
                    blFind = true;
                    break;
                }
            }

            if (blFind)
            {
                if (deviceInfo != null)
                {
                    m_posCommon = (PosCommon)m_posExplorer.CreateInstance(deviceInfo);
                    try
                    {
                        m_posCommon.Open();
                        m_posCommon.Claim(10000);
                        m_posCommon.DeviceEnabled = true;
                    }
                    catch
                    {
                    }
                }
            }

            m_posExplorer = null;
        }


        public string StartServiceType
        {

            get { return strStartServiceType; }
            set
            {
                strStartServiceType = value;
                strCurrentServiceType = strStartServiceType;
                SetServiceTypeButtonColor();
            }
        }

        private void SetServiceTypeButtonColor()
        {
            if (strCurrentServiceType == "") return;
            foreach (UIElement cr in pnlFB.Children)
            {
                if (cr is System.Windows.Controls.Button)
                {
                    if ((cr as System.Windows.Controls.Button).Tag == null) continue;
                    if ((cr as System.Windows.Controls.Button).Tag.ToString() != "Save")
                    {
                        if ((cr as System.Windows.Controls.Button).Tag.ToString() == strCurrentServiceType)
                        {



                            //var child = VisualTreeHelper.GetChildrenCount((cr as System.Windows.Controls.Button));

                            //var bord = (Border)temp.FindName("bd", temp);
                            //(cr as System.Windows.Controls.Button).ContentTemplate.FindName( = (SolidColorBrush)new BrushConverter().ConvertFromString("#FF40BAEE");

                            (cr as System.Windows.Controls.Button).Style = this.FindResource("GeneralButtonStyle22") as Style;
                            (cr as System.Windows.Controls.Button).Opacity = 1;
                            ((cr as System.Windows.Controls.Button).Content as TextBlock).Foreground = System.Windows.Media.Brushes.Black;

                        }
                        else
                        {
                            if (((cr as System.Windows.Controls.Button).Tag.ToString() == "Sales") || ((cr as System.Windows.Controls.Button).Tag.ToString() == "Rent") ||
                                ((cr as System.Windows.Controls.Button).Tag.ToString() == "Repair"))
                            {

                                //(cr as System.Windows.Controls.Button).Background = (SolidColorBrush)new BrushConverter().ConvertFromString("#FF40BAEE");
                                (cr as System.Windows.Controls.Button).Opacity = 1;
                                ((cr as System.Windows.Controls.Button).Content as TextBlock).Foreground = System.Windows.Media.Brushes.Maroon;
                            }
                            else
                            {
                                (cr as System.Windows.Controls.Button).Opacity = 0.9;
                                ((cr as System.Windows.Controls.Button).Content as TextBlock).Foreground = System.Windows.Media.Brushes.White; //(SolidColorBrush)new BrushConverter().ConvertFromString("#64C2DB");
                            }
                        }
                    }
                }
            }

            if (Settings.RepairService == "Y")
            {
                if (strCurrentServiceType == "Repair")
                {
                    int counter = 0;
                    System.Windows.Controls.Button btnExtra = new System.Windows.Controls.Button();
                    foreach (UIElement cr in pnlFB.Children)
                    {
                        ++counter;

                        if (cr is System.Windows.Controls.Button)
                        {
                            if ((cr as System.Windows.Controls.Button).Tag == null) continue;
                            if ((cr as System.Windows.Controls.Button).Tag.ToString() == "Save")
                            {
                                btnExtra = cr as System.Windows.Controls.Button;
                                btnsvrepiar = btnExtra;
                                break;
                            }
                        }
                    }

                    if (dtblPOS != null)
                    {
                        if (dtblPOS.Rows.Count > 0)
                        {

                            btnExtra.Content = new TextBlock() { Text = "Save Invoice" };
                        }
                        else
                        {
                            if (blRepairRecall)
                            {
                                btnExtra.Content = new TextBlock() { Text = "Save Invoice" };
                            }
                            else
                            {
                                btnExtra.Content = new TextBlock() { Text = "Open Invoice" };
                            }
                        }
                        btnExtra.Style = this.FindResource("GeneralButtonStyle12") as Style;
                        (btnExtra.Content as TextBlock).Foreground = System.Windows.Media.Brushes.White;
                    }
                    else
                    {
                        btnExtra.Style = this.FindResource("GeneralButtonStyle12") as Style;
                        btnExtra.Content = new TextBlock() { Text = "Open Invoice" };
                        (btnExtra.Content as TextBlock).Foreground = System.Windows.Media.Brushes.White;

                    }
                }
            }

        }

        public CommandBase OnPOSCloseCommand { get; set; }

        private void tcPOS_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            (Window.GetWindow(this) as MainWindow).SearchMemberTextBox.InfoText = "Find Item";

            if (tcPOS.SelectedIndex == 0)//POS
            {
                //return;
            }
            else if (tcPOS.SelectedIndex == 1)//Customers
            {
                if (grdCustomer.ItemsSource != null)
                {
                    foreach (DataRow dr in (grdCustomer.ItemsSource as DataTable).Rows)
                    {
                        dr["CustomC"] = "X";
                    }
                }

                if (!blfetchCustomer)
                {
                    /*frm_CustomerBrw = new frm_CustomerBrwUC();
                    frm_CustomerBrw.bPOS = true;
                    //frm_CustomerBrw.GetCustomerGridDimensions();
                    frm_CustomerBrw.bar1.Visibility = Visibility.Collapsed;
                    frm_CustomerBrw.line1.Visibility = Visibility.Collapsed;
                    frm_CustomerBrw.line2.Visibility = Visibility.Collapsed;
                    pnlCustMain.Children.Add(frm_CustomerBrw);
                    frm_CustomerBrw.storecd = cmbStore.Text;
                    frm_CustomerBrw.PopulateCustomerStatus();
                    frm_CustomerBrw.cmbFilter.EditValue = "Active Customers";
                    frm_CustomerBrw.cmbFilter.Visibility = Visibility.Collapsed;
                    frm_CustomerBrw.line1.Visibility = Visibility.Collapsed;
                    frm_CustomerBrw.line2.Visibility = Visibility.Collapsed;
                    frm_CustomerBrw.FetchData(frm_CustomerBrw.cmbFilter.EditValue.ToString());*/
                    FetchCustomerData();
                    blfetchCustomer = true;
                    /// Set UP/Down Button to move cursor through Cart Item
                    //EnableDisableButton(btnUpCust, btnDownCust, frm_CustomerBrw.grdCustomer);
                }
                else
                {
                    //frm_CustomerBrw.GetCustomerGridDimensions();
                }
            }
            else if (tcPOS.SelectedIndex == 2)//Items
            {
                if (grdProduct.ItemsSource != null)
                {
                    foreach (DataRow dr in (grdProduct.ItemsSource as DataTable).Rows)
                    {
                        dr["CustomI"] = "X";
                        //  dr["PriceA"] = SystemVariables.CurrencySymbol + dr["PriceA"].ToString();
                    }
                }

                

                if (!blfetchProduct)
                {
                    /*
                    frm_ProductBrw = new POSSection.frmProductBrwUC();
                    frm_ProductBrw.bar1.Visibility = Visibility.Collapsed;
                    frm_ProductBrw.bar2.Visibility = Visibility.Collapsed;
                    pnlProdtMain.Children.Add(frm_ProductBrw);
                    frm_ProductBrw.cmbFilter.EditValue = "Active Products";
                    frm_ProductBrw.IsPOS = true;
                    frm_ProductBrw.FetchData(true, "Active Products");
                    frm_ProductBrw.SetDecimalPlace();
                    frm_ProductBrw.PopulateProductStatus();
                    */
                    blfetchProduct = true;
                    //EnableDisableButton(btnUpProduct, btnDownProduct, grdProduct);
                    FetchItemData();
                }
                else
                {
                    //frm_ProductBrw.GetItemGridDimensions();
                }
            }
            else if (tcPOS.SelectedIndex == 3)//Setup
            {
                if (!blfetchSetup)
                {
                    if (((SecurityPermission.AccessTaxScreen) && (intSetNavBarSetup == 1)) || ((SystemVariables.CurrentUserID <= 0) && (Settings.RegPOSAccess == "Y")))
                    {
                        SetSeletedItem(tabSetup, "nbTax1");
                        if (frm_TaxBrwUC.Visibility == Visibility.Collapsed)
                        {
                            HideAllBrowseForm("frm_TaxBrwUC");
                            frm_TaxBrwUC.FetchData();
                            lbHeading.Text = Properties.Resources.List_of_Taxes;
                            pnlSetupUpDown.Visibility = Visibility.Visible;
                        }
                    }
                    else if (((SecurityPermission.AccessTenderTypeScreen) && (intSetNavBarSetup == 2)) || ((SystemVariables.CurrentUserID <= 0) && (Settings.RegPOSAccess == "Y")))
                    {
                        SetSeletedItem(tabSetup, "nbTenderTypes1");
                        if (frm_TenderTypesBrwUC.Visibility == Visibility.Collapsed)
                        {
                            HideAllBrowseForm("frm_TenderTypesBrwUC");
                            frm_TenderTypesBrwUC.FetchData();
                            lbHeading.Text = "List of Tender Types";
                            frm_TenderTypesBrwUC.EnableDisableButton();
                            pnlSetupUpDown.Visibility = Visibility.Visible;
                        }
                    }
                    else
                    {

                    }

                    blfetchSetup = true;
                }
            }
            else if (tcPOS.SelectedIndex == 4)//exit
            {
                CloseKeyboards();
                if (!CheckFunctionButton("20b"))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    e.Handled = true;
                    return;
                }
                if (dtblPOS.Rows.Count > 0)
                {
                    if (ResMan.MessageBox.Show("Do you want to void order and exit?", Properties.Resources.Validation, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                    {
                        BtnDelete1_Click(btnDelete1, new RoutedEventArgs());
                    }
                    else
                    {
                        Dispatcher.BeginInvoke(new Action(() => tcPOS.SelectedIndex = 0));
                        //tcPOS.SelectedIndex = 0;
                        e.Handled = true;
                        return;
                    }
                }

                Settings.PriceLevelForOneTime = "N";
                Settings.PriceLevelForThisSale = "N";
                tcPOS.SelectedIndex = 0;

                InitializeScreen();

                UpdateUserCustomization();

                e.Handled = true;

                ResMan.closeKeyboard();
                Visibility = Visibility.Collapsed;
                OnPOSCloseCommand?.Execute(null);

                SystemVariables.CurrentUserID = -1;
                SystemVariables.CurrentUserName = "";
                (Window.GetWindow(this) as MainWindow).LoggedInUserTextBlock.Text = Properties.Resources.NoLoggedInUser;
                //this.Visibility = Visibility.Collapsed;
                (Window.GetWindow(this) as MainWindow).LoginMenuBorder.Visibility = Visibility.Visible;
                (Window.GetWindow(this) as MainWindow).LoginBorder.Visibility = Visibility.Collapsed;
                (Window.GetWindow(this) as MainWindow).LoginGrid.Visibility = Visibility.Visible;
                (Window.GetWindow(this) as MainWindow).SearchMemberTextBox.Visibility = Visibility.Hidden;
                (Window.GetWindow(this) as MainWindow).btnFrontOffice.Visibility = Visibility.Hidden;

                //(Window.GetWindow(this) as MainWindow).LoginSection = LoginSection.None;
                //(Window.GetWindow(this) as MainWindow).LoginControl.txtUser.Text = "";
                //(Window.GetWindow(this) as MainWindow).LoginControl.txtPswd.PasswordBox.Password = "";

                //(Window.GetWindow(this) as MainWindow).SetDefaultWindow();
                (Window.GetWindow(this) as MainWindow).UpdateLayout();


            }
        }

        private void SetSeletedItem(WrapPanel wp, string itemname)
        {
            foreach (UIElement uI in wp.Children)
            {
                if ((uI as DockPanel).Name == itemname)
                {
                    (uI as DockPanel).Tag = "1";
                    (uI as DockPanel).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#364A5D"));
                    foreach (UIElement ulsub in (uI as DockPanel).Children)
                    {
                        if (ulsub is Grid)
                        {
                            foreach (UIElement cr in (ulsub as Grid).Children)
                            {
                                if (cr is TextBlock)
                                {
                                    (cr as TextBlock).FontFamily = this.FindResource("OSSemiBold") as FontFamily;
                                    (cr as TextBlock).Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#6EC1DA"));
                                }

                                if (cr is Image)
                                {
                                    (cr as Image).Visibility = Visibility.Visible;
                                }
                            }
                        }

                    }

                }
            }
        }

        private bool CheckFunctionButton(string scode)
        {
            blFunctionBtnAccess = false;
            if (SystemVariables.CurrentUserID <= 0)
            {
                blFunctionBtnAccess = true;
                return true;
            }
            if (Settings.ForcedLogin == "N")
            {
                PosDataObject.Security objSecurity = new PosDataObject.Security();
                objSecurity.Connection = new SqlConnection(SystemVariables.ConnectionString);
                int result = objSecurity.IsExistsPOSAccess(SystemVariables.CurrentUserID, scode);
                if (result == 0)
                {
                    if (blAllowByAdmin)
                    {
                        return true;
                    }
                    else
                    {
                        bool bl2 = false;
                        frm_POSLoginDlg frm_POSLoginDlg = new frm_POSLoginDlg();

                        frm_POSLoginDlg.SecurityCode = scode;
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSLoginDlg.ShowDialog();
                        blurGrid.Visibility = Visibility.Collapsed;
                        if (frm_POSLoginDlg.DialogResult == true)
                        {
                            bl2 = true;
                            blAllowByAdmin = frm_POSLoginDlg.AllowByAdmin;
                            intSuperUserID = frm_POSLoginDlg.SuperUserID;
                        }
                        if (!bl2) return false;
                        else return true;
                    }
                }
                else
                {
                    blFunctionBtnAccess = true;
                    return true;
                }
            }
            else
            {
                if (blAllowByAdmin)
                {
                    return true;
                }
                else
                {
                    bool bl3 = false;
                    //frmPOSLoginDlg frm_POSLoginDlg2 = new frmPOSLoginDlg();
                    //try
                    //{
                    //    frm_POSLoginDlg2.SecurityCode = scode;
                    //    frm_POSLoginDlg2.ShowDialog();
                    //    if (frm_POSLoginDlg2.DialogResult == true)
                    //    {
                    //        bl3 = true;
                    //        blAllowByAdmin = frm_POSLoginDlg2.AllowByAdmin;
                    //        intSuperUserID = frm_POSLoginDlg2.SuperUserID;
                    //    }
                    //}
                    //finally
                    //{
                    //    frm_POSLoginDlg2.Dispose();
                    //}
                    if (!bl3) return false;
                    else return true;
                }
            }
        }

        #region POSActionListBox

        double posActionListBoxVerticalUpOffset = 0;
        double posActionListBoxVerticalDownOffset = 0;

        private void UpScrollButton_Click(object sender, RoutedEventArgs e)
        {
            if (POSActionScrollViewer is null) return;



            posActionListBoxVerticalDownOffset = posActionListBoxVerticalUpOffset = POSActionScrollViewer.VerticalOffset - 30;
            if (posActionListBoxVerticalDownOffset < 0)
            {
                posActionListBoxVerticalDownOffset = posActionListBoxVerticalUpOffset = 0;
            }
            POSActionScrollViewer.ScrollToVerticalOffset(posActionListBoxVerticalDownOffset);
        }

        private void DownScrollButton_Click(object sender, RoutedEventArgs e)
        {
            if (POSActionScrollViewer is null) return;

            if (posActionListBoxVerticalUpOffset < POSActionScrollViewer.ExtentHeight)
                posActionListBoxVerticalDownOffset = posActionListBoxVerticalUpOffset = POSActionScrollViewer.VerticalOffset + 30;
            POSActionScrollViewer.ScrollToVerticalOffset(posActionListBoxVerticalUpOffset);
        }
        #endregion

        private void ItemCategoryListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        #region Variables

        private int CartSL = 0;
        private volatile int watchr = 0;   // not used
        private FileSystemWatcher watcher; // not used

        private bool blLoading = false;

        //PopupKeyBoard userkybd; --SAM comment
        //PopupKeyBoard_es userkybd_es; --SAM comment

        #region Precidia Transaction Variables

        private bool blCG = false;
        private bool blCG1 = false;
        private bool blCG2 = false;
        private string CGresp_Cashbk = "";
        private double CG_Cashbk = 0;
        private string CGresp = "";
        private string CGresptxt = "";
        private string CGmonitor = "";
        private string CGrequestfile = "";
        private string CGanswerfile = "";
        private string CGcashback_R = "";
        private string CGcashback_A = "";
        private string CGtrantype = "";
        private double CGamt = 0;
        private int CGinv = 0;
        private int PrecidiaResponse = -1;
        private string PrecidiaRequestDisplayFile = "";
        private string PrecidiaResponseDisplayFile = "";
        private string PrecidiaDisplayResponse = "";
        private string PrecidiaDisplayResult = "";
        private string PrecidiaDisplayResultText = "";

        private string CGsignature_R = "";
        private string CGsignature_A = "";
        private string CGresp_signature = "";

        private string PrecidiaLogFile = "";
        private string PrecidiaLogPath = "";


        // Precidia Transaction Variables

        #endregion

        #region Datacap payment variables

        private string Dcap_TranType = "";
        private string Dcap_TranCode = "";
        private string Dcap_CardType = "";
        private double Dcap_CashBkAmt = 0;
        private double Dcap_TranAmt = 0;
        private double Dcap_AuthAmt = 0;
        private double Dcap_BalAmt = 0;
        private string Dcap_Sign = "";

        private string Dcap_CmdStatus = "";
        private string Dcap_TextResponse = "";
        private string Dcap_AcctNo = "";
        private string Dcap_Merchant = "";
        private string Dcap_AuthCode = "";
        private string Dcap_RefNo = "";
        private string Dcap_AcqRefData = "";
        private string Dcap_RecordNo = "";
        private string Dcap_InvoiceNo = "";
        private string Dcap_ProcessData = "";

        private int CallPadResetCount = 0;

        private string Dcap_PPAD_CmdStatus = "";
        private string Dcap_PPAD_TextResponse = "";
        private string Dcap_PrintDraft = "";

        #endregion

        #region POSLink payment variables

        private double POSLink_CashBack = 0;
        private string POSLink_ResultCode = "";
        private string POSLink_ResultTxt = "";
        private string POSLink_RefNum = "";
        private string POSLink_AuthCode = "";
        private string POSLink_CardType = "";
        private string POSLink_BogusAccountNum = "";
        private double POSLink_RequestedAmt = 0;
        private double POSLink_ApprovedAmt = 0;
        private double POSLink_RemainingBalance = 0;
        private double POSLink_ExtraBalance = 0;

        private string POSLinkLogFile = "";
        private string POSLinkLogPath = "";
        private string POSLinkSignPath = "";
        private bool boolPAXCashBack = false;
        #endregion

        private string MercuryLogFile = "";
        private string MercuryLogPath = "";


        private string DatacapLogFile = "";
        private string DatacapLogPath = "";

        private string DatacapEMVLogFile = "";
        private string DatacapEMVLogPath = "";

        #region Common Variables for assign Card Transaction Response

        private string AuthCode = "";
        private string TranID = "";
        private string CardNum = "";
        private string CardExMM = "";
        private string CardExYY = "";
        private string CardLogo = "";
        private string CardType = "";
        private string ApprovedAmt = "";
        private string RefNo = "";
        private string CardEntry = "";
        private string AcqRef = "";
        private string Token = "";
        private string MerchantID = "";
        private string MercuryProcessData = "";
        private string MercuryTextResponse = "";
        private double MercuryPurchaseAmount = 0;
        private string MercuryTranCode = "";
        private string MercuryResponseOrigin = "";
        private string MercuryRecordNo = "";
        private string MercuryResponseReturnCode = "";
        private string MercuryGiftCardBalance = "";
        private string strMercuryMerchantID;

        // Common Variables for assign Card Transaction Response

        #endregion

        #region Printing Variables

        private System.Drawing.Font f_title;
        private System.Drawing.Font f_body;
        private System.Drawing.Font f_footer;
        private int intPageCounter;

        private int lineptr = 0;
        private int linecnt = 0;
        private int lineptr1 = 0;
        private int linecnt1 = 0;
        private System.Drawing.Font printFont;
        private DataTable dtblstrm = null;
        private DataTable dtblstrm1 = null;
        private DataTable dtblPrintData = null;

        private int prevPrinterID = 0;

        private string prevPrinterName = "";
        // Printing Variables

        #endregion

        #region WndProc Defination for Weight

        public const int WM_COPYDATA = 0x4A;

        public struct COPYDATASTRUCT
        {
            public IntPtr dwData;
            public int cbData;
            public string lpData;
        }

        // WndProc Defination for Weight

        #endregion

        public void DelegateKey(string Keys)
        {
            Focus();
            System.Windows.Forms.SendKeys.Send(Keys);
        }

        #region Serial Port Variables for Read Weight By Serial Scale

        SerialPort _slport;
        SerialError _slerr;
        private int _slporttry = 0;

        // Serial Port Variables for Read Weight By Serial Scale

        #endregion

        public struct LASTINPUTINFO { public uint cbSize; public uint dwTime; }

        // Retrieves the number of milliseconds that have elapsed since the system was started

        [DllImport("kernel32.dll")]
        public static extern uint GetTickCount();

        // Retrieves the time of the last input event

        [DllImport("user32.dll")]
        private static extern bool GetLastInputInfo(ref LASTINPUTINFO plii);

        // Retrieves a handle to the top-level window whose class name and window name match the specified strings

        [System.Runtime.InteropServices.DllImport("user32.dll", SetLastError = true)]
        static extern IntPtr FindWindow(string lpClassName, string
        lpWindowName);

        // Retrieves the name of the class to which the specified window belongs

        [System.Runtime.InteropServices.DllImport("user32.dll")]
        static extern int GetClassName(IntPtr hWnd, StringBuilder lpClassName,
        int nMaxCount);

        //Changes the size, position, and Z order of a child, pop-up, or top-level window

        [System.Runtime.InteropServices.DllImport("user32.dll")]
        static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);


        #region Variables to get Device Drivers from Local Computer

        PosExplorer m_posExplorer = null;
        PosCommon m_posCommon = null;

        Scale m_posScale = null;
        Scanner m_posScanner = null;

        // Variables to get Device Drivers from Local Computer

        #endregion

        #region Variables for Datalogic Scale / Scanner

        private string SCAN = "";
        private decimal WEIGHT = 0;

        private bool blAttachToLWTimer = false;
        private DataTable dtblLiveWeightStable = null;

        // Variables for Datalogic Scale / Scanner

        #endregion

        #region Pole Display Variables

        int m_rowCount = 0;
        int m_colCount = 0;
        int m_Count = 0;
        private string blink1 = "";
        private string blink2 = "";
        private bool boolMarq = false;

        // Pole Display Variables
        #endregion

        #region forms and classes using this screen

        private frm_CustomerBrwUC frm_CustomerBrw;

        // forms and classes using this modules

        #endregion

        #region Other Variables

        private bool blTrackScan = false;

        private bool blGetWeight = false;
        private bool blFirstTimeScale = true;

        private bool blActiveCategoryScreen = false;

        private bool blCardVarify = false;
        private int intCardTranID = 0;

        private int GCNO = 0;
        private string GCSTORE = "";
        private string GCOPSTORE = "";

        private DateTime dtCustomerDOB = Convert.ToDateTime(null);
        private bool blCacheQty = false;
        private int CustDTaxID = 0;
        private string CustDTaxName = "";
        private double CustDTaxRate = 0;
        private int CustDTaxType = 0;
       

        private int VisibleServiceButton = 0;
        private int VisibleFunctionButton = 0;
        internal bool blfetchCustomer = false;
        private bool blfetchProduct = false;
        private bool blfetchReports = false;
        private bool blfetchSetup = false;
        private DataTable dtblPOS = null;
        private DataTable dtblZeroStock = null;
        private bool blChangeCustomer = false;
        private DataTable dtblForStockUpdate = null;
        private DataTable dtblTax = null;
        private DataTable dtblReturnItem = null;
        private DataTable dtblDeliveryItem = null;
        private DataTable dtblCustNotes = null;
        private DataTable dtblTender = null;

        private int intSelectedRowHandle;
        private int inStep = 0;

        private DataTable dtblAppt = null;
        private DataTable dtblRepairInfo = null;
        private int intCustID = 0;
        private string strCustomerID = "";
        private int intGiftAidID = 20000;
        private int intAcctPayID = 1000;
        private int intBlankID = 10000;
        private string strTaxExempt = "N";
        private string strDiscountLevel = "A";
        private int intUsePriceLevel = 0;

        private string intGiftCertNo = "";
        private double dblGiftCertAmt = 0;
        private double dblStoreCr = 0;
        private double dblCustAcctBalance = 0;
        private double dblCustAcctLimit = 0;

        private int intBottleRefundID = 5000;
        private double dblBottleRefundQty = 0;
        private double dblBottleRefundRate = 0;
        private double dblBottleRefundAmount = 0;

        private int intTaxID1 = 0;
        private int intTaxID2 = 0;
        private int intTaxID3 = 0;

        private double dblTax1 = 0;
        private double dblTax2 = 0;
        private double dblTax3 = 0;
        private double dblFeesCrg = 0;
        private double dblCouponAmount = 0;
        private double dblCouponPerc = 0;
        private double dblCouponApplicableTotal = 0;

        private double dblFeesCouponAmount = 0;
        private double dblFeesCouponPerc = 0;
        private double dblFeesCouponApplicableTotal = 0;

        private double dblFeesCouponTaxAmount = 0;
        private double dblFeesCouponTaxRate = 0;

        private int intSuspendInvNo;
        private bool blResumeTransaction;
        private bool blWorkOrder;

        private bool blOpenCustomerOrder;

        private double dblSpecialMixMatchAmount = 0;

        private bool blOpenMorefuncDlg = false;

        bool blReturnItem = false;
        bool blScan = false;
        private int intMaxInvNo = 0;

        private int intImageWidth;
        private int intImageHeight;
        private string csStorePath = "";

        private int intSuperUserID = 0;
        private bool blAllowByAdmin = false;

        private bool blFunctionBtnAccess = true;
        private bool blFunctionOrderChangeAccess = false;

        private bool blleave = false;
        private bool blleavenotoscan = false;

        private bool iscallfromMFH = false;
        private bool iscallfromMFV = false;

        private bool bl100percinvdiscount = false;

        private string strStartServiceType = "";
        private string strCurrentServiceType = "";

        private bool blRentIssued = false;
        private bool blRentRecall = false;
        private int RentReturnInv = 0;

        private string RentCalcFlag = "N";

        private double RentReturnDeposit1 = 0;
        private double RentReturnDeposit2 = 0;
        private double RentReturnDeposit3 = 0;

        private bool blRepairIssued = false;
        private bool blRepairRecall = false;

        private double repairadv = 0;
        private double repairdue = 0;
        private double repairtender = 0;
        private int repairparentinv = 0;

        private bool blSales = false;


        private int weightitemid = 0;
        private string weightitemname = "";

        private string weightstring = "";
        private string weightcallfrom = "";
        private bool blopenweight = false;

        private bool blInitAutoSignOut = false;
        public bool blInitAutoSignOutAfterTender = false;

        private string weightuom = "";

        private double CustDTaxValue = 0;

        private double dblRentSecurityDeposit = 0;

        private uint LastLoggedTime;

        private double s_wght = 0;
        private string s_wght_u = "";

        private const int _blinkFrequency = 2000;//1/4 of a second
        private const int _maxNumberOfBlinks = 5;
        private int _blinkCount = 0;

        private bool blExistCoupon = false;

        private int NoOfService = 1;

        private int MixMatchUnique = 0;

        private int intPressQty = 1;
        private int intPressCount = 0;
        private bool blPressQty = false;

        private bool blCustNotes = false;

        private DataTable cardidentity;

        private int CurrentCustomerOrderID = 0;

        private bool blTareEntry = false;
        private double dblTareEntryValue = 0;

        private int PrintOrderNo = 0;



        // Other Variables


        // Quick Tendering Related Variables

        private bool boolInvoiceCreated = false;

        private double numRepairAdvanceQT = 0;
        private double numRentDepositQT = 0;
        private double numSubtotalQT = 0;
        private double numNewSubtotalQT = 0;
        private double numFeeQT = 0;
        private double numFeeTaxQT = 0;
        private double numCouponQT = 0;
        private double numTaxQT = 0;
        private double numDiscountQT = 0;
        private double numTotalsaleQT = 0;
        private double numTenderQT = 0;
        private double numBalanceDueQT = 0;
        private double numChangeDueQT = 0;

        private double dblSubtotalQT = 0;
        private double dblDiscountQT = 0;
        private int intDTxIDQT = 0;
        private double dblDTxQT = 0;
        private double dblFeesQT = 0;
        private double dblFeesTaxQT = 0;
        private double dblSpecialMixnMatchQT = 0;
        private double dblCouponQT = 0;
        private double dblCouponPercQT = 0;
        private double dblCouponApplicableTotalQT = 0;

        private double dblFeesCouponAmountQT = 0;
        private double dblFeesCouponPercQT = 0;
        private double dblFeesCouponApplicableTotalQT = 0;
        private double dblFeesCouponTaxAmountQT = 0;

        private double dblNewSubtotalQT = 0;
        private double dblTaxQT = 0;
        private double dblTotalsaleQT = 0;
        private double dblTenderQT = 0;
        private double dblBalanceQT = 0;
        private double dblChangeQT = 0;
        private string strDiscountReasonQT = "";
        private double dblDiscountPercentQT = 0;
        private int intCustIDQT;
        private string strTaxExemptQT;
        private int intTaxID1QT = 0;
        private int intTaxID2QT = 0;
        private int intTaxID3QT = 0;
        private double dblTax1QT = 0;
        private double dblTax2QT = 0;
        private double dblTax3QT = 0;
        private double dblGiftOldAmtQT = 0;
        private int intINVQT = 0;
        private int intSuspendInvoiceNoQT;
        private double dblLayawayAmtQT;
        private double dblLayawayTotalSaleQT;
        private DateTime dtLayawayDateDueQT;
        private int intLAYNOQT = 0;
        private int intLAYTRANQT = 0;
        private int intCardTranIDQT = 0;
        private int intEBTCardTranIDQT = 0;
        private double dblStoreCrQT;
        private double dblCustAcctBalanceQT;
        private double dblCustAcctLimitQT;
        private int intMaxInvNoQT;
        private int intSuperUserIDQT;
        private string PrevPayTypeIDQT;
        private string PrevPayTypeNameQT;
        private int CustDTaxIDQT;
        private string CustDTaxNameQT;
        private double CustDTaxRateQT;
        private int CustDTaxTypeQT;
        private int intRepairInvoiceForDepositQT = 0;
        private double dblBottleRefundQT = 0;
        private int tempMercuryGCCardIDQT = 0;
        private double CustDTaxValueQT = 0;
        private string GCNOQT = "";
        private string GCSTOREQT = "";
        private string GCOPSTOREQT = "";
        private int CashTID = 0;
        private string CashTName = "";
        private string CashTDisplay = "";
        private string strServiceTypeQT = "Sales";
        private string sRentCalcFlagQT = "N";
        private double dblRentSecurityDepositQT;
        private double dblRepairAdvanceQT;
        private double dblRepairAmountQT;
        private double dblRepairDueQT;
        private double dblRepairTenderQT;
        private int intIssueRentInvNoQT;
        private int intIssueRepairInvNoQT;

        private DataTable dtblWODatatblQT;
        private DataTable dtblPOSDatatblQT;
        private DataTable dtblTenderQT = null;
        private DataTable dtblZeroStockQT = null;
        private DataTable dtblLayawayPaymentQT;
        private DataTable dtblLayawayForInvoiceQT = null;
        private DataTable pdtblForStockUpdateQT;
        private DataTable dtblRepairItemInfoQT;
        private DataTable cardidentityfromfastccQT;
        private DataTable dtblFashCCTenderQT;
        private DataTable dtblApptDatatblQT;

        private bool blStoreCreditQT = false;
        private bool blProceed = false;
        private bool blFinalFlag;
        private bool blResumeTransactionQT;
        private bool blWorkOrderTransactionQT;
        private bool blGiftTenderQT = false;
        private bool blGiftNewQT = false;
        private bool blGiftOldQT = false;
        private bool blExistCouponQT = false;
        private bool blBottleRefundQT = false;
        private bool blFashCCQT;
        private bool blRepairDepositQT = false;
        private bool blRepairIssuedQT = false;
        private bool blRepairRecallQT = false;
        private bool blRentIssuedQT = false;
        private bool blRentRecallQT = false;
        private bool blFunctionBtnAccessQT;
        private bool blAllowByAdminQT = false;
        private bool blCardPaymentQT = false;
        private bool blDatacapManualEntryQT = false;
        private bool blRepairPrintQT = false;
        private bool blHouseAccountPaymentQT = false;
        private bool blFSTenderQT = false;
        private bool blSaleQT = false;
        private bool blReturnItemQT = false;
        private bool blNewLayawayQT = false;
        private bool blLayawayQT = false;
        private bool blLayawayRefundQT = false;
        private bool FoodStampTenderingQT = false;
        private bool bl100percinvdiscountQT = false;

        private bool blCustomerOrderingQT = false;
        private int intCustomerOrderNoQT = 0;

        private DateTime dtCustomerDOBQT = Convert.ToDateTime(null);


        private bool CheckEBTPaymentQT = true;
        private bool CheckCardPaymentQT = true;
        private bool CheckMercuryGCPaymentQT = true;
        private bool blMercuryGiftCardIssueQT = false;
        private bool blMercuryGiftCardReloadQT = false;
        private bool bMercuryGiftCardInsufficientBalanceQT = false;
        private double dblMercuryGiftCardIssueValueQT = 0;
        private double dblMercuryGiftCardReloadValueQT = 0;
        private double TotalCashBackQT = 0;
        private DataTable cardidentityQT;
        private DataTable mgccardidentityQT;

        private bool MercuryCardPaymentCheckQT = false;

        private double dblFoodStampTotalQT = 0;

        private int tempMercuryGCCardID = 0;

        #endregion

        #region public declaration

        public uint pLastLoggedTime
        {
            get { return LastLoggedTime; }
            set { LastLoggedTime = value; }
        }

        public int SuperUserID
        {
            get { return intSuperUserID; }
            set { intSuperUserID = value; }
        }

        public bool FunctionBtnAccess
        {
            get { return blFunctionBtnAccess; }
            set { blFunctionBtnAccess = value; }
        }

        public bool ExistCoupon
        {
            get { return blExistCoupon; }
            set { blExistCoupon = value; }
        }

        public string WtString
        {
            get { return weightstring; }
            set { weightstring = value; }
        }

        public string Wttcallfrom
        {
            get { return weightcallfrom; }
            set { weightcallfrom = value; }
        }

        public bool OpenWt
        {
            get { return blopenweight; }
            set { blopenweight = value; }
        }

        // public declaration

        #endregion

        #endregion

        #region Not Used

        // not used

        public string GetWeightFromScale()
        {
            string wval = "";
            bool f = false;
            string readstr = "";
            string validstr = "";
            try
            {
                byte[] buffer = new byte[256];
                _slport.Read(buffer, 0, (int)buffer.Length);
                _slport.BaseStream.Read(buffer, 0, (int)buffer.Length);
                wval = System.Text.Encoding.UTF8.GetString(buffer);

                if (wval.Length > 0)
                {
                    wval = wval.Remove(wval.Length - 1, 1);
                }

                /*validstr = returnvalidstring(readstr);

                if (validstr != "")
                {
                    wval = validstr;
                }
                else
                {
                    buffer = new byte[256];
                    _slport.Read(buffer, 0, (int)buffer.Length);
                    _slport.BaseStream.Read(buffer, 0, (int)buffer.Length);
                    readstr = System.Text.Encoding.ASCII.GetString(buffer);

                    validstr = returnvalidstring(readstr);

                    if (validstr != "")
                    {
                        wval = validstr;
                    }
                    else
                    {
                        buffer = new byte[256];
                        _slport.Read(buffer, 0, (int)buffer.Length);
                        _slport.BaseStream.Read(buffer, 0, (int)buffer.Length);
                        readstr = System.Text.Encoding.ASCII.GetString(buffer);

                        validstr = returnvalidstring(readstr);

                        if (validstr != "")
                        {
                            wval = validstr;
                        }
                        else
                        {
                            wval = "";
                        }
                    }
                }*/
            }
            catch
            {
                wval = "";
            }
            return wval;
        }

        // not used

        private string returnvalidstring(string str)
        {
            txtW1.Text = "";
            if (str == "") return "";
            else
            {
                if (str.Contains("."))
                {
                    int indx = str.IndexOf(".");
                    string tempval = "";
                    try
                    {
                        tempval = str.Substring(0, indx + 1 + Settings.ScaleDecimal);
                        double d = 0;
                        if (double.TryParse(tempval, out d))
                        {
                            txtW1.Text = tempval;
                            return tempval;
                        }
                        else return "";
                    }
                    catch
                    {
                        return "";
                    }
                }
                else return "";
            }
        }

        // not used
        TextBlock txtW1 = new TextBlock();
        public bool IsValidScaleRead(ref string wt)
        {
            string tval = "";
            if (IsActiveScale())
            {
                tval = txtW1.Text;
                if (txtW1.Text != "")
                {
                    wt = tval;
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        // not used
        TextBlock txtweight = new TextBlock();
        public bool IsValidScaleRead1(ref string wt)
        {
            string tval = "";
            if (IsActiveScale1())
            {
                Thread.Sleep(1000);
                if (!blGetWeight)
                {

                    //DocMessage.MsgInformation(txtweight.Text);

                    s_wght = 0;
                    if (txtweight.Text == "")
                    {
                        s_wght = 0;
                    }
                    else
                    {
                        if (txtweight.Text.Contains("?"))
                        {
                            s_wght = 0;
                        }
                        else
                        {
                            string s = "";

                            char[] c = txtweight.Text.ToCharArray();

                            foreach (char _c in c)
                            {

                                if ((_c == '0') || (_c == '1') || (_c == '2') || (_c == '3') || (_c == '4') || (_c == '5') || (_c == '6') || (_c == '7') || (_c == '8') || (_c == '9')
                                    || (_c == '.'))
                                {
                                    s = s + _c;
                                }

                            }

                            s_wght = GeneralFunctions.fnDouble(s);
                        }
                    }
                    tval = s_wght.ToString();
                    blGetWeight = true;
                }



                if (s_wght != 0)
                {
                    wt = tval;
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }


        // not used

        private void si_datareceived(string data)
        {
            txtW.Text = data.Trim();
        }

        // not used
        TextBlock txtW = new TextBlock();
        void sp_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            //Thread.Sleep(1000);
            try
            {
                string data = _slport.ReadLine();
                Dispatcher.BeginInvoke(new SetTextDeleg(si_datareceived), new object[] { data });
                _slporttry++;
                if ((_slporttry > 50) || (returnvalidstring(txtW.Text) != ""))
                {
                    _slport.Close();
                    _slporttry = 0;
                }
            }
            catch
            {
            }
        }

        // Not Used
        private bool IsOpenLogin()
        {
            uint currtime = GetTickCount();
            if (LastLoggedTime == 0)
            {
                return false;
            }
            else
            {
                return false;
            }
        }

        // Not Used
        private void watcher_display_Created(object source, FileSystemEventArgs e)
        {
            if (File.Exists(CGmonitor + PrecidiaResponseDisplayFile))
            {
                System.Threading.Thread.Sleep(1000);
                XmlDocument XDoc1 = new XmlDocument();
                XDoc1.Load(CGmonitor + PrecidiaResponseDisplayFile);
                XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
                for (int i = 0; i < nd.Count; ++i)
                {
                    PrecidiaDisplayResult = nd[i].InnerText.ToUpper();
                }

                XmlNodeList nd1 = XDoc1.GetElementsByTagName("ResultText");
                for (int i = 0; i < nd1.Count; ++i)
                {
                    PrecidiaDisplayResultText = nd1[i].InnerText;
                }

                XmlNodeList nd2 = XDoc1.GetElementsByTagName("Response");
                for (int i = 0; i < nd2.Count; ++i)
                {
                    PrecidiaDisplayResponse = nd2[i].InnerText;
                }

                XDoc1 = null;
                watcher.EnableRaisingEvents = false;
            }
        }

        // Not Used
        private int MercuryGiftCardInCartValidation()
        {
            int blExists = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() == "X")
                {
                    blExists = 1;
                    break;
                }
                if (dr["PRODUCTTYPE"].ToString() != "X")
                {
                    blExists = 2;
                    break;
                }
            }
            return blExists;
        }

        // Not Used 

        private double GetDTaxAmount(int pTaxID, double pRate, int pType, double AppAmount)
        {
            double tx = 0;

            if (pType == 0)
            {
                tx = (pRate * AppAmount) / 100;
            }
            else
            {
                tx = GeneralFunctions.GetTaxFromTaxTable(pTaxID, pRate, AppAmount);
            }
            return tx;
        }

        // not used 
        System.Windows.Controls.Button btnPrintReports = new System.Windows.Controls.Button();
        private void EnableDisableReportPrintBtn()
        {
            int intRowID = -1;
            //intRowID = GeneralFunctions.fnInt32(frm_Reports.reptreelist.FocusedNode[0].ToString()); --Sam
            if (intRowID == 0)
            {
                btnPrintReports.IsEnabled = false;
                return;
            }
            else
            {
                btnPrintReports.IsEnabled = true;
            }
        }

        // not used

        private void DTaxDetails(int pCID, ref string val1, ref double val2, ref int val3)
        {
            PosDataObject.Tax objPOS = new PosDataObject.Tax();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            objPOS.GetDTaxDetails(pCID, ref val1, ref val2, ref val3);
        }

        #endregion

        private async void btnDelete_Click(object sender, RoutedEventArgs e)
        {
            if (lbQuickTenderOutstanding.Visibility == Visibility.Visible)
            {
                dblTenderQT = 0;
                lbQuickTenderOutstanding.Visibility = Visibility.Collapsed;

                return;
            }


            if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0) return;

            if (!CheckFunctionButton("31n"))
            {
                //GeneralFunctions.SetFocus(txtSKU);
                return;
            }



            {
                int intRowID = 0;
                if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0) return;
                intRowID = gridView1.FocusedRowHandle;
                if (intRowID < 0) return;
                int ProductID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colID));
                string ptype1 = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType);

                if (!CheckFunctionButton("31n"))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }

                if ((GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixID)) > 0) &&
                   (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixFlag) == "Y") &&
                   ((await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixLast)) == "N"))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }


                if ((GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colBuyGetFreeHeader)) > 0) &&
            (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colBuyGetFreeCat) == "F"))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }

                if ((GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colBuyGetFreeHeader)) > 0) &&
                    (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colBuyGetFreeCat) == "B"))
                {
                    int hdindx = intRowID;
                    int k = -1;
                    ArrayList ary = new ArrayList();
                    ary.Add(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colSL));
                    foreach (DataRow dr in dtblPOS.Rows)
                    {
                        k++;
                        if (k < hdindx + 1) continue;
                        if ((dr["BUYNGETFREECATEGORY"].ToString() == "X") || (dr["BUYNGETFREECATEGORY"].ToString() == "B")) break;
                        if (GeneralFunctions.fnInt32(dr["BUYNGETFREEHEADERID"].ToString()) == GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colBuyGetFreeHeader)))
                        {
                            if (dr["BUYNGETFREECATEGORY"].ToString() == "F")
                            {
                                ary.Add(dr["SL"]);
                            }
                        }
                    }

                    for (int j = 0; j <= ary.Count - 1; j++)
                    {
                        int intID = GeneralFunctions.fnInt32(ary[j].ToString());

                        DeleteItemsfromBasket_BuyNGetFree(dtblPOS, intID);
                    }
                }
                else if ((GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixID)) > 0) &&
                       (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixLast) == "Y"))
                {
                    int i = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixUnique));

                    ArrayList ary = new ArrayList();

                    foreach (DataRow dr in dtblPOS.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["MIXMATCHUNIQUE"].ToString()) == i)
                        {
                            ary.Add(i);
                        }
                    }

                    for (int j = 0; j <= ary.Count - 1; j++)
                    {
                        int intID = GeneralFunctions.fnInt32(ary[j].ToString());

                        DeleteItemsfromBasket(dtblPOS, intID);
                    }

                }
                else
                {
                    string line1 = "";
                    string line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProduct), "", "", ref line1, ref line2);
                    if (line2.Length > 8) line2 = line2.Substring(0, 8);
                    DisplayPoleText(2, "N", "N", line1, line2 + " * REMOVED *");

                    gridView1.DeleteRow(intRowID);

                    
                }
                gridView1.FocusedRowHandle = intRowID - 1;
                if (gridView1.FocusedRowHandle < 0)
                {
                    if ((gridControl1.ItemsSource as DataTable).Rows.Count > 0)
                    {
                        gridView1.FocusedRowHandle = 0;
                    }
                }
                //await SetCurrentRow(intRowID - 1);
                if (strCurrentServiceType == "Sales") AddAutoMixNMatch();
                GetTotal();
                ShowTax();
                ResetQty();
                EnableDisableButton(btnUP, btnDown, gridControl1);

                if (strCurrentServiceType == "Sales")
                {
                    if (ptype1 == "B")
                    {

                    }
                    else
                    {
                        CheckAndExecuteReorderStockAlert(ProductID);
                    }
                }
                // Age Varification Check
                bool bAgeExists = false;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if (GeneralFunctions.fnInt32(dr["AGE"].ToString()) > 0)
                    {
                        if (Settings.POSIDRequired == "Y")
                        {
                            bAgeExists = true;
                            break;
                        }
                    }
                }
                if (!bAgeExists) dtCustomerDOB = Convert.ToDateTime(null);
                if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0) dtCustomerDOB = Convert.ToDateTime(null);
                if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0) GeneralFunctions.SetFocus(txtSKU);

                if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                {
                    int fval = gridView1.FocusedRowHandle;
                    if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);
                    SecondMonitor.ClearWeightInfo();
                    SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), double.Parse(numSubTotal.Text), double.Parse(numDiscount.Text), double.Parse(numTax.Text), double.Parse(numTotal.Text), dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
                }
            }

        }

        /// Delete Buy N Get Promotion Item form Cart

        private void DeleteItemsfromBasket_BuyNGetFree(DataTable BasketTbl, int DeleteID)
        {
            int intDeleteIndex = -1;

            DataRow dr;
            for (int i = 0; i <= BasketTbl.Rows.Count - 1; i++)
            {
                dr = BasketTbl.Rows[i];

                if (GeneralFunctions.fnInt32(dr["SL"].ToString()) == DeleteID)
                {
                    string line1 = "";
                    string line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(dr["PRODUCT"].ToString(), "", "", ref line1, ref line2);
                    if (line2.Length > 8) line2 = line2.Substring(0, 8);
                    DisplayPoleText(2, "N", "N", line1, line2 + " * REMOVED *");
                    intDeleteIndex = i;
                    break;
                }
            }

            if (intDeleteIndex != -1)
                BasketTbl.Rows[intDeleteIndex].Delete();
        }
        public async Task SetCurrentRow(int RecordID)
        {
            int intRecID = 0;
            int intColCtr = 0;
            //gridView1.SelectRow(0);
            for (intColCtr = 0; intColCtr < (gridControl1.ItemsSource as DataTable).Rows.Count; intColCtr++)
            {
                intRecID = GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(intColCtr, gridControl1, colID)));
                if (RecordID == intRecID) break;
            }
            if (intColCtr >= 0) gridView1.FocusedRowHandle = intColCtr;
        }

        public async Task SetCurrentRow1(int rH)
        {
            gridView1.FocusedRowHandle = rH;
        }

        /// Delete Item form Cart

        private void DeleteItemsfromBasket(DataTable BasketTbl, int DeleteID)
        {
            int intDeleteIndex = -1;

            DataRow dr;
            for (int i = 0; i <= BasketTbl.Rows.Count - 1; i++)
            {
                dr = BasketTbl.Rows[i];

                int ss = GeneralFunctions.fnInt32(dr["MIXMATCHUNIQUE"].ToString());
                if (GeneralFunctions.fnInt32(dr["MIXMATCHUNIQUE"].ToString()) == DeleteID)
                {
                    string line1 = "";
                    string line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(dr["PRODUCT"].ToString(), "", "", ref line1, ref line2);
                    if (line2.Length > 8) line2 = line2.Substring(0, 8);
                    DisplayPoleText(2, "N", "N", line1, line2 + " * REMOVED *");
                    intDeleteIndex = i;
                    break;
                }
            }

            if (intDeleteIndex != -1)
                BasketTbl.Rows[intDeleteIndex].Delete();
        }
        public string ActiveControl = "";
        private async void simpleButton6_Click(object sender, RoutedEventArgs e)
        {
            if ((blReturnItem) || (blRentRecall && (RentCalcFlag == "N"))) return;

            if (IsDonationRecordExistsInCart()) return;

            if (!CheckFunctionButton("31l"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            string line1 = "";
            string line2 = "";

            //  if (Keyboard.FocusedElement == null)
            //    return;

            if (Keyboard.FocusedElement != null && ((Keyboard.FocusedElement.GetType().FullName == "DevExpress.Xpf.Grid.RowControl") ||
                (Keyboard.FocusedElement.GetType().FullName == "DevExpress.Xpf.Grid.TableView")))
            {
                int intRowID = 0;
                if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
                intRowID = gridView1.FocusedRowHandle;
                if (intRowID < 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }

                if ((strCurrentServiceType == "Sales") && (GeneralFunctions.fnInt32(
                    await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixID)) > 0))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
                if ((strCurrentServiceType == "Sales") && (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colBuyGetFreeHeader)) > 0))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }

                frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                try
                {
                    int ProductID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colID));
                    string ProductTy = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType);
                    if ((blRentIssued) && (Settings.CalculateRentLater == "Y")) frm_POSItemDlg.bProceedRentEditingWithoutDuration = true;
                    else frm_POSItemDlg.bProceedRentEditingWithoutDuration = false;
                    double prevdisc = 0;
                    frm_POSItemDlg.BlankLine = false;
                    frm_POSItemDlg.IsEdit = true;
                    if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "W")
                        frm_POSItemDlg.Weighted = true;
                    else
                        frm_POSItemDlg.Weighted = false;

                    if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "O")
                        frm_POSItemDlg.BottleRefund = true;
                    else
                        frm_POSItemDlg.BottleRefund = false;

                    if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "F")
                        frm_POSItemDlg.FuelItem = true;
                    else
                        frm_POSItemDlg.FuelItem = false;

                    //Todo: frm_POSItemDlg.ParentForm = this;
                    frm_POSItemDlg.ServiceType = strCurrentServiceType;

                    frm_POSItemDlg.ProductDesc = (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProduct)).Trim();
                    frm_POSItemDlg.ProductDesc = (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProduct)).Trim();
                    frm_POSItemDlg.Qty = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colQty));

                    frm_POSItemDlg.SelectedTaxID1 = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colTx1Selected));
                    frm_POSItemDlg.SelectedTaxID2 = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colTx2Selected));
                    frm_POSItemDlg.SelectedTaxID3 = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colTx3Selected));

                    double prev_unitdisc = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDisc)) / GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colQty)));
                    double prev_unitpr = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colGRate)) + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDisc)) / GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colQty)));


                    if (strCurrentServiceType == "Sales")
                    {
                        frm_POSItemDlg.Price = Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colRate)) : GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colGRate)) + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble((await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDisc))) / GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colQty)));
                        frm_POSItemDlg.Discount = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDisc));
                    }

                    if (strCurrentServiceType == "Rent")
                    {
                        frm_POSItemDlg.RentType = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colRentType);
                        frm_POSItemDlg.RentAmt = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colRate) : await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colGRate));
                        frm_POSItemDlg.RentDuration = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colRentDuration));
                    }

                    if (strCurrentServiceType == "Repair")
                    {
                        frm_POSItemDlg.RepairAmt = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colRate) : await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colGRate));
                        frm_POSItemDlg.RepairItemSL = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colrepairsl);
                        frm_POSItemDlg.RepairItemTag = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colrepairtag);
                        frm_POSItemDlg.RepairItemPurchase = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colrepairpurchase);
                    }

                    prevdisc = frm_POSItemDlg.Discount;
                    frm_POSItemDlg.WeightedUOM = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colUOM);
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSItemDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSItemDlg.DialogResult == true)
                    {
                        if (strCurrentServiceType == "Sales")
                        {
                            gridControl1.SetCellValue(intRowID, colProduct, frm_POSItemDlg.ProductDesc);
                            gridControl1.SetCellValue(intRowID, colQty, frm_POSItemDlg.Qty.ToString());
                            gridControl1.SetCellValue(intRowID, colRate, frm_POSItemDlg.Price.ToString());
                            gridControl1.SetCellValue(intRowID, colGRate, frm_POSItemDlg.Price.ToString());
                            if (frm_POSItemDlg.TaxChangeFlag) gridControl1.SetCellValue(intRowID, colEdit, "Y");

                            gridControl1.SetCellValue(intRowID, colTaxID1, frm_POSItemDlg.TaxID1);
                            gridControl1.SetCellValue(intRowID, colTaxID2, frm_POSItemDlg.TaxID2);
                            gridControl1.SetCellValue(intRowID, colTaxID3, frm_POSItemDlg.TaxID3);

                            gridControl1.SetCellValue(intRowID, colTaxName1, "");
                            gridControl1.SetCellValue(intRowID, colTaxName2, "");
                            gridControl1.SetCellValue(intRowID, colTaxName3, "");

                            gridControl1.SetCellValue(intRowID, colTaxRate1, frm_POSItemDlg.TaxRate1);
                            gridControl1.SetCellValue(intRowID, colTaxRate2, frm_POSItemDlg.TaxRate2);
                            gridControl1.SetCellValue(intRowID, colTaxRate3, frm_POSItemDlg.TaxRate3);

                            gridControl1.SetCellValue(intRowID, colTaxable1, frm_POSItemDlg.TaxApplicable1);
                            gridControl1.SetCellValue(intRowID, colTaxable2, frm_POSItemDlg.TaxApplicable2);
                            gridControl1.SetCellValue(intRowID, colTaxable3, frm_POSItemDlg.TaxApplicable3);

                            if (!frm_POSItemDlg.BottleRefund)
                            {
                                if (Settings.TaxInclusive == "N")
                                {
                                    gridControl1.SetCellValue(intRowID, colDisc, frm_POSItemDlg.Discount.ToString());
                                    gridControl1.SetCellValue(intRowID, colPrice, Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.Price)
                                        - frm_POSItemDlg.Discount).ToString());
                                    gridControl1.SetCellValue(intRowID, colGPrice, Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.Price)
                                    - frm_POSItemDlg.Discount).ToString());
                                }
                                if (Settings.TaxInclusive == "Y")
                                {
                                    double dblGRate = 0;
                                    if (frm_POSItemDlg.Discount == 0)
                                    {
                                        gridControl1.SetCellValue(intRowID, colDisc, frm_POSItemDlg.Discount.ToString());
                                        gridControl1.SetCellValue(intRowID, colGRate, frm_POSItemDlg.Price.ToString());
                                        dblGRate = frm_POSItemDlg.Price;
                                        gridControl1.SetCellValue(intRowID, colGPrice, Convert.ToDecimal(frm_POSItemDlg.Price * frm_POSItemDlg.Qty).ToString());
                                    }
                                    else
                                    {
                                        if ((frm_POSItemDlg.Price == prev_unitpr) && (frm_POSItemDlg.Discount == prev_unitdisc))
                                        {
                                            gridControl1.SetCellValue(intRowID, colGRate, Convert.ToDecimal(prev_unitpr - prev_unitdisc).ToString());
                                            dblGRate = prev_unitpr - prev_unitdisc;
                                            double dblGPrice = (dblGRate * frm_POSItemDlg.Qty);
                                            gridControl1.SetCellValue(intRowID, colDisc, (prev_unitdisc * frm_POSItemDlg.Qty).ToString());
                                            gridControl1.SetCellValue(intRowID, colGPrice, dblGPrice.ToString());
                                        }
                                        else
                                        {
                                            dblGRate = GeneralFunctions.FormatDouble(frm_POSItemDlg.Price - GeneralFunctions.FormatDouble(frm_POSItemDlg.Discount / frm_POSItemDlg.Qty));
                                            double dblGPrice = GeneralFunctions.FormatDouble(dblGRate * frm_POSItemDlg.Qty);

                                            gridControl1.SetCellValue(intRowID, colGRate, dblGRate.ToString());
                                            gridControl1.SetCellValue(intRowID, colGPrice, dblGPrice.ToString());
                                            gridControl1.SetCellValue(intRowID, colDisc, frm_POSItemDlg.Discount.ToString());
                                        }
                                    }


                                }




                            }
                            else
                            {
                                gridControl1.SetCellValue(intRowID, colPrice, Convert.ToDecimal(-(frm_POSItemDlg.Qty * frm_POSItemDlg.Price)).ToString());
                                gridControl1.SetCellValue(intRowID, colGPrice, Convert.ToDecimal(-(frm_POSItemDlg.Qty * frm_POSItemDlg.Price)).ToString());

                            }
                        }
                        if (strCurrentServiceType == "Rent")
                        {
                            gridControl1.SetCellValue(intRowID, colProduct, frm_POSItemDlg.ProductDesc + "\n");
                            gridControl1.SetCellValue(intRowID, colQty, frm_POSItemDlg.Qty.ToString());
                            gridControl1.SetCellValue(intRowID, colRate, frm_POSItemDlg.RentAmt.ToString());
                            gridControl1.SetCellValue(intRowID, colGRate, frm_POSItemDlg.RentAmt.ToString());
                            gridControl1.SetCellValue(intRowID, colRentType, frm_POSItemDlg.RentType);
                            gridControl1.SetCellValue(intRowID, colRentDuration, frm_POSItemDlg.RentDuration);
                            gridControl1.SetCellValue(intRowID, colRentAmount, frm_POSItemDlg.RentAmt);
                            if ((blRentIssued) && (Settings.CalculateRentLater == "Y"))
                            {
                                gridControl1.SetCellValue(intRowID, colPrice, Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.RentAmt)
                               - frm_POSItemDlg.Discount).ToString());

                                gridControl1.SetCellValue(intRowID, colGPrice, Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.RentAmt * frm_POSItemDlg.RentDuration)
                                   - frm_POSItemDlg.Discount).ToString());
                            }
                            else
                            {
                                gridControl1.SetCellValue(intRowID, colPrice, Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.RentAmt * frm_POSItemDlg.RentDuration)
                                    - frm_POSItemDlg.Discount).ToString());

                                gridControl1.SetCellValue(intRowID, colGPrice, Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.RentAmt * frm_POSItemDlg.RentDuration)
                                    - frm_POSItemDlg.Discount).ToString());
                            }
                            if (frm_POSItemDlg.TaxChangeFlag) gridControl1.SetCellValue(intRowID, colEdit, "Y");

                            gridControl1.SetCellValue(intRowID, colTaxID1, frm_POSItemDlg.TaxID1);
                            gridControl1.SetCellValue(intRowID, colTaxID2, frm_POSItemDlg.TaxID2);
                            gridControl1.SetCellValue(intRowID, colTaxID3, frm_POSItemDlg.TaxID3);

                            gridControl1.SetCellValue(intRowID, colTaxName1, "");
                            gridControl1.SetCellValue(intRowID, colTaxName2, "");
                            gridControl1.SetCellValue(intRowID, colTaxName3, "");

                            gridControl1.SetCellValue(intRowID, colTaxRate1, frm_POSItemDlg.TaxRate1);
                            gridControl1.SetCellValue(intRowID, colTaxRate2, frm_POSItemDlg.TaxRate2);
                            gridControl1.SetCellValue(intRowID, colTaxRate3, frm_POSItemDlg.TaxRate3);

                            gridControl1.SetCellValue(intRowID, colTaxable1, frm_POSItemDlg.TaxApplicable1);
                            gridControl1.SetCellValue(intRowID, colTaxable2, frm_POSItemDlg.TaxApplicable2);
                            gridControl1.SetCellValue(intRowID, colTaxable3, frm_POSItemDlg.TaxApplicable3);

                        }
                        if (strCurrentServiceType == "Repair")
                        {
                            gridControl1.SetCellValue(intRowID, colProduct, frm_POSItemDlg.ProductDesc);
                            gridControl1.SetCellValue(intRowID, colRate, frm_POSItemDlg.RepairAmt.ToString());
                            gridControl1.SetCellValue(intRowID, colGRate, frm_POSItemDlg.RepairAmt.ToString());
                            gridControl1.SetCellValue(intRowID, colrepairsl, frm_POSItemDlg.RepairItemSL);
                            gridControl1.SetCellValue(intRowID, colrepairtag, frm_POSItemDlg.RepairItemTag);
                            gridControl1.SetCellValue(intRowID, colrepairpurchase, frm_POSItemDlg.RepairItemPurchase);

                            gridControl1.SetCellValue(intRowID, colPrice, Convert.ToDecimal((GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colQty)) * frm_POSItemDlg.RepairAmt)).ToString());
                            gridControl1.SetCellValue(intRowID, colGPrice, Convert.ToDecimal((GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colQty)) * frm_POSItemDlg.RepairAmt)).ToString());


                            if (frm_POSItemDlg.TaxChangeFlag) gridControl1.SetCellValue(intRowID, colEdit, "Y");

                            gridControl1.SetCellValue(intRowID, colTaxID1, frm_POSItemDlg.TaxID1);
                            gridControl1.SetCellValue(intRowID, colTaxID2, frm_POSItemDlg.TaxID2);
                            gridControl1.SetCellValue(intRowID, colTaxID3, frm_POSItemDlg.TaxID3);

                            gridControl1.SetCellValue(intRowID, colTaxName1, "");
                            gridControl1.SetCellValue(intRowID, colTaxName2, "");
                            gridControl1.SetCellValue(intRowID, colTaxName3, "");

                            gridControl1.SetCellValue(intRowID, colTaxRate1, frm_POSItemDlg.TaxRate1);
                            gridControl1.SetCellValue(intRowID, colTaxRate2, frm_POSItemDlg.TaxRate2);
                            gridControl1.SetCellValue(intRowID, colTaxRate3, frm_POSItemDlg.TaxRate3);

                            gridControl1.SetCellValue(intRowID, colTaxable1, frm_POSItemDlg.TaxApplicable1);
                            gridControl1.SetCellValue(intRowID, colTaxable2, frm_POSItemDlg.TaxApplicable2);
                            gridControl1.SetCellValue(intRowID, colTaxable3, frm_POSItemDlg.TaxApplicable3);

                        }

                        if (frm_POSItemDlg.Discount > 0)
                        {
                            gridControl1.SetCellValue(intRowID, colProduct, frm_POSItemDlg.ProductDesc + "\n");
                            if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDiscountID) == "0")
                            {
                                gridControl1.SetCellValue(intRowID, colDiscountID, "9988");
                                gridControl1.SetCellValue(intRowID, colDiscountText, Properties.Resources.Discount__.Replace("$", SystemVariables.CurrencySymbol) + frm_POSItemDlg.Discount.ToString("f"));
                                gridControl1.SetCellValue(intRowID, colDLogic, "A");
                                gridControl1.SetCellValue(intRowID, colDVal, frm_POSItemDlg.Discount);
                            }
                            else
                            {
                                if (prevdisc != frm_POSItemDlg.Discount)
                                {
                                    gridControl1.SetCellValue(intRowID, colDiscountID, "9988");
                                    gridControl1.SetCellValue(intRowID, colDiscountText, Properties.Resources.Discount__.Replace("$", SystemVariables.CurrencySymbol) + frm_POSItemDlg.Discount.ToString("f"));
                                    gridControl1.SetCellValue(intRowID, colDLogic, "A");
                                    gridControl1.SetCellValue(intRowID, colDVal, frm_POSItemDlg.Discount);
                                }
                            }
                        }

                        if (frm_POSItemDlg.Discount == 0)
                        {
                            if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDiscountID) != "0")
                            {
                                gridControl1.SetCellValue(intRowID, colDiscountID, "0");
                                gridControl1.SetCellValue(intRowID, colDiscountText, "");
                                gridControl1.SetCellValue(intRowID, colDLogic, "");
                                gridControl1.SetCellValue(intRowID, colDVal, "0");
                            }
                        }
                        line1 = "";
                        line2 = "";
                        RearrangeCartItemTextBeforePoleDisplay(frm_POSItemDlg.ProductDesc, frm_POSItemDlg.Qty.ToString(), frm_POSItemDlg.Price.ToString(), ref line1, ref line2);
                        DisplayPoleText(2, "N", "N", line1, line2);

                        

                       SetCartDisplay();

                        gridControl1.ItemsSource = dtblPOS;

                        gridControl1.RefreshData();

                        if (strCurrentServiceType == "Sales")
                        {
                            if ((ProductTy == "O") || (ProductTy == "W") || (ProductTy == "B"))
                            {

                            }
                            else
                            {
                                CheckAndExecuteReorderStockAlert(ProductID);
                            }
                        }

                        ToggleWithEmptyCart();
                        /// Set UP/Down Button to move cursor through Cart Item
                        EnableDisableButton(btnUP, btnDown, gridControl1);
                        GetTotal(); /// Calculate and Display Cart Total
                        ShowTax(); /// Calculate and Display Taxes of Cart Items
                        ResetQty();  /// Reset Item Quantity
                                     /// 
                        //gridControl1.RefreshData();
                    }
                }
                finally
                {
                }
                GeneralFunctions.SetFocus(txtSKU);
            }
            else
            {
                frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                try
                {
                    if ((blRentIssued) && (Settings.CalculateRentLater == "Y")) frm_POSItemDlg.bProceedRentEditingWithoutDuration = true;
                    else frm_POSItemDlg.bProceedRentEditingWithoutDuration = false;
                    //Todo: frm_POSItemDlg.ParentForm = this;
                    frm_POSItemDlg.ServiceType = strCurrentServiceType;
                    frm_POSItemDlg.BlankLine = true;
                    frm_POSItemDlg.IsEdit = true;
                    frm_POSItemDlg.Weighted = false;
                    frm_POSItemDlg.TaxExempt = strTaxExempt;
                    frm_POSItemDlg.ProductDesc = Properties.Resources.Misc;
                    frm_POSItemDlg.Qty = 1;
                    frm_POSItemDlg.Price = 0;
                    frm_POSItemDlg.RentAmt = 1;
                    frm_POSItemDlg.RentDuration = 1;
                    frm_POSItemDlg.RepairAmt = 0;
                    frm_POSItemDlg.RentType = "DY";
                    frm_POSItemDlg.RepairItemPurchase = "";
                    frm_POSItemDlg.WeightedUOM = "";
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSItemDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSItemDlg.DialogResult == true)
                    {

                        string val1 = "";
                        string val2 = "0";
                        string val3 = "0";
                        string val4 = "";
                        string val5 = "";
                        intBlankID++;
                        string refDP = "";

                        if (Settings.DecimalPlace == 3) refDP = "3"; else refDP = "2";

                        string pdesc = frm_POSItemDlg.ProductDesc;

                        if (strCurrentServiceType == "Rent") pdesc = pdesc + "\n";

                        if (strCurrentServiceType != "Repair")
                        {
                            if (frm_POSItemDlg.Discount > 0)
                            {
                                val1 = "A";
                                val2 = frm_POSItemDlg.Discount.ToString();
                                val3 = frm_POSItemDlg.Discount.ToString();
                                val4 = "9988";
                                val5 = Properties.Resources.Discount__.Replace("$", SystemVariables.CurrencySymbol) + frm_POSItemDlg.Discount.ToString("f");
                                pdesc = pdesc + "\n";
                            }
                        }

                        if (strCurrentServiceType == "Sales")
                        {
                            dtblPOS.Rows.Add(new object[]
                            { intBlankID.ToString(),pdesc,"B","0","0",frm_POSItemDlg.Cost.ToString(),
                              frm_POSItemDlg.Qty.ToString(),frm_POSItemDlg.Price.ToString(),frm_POSItemDlg.Price.ToString(),
                              Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.Price)-frm_POSItemDlg.Discount).ToString(),
                              "0","0","0","","","","",GetUniqueString(),refDP,"",val1,val2,val3,val4,val5,"1",
                              frm_POSItemDlg.TaxID1.ToString(),frm_POSItemDlg.TaxID2.ToString(),frm_POSItemDlg.TaxID3.ToString(),
                              frm_POSItemDlg.TaxName1.ToString(),frm_POSItemDlg.TaxName2.ToString(),frm_POSItemDlg.TaxName3.ToString(),
                              frm_POSItemDlg.TaxRate1.ToString(),frm_POSItemDlg.TaxRate2.ToString(),frm_POSItemDlg.TaxRate3.ToString(),
                              frm_POSItemDlg.TaxApplicable1.ToString(),frm_POSItemDlg.TaxApplicable2.ToString(),
                              frm_POSItemDlg.TaxApplicable3.ToString(),strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"",
                              "0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,
                              Convert.ToDecimal(((frm_POSItemDlg.Qty * frm_POSItemDlg.Price)-frm_POSItemDlg.Discount)/frm_POSItemDlg.Qty).ToString(),
                              Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.Price)-frm_POSItemDlg.Discount).ToString(),"","","","",""
                              });
                        }

                        if (strCurrentServiceType == "Rent")
                        {
                            dtblPOS.Rows.Add(new object[]
                            { intBlankID.ToString(),pdesc,"B","0","0",frm_POSItemDlg.Cost.ToString(),
                              frm_POSItemDlg.Qty.ToString(),frm_POSItemDlg.RentAmt.ToString(),frm_POSItemDlg.RentAmt.ToString(),
                              Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.RentAmt  * frm_POSItemDlg.RentDuration)
                              -frm_POSItemDlg.Discount).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,"",
                              val1,val2,val3,val4,val5,"1",frm_POSItemDlg.TaxID1.ToString(),frm_POSItemDlg.TaxID2.ToString(),
                              frm_POSItemDlg.TaxID3.ToString(),frm_POSItemDlg.TaxName1.ToString(),frm_POSItemDlg.TaxName2.ToString(),
                              frm_POSItemDlg.TaxName3.ToString(),frm_POSItemDlg.TaxRate1.ToString(),frm_POSItemDlg.TaxRate2.ToString(),
                              frm_POSItemDlg.TaxRate3.ToString(),frm_POSItemDlg.TaxApplicable1.ToString(),
                              frm_POSItemDlg.TaxApplicable2.ToString(),frm_POSItemDlg.TaxApplicable3.ToString(),strCurrentServiceType,
                              frm_POSItemDlg.RentType,frm_POSItemDlg.RentDuration.ToString(),frm_POSItemDlg.RentAmt.ToString(),
                              "0","","","",0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"",
                              "0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,
                              frm_POSItemDlg.RentAmt.ToString(),
                              Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.RentAmt  * frm_POSItemDlg.RentDuration)
                              -frm_POSItemDlg.Discount).ToString(),"","","","","","N"});
                        }

                        if (strCurrentServiceType == "Repair")
                        {
                            dtblPOS.Rows.Add(new object[]
                           { intBlankID.ToString(),pdesc,"B","0","0",frm_POSItemDlg.Cost.ToString(),"1",
                              frm_POSItemDlg.RepairAmt.ToString(),frm_POSItemDlg.RepairAmt.ToString(),
                              Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.RepairAmt)-frm_POSItemDlg.Discount).ToString(),
                              "0","0","0","","","","",GetUniqueString(),refDP,"",val1,val2,val3,val4,val5,"1",
                              frm_POSItemDlg.TaxID1.ToString(),frm_POSItemDlg.TaxID2.ToString(),frm_POSItemDlg.TaxID3.ToString(),
                              frm_POSItemDlg.TaxName1.ToString(),frm_POSItemDlg.TaxName2.ToString(),frm_POSItemDlg.TaxName3.ToString(),
                              frm_POSItemDlg.TaxRate1.ToString(),frm_POSItemDlg.TaxRate2.ToString(),frm_POSItemDlg.TaxRate3.ToString(),
                              frm_POSItemDlg.TaxApplicable1.ToString(),frm_POSItemDlg.TaxApplicable2.ToString(),
                              frm_POSItemDlg.TaxApplicable3.ToString(),strCurrentServiceType,"NA","0","0","0",frm_POSItemDlg.RepairItemTag,
                              frm_POSItemDlg.RepairItemSL,frm_POSItemDlg.RepairItemPurchase,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,
                              frm_POSItemDlg.RepairAmt.ToString(),
                              Convert.ToDecimal((frm_POSItemDlg.Qty * frm_POSItemDlg.RepairAmt)-frm_POSItemDlg.Discount).ToString(),"","","","","","N"});
                        }

                        SetCartDisplay();
                        line1 = "";
                        line2 = "";
                        //Todo: RearrangeCartItemTextBeforePoleDisplay(frm_POSItemDlg.ProductDesc, frm_POSItemDlg.Qty.ToString(), frm_POSItemDlg.Price.ToString(), ref line1, ref line2);
                        DisplayPoleText(2, "N", "N", line1, line2);

                        SetCartDisplay();
                        gridControl1.ItemsSource = dtblPOS;
                        ToggleWithEmptyCart();
                        gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;

                        /// Set UP/Down Button to move cursor through Cart Item
                        EnableDisableButton(btnUP, btnDown, gridControl1);
                        GetTotal(); /// Calculate and Display Cart Total
                        ShowTax(); /// Calculate and Display Taxes of Cart Items
                        ResetQty();  /// Reset Item Quantity
                                     /// 
                        //gridControl1.RefreshData();
                    }
                }
                finally
                {
                }
            }
        }

        private bool FinalAgeVerificationOfCartBeforePosting()
        {
            if (Settings.POSIDRequired == "N") return true;
            else
            {
                DateTime dtMin = DateTime.Today.Date;
                bool bagecheck = false;
                foreach (DataRow dr in dtblPOS.Rows)
                {

                    if (GeneralFunctions.fnInt32(dr["AGE"].ToString()) > 0)
                    {
                        DateTime tempdate = DateTime.Today.Date.AddYears(-GeneralFunctions.fnInt32(dr["AGE"].ToString()));
                        if (tempdate < dtMin) dtMin = tempdate;
                        bagecheck = true;
                    }
                }

                if (bagecheck)
                {
                    int MinAge = DateTime.Today.Date.Year - dtMin.Year;
                    if (dtCustomerDOB == Convert.ToDateTime(null))
                    {
                        if (new MessageBoxWindow().Show("You have selected items where minimum age of customer is "
                            + MinAge.ToString() + " : Birthdate on or before " + dtMin.ToString(SystemVariables.DateFormat) + "./r/nDo you want to proceed?", "", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.No)
                        {
                            return false;
                        }
                        else
                        {
                            DateTime dtEntered = Convert.ToDateTime(null);

                            frm_Calendar frm = new frm_Calendar();
                            try
                            {
                                frm.iscallforAge = true;
                                frm.PassingValue = dtMin.ToString();
                                blurGrid.Visibility = Visibility.Visible;
                                frm.ShowDialog();
                                blurGrid.Visibility = Visibility.Collapsed;
                                if (frm.DialogResult == true)
                                {
                                    dtEntered = frm.caldate;
                                }
                            }
                            finally
                            {
                            }

                            if (dtEntered == Convert.ToDateTime(null)) return false;
                            else
                            {
                                if (dtEntered <= dtMin)
                                {
                                    dtCustomerDOB = dtEntered;
                                    return true;
                                }
                                else
                                {
                                    return false;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (dtCustomerDOB > dtMin)
                        {
                            if (new MessageBoxWindow().Show("You have selected items where minimum age of customer is "
                                + MinAge.ToString() + " : Birthdate on or before " + dtMin.ToString(SystemVariables.DateFormat) + "./r/nDo you want to proceed?", "", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.No)
                            {
                                return false;
                            }
                            else
                            {
                                DateTime dtEntered = Convert.ToDateTime(null);

                                frm_Calendar frm = new frm_Calendar();
                                try
                                {
                                    frm.iscallforAge = true;
                                    frm.PassingValue = dtMin.ToString();
                                    blurGrid.Visibility = Visibility.Visible;

                                    frm.ShowDialog();
                                    blurGrid.Visibility = Visibility.Collapsed;
                                    if (frm.DialogResult == true)
                                    {
                                        dtEntered = frm.caldate;
                                    }
                                }
                                finally
                                {
                                }

                                if (dtEntered == Convert.ToDateTime(null)) return false;
                                else
                                {
                                    if (dtEntered <= dtMin)
                                    {
                                        dtCustomerDOB = dtEntered;
                                        return true;
                                    }
                                    else
                                    {
                                        return false;
                                    }
                                }
                            }
                        }
                        else
                        {
                            return true;
                        }
                    }
                }
                else
                {
                    return true;
                }
            }

        }
        private DataTable FinalDataTable()
        {
            DataTable dtblFinal = new DataTable();
            dtblFinal.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("COST", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("QTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICEA", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICEB", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICEC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICEOVERRIDE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NEWPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DEPT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("CAT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMDESC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("GIFTCERTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTLEVEL", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ONSALE", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMDISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//38
            dtblFinal.Columns.Add("TX1", System.Type.GetType("System.Double"));//39
            dtblFinal.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//40
            dtblFinal.Columns.Add("TX2", System.Type.GetType("System.Double"));//41
            dtblFinal.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//42
            dtblFinal.Columns.Add("TX3", System.Type.GetType("System.Double"));//43

            dtblFinal.Columns.Add("MIXMATCHID", System.Type.GetType("System.Int32"));//46
            dtblFinal.Columns.Add("MIXMATCHFLAG", System.Type.GetType("System.String"));//47
            dtblFinal.Columns.Add("MIXMATCHTYPE", System.Type.GetType("System.String"));//48
            dtblFinal.Columns.Add("MIXMATCHVALUE", System.Type.GetType("System.Double"));//49
            dtblFinal.Columns.Add("MIXMATCHQTY", System.Type.GetType("System.Int32"));//50
            dtblFinal.Columns.Add("MIXMATCHUNIQUE", System.Type.GetType("System.Int32"));//51
            dtblFinal.Columns.Add("MIXMATCHLAST", System.Type.GetType("System.String"));//52

            dtblFinal.Columns.Add("FEESID", System.Type.GetType("System.String"));//62
            dtblFinal.Columns.Add("FEESLOGIC", System.Type.GetType("System.String"));//63
            dtblFinal.Columns.Add("FEESVALUE", System.Type.GetType("System.String"));//64
            dtblFinal.Columns.Add("FEESTAXRATE", System.Type.GetType("System.String"));//65
            dtblFinal.Columns.Add("FEES", System.Type.GetType("System.String"));//66
            dtblFinal.Columns.Add("FEESTAX", System.Type.GetType("System.String"));//67
            dtblFinal.Columns.Add("FEESTEXT", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("FEESQTY", System.Type.GetType("System.String"));//68

            dtblFinal.Columns.Add("SALEPRICEID", System.Type.GetType("System.Int32"));//46

            // customer Destination Tax
            dtblFinal.Columns.Add("DTXID", System.Type.GetType("System.Int32"));//71
            dtblFinal.Columns.Add("DTXTYPE", System.Type.GetType("System.Int32"));//72
            dtblFinal.Columns.Add("DTXRATE", System.Type.GetType("System.Double"));//73
            dtblFinal.Columns.Add("DTX", System.Type.GetType("System.Double"));//74

            dtblFinal.Columns.Add("EDITF", System.Type.GetType("System.String"));//75
            dtblFinal.Columns.Add("NOTES", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PROMPTPRICE", System.Type.GetType("System.String"));//75

            dtblFinal.Columns.Add("BUYNGETFREEHEADERID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREECATEGORY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREENAME", System.Type.GetType("System.String"));

            // Customer's Age Verification
            dtblFinal.Columns.Add("AGE", System.Type.GetType("System.Int32"));

            dtblFinal.Columns.Add("GRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("GPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOM", System.Type.GetType("System.String"));

            // fetch TaxID, TaxName first

            string strTaxID1 = "0";
            string strTaxID2 = "0";
            string strTaxID3 = "0";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";
            string strTaxRate1 = "0";
            string strTaxRate2 = "0";
            string strTaxRate3 = "0";
            int intCount = 0;
            int iTaxType1 = 0;
            int iTaxType2 = 0;
            int iTaxType3 = 0;
            double TaxVal1 = 0;
            double TaxVal2 = 0;
            double TaxVal3 = 0;

            //Mix n Match

            int iMixID = 0;
            int iMixQty = 0;
            int iMixUnique = 0;
            double dMixVal = 0;
            string sMixType = "";
            string sMixFlag = "N";
            string sMixLast = "N";

            // Fees & Charges

            int iFeeID = 0;
            string sFeesLogic = "";
            double dFeesValue = 0;
            double dFeesTaxRate = 0;
            double dFees = 0;
            double dFeesTax = 0;
            string sFeesText = "";
            string sFeesQty = "N";

            int iSalePriceID = 0;

            double dGRate = 0;
            double dGPrice = 0;

            DataTable dtblTaxHeader = new DataTable();
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTaxHeader = objTax.FetchActiveTax();

            foreach (DataRow dr in dtblTaxHeader.Rows)
            {
                intCount++;
                if (intCount == 1)
                {
                    strTaxID1 = dr["ID"].ToString();
                    strTaxName1 = dr["TaxName"].ToString();
                    strTaxRate1 = dr["TaxRate"].ToString();
                }
                if (intCount == 2)
                {
                    strTaxID2 = dr["ID"].ToString();
                    strTaxName2 = dr["TaxName"].ToString();
                    strTaxRate2 = dr["TaxRate"].ToString();
                }
                if (intCount == 3)
                {
                    strTaxID3 = dr["ID"].ToString();
                    strTaxName3 = dr["TaxName"].ToString();
                    strTaxRate3 = dr["TaxRate"].ToString();
                    break;
                }
            }
            dtblTaxHeader.Dispose();

            foreach (DataRow dr1 in dtblPOS.Rows)
            {
                string pSKU = "";
                string pDept = "";
                string pCat = "";
                string pT1 = "N";
                string pT2 = "N";
                string pT3 = "N";
                string pPrA = "0";
                string pPrB = "0";
                string pPrC = "0";
                string pDL = "A";
                string pCID = "0";

                string pEdit = "N";
                string pPrompt = "N";

                dGRate = 0;
                dGPrice = 0;

                int pBuyID = 0;
                string pBuyCat = "X";
                string pBuyCaption = "";

                string pnt = "";

                if (intCustID == 0)
                {
                    pDL = "A";
                    pCID = "0";
                }
                else
                {
                    pDL = strDiscountLevel.Trim();
                    if (pDL == "") pDL = "A";
                    pCID = intCustID.ToString();
                }

                iTaxType1 = 0;
                iTaxType2 = 0;
                iTaxType3 = 0;
                TaxVal1 = 0;
                TaxVal2 = 0;
                TaxVal3 = 0;

                int tx1ty = 0;
                int tx2ty = 0;
                int tx3ty = 0;

                int tx1id = 0;
                int tx2id = 0;
                int tx3id = 0;

                double tx1 = 0;
                double tx2 = 0;
                double tx3 = 0;

                int idtxid = 0;
                int idtxtype = 0;
                double ddtxrate = 0;
                double ddtx = 0;


                tx1ty = GeneralFunctions.fnInt32(dr1["TX1TYPE"].ToString());
                tx2ty = GeneralFunctions.fnInt32(dr1["TX2TYPE"].ToString());
                tx3ty = GeneralFunctions.fnInt32(dr1["TX3TYPE"].ToString());

                tx1id = GeneralFunctions.fnInt32(dr1["TX1ID"].ToString());
                tx2id = GeneralFunctions.fnInt32(dr1["TX2ID"].ToString());
                tx3id = GeneralFunctions.fnInt32(dr1["TX3ID"].ToString());

                tx1 = GeneralFunctions.fnDouble(dr1["TX1"].ToString());
                tx2 = GeneralFunctions.fnDouble(dr1["TX2"].ToString());
                tx3 = GeneralFunctions.fnDouble(dr1["TX3"].ToString());

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx1id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx1id > 0))
                {
                    iTaxType1 = tx1ty;
                    TaxVal1 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx2id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx2id > 0))
                {
                    iTaxType1 = tx2ty;
                    TaxVal1 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx3id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx3id > 0))
                {
                    iTaxType1 = tx3ty;
                    TaxVal1 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx1id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx1id > 0))
                {
                    iTaxType2 = tx1ty;
                    TaxVal2 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx2id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx2id > 0))
                {
                    iTaxType2 = tx2ty;
                    TaxVal2 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx3id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx3id > 0))
                {
                    iTaxType2 = tx3ty;
                    TaxVal2 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx1id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx1id > 0))
                {
                    iTaxType3 = tx1ty;
                    TaxVal3 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx2id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx2id > 0))
                {
                    iTaxType3 = tx2ty;
                    TaxVal3 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx3id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx3id > 0))
                {
                    iTaxType3 = tx3ty;
                    TaxVal3 = tx3;
                }

                iMixID = GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString());
                iMixQty = GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString());
                iMixUnique = GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString());
                dMixVal = GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString());

                sMixFlag = dr1["MIXMATCHFLAG"].ToString();
                sMixLast = dr1["MIXMATCHLAST"].ToString();
                sMixType = dr1["MIXMATCHTYPE"].ToString();


                iFeeID = GeneralFunctions.fnInt32(dr1["FEESID"].ToString());
                sFeesLogic = dr1["FEESLOGIC"].ToString();
                dFeesValue = GeneralFunctions.fnDouble(dr1["FEESVALUE"].ToString());
                dFeesTaxRate = GeneralFunctions.fnDouble(dr1["FEESTAXRATE"].ToString());
                dFees = GeneralFunctions.fnDouble(dr1["FEES"].ToString());
                dFeesTax = GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString());
                sFeesText = dr1["FEESTEXT"].ToString();
                sFeesQty = dr1["FEESQTY"].ToString();

                iSalePriceID = GeneralFunctions.fnInt32(dr1["SALEPRICEID"].ToString());

                idtxid = GeneralFunctions.fnInt32(dr1["DTXID"].ToString());
                idtxtype = GeneralFunctions.fnInt32(dr1["DTXTYPE"].ToString());
                ddtxrate = GeneralFunctions.fnDouble(dr1["DTXRATE"].ToString());
                ddtx = GeneralFunctions.fnDouble(dr1["DTX"].ToString());

                pEdit = dr1["EDITF"].ToString();
                pPrompt = dr1["PROMPTPRICE"].ToString();

                pBuyID = GeneralFunctions.fnInt32(dr1["BUYNGETFREEHEADERID"].ToString());
                pBuyCat = dr1["BUYNGETFREECATEGORY"].ToString();
                pBuyCaption = dr1["BUYNGETFREENAME"].ToString();

                pnt = dr1["NOTES"].ToString();

                dGRate = GeneralFunctions.fnDouble(dr1["GRATE"].ToString());
                dGPrice = GeneralFunctions.fnDouble(dr1["GPRICE"].ToString());

                if (dr1["PRODUCTTYPE"].ToString() == "G") // Gift Certificate
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        "0","0","0",
                                        dr1["RATE"].ToString(),
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "GC",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        dr1["ID"].ToString(),pDL,"Y","","0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeesLogic,dFeesValue,dFeesTaxRate,dFees,dFeesTax,sFeesText,sFeesQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pnt,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "O") // Bottle Refund
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        "0","0","0",
                                        dr1["RATE"].ToString(),
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "BTL",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        dr1["ID"].ToString(),pDL,"Y","","0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeesLogic,dFeesValue,dFeesTaxRate,dFees,dFeesTax,sFeesText,sFeesQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pnt,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,dGRate,dGPrice
                                        ,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "C") // Coupon
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0","0","0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        dr1["ID"].ToString(),pDL,"Y",
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),"0","","2",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeesLogic,dFeesValue,dFeesTaxRate,dFees,dFeesTax,sFeesText,sFeesQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pnt,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "H") // Fees Ticket
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0","0","0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "FEE COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        dr1["ID"].ToString(),pDL,"Y",
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),"0","","2",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeesLogic,dFeesValue,dFeesTaxRate,dFees,dFeesTax,sFeesText,sFeesQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pnt,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "Z") // Special Mix n Match
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0","0","0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "Mix n Match",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        dr1["ID"].ToString(),pDL,"Y",
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),"0","","9",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeesLogic,dFeesValue,dFeesTaxRate,dFees,dFeesTax,sFeesText,sFeesQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pnt,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "A") // Account Pay
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),"0","0","0","0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "AR",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),"0",pDL,
                                        "N","","0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeesLogic,dFeesValue,dFeesTaxRate,dFees,dFeesTax,sFeesText,sFeesQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pnt,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "B") // Blank line
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),"0","0",dr1["RATE"].ToString(),dr1["RATE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        "Blank",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),"0",pDL,"N",
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeesLogic,dFeesValue,dFeesTaxRate,dFees,dFeesTax,sFeesText,sFeesQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,pEdit,pnt,pPrompt,pBuyID,pBuyCat,pBuyCaption,0,dGRate,dGPrice,dr1["UOM"].ToString()
                                        });
                }

                else
                {
                    int pID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                    FetchItemAdditionData(pID, ref pSKU, ref pDept, ref pCat, ref pPrA, ref pPrB, ref pPrC);

                    if (strTaxExempt == "N")
                    {
                        GetTaxable(pID, strTaxID1, strTaxID2, strTaxID3, ref pT1, ref pT2, ref pT3);
                    }
                    string strPrice = "0";
                    string strNewPrice = "0";
                    if (pDL == "A")
                    {
                        if (GeneralFunctions.fnDouble(pPrA) > GeneralFunctions.fnDouble(dr1["RATE"].ToString())) strNewPrice = dr1["RATE"].ToString();
                        else strNewPrice = dr1["RATE"].ToString();
                    }
                    if (pDL == "B")
                    {
                        if (GeneralFunctions.fnDouble(pPrB) > GeneralFunctions.fnDouble(dr1["RATE"].ToString())) strNewPrice = dr1["RATE"].ToString();
                        else strNewPrice = dr1["RATE"].ToString();
                    }
                    if (pDL == "C")
                    {
                        if (GeneralFunctions.fnDouble(pPrC) > GeneralFunctions.fnDouble(dr1["RATE"].ToString())) strNewPrice = dr1["RATE"].ToString();
                        else strNewPrice = dr1["RATE"].ToString();
                    }
                    if (pDL == "Z")
                    {
                        if (GeneralFunctions.fnDouble(pPrC) > GeneralFunctions.fnDouble(dr1["RATE"].ToString())) strNewPrice = dr1["RATE"].ToString();
                        else strNewPrice = dr1["RATE"].ToString();
                    }
                    if (pEdit == "N")
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        pPrA,pPrB,pPrC,strNewPrice,strNewPrice,
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),"0",pDL,"N",
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeesLogic,dFeesValue,dFeesTaxRate,dFees,dFeesTax,sFeesText,sFeesQty,
                                        iSalePriceID,
                                        idtxid,idtxtype,ddtxrate,ddtx,pEdit,pnt,pPrompt,pBuyID,pBuyCat,pBuyCaption,
                                        GeneralFunctions.fnInt32(dr1["AGE"].ToString()),dGRate,dGPrice,dr1["UOM"].ToString()});
                    }

                    if (pEdit == "Y")
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        pPrA,pPrB,pPrC,strNewPrice,strNewPrice,
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),"0",pDL,"N",
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeesLogic,dFeesValue,dFeesTaxRate,dFees,dFeesTax,sFeesText,sFeesQty,iSalePriceID,
                                        idtxid,idtxtype,ddtxrate,ddtx,pEdit,pnt,pPrompt,pBuyID,pBuyCat,pBuyCaption,
                                        GeneralFunctions.fnInt32(dr1["AGE"].ToString()),dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                }
            }

            intTaxID1 = GeneralFunctions.fnInt32(strTaxID1);
            intTaxID2 = GeneralFunctions.fnInt32(strTaxID2);
            intTaxID3 = GeneralFunctions.fnInt32(strTaxID3);

            if (strTaxExempt == "N")
            {
                GetTax();
                DataTable dtblTaxS = dtblTax;
                foreach (DataRow drTax in dtblTaxS.Rows)
                {
                    if (drTax["DTAX"].ToString() == "Y") continue;
                    if (drTax["TAXID"].ToString() == strTaxID1) dblTax1 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                    if (drTax["TAXID"].ToString() == strTaxID2) dblTax2 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                    if (drTax["TAXID"].ToString() == strTaxID3) dblTax3 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                }
                dtblTaxS.Dispose();
                dtblTax.Dispose();
            }


            return dtblFinal;
        }
        private void b_Click(object sender, RoutedEventArgs e)
        {
            if (!CheckFunctionButton("31s"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }
            if ((intCustID == 0) && (Settings.CustomerInfo == 2))
            {
                new MessageBoxWindow().Show(Properties.Resources.Enter_Valid_Customer, "POS", MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtCust);
                return;
            }

            if (intCustID > 0)
            {
                if (!CheckActiveCustomer(intCustID))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Transaction_is_possible_for_active_customer_only, Properties.Resources.Customer_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtCust);
                    return;
                }
            }

            if (strCurrentServiceType == "Sales")
            {
                if (!ValidCartMixedWithEntryTicket())
                {
                    new MessageBoxWindow().Show("Transaction can not be possible with Entry Ticket item and other items together ", "Cart Validation", MessageBoxButton.OK, MessageBoxImage.Information);
                    return;
                }
            }

            if (dtblPOS.Rows.Count == 0)
            {
                new MessageBoxWindow().Show(Properties.Resources.Nothing_to_Tender_, Properties.Resources.Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }
            else
            {
                if (strCurrentServiceType != "Repair")
                {
                    CheckStockBeforeTender();
                    if (dtblZeroStock.Rows.Count > 0)
                    {
                        frm_POSOutOfStockDlg frm_POSOutOfStockDlg = new frm_POSOutOfStockDlg();
                        try
                        {
                            frm_POSOutOfStockDlg.Stock = dtblZeroStock;
                            blurGrid.Visibility = Visibility.Visible;
                            frm_POSOutOfStockDlg.ShowDialog();
                            blurGrid.Visibility = Visibility.Collapsed;
                            if (frm_POSOutOfStockDlg.DialogResult == true)
                            {
                                if (new MessageBoxWindow().Show("Are you want to remove out of stock products from the cart?", "Stock Validation", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                                {
                                    RemoveProductFromCart();
                                    EnableDisableButton(btnUP, btnDown, gridControl1);
                                    GetTotal(); /// Calculate and Display Cart Total
                                    ShowTax(); /// Calculate and Display Taxes of Cart Items
                                    ResetQty();  /// Reset Item Quantity
                                }
                            }
                        }
                        finally
                        {
                        }
                    }
                }
            }

            if (dtblZeroStock.Rows.Count > 0)
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (dtblPOS.Rows.Count == 0)
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (CheckZeroQuantity())
            {
                if (new MessageBoxWindow().Show(Properties.Resources.Items_with_qty__0__in_the_cart__Do_you_want_to_continue_, Properties.Resources.Validation, MessageBoxButton.YesNo, MessageBoxImage.Information) == MessageBoxResult.No)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
            }

            int ccnt = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() == "C") ccnt++;
            }
            if (ccnt == dtblPOS.Rows.Count)
            {
                new MessageBoxWindow().Show(Properties.Resources.No_item_selected_for_tendering, Properties.Resources.Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (!FinalAgeVerificationOfCartBeforePosting()) return;

            if ((blRentIssued) || (blRentRecall))
            {
                if ((intCustID == 0) && (Settings.CustomerRequiredOnRent == "Y"))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Please_Select_Customer, Properties.Resources.Rent, MessageBoxButton.OK, MessageBoxImage.Information);
                    tcPOS.SelectedIndex = 1;
                    return;
                }
            }

            dblRentSecurityDeposit = 0;

            if (blRentIssued)
            {
                dblRentSecurityDeposit = GetRentSecurityDeposit();
                frmPOSRentDepositDlg frm_POSRentDepositDlg = new frmPOSRentDepositDlg();
                try
                {
                    frm_POSRentDepositDlg.blisnewrent = true;
                    frm_POSRentDepositDlg.RentDeposit = dblRentSecurityDeposit;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSRentDepositDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSRentDepositDlg.DialogResult == true) dblRentSecurityDeposit = frm_POSRentDepositDlg.RentDeposit; else return;
                }
                finally
                {
                }

                if (Settings.CalculateRentLater == "Y")
                {
                    if (dblRentSecurityDeposit == 0)
                    {
                        IssueRentItem();
                        return;
                    }
                }
            }

            if (blRentRecall)
            {
                frmPOSRentDepositDlg frm_POSRentDepositDlg = new frmPOSRentDepositDlg();
                try
                {
                    frm_POSRentDepositDlg.blisnewrent = false;
                    frm_POSRentDepositDlg.Inv = RentReturnInv.ToString();
                    frm_POSRentDepositDlg.Deposit1 = RentReturnDeposit1;
                    frm_POSRentDepositDlg.Deposit2 = RentReturnDeposit2;
                    frm_POSRentDepositDlg.RentDeposit = RentReturnDeposit3;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSRentDepositDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    if (frm_POSRentDepositDlg.DialogResult == true) dblRentSecurityDeposit = -frm_POSRentDepositDlg.RentDeposit;
                    else return;
                }
                finally
                {
                }
                if (RentCalcFlag == "N")
                {
                    if (dblRentSecurityDeposit == 0)
                    {
                        ReturnRentItem();
                        return;
                    }
                }
            }

            if (blRepairIssued)
            {
                if (intCustID == 0)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Please_Select_Customer, Properties.Resources.Repair_Info_, MessageBoxButton.OK, MessageBoxImage.Information);
                    tcPOS.SelectedIndex = 1;
                    return;
                }
                if (intCustID > 0)
                {
                    frmPOSRepairInfoDlg frm_POSRepairInfoDlg = new frmPOSRepairInfoDlg();
                    try
                    {
                        frm_POSRepairInfoDlg.CalledFor = "Issue";
                        frm_POSRepairInfoDlg.CustomerID = intCustID;
                        frm_POSRepairInfoDlg.RepairAmount = double.Parse(numTotal.Text);
                        frm_POSRepairInfoDlg.ID = 0;
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSRepairInfoDlg.ShowDialog();
                        blurGrid.Visibility = Visibility.Collapsed;
                        if (frm_POSRepairInfoDlg.DialogResult == true)
                        {
                            dtblRepairInfo.Rows.Clear();
                            dtblRepairInfo = frm_POSRepairInfoDlg.pdtbl;
                            //if (frm_POSRepairInfoDlg.changebrwfield) blChangeCustomerOnDelivery = true;
                        }
                        else
                        {
                            return;
                        }
                    }
                    finally
                    {
                    }


                    /*foreach (DataRow drrp in dtblRepairInfo.Rows)
                    {
                        repairadv = GeneralFunctions.fnDouble(drrp["AdvanceAmount"].ToString());
                    }

                    if (repairadv == 0)
                    {
                        IssueRepairTransaction();
                        return;
                    }*/
                }
            }

            /*if (blRepairRecall)
            {
                //if (GetRepairItemNotDeliverCount(repairparentinv) == dtblPOS.Rows.Count) // last item delivered
                //{
                    //repairtender = repairdue;
                //}
                //else
                //{
                    frmPOSRepairTenderAmtDlg frm_POSRepairTenderAmtDlg = new frmPOSRepairTenderAmtDlg();
                    try
                    {
                        frm_POSRepairTenderAmtDlg.Inv = repairparentinv.ToString();
                        frm_POSRepairTenderAmtDlg.DueAmt = repairdue;
                        frm_POSRepairTenderAmtDlg.ShowDialog();
                        if (frm_POSRepairTenderAmtDlg.DialogResult == true) repairtender = frm_POSRepairTenderAmtDlg.TenderAmt;
                        else return;
                    }
                    finally
                    {
                        frm_POSRepairTenderAmtDlg.Dispose();
                    }
                //}

            }*/

            if (Settings.DemoVersion == "Y")
            {
                if (!ContinueWithDemoVersion())
                {
                    new MessageBoxWindow().Show(Properties.Resources.DEMO_Version_does_not_permit_more_invoices_, Properties.Resources.DEMOVERSION, MessageBoxButton.OK, MessageBoxImage.Information);
                    Settings.PriceLevelForOneTime = "N";
                    Settings.PriceLevelForThisSale = "N";
                    return;
                }
            }
            bool blclearflg = false;
            if (blWorkOrder)
            {
                if (!ValidItemForWorkOrder())
                {
                    new MessageBoxWindow().Show(Properties.Resources.Invalid_work_order_item_s__found_in_cart_, Properties.Resources.Work_Order, MessageBoxButton.OK, MessageBoxImage.Information);
                    return;
                }
            }

            if (Settings.ScaleDevice == "Datalogic Scale")
            {
                if (m_posScanner != null) m_posScanner.DeviceEnabled = false;
            }

            frmPOSTenderDlg frm_POSTenderDlg = new frmPOSTenderDlg();
            try
            {
                frm_POSTenderDlg.ResumeTransaction = blResumeTransaction;
                frm_POSTenderDlg.WorkOrderTransaction = blWorkOrder;
                if (blWorkOrder)
                {
                    frm_POSTenderDlg.WODatatbl = FinalDataTable();
                }
                frm_POSTenderDlg.SelectedReturnInvoiceNo = intSelectedReturnInvoiceNo;
                frm_POSTenderDlg.ApptDatatbl = dtblAppt;
                frm_POSTenderDlg.SuspendInvoiceNo = intSuspendInvNo;
                frm_POSTenderDlg.ReturnItem = blReturnItem;
                frm_POSTenderDlg.ExistCoupon = blExistCoupon;
                if (strCurrentServiceType == "Sales") frm_POSTenderDlg.Sale = true; else frm_POSTenderDlg.Sale = false;
                frm_POSTenderDlg.ServiceType = strCurrentServiceType;
                frm_POSTenderDlg.RentIssued = blRentIssued;
                frm_POSTenderDlg.RentRecall = blRentRecall;
                frm_POSTenderDlg.RepairIssued = blRepairIssued;
                frm_POSTenderDlg.RepairRecall = blRepairRecall;
                frm_POSTenderDlg.RepairAdvance = repairadv;
                frm_POSTenderDlg.RepairDue = repairdue;
                frm_POSTenderDlg.RepairTender = repairtender;
                frm_POSTenderDlg.IssueRepairInvNo = repairparentinv;

                frm_POSTenderDlg.CustomerOrdering = blOpenCustomerOrder;
                frm_POSTenderDlg.CustomerOrderNo = CurrentCustomerOrderID;

                frm_POSTenderDlg.RepairAmount = double.Parse(numTotal.Text);
                frm_POSTenderDlg.dtlRepairItemInfo = dtblRepairInfo;

                frm_POSTenderDlg.RentSecurityDeposit = dblRentSecurityDeposit;
                frm_POSTenderDlg.IssueRentInvNo = RentReturnInv;
                frm_POSTenderDlg.RentCalcFlag = RentCalcFlag;
                frm_POSTenderDlg.FinalFlag = false;
                frm_POSTenderDlg.CustID = intCustID;
                frm_POSTenderDlg.TaxExempt = strTaxExempt;
                frm_POSTenderDlg.StoreCr = dblStoreCr;
                frm_POSTenderDlg.CustAcctLimit = dblCustAcctLimit;
                frm_POSTenderDlg.CustAcctBalance = dblCustAcctBalance;
                frm_POSTenderDlg.POSDatatbl = dtblPOS;
                frm_POSTenderDlg.MaxInvNo = intMaxInvNo;
                frm_POSTenderDlg.SuperUserID = intSuperUserID;
                frm_POSTenderDlg.FunctionBtnAccess = blFunctionBtnAccess;

                frm_POSTenderDlg.TCustDTaxID = CustDTaxID;
                frm_POSTenderDlg.TCustDTaxName = CustDTaxName;
                frm_POSTenderDlg.TCustDTaxType = CustDTaxType;
                frm_POSTenderDlg.TCustDTaxRate = CustDTaxRate;
                frm_POSTenderDlg.TCustDTaxValue = CustDTaxValue;

                frm_POSTenderDlg.calledfrm = this;

                if (blRepairIssued)
                {
                    double ddeposit = 0;
                    foreach (DataRow dr in dtblRepairInfo.Rows)
                    {
                        ddeposit = GeneralFunctions.fnDouble(dr["AdvanceAmount"].ToString());
                    }
                    if (ddeposit > 0)
                    {
                        frm_POSTenderDlg.RepairDeposit = true;
                        frm_POSTenderDlg.RepairInvoiceForDeposit = 0;
                        frm_POSTenderDlg.RepairAdvance = ddeposit;
                    }
                }

                frm_POSTenderDlg.CustomerDOB = dtCustomerDOB;

                blurGrid.Visibility = Visibility.Visible;
                frm_POSTenderDlg.ShowDialog();
                boolLoadAllItem = true;
                blurGrid.Visibility = Visibility.Collapsed;
            }
            finally
            {
                blclearflg = frm_POSTenderDlg.FinalFlag;
                dtblForStockUpdate = frm_POSTenderDlg.dtblForStockUpdate;  /*** for stock update ****/
            }

            if (Settings.ScaleDevice == "Datalogic Scale")
            {
                if (m_posScanner != null) m_posScanner.DeviceEnabled = true;
            }

            if (blclearflg)
            {
                //  Update Stock here using the datatable dtblForStockUpdate  //
                if (dtblForStockUpdate != null)
                {
                    if (dtblForStockUpdate.Rows.Count > 0)
                    {
                        string strId = ""; int intStock = 0;
                        System.Windows.Controls.Control[] findctrl;
                        PosDataObject.POS objPOS = new PosDataObject.POS();
                        objPOS.Connection = SystemVariables.Conn;

                        foreach (DataRow dr in dtblForStockUpdate.Rows)
                        {
                            if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                                || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                                || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                            // avoid gift certificate, account payment, bottle refund
                            strId = dr["ID"].ToString();
                            if (strId != "")
                            {
                                bool blUpdateStock = false;
                                foreach (UIElement ctrl in pnlCat1.Children)
                                {
                                    if (ctrl is System.Windows.Controls.Border)
                                    {
                                        if ((ctrl as System.Windows.Controls.Border).Name == "catgroup")
                                        {
                                            Grid grd = (ctrl as System.Windows.Controls.Border).Child as Grid;

                                            foreach (UIElement dpnl in grd.Children)
                                            {
                                                if (dpnl is System.Windows.Controls.DockPanel)
                                                {
                                                    foreach (UIElement btnctrl in (dpnl as System.Windows.Controls.DockPanel).Children)
                                                    {
                                                        if (btnctrl is System.Windows.Controls.Button)
                                                        {
                                                            if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemID == GeneralFunctions.fnInt32(strId))
                                                            {
                                                                intStock = objPOS.GetStockforItem(GeneralFunctions.fnInt32(strId));

                                                                ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock = intStock;

                                                                string itemtext = "";

                                                                if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).DisplayStockinPOS)
                                                                {
                                                                    itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")" : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")";
                                                                }
                                                                else
                                                                {
                                                                    itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName;
                                                                }

                                                                bool blFindImage = false;
                                                                var img = new Image();

                                                                GeneralFunctions.LoadPhotofromDB("Product", GeneralFunctions.fnInt32(strId), img);

                                                                if (img.Source != null) blFindImage = true;

                                                                if (!blFindImage)
                                                                {
                                                                    (((btnctrl as System.Windows.Controls.Button).Content as Viewbox).Child as TextBlock).Text = itemtext;
                                                                }


                                                                /*
                                                                TextBlock tb = new TextBlock();
                                                                tb.Text = itemtext;
                                                                tb.TextAlignment = TextAlignment.Center;
                                                                tb.TextWrapping = TextWrapping.WrapWithOverflow;
                                                                tb.VerticalAlignment = VerticalAlignment.Center;
                                                                tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                                                                GeneralFunctions.SetWpfFont(tb, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontFamily, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontSize, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontBold, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontItalic);
                                                                if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor.Contains("#00000000")))
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor));
                                                                }

                                                                double ifactor = 0.3;
                                                                if (itemtext.Length <= 8)
                                                                {
                                                                    ifactor = 0.6;
                                                                }
                                                                else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                                                                {
                                                                    ifactor = 0.8;
                                                                }
                                                                else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                                                                {
                                                                    ifactor = 0.8;
                                                                }
                                                                else
                                                                {
                                                                    ifactor = 0.85;
                                                                }

                                                                tb.Width = (ctrl as System.Windows.Controls.Border).Width * ifactor;

                                                                Viewbox vwbx1 = new Viewbox();
                                                                vwbx1.Stretch = Stretch.Uniform;
                                                                vwbx1.Child = tb;

                                                                bool blFindImage = false;
                                                                var img = new Image();
                                                                
                                                                GeneralFunctions.LoadPhotofromDB("Product", GeneralFunctions.fnInt32(strId), img);

                                                                if (img.Source != null) blFindImage = true;

                                                                if (blFindImage)
                                                                {
                                                                    ((btnctrl as System.Windows.Controls.Button)).Content = new Image
                                                                    {
                                                                        Source = img.Source,
                                                                        Stretch = Stretch.Fill,
                                                                        Margin = new Thickness(-4)
                                                                    };
                                                                    ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                    ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);

                                                                    Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                                                                    if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor.Contains("#00000000")))
                                                                    {
                                                                        if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                                                        if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                                                    }
                                                                    else
                                                                    {
                                                                        bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor));
                                                                    }

                                                                    ((btnctrl as System.Windows.Controls.Button)).BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)((btnctrl as System.Windows.Controls.Button)).BorderBrush).Color) { Opacity = 0.1 };

                                                                    string template =
                                                                        "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                                                        " TargetType =\"Button\">" +
                                                                        "<Grid>" +
                                                                        "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                                                        "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                                                        "</Border>" +
                                                                        "</Grid>" +
                                                                        "</ControlTemplate>";
                                                                    ((btnctrl as System.Windows.Controls.Button)).Template = (ControlTemplate)XamlReader.Parse(template);
                                                                }
                                                                else
                                                                {
                                                                    (btnctrl as System.Windows.Controls.Button).Content = vwbx1;

                                                                    if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor.Contains("#00000000")))
                                                                    {
                                                                        ((btnctrl as System.Windows.Controls.Button)).Background = System.Windows.Media.Brushes.Transparent;
                                                                        if (SystemVariables.SelectedTheme == "Dark") ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                                                        if (SystemVariables.SelectedTheme == "Light") ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                        ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);
                                                                    }
                                                                    else
                                                                    {
                                                                        ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor));
                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                        ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);
                                                                    }

                                                                    ((btnctrl as System.Windows.Controls.Button)).BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)((btnctrl as System.Windows.Controls.Button)).BorderBrush).Color) { Opacity = 0.1 };

                                                                    string template =
                                                                        "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                                                        " TargetType =\"Button\">" +
                                                                        "<Grid>" +
                                                                        "<Border Background=\"" + ((btnctrl as System.Windows.Controls.Button)).Background + "\" CornerRadius=\"5\">" +
                                                                        "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                                                        "</Border>" +
                                                                        "</Grid>" +
                                                                        "</ControlTemplate>";
                                                                    ((btnctrl as System.Windows.Controls.Button)).Template = (ControlTemplate)XamlReader.Parse(template);
                                                                }

                                                                */


                                                                blUpdateStock = true;
                                                                break;
                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }


                                                }
                                            }
                                        }
                                    }
                                }

                                if (!blUpdateStock)
                                {
                                    foreach (UIElement ctrl in pnlCat2.Children)
                                    {
                                        if (ctrl is System.Windows.Controls.Border)
                                        {
                                            if ((ctrl as System.Windows.Controls.Border).Name == "catgroup")
                                            {
                                                Grid grd = (ctrl as System.Windows.Controls.Border).Child as Grid;

                                                foreach (UIElement dpnl in grd.Children)
                                                {
                                                    if (dpnl is System.Windows.Controls.DockPanel)
                                                    {
                                                        foreach (UIElement btnctrl in (dpnl as System.Windows.Controls.DockPanel).Children)
                                                        {
                                                            if (btnctrl is System.Windows.Controls.Button)
                                                            {
                                                                if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemID == GeneralFunctions.fnInt32(strId))
                                                                {
                                                                    intStock = objPOS.GetStockforItem(GeneralFunctions.fnInt32(strId));

                                                                    ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock = intStock;

                                                                    string itemtext = "";

                                                                    if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).DisplayStockinPOS)
                                                                    {
                                                                        itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")" : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")";
                                                                    }
                                                                    else
                                                                    {
                                                                        itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName;
                                                                    }



                                                                    bool blFindImage = false;
                                                                    var img = new Image();

                                                                    GeneralFunctions.LoadPhotofromDB("Product", GeneralFunctions.fnInt32(strId), img);

                                                                    if (img.Source != null) blFindImage = true;

                                                                    if (!blFindImage)
                                                                    {
                                                                        (((btnctrl as System.Windows.Controls.Button).Content as Viewbox).Child as TextBlock).Text = itemtext;
                                                                    }

                                                                    /*

                                                                    TextBlock tb = new TextBlock();
                                                                    tb.Text = itemtext;
                                                                    tb.TextAlignment = TextAlignment.Center;
                                                                    tb.TextWrapping = TextWrapping.WrapWithOverflow;
                                                                    tb.VerticalAlignment = VerticalAlignment.Center;
                                                                    tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                                                                    GeneralFunctions.SetWpfFont(tb, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontFamily, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontSize, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontBold, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontItalic);
                                                                    if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor.Contains("#00000000")))
                                                                    {

                                                                    }
                                                                    else
                                                                    {
                                                                        tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor));
                                                                    }

                                                                    double ifactor = 0.3;

                                                                    if (itemtext.Length <= 8)
                                                                    {
                                                                        ifactor = 0.6;
                                                                    }
                                                                    else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                                                                    {
                                                                        ifactor = 0.8;
                                                                    }
                                                                    else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                                                                    {
                                                                        ifactor = 0.8;
                                                                    }
                                                                    else
                                                                    {
                                                                        ifactor = 0.85;
                                                                    }

                                                                    tb.Width = (ctrl as System.Windows.Controls.Border).Width * ifactor;

                                                                    Viewbox vwbx1 = new Viewbox();
                                                                    vwbx1.Stretch = Stretch.Uniform;
                                                                    vwbx1.Child = tb;


                                                                    if (blFindImage)
                                                                    {
                                                                        ((btnctrl as System.Windows.Controls.Button)).Content = new Image
                                                                        {
                                                                            Source = img.Source,
                                                                            Stretch = Stretch.Fill,
                                                                            Margin = new Thickness(-4)
                                                                        };
                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                        ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);

                                                                        Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                                                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor.Contains("#00000000")))
                                                                        {
                                                                            if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                                                            if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                                                        }
                                                                        else
                                                                        {
                                                                            bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor));
                                                                        }

                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)((btnctrl as System.Windows.Controls.Button)).BorderBrush).Color) { Opacity = 0.1 };

                                                                        string template =
                                                                            "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                                                            " TargetType =\"Button\">" +
                                                                            "<Grid>" +
                                                                            "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                                                            "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                                                            "</Border>" +
                                                                            "</Grid>" +
                                                                            "</ControlTemplate>";
                                                                        ((btnctrl as System.Windows.Controls.Button)).Template = (ControlTemplate)XamlReader.Parse(template);
                                                                    }
                                                                    else
                                                                    {
                                                                        (btnctrl as System.Windows.Controls.Button).Content = vwbx1;

                                                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor.Contains("#00000000")))
                                                                        {
                                                                            ((btnctrl as System.Windows.Controls.Button)).Background = System.Windows.Media.Brushes.Transparent;
                                                                            if (SystemVariables.SelectedTheme == "Dark") ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                                                            if (SystemVariables.SelectedTheme == "Light") ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                                                            ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                            ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);
                                                                        }
                                                                        else
                                                                        {
                                                                            ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor));
                                                                            ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                            ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);
                                                                        }

                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)((btnctrl as System.Windows.Controls.Button)).BorderBrush).Color) { Opacity = 0.1 };

                                                                        string template =
                                                                            "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                                                            " TargetType =\"Button\">" +
                                                                            "<Grid>" +
                                                                            "<Border Background=\"" + ((btnctrl as System.Windows.Controls.Button)).Background + "\" CornerRadius=\"5\">" +
                                                                            "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                                                            "</Border>" +
                                                                            "</Grid>" +
                                                                            "</ControlTemplate>";
                                                                        ((btnctrl as System.Windows.Controls.Button)).Template = (ControlTemplate)XamlReader.Parse(template);
                                                                    }
                                                                    */

                                                                    blUpdateStock = true;
                                                                    break;
                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }


                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (!blUpdateStock)
                                {
                                    foreach (UIElement ctrl in pnlCat3.Children)
                                    {
                                        if (ctrl is System.Windows.Controls.Border)
                                        {
                                            if ((ctrl as System.Windows.Controls.Border).Name == "catgroup")
                                            {
                                                Grid grd = (ctrl as System.Windows.Controls.Border).Child as Grid;

                                                foreach (UIElement dpnl in grd.Children)
                                                {
                                                    if (dpnl is System.Windows.Controls.DockPanel)
                                                    {
                                                        foreach (UIElement btnctrl in (dpnl as System.Windows.Controls.DockPanel).Children)
                                                        {
                                                            if (btnctrl is System.Windows.Controls.Button)
                                                            {
                                                                if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemID == GeneralFunctions.fnInt32(strId))
                                                                {
                                                                    intStock = objPOS.GetStockforItem(GeneralFunctions.fnInt32(strId));

                                                                    ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock = intStock;

                                                                    string itemtext = "";

                                                                    if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).DisplayStockinPOS)
                                                                    {
                                                                        itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")" : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")";
                                                                    }
                                                                    else
                                                                    {
                                                                        itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName;
                                                                    }

                                                                    bool blFindImage = false;
                                                                    var img = new Image();

                                                                    GeneralFunctions.LoadPhotofromDB("Product", GeneralFunctions.fnInt32(strId), img);

                                                                    if (img.Source != null) blFindImage = true;

                                                                    if (!blFindImage)
                                                                    {
                                                                        (((btnctrl as System.Windows.Controls.Button).Content as Viewbox).Child as TextBlock).Text = itemtext;
                                                                    }

                                                                    /*
                                                                    TextBlock tb = new TextBlock();
                                                                    tb.Text = itemtext;
                                                                    tb.TextAlignment = TextAlignment.Center;
                                                                    tb.TextWrapping = TextWrapping.WrapWithOverflow;
                                                                    tb.VerticalAlignment = VerticalAlignment.Center;
                                                                    tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                                                                    GeneralFunctions.SetWpfFont(tb, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontFamily, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontSize, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontBold, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontItalic);
                                                                    if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor.Contains("#00000000")))
                                                                    {

                                                                    }
                                                                    else
                                                                    {
                                                                        tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor));
                                                                    }

                                                                    double ifactor = 0.3;
                                                                    if (itemtext.Length <= 8)
                                                                    {
                                                                        ifactor = 0.6;
                                                                    }
                                                                    else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                                                                    {
                                                                        ifactor = 0.8;
                                                                    }
                                                                    else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                                                                    {
                                                                        ifactor = 0.8;
                                                                    }
                                                                    else
                                                                    {
                                                                        ifactor = 0.85;
                                                                    }

                                                                    tb.Width = (ctrl as System.Windows.Controls.Border).Width * ifactor;

                                                                    Viewbox vwbx1 = new Viewbox();
                                                                    vwbx1.Stretch = Stretch.Uniform;
                                                                    vwbx1.Child = tb;

                                                                    bool blFindImage = false;
                                                                    var img = new Image();

                                                                    GeneralFunctions.LoadPhotofromDB("Product", GeneralFunctions.fnInt32(strId), img);

                                                                    if (img.Source != null) blFindImage = true;

                                                                    if (blFindImage)
                                                                    {
                                                                        ((btnctrl as System.Windows.Controls.Button)).Content = new Image
                                                                        {
                                                                            Source = img.Source,
                                                                            Stretch = Stretch.Fill,
                                                                            Margin = new Thickness(-4)
                                                                        };
                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                        ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);

                                                                        Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                                                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor.Contains("#00000000")))
                                                                        {
                                                                            if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                                                            if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                                                        }
                                                                        else
                                                                        {
                                                                            bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor));
                                                                        }

                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)((btnctrl as System.Windows.Controls.Button)).BorderBrush).Color) { Opacity = 0.1 };

                                                                        string template =
                                                                            "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                                                            " TargetType =\"Button\">" +
                                                                            "<Grid>" +
                                                                            "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                                                            "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                                                            "</Border>" +
                                                                            "</Grid>" +
                                                                            "</ControlTemplate>";
                                                                        ((btnctrl as System.Windows.Controls.Button)).Template = (ControlTemplate)XamlReader.Parse(template);
                                                                    }
                                                                    else
                                                                    {
                                                                        (btnctrl as System.Windows.Controls.Button).Content = vwbx1;

                                                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor.Contains("#00000000")))
                                                                        {
                                                                            ((btnctrl as System.Windows.Controls.Button)).Background = System.Windows.Media.Brushes.Transparent;
                                                                            if (SystemVariables.SelectedTheme == "Dark") ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                                                            if (SystemVariables.SelectedTheme == "Light") ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                                                            ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                            ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);
                                                                        }
                                                                        else
                                                                        {
                                                                            ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor));
                                                                            ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                            ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);
                                                                        }

                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)((btnctrl as System.Windows.Controls.Button)).BorderBrush).Color) { Opacity = 0.1 };

                                                                        string template =
                                                                            "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                                                            " TargetType =\"Button\">" +
                                                                            "<Grid>" +
                                                                            "<Border Background=\"" + ((btnctrl as System.Windows.Controls.Button)).Background + "\" CornerRadius=\"5\">" +
                                                                            "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                                                            "</Border>" +
                                                                            "</Grid>" +
                                                                            "</ControlTemplate>";
                                                                        ((btnctrl as System.Windows.Controls.Button)).Template = (ControlTemplate)XamlReader.Parse(template);
                                                                    }

                                                                    */
                                                                    //(btnctrl as System.Windows.Controls.Button).Content = tb;
                                                                    blUpdateStock = true;
                                                                    break;
                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }


                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (!blUpdateStock)
                                {
                                    foreach (UIElement ctrl in pnlCat4.Children)
                                    {
                                        if (ctrl is System.Windows.Controls.Border)
                                        {
                                            if ((ctrl as System.Windows.Controls.Border).Name == "catgroup")
                                            {
                                                Grid grd = (ctrl as System.Windows.Controls.Border).Child as Grid;

                                                foreach (UIElement dpnl in grd.Children)
                                                {
                                                    if (dpnl is System.Windows.Controls.DockPanel)
                                                    {
                                                        foreach (UIElement btnctrl in (dpnl as System.Windows.Controls.DockPanel).Children)
                                                        {
                                                            if (btnctrl is System.Windows.Controls.Button)
                                                            {
                                                                if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemID == GeneralFunctions.fnInt32(strId))
                                                                {
                                                                    intStock = objPOS.GetStockforItem(GeneralFunctions.fnInt32(strId));

                                                                    ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock = intStock;

                                                                    string itemtext = "";

                                                                    if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).DisplayStockinPOS)
                                                                    {
                                                                        itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")" : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")";
                                                                    }
                                                                    else
                                                                    {
                                                                        itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName;
                                                                    }

                                                                    bool blFindImage = false;
                                                                    var img = new Image();

                                                                    GeneralFunctions.LoadPhotofromDB("Product", GeneralFunctions.fnInt32(strId), img);

                                                                    if (img.Source != null) blFindImage = true;

                                                                    if (!blFindImage)
                                                                    {
                                                                        (((btnctrl as System.Windows.Controls.Button).Content as Viewbox).Child as TextBlock).Text = itemtext;
                                                                    }

                                                                    /*
                                                                    TextBlock tb = new TextBlock();
                                                                    tb.Text = itemtext;
                                                                    tb.TextAlignment = TextAlignment.Center;
                                                                    tb.TextWrapping = TextWrapping.WrapWithOverflow;
                                                                    tb.VerticalAlignment = VerticalAlignment.Center;
                                                                    tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                                                                    GeneralFunctions.SetWpfFont(tb, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontFamily, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontSize, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontBold, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontItalic);
                                                                    if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor.Contains("#00000000")))
                                                                    {

                                                                    }
                                                                    else
                                                                    {
                                                                        tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor));
                                                                    }

                                                                    double ifactor = 0.3;
                                                                    if (itemtext.Length <= 8)
                                                                    {
                                                                        ifactor = 0.6;
                                                                    }
                                                                    else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                                                                    {
                                                                        ifactor = 0.8;
                                                                    }
                                                                    else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                                                                    {
                                                                        ifactor = 0.8;
                                                                    }
                                                                    else
                                                                    {
                                                                        ifactor = 0.85;
                                                                    }

                                                                    tb.Width = (ctrl as System.Windows.Controls.Border).Width * ifactor;

                                                                    Viewbox vwbx1 = new Viewbox();
                                                                    vwbx1.Stretch = Stretch.Uniform;
                                                                    vwbx1.Child = tb;

                                                                    bool blFindImage = false;
                                                                    var img = new Image();

                                                                    GeneralFunctions.LoadPhotofromDB("Product", GeneralFunctions.fnInt32(strId), img);

                                                                    if (img.Source != null) blFindImage = true;

                                                                    if (blFindImage)
                                                                    {
                                                                        ((btnctrl as System.Windows.Controls.Button)).Content = new Image
                                                                        {
                                                                            Source = img.Source,
                                                                            Stretch = Stretch.Fill,
                                                                            Margin = new Thickness(-4)
                                                                        };
                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                        ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);

                                                                        Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                                                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor.Contains("#00000000")))
                                                                        {
                                                                            if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                                                            if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                                                        }
                                                                        else
                                                                        {
                                                                            bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor));
                                                                        }

                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)((btnctrl as System.Windows.Controls.Button)).BorderBrush).Color) { Opacity = 0.1 };

                                                                        string template =
                                                                            "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                                                            " TargetType =\"Button\">" +
                                                                            "<Grid>" +
                                                                            "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                                                            "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                                                            "</Border>" +
                                                                            "</Grid>" +
                                                                            "</ControlTemplate>";
                                                                        ((btnctrl as System.Windows.Controls.Button)).Template = (ControlTemplate)XamlReader.Parse(template);
                                                                    }
                                                                    else
                                                                    {
                                                                        (btnctrl as System.Windows.Controls.Button).Content = vwbx1;

                                                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor.Contains("#00000000")))
                                                                        {
                                                                            ((btnctrl as System.Windows.Controls.Button)).Background = System.Windows.Media.Brushes.Transparent;
                                                                            if (SystemVariables.SelectedTheme == "Dark") ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                                                            if (SystemVariables.SelectedTheme == "Light") ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                                                            ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                            ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);
                                                                        }
                                                                        else
                                                                        {
                                                                            ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor));
                                                                            ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                            ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);
                                                                        }

                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)((btnctrl as System.Windows.Controls.Button)).BorderBrush).Color) { Opacity = 0.1 };

                                                                        string template =
                                                                            "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                                                            " TargetType =\"Button\">" +
                                                                            "<Grid>" +
                                                                            "<Border Background=\"" + ((btnctrl as System.Windows.Controls.Button)).Background + "\" CornerRadius=\"5\">" +
                                                                            "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                                                            "</Border>" +
                                                                            "</Grid>" +
                                                                            "</ControlTemplate>";
                                                                        ((btnctrl as System.Windows.Controls.Button)).Template = (ControlTemplate)XamlReader.Parse(template);
                                                                    }
                                                                    */

                                                                    blUpdateStock = true;
                                                                    break;
                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }


                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (!blUpdateStock)
                                {
                                    foreach (UIElement ctrl in pnlCat5.Children)
                                    {
                                        if (ctrl is System.Windows.Controls.Border)
                                        {
                                            if ((ctrl as System.Windows.Controls.Border).Name == "catgroup")
                                            {
                                                Grid grd = (ctrl as System.Windows.Controls.Border).Child as Grid;

                                                foreach (UIElement dpnl in grd.Children)
                                                {
                                                    if (dpnl is System.Windows.Controls.DockPanel)
                                                    {
                                                        foreach (UIElement btnctrl in (dpnl as System.Windows.Controls.DockPanel).Children)
                                                        {
                                                            if (btnctrl is System.Windows.Controls.Button)
                                                            {
                                                                if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemID == GeneralFunctions.fnInt32(strId))
                                                                {
                                                                    intStock = objPOS.GetStockforItem(GeneralFunctions.fnInt32(strId));

                                                                    ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock = intStock;

                                                                    string itemtext = "";

                                                                    if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).DisplayStockinPOS)
                                                                    {
                                                                        itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")" : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")";
                                                                    }
                                                                    else
                                                                    {
                                                                        itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName;
                                                                    }

                                                                    bool blFindImage = false;
                                                                    var img = new Image();

                                                                    GeneralFunctions.LoadPhotofromDB("Product", GeneralFunctions.fnInt32(strId), img);

                                                                    if (img.Source != null) blFindImage = true;

                                                                    if (!blFindImage)
                                                                    {
                                                                        (((btnctrl as System.Windows.Controls.Button).Content as Viewbox).Child as TextBlock).Text = itemtext;
                                                                    }

                                                                    /*
                                                                    TextBlock tb = new TextBlock();
                                                                    tb.Text = itemtext;
                                                                    tb.TextAlignment = TextAlignment.Center;
                                                                    tb.TextWrapping = TextWrapping.WrapWithOverflow;
                                                                    tb.VerticalAlignment = VerticalAlignment.Center;
                                                                    tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                                                                    GeneralFunctions.SetWpfFont(tb, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontFamily, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontSize, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontBold, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontItalic);
                                                                    if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor.Contains("#00000000")))
                                                                    {

                                                                    }
                                                                    else
                                                                    {
                                                                        tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor));
                                                                    }

                                                                    //(btnctrl as System.Windows.Controls.Button).Content = tb;

                                                                    double ifactor = 0.3;
                                                                    if (itemtext.Length <= 8)
                                                                    {
                                                                        ifactor = 0.6;
                                                                    }
                                                                    else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                                                                    {
                                                                        ifactor = 0.8;
                                                                    }
                                                                    else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                                                                    {
                                                                        ifactor = 0.8;
                                                                    }
                                                                    else
                                                                    {
                                                                        ifactor = 0.85;
                                                                    }

                                                                    tb.Width = (ctrl as System.Windows.Controls.Border).Width * ifactor;

                                                                    Viewbox vwbx1 = new Viewbox();
                                                                    vwbx1.Stretch = Stretch.Uniform;
                                                                    vwbx1.Child = tb;

                                                                    bool blFindImage = false;
                                                                    var img = new Image();

                                                                    GeneralFunctions.LoadPhotofromDB("Product", GeneralFunctions.fnInt32(strId), img);

                                                                    if (img.Source != null) blFindImage = true;

                                                                    if (blFindImage)
                                                                    {
                                                                        ((btnctrl as System.Windows.Controls.Button)).Content = new Image
                                                                        {
                                                                            Source = img.Source,
                                                                            Stretch = Stretch.Fill,
                                                                            Margin = new Thickness(-4)
                                                                        };
                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                        ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);

                                                                        Brush bgcolor = System.Windows.Media.Brushes.Transparent;
                                                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor.Contains("#00000000")))
                                                                        {
                                                                            if (SystemVariables.SelectedTheme == "Dark") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                                                            if (SystemVariables.SelectedTheme == "Light") bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                                                        }
                                                                        else
                                                                        {
                                                                            bgcolor = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor));
                                                                        }

                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)((btnctrl as System.Windows.Controls.Button)).BorderBrush).Color) { Opacity = 0.1 };

                                                                        string template =
                                                                            "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                                                            " TargetType =\"Button\">" +
                                                                            "<Grid>" +
                                                                            "<Border Name=\"bb\" Background=\"" + bgcolor + "\" CornerRadius=\"5\">" +
                                                                            "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                                                            "</Border>" +
                                                                            "</Grid>" +
                                                                            "</ControlTemplate>";
                                                                        ((btnctrl as System.Windows.Controls.Button)).Template = (ControlTemplate)XamlReader.Parse(template);
                                                                    }
                                                                    else
                                                                    {
                                                                        (btnctrl as System.Windows.Controls.Button).Content = vwbx1;

                                                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor.Contains("#00000000")))
                                                                        {
                                                                            ((btnctrl as System.Windows.Controls.Button)).Background = System.Windows.Media.Brushes.Transparent;
                                                                            if (SystemVariables.SelectedTheme == "Dark") ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#292F41"));
                                                                            if (SystemVariables.SelectedTheme == "Light") ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#EFF4F4"));
                                                                            ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                            ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);
                                                                        }
                                                                        else
                                                                        {
                                                                            ((btnctrl as System.Windows.Controls.Button)).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemColor));
                                                                            ((btnctrl as System.Windows.Controls.Button)).BorderThickness = new Thickness(0);
                                                                            ((btnctrl as System.Windows.Controls.Button)).Margin = new Thickness(0, 0, 0, 0);
                                                                        }

                                                                        ((btnctrl as System.Windows.Controls.Button)).BorderBrush = new System.Windows.Media.SolidColorBrush(((System.Windows.Media.SolidColorBrush)((btnctrl as System.Windows.Controls.Button)).BorderBrush).Color) { Opacity = 0.1 };

                                                                        string template =
                                                                            "<ControlTemplate xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'" +
                                                                            " TargetType =\"Button\">" +
                                                                            "<Grid>" +
                                                                            "<Border Background=\"" + ((btnctrl as System.Windows.Controls.Button)).Background + "\" CornerRadius=\"5\">" +
                                                                            "<ContentPresenter HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>" +
                                                                            "</Border>" +
                                                                            "</Grid>" +
                                                                            "</ControlTemplate>";
                                                                        ((btnctrl as System.Windows.Controls.Button)).Template = (ControlTemplate)XamlReader.Parse(template);
                                                                    }
                                                                    */

                                                                    blUpdateStock = true;
                                                                    break;
                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }


                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                blInitAutoSignOut = true;
                blInitAutoSignOutAfterTender = true;
                InitializeScreen();
                boolLoadAllItem = true;
            }
            else
            {
                int fval = gridView1.FocusedRowHandle;
            }
            GeneralFunctions.SetFocus(txtSKU);
        }
        private double GetRentSecurityDeposit()
        {
            double val = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                val = val + GeneralFunctions.fnDouble(dr["QTY"].ToString()) * GeneralFunctions.fnDouble(dr["RENTDEPOSIT"].ToString());
            }
            return val;
        }

        // Rental Issue function
        private DataTable FinalDataTableForRentIssue(DataTable dtblPOSDatatbl)
        {
            DataTable dtblFinal = new DataTable();
            dtblFinal.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ONHANDQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NORMALQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("COST", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("QTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("RATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DEPT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("CAT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMDESC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMID", System.Type.GetType("System.String"));
            // add for layaway Invoice
            dtblFinal.Columns.Add("TAX1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TOTALSALE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTREASON", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("LAYAWAYAMOUNT", System.Type.GetType("System.String"));

            // add for invoice notes
            dtblFinal.Columns.Add("NOTES", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMDISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("RENTTYPE", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("RENTDURATION", System.Type.GetType("System.Double"));//35
            dtblFinal.Columns.Add("RENTAMOUNT", System.Type.GetType("System.Double"));//36
            dtblFinal.Columns.Add("RENTDEPOSIT", System.Type.GetType("System.Double"));//37

            dtblFinal.Columns.Add("REPAIRITEMTAG", System.Type.GetType("System.String"));//38
            dtblFinal.Columns.Add("REPAIRITEMSLNO", System.Type.GetType("System.String"));//39
            dtblFinal.Columns.Add("REPAIRITEMPURCHASEDATE", System.Type.GetType("System.String"));//40

            dtblFinal.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//38
            dtblFinal.Columns.Add("TX1", System.Type.GetType("System.Double"));//39
            dtblFinal.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//40
            dtblFinal.Columns.Add("TX2", System.Type.GetType("System.Double"));//41
            dtblFinal.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//42
            dtblFinal.Columns.Add("TX3", System.Type.GetType("System.Double"));//43

            dtblFinal.Columns.Add("GRATE", System.Type.GetType("System.Double"));
            dtblFinal.Columns.Add("GPRICE", System.Type.GetType("System.Double"));


            // fetch TaxID, TaxName first

            string strTaxID1 = "0";
            string strTaxID2 = "0";
            string strTaxID3 = "0";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";
            string strTaxRate1 = "0";
            string strTaxRate2 = "0";
            string strTaxRate3 = "0";

            int iTaxType1 = 0;
            int iTaxType2 = 0;
            int iTaxType3 = 0;
            double TaxVal1 = 0;
            double TaxVal2 = 0;
            double TaxVal3 = 0;

            int intCount = 0;
            DataTable dtblTaxHeader = new DataTable();
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTaxHeader = objTax.FetchActiveTax();
            foreach (DataRow dr in dtblTaxHeader.Rows)
            {
                intCount++;
                if (intCount == 1)
                {
                    strTaxID1 = dr["ID"].ToString();
                    strTaxName1 = dr["TaxName"].ToString();
                    strTaxRate1 = dr["TaxRate"].ToString();
                }
                if (intCount == 2)
                {
                    strTaxID2 = dr["ID"].ToString();
                    strTaxName2 = dr["TaxName"].ToString();
                    strTaxRate2 = dr["TaxRate"].ToString();
                }
                if (intCount == 3)
                {
                    strTaxID3 = dr["ID"].ToString();
                    strTaxName3 = dr["TaxName"].ToString();
                    strTaxRate3 = dr["TaxRate"].ToString();
                    break;
                }
            }
            dtblTaxHeader.Dispose();

            foreach (DataRow dr1 in dtblPOSDatatbl.Rows)
            {
                string pSKU = "";
                string pDept = "";
                string pCat = "";
                string pT1 = "N";
                string pT2 = "N";
                string pT3 = "N";

                iTaxType1 = 0;
                iTaxType2 = 0;
                iTaxType3 = 0;
                TaxVal1 = 0;
                TaxVal2 = 0;
                TaxVal3 = 0;

                int tx1ty = 0;
                int tx2ty = 0;
                int tx3ty = 0;

                int tx1id = 0;
                int tx2id = 0;
                int tx3id = 0;

                double tx1 = 0;
                double tx2 = 0;
                double tx3 = 0;

                double dGRate = 0;
                double dGPrice = 0;

                dGRate = GeneralFunctions.fnDouble(dr1["GRATE"].ToString());
                dGPrice = GeneralFunctions.fnDouble(dr1["GPRICE"].ToString());

                tx1ty = GeneralFunctions.fnInt32(dr1["TX1TYPE"].ToString());
                tx2ty = GeneralFunctions.fnInt32(dr1["TX2TYPE"].ToString());
                tx3ty = GeneralFunctions.fnInt32(dr1["TX3TYPE"].ToString());

                tx1id = GeneralFunctions.fnInt32(dr1["TX1ID"].ToString());
                tx2id = GeneralFunctions.fnInt32(dr1["TX2ID"].ToString());
                tx3id = GeneralFunctions.fnInt32(dr1["TX3ID"].ToString());

                tx1 = GeneralFunctions.fnDouble(dr1["TX1"].ToString());
                tx2 = GeneralFunctions.fnDouble(dr1["TX2"].ToString());
                tx3 = GeneralFunctions.fnDouble(dr1["TX3"].ToString());

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx1id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx1id > 0))
                {
                    iTaxType1 = tx1ty;
                    TaxVal1 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx2id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx2id > 0))
                {
                    iTaxType1 = tx2ty;
                    TaxVal1 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx3id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx3id > 0))
                {
                    iTaxType1 = tx3ty;
                    TaxVal1 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx1id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx1id > 0))
                {
                    iTaxType2 = tx1ty;
                    TaxVal2 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx2id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx2id > 0))
                {
                    iTaxType2 = tx2ty;
                    TaxVal2 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx3id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx3id > 0))
                {
                    iTaxType2 = tx3ty;
                    TaxVal2 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx1id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx1id > 0))
                {
                    iTaxType3 = tx1ty;
                    TaxVal3 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx2id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx2id > 0))
                {
                    iTaxType3 = tx2ty;
                    TaxVal3 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx3id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx3id > 0))
                {
                    iTaxType3 = tx3ty;
                    TaxVal3 = tx3;
                }

                if (dr1["PRODUCTTYPE"].ToString() == "G") // Gift Certificate
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,
                                        pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "GC",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),"",
                                        "0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        dGRate,dGPrice});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "A") // Account Pay
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "AR",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,dGRate,dGPrice});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "C") // Coupon
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,
                                        pT1,pT2,pT3,strTaxRate1,strTaxRate2,
                                        strTaxRate3,
                                        "COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","",
                                        "0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),"0","","0",
                                        iTaxType1,TaxVal1,iTaxType2,
                                        TaxVal2,iTaxType3,TaxVal3,dGRate,dGPrice});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "H") // Fees Ticket
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,
                                        pT1,pT2,pT3,strTaxRate1,strTaxRate2,
                                        strTaxRate3,
                                        "FEE COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","",
                                        "0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),"0","","0",
                                        iTaxType1,TaxVal1,iTaxType2,
                                        TaxVal2,iTaxType3,TaxVal3,dGRate,dGPrice});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "Z") // Special Mix n Match
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,
                                        pT1,pT2,pT3,strTaxRate1,strTaxRate2,
                                        strTaxRate3,
                                        "Mix n Match",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","",
                                        "0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),"0","","0",
                                        iTaxType1,TaxVal1,iTaxType2,
                                        TaxVal2,iTaxType3,TaxVal3,dGRate,dGPrice});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "B") // Blank Line
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),
                                        dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),
                                        dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),
                                        dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        "Blank",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,dGRate,dGPrice});
                }
                else
                {
                    int pID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                    FetchItemAdditionData(pID, ref pSKU, ref pDept, ref pCat);

                    if (strTaxExempt == "N")
                    {
                        GetTaxable(pID, strTaxID1, strTaxID2, strTaxID3, ref pT1, ref pT2, ref pT3);
                    }

                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,dGRate,dGPrice});
                }
            }


            return dtblFinal;
        }
        private void IssueRentItem()
        {
            int intINV = 0;
            string srterrmsg = "";
            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            objpos.EmployeeID = SystemVariables.CurrentUserID;
            objpos.CustomerID = intCustID;
            objpos.TransType = 15; // sales
            objpos.ReceiptCnt = 1;
            objpos.Status = 15;
            objpos.Tax = 0;
            double tempcoupon = 0;
            objpos.Coupon = tempcoupon;
            objpos.CouponPerc = 0;
            objpos.Discount = double.Parse(numDiscount.Text);
            objpos.DiscountReason = "";
            objpos.TotalSale = 0;
            objpos.ItemDataTable = FinalDataTableForRentIssue(dtblPOS);

            objpos.TaxID1 = 0;
            objpos.TaxID2 = 0;
            objpos.TaxID3 = 0;
            objpos.Tax1 = 0;
            objpos.Tax2 = 0;
            objpos.Tax3 = 0;
            objpos.ErrorMsg = "";
            objpos.ChangeAmount = 0;
            objpos.SuspendInvoiceNo = 0;

            objpos.ChangedByAdmin = intSuperUserID;
            objpos.FunctionButtonAccess = blFunctionBtnAccess;

            objpos.TenderDataTable = null;
            // static value
            objpos.StoreID = 1;
            objpos.RegisterID = 1;
            objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
            objpos.TransNoteNo = 0;
            objpos.LayawayNo = 0;
            objpos.TransMSeconds = 0;
            // static value
            objpos.TerminalName = Settings.TerminalName;
            objpos.Return = false;
            objpos.NewLayaway = false;
            objpos.Layaway = false;
            objpos.LayawayRefund = false;
            objpos.ApptDataTable = null;
            objpos.RentReturn = false;
            objpos.ServiceType = "Rent";
            objpos.RentalSecurityDeposit = 0;
            objpos.IssueRentInvNo = 0;

            objpos.GCCentralFlag = Settings.CentralExportImport;
            objpos.GCOPStore = Settings.StoreCode;

            objpos.OperateStore = Settings.StoreCode;
            objpos.IsRentCalculated = Settings.CalculateRentLater;
            objpos.BeginTransaction();
            if (objpos.CreateInvoice())
            {
                intINV = objpos.ID;
            }
            objpos.EndTransaction();
            if (intINV > 0)
            {
                PrintInvoice(intINV, "Rent Issue");
                InitializeScreen();
            }
        }
        private void PrintInvoice(int intINV, string ptype)
        {
            if (Settings.GeneralReceiptPrint == "N")
            {

                frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                try
                {
                    frm_POSInvoicePrintDlg.PrintType = ptype;
                    frm_POSInvoicePrintDlg.InvNo = intINV;
                    frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSInvoicePrintDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                }
                finally
                {
                }
            }
            else
            {
                DataTable dtbl = new DataTable();
                PosDataObject.POS objPOS1 = new PosDataObject.POS();
                objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                dtbl = objPOS1.FetchInvoiceHeader(intINV, Settings.StoreCode);

                DataTable dlogo = new DataTable();
                objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                dlogo = objPOS1.FetchStoreLogo();
                bool boolnulllogo = false;
                foreach (DataRow drl1 in dtbl.Rows)
                {
                    foreach (DataRow drl2 in dlogo.Rows)
                    {
                        if (drl2["logo"] == null) boolnulllogo = true;
                        drl1["Logo"] = drl2["logo"];
                    }
                }

                int intTranNo = 0;
                double dblOrderTotal = 0;
                double dblOrderSubtotal = 0;
                double dblDiscount = 0;
                double dblCoupon = 0;
                double dblTax = 0;
                double dblSurcharge = 0;
                int intCID = 0;
                string strDiscountReason = "";
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDTax = 0;
                string strTaxNM1 = "";
                string strTaxNM2 = "";
                string strTaxNM3 = "";
                string strDTaxNM = "";
                string strservice = "";
                int intHeaderStatus = 0;
                double dblRentDeposit = 0;
                double dblRentReturnDeposit = 0;
                double dblRepairAmount = 0;
                double dblRepairAdvanceAmount = 0;
                string strRepairDeliveryDate = "";
                string strCustMobile = "";
                string strRepairItemName = "";
                string strRepairItemSlNo = "";
                string calcrent = "N";

                string strCustomerDOB = "";

                foreach (DataRow dr in dtbl.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    intCID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                    dblOrderTotal = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    strTaxNM1 = dr["TaxNM1"].ToString();
                    strTaxNM2 = dr["TaxNM2"].ToString();
                    strTaxNM3 = dr["TaxNM3"].ToString();
                    strDTaxNM = dr["DTaxName"].ToString();
                    dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                    strDiscountReason = dr["DiscountReason"].ToString();
                    strservice = dr["ServiceType"].ToString();
                    intHeaderStatus = GeneralFunctions.fnInt32(dr["Status"].ToString());
                    dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                    dblRepairAmount = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                    dblRepairAdvanceAmount = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                    if (dr["RepairDeliveryDate"].ToString() != "") strRepairDeliveryDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToShortDateString();
                    calcrent = dr["IsRentCalculated"].ToString();

                    if (Settings.POSIDRequired == "Y") strCustomerDOB = dr["CustomerDOB"].ToString();
                }

                if (intHeaderStatus == 17) dblOrderTotal = dblRepairAmount;



                DataTable dtbl1 = new DataTable();
                DataTable dtbl2 = new DataTable();
                DataTable dtbl3 = new DataTable();
                DataTable dtbl4 = new DataTable();
                DataTable dtbl5 = new DataTable();

                OfflineRetailV2.Report.Sales.repInvMain rep_InvMain = new OfflineRetailV2.Report.Sales.repInvMain();
                OfflineRetailV2.Report.Sales.repInvHeader1 rep_InvHeader1 = new OfflineRetailV2.Report.Sales.repInvHeader1();
                OfflineRetailV2.Report.Sales.repInvHeader2 rep_InvHeader2 = new OfflineRetailV2.Report.Sales.repInvHeader2();
                OfflineRetailV2.Report.Sales.repInvLine rep_InvLine = new OfflineRetailV2.Report.Sales.repInvLine();
                OfflineRetailV2.Report.Sales.repInvSubtotal rep_InvSubtotal = new OfflineRetailV2.Report.Sales.repInvSubtotal();
                OfflineRetailV2.Report.Sales.repInvRentLine rep_InvRentLine = new OfflineRetailV2.Report.Sales.repInvRentLine();
                OfflineRetailV2.Report.Sales.repInvRentSubTotal rep_InvRentSubTotal = new OfflineRetailV2.Report.Sales.repInvRentSubTotal();
                OfflineRetailV2.Report.Sales.repInvRentReturnLine rep_InvRentReturnLine = new OfflineRetailV2.Report.Sales.repInvRentReturnLine();
                OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal rep_InvRentReturnSubTotal = new OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal();
                OfflineRetailV2.Report.Sales.repInvTax rep_InvTax = new OfflineRetailV2.Report.Sales.repInvTax();
                OfflineRetailV2.Report.Sales.repPPInvTendering rep_InvTendering = new OfflineRetailV2.Report.Sales.repPPInvTendering();
                OfflineRetailV2.Report.Sales.repInvGC rep_InvGC = new OfflineRetailV2.Report.Sales.repInvGC();
                OfflineRetailV2.Report.Sales.repInvMGC rep_InvMGC = new OfflineRetailV2.Report.Sales.repInvMGC();
                OfflineRetailV2.Report.Sales.repInvSign rep_InvSign = new OfflineRetailV2.Report.Sales.repInvSign();
                OfflineRetailV2.Report.Sales.repInvCC rep_InvCC = new OfflineRetailV2.Report.Sales.repInvCC();
                OfflineRetailV2.Report.Sales.repInvCoupon rep_InvCoupon = new OfflineRetailV2.Report.Sales.repInvCoupon();
                rep_InvMain.rReprint.Text = "";
                if (Settings.ReceiptFooter == "")
                {
                    rep_InvMain.rReportFooter.HeightF = 1.0f;
                    rep_InvMain.rReportFooter.LocationF = new System.Drawing.PointF(8, 2);
                    rep_InvMain.xrBarCode.LocationF = new System.Drawing.PointF(8, 5);
                    rep_InvMain.rCopy.LocationF = new System.Drawing.PointF(567, 5);

                    rep_InvMain.xrShape1.LocationF = new System.Drawing.PointF(581, 25);
                    rep_InvMain.xrPageInfo2.LocationF = new System.Drawing.PointF(594, 25);
                    rep_InvMain.xrPageInfo1.LocationF = new System.Drawing.PointF(681, 25);
                    rep_InvMain.xrShape2.LocationF = new System.Drawing.PointF(725, 25);

                    rep_InvMain.ReportFooter.Height = 60;
                    rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                }
                else
                {
                    rep_InvMain.ReportFooter.Height = 91;
                    rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                }

                rep_InvMain.subrepH1.ReportSource = rep_InvHeader1;
                rep_InvHeader1.Report.DataSource = dtbl;
                rep_InvHeader1.rReprint.Text = "";
                GeneralFunctions.MakeReportWatermark(rep_InvMain);
                rep_InvHeader1.rReportHeaderCompany.Text = Settings.ReceiptHeader_Company; ;
                rep_InvHeader1.rReportHeader.Text = Settings.ReceiptHeader_Address;

                if (strservice == "Rent")
                {
                    if (intHeaderStatus == 15) rep_InvHeader1.rType.Text = Properties.Resources.Rent_Issued;
                    if (intHeaderStatus == 16) rep_InvHeader1.rType.Text = Properties.Resources.Rent_Item_Returned;
                }
                if (strservice == "Repair")
                {
                    if (intHeaderStatus == 17)
                    {
                        if (strRepairDeliveryDate != "") rep_InvHeader1.rType.Text = Properties.Resources.Repair_In + "      " + Properties.Resources.Expected_Delivety_Date__ + strRepairDeliveryDate;
                        else rep_InvHeader1.rType.Text = Properties.Resources.Repair_In;
                    }
                    if (intHeaderStatus == 18)
                    {
                        rep_InvHeader1.rType.Text = Properties.Resources.Repair_Delivered;
                    }
                }
                rep_InvHeader1.rOrderNo.Text = intINV.ToString();
                if (Settings.PrintLogoInReceipt == "Y")
                {
                    if (!boolnulllogo) rep_InvHeader1.rPic.DataBindings.Add("Image", dtbl, "Logo");
                }
                rep_InvHeader1.rOrderDate.DataBindings.Add("Text", dtbl, "TransDate");

                rep_InvMain.xrBarCode.Text = intINV.ToString();

                if ((ptype == "Repair In") || (ptype == "Repair Deliver"))
                {
                    rep_InvHeader1.rOrderDate.DataBindings.Add("Text", dtbl, "RepairDateIn");
                }
                if (intCID > 0)
                {
                    rep_InvMain.subrepH2.ReportSource = rep_InvHeader2;
                    rep_InvHeader2.Report.DataSource = dtbl;
                    rep_InvHeader2.rCustID.DataBindings.Add("Text", dtbl, "CustID");
                    rep_InvHeader2.rCustName.DataBindings.Add("Text", dtbl, "CustName");
                    rep_InvHeader2.rCompany.DataBindings.Add("Text", dtbl, "CustCompany");

                    if (intHeaderStatus == 3)
                    {
                        if (strCustomerDOB != "")
                        {
                            rep_InvHeader2.rlCustDOB.Text = Properties.Resources.Date_of_Birth;
                            rep_InvHeader2.rCustDOB.Text = GeneralFunctions.fnDate(strCustomerDOB).ToString(SystemVariables.DateFormat);
                        }
                    }

                    if ((ptype == "Repair In") || (ptype == "Repair Deliver"))
                    {
                        rep_InvHeader2.rlCustID.Text = Properties.Resources.Ph_;
                        rep_InvHeader2.rCustID.DataBindings.Add("Text", dtbl, "CustMobile");

                        rep_InvHeader2.rlCompany.DataBindings.Add("Text", dtbl, "RepairItemName");
                        rep_InvHeader2.rCompany.DataBindings.Add("Text", dtbl, "RepairItemSlNo");
                    }
                }
                else
                {
                    if (intHeaderStatus == 3)
                    {
                        if (strCustomerDOB != "")
                        {
                            rep_InvMain.subrepH2.ReportSource = rep_InvHeader2;
                            rep_InvHeader2.Report.DataSource = dtbl;
                            rep_InvHeader2.rlCustName.Text = "";
                            rep_InvHeader2.rCustName.Text = "";
                            rep_InvHeader2.rCustID.Text = "";
                            rep_InvHeader2.rCompany.Text = "";
                            rep_InvHeader2.rlCustID.Text = "";
                            rep_InvHeader2.rlCompany.Text = "";

                            if (intHeaderStatus == 3)
                            {
                                if (strCustomerDOB != "")
                                {
                                    rep_InvHeader2.rlCustDOB.Text = Properties.Resources.Date_of_Birth;
                                    rep_InvHeader2.rCustDOB.Text = GeneralFunctions.fnDate(strCustomerDOB).ToString(SystemVariables.DateFormat);
                                }
                            }
                        }
                    }
                }

                PosDataObject.POS objPOS2 = new PosDataObject.POS();
                objPOS2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                dtbl1 = objPOS2.FetchInvoiceDetails1(intINV, dblOrderTotal < 0 ? true : false, Settings.TaxInclusive);
                if ((intHeaderStatus == 16) && (calcrent == "Y"))
                {
                    foreach (DataRow d in dtbl1.Rows)
                    {
                        d["Qty"] = -GeneralFunctions.fnDouble(d["Qty"].ToString());
                        d["TotalPrice"] = -GeneralFunctions.fnDouble(d["TotalPrice"].ToString());
                    }
                }
                if (strservice == "Rent")
                {
                    if (intHeaderStatus == 15) // issue
                    {
                        rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                        rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                        rep_InvRentLine.Report.DataSource = dtbl1;
                        rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                        rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                        rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                        rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                        rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                        rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                        rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                        rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            rep_InvRentLine.rFeesTxt.Visible = true;
                            rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                        }
                        else
                        {
                            rep_InvRentLine.rFeesTxt.Visible = false;
                        }
                    }
                    if (intHeaderStatus == 16) // return
                    {
                        if (calcrent == "N")
                        {
                            rep_InvMain.subrepLine.ReportSource = rep_InvRentReturnLine;
                            rep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                            rep_InvRentReturnLine.Report.DataSource = dtbl1;
                            rep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                            rep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                            rep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");

                        }
                        if (calcrent == "Y")
                        {
                            rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                            rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                            rep_InvRentLine.Report.DataSource = dtbl1;
                            rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                            rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                            rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                            rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                            rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                            rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                            rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                            rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                            if (Settings.ShowFeesInReceipt == "Y")
                            {
                                rep_InvRentLine.rFeesTxt.Visible = true;
                                rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                            }
                            else
                            {
                                rep_InvRentLine.rFeesTxt.Visible = false;
                            }
                        }
                    }
                }
                else if (strservice == "Repair")
                {
                    if (intHeaderStatus == 17) // issue
                    {
                        rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                        rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                        rep_InvRentLine.Report.DataSource = dtbl1;
                        rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                        rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                        rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                        rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                        rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                        rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                        rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                        rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            rep_InvRentLine.rFeesTxt.Visible = true;
                            rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                        }
                        else
                        {
                            rep_InvRentLine.rFeesTxt.Visible = false;
                        }
                    }
                    if (intHeaderStatus == 18) // return
                    {
                        rep_InvMain.subrepLine.ReportSource = rep_InvRentReturnLine;
                        rep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                        rep_InvRentReturnLine.Report.DataSource = dtbl1;
                        rep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                        rep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                        rep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");


                    }
                }
                else
                {
                    rep_InvMain.subrepLine.ReportSource = rep_InvLine;
                    rep_InvLine.DecimalPlace = Settings.DecimalPlace;
                    rep_InvLine.Report.DataSource = dtbl1;
                    rep_InvLine.rlSKU.DataBindings.Add("Text", dtbl1, "Qty");
                    rep_InvLine.rlIem.DataBindings.Add("Text", dtbl1, "SKU");
                    rep_InvLine.rlqty.DataBindings.Add("Text", dtbl1, "Description");
                    rep_InvLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                    rep_InvLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                    rep_InvLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                    rep_InvLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                    rep_InvLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                    if (Settings.ShowFeesInReceipt == "Y")
                    {
                        rep_InvLine.rFeesTxt.Visible = true;
                        rep_InvLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                    }
                    else
                    {
                        rep_InvLine.rFeesTxt.Visible = false;
                    }
                }

                foreach (DataRow dr12 in dtbl1.Rows)
                {
                    dblOrderSubtotal = dblOrderSubtotal + GeneralFunctions.fnDouble(dr12["TotalPrice"].ToString()) + GeneralFunctions.fnDouble(dr12["Discount"].ToString());
                }



                if (strservice == "Rent")
                {
                    if (intHeaderStatus == 15) // issue
                    {
                        rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentSubTotal;
                        rep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                        rep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                        rep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                        rep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                        rep_InvRentSubTotal.DR = strDiscountReason;
                        rep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                    }

                    if (intHeaderStatus == 16) // return
                    {
                        if (calcrent == "N")
                        {
                            if (dblOrderTotal != 0)
                            {
                                rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentReturnSubTotal;
                                rep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                rep_InvRentReturnSubTotal.rReturnDeposit.Text = dblOrderTotal.ToString();
                            }
                        }
                        if (calcrent == "Y")
                        {
                            rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentReturnSubTotal;
                            rep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                            rep_InvRentReturnSubTotal.rReturnDeposit.Text = (-dblRentDeposit).ToString();
                        }
                    }
                }
                else if (strservice == "Repair")
                {
                    if (intHeaderStatus == 17) // issue
                    {
                        rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentSubTotal;
                        rep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                        rep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                        rep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                        rep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                        rep_InvRentSubTotal.DR = strDiscountReason;
                        rep_InvRentSubTotal.rw1.Visible = false;
                        rep_InvRentSubTotal.rw2.Visible = false;
                        rep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                    }

                }
                else
                {
                    rep_InvMain.subrepSubtotal.ReportSource = rep_InvSubtotal;
                    rep_InvSubtotal.DecimalPlace = Settings.DecimalPlace;
                    rep_InvSubtotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                    rep_InvSubtotal.rDiscount.Text = dblDiscount.ToString();
                    rep_InvSubtotal.DR = strDiscountReason;
                    rep_InvSubtotal.rTax.Text = dblTax.ToString();
                }

                if (dblTax != 0)
                {
                    dtbl2.Columns.Add("Name", System.Type.GetType("System.String"));
                    dtbl2.Columns.Add("Amount", System.Type.GetType("System.String"));

                    if (dblTax1 != 0)
                    {
                        dtbl2.Rows.Add(new object[] { strTaxNM1, dblTax1.ToString() });
                    }

                    if (dblTax2 != 0)
                    {
                        dtbl2.Rows.Add(new object[] { strTaxNM2, dblTax2.ToString() });
                    }

                    if (dblTax3 != 0)
                    {
                        dtbl2.Rows.Add(new object[] { strTaxNM3, dblTax3.ToString() });
                    }

                    if (dblDTax != 0)
                    {
                        dtbl2.Rows.Add(new object[] { "Dest. Tax : " + strDTaxNM, dblDTax.ToString() });
                    }

                    rep_InvMain.subrepTax.ReportSource = rep_InvTax;
                    rep_InvTax.DecimalPlace = Settings.DecimalPlace;

                    rep_InvTax.Report.DataSource = dtbl2;
                    rep_InvTax.rDTax1.DataBindings.Add("Text", dtbl2, "Name");
                    rep_InvTax.rDTax2.DataBindings.Add("Text", dtbl2, "Amount");
                }

                PosDataObject.POS objPOS23 = new PosDataObject.POS();
                objPOS23.Connection = new SqlConnection(SystemVariables.ConnectionString);
                dtbl5 = objPOS23.FetchInvoiceCoupons(intINV);
                if (dtbl5.Rows.Count > 0)
                {
                    rep_InvMain.subrepCoupon.ReportSource = rep_InvCoupon;
                    rep_InvCoupon.DecimalPlace = Settings.DecimalPlace;
                    rep_InvCoupon.Report.DataSource = dtbl5;
                    rep_InvCoupon.rAmt.Text = dblCoupon.ToString();
                    rep_InvCoupon.rDTax1.DataBindings.Add("Text", dtbl5, "Name");
                    rep_InvCoupon.rDTax2.DataBindings.Add("Text", dtbl5, "Amount");
                }

                PosDataObject.POS objPOS4 = new PosDataObject.POS();
                objPOS4.Connection = new SqlConnection(SystemVariables.ConnectionString);
                dtbl3 = objPOS4.FetchInvoiceTender(intTranNo);
                dtbl3 = RearrangeTenderForCashBack(intTranNo, dtbl3);

                int TenderCount = 0;
                TenderCount = dtbl3.Rows.Count;
                double dblTenderAmt = 0;
                foreach (DataRow dr1 in dtbl3.Rows)
                {
                    if (dr1["DisplayAs"].ToString() == "Debit Card Total") continue;
                    dblTenderAmt = dblTenderAmt + GeneralFunctions.fnDouble(dr1["Amount"].ToString());
                }

                rep_InvMain.subrepTender.ReportSource = rep_InvTendering;
                rep_InvTendering.Report.DataSource = dtbl3;
                rep_InvTendering.DecimalPlace = Settings.DecimalPlace;
                if (TenderCount == 0) rep_InvTendering.lbTenderText.Text = "";

                if ((intHeaderStatus == 15) && (calcrent == "Y")) rep_InvTendering.rTotal.Text = dblRentDeposit.ToString();
                else if ((intHeaderStatus == 15) && (calcrent == "N")) rep_InvTendering.rTotal.Text = (dblOrderTotal + dblRentDeposit).ToString();
                else rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                //rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();
                rep_InvTendering.rTenderName.DataBindings.Add("Text", dtbl3, "DisplayAs");
                rep_InvTendering.rTenderAmt.DataBindings.Add("Text", dtbl3, "Amount");

                if (strservice == "Repair")
                {
                    string MFooter = "";
                    if ((Settings.ReceiptFooter == "") && (Settings.ReceiptLayawayPolicy == ""))
                    {
                        rep_InvMain.ReportFooter.Height = 35;
                        rep_InvMain.rReportFooter.Text = "";
                    }
                    else
                    {
                        if (Settings.ReceiptFooter != "") MFooter = Properties.Resources.CUSTOMER_AGREEMENT_ + Settings.ReceiptFooter;
                        if (Settings.ReceiptLayawayPolicy != "")
                        {
                            if (Settings.ReceiptFooter == "") MFooter = Properties.Resources.REPAIR_DISCLAIMER_ + Settings.ReceiptLayawayPolicy;
                            else MFooter = MFooter + " \n " + Properties.Resources.REPAIR_DISCLAIMER_ + Settings.ReceiptLayawayPolicy;
                        }
                        rep_InvMain.ReportFooter.Height = 130;
                        rep_InvMain.rReportFooter.Text = MFooter;

                    }

                    rep_InvMain.subrepRepairSign.ReportSource = rep_InvSign;

                    if (intHeaderStatus == 17)
                    {
                        rep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                        rep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                        rep_InvTendering.rlbDue.Text = Properties.Resources.BalanceDue;
                        rep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();

                        rep_InvSign.rTxt.Text = Properties.Resources.I_AGREE_TO_PAY + (dblRepairAmount - dblRepairAdvanceAmount).ToString();


                    }
                    if (intHeaderStatus == 18)
                    {
                        if (dblRepairAdvanceAmount > 0)
                        {
                            rep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                            rep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                            rep_InvTendering.rlbDue.Text = Properties.Resources.BalanceDue;
                            rep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                        }
                        else
                        {
                            rep_InvTendering.rlbAdvance.Text = "";
                            rep_InvTendering.rAdvance.Text = "";
                            rep_InvTendering.rlbDue.Text = "";
                            rep_InvTendering.rDue.Text = "";

                            rep_InvTendering.rtr1.HeightF = 1.0f;
                            rep_InvTendering.rtr2.HeightF = 1.0f;
                            rep_InvTendering.rtbl.HeightF = 55.0f;
                            rep_InvTendering.PageHeader.HeightF = 55.0f;
                        }
                        rep_InvSign.rTxt.Text = "";
                    }
                }
                else
                {
                    rep_InvTendering.rlbAdvance.Text = "";
                    rep_InvTendering.rAdvance.Text = "";
                    rep_InvTendering.rlbDue.Text = "";
                    rep_InvTendering.rDue.Text = "";

                    rep_InvTendering.rtr1.HeightF = 1.0f;
                    rep_InvTendering.rtr2.HeightF = 1.0f;
                    rep_InvTendering.rtbl.HeightF = 55.0f;
                    rep_InvTendering.PageHeader.HeightF = 55.0f;
                }

                double EffectiveTotal = 0;
                if ((intHeaderStatus == 17) && (dblRepairAdvanceAmount == 0)) EffectiveTotal = dblRepairAdvanceAmount;
                else if ((intHeaderStatus == 15) && (calcrent == "Y")) EffectiveTotal = dblRentDeposit;
                else if ((intHeaderStatus == 15) && (calcrent == "N")) EffectiveTotal = dblOrderTotal + dblRentDeposit;
                else if (intHeaderStatus == 17) EffectiveTotal = dblRepairAdvanceAmount;
                else if (intHeaderStatus == 18) EffectiveTotal = dblRepairAmount - dblRepairAdvanceAmount;
                else EffectiveTotal = dblOrderTotal;

                if (dblTenderAmt != EffectiveTotal)
                {
                    rep_InvTendering.ChangeDue = true;
                    rep_InvTendering.ReportFooter.Visible = true;
                    rep_InvTendering.rChangeDueText.Text = Properties.Resources.Change;
                    rep_InvTendering.rChangeDue.Text = Convert.ToString(dblTenderAmt - EffectiveTotal);
                }
                else
                {
                    rep_InvTendering.ChangeDue = false;
                    rep_InvTendering.ReportFooter.Visible = false;
                }

                if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                {
                    //rep_InvTendering.ChangeDue = false;
                    //rep_InvTendering.ReportFooter.Visible = false;
                }

                if (Settings.POSShowGiftCertBalance == "Y")
                {
                    PosDataObject.POS objPOS5 = new PosDataObject.POS();
                    objPOS5.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dtbl4 = objPOS5.ActiveGiftCert(intINV, Settings.CentralExportImport, Settings.StoreCode);
                    if (dtbl4.Rows.Count > 0)
                    {
                        rep_InvMain.subrepGC.ReportSource = rep_InvGC;
                        rep_InvGC.Report.DataSource = dtbl4;
                        rep_InvGC.DecimalPlace = Settings.DecimalPlace;
                        rep_InvGC.rGCHeader.Text = Properties.Resources.Gift_Cert__with_balance_as_on__ + " " + DateTime.Today.Date.ToShortDateString();
                        rep_InvGC.rGCName.DataBindings.Add("Text", dtbl4, "GC");
                        rep_InvGC.rGCAmt.DataBindings.Add("Text", dtbl4, "GCAMT");
                    }
                }


                // EBT Balance on Receipt

                PosDataObject.POS objPOS87 = new PosDataObject.POS();
                objPOS87.Connection = new SqlConnection(SystemVariables.ConnectionString);
                DataTable dtblEBT = objPOS87.FetchEBTBalanceFromReceipt(intINV);
                if (dtblEBT.Rows.Count > 0)
                {
                    OfflineRetailV2.Report.Sales.repInvEBT rep_InvEBT = new OfflineRetailV2.Report.Sales.repInvEBT();
                    rep_InvMain.subrepEBT.ReportSource = rep_InvEBT;
                    rep_InvEBT.Report.DataSource = dtblEBT;
                    rep_InvEBT.DecimalPlace = Settings.DecimalPlace;

                    rep_InvEBT.rEBTCard.DataBindings.Add("Text", dtblEBT, "CardNo");
                    rep_InvEBT.rEBTBal.DataBindings.Add("Text", dtblEBT, "CardBalance");
                }



                int prmmgc = 0;
                PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                obcc01mgc.Connection = SystemVariables.Conn;
                prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intINV);
                DataTable ccdtbl11mgc = new DataTable();
                PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                obcc11mgc.Connection = SystemVariables.Conn;
                ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                if (ccdtbl11mgc.Rows.Count > 0)
                {
                    rep_InvMain.subrepMGC.ReportSource = rep_InvMGC;
                    rep_InvMGC.Report.DataSource = ccdtbl11mgc;
                    rep_InvMGC.DecimalPlace = Settings.DecimalPlace;
                    rep_InvMGC.rGCName.DataBindings.Add("Text", ccdtbl11mgc, "RefCardAct");
                    rep_InvMGC.rGCAmt.DataBindings.Add("Text", ccdtbl11mgc, "RefCardBalance");
                }

                if (Settings.POSPrintInvoice == 0)
                {
                    //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
                    try
                    {
                        if (Settings.ReportPrinterName != "") rep_InvMain.PrinterName = Settings.ReportPrinterName;
                        rep_InvMain.CreateDocument();
                        rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                        rep_InvMain.PrintingSystem.ShowPrintStatusDialog = false;

                        //rep_InvMain.ShowPreviewDialog();

                        DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                        window.PreviewControl.DocumentSource = rep_InvMain;
                        window.ShowDialog();

                    }
                    finally
                    {
                        rep_InvMain.Dispose();
                        rep_InvHeader1.Dispose();
                        rep_InvHeader2.Dispose();
                        rep_InvLine.Dispose();
                        rep_InvSubtotal.Dispose();
                        rep_InvTax.Dispose();
                        rep_InvTendering.Dispose();
                        rep_InvGC.Dispose();
                        rep_InvSign.Dispose();
                        rep_InvCoupon.Dispose();

                        dtbl.Dispose();
                        dtbl1.Dispose();
                        dtbl2.Dispose();
                        dtbl3.Dispose();
                        dtbl4.Dispose();
                        dtbl5.Dispose();
                        ccdtbl11mgc.Dispose();
                    }
                }

                if (Settings.POSPrintInvoice == 1)
                {
                    try
                    {
                        rep_InvMain.CreateDocument();
                        rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                        rep_InvMain.PrinterName = Settings.ReceiptPrinterName;
                        GeneralFunctions.PrintReport(rep_InvMain);
                    }
                    catch
                    {
                    }
                    finally
                    {
                        rep_InvMain.Dispose();
                        rep_InvHeader1.Dispose();
                        rep_InvHeader2.Dispose();
                        rep_InvLine.Dispose();
                        rep_InvSubtotal.Dispose();
                        rep_InvTax.Dispose();
                        rep_InvTendering.Dispose();
                        rep_InvGC.Dispose();
                        rep_InvCoupon.Dispose();
                        rep_InvSign.Dispose();
                        dtbl.Dispose();
                        dtbl1.Dispose();
                        dtbl2.Dispose();
                        dtbl3.Dispose();
                        dtbl4.Dispose();
                        dtbl5.Dispose();
                    }
                }




                if (strservice == "Repair")
                {
                    DataTable ddtbl = new DataTable();
                    PosDataObject.POS dobjPOS1 = new PosDataObject.POS();
                    dobjPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    ddtbl = dobjPOS1.FetchInvoiceHeader(intINV, Settings.StoreCode);

                    dlogo = new DataTable();
                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dlogo = objPOS1.FetchStoreLogo();
                    boolnulllogo = false;
                    foreach (DataRow drl1 in ddtbl.Rows)
                    {
                        foreach (DataRow drl2 in dlogo.Rows)
                        {
                            if (drl2["logo"] == null) boolnulllogo = true;
                            drl1["Logo"] = drl2["logo"];
                        }
                    }

                    intTranNo = 0;
                    dblOrderTotal = 0;
                    dblOrderSubtotal = 0;
                    dblDiscount = 0;
                    dblCoupon = 0;
                    dblTax = 0;
                    dblSurcharge = 0;
                    intCID = 0;
                    strDiscountReason = "";
                    dblTax1 = 0;
                    dblTax2 = 0;
                    dblTax3 = 0;
                    strTaxNM1 = "";
                    strTaxNM2 = "";
                    strTaxNM3 = "";

                    strservice = "";
                    intHeaderStatus = 0;
                    dblRentDeposit = 0;
                    dblRentReturnDeposit = 0;
                    dblRepairAmount = 0;
                    dblRepairAdvanceAmount = 0;
                    strRepairDeliveryDate = "";
                    calcrent = "N";

                    strDTaxNM = "";
                    dblDTax = 0;


                    foreach (DataRow dr in ddtbl.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intCID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                        dblOrderTotal = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        strTaxNM1 = dr["TaxNM1"].ToString();
                        strTaxNM2 = dr["TaxNM2"].ToString();
                        strTaxNM3 = dr["TaxNM3"].ToString();
                        strDiscountReason = dr["DiscountReason"].ToString();
                        //dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        //dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        strservice = dr["ServiceType"].ToString();
                        intHeaderStatus = GeneralFunctions.fnInt32(dr["Status"].ToString());
                        dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        dblRepairAmount = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        dblRepairAdvanceAmount = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        if (dr["RepairDeliveryDate"].ToString() != "") strRepairDeliveryDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToShortDateString();
                        calcrent = dr["IsRentCalculated"].ToString();

                        strDTaxNM = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());
                    }

                    if (intHeaderStatus == 17) dblOrderTotal = dblRepairAmount;

                    DataTable ddtbl1 = new DataTable();
                    DataTable ddtbl2 = new DataTable();
                    DataTable ddtbl3 = new DataTable();
                    DataTable ddtbl4 = new DataTable();
                    DataTable ddtbl5 = new DataTable();

                    OfflineRetailV2.Report.Sales.repInvMain drep_InvMain = new OfflineRetailV2.Report.Sales.repInvMain();
                    OfflineRetailV2.Report.Sales.repInvHeader1 drep_InvHeader1 = new OfflineRetailV2.Report.Sales.repInvHeader1();
                    OfflineRetailV2.Report.Sales.repInvHeader2 drep_InvHeader2 = new OfflineRetailV2.Report.Sales.repInvHeader2();
                    OfflineRetailV2.Report.Sales.repInvLine drep_InvLine = new OfflineRetailV2.Report.Sales.repInvLine();
                    OfflineRetailV2.Report.Sales.repInvSubtotal drep_InvSubtotal = new OfflineRetailV2.Report.Sales.repInvSubtotal();
                    OfflineRetailV2.Report.Sales.repInvTax drep_InvTax = new OfflineRetailV2.Report.Sales.repInvTax();
                    OfflineRetailV2.Report.Sales.repPPInvTendering drep_InvTendering = new OfflineRetailV2.Report.Sales.repPPInvTendering();
                    OfflineRetailV2.Report.Sales.repInvGC drep_InvGC = new OfflineRetailV2.Report.Sales.repInvGC();
                    OfflineRetailV2.Report.Sales.repInvMGC drep_InvMGC = new OfflineRetailV2.Report.Sales.repInvMGC();
                    OfflineRetailV2.Report.Sales.repInvCC drep_InvCC = new OfflineRetailV2.Report.Sales.repInvCC();
                    OfflineRetailV2.Report.Sales.repInvCoupon drep_InvCoupon = new OfflineRetailV2.Report.Sales.repInvCoupon();
                    OfflineRetailV2.Report.Sales.repInvSign drep_InvSign = new OfflineRetailV2.Report.Sales.repInvSign();
                    OfflineRetailV2.Report.Sales.repInvRentLine drep_InvRentLine = new OfflineRetailV2.Report.Sales.repInvRentLine();
                    OfflineRetailV2.Report.Sales.repInvRentSubTotal drep_InvRentSubTotal = new OfflineRetailV2.Report.Sales.repInvRentSubTotal();
                    OfflineRetailV2.Report.Sales.repInvRentReturnLine drep_InvRentReturnLine = new OfflineRetailV2.Report.Sales.repInvRentReturnLine();
                    OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal drep_InvRentReturnSubTotal = new OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal();

                    int prm = 0;
                    PosDataObject.POS obcc01 = new PosDataObject.POS();
                    obcc01.Connection = SystemVariables.Conn;
                    prm = obcc01.GetTranIDFromInvoiceID(intINV);
                    DataTable ccdtbl11 = new DataTable();
                    PosDataObject.POS obcc11 = new PosDataObject.POS();
                    obcc11.Connection = SystemVariables.Conn;
                    ccdtbl11 = obcc11.FetchCardData(prm);
                    foreach (DataRow ds1 in ccdtbl11.Rows)
                    {
                        if ((ds1["CardType"].ToString() == "Credit") || (ds1["CardType"].ToString() == "Credit Card")) CardType = "Credit";
                        if ((ds1["CardType"].ToString() == "Debit") || (ds1["CardType"].ToString() == "Debit Card")) CardType = "Debit";
                        if (ds1["CardType"].ToString() == "Mercury Gift Card") CardType = "Mercury";
                        if (ds1["CardType"].ToString() == "Precidia Gift Card") CardType = "Precidia";
                        if (ds1["CardType"].ToString() == "Datacap Gift Card") CardType = "Datacap";
                        if (ds1["CardType"].ToString() == "POSLink Gift Card") CardType = "POSLink";
                        if (ds1["CardType"].ToString() == "EBT") CardType = "EBT";

                        break;
                    }



                    drep_InvMain.rReprint.Text = "";
                    if (Settings.ReceiptFooter == "")
                    {
                        drep_InvMain.rReportFooter.HeightF = 1.0f;
                        drep_InvMain.rReportFooter.LocationF = new System.Drawing.PointF(8, 2);
                        drep_InvMain.xrBarCode.LocationF = new System.Drawing.PointF(8, 5);
                        drep_InvMain.rCopy.LocationF = new System.Drawing.PointF(567, 5);

                        drep_InvMain.xrShape1.LocationF = new System.Drawing.PointF(581, 25);
                        drep_InvMain.xrPageInfo2.LocationF = new System.Drawing.PointF(594, 25);
                        drep_InvMain.xrPageInfo1.LocationF = new System.Drawing.PointF(681, 25);
                        drep_InvMain.xrShape2.LocationF = new System.Drawing.PointF(725, 25);

                        drep_InvMain.ReportFooter.Height = 60;
                        drep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                    }
                    else
                    {
                        drep_InvMain.ReportFooter.Height = 91;
                        drep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                    }

                    drep_InvMain.subrepH1.ReportSource = drep_InvHeader1;
                    drep_InvHeader1.Report.DataSource = ddtbl;
                    drep_InvHeader1.rReprint.Text = "";
                    GeneralFunctions.MakeReportWatermark(drep_InvMain);
                    drep_InvHeader1.rReportHeaderCompany.Text = Settings.ReceiptHeader_Company;
                    drep_InvHeader1.rReportHeader.Text = Settings.ReceiptHeader_Address;

                    drep_InvHeader1.rType.Text = "";

                    if (strservice == "Rent")
                    {
                        if (intHeaderStatus == 15) drep_InvHeader1.rType.Text = Properties.Resources.Rent_Issued;
                        if (intHeaderStatus == 16) drep_InvHeader1.rType.Text = Properties.Resources.Rent_Item_Returned;
                    }

                    if (strservice == "Repair")
                    {
                        if (intHeaderStatus == 17)
                        {
                            if (strRepairDeliveryDate != "") drep_InvHeader1.rType.Text = Properties.Resources.Repair_In + "      " + Properties.Resources.Expected_Delivety_Date__ + " " + strRepairDeliveryDate;
                            else drep_InvHeader1.rType.Text = Properties.Resources.Repair_In;
                        }
                        if (intHeaderStatus == 18)
                        {
                            drep_InvHeader1.rType.Text = Properties.Resources.Repair_Delivered;
                        }
                    }
                    drep_InvHeader1.rOrderNo.Text = intINV.ToString();
                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        if (!boolnulllogo) drep_InvHeader1.rPic.DataBindings.Add("Image", ddtbl, "Logo");
                    }
                    drep_InvHeader1.rOrderDate.DataBindings.Add("Text", ddtbl, "TransDate");

                    drep_InvMain.xrBarCode.Text = intINV.ToString();

                    if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                    {
                        drep_InvHeader1.rOrderDate.DataBindings.Add("Text", ddtbl, "RepairDateIn");
                    }
                    if (intCID > 0)
                    {
                        drep_InvMain.subrepH2.ReportSource = drep_InvHeader2;
                        drep_InvHeader2.Report.DataSource = ddtbl;
                        drep_InvHeader2.rCustID.DataBindings.Add("Text", ddtbl, "CustID");
                        drep_InvHeader2.rCustName.DataBindings.Add("Text", ddtbl, "CustName");
                        drep_InvHeader2.rCompany.DataBindings.Add("Text", ddtbl, "CustCompany");

                        if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                        {
                            drep_InvHeader2.rlCustID.Text = Properties.Resources.Ph_;
                            drep_InvHeader2.rCustID.DataBindings.Add("Text", dtbl, "CustMobile");

                            drep_InvHeader2.rlCompany.DataBindings.Add("Text", dtbl, "RepairItemName");
                            drep_InvHeader2.rCompany.DataBindings.Add("Text", dtbl, "RepairItemSlNo");
                        }
                    }
                    else
                    {
                        drep_InvMain.subrepH2.ReportSource = drep_InvHeader2;
                        drep_InvHeader2.Report.DataSource = ddtbl;
                        drep_InvHeader2.rlCustName.Text = "";
                        drep_InvHeader2.rCustName.Text = "";
                        drep_InvHeader2.rCustID.Text = "";
                        drep_InvHeader2.rCompany.Text = "";
                        drep_InvHeader2.rlCustID.Text = "";
                        drep_InvHeader2.rlCompany.Text = "";
                    }

                    PosDataObject.POS dobjPOS2 = new PosDataObject.POS();
                    dobjPOS2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    ddtbl1 = dobjPOS2.FetchInvoiceDetails1(intINV, dblOrderTotal < 0 ? true : false, Settings.TaxInclusive);

                    if ((intHeaderStatus == 16) && (calcrent == "Y"))
                    {
                        foreach (DataRow dd in ddtbl1.Rows)
                        {
                            dd["Qty"] = -GeneralFunctions.fnDouble(dd["Qty"].ToString());
                            dd["TotalPrice"] = -GeneralFunctions.fnDouble(dd["TotalPrice"].ToString());
                        }
                    }

                    if (strservice == "Rent")
                    {
                        if (intHeaderStatus == 15) // issue
                        {
                            drep_InvMain.subrepLine.ReportSource = drep_InvRentLine;
                            drep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                            drep_InvRentLine.Report.DataSource = dtbl1;
                            drep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                            drep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                            drep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                            drep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                            drep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                            drep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                            drep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                            drep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                            if (Settings.ShowFeesInReceipt == "Y")
                            {
                                drep_InvRentLine.rFeesTxt.Visible = true;
                                drep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                            }
                            else
                            {
                                drep_InvRentLine.rFeesTxt.Visible = false;
                            }
                        }
                        if (intHeaderStatus == 16) // return
                        {
                            if (calcrent == "N")
                            {
                                drep_InvMain.subrepLine.ReportSource = drep_InvRentReturnLine;
                                drep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                                drep_InvRentReturnLine.Report.DataSource = dtbl1;
                                drep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                drep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                drep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                drep_InvRentReturnLine.rlAmt.Visible = false;
                                drep_InvRentReturnLine.xrTableCell2.Visible = false;
                            }
                            if (calcrent == "Y")
                            {
                                drep_InvMain.subrepLine.ReportSource = drep_InvRentLine;
                                drep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                drep_InvRentLine.Report.DataSource = dtbl1;
                                drep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                drep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                drep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                drep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                drep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                drep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                drep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                drep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    drep_InvRentLine.rFeesTxt.Visible = true;
                                    drep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                }
                                else
                                {
                                    drep_InvRentLine.rFeesTxt.Visible = false;
                                }
                            }
                        }
                    }
                    else if (strservice == "Repair")
                    {
                        string MFooter = "";
                        if ((Settings.ReceiptFooter == "") && (Settings.ReceiptLayawayPolicy == ""))
                        {
                            drep_InvMain.ReportFooter.Height = 35;
                            drep_InvMain.rReportFooter.Text = "";
                        }
                        else
                        {
                            if (Settings.ReceiptFooter != "") MFooter = Properties.Resources.CUSTOMER_AGREEMENT_ + Settings.ReceiptFooter;
                            if (Settings.ReceiptLayawayPolicy != "")
                            {
                                if (Settings.ReceiptFooter == "") MFooter = Properties.Resources.REPAIR_DISCLAIMER_ + Settings.ReceiptLayawayPolicy;
                                else MFooter = MFooter + " \n " + Properties.Resources.REPAIR_DISCLAIMER_ + Settings.ReceiptLayawayPolicy;
                            }
                            drep_InvMain.ReportFooter.Height = 130;
                            drep_InvMain.rReportFooter.Text = MFooter;

                        }


                        if (intHeaderStatus == 17) // issue
                        {
                            drep_InvMain.subrepLine.ReportSource = drep_InvRentLine;
                            drep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                            drep_InvRentLine.Report.DataSource = dtbl1;
                            drep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                            drep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                            drep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                            drep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                            drep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                            drep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                            drep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                            drep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                            if (Settings.ShowFeesInReceipt == "Y")
                            {
                                drep_InvRentLine.rFeesTxt.Visible = true;
                                drep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                            }
                            else
                            {
                                drep_InvRentLine.rFeesTxt.Visible = false;
                            }
                        }
                        if (intHeaderStatus == 18) // return
                        {
                            drep_InvMain.subrepLine.ReportSource = drep_InvRentReturnLine;
                            drep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                            drep_InvRentReturnLine.Report.DataSource = dtbl1;
                            drep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                            drep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                            drep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                            drep_InvRentReturnLine.rlAmt.DataBindings.Add("Text", dtbl1, "TotalPrice");
                        }
                    }
                    else
                    {
                        drep_InvMain.subrepLine.ReportSource = drep_InvLine;
                        drep_InvLine.DecimalPlace = Settings.DecimalPlace;
                        drep_InvLine.Report.DataSource = dtbl1;
                        drep_InvLine.rlSKU.DataBindings.Add("Text", ddtbl1, "Qty");
                        drep_InvLine.rlIem.DataBindings.Add("Text", ddtbl1, "SKU");
                        drep_InvLine.rlqty.DataBindings.Add("Text", ddtbl1, "Description");
                        drep_InvLine.rDiscTxt.DataBindings.Add("Text", ddtbl1, "DiscountText");
                        drep_InvLine.rlPrice.DataBindings.Add("Text", ddtbl1, "NormalPrice");
                        drep_InvLine.rlDiscount.DataBindings.Add("Text", ddtbl1, "Discount");
                        drep_InvLine.rlSurcharge.DataBindings.Add("Text", ddtbl1, "Price");
                        drep_InvLine.rlTotal.DataBindings.Add("Text", ddtbl1, "TotalPrice");

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            drep_InvLine.rFeesTxt.Visible = true;
                            drep_InvLine.rFeesTxt.DataBindings.Add("Text", ddtbl1, "FeesText");
                        }
                        else
                        {
                            drep_InvLine.rFeesTxt.Visible = false;
                        }
                    }

                    foreach (DataRow dr12 in ddtbl1.Rows)
                    {
                        dblOrderSubtotal = dblOrderSubtotal + GeneralFunctions.fnDouble(dr12["TotalPrice"].ToString()) + GeneralFunctions.fnDouble(dr12["Discount"].ToString());
                    }

                    //dblOrderSubtotal = Settings.TaxInclusive == "N" ? dblOrderSubtotal : dblOrderSubtotal - dblTax;

                    if (strservice == "Rent")
                    {
                        if (intHeaderStatus == 15) // issue
                        {
                            drep_InvMain.subrepSubtotal.ReportSource = drep_InvRentSubTotal;
                            drep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                            drep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                            drep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                            drep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                            drep_InvRentSubTotal.DR = strDiscountReason;
                            drep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                        }

                        if (intHeaderStatus == 16) // return
                        {
                            if (calcrent == "N")
                            {
                                if (dblOrderTotal != 0)
                                {
                                    drep_InvMain.subrepSubtotal.ReportSource = drep_InvRentReturnSubTotal;
                                    drep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                    drep_InvRentReturnSubTotal.rReturnDeposit.Text = dblOrderTotal.ToString();
                                }
                            }
                            if (calcrent == "Y")
                            {
                                drep_InvMain.subrepSubtotal.ReportSource = drep_InvRentReturnSubTotal;
                                drep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                drep_InvRentReturnSubTotal.rReturnDeposit.Text = (-dblRentDeposit).ToString();
                            }
                        }
                    }
                    else if (strservice == "Repair")
                    {
                        if (intHeaderStatus == 17) // issue
                        {
                            drep_InvMain.subrepSubtotal.ReportSource = drep_InvRentSubTotal;
                            drep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                            drep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                            drep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                            drep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                            drep_InvRentSubTotal.DR = strDiscountReason;
                            drep_InvRentSubTotal.rw1.Visible = false;
                            drep_InvRentSubTotal.rw2.Visible = false;
                            drep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                        }
                    }
                    else
                    {
                        drep_InvMain.subrepSubtotal.ReportSource = drep_InvSubtotal;
                        drep_InvSubtotal.DecimalPlace = Settings.DecimalPlace;
                        drep_InvSubtotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                        drep_InvSubtotal.rDiscount.Text = dblDiscount.ToString();
                        drep_InvSubtotal.DR = strDiscountReason;
                        drep_InvSubtotal.rTax.Text = dblTax.ToString();
                    }

                    if (dblTax != 0)
                    {
                        ddtbl2.Columns.Add("Name", System.Type.GetType("System.String"));
                        ddtbl2.Columns.Add("Amount", System.Type.GetType("System.String"));

                        if (dblTax1 != 0)
                        {
                            ddtbl2.Rows.Add(new object[] { strTaxNM1, dblTax1.ToString() });
                        }

                        if (dblTax2 != 0)
                        {
                            ddtbl2.Rows.Add(new object[] { strTaxNM2, dblTax2.ToString() });
                        }

                        if (dblTax3 != 0)
                        {
                            ddtbl2.Rows.Add(new object[] { strTaxNM3, dblTax3.ToString() });
                        }

                        if (dblDTax != 0)
                        {
                            ddtbl2.Rows.Add(new object[] { "Dest. Tax: " + strDTaxNM, dblDTax.ToString() });
                        }

                        drep_InvMain.subrepTax.ReportSource = drep_InvTax;
                        drep_InvTax.DecimalPlace = Settings.DecimalPlace;

                        drep_InvTax.Report.DataSource = ddtbl2;
                        drep_InvTax.rDTax1.DataBindings.Add("Text", ddtbl2, "Name");
                        drep_InvTax.rDTax2.DataBindings.Add("Text", ddtbl2, "Amount");
                    }

                    PosDataObject.POS dobjPOS23 = new PosDataObject.POS();
                    dobjPOS23.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    ddtbl5 = dobjPOS23.FetchInvoiceCoupons(intINV);

                    if (ddtbl5.Rows.Count > 0)
                    {
                        drep_InvMain.subrepCoupon.ReportSource = drep_InvCoupon;
                        drep_InvCoupon.DecimalPlace = Settings.DecimalPlace;
                        drep_InvCoupon.Report.DataSource = dtbl5;
                        drep_InvCoupon.rAmt.Text = dblCoupon.ToString();
                        drep_InvCoupon.rDTax1.DataBindings.Add("Text", ddtbl5, "Name");
                        drep_InvCoupon.rDTax2.DataBindings.Add("Text", ddtbl5, "Amount");
                    }

                    PosDataObject.POS dobjPOS4 = new PosDataObject.POS();
                    dobjPOS4.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    ddtbl3 = dobjPOS4.FetchInvoiceTender(intTranNo);
                    ddtbl3 = RearrangeTenderForCashBack(intTranNo, ddtbl3);
                    dblTenderAmt = 0;
                    foreach (DataRow dr1 in ddtbl3.Rows)
                    {
                        if (dr1["DisplayAs"].ToString() == "Debit Card Total") continue;
                        dblTenderAmt = dblTenderAmt + GeneralFunctions.fnDouble(dr1["Amount"].ToString());
                    }
                    TenderCount = 0;
                    TenderCount = ddtbl3.Rows.Count;
                    drep_InvMain.subrepTender.ReportSource = drep_InvTendering;
                    drep_InvTendering.Report.DataSource = ddtbl3;
                    drep_InvTendering.DecimalPlace = Settings.DecimalPlace;

                    if (TenderCount == 0) drep_InvTendering.lbTenderText.Text = "";

                    if ((intHeaderStatus == 15) && (calcrent == "Y")) drep_InvTendering.rTotal.Text = dblRentDeposit.ToString();
                    else if ((intHeaderStatus == 15) && (calcrent == "N")) drep_InvTendering.rTotal.Text = (dblOrderTotal + dblRentDeposit).ToString();
                    else drep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                    //drep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                    drep_InvTendering.rTenderName.DataBindings.Add("Text", ddtbl3, "DisplayAs");
                    drep_InvTendering.rTenderAmt.DataBindings.Add("Text", ddtbl3, "Amount");

                    if (strservice == "Repair")
                    {
                        if (intHeaderStatus == 17)
                        {
                            drep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                            drep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                            drep_InvTendering.rlbDue.Text = Properties.Resources.BalanceDue;
                            drep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                        }
                        if (intHeaderStatus == 18)
                        {
                            drep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                            drep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                            drep_InvTendering.rlbDue.Text = Properties.Resources.BalanceDue;
                            drep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                        }
                    }
                    else
                    {
                        drep_InvTendering.rlbAdvance.Text = "";
                        drep_InvTendering.rAdvance.Text = "";
                        drep_InvTendering.rlbDue.Text = "";
                        drep_InvTendering.rDue.Text = "";

                        rep_InvTendering.rtr1.HeightF = 1.0f;
                        rep_InvTendering.rtr2.HeightF = 1.0f;
                        rep_InvTendering.rtbl.HeightF = 55.0f;
                        rep_InvTendering.PageHeader.HeightF = 55.0f;
                    }

                    EffectiveTotal = 0;
                    if ((intHeaderStatus == 15) && (calcrent == "Y")) EffectiveTotal = dblRentDeposit;
                    else if ((intHeaderStatus == 15) && (calcrent == "N")) EffectiveTotal = dblOrderTotal + dblRentDeposit;
                    else if (intHeaderStatus == 17) EffectiveTotal = dblRepairAdvanceAmount;
                    else if (intHeaderStatus == 18) EffectiveTotal = dblRepairAmount - dblRepairAdvanceAmount;
                    else EffectiveTotal = dblOrderTotal;

                    if (dblTenderAmt != EffectiveTotal)
                    {
                        drep_InvTendering.ChangeDue = true;
                        drep_InvTendering.ReportFooter.Visible = true;
                        drep_InvTendering.rChangeDueText.Text = Properties.Resources.Change;
                        drep_InvTendering.rChangeDue.Text = Convert.ToString(dblTenderAmt - EffectiveTotal);
                    }
                    else
                    {
                        drep_InvTendering.ChangeDue = false;
                        drep_InvTendering.ReportFooter.Visible = false;
                    }

                    if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                    {
                        //drep_InvTendering.ChangeDue = false;
                        //drep_InvTendering.ReportFooter.Visible = false;
                    }

                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        PosDataObject.POS dobjPOS5 = new PosDataObject.POS();
                        dobjPOS5.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dtbl4 = dobjPOS5.ActiveGiftCert(intINV, Settings.CentralExportImport, Settings.StoreCode);
                        if (dtbl4.Rows.Count > 0)
                        {
                            drep_InvMain.subrepGC.ReportSource = drep_InvGC;
                            drep_InvGC.Report.DataSource = ddtbl4;
                            drep_InvGC.DecimalPlace = Settings.DecimalPlace;
                            drep_InvGC.rGCHeader.Text = Properties.Resources.Gift_Cert__with_balance_as_on__ + " " + DateTime.Today.Date.ToShortDateString();
                            drep_InvGC.rGCName.DataBindings.Add("Text", ddtbl4, "GC");
                            drep_InvGC.rGCAmt.DataBindings.Add("Text", ddtbl4, "GCAMT");
                        }
                    }



                    // EBT Balance on Receipt

                    PosDataObject.POS objPOS88 = new PosDataObject.POS();
                    objPOS88.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    DataTable ddtblEBT = objPOS88.FetchEBTBalanceFromReceipt(intINV);
                    if (ddtblEBT.Rows.Count > 0)
                    {
                        OfflineRetailV2.Report.Sales.repInvEBT drep_InvEBT = new OfflineRetailV2.Report.Sales.repInvEBT();
                        drep_InvMain.subrepEBT.ReportSource = drep_InvEBT;
                        drep_InvEBT.Report.DataSource = ddtblEBT;
                        drep_InvEBT.DecimalPlace = Settings.DecimalPlace;

                        drep_InvEBT.rEBTCard.DataBindings.Add("Text", ddtblEBT, "CardNo");
                        drep_InvEBT.rEBTBal.DataBindings.Add("Text", ddtblEBT, "CardBalance");
                    }


                    prmmgc = 0;
                    PosDataObject.POS obcc01mgc1 = new PosDataObject.POS();
                    obcc01mgc1.Connection = SystemVariables.Conn;
                    prmmgc = obcc01mgc1.GetTranIDFromInvoiceID(intINV);
                    DataTable ccdtbl11mgc1 = new DataTable();
                    PosDataObject.POS obcc11mgc1 = new PosDataObject.POS();
                    obcc11mgc1.Connection = SystemVariables.Conn;
                    ccdtbl11mgc1 = obcc11mgc1.FetchMercuryGiftCardData(prmmgc);

                    if (ccdtbl11mgc1.Rows.Count > 0)
                    {
                        drep_InvMain.subrepMGC.ReportSource = drep_InvMGC;
                        drep_InvMGC.Report.DataSource = ccdtbl11mgc1;
                        drep_InvMGC.DecimalPlace = Settings.DecimalPlace;
                        drep_InvMGC.rGCName.DataBindings.Add("Text", ccdtbl11mgc1, "RefCardAct");
                        drep_InvMGC.rGCAmt.DataBindings.Add("Text", ccdtbl11mgc1, "RefCardBalance");
                    }


                    if (Settings.POSPrintInvoice == 0)
                    {
                        //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
                        try
                        {
                            if (Settings.ReportPrinterName != "") drep_InvMain.PrinterName = Settings.ReportPrinterName;
                            drep_InvMain.CreateDocument();
                            drep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                            drep_InvMain.PrintingSystem.ShowPrintStatusDialog = false;

                            //drep_InvMain.ShowPreviewDialog();

                            DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                            window.PreviewControl.DocumentSource = drep_InvMain;
                            window.ShowDialog();

                        }
                        finally
                        {
                            drep_InvHeader1.Dispose();
                            drep_InvHeader2.Dispose();
                            drep_InvLine.Dispose();
                            drep_InvSubtotal.Dispose();
                            drep_InvTax.Dispose();
                            drep_InvTendering.Dispose();
                            drep_InvGC.Dispose();
                            drep_InvCoupon.Dispose();
                            drep_InvMain.Dispose();

                            ddtbl.Dispose();
                            ddtbl1.Dispose();
                            ddtbl2.Dispose();
                            ddtbl3.Dispose();
                            ddtbl4.Dispose();
                            ddtbl5.Dispose();
                            ccdtbl11mgc1.Dispose();
                        }
                    }

                    if (Settings.POSPrintInvoice == 1)
                    {
                        try
                        {
                            drep_InvMain.CreateDocument();
                            drep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                            drep_InvMain.PrinterName = Settings.ReceiptPrinterName;
                            GeneralFunctions.PrintReport(drep_InvMain);
                        }
                        catch
                        {
                        }
                        finally
                        {
                            drep_InvMain.Dispose();
                            drep_InvHeader1.Dispose();
                            drep_InvHeader2.Dispose();
                            drep_InvLine.Dispose();
                            drep_InvSubtotal.Dispose();
                            drep_InvTax.Dispose();
                            drep_InvTendering.Dispose();
                            drep_InvGC.Dispose();
                            drep_InvCoupon.Dispose();
                            ddtbl.Dispose();
                            ddtbl1.Dispose();
                            ddtbl2.Dispose();
                            ddtbl3.Dispose();
                            ddtbl4.Dispose();
                            ddtbl5.Dispose();
                        }
                    }
                }



            }
        }

        private DataTable RearrangeTenderForCashBack(int pTranNo, DataTable dtbl)
        {
            DataTable refData = dtbl.Clone();

            foreach (DataRow dr in dtbl.Rows)
            {
                refData.Rows.Add(new object[] { dr["Name"].ToString(), dr["Amount"].ToString(), dr["Name"].ToString() });
                if (dr["Name"].ToString() == "Debit Card")
                {
                    double cashbk = 0;
                    cashbk = FetchCashBack(pTranNo, GeneralFunctions.fnDouble(dr["Amount"].ToString()));
                    if (cashbk != 0)
                    {
                        refData.Rows.Add(new object[] { "Cash Back", cashbk.ToString(), "Cash Back" });
                        refData.Rows.Add(new object[] { "Debit Card Total", (GeneralFunctions.fnDouble(dr["Amount"].ToString()) + cashbk).ToString(), "Debit Card Total" });
                    }
                }
            }

            return refData;
        }

        private double FetchCashBack(int TrnNo, double Amt)
        {
            PosDataObject.POS objpos3 = new PosDataObject.POS();
            objpos3.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos3.GetCashBackAmountFromCardTransaction1(TrnNo, Amt);
        }
        private void FetchItemAdditionData(int pID, ref string pSKU, ref string pDept, ref string pCat)
        {
            DataTable dtblProduct = new DataTable();
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblProduct = objProduct.ShowRecord(pID);
            foreach (DataRow dr in dtblProduct.Rows)
            {
                pSKU = dr["SKU"].ToString();
                pDept = dr["DepartmentID"].ToString();
                pCat = dr["CategoryID"].ToString();
            }
            dtblProduct.Dispose();
        }
        private void FetchItemAdditionData(int pID, ref string pSKU, ref string pDept, ref string pCat,
                                       ref string pPriceA, ref string pPriceB, ref string pPriceC)
        {
            DataTable dtblProduct = new DataTable();
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblProduct = objProduct.ShowRecord(pID);
            foreach (DataRow dr in dtblProduct.Rows)
            {
                pSKU = dr["SKU"].ToString();
                pDept = dr["DepartmentID"].ToString();
                pCat = dr["CategoryID"].ToString();
                pPriceA = dr["PriceA"].ToString();
                pPriceB = dr["PriceB"].ToString();
                pPriceC = dr["PriceC"].ToString();
            }
            dtblProduct.Dispose();
        }

        //Rental Return function
        private DataTable FinalDataTableForRentReturn(DataTable dtblPOSDatatbl)
        {

            DataTable dtblFinal = new DataTable();
            dtblFinal.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ONHANDQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NORMALQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("COST", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("QTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("RATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DEPT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("CAT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMDESC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMID", System.Type.GetType("System.String"));
            // add for layaway Invoice
            dtblFinal.Columns.Add("TAX1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TOTALSALE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTREASON", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("LAYAWAYAMOUNT", System.Type.GetType("System.String"));

            // add for invoice notes
            dtblFinal.Columns.Add("NOTES", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMDISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("RENTTYPE", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("RENTDURATION", System.Type.GetType("System.Double"));//35
            dtblFinal.Columns.Add("RENTAMOUNT", System.Type.GetType("System.Double"));//36
            dtblFinal.Columns.Add("RENTDEPOSIT", System.Type.GetType("System.Double"));//37

            dtblFinal.Columns.Add("REPAIRITEMTAG", System.Type.GetType("System.String"));//38
            dtblFinal.Columns.Add("REPAIRITEMSLNO", System.Type.GetType("System.String"));//39
            dtblFinal.Columns.Add("REPAIRITEMPURCHASEDATE", System.Type.GetType("System.String"));//40

            dtblFinal.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//38
            dtblFinal.Columns.Add("TX1", System.Type.GetType("System.Double"));//39
            dtblFinal.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//40
            dtblFinal.Columns.Add("TX2", System.Type.GetType("System.Double"));//41
            dtblFinal.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//42
            dtblFinal.Columns.Add("TX3", System.Type.GetType("System.Double"));//43

            dtblFinal.Columns.Add("GRATE", System.Type.GetType("System.Double"));
            dtblFinal.Columns.Add("GPRICE", System.Type.GetType("System.Double"));


            // fetch TaxID, TaxName first

            string strTaxID1 = "0";
            string strTaxID2 = "0";
            string strTaxID3 = "0";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";
            string strTaxRate1 = "0";
            string strTaxRate2 = "0";
            string strTaxRate3 = "0";
            int iTaxType1 = 0;
            int iTaxType2 = 0;
            int iTaxType3 = 0;
            double TaxVal1 = 0;
            double TaxVal2 = 0;
            double TaxVal3 = 0;
            int intCount = 0;
            DataTable dtblTaxHeader = new DataTable();
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTaxHeader = objTax.FetchActiveTax();
            foreach (DataRow dr in dtblTaxHeader.Rows)
            {
                intCount++;
                if (intCount == 1)
                {
                    strTaxID1 = dr["ID"].ToString();
                    strTaxName1 = dr["TaxName"].ToString();
                    strTaxRate1 = dr["TaxRate"].ToString();
                }
                if (intCount == 2)
                {
                    strTaxID2 = dr["ID"].ToString();
                    strTaxName2 = dr["TaxName"].ToString();
                    strTaxRate2 = dr["TaxRate"].ToString();
                }
                if (intCount == 3)
                {
                    strTaxID3 = dr["ID"].ToString();
                    strTaxName3 = dr["TaxName"].ToString();
                    strTaxRate3 = dr["TaxRate"].ToString();
                    break;
                }
            }
            dtblTaxHeader.Dispose();

            foreach (DataRow drR in dtblPOSDatatbl.Rows)
            {
                iTaxType1 = 0;
                iTaxType2 = 0;
                iTaxType3 = 0;
                TaxVal1 = 0;
                TaxVal2 = 0;
                TaxVal3 = 0;

                int tx1ty = 0;
                int tx2ty = 0;
                int tx3ty = 0;

                int tx1id = 0;
                int tx2id = 0;
                int tx3id = 0;

                double tx1 = 0;
                double tx2 = 0;
                double tx3 = 0;

                double dGRate = 0;
                double dGPrice = 0;

                dGRate = GeneralFunctions.fnDouble(drR["GRATE"].ToString());
                dGPrice = GeneralFunctions.fnDouble(drR["GPRICE"].ToString());


                tx1ty = GeneralFunctions.fnInt32(drR["TX1TYPE"].ToString());
                tx2ty = GeneralFunctions.fnInt32(drR["TX2TYPE"].ToString());
                tx3ty = GeneralFunctions.fnInt32(drR["TX3TYPE"].ToString());

                tx1id = GeneralFunctions.fnInt32(drR["TX1ID"].ToString());
                tx2id = GeneralFunctions.fnInt32(drR["TX2ID"].ToString());
                tx3id = GeneralFunctions.fnInt32(drR["TX3ID"].ToString());

                tx1 = GeneralFunctions.fnDouble(drR["TX1"].ToString());
                tx2 = GeneralFunctions.fnDouble(drR["TX2"].ToString());
                tx3 = GeneralFunctions.fnDouble(drR["TX3"].ToString());

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx1id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx1id > 0))
                {
                    iTaxType1 = tx1ty;
                    TaxVal1 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx2id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx2id > 0))
                {
                    iTaxType1 = tx2ty;
                    TaxVal1 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx3id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx3id > 0))
                {
                    iTaxType1 = tx3ty;
                    TaxVal1 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx1id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx1id > 0))
                {
                    iTaxType2 = tx1ty;
                    TaxVal2 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx2id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx2id > 0))
                {
                    iTaxType2 = tx2ty;
                    TaxVal2 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx3id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx3id > 0))
                {
                    iTaxType2 = tx3ty;
                    TaxVal2 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx1id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx1id > 0))
                {
                    iTaxType3 = tx1ty;
                    TaxVal3 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx2id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx2id > 0))
                {
                    iTaxType3 = tx2ty;
                    TaxVal3 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx3id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx3id > 0))
                {
                    iTaxType3 = tx3ty;
                    TaxVal3 = tx3;
                }

                DataTable dtblR = new DataTable();
                PosDataObject.POS objR = new PosDataObject.POS();
                objR.Connection = new SqlConnection(SystemVariables.ConnectionString);
                int d = GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString());
                dtblR = objR.FetchItemDetails(GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString()));
                foreach (DataRow drR1 in dtblR.Rows)
                {
                    dtblFinal.Rows.Add(new object[] {
                                        drR1["ProductID"].ToString(),
                                        drR1["Description"].ToString(),
                                        drR1["ProductType"].ToString(),
                                        "0",
                                        "0",
                                        drR1["Cost"].ToString(),
                                        drR["Qty"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["NormalPrice"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["TaxID1"].ToString(),
                                        drR1["TaxID2"].ToString(),
                                        drR1["TaxID3"].ToString(),
                                        drR1["Taxable1"].ToString(),
                                        drR1["Taxable2"].ToString(),
                                        drR1["Taxable3"].ToString(),
                                        drR1["TaxRate1"].ToString(),
                                        drR1["TaxRate2"].ToString(),
                                        drR1["TaxRate3"].ToString(),
                                        drR1["SKU"].ToString(),
                                        drR1["DepartmentID"].ToString(),
                                        drR1["CategoryID"].ToString(),
                                        drR1["UOMCount"].ToString(),
                                        drR1["UOMPrice"].ToString(),
                                        drR1["UOMDesc"].ToString(),
                                        drR1["MatrixOptionID"].ToString(),
                                        drR1["OptionValue1"].ToString(),
                                        drR1["OptionValue2"].ToString(),
                                        drR1["OptionValue3"].ToString(),
                                        drR["MATRIXOID"].ToString(),
                                        "0","0","0","0","0","0","","0",
                                        drR["NOTES"].ToString(),
                                        drR1["DiscLogic"].ToString(),
                                        drR1["DiscValue"].ToString(),
                                        drR1["Discount"].ToString(),
                                        drR1["DiscountID"].ToString(),
                                        drR1["DiscountText"].ToString(),"1",
                                        drR["RENTTYPE"].ToString(),
                                        drR["RENTDURATION"].ToString(),
                                        drR["RENTAMOUNT"].ToString(),
                                        drR["RENTDEPOSIT"].ToString(),
                                        drR["REPAIRITEMTAG"].ToString(),
                                        drR["REPAIRITEMSLNO"].ToString(),
                                        drR["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        drR["GRATE"].ToString(),
                                        drR["GPRICE"].ToString()});
                }
                dtblR.Dispose();
            }

            intTaxID1 = GeneralFunctions.fnInt32(strTaxID1);
            intTaxID2 = GeneralFunctions.fnInt32(strTaxID2);
            intTaxID3 = GeneralFunctions.fnInt32(strTaxID3);

            if (strTaxExempt == "N")
            {
                GetTax();
                DataTable dtblTaxS = dtblTax;
                foreach (DataRow drTax in dtblTaxS.Rows)
                {
                    if (drTax["TAXID"].ToString() == strTaxID1) dblTax1 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                    if (drTax["TAXID"].ToString() == strTaxID2) dblTax2 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                    if (drTax["TAXID"].ToString() == strTaxID3) dblTax3 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                }
                dtblTaxS.Dispose();
                dtblTax.Dispose();
            }


            return dtblFinal;
        }
        private void ReturnRentItem()
        {
            int intINV = 0;
            string srterrmsg = "";
            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            objpos.EmployeeID = SystemVariables.CurrentUserID;
            objpos.CustomerID = intCustID;
            objpos.TransType = 16; // sales
            objpos.ReceiptCnt = 1;
            objpos.Status = 16;
            objpos.Tax = 0;
            double tempcoupon = 0;
            objpos.Coupon = tempcoupon;
            objpos.CouponPerc = 0;
            objpos.Discount = double.Parse(numDiscount.Text);
            objpos.DiscountReason = "";
            objpos.TotalSale = 0;
            objpos.ItemDataTable = FinalDataTableForRentReturn(dtblPOS);

            objpos.TaxID1 = 0;
            objpos.TaxID2 = 0;
            objpos.TaxID3 = 0;
            objpos.Tax1 = 0;
            objpos.Tax2 = 0;
            objpos.Tax3 = 0;
            objpos.ErrorMsg = "";
            objpos.ChangeAmount = 0;
            objpos.SuspendInvoiceNo = 0;

            objpos.ChangedByAdmin = intSuperUserID;
            objpos.FunctionButtonAccess = blFunctionBtnAccess;

            objpos.TenderDataTable = null;
            // static value
            objpos.StoreID = 1;
            objpos.RegisterID = 1;
            objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
            objpos.TransNoteNo = 0;
            objpos.LayawayNo = 0;
            objpos.TransMSeconds = 0;
            // static value
            objpos.TerminalName = Settings.TerminalName;
            objpos.Return = false;
            objpos.NewLayaway = false;
            objpos.Layaway = false;
            objpos.LayawayRefund = false;
            objpos.ApptDataTable = null;
            objpos.RentReturn = true;
            objpos.ServiceType = "Rent";
            objpos.RentalSecurityDeposit = 0;
            objpos.IssueRentInvNo = RentReturnInv;

            objpos.GCCentralFlag = Settings.CentralExportImport;
            objpos.GCOPStore = Settings.StoreCode;

            objpos.OperateStore = Settings.StoreCode;
            objpos.IsRentCalculated = RentCalcFlag;
            objpos.BeginTransaction();
            if (objpos.CreateInvoice())
            {
                intINV = objpos.ID;
            }
            objpos.EndTransaction();
            if (intINV > 0)
            {
                PrintInvoice(intINV, "Return Rent Item");
                InitializeScreen();
            }
        }

        private bool ValidItemForWorkOrder()
        {
            bool blF = false;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "X")
                    || (dr["PRODUCTTYPE"].ToString() == "O"))
                {
                    blF = true;
                    break;
                }
            }
            if (!blF) return true;
            else return false;
        }

        private void gridControl1_IsKeyboardFocusedChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (gridControl1.IsFocused)
                ActiveControl = "gridControl1";
        }

        private void btnMoreQty_Checked(object sender, RoutedEventArgs e)
        {
            if (blReturnItem) return;
            blPressQty = true;
            blCacheQty = false;
            intPressCount = 0;
        }

        private void btnMoreQty_Unchecked(object sender, RoutedEventArgs e)
        {
            if (blReturnItem) return;
            blPressQty = false;
            blCacheQty = false;
            intPressQty = 1;
            intPressCount = 0;
        }

        private void btnKey1_Click(object sender, RoutedEventArgs e)
        {
            KeyConverter k = new KeyConverter();


            Key mykey = (Key)k.ConvertFromString((sender as System.Windows.Controls.Button).Content.ToString());

            if (!blPressQty)
            {

                GeneralFunctions.SendKeys.Send(mykey, (sender as System.Windows.Controls.Button).Content.ToString());
            }
            else
            {
                if (!blCacheQty)
                {
                    PrepareQty((sender as System.Windows.Controls.Button).Content.ToString());
                    GeneralFunctions.SetFocus(txtSKU);
                }
                else
                {
                    GeneralFunctions.SendKeys.Send(mykey, (sender as System.Windows.Controls.Button).Content.ToString());
                }
            }
        }

        private void PrepareQty(string val)
        {
            if (intPressCount == 0)
            {
                if (val == "0")
                {
                    return;
                }
                else
                {
                    intPressQty = GeneralFunctions.fnInt32(val);
                    intPressCount++;
                }
            }
            else
            {
                intPressQty = GeneralFunctions.fnInt32(intPressQty.ToString() + val);
                intPressCount++;
            }
        }

        private async void btnKeyEnter_Click(object sender, RoutedEventArgs e)
        {
            if ((blPressQty) && (txtSKU.Text == ""))
            {
                GeneralFunctions.SetFocus(txtSKU);
                blCacheQty = true;
                return;
            }
            if (txtSKU.Text.Trim() != "")
            {

                bool blFindBySKU = false;
                bool blFindByAltSKU = false;
                bool blFindByAltSKU2 = false;
                bool blFindByUPC = false;
                string SKU = "";
                //if (e.KeyData == Keys.Enter)
                //{
                try
                {
                    if (blReturnItem) return;
                    if (txtSKU.Text.Trim() == "") return;

                    if (IfExistsSKU(txtSKU.Text.Trim()) == 1)
                    {
                        blFindBySKU = true;
                        SKU = txtSKU.Text.Trim();
                        if (IfActiveProduct(SKU) == 0)
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                    else
                    {
                        blFindBySKU = false;
                    }
                    if (!blFindBySKU)
                    {
                        if (IfExistsAltSKU(txtSKU.Text.Trim()) == 1)
                        {
                            blFindByAltSKU = true;
                            SKU = SKUfromAltSKU(txtSKU.Text.Trim());
                            if (IfActiveProduct(SKU) == 0)
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                return;
                            }
                        }
                        else
                        {
                            blFindByAltSKU = false;
                        }

                        if (!blFindByAltSKU)
                        {
                            if (IfExistsAltSKU2(txtSKU.Text.Trim()) == 1)
                            {
                                blFindByAltSKU2 = true;
                                SKU = SKUfromAltSKU2(txtSKU.Text.Trim());
                                if (IfActiveProduct(SKU) == 0)
                                {
                                    new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                    return;
                                }
                            }
                            else
                            {
                                blFindByAltSKU2 = false;
                            }

                            if (!blFindByAltSKU2)
                            {
                                if (IfExistsUPC(txtSKU.Text.Trim()) == 1)
                                {
                                    blFindByUPC = true;
                                    SKU = SKUfromUPC(txtSKU.Text.Trim());
                                    if (IfActiveProduct(SKU) == 0)
                                    {
                                        new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                        return;
                                    }
                                }
                                else
                                {
                                    blFindByUPC = false;
                                }
                            }
                        }

                        
                    }
                    bool refWFlag = false;
                    string refSKU = "";
                    string refWPrice = "0";
                    string strSKU = "";
                    double isvalidprice = 0;

                    // 03-15-2013    Add both UPC A and EAN 13 barcode

                    if ((Settings.NotReadBarcodeCheckDigit == "N" ? ((txtSKU.Text.Trim().Length == 12) || (txtSKU.Text.Trim().Length == 13)) : ((txtSKU.Text.Trim().Length == 11) || (txtSKU.Text.Trim().Length == 12))) && (txtSKU.Text.Trim().Substring(0, 1) == Settings.EmbeddedBarcodeNumberSystemChar)) //&& (txtSKU.Text.Trim().Substring(0, 1) == "2")
                    {
                        IsWeighedItem(txtSKU.Text.Trim(), ref refWFlag, ref refSKU, ref refWPrice);
                        if (refWFlag)
                        {
                            strSKU = refSKU;
                            try
                            {
                                isvalidprice = GeneralFunctions.fnDouble(refWPrice);
                            }
                            catch
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Invalid_embedded_bar_code_product_price, Properties.Resources.Embedded_bar_code_Item_Price_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                return;
                            }
                        }
                        else
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Invalid_embedded_bar_code_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                    else
                        strSKU = SKU;

                    if (strCurrentServiceType != "Sales")
                    {
                        if (refWFlag) return;
                    }

                    if (IfExistsSKU(strSKU) == 1)
                    {
                        if (!GeneralFunctions.ProceedFromItemImage(GetProductID(strSKU))) return;


                        int MixMatchID = 0;
                        string MixMatchFlag = "N";
                        string MixMatchCat = "";
                        string MixMatchType = "";
                        double MixMatchVal = 0;
                        int MixMatchPlus = 0;
                        double MixMatchPartPrice = 0;
                        bool MixMatchApplicableLast = false;

                        int SaleID = 0;
                        double SalePrice = 0;


                        if (strCurrentServiceType == "Sales")
                        {
                            string itemexpiredt = GetProductExpiry(strSKU);
                            if (itemexpiredt != "")
                            {
                                DisplayItemExpiryAlert(itemexpiredt);
                            }
                        }


                        if (strCurrentServiceType == "Sales")
                        {
                            FetchActiveSale(GetProductID(strSKU), ref SaleID, ref SalePrice);
                            if (!refWFlag)
                            {
                                if (SaleID == 0)
                                {
                                    PosDataObject.POS objPOS = new PosDataObject.POS();
                                    objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                    MixMatchID = objPOS.ActiveMixNMatch(GetProductID(strSKU));
                                }
                                if (MixMatchID > 0)
                                {
                                    for (int lp = 1; lp <= intPressQty; lp++)
                                    {
                                        await AddSKURecordForMixMatch(strSKU, refWFlag, isvalidprice);
                                    }
                                }
                                else
                                {
                                    await AddSKURecord(strSKU, refWFlag, isvalidprice);
                                }
                            }
                            else
                            {
                                await AddSKURecordForEmbeddedProduct(strSKU, refWFlag, isvalidprice);
                            }

                        }
                        else
                        {
                            await AddSKURecord(strSKU, refWFlag, isvalidprice);
                        }

                        GetTotal();
                        ShowTax();
                        ResetQty();
                    }
                    else
                    {
                        if (((SecurityPermission.AcssProductAdd) && (SystemVariables.CurrentUserID > 0)) ||
                            (SystemVariables.CurrentUserID <= 0))
                        {
                            if (txtSKU.Text.Trim() != "")
                            {
                                if (new MessageBoxWindow().Show(Properties.Resources.This_is_a_new_item_ + "\n" + Properties.Resources.Do_you_want_to_add_it_to_the_system_, Properties.Resources.New_Item, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                                {
                                    int CatID = 0;
                                    string DisplayPOS = "N";
                                    int intNewRecID = 0;
                                    AddProductWindow frm_ProductDlg = new AddProductWindow();
                                    try
                                    {
                                        frm_ProductDlg.AddSKU = GeneralFunctions.CheckLengthOfString(txtSKU.Text.Trim(), 16);
                                        frm_ProductDlg.AddFromPOS = true;
                                        frm_ProductDlg.Duplicate = false;
                                        frm_ProductDlg.ID = 0;
                                        blurGrid.Visibility = Visibility.Visible;
                                        frm_ProductDlg.ShowDialog();
                                        blurGrid.Visibility = Visibility.Collapsed;
                                        intNewRecID = frm_ProductDlg.NewID;
                                        DisplayPOS = frm_ProductDlg.AddDisplayItemInPOS;
                                        CatID = frm_ProductDlg.AddCategory;
                                    }
                                    finally
                                    {

                                    }

                                    if (intNewRecID > 0)
                                    {
                                        FetchItemData();
                                        /*
                                        pnlProdtMain.Children.Clear();
                                        frm_ProductBrw = new POSSection.frmProductBrwUC();
                                        frm_ProductBrw.bar1.Visibility = Visibility.Collapsed;
                                        frm_ProductBrw.bar2.Visibility = Visibility.Collapsed;
                                        pnlProdtMain.Children.Add(frm_ProductBrw);
                                        frm_ProductBrw.cmbFilter.EditValue = "Active Products";
                                        frm_ProductBrw.IsPOS = true;
                                        frm_ProductBrw.FetchData(true, "Active Products");
                                        frm_ProductBrw.SetDecimalPlace();
                                        blfetchProduct = true;
                                        /// Set UP/Down Button to move cursor through Cart Item
                                        EnableDisableButton(btnUpProduct, btnDownProduct, grdProduct);
                                        */

                                        if (DisplayPOS == "Y")
                                        {
                                            SetNewPOSItem(CatID, intNewRecID);
                                        }
                                        await AddSKURecord(txtSKU.Text.Trim(), false, 0);

                                        GetTotal(); /// Calculate and Display Cart Total
                                        ShowTax(); /// Calculate and Display Taxes of Cart Items
                                        ResetQty();  /// Reset Item Quantity
                                    }
                                }
                                else
                                {
                                    blleavenotoscan = true;
                                }
                            }
                        }
                    }
                    txtSKU.Text = "";
                    txtQty.Text = intPressQty.ToString();
                    //txtSKU.BackColor = Color.FromArgb(247, 245, 241);
                    /// Set UP/Down Button to move cursor through Cart Item
                    EnableDisableButton(btnUP, btnDown, gridControl1);
                    blleave = true;
                }
                finally
                {

                    //e.Handled = true;
                    txtSKU.Focus();
                }
                //}

            }

            else
            {
                //this.SelectNextControl(this, true, true, false, true);
            }
        }

        private void cmbStore_SelectedIndexChanged(object sender, RoutedEventArgs e)
        {
            FetchCustomerData();
            /*if (frm_CustomerBrw != null)
            {
                frm_CustomerBrw.storecd = cmbStore.Text;
                frm_CustomerBrw.FetchData(frm_CustomerBrw.cmbFilter.SelectedIndex.ToString());
                if (cmbStore.Text != Settings.StoreCode) btnAddCust.Visibility = Visibility.Collapsed;
                else btnAddCust.Visibility = Visibility.Visible;
            }*/
        }


        private async void btnAddCustNew_Click(object sender, RoutedEventArgs e)
        {
            if ((SecurityPermission.AcssCustomerAdd) || (SystemVariables.CurrentUserID <= 0))
            {
                int intNewRecID = 0;
                frm_CustomerDlg frm_CustomerDlg = new frm_CustomerDlg();
                try
                {

                    if (frm_CustomerBrw == null)
                        frm_CustomerBrw = new frm_CustomerBrwUC();

                    frm_CustomerDlg.ID = 0;
                    frm_CustomerDlg.Duplicate = false;
                    frm_CustomerDlg.AddFromPOS = true;
                    frm_CustomerDlg.bPOS = true;
                    frm_CustomerDlg.OtherStoreRecord = false;
                    frm_CustomerDlg.Top = 0;
                    frm_CustomerDlg.BrowseFormUC = frm_CustomerBrw;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_CustomerDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    intNewRecID = frm_CustomerDlg.NewID;
                }
                finally
                {
                    if (frm_CustomerBrw.grdCustomer.ItemsSource is null)
                        GeneralFunctions.SetRecordCountStatus(0);
                    else
                        GeneralFunctions.SetRecordCountStatus((frm_CustomerBrw.grdCustomer.ItemsSource as DataTable).Rows.Count);
                }
                if (intNewRecID > 0)
                {
                    //await frm_CustomerBrw.SetCurrentRow(intNewRecID);
                    //btnCustSelect_Click(sender, e);
                    FetchCustomerData();
                    SetNewlyEnteredCustomer(intNewRecID);
                }
            }
            else
            {
                DocMessage.MsgPermission();
            }
        }
        private async void btnAddCust_Click(object sender, RoutedEventArgs e)
        {
            if ((SecurityPermission.AcssCustomerAdd) || (SystemVariables.CurrentUserID <= 0))
            {
                int intNewRecID = 0;
                frm_CustomerDlg frm_CustomerDlg = new frm_CustomerDlg();
                try
                {

                    frm_CustomerDlg.ID = 0;
                    frm_CustomerDlg.Duplicate = false;
                    frm_CustomerDlg.AddFromPOS = true;
                    frm_CustomerDlg.bPOS = true;
                    frm_CustomerDlg.OtherStoreRecord = false;
                    frm_CustomerDlg.Top = 0;
                    frm_CustomerDlg.BrowseFormUC = frm_CustomerBrw;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_CustomerDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    intNewRecID = frm_CustomerDlg.NewID;
                }
                finally
                {
                    if (frm_CustomerBrw.grdCustomer.ItemsSource is null)
                        GeneralFunctions.SetRecordCountStatus(0);
                    else
                        GeneralFunctions.SetRecordCountStatus((frm_CustomerBrw.grdCustomer.ItemsSource as DataTable).Rows.Count);
                    //frm_CustomerDlg.Dispose();
                }
                if (intNewRecID > 0)
                {
                    await frm_CustomerBrw.SetCurrentRow(intNewRecID);
                    btnCustSelect_Click(sender, e);
                }
            }
            else
            {
                DocMessage.MsgPermission();
            }
        }

        private async void btnCustSelect_ClickNew(object sender, RoutedEventArgs e)
        {
            bool flag;
            bool flag1;
            if (this.CgridView1.FocusedRowHandle > -1)
            {
                string cellValue1 = await GeneralFunctions.GetCellValue1(this.CgridView1.FocusedRowHandle, this.grdCustomer, this.colCMID);
                if (GeneralFunctions.fnInt32(cellValue1) != this.intCustID)
                {
                    cellValue1 = null;
                    this.blChangeCustomer = true;
                    string str = "";
                    string str1 = "";
                    string str2 = "";
                    string str3 = "";
                    string str4 = "";
                    string str5 = "";
                    string str6 = "";
                    double accountBalance = 0;
                    string str7 = "";
                    string str8 = "";
                    int num = 0;
                    string str9 = "";
                    double num1 = 0;
                    int num2 = 0;
                    string cellValue11 = await GeneralFunctions.GetCellValue1(this.CgridView1.FocusedRowHandle, this.grdCustomer, this.colCMID);
                    this.intCustID = GeneralFunctions.fnInt32(cellValue11);
                    cellValue11 = null;
                    this.FetchCustomer(this.intCustID, ref str4, ref str5, ref str6, ref str, ref str1, ref str2, ref str3, ref str7, ref str8, ref num, ref str9, ref num1, ref num2);
                    this.CustDTaxID = num;
                    this.CustDTaxName = str9;
                    this.CustDTaxRate = num1;
                    this.CustDTaxType = num2;
                    this.strTaxExempt = str;
                    this.strDiscountLevel = str1.Trim();
                    if (this.strDiscountLevel == "")
                    {
                        this.strDiscountLevel = "A";
                    }
                    accountBalance = this.GetAccountBalance(this.intCustID);
                    this.txtCust.Text = str4;
                    if (OfflineRetailV2.Data.Settings.CentralExportImport == "Y")
                    {
                        if (this.cmbStore.EditText != OfflineRetailV2.Data.Settings.StoreCode)
                        {
                            this.txtCustStore.Text = this.cmbStore.EditText;
                        }
                        else
                        {
                            this.txtCustStore.Text = "";
                        }
                    }
                    this.strCustomerID = str4;
                    this.lbCustName.Text = str5;
                    POSControl pOSControl = this;
                    int num3 = this.intCustID;
                    int year = DateTime.Today.Year;
                    DateTime today = DateTime.Today;
                    pOSControl.FetchCustomerNote("", "Customer", num3, year, today.Month);
                    if (this.blCustNotes)
                    {
                        this.lbcustinfo2.Text = "Check 'Cust Notes' Apps";
                    }
                    this.dblStoreCr = GeneralFunctions.fnDouble(str3);
                    this.dblCustAcctLimit = GeneralFunctions.fnDouble(str7);
                    this.dblCustAcctBalance = accountBalance;
                    this.RearrangeProductAsCustomerChange();
                    int num4 = -1;
                    foreach (DataRowView defaultView in this.dtblPOS.DefaultView)
                    {
                        flag = (defaultView["PRODUCTTYPE"].ToString() == "G" || defaultView["PRODUCTTYPE"].ToString() == "A" || defaultView["PRODUCTTYPE"].ToString() == "C" || defaultView["PRODUCTTYPE"].ToString() == "U" || defaultView["PRODUCTTYPE"].ToString() == "B" || defaultView["PRODUCTTYPE"].ToString() == "W" || defaultView["PRODUCTTYPE"].ToString() == "X" || defaultView["PRODUCTTYPE"].ToString() == "O" || defaultView["PRODUCTTYPE"].ToString() == "Z" ? true : defaultView["PRODUCTTYPE"].ToString() == "H");
                        if (!flag)
                        {
                            num4++;
                            POSControl pOSControl1 = this;
                            int num5 = GeneralFunctions.fnInt32(defaultView["ID"].ToString());
                            flag1 = (GeneralFunctions.fnInt32(defaultView["SALEPRICEID"].ToString()) > 0 ? false : true);
                            pOSControl1.AddAutoDiscountInCart_OnCustomerChange(num5, flag1, num4);
                            //defaultView = null;
                        }
                    }
                    SetCartDisplay();
                    this.GetTotal();
                    this.ShowTax();
                    this.ResetQty();
                    this.pnlCust.Visibility = System.Windows.Visibility.Visible;
                    str = null;
                    str1 = null;
                    str2 = null;
                    str3 = null;
                    str4 = null;
                    str5 = null;
                    str6 = null;
                    str7 = null;
                    str8 = null;
                    str9 = null;
                }
            }
            this.tcPOS.SelectedIndex = 0;
        }
        private async void btnCustSelect_Click(object sender, RoutedEventArgs e)
        {
            if (frm_CustomerBrw.gridView1.FocusedRowHandle > -1)
            {
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(frm_CustomerBrw.gridView1.FocusedRowHandle, frm_CustomerBrw.grdCustomer, frm_CustomerBrw.colID)) != intCustID)
                {
                    blChangeCustomer = true;
                    string refTaxExempt = "";
                    string refDiscountLevel = "";
                    string refTaxID = "";
                    string refStoreCr = "";
                    string refCID = "";
                    string refCName = "";
                    string refCAdd = "";
                    double dblBalance = 0;
                    string refARCredit = "";
                    string refPOSNotes = "";

                    int refDTaxID = 0;
                    string refDTax = "";
                    double refDTaxRate = 0;
                    int refDTaxType = 0;

                    intCustID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(frm_CustomerBrw.gridView1.FocusedRowHandle, frm_CustomerBrw.grdCustomer, frm_CustomerBrw.colID));

                    FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd, ref refTaxExempt, ref refDiscountLevel, ref refTaxID,
                                    ref refStoreCr, ref refARCredit, ref refPOSNotes, ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);

                    CustDTaxID = refDTaxID;
                    CustDTaxName = refDTax;
                    CustDTaxRate = refDTaxRate;
                    CustDTaxType = refDTaxType;
                    strTaxExempt = refTaxExempt;
                    strDiscountLevel = refDiscountLevel.Trim();
                    if (strDiscountLevel == "") strDiscountLevel = "A";
                    dblBalance = GetAccountBalance(intCustID);
                    txtCust.Text = refCID;
                    if (Settings.CentralExportImport == "Y")
                    {
                        if (cmbStore.EditText == Settings.StoreCode) txtCustStore.Text = "";
                        else txtCustStore.Text = cmbStore.EditText;
                    }
                    //lbCustID.Text = "Customer ID : " + refCID;
                    strCustomerID = refCID;
                    lbCustName.Text = refCName;

                    /*DisplayPoleText(2, "N", "N", "welcome", refCName);

                    lbCustAddress.Text = refCAdd;
                    ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                    lbCustNotes.Text = refPOSNotes;
                    blCustNotes = refPOSNotes != "";
                    ShowCustomerPhoto();*/
                    FetchCustomerNote("", "Customer", intCustID, DateTime.Today.Year, DateTime.Today.Month);
                    if (blCustNotes) lbcustinfo2.Text = "Check 'Cust Notes' Apps";
                    dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                    dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                    dblCustAcctBalance = dblBalance;
                    RearrangeProductAsCustomerChange();

                    int i = -1;
                    foreach (DataRowView dr in dtblPOS.DefaultView)
                    {
                        if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                        || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                        || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                            || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                        i++;
                        AddAutoDiscountInCart_OnCustomerChange(GeneralFunctions.fnInt32(dr["ID"].ToString()), GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) > 0 ? false : true, i);
                    }
                    SetCartDisplay();
                    GetTotal();
                    ShowTax();
                    ResetQty();
                    //gridControl1.RefreshData();

                    //Block
                    /*
                    if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                    {
                        int fval = GridView.FocusedRowHandle;
                        //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);

                        SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), numSubTotal.Value, numDiscount.Value, numTax.Value, numTotal.Value, dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
                    }*/


                    pnlCust.Visibility = System.Windows.Visibility.Visible;

                }
            }

            tcPOS.SelectedIndex = 0;
        }
        TextBlock lbCustAddress = new TextBlock();
        TextBlock lbCustNotes = new TextBlock();
        private async void btnKeyboardC_Click(object sender, RoutedEventArgs e)
        {
            ResMan.ShowFullKeyboard();
        }
        private void FetchCustomer(int iCustID, ref string refCID, ref string refCName, ref string refCAdd,
                                ref string refTaxExempt, ref string refDiscountLevel, ref string refTaxID,
                                ref string refStoreCr, ref string refARCredit, ref string refPOSNotes,
                                ref int refDTaxID, ref string refDTaxName, ref double refDTaxRate, ref int refDTaxType)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            DataTable dtblCust = objPOS.FetchCustomerRecord(iCustID);
            foreach (DataRow dr in dtblCust.Rows)
            {
                refTaxExempt = dr["TaxExempt"].ToString();
                if (refTaxExempt.Trim() == "") refTaxExempt = "N";
                refDiscountLevel = dr["DiscountLevel"].ToString();
                refTaxID = dr["TaxID"].ToString();
                refStoreCr = dr["StoreCredit"].ToString();
                refARCredit = dr["ARCreditLimit"].ToString();
                refCID = dr["CustomerID"].ToString();
                if (dr["Salutation"].ToString() != "")
                    refCName = dr["Salutation"].ToString() + " " + dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                else
                    refCName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString();

                refCAdd = dr["Address1"].ToString() + "\n" + dr["City"].ToString();
                refPOSNotes = dr["POSNotes"].ToString();
                refDTaxID = GeneralFunctions.fnInt32(dr["DTaxID"].ToString());

                if (refDTaxID > 0)
                {
                    bool b = false;
                    PosDataObject.Tax otx = new PosDataObject.Tax();
                    otx.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    b = otx.IsActiveDTax(refDTaxID);
                    if (b)
                        DTaxDetails(refDTaxID, ref refDTaxName, ref refDTaxRate, ref refDTaxType);
                    else refDTaxID = 0;
                }
            }
            dtblCust.Dispose();

            // Set Customer Date of Birth

            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            string custdob = objpos.GetCustomerDOB(intCustID);
            if (custdob != "") dtCustomerDOB = GeneralFunctions.fnDate(custdob);

        }

        private double GetAccountBalance(int intCID)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            return objPOS.FetchCustomerAcctPayBalance(intCID);
        }

        private async void AddAutoDiscountInCart_OnCustomerChange(int PID, bool ItemDiscount, int row)
        {
            /* 
                purpose : Calculate Automatic Discount applied when customer changed
            */


            string adid = "";
            if (IsNonDiscountableItem(PID)) return;
            if (ItemDiscount) adid = GetAutoDiscountID("Item", PID);
            if (adid != "")
            {

                int rwindx = -1;
                foreach (DataRowView drv in dtblPOS.DefaultView)
                {
                    if (drv["ITEMINDEX"].ToString() == "1") rwindx++;
                    if (rwindx == row) break;
                }
                if (GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colBuyGetFreeHeader))) > 0) return;
                if (GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colMixID))) > 0) return;
                DataTable dtbl = new DataTable();
                PosDataObject.POS objpos = new PosDataObject.POS();
                objpos.Connection = SystemVariables.Conn;
                dtbl = objpos.FetchDiscounts(adid);
                int itmdiscid = 0;
                string itmdiscname = "";
                string itmdisctype = "";
                double itmdiscamt = 0;
                foreach (DataRow dr in dtbl.Rows)
                {
                    itmdiscid = GeneralFunctions.fnInt32(dr["ID"].ToString());
                    itmdiscname = dr["Name"].ToString();
                    itmdisctype = dr["Type"].ToString();
                    itmdiscamt = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                }
                dtbl.Dispose();
                string amt = "";
                if (Settings.DecimalPlace == 2) amt = itmdiscamt.ToString("f");
                if (Settings.DecimalPlace == 3) amt = itmdiscamt.ToString("f3");
                int intSID = itmdiscid;

                double discntamt = 0;
                discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colPrice) : await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colGPrice)),
                                                  itmdisctype, itmdiscamt);
                string damt = "0";
                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                double newpretaxamt = 0;
                newpretaxamt = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colPrice) : await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colGPrice)) - GeneralFunctions.fnDouble(damt);

                gridControl1.SetCellValue(rwindx, colPrice, newpretaxamt.ToString("f"));

                if (Settings.TaxInclusive == "Y")
                {
                    gridControl1.SetFocusedRowCellValue(colGRate, (newpretaxamt / GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colQty))).ToString("f"));
                    gridControl1.SetFocusedRowCellValue(colGPrice, newpretaxamt.ToString("f"));
                }

                gridControl1.SetCellValue(rwindx, colDisc, damt);
                gridControl1.SetCellValue(rwindx, colDiscountID, intSID.ToString());
                gridControl1.SetCellValue(rwindx, colDVal, amt);
                gridControl1.SetCellValue(rwindx, colDLogic, itmdisctype);

                string amtstr = "";
                if (itmdisctype == "P") amtstr = " @" + amt + "%";
                else amtstr = " - " + SystemVariables.CurrencySymbol + amt;

                gridControl1.SetCellValue(rwindx, colDiscountText, "  " + itmdiscname + amtstr);

                string linetxt = await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colProduct) + "\n";
                gridControl1.SetCellValue(rwindx, colProduct, linetxt);
                string tx = "0";
                CalculateTaxAfterLineDiscount(
                    GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(rwindx, gridControl1, colID)).ToString()), newpretaxamt, ref tx);
            }

            adid = "";
            adid = GetAutoDiscountID("Ticket", 0);
            if (adid != "")
            {
                DataTable dtbl = new DataTable();
                dtbl.Columns.Add("ID", System.Type.GetType("System.String"));

                string OrginalH = adid;
                char FindH = ',';
                int NumberOfOccurancesH = 0;

                string CopyOrginalH = string.Copy(OrginalH);
                int PlaceH = 0;

                NumberOfOccurancesH = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                int i = 0;
                while (PlaceH != -1)
                {
                    string temp = "";
                    int length = 0;
                    temp = CopyOrginalH.Substring(length, PlaceH);

                    dtbl.Rows.Add(new object[] { temp });
                    length = temp.Length + 1;
                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    NumberOfOccurancesH++;
                    i++;
                }

                foreach (DataRow dr in dtbl.Rows)
                {
                    bool flg = false;
                    foreach (DataRow dr1 in dtblPOS.Rows)
                    {
                        if (dr1["PRODUCTTYPE"].ToString() != "C") continue;
                        if (dr["ID"].ToString() == dr1["ID"].ToString())
                        {
                            flg = true;
                            break;
                        }
                    }
                    if (!flg)
                    {
                        DataTable dtbl2 = new DataTable();
                        PosDataObject.POS objpos = new PosDataObject.POS();
                        objpos.Connection = SystemVariables.Conn;
                        dtbl2 = objpos.FetchDiscounts(dr["ID"].ToString());
                        int itmdiscid = 0;
                        string itmdiscname = "";
                        string itmdisctype = "";
                        double itmdiscamt = 0;
                        foreach (DataRow dr2 in dtbl2.Rows)
                        {
                            itmdiscid = GeneralFunctions.fnInt32(dr2["ID"].ToString());
                            itmdiscname = dr2["Name"].ToString();
                            itmdisctype = dr2["Type"].ToString();
                            itmdiscamt = GeneralFunctions.fnDouble(dr2["Amount"].ToString());
                        }
                        dtbl2.Dispose();
                        string amt = "";
                        if (Settings.DecimalPlace == 2) amt = itmdiscamt.ToString("f");
                        if (Settings.DecimalPlace == 3) amt = itmdiscamt.ToString("f3");

                        int intSID = itmdiscid;

                        string amtstr = "";
                        if (itmdisctype == "P")
                            amtstr = " @" + amt + "%";
                        else
                            amtstr = " - " + SystemVariables.CurrencySymbol + amt;

                        if (Settings.DecimalPlace == 3)
                        {
                            dtblPOS.Rows.Add(new object[] {intSID.ToString(),"  " + itmdiscname + amtstr,
                                              "C","0","0","0",999888777,"99988863777.000","0","99988863777.000","0","0","0","","","",
                                              "",GetUniqueString(),"3","",itmdisctype,amt,"0","0","","2","0","0","0","","","","0","0","0",
                                              "N","N","N",strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"","0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,"99988863777.000","99988863777.000","","","","","","N"});
                        }
                        else
                        {
                            dtblPOS.Rows.Add(new object[] {intSID.ToString(),"  " +itmdiscname + amtstr,
                                              "C","0","0","0",999888777,"99988863777.000","0","99988863777.000","0","0","0","","","",
                                              "",GetUniqueString(),"2","",itmdisctype,amt,"0","0","","2","0","0","0","","","","0",
                                              "0","0","N","N","N",strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,"99988863777.000","99988863777.000","","","","","","N"});
                        }
                    }
                }
            }
        }
        private void RearrangeProductAsCustomerChange()
        {

            if ((blRepairIssued) || (blRepairRecall) || (blRentIssued) || (blRentRecall)) return;

            if (dtblPOS.Rows.Count > 0)
            {
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                        || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")
                        || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                        || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")) continue;

                    if (dr["PROMPTPRICE"].ToString() == "Y") continue;
                    if (GeneralFunctions.fnInt32(dr["BUYNGETFREEHEADERID"].ToString()) > 0) continue;

                    string refType = "";
                    string refOHQty = "";
                    string refNQty = "";
                    string refPrice = "";
                    string refNPrice = "";
                    string refCost = "";
                    string refPrompt = "";
                    string refDP = "";
                    string refAge = "";
                    string refRentMI = "";
                    string refRentHR = "";
                    string refRentHDY = "";
                    string refRentDY = "";
                    string refRentWK = "";
                    string refRentMN = "";
                    string refRentDeposit = "";
                    string refRentMinHR = "";
                    string refRentMinAmt = "";
                    string refRepairAmt = "";
                    string refRepairPromptAmt = "";
                    string refRepairPromptTag = "";
                    string refRentPrompt = "";

                    string refUOM = "";
                    string refExpiry = "";
                    FetchProduct(GeneralFunctions.fnInt32(dr["ID"].ToString()), strDiscountLevel.Trim(), intUsePriceLevel, ref refType,
                                    ref refOHQty, ref refNQty, ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge,
                                    ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY, ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR,
                                    ref refRentMinAmt, ref refRentPrompt, ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

                    double dblRate = 0;
                    double dblDisc = 0;
                    int intQty = GeneralFunctions.fnInt32(dr["QTY"].ToString());
                    dblRate = GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) == 0 ? GeneralFunctions.fnDouble(refPrice) : GeneralFunctions.fnDouble(dr["RATE"].ToString());
                    dblDisc = GeneralFunctions.fnDouble(dr["DISCOUNT"].ToString());

                    dr["PRODUCT"] = dr["PRODUCT"].ToString().Replace("\n", "");

                    dr["QTY"] = Convert.ToString(intQty);
                    dr["RATE"] = dblRate.ToString();
                    dr["PRICE"] = Convert.ToDecimal((intQty * dblRate)).ToString();

                    dr["DISCOUNT"] = "0";
                    dr["DISCOUNTID"] = "0";
                    dr["DISCOUNTTEXT"] = "";

                    dr["DISCLOGIC"] = "";
                    dr["DISCVALUE"] = "0";

                    dr["PRODUCTTYPE"] = refType;
                    dr["ONHANDQTY"] = GeneralFunctions.fnDouble(refOHQty).ToString();
                    dr["NORMALQTY"] = GeneralFunctions.fnDouble(refNQty).ToString();
                    dr["NRATE"] = GeneralFunctions.fnDouble(refNPrice).ToString();
                    dr["COST"] = GeneralFunctions.fnDouble(refCost).ToString();

                }


                int crow = -1;
                bool tokenf = false;

                DataTable dTk = new DataTable();
                dTk.Columns.Add("Row", System.Type.GetType("System.Int32"));

                foreach (DataRowView dr in dtblPOS.DefaultView)
                {
                    crow++;
                    if (dr["PRODUCTTYPE"].ToString() != "C") continue;
                    if (GeneralFunctions.fnInt32(dr["ITEMINDEX"].ToString()) == 2)
                    {
                        tokenf = true;
                        dTk.Rows.Add(new object[] { crow });
                    }
                }

                dTk.DefaultView.Sort = "Row desc";
                dTk.DefaultView.ApplyDefaultSort = true;
                foreach (DataRowView dr in dTk.DefaultView)
                {
                    dtblPOS.DefaultView.Delete(GeneralFunctions.fnInt32(dr["Row"].ToString()));
                }
            }
        }
        public void FetchCustomerNote(string sqlCriteria, string pRefType, int pRef, int pY, int pM)
        {
            dtblCustNotes.Rows.Clear();
            PosDataObject.Notes objNotes = new PosDataObject.Notes();
            objNotes.Connection = SystemVariables.Conn;
            DataTable dbtbl = new DataTable();
            dbtbl = objNotes.FetchNoteData(sqlCriteria, pRefType, pRef, SystemVariables.DateFormat);
            dtblCustNotes = dbtbl;
            dbtbl.Dispose();
            if (dtblCustNotes.Rows.Count > 0) blCustNotes = true;
            //rajib
            //if (dtblCustNotes.Rows.Count > 0) btnCustNote.Visible = true;
            //else btnCustNote.Visible = false;
        }
        System.Windows.Forms.OpenFileDialog opendlg_PicFile = new System.Windows.Forms.OpenFileDialog();
        Image picCustPhoto = new Image() { Width = 100, Height = 100 };
        private void ShowCustomerPhoto()
        {
            string strPhotoFile = "";
            // *** Display [PHOTO]  *** //	
            csStorePath = Environment.CurrentDirectory + "\\CustomerPhotos";
            intImageWidth = 112;
            intImageHeight = 128;
            strPhotoFile = csStorePath + "\\" + strCustomerID + ".jpg";
            opendlg_PicFile.FileName = strPhotoFile;

            if (!GeneralFunctions.GetPhotoFromTable(picCustPhoto, intCustID, "Customer"))
            {
                picCustPhoto.Source = null;
            }
            else
            {
                double AspectRatio = 0.00;
                int intWidth, intHeight;
                AspectRatio = GeneralFunctions.fnDouble(picCustPhoto.Width) /
                    GeneralFunctions.fnDouble(picCustPhoto.Height);
                intHeight = int.Parse(picCustPhoto.Height.ToString());
                intWidth = Convert.ToInt16(GeneralFunctions.fnDouble(intHeight) * AspectRatio);

                if (intWidth > intImageWidth)
                {
                    intWidth = intImageWidth;
                    intHeight = Convert.ToInt16(GeneralFunctions.fnDouble(intWidth) / AspectRatio);
                }
                picCustPhoto.Width = intWidth;
                picCustPhoto.Height = intHeight;
            }
        }
        private void ArrangeCustomerLine(string CName, double Scr, double ABal, string Tx)
        {
            string str1 = "";
            string str2 = "";
            if (Settings.DecimalPlace == 3)
            {
                if (Scr < 0) str1 = str1 + Properties.Resources.Store_Cr + " : (" + Scr.ToString("f3").Remove(0, 1) + ")";
                else str1 = str1 + Properties.Resources.Store_Cr + " : " + Scr.ToString("f3");
                if (ABal < 0) str1 = str1 + "\n" + Properties.Resources.Acct_Bal + " : (" + ABal.ToString("f3").Remove(0, 1) + ")";
                else str1 = str1 + "\n" + Properties.Resources.Acct_Bal + " : " + ABal.ToString("f3");
            }
            else
            {
                if (Scr < 0) str1 = str1 + Properties.Resources.Store_Cr + " : (" + Scr.ToString("f").Remove(0, 1) + ")";
                else str1 = str1 + Properties.Resources.Store_Cr + " : " + Scr.ToString("f");
                if (ABal < 0) str1 = str1 + "\n" + Properties.Resources.Acct_Bal + " : (" + ABal.ToString("f").Remove(0, 1) + ")";
                else str1 = str1 + "\n" + Properties.Resources.Acct_Bal + " : " + ABal.ToString("f");
            }
            if (Tx != "") str2 = str2 + " " + Properties.Resources.Tax_ID + ": " + Tx;
            else str2 = "";

            //lbCustBal.Text = str1;
            //lbCustTax.Text = str2;
            //btnViewCustomerDetails.Properties.Buttons[0].Caption = CName + "\r\n" + str1;

            lbcustinfo1.Text = CName + "\r\n" + str1;

            //btnViewCustomerDetails.Visible = true;
        }
        private void btnDownCust_Click(object sender, RoutedEventArgs e)
        {
            if ((frm_CustomerBrw.grdCustomer.ItemsSource as DataTable).Rows.Count == 0) return;
            if (frm_CustomerBrw.gridView1.FocusedRowHandle == (frm_CustomerBrw.grdCustomer.ItemsSource as DataTable).Rows.Count - 1) return;
            frm_CustomerBrw.gridView1.FocusedRowHandle = frm_CustomerBrw.gridView1.FocusedRowHandle + 1;
            //EnableDisableButton(btnUpCust, btnDownCust, frm_CustomerBrw.grdCustomer);
        }

        private void btnUpCust_Click(object sender, RoutedEventArgs e)
        {
            if ((frm_CustomerBrw.grdCustomer.ItemsSource as DataTable).Rows.Count == 0) return;
            if (frm_CustomerBrw.gridView1.FocusedRowHandle == 0) return;
            frm_CustomerBrw.gridView1.FocusedRowHandle = frm_CustomerBrw.gridView1.FocusedRowHandle - 1;
            //EnableDisableButton(btnUpCust, btnDownCust, frm_CustomerBrw.grdCustomer);
        }

        public async void posCouponItemClick(object sender, RoutedEventArgs e)
        {
            int intSID = ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemID;

            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colDiscountID) != "0")
            {
                new MessageBoxWindow().Show(Properties.Resources.Discount_already_applied_, Properties.Resources.Item_Discount, MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }
            double discntamt = 0;
            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colPrice) : await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colGPrice)), ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType,
                GeneralFunctions.fnDouble(((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount));
            string damt = "0";
            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

            double newpretaxamt = 0;
            newpretaxamt = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colPrice) : await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colGPrice)) - GeneralFunctions.fnDouble(damt);

            string srv = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colService);

            gridControl1.SetFocusedRowCellValue(colPrice, newpretaxamt.ToString("f"));
            if (Settings.TaxInclusive == "Y")
            {
                gridControl1.SetFocusedRowCellValue(colGRate, (newpretaxamt / GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colQty))).ToString("f"));
                gridControl1.SetFocusedRowCellValue(colGPrice, newpretaxamt.ToString("f"));
            }
            gridControl1.SetFocusedRowCellValue(colDisc, damt);
            gridControl1.SetFocusedRowCellValue(colDiscountID, intSID.ToString());
            gridControl1.SetFocusedRowCellValue(colDVal, ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount);
            gridControl1.SetFocusedRowCellValue(colDLogic, ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType);

            string amtstr = "";
            if (((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType == "P") amtstr = " @" + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount + "%";
            else amtstr = " - " + SystemVariables.CurrencySymbol + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount;

            gridControl1.SetFocusedRowCellValue(colDiscountText, "  " + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemName + amtstr);

            string linetxt = "";
            linetxt = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProduct) + "\n";

            gridControl1.SetFocusedRowCellValue(colProduct, linetxt);
            string tx = "0";
            CalculateTaxAfterLineDiscount(GeneralFunctions.fnInt32(
                (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colID)).ToString())
                , newpretaxamt, ref tx);

            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colFeeID) != "0")
            {
                //gridControl1.SetFocusedRowCellValue(colProduct, await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle,gridControl1, colProduct).ToString() + "\n");

                string ftype = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colFeeType);
                double fval = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colFeeVal));
                double ftxrate = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colFeeTaxRate));
                double appamt = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colPrice));

                double fee = 0;
                double feetax = 0;

                fee = GeneralFunctions.FormatDouble(calculateitemdiscount(newpretaxamt + discntamt, ftype, fval));

                if (IsDiscountableFees(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colFeeID))))
                {
                    fee = fee - calculateitemdiscount(fee, ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType, GeneralFunctions.fnDouble(((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount));
                }

                if (ftxrate > 0)
                {
                    //feetax = GeneralFunctions.FormatDouble(fee * ftxrate / 100);

                    if (Settings.TaxInclusive == "N")
                    {
                        feetax = GeneralFunctions.FormatDouble(fee * ftxrate / 100);
                    }
                    else
                    {
                        double tempApplicableAmount = fee / ((100 + ftxrate) / 100);
                        feetax = GeneralFunctions.FormatDouble(fee - tempApplicableAmount);
                    }

                    if (Settings.TaxInclusive == "Y")
                    {
                        fee = fee - feetax;
                    }
                }

                gridControl1.SetFocusedRowCellValue(colFee, fee.ToString());
                gridControl1.SetFocusedRowCellValue(colFeeTax, feetax.ToString());
            }

            SetCartDisplay();
            gridControl1.RefreshData();
            GetTotal();
            ShowTax();
            ResetQty();
            //gridControl1.RefreshData();
            try
            {
                //ActiveForm.Close();
            }
            catch
            {
            }
        }
        /// check if discountable fees or not

        private bool IsDiscountableFees(int FID)
        {
            PosDataObject.POS opos = new PosDataObject.POS();
            opos.Connection = SystemVariables.Conn;
            return opos.IsDiscounttableFees(FID);
        }
        public void posCouponItem1Click(object sender, RoutedEventArgs e)
        {
            int intSID = ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemID;
            bool flg = false;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() != "C") continue;
                if (dr["ID"].ToString() == intSID.ToString())
                {
                    flg = true;
                    break;
                }
            }
            if (!flg)
            {
                string amtstr = "";
                if (((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType == "P")
                    amtstr = " @" + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount + "%";
                else
                    amtstr = " - " + SystemVariables.CurrencySymbol + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount;

                if (Settings.DecimalPlace == 3)
                {
                    dtblPOS.Rows.Add(new object[] {intSID.ToString(),"  " + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemName + amtstr,
                                              "C","0","0","0",999888777,"99988863777.000","0","99988863777.000","0","0","0","","","",
                                              "",GetUniqueString(),"3","",((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType,
                                              ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount,
                                              "0","0","","2","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,"99988863777.000","99988863777.000","","","","","","N"});
                }
                else
                {
                    dtblPOS.Rows.Add(new object[] {intSID.ToString(),"  " +((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemName + amtstr,
                                              "C","0","0","0",999888777,"99988863777.00","0","99988863777.00","0","0","0","","","",
                                              "",GetUniqueString(),"2","",
                                              ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType,((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount,
                                              "0","0","","2","0","0","0","","","","0","0","0","N","N","N","Sales","NA","0","0","0","","","",
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,"99988863777.00","99988863777.00","","","","","","N"});
                }

                /*if ((((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType == "P") && (GeneralFunctions.fnDouble(((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount) == 100))
                {
                    bl100percinvdiscount = true;
                }*/
                SetCartDisplay();
                GetTotal();
                ShowTax();
                ResetQty();
            }
        }

        public async void posCouponItem2Click(object sender, RoutedEventArgs e)
        {
            int intSID = ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemID;

            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colFeeID) != "0")
            {
                new MessageBoxWindow().Show(Properties.Resources.Fees_Charges_already_applied_, Properties.Resources.Fees___Charges, MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }


            double fees = 0;
            double feestax = 0;
            double discntamt = 0;
            double taxrate = 0;
            string tx1 = "";
            string feeQty = "N";

            string dlogic = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colDLogic);
            double dval = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colDVal));
            double pr = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colPrice) : await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colGPrice));
            double disc = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colDisc));

            fees = calculateitemdiscount(pr + disc, ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType,
                                                GeneralFunctions.fnDouble(((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount));

            if (((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).CheckDiscount == "Y")
            {
                fees = fees - calculateitemdiscount(fees, dlogic, dval);
            }

            if (((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).CheckTax == "Y")
            {
                PosDataObject.POS objpos = new PosDataObject.POS();
                objpos.Connection = SystemVariables.Conn;
                objpos.GetFeesTax(intSID, ref taxrate, ref tx1);
                try
                {
                    if (Settings.TaxInclusive == "N")
                    {
                        feestax = GeneralFunctions.FormatDouble(fees * taxrate / 100);
                    }
                    else
                    {
                        double tempApplicableAmount = fees / ((100 + taxrate) / 100);
                        feestax = GeneralFunctions.FormatDouble(fees - tempApplicableAmount);
                    }

                    //feestax = GeneralFunctions.FormatDouble(fees * taxrate / 100);
                }
                catch
                {
                }

                if (Settings.TaxInclusive == "Y")
                {
                    fees = fees - feestax;
                }
            }

            feeQty = ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).CheckQty;

            /*if (feeQty == "Y")
            {
                double qty = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle,gridControl1, colQty));
                fees = GeneralFunctions.FormatDouble(qty * fees);
                feestax = GeneralFunctions.FormatDouble(qty * feestax);
            }*/

            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colPrice)), ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType,
                GeneralFunctions.fnDouble(((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount));
            string damt = "0";
            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

            double newpretaxamt = 0;
            newpretaxamt = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colPrice)) - GeneralFunctions.fnDouble(damt);

            string srv = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colService);

            gridControl1.SetFocusedRowCellValue(colFee, fees.ToString("f"));
            gridControl1.SetFocusedRowCellValue(colFeeTax, feestax);
            gridControl1.SetFocusedRowCellValue(colFeeID, intSID.ToString());
            gridControl1.SetFocusedRowCellValue(colFeeVal, ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount);
            gridControl1.SetFocusedRowCellValue(colFeeType, ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType);
            gridControl1.SetFocusedRowCellValue(colFeeTaxRate, taxrate);
            gridControl1.SetFocusedRowCellValue(colFeeQty, feeQty);

            string amtstr = "";
            if (((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType == "P") amtstr = " @" + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount + "%";
            else amtstr = " - " + SystemVariables.CurrencySymbol + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount;

            gridControl1.SetFocusedRowCellValue(colFeeText, "  " + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemName + amtstr);

            string linetxt = "";
            linetxt = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProduct) + "\n";

            gridControl1.SetFocusedRowCellValue(colProduct, linetxt);
            string tx = "0";
            CalculateTaxAfterLineDiscount(GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colID)).ToString()), newpretaxamt, ref tx);

            SetCartDisplay();

            GetTotal();
            ShowTax();
            ResetQty();
            //ActiveForm.Close();
        }

        public void posCouponItem3Click(object sender, RoutedEventArgs e)
        {
            int intSID = ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemID;
            bool flg = false;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() != "H") continue;
                if (dr["ID"].ToString() == intSID.ToString())
                {
                    flg = true;
                    break;
                }
            }
            if (!flg)
            {
                string amtstr = "";
                if (((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType == "P")
                    amtstr = " @" + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount + "%";
                else
                    amtstr = " - " + SystemVariables.CurrencySymbol + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount;

                if (Settings.DecimalPlace == 3)
                {
                    dtblPOS.Rows.Add(new object[] {intSID.ToString(),"  " + ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemName + amtstr,
                                              "H","0","0","0",999888777,"99988863777.000","0","99988863777.000","0","0","0","","","",
                                              "",GetUniqueString(),"3","",((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType,
                                              ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount,
                                              "0","0","","2","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","",((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).CheckTax,0,0,0,0,0,"N","N","0","X",++CartSL,"",0,0,0,"","","","","","N"});
                }
                else
                {
                    dtblPOS.Rows.Add(new object[] {intSID.ToString(),"  " +((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemName + amtstr,
                                              "H","0","0","0",999888777,"99988863777.00","0","99988863777.00","0","0","0","","","",
                                              "",GetUniqueString(),"2","",
                                              ((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType,((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount,
                                              "0","0","","2","0","0","0","","","","0","0","0","N","N","N","Sales","NA","0","0","0","","","",
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","",((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).CheckTax,0,0,0,0,0,"N","N","0","X",++CartSL,"",0,0,0,"","","","","","N"});
                }

                /*if ((((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemType == "P") && (GeneralFunctions.fnDouble(((sender as System.Windows.Controls.Button).Tag as POSControls.POSCoupon).ItemAmount) == 100))
                {
                    bl100percinvdiscount = true;
                }*/

                SetCartDisplay();
                GetTotal();
                ShowTax();
                ResetQty();
            }
        }

        private async void pnlCustMain_SelectionChanged(object sender, GridSelectionChangedEventArgs e)
        {
            //var t =await GeneralFunctions.GetCellValue1(gridView4.FocusedRowHandle, pnlCustMain, colID1);
        }

        private async void btnProductNote_Click(object sender, RoutedEventArgs e)
        {
            await btnProductNoteClick(sender, e);
        }

        private void OpenWeightedItems_Click(object sender, RoutedEventArgs e)
        {
            WeightedItemsWindow weightedItemsWindow = new WeightedItemsWindow();
            weightedItemsWindow.Show();
        }
        public async Task btnProductNoteClick(object sender, EventArgs e)
        {

            if (IsDonationRecordExistsInCart()) return;

            string strNotes = "";
            int intProductID = 0;
            string strProductDesc = "";
            if (!((tcPOS.SelectedIndex == 0) || (tcPOS.SelectedIndex == 2)))
            {
                CloseMoreFunctions();
                return;
            }
            if (tcPOS.SelectedIndex == 0)
            {
                if (gridView1.FocusedRowHandle < 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
                if ((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "G")
                    || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "A")
                    || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "O"))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                strNotes = GetProductNotes(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colID)));
                intProductID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colID));
                strProductDesc = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProduct);
            }

            if ((tcPOS.SelectedIndex == 2) && (dtblPOS.Rows.Count == 0))
            {
                if (PgridView1.FocusedRowHandle < 0)
                {
                    CloseMoreFunctions();
                    return;
                }

                strNotes = GetProductNotes(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)));
                intProductID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                strProductDesc = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
            }
            if (strNotes.Trim() == "")
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSProductNoteDlg frm_POSProductNoteDlg = new frm_POSProductNoteDlg();
            try
            {
                frm_POSProductNoteDlg.Notes = strNotes;
                frm_POSProductNoteDlg.Title.Text = Properties.Resources.Notes_for__ + strProductDesc;
                frm_POSProductNoteDlg.ShowDialog();
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        private string GetProductNotes(int pid)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.GetProductNotes(pid);
        }

        private async void btnViewPrice_Click(object sender, RoutedEventArgs e)
        {
            await btnViewPriceClick(sender, e);
        }
        public async Task btnViewPriceClick(object sender, EventArgs e)
        {
            if (IsDonationRecordExistsInCart()) return;

            string strSKU = "";
            int intProductID = 0;
            string strProductDesc = "";
            if (!((tcPOS.SelectedIndex == 0) || (tcPOS.SelectedIndex == 2)))
            {
                CloseMoreFunctions();
                return;
            }
            if (tcPOS.SelectedIndex == 0)
            {
                if (gridView1.FocusedRowHandle < 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
                if ((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "G")
                    || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "A")
                    || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "O"))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                strSKU = GetProductSKU(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colID)));
                intProductID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colID));
                strProductDesc = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProduct);
            }

            if ((tcPOS.SelectedIndex == 2) && (dtblPOS.Rows.Count == 0))
            {
                if (PgridView1.FocusedRowHandle < 0)
                {
                    CloseMoreFunctions();
                    return;
                }
                strSKU = GetProductSKU(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)));
                intProductID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                strProductDesc = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, gridControl1, colIMDesc);
            }

            if ((tcPOS.SelectedIndex == 2) && (dtblPOS.Rows.Count > 0))
            {
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSProductPriceDlg frm_POSProductPriceDlg = new frm_POSProductPriceDlg();
            try
            {
                frm_POSProductPriceDlg.ID = intProductID;
                frm_POSProductPriceDlg.FormType = "View";
                frm_POSProductPriceDlg.Title.Text = " " + Properties.Resources.Price_for + " : " + strProductDesc;

                frm_POSProductPriceDlg.ShowDialog();
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        private string GetProductSKU(int pid)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.GetProductSKU(pid);
        }
        private async void btnChangePrice_Click(object sender, RoutedEventArgs e)
        {
            await btnChangePriceClick(sender, e);
        }
        public async Task btnChangePriceClick(object sender, EventArgs e)
        {
            if (IsDonationRecordExistsInCart()) return;

            string strSKU = "";
            int intProductID = 0;
            string strProductDesc = "";
            if (!((tcPOS.SelectedIndex == 0) || (tcPOS.SelectedIndex == 2)))
            {
                CloseMoreFunctions();
                return;
            }
            if (tcPOS.SelectedIndex == 0)
            {
                if (gridView1.FocusedRowHandle < 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                if (!CheckFunctionButton("31z3"))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
                if ((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "G")
                    || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "A")
                    || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "O"))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }

                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colMixID)) > 0)
                {
                    CloseMoreFunctions();
                    return;
                }

                strSKU = GetProductSKU(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colID)));
                intProductID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colID));
                strProductDesc = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProduct);
            }

            if ((tcPOS.SelectedIndex == 2) && (dtblPOS.Rows.Count == 0))
            {
                if (PgridView1.FocusedRowHandle < 0)
                {
                    CloseMoreFunctions();
                    return;
                }
                if (!CheckFunctionButton("31z3"))
                {
                    CloseMoreFunctions();
                    return;
                }
                strSKU = GetProductSKU(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)));
                intProductID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                strProductDesc = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, gridControl1, colIMDesc);

                bool MixMatchExists = false;

                PosDataObject.POS opos = new PosDataObject.POS();
                opos.Connection = SystemVariables.Conn;
                MixMatchExists = opos.ActiveMixNMatch(intProductID) > 0;
                if (MixMatchExists)
                {
                    CloseMoreFunctions();
                    return;
                }
            }
            if ((tcPOS.SelectedIndex == 2) && (dtblPOS.Rows.Count > 0))
            {
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSProductPriceDlg frm_POSProductPriceDlg = new frm_POSProductPriceDlg();
            try
            {
                frm_POSProductPriceDlg.ID = intProductID;
                frm_POSProductPriceDlg.FormType = Properties.Resources.Change;
                frm_POSProductPriceDlg.FunctionBtnAccess = blFunctionBtnAccess;
                frm_POSProductPriceDlg.SuperUserID = intSuperUserID;
                frm_POSProductPriceDlg.Title.Text = Properties.Resources.Price_for__ + strProductDesc;
                frm_POSProductPriceDlg.ShowDialog();
                if (frm_POSProductPriceDlg.DialogResult == true)
                {
                    if (frm_POSProductPriceDlg.ChangeFlag)
                    {
                        if (dtblPOS.Rows.Count > 0)
                        {
                            if (ChangeProductPriceOfBasket(intProductID))
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Item_in_the_Basket_Refreshed_Successfully_as_its_price_changed_, Properties.Resources.Update_Basket_Item, MessageBoxButton.OK, MessageBoxImage.Information);
                                GetTotal();
                                ShowTax();
                                ResetQty();
                            }
                        }
                    }
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        /// Change Item Price in Cart
        private bool ChangeProductPriceOfBasket(int PID)
        {
            if (dtblPOS.Rows.Count > 0)
            {
                bool blUpdate = false;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                        || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")
                        || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                    if (GeneralFunctions.fnInt32(dr["ID"].ToString()) != PID) continue;
                    string refType = "";
                    string refOHQty = "";
                    string refNQty = "";
                    string refPrice = "";
                    string refNPrice = "";
                    string refCost = "";
                    string refPrompt = "";
                    string refDP = "";
                    string refAge = "";
                    string refRentMI = "";
                    string refRentHR = "";
                    string refRentHDY = "";
                    string refRentDY = "";
                    string refRentWK = "";
                    string refRentMN = "";
                    string refRentDeposit = "";
                    string refRentMinHR = "";
                    string refRentMinAmt = "";
                    string refRepairAmt = "";
                    string refRepairPromptAmt = "";
                    string refRepairPromptTag = "";
                    string refRentPrompt = "";
                    string refUOM = "";
                    string refExpiry = "";



                    FetchProduct(GeneralFunctions.fnInt32(dr["ID"].ToString()), strDiscountLevel, intUsePriceLevel,
                                ref refType, ref refOHQty, ref refNQty, ref refPrice, ref refNPrice,
                                ref refCost, ref refPrompt, ref refDP, ref refAge,
                                ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY, ref refRentWK,
                                ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt, ref refRentPrompt,
                                ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);



                    if (GeneralFunctions.fnDouble(dr["RATE"].ToString()).ToString("f3") != GeneralFunctions.fnDouble(refPrice.ToString()).ToString("f3"))
                    {
                        double dblRate = 0;
                        double dblPrice = 0;
                        dblRate = GeneralFunctions.fnDouble(refPrice);
                        int intQty = GeneralFunctions.fnInt32(dr["QTY"].ToString());

                        dr["QTY"] = Convert.ToString(intQty);
                        dr["RATE"] = dblRate.ToString();
                        dr["PRICE"] = Convert.ToDecimal((intQty) * dblRate).ToString();
                        dr["PRODUCTTYPE"] = refType;
                        dr["ONHANDQTY"] = GeneralFunctions.fnDouble(refOHQty).ToString();
                        dr["NORMALQTY"] = GeneralFunctions.fnDouble(refNQty).ToString();
                        dr["NRATE"] = GeneralFunctions.fnDouble(refNPrice).ToString();
                        dr["COST"] = GeneralFunctions.fnDouble(refCost).ToString();
                        blUpdate = true;
                    }
                }

                if (blUpdate)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }
        private void btnUsePrice_Click(object sender, RoutedEventArgs e)
        {
            btnUsePriceClick(sender, e);
        }
        public void btnUsePriceClick(object sender, EventArgs e)
        {
            if (IsDonationRecordExistsInCart()) return;

            if (!CheckFunctionButton("31z2"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSUsePriceLevelDlg frm_POSUsePriceLevelDlg = new frm_POSUsePriceLevelDlg();
            try
            {
                frm_POSUsePriceLevelDlg.FunctionBtnAccess = blFunctionBtnAccess;
                frm_POSUsePriceLevelDlg.SuperUserID = intSuperUserID;
                frm_POSUsePriceLevelDlg.ShowDialog();
                if (frm_POSUsePriceLevelDlg.DialogResult == true)
                {
                    if (frm_POSUsePriceLevelDlg.ChangeFlag)
                    {
                        if ((Settings.PriceLevelForOneTime == "N") && (Settings.PriceLevelForThisSale == "N"))
                            intUsePriceLevel = Settings.UsePriceLevel;
                        else
                            intUsePriceLevel = Settings.TempPriceLevel;
                        if (dtblPOS.Rows.Count > 0)
                        {
                            if (Settings.PriceLevelForOneTime == "N")
                            {
                                RearrangeProductAsCustomerChange();
                                new MessageBoxWindow().Show(Properties.Resources.Item_s__in_the_Basket_Refreshed_Successfully_as_Price_Level_changed_, Properties.Resources.Update_Basket_Item, MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                        }
                    }
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }

        private void btnFastCash_Click(object sender, RoutedEventArgs e)
        {
            btnFastCashClick(sender, e);
        }
        public void btnFastCashClick(object sender, EventArgs e)
        {
            if (strCurrentServiceType != "Sales") return;

            try
            {
                Cursor = System.Windows.Input.Cursors.Wait;
                if ((intCustID == 0) && (Settings.CustomerInfo == 2))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Customer_required_for_Fast_Cash, "POS", MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtCust);
                    CloseMoreFunctions();
                    return;
                }
                if (intCustID > 0)
                {
                    if (!CheckActiveCustomer(intCustID))
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Transaction_is_possible_for_active_customer_only, Properties.Resources.Customer_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        GeneralFunctions.SetFocus(txtCust);
                        CloseMoreFunctions();
                        return;
                    }
                }
                if (dtblPOS.Rows.Count == 0)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Nothing_to_Tender_, Properties.Resources.Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                else
                {
                    CheckStockBeforeTender();
                    if (dtblZeroStock.Rows.Count > 0)
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSOutOfStockDlg frm_POSOutOfStockDlg = new frm_POSOutOfStockDlg();
                        try
                        {
                            frm_POSOutOfStockDlg.Stock = dtblZeroStock;
                            frm_POSOutOfStockDlg.ShowDialog();
                            if (frm_POSOutOfStockDlg.DialogResult == true)
                            {
                                if (new MessageBoxWindow().Show("Are you want to remove out of stock products from the cart?", "Stock Validation", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                                {
                                    RemoveProductFromCart();
                                    /// Set UP/Down Button to move cursor through Cart Item
                                    EnableDisableButton(btnUP, btnDown, gridControl1);
                                    GetTotal(); /// Calculate and Display Cart Total
                                    ShowTax(); /// Calculate and Display Taxes of Cart Items
                                    ResetQty();  /// Reset Item Quantity
                                }
                            }
                        }
                        finally
                        {
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                        GeneralFunctions.SetFocus(txtSKU);
                        CloseMoreFunctions();
                    }
                }
                if (dtblZeroStock.Rows.Count > 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }

                if (dtblPOS.Rows.Count == 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                if (CheckZeroQuantity())
                {
                    if (new MessageBoxWindow().Show(Properties.Resources.Items_with_qty__0__in_the_cart__Do_you_want_to_continue_, Properties.Resources.Validation, MessageBoxButton.YesNo, MessageBoxImage.Information) == MessageBoxResult.No)
                    {
                        GeneralFunctions.SetFocus(txtSKU);
                        CloseMoreFunctions();
                        return;
                    }
                }

                int ccnt = 0;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if (dr["PRODUCTTYPE"].ToString() == "C") ccnt++;
                }
                if (ccnt == dtblPOS.Rows.Count)
                {
                    new MessageBoxWindow().Show(Properties.Resources.No_item_selected_for_tendering, Properties.Resources.Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                if (Settings.DemoVersion == "Y")
                {
                    if (!ContinueWithDemoVersion())
                    {
                        new MessageBoxWindow().Show(Properties.Resources.DEMO_Version_does_not_permit_more_invoices_, Properties.Resources.DEMOVERSION, MessageBoxButton.OK, MessageBoxImage.Information);
                        Settings.PriceLevelForOneTime = "N";
                        Settings.PriceLevelForThisSale = "N";
                        CloseMoreFunctions();
                        return;
                    }
                }

                if (blWorkOrder)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Fast_Cash_option_can_not_be_used_for_Work_Order_Transaction_, Properties.Resources.Work_Order, MessageBoxButton.OK, MessageBoxImage.Information);
                    CloseMoreFunctions();
                    return;
                }

                int intINV = 0;
                string srterrmsg = "";
                PosDataObject.POS objpos = new PosDataObject.POS();
                objpos.Connection = SystemVariables.Conn;
                objpos.EmployeeID = 0;
                objpos.CustomerID = intCustID;
                objpos.TransType = 1; // sales
                objpos.ReceiptCnt = 1;
                objpos.Status = 3;
                objpos.Tax = Convert.ToDouble(numTax.Text);
                double tempcoupon = 0;
                //CouponCalculation(dtblPOS, ref tempcoupon);
                //dblCouponAmount = 0;
                dblCouponPerc = 0;
                dblCouponApplicableTotal = 0;

                CouponCalculation(dtblPOS, ref tempcoupon, ref dblCouponPerc, ref dblCouponApplicableTotal);

                double totfee = 0;
                double totfeetax = 0;

                FeesCalculation(dtblPOS, ref totfee, ref totfeetax);

                objpos.TotalFees = totfee;
                objpos.TotalFeesTax = totfeetax;

                double tempdtx = 0;
                DTaxCalculation(dtblPOS, ref tempdtx);
                objpos.DTaxID = CustDTaxID;
                objpos.DTax = tempdtx;

                objpos.Coupon = tempcoupon;
                objpos.CouponPerc = dblCouponPerc;
                objpos.Discount = Convert.ToDouble(numDiscount.Text);
                objpos.DiscountReason = "";
                objpos.TotalSale = Convert.ToDouble(numTotal.Text);

                objpos.ItemDataTable = FastCashFinalDataTable();

                objpos.TaxID1 = intTaxID1;
                objpos.TaxID2 = intTaxID2;
                objpos.TaxID3 = intTaxID3;
                objpos.Tax1 = dblTax1;
                objpos.Tax2 = dblTax2;
                objpos.Tax3 = dblTax3;
                objpos.ErrorMsg = "";
                objpos.ChangeAmount = 0;
                objpos.SuspendInvoiceNo = intSuspendInvNo;
                objpos.CustomerOrdering = blOpenCustomerOrder;
                objpos.CustomerOrderNo = CurrentCustomerOrderID;
                objpos.ChangedByAdmin = intSuperUserID;
                objpos.FunctionButtonAccess = blFunctionBtnAccess;

                AddTenderForFastCash();
                objpos.TenderDataTable = dtblTender;
                // static value
                objpos.StoreID = 1;
                objpos.RegisterID = 1;
                objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
                objpos.TransNoteNo = 0;
                objpos.LayawayNo = 0;
                objpos.TransMSeconds = 0;
                // static value
                objpos.TerminalName = Settings.TerminalName;
                dtblForStockUpdate = FastCashFinalDataTable();

                objpos.Return = blReturnItem;
                objpos.NewLayaway = false;
                objpos.Layaway = false;
                objpos.LayawayRefund = false;
                objpos.ApptDataTable = dtblAppt;

                objpos.ServiceType = strCurrentServiceType;
                objpos.GCCentralFlag = Settings.CentralExportImport;
                objpos.GCOPStore = Settings.StoreCode;

                objpos.OperateStore = Settings.StoreCode;
                objpos.CustomerDOB = dtCustomerDOB;

                objpos.BeginTransaction();
                if (objpos.CreateInvoice())
                {
                    intINV = objpos.ID;

                }
                objpos.EndTransaction();
                srterrmsg = objpos.ErrorMsg;
                if (srterrmsg == "")
                {
                    if (Settings.ReceiptPrinterName != "")
                    {
                        if (IsOpenCashDrawer())
                        {
                            try
                            {
                                RawPrinterHelper.OpenCashDrawer1(Settings.ReceiptPrinterName, Settings.CashDrawerCode);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (dtblForStockUpdate != null)
                    {
                        if (dtblForStockUpdate.Rows.Count > 0)
                        {
                            string strId = ""; int intStock = 0;
                            //Control[] findctrl;
                            PosDataObject.POS objPOS = new PosDataObject.POS();
                            objPOS.Connection = SystemVariables.Conn;

                            foreach (DataRow dr in dtblForStockUpdate.Rows)
                            {
                                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                                    || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "X")
                                    || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                                // avoid gift certificate, account payment
                                strId = dr["ID"].ToString();
                                if (strId != "")
                                {
                                    /*Block By Rajib for (int i = 0; i < POSItemsListBox.Items.Count; i++)
                                    {
                                        ListBoxItem lbi = POSItemsListBox.Items[i] as ListBoxItem;
                                        if ((lbi.Tag as POSItem).ItemID.ToString() == strId)
                                        {
                                            (lbi.Tag as POSItem).CurrentStock = intStock;
                                            break;
                                        }

                                    }Block By Rajib*/
                                    //findctrl = pnlCat.Controls.Find(strId, true);
                                    //if (findctrl.Length > 0)
                                    //{
                                    //    if (findctrl != null)
                                    //    {
                                    //        if (findctrl[0] is POSControls.POSItem)
                                    //        {
                                    //            intStock = objPOS.GetStockforItem(GeneralFunctions.fnInt32(strId));
                                    //            (findctrl[0] as POSControls.POSItem).CurrentStock = intStock;
                                    //        }
                                    //    }
                                    //}
                                }
                            }
                        }
                    }
                    blInitAutoSignOut = true;
                    blInitAutoSignOutAfterTender = true;
                    InitializeScreen();
                }

                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
            }
            finally
            {
                Cursor = System.Windows.Input.Cursors.Arrow;
            }

        }
        // Add tender data for Fash Cash Transaction

        private void AddTenderForFastCash()
        {
            PosDataObject.TenderTypes tend = new PosDataObject.TenderTypes();
            tend.Connection = SystemVariables.Conn;
            int TenderID = tend.FetchCashID();
            dtblTender.Rows.Clear();
            dtblTender.Rows.Add(new object[] { TenderID.ToString(), "Cash", numTotal.Text, "", "", "", "0", "", "" });
        }
        // check for open cash drawer access

        private bool IsOpenCashDrawer()
        {
            bool val = false;
            if (SystemVariables.CurrentUserID <= 0) return true;
            if (blFunctionBtnAccess) val = SecurityPermission.AcssOpenCashDrawer;
            else
            {
                if (intSuperUserID <= 0) val = true;
                else
                {
                    PosDataObject.Security objsec = new PosDataObject.Security();
                    objsec.Connection = SystemVariables.Conn;
                    val = objsec.GetAccessCashdrawerForSuperuser(intSuperUserID);
                }
            }

            return val;
        }
        private void btnGiftCertBalance_Click(object sender, RoutedEventArgs e)
        {
            btnGiftCertBalanceClick(sender, e);
        }
        public void btnGiftCertBalanceClick(object sender, EventArgs e)
        {
            blurGrid.Visibility = Visibility.Visible;
            frm_POSGCBal frm_POSGCBal = new frm_POSGCBal();
            try
            {
                frm_POSGCBal.CustomerID = intCustID;
                frm_POSGCBal.ShowDialog();
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }

            CloseMoreFunctions();
        }

        private async void btnINVNotes_Click(object sender, RoutedEventArgs e)
        {
            await btnINVNotesClick(sender, e);
        }
        public async Task btnINVNotesClick(object sender, EventArgs e)
        {


            //if (this.ActiveControl == gridControl1)
            //{
            int intRowID = 0;
            if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0)
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            intRowID = gridView1.FocusedRowHandle;
            if (intRowID < 0)
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSNotesDlg frm_POSNotesDlg = new frm_POSNotesDlg();
            try
            {
                frm_POSNotesDlg.Notes = (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colNotes)).ToString();
                frm_POSNotesDlg.ShowDialog();
                if (frm_POSNotesDlg.DialogResult == true)
                {
                    gridControl1.SetCellValue(gridView1.FocusedRowHandle, colNotes, frm_POSNotesDlg.Notes);
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }

        private void btnWorkOrder_Click(object sender, RoutedEventArgs e)
        {
            btnWorkOrderClick(sender, e);
        }
        public void btnWorkOrderClick(object sender, EventArgs e)
        {

            if (strCurrentServiceType != "Sales") return;
            if (blReturnItem) return;
            if (blResumeTransaction) return;
            if (!CheckFunctionButton("31o")) // permission
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            if (dtblPOS.Rows.Count > 0)  // New Work Order
            {
                if (!ValidItemForWorkOrder())
                {
                    new MessageBoxWindow().Show("Invalid work order items found in cart", "Work Order", MessageBoxButton.OK, MessageBoxImage.Information);
                    CloseMoreFunctions();
                    return;
                }

                CheckStockBeforeTender();

                if (dtblZeroStock.Rows.Count > 0)
                {
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSOutOfStockDlg frm_POSOutOfStockDlg = new frm_POSOutOfStockDlg();
                    try
                    {
                        frm_POSOutOfStockDlg.Stock = dtblZeroStock;
                        frm_POSOutOfStockDlg.ShowDialog();
                        if (frm_POSOutOfStockDlg.DialogResult == true)
                        {
                            if (new MessageBoxWindow().Show("Are you want to remove out of stock products from the cart?", "Stock Validation", MessageBoxButton.YesNo, MessageBoxImage.Question)
                                == MessageBoxResult.Yes)
                            {
                                RemoveProductFromCart();
                                /// Set UP/Down Button to move cursor through Cart Item
                                EnableDisableButton(btnUP, btnDown, gridControl1);
                                GetTotal(); /// Calculate and Display Cart Total
                                ShowTax(); /// Calculate and Display Taxes of Cart Items
                                ResetQty();  /// Reset Item Quantity
                            }
                        }
                    }
                    finally
                    {
                        blurGrid.Visibility = Visibility.Collapsed;
                    }
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                }

                if (dtblZeroStock.Rows.Count > 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }

                /*if (Settings.ReceiptPrinterName == "")
                {
                    DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                    CloseMoreFunctions();
                    return;
                }*/


                int intINV = 0;
                string srterrmsg = "";
                PosDataObject.POS objpos = new PosDataObject.POS();
                objpos.Connection = SystemVariables.Conn;
                objpos.EmployeeID = 0;
                objpos.CustomerID = intCustID;
                objpos.TransType = 11; // new work order
                objpos.ReceiptCnt = 1;
                objpos.Status = 2;
                objpos.Tax = Convert.ToDouble(numTax.Text);
                double tempcoupon = 0;
                dblCouponPerc = 0;
                dblCouponApplicableTotal = 0;
                CouponCalculation(dtblPOS, ref tempcoupon, ref dblCouponPerc, ref dblCouponApplicableTotal);

                double tempFeecpn = 0;
                double tempFeecpntx = 0;
                FeesCouponCalculation(dtblPOS, ref tempFeecpn, ref dblFeesCouponPerc, ref dblFeesCouponApplicableTotal, ref tempFeecpntx);
                objpos.TotalFeesCoupon = tempFeecpn;
                objpos.TotalFeesCouponTax = tempFeecpntx;
                objpos.Coupon = tempcoupon;
                objpos.CouponPerc = dblCouponPerc;
                objpos.Discount = Convert.ToDouble(numDiscount.Text);
                objpos.DiscountReason = "";
                objpos.TotalSale = Convert.ToDouble(numTotal.Text);
                objpos.ItemDataTable = FinalDataTable();
                objpos.TaxID1 = intTaxID1;
                objpos.TaxID2 = intTaxID2;
                objpos.TaxID3 = intTaxID3;
                objpos.Tax1 = dblTax1;
                objpos.Tax2 = dblTax2;
                objpos.Tax3 = dblTax3;
                objpos.ErrorMsg = "";

                objpos.SuspendInvoiceNo = intSuspendInvNo;

                objpos.ChangedByAdmin = intSuperUserID;
                objpos.FunctionButtonAccess = blFunctionBtnAccess;
                // static value
                objpos.StoreID = 1;
                objpos.RegisterID = 1;
                objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
                objpos.TransNoteNo = 0;
                objpos.LayawayNo = 0;
                objpos.TransMSeconds = 0;
                // static value
                objpos.TerminalName = Settings.TerminalName;

                objpos.GCCentralFlag = Settings.CentralExportImport;
                objpos.GCOPStore = Settings.StoreCode;

                objpos.OperateStore = Settings.StoreCode;

                objpos.BeginTransaction();
                if (objpos.CreateInvoice())
                {
                    blInitAutoSignOut = true;
                    intINV = objpos.SuspendInvoiceNo;

                }
                objpos.EndTransaction();
                srterrmsg = objpos.ErrorMsg;
                if (srterrmsg == "")
                {
                    new MessageBoxWindow().Show("Work Order # " + intINV.ToString() + " has been generated", Properties.Resources.Work_Order_Transaction, MessageBoxButton.OK, MessageBoxImage.Information);

                    blurGrid.Visibility = Visibility.Visible;
                    frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                    try
                    {
                        frm_POSInvoicePrintDlg.InvNo = intINV;
                        frm_POSInvoicePrintDlg.PrintType = "WorkOrder";
                        frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                        frm_POSInvoicePrintDlg.ShowDialog();
                    }
                    finally
                    {
                        blurGrid.Visibility = Visibility.Collapsed;
                    }

                    InitializeScreen();
                    CloseMoreFunctions();
                    return;
                }
            }

            if (dtblPOS.Rows.Count == 0)  // Payment Work Order
            {
                blurGrid.Visibility = Visibility.Visible;
                frm_POSWorkOrderDlg frm_POSWorkOrderDlg = new frm_POSWorkOrderDlg();
                try
                {
                    frm_POSWorkOrderDlg.MainScreenCustID = intCustID;
                    frm_POSWorkOrderDlg.ShowDialog();
                    if (frm_POSWorkOrderDlg.DialogResult == true)
                    {
                        intSuspendInvNo = frm_POSWorkOrderDlg.SuspendInv;
                        intMaxInvNo = intSuspendInvNo;
                        lbRedTop.Text = "Invoice #  " + intMaxInvNo.ToString() + "  ";
                        AddDatatableWithWorkOrderData();
                        blWorkOrder = true;
                    }
                }
                finally
                {
                    blurGrid.Visibility = Visibility.Collapsed;
                }
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
            }
        }
        private void AddDatatableWithWorkOrderData()
        {
            DataTable dtbl = new DataTable();
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            dtbl = objPOS.FetchWorkOrderRecord(intSuspendInvNo);
            string strUOMCount = "0";
            string strUOMPrice = "";
            string strUOMDesc = "";

            string strMatxOID = "";
            string strMatxOV1 = "";
            string strMatxOV2 = "";
            string strMatxOV3 = "";

            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";

            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRentPrompt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";

            int intfocusrow = 0;
            double intQty = 0;
            double dblPrice = 0;
            string strselectid = "";
            string strDL = "";

            string refUOM = "";
            string refExpiry = "";
            int rowno = 0;
            foreach (DataRow dr in dtbl.Rows)
            {
                if (intfocusrow == 0)
                {
                    intCustID = GeneralFunctions.fnInt32(dr["CustomerID"].ToString());
                    if (intCustID > 0)
                    {
                        blChangeCustomer = true;
                        string refTaxExempt = "";
                        string refDiscountLevel = "";
                        string refTaxID = "";
                        string refStoreCr = "";
                        string refCID = "";
                        string refCName = "";
                        string refCAdd = "";
                        double dblBalance = 0;
                        string refARCredit = "";
                        string refPOSNotes = "";

                        int refDTaxID = 0;
                        string refDTax = "";
                        double refDTaxRate = 0;
                        int refDTaxType = 0;

                        FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd, ref refTaxExempt,
                            ref refDiscountLevel, ref refTaxID, ref refStoreCr, ref refARCredit, ref refPOSNotes
                            , ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);


                        CustDTaxID = refDTaxID;
                        CustDTaxName = refDTax;
                        CustDTaxRate = refDTaxRate;
                        CustDTaxType = refDTaxType;
                        strTaxExempt = refTaxExempt;
                        strDiscountLevel = refDiscountLevel.Trim();
                        if (strDiscountLevel == "") strDiscountLevel = "A";
                        dblBalance = GetAccountBalance(intCustID);
                        txtCust.Text = refCID;
                        if (Settings.CentralExportImport == "Y")
                        {
                            string tstr = GetCustomerIssueStore(intCustID);
                            if (tstr != Settings.StoreCode) txtCustStore.Text = tstr;
                        }
                        lbCustNotes.Text = refPOSNotes;

                        lbCustName.Text = refCName;
                        lbCustAddress.Text = refCAdd;
                        ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                        dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                        dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                        dblCustAcctBalance = dblBalance;
                        RearrangeProductAsCustomerChange();
                        GetTotal();
                        ShowTax();
                    }
                }
                strselectid = "";
                strDL = "A";
                if ((dr["ProductType"].ToString() != "G") && (dr["ProductType"].ToString() != "A") && (dr["ProductType"].ToString() != "H") &&
                    (dr["ProductType"].ToString() != "B") && (dr["ProductType"].ToString() != "C") && (dr["ProductType"].ToString() != "Z")
                    && (dr["ProductType"].ToString() != "X") && (dr["ProductType"].ToString() != "O"))
                {
                    if (dr["ProductType"].ToString() == "U")
                    {
                        strUOMCount = dr["UOMCount"].ToString();
                        strUOMPrice = dr["UOMPrice"].ToString();
                        strUOMDesc = dr["UOMDesc"].ToString();
                    }

                    if (dr["ProductType"].ToString() == "M")
                    {
                        strMatxOID = dr["MatrixOptionID"].ToString();
                        strMatxOV1 = dr["OptionValue1"].ToString();
                        strMatxOV2 = dr["OptionValue2"].ToString();
                        strMatxOV3 = dr["OptionValue3"].ToString();
                    }

                    strselectid = dr["ProductID"].ToString();

                    if (dr["CustomerID"].ToString() != "0") strDL = dr["DiscountLevel"].ToString();

                    FetchProduct(GeneralFunctions.fnInt32(strselectid), strDL, intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                                    ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI,
                                    ref refRentHR, ref refRentHDY, ref refRentDY, ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR,
                                    ref refRentMinAmt, ref refRentPrompt, ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

                    if (GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) > 0) refPrice = dr["NewPrice"].ToString();

                    intQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblPrice = GeneralFunctions.fnDouble(refPrice);
                    double tempprice = 0;
                    rowno++;
                    if (refType == "U")
                    {
                        if (dr["DiscountID"].ToString() != "0")
                            tempprice = (intQty * GeneralFunctions.fnDouble(strUOMPrice)) - GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        else
                            tempprice = (intQty * GeneralFunctions.fnDouble(strUOMPrice));

                        dtblPOS.Rows.Add(new object[] {
                                              dr["ProductID"].ToString(),
                                              GetProductDescInCart1(dr["Description"].ToString()+ " * "+ strUOMDesc,dr["DiscountID"].ToString(),dr["FeesID"].ToString(),dr["BuyNGetFreeCategory"].ToString()),
                                              refType,refOHQty,refNQty,refCost,GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),GeneralFunctions.GetDecimalLength(dr["Qty"].ToString()).ToString(),dr["ProductType"].ToString()),strUOMPrice,refNPrice,tempprice.ToString(),
                                              strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"",
                                              dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                              dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                              GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                              "","","",
                                              GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                              dr["Taxable1"].ToString(),
                                              dr["Taxable2"].ToString(),
                                              dr["Taxable3"].ToString(),
                                              "Sales","NA","0","0","0","","","",
                                              0,0,0,0,0,0,0,0,0,
                                              GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                              dr["MixMatchFlag"].ToString(),
                                              dr["MixMatchType"].ToString(),
                                              GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                              dr["MixMatchLast"].ToString(),
                                              dr["FeesID"].ToString(),
                                              dr["FeesLogic"].ToString(),
                                              dr["FeesValue"].ToString(),
                                              dr["FeesTaxRate"].ToString(),
                                              dr["Fees"].ToString(),
                                              dr["FeesTax"].ToString(),
                                              dr["FeesText"].ToString(),
                                              dr["FeesQty"].ToString(),
                                              dr["SalePriceID"].ToString(),
                                              GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                              dr["EditFlag"].ToString(),
                                              dr["PromptPrice"].ToString(),
                                              dr["BuyNGetFreeHeaderID"].ToString(),
                                              dr["BuyNGetFreeCategory"].ToString(),
                                              rowno.ToString(),
                                              dr["BuyNGetFreeName"].ToString(),0,
                                              GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                              dr["UOM"].ToString(),"","","","","N"});
                    }
                    else if (refType == "M")
                    {
                        if (dr["DiscountID"].ToString() != "0")
                            tempprice = (intQty * GeneralFunctions.fnDouble(refPrice)) - GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        else
                            tempprice = (intQty * GeneralFunctions.fnDouble(refPrice));
                        dtblPOS.Rows.Add(new object[] {   dr["ProductID"].ToString(),
                                              GetProductDescInCart1(dr["Description"].ToString(),dr["DiscountID"].ToString(),dr["FeesID"].ToString(),dr["BuyNGetFreeCategory"].ToString()),
                                              refType,refOHQty,refNQty,refCost,GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),GeneralFunctions.GetDecimalLength(dr["Qty"].ToString()).ToString(),dr["ProductType"].ToString()),refPrice,refNPrice,tempprice.ToString(),
                                              "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"",
                                              dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                              dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                "","","",
                                                GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                dr["Taxable1"].ToString(),
                                                dr["Taxable2"].ToString(),
                                                dr["Taxable3"].ToString(),
                                              "Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                              dr["MixMatchFlag"].ToString(),
                                              dr["MixMatchType"].ToString(),
                                              GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                              dr["MixMatchLast"].ToString(),
                                              dr["FeesID"].ToString(),
                                              dr["FeesLogic"].ToString(),
                                              dr["FeesValue"].ToString(),
                                              dr["FeesTaxRate"].ToString(),
                                              dr["Fees"].ToString(),
                                              dr["FeesTax"].ToString(),
                                              dr["FeesText"].ToString(),
                                              dr["FeesQty"].ToString(),
                                              dr["SalePriceID"].ToString(),
                                              GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                              dr["EditFlag"].ToString(),
                                              dr["PromptPrice"].ToString(),
                                              dr["BuyNGetFreeHeaderID"].ToString(),
                                              dr["BuyNGetFreeCategory"].ToString(),
                                              rowno.ToString(),
                                              dr["BuyNGetFreeName"].ToString(),0,
                                              GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                              dr["UOM"].ToString(),"","","","","N"});
                    }
                    else
                    {
                        if (dr["DiscountID"].ToString() != "0")
                            tempprice = (intQty * GeneralFunctions.fnDouble(refPrice)) - GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        else
                            tempprice = (intQty * GeneralFunctions.fnDouble(refPrice));
                        dtblPOS.Rows.Add(new object[] { dr["ProductID"].ToString(),
                                              GetProductDescInCart1(dr["Description"].ToString(),dr["DiscountID"].ToString(),dr["FeesID"].ToString(),dr["BuyNGetFreeCategory"].ToString()),
                                              refType,refOHQty,refNQty,refCost,GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),GeneralFunctions.GetDecimalLength(dr["Qty"].ToString()).ToString(),dr["ProductType"].ToString()),refPrice,refNPrice,tempprice.ToString(),
                                              dr["UOMCOUNT"].ToString(),"0","0","","","","",GetUniqueString(),refDP,"",
                                              dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                              dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                "","","",
                                                GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                dr["Taxable1"].ToString(),
                                                dr["Taxable2"].ToString(),
                                                dr["Taxable3"].ToString(),
                                              "Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                              dr["MixMatchFlag"].ToString(),
                                              dr["MixMatchType"].ToString(),
                                              GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                              dr["MixMatchLast"].ToString(),
                                              dr["FeesID"].ToString(),
                                              dr["FeesLogic"].ToString(),
                                              dr["FeesValue"].ToString(),
                                              dr["FeesTaxRate"].ToString(),
                                              dr["Fees"].ToString(),
                                              dr["FeesTax"].ToString(),
                                              dr["FeesText"].ToString(),
                                              dr["FeesQty"].ToString(),
                                              dr["SalePriceID"].ToString(),
                                              GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                              dr["EditFlag"].ToString(),
                                              dr["PromptPrice"].ToString(),
                                              dr["BuyNGetFreeHeaderID"].ToString(),
                                              dr["BuyNGetFreeCategory"].ToString(),
                                              rowno.ToString(),
                                              dr["BuyNGetFreeName"].ToString(),0,
                                              GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                              dr["UOM"].ToString(),"","","","","N"});
                    }
                    intfocusrow++;
                }
                else
                {
                    if (dr["ProductType"].ToString() == "A")
                    {
                        dtblPOS.Rows.Add(new object[] { dr["ProductID"].ToString(),"Account Payment","A","0","0","0",
                                              GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),GeneralFunctions.GetDecimalLength(dr["Qty"].ToString()).ToString(),dr["ProductType"].ToString()),dr["PriceA"].ToString(),dr["PriceA"].ToString(),
                                              dr["PriceA"].ToString(),"0","0","0","","","","",GetUniqueString(),refDP,"",
                                              dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                              dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                "","","",
                                                GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                dr["Taxable1"].ToString(),
                                                dr["Taxable2"].ToString(),
                                                dr["Taxable3"].ToString(),
                                              "Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                              dr["MixMatchFlag"].ToString(),
                                              dr["MixMatchType"].ToString(),
                                              GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                              dr["MixMatchLast"].ToString(),
                                              dr["FeesID"].ToString(),
                                              dr["FeesLogic"].ToString(),
                                              dr["FeesValue"].ToString(),
                                              dr["FeesTaxRate"].ToString(),
                                              dr["Fees"].ToString(),
                                              dr["FeesTax"].ToString(),
                                              dr["FeesText"].ToString(),
                                              dr["FeesQty"].ToString(),
                                              dr["SalePriceID"].ToString(),
                                              GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                              dr["EditFlag"].ToString(),
                                              dr["PromptPrice"].ToString(),
                                              dr["BuyNGetFreeHeaderID"].ToString(),
                                              dr["BuyNGetFreeCategory"].ToString(),
                                              rowno.ToString(),
                                              dr["BuyNGetFreeName"].ToString(),0,
                                              GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                              dr["UOM"].ToString(),"","","","","N"});
                    }

                    if (dr["ProductType"].ToString() == "G")
                    {
                        dtblPOS.Rows.Add(new object[] {
                                            dr["ProductID"].ToString(), dr["Description"].ToString(),
                                            "G","0","0","0", GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),GeneralFunctions.GetDecimalLength(dr["Qty"].ToString()).ToString(),dr["ProductType"].ToString()),
                                            dr["PriceOverride"].ToString(),"0",
                                            dr["PriceOverride"].ToString(),
                                            "0","0","0","","","","",GetUniqueString(),refDP,"",
                                            dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                            dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                            GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                            GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                            GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                            "","","",
                                            GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                            GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                            GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                            dr["Taxable1"].ToString(),
                                            dr["Taxable2"].ToString(),
                                            dr["Taxable3"].ToString(),
                                            "Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                            GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                            dr["MixMatchFlag"].ToString(),
                                            dr["MixMatchType"].ToString(),
                                            GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                            GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                            GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                            dr["MixMatchLast"].ToString(),
                                            dr["FeesID"].ToString(),
                                            dr["FeesLogic"].ToString(),
                                            dr["FeesValue"].ToString(),
                                            dr["FeesTaxRate"].ToString(),
                                            dr["Fees"].ToString(),
                                            dr["FeesTax"].ToString(),
                                            dr["FeesText"].ToString(),
                                            dr["FeesQty"].ToString(),
                                            dr["SalePriceID"].ToString(),
                                            GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                            GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                            GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                            GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                            dr["EditFlag"].ToString(),
                                            dr["PromptPrice"].ToString(),
                                            dr["BuyNGetFreeHeaderID"].ToString(),
                                            dr["BuyNGetFreeCategory"].ToString(),
                                            rowno.ToString(),
                                            dr["BuyNGetFreeName"].ToString(),0,
                                            GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                            GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                            dr["UOM"].ToString(),"","","","","N"});
                    }

                    if (dr["ProductType"].ToString() == "C")
                    {
                        dtblPOS.Rows.Add(new object[] { dr["ProductID"].ToString(), dr["Description"].ToString(),
                                            "C","0","0","0", "999888777","99988863777.00","0",
                                            "99988863777.00","0","0","0","","","","",GetUniqueString(),refDP,"",
                                            dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                            dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                            GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                            GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                            GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                            "","","",
                                            GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                            GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                            GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                            dr["Taxable1"].ToString(),
                                            dr["Taxable2"].ToString(),
                                            dr["Taxable3"].ToString(),
                                            "Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                            GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                            dr["MixMatchFlag"].ToString(),
                                            dr["MixMatchType"].ToString(),
                                            GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                            GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                            GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                            dr["MixMatchLast"].ToString(),
                                            dr["FeesID"].ToString(),
                                            dr["FeesLogic"].ToString(),
                                            dr["FeesValue"].ToString(),
                                            dr["FeesTaxRate"].ToString(),
                                            dr["Fees"].ToString(),
                                            dr["FeesTax"].ToString(),
                                            dr["FeesText"].ToString(),
                                            dr["FeesQty"].ToString(),
                                            dr["SalePriceID"].ToString(),
                                            GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                            GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                            GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                            GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                            dr["EditFlag"].ToString(),
                                            dr["PromptPrice"].ToString(),
                                            dr["BuyNGetFreeHeaderID"].ToString(),
                                            dr["BuyNGetFreeCategory"].ToString(),
                                            rowno.ToString(),
                                            dr["BuyNGetFreeName"].ToString(),0,
                                            GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                            GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                            dr["UOM"].ToString(),"","","","","N"});
                    }

                    if (dr["ProductType"].ToString() == "H")
                    {
                        dtblPOS.Rows.Add(new object[] { dr["ProductID"].ToString(), dr["Description"].ToString(),
                                            "H","0","0","0", "999888777","99988863777.00","0",
                                            "99988863777.00","0","0","0","","","","",GetUniqueString(),refDP,"",
                                            dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                            dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                "","","",
                                                GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                dr["Taxable1"].ToString(),
                                                dr["Taxable2"].ToString(),
                                                dr["Taxable3"].ToString(),
                                            "Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                            GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                            dr["MixMatchFlag"].ToString(),
                                            dr["MixMatchType"].ToString(),
                                            GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                            GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                            GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                            dr["MixMatchLast"].ToString(),
                                            dr["FeesID"].ToString(),
                                            dr["FeesLogic"].ToString(),
                                            dr["FeesValue"].ToString(),
                                            dr["FeesTaxRate"].ToString(),
                                            dr["Fees"].ToString(),
                                            dr["FeesTax"].ToString(),
                                            dr["FeesText"].ToString(),
                                            dr["FeesQty"].ToString(),
                                            dr["SalePriceID"].ToString(),
                                            GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                            GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                            GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                            GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                            dr["EditFlag"].ToString(),
                                            dr["PromptPrice"].ToString(),
                                            dr["BuyNGetFreeHeaderID"].ToString(),
                                            dr["BuyNGetFreeCategory"].ToString(),
                                            rowno.ToString(),
                                            dr["BuyNGetFreeName"].ToString(),0,
                                            GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                            GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                            dr["UOM"].ToString(),"","","","","N"});
                    }

                    if (dr["ProductType"].ToString() == "Z")
                    {
                        dtblPOS.Rows.Add(new object[] { dr["ProductID"].ToString(), dr["Description"].ToString(),
                                            "Z","0","0","0", "999888777","99988863777.00","0",
                                            "99988863777.00","0","0","0","","","","",GetUniqueString(),refDP,"",
                                            dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                            dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                "","","",
                                                GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                dr["Taxable1"].ToString(),
                                                dr["Taxable2"].ToString(),
                                                dr["Taxable3"].ToString(),
                                            "Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                            GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                            dr["MixMatchFlag"].ToString(),
                                            dr["MixMatchType"].ToString(),
                                            GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                            GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                            GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                            dr["MixMatchLast"].ToString(),
                                            dr["FeesID"].ToString(),
                                            dr["FeesLogic"].ToString(),
                                            dr["FeesValue"].ToString(),
                                            dr["FeesTaxRate"].ToString(),
                                            dr["Fees"].ToString(),
                                            dr["FeesTax"].ToString(),
                                            dr["FeesText"].ToString(),
                                            dr["FeesQty"].ToString(),
                                            dr["SalePriceID"].ToString(),
                                            GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                            GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                            GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                            GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                            dr["EditFlag"].ToString(),
                                            dr["PromptPrice"].ToString(),
                                            dr["BuyNGetFreeHeaderID"].ToString(),
                                            dr["BuyNGetFreeCategory"].ToString(),
                                            rowno.ToString(),
                                            dr["BuyNGetFreeName"].ToString(),0,
                                            GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                            GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                            dr["UOM"].ToString(),"","","","","N"});
                    }

                    if (dr["ProductType"].ToString() == "B")
                    {
                        string strTaxName1 = FetchTaxName(GeneralFunctions.fnInt32(dr["TaxID1"].ToString()));
                        string strTaxName2 = FetchTaxName(GeneralFunctions.fnInt32(dr["TaxID2"].ToString()));
                        string strTaxName3 = FetchTaxName(GeneralFunctions.fnInt32(dr["TaxID3"].ToString()));

                        dtblPOS.Rows.Add(new object[] { dr["ProductID"].ToString(),
                                              dr["Description"].ToString(),
                                              "B","0","0","0",
                                              GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),GeneralFunctions.GetDecimalLength(dr["Qty"].ToString()).ToString(),dr["ProductType"].ToString()),
                                              dr["PriceA"].ToString(),
                                              "0",
                                              Convert.ToDecimal((GeneralFunctions.fnDouble(dr["Qty"].ToString())*GeneralFunctions.fnDouble(dr["PriceA"].ToString())) - GeneralFunctions.fnDouble(dr["Discount"].ToString())).ToString(),
                                              "0","0","0","","","","",GetUniqueString(),refDP,"",
                                              dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                              dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                              dr["TaxID1"].ToString(),dr["TaxID2"].ToString(),dr["TaxID3"].ToString(),
                                              strTaxName1,strTaxName2,strTaxName3,
                                              dr["TaxRate1"].ToString(),dr["TaxRate2"].ToString(),dr["TaxRate3"].ToString(),
                                              dr["Taxable1"].ToString(),dr["Taxable2"].ToString(),dr["Taxable3"].ToString(),
                                              "Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                              GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                              dr["MixMatchFlag"].ToString(),
                                              dr["MixMatchType"].ToString(),
                                              GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                              dr["MixMatchLast"].ToString(),
                                              dr["FeesID"].ToString(),
                                              dr["FeesLogic"].ToString(),
                                              dr["FeesValue"].ToString(),
                                              dr["FeesTaxRate"].ToString(),
                                              dr["Fees"].ToString(),
                                              dr["FeesTax"].ToString(),
                                              dr["FeesText"].ToString(),
                                              dr["FeesQty"].ToString(),
                                              dr["SalePriceID"].ToString(),
                                              GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                              dr["EditFlag"].ToString(),
                                              dr["PromptPrice"].ToString(),
                                              dr["BuyNGetFreeHeaderID"].ToString(),
                                              dr["BuyNGetFreeCategory"].ToString(),
                                              rowno.ToString(),
                                              dr["BuyNGetFreeName"].ToString(),0,
                                              GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                              dr["UOM"].ToString(),"","","","","N"});
                    }
                }

            }
            if (Settings.PriceLevelForOneTime == "Y")
            {
                Settings.PriceLevelForOneTime = "N";
                intUsePriceLevel = Settings.UsePriceLevel;
            }
            SetCartDisplay();
            gridControl1.ItemsSource = dtblPOS;
            ToggleWithEmptyCart();
            gridView1.FocusedRowHandle = intfocusrow;
            /// Set UP/Down Button to move cursor through Cart Item
            EnableDisableButton(btnUP, btnDown, gridControl1);
            GetTotal(); /// Calculate and Display Cart Total
            ShowTax(); /// Calculate and Display Taxes of Cart Items
        }
        private string GetCustomerIssueStore(int intCID)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            return objPOS.FetchCustomerIssueStore(intCID);
        }
        /// Get information of an item

        private void FetchProduct(int iProdID, string sDiscountLevel, int iUsePriceLevel, ref string refType, ref string refOHQty, ref string refNQty,
                                  ref string refPrice, ref string refNPrice, ref string refCost, ref string refPrompt, ref string refDP,
                                  ref string refAge, ref string refRentMI, ref string refRentHR, ref string refRentHDY, ref string refRentDY, ref string refRentWK,
                                  ref string refRentMN, ref string refRentDeposit, ref string refRentMinHR, ref string refRentMinAmt,
                                  ref string refRentPrompt, ref string refRepairAmt, ref string refRepairPromptAmt, ref string refRepairPromptTag, ref string refUOM, ref string refExpiry)
        {



            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            DataTable dtblProduct = objPOS.FetchProductRecord(iProdID, sDiscountLevel.Trim(), iUsePriceLevel);
            foreach (DataRow dr in dtblProduct.Rows)
            {
                refExpiry = dr["ExpiryDate"].ToString();
                refType = dr["ProductType"].ToString();
                refOHQty = dr["QtyOnHand"].ToString();
                refNQty = dr["NormalQty"].ToString();
                refPrice = dr["Price"].ToString();
                refNPrice = dr["PriceA"].ToString();
                refCost = dr["Cost"].ToString();
                refPrompt = dr["PromptForPrice"].ToString();
                refDP = dr["DecimalPlace"].ToString();
                refAge = dr["MinimumAge"].ToString();

                refRentMI = dr["RentalPerMinute"].ToString();
                refRentHR = dr["RentalPerHour"].ToString();
                refRentHDY = dr["RentalPerHalfDay"].ToString();
                refRentDY = dr["RentalPerDay"].ToString();
                refRentWK = dr["RentalPerWeek"].ToString();
                refRentMN = dr["RentalPerMonth"].ToString();
                refRentDeposit = dr["RentalDeposit"].ToString();
                refRentMinHR = dr["RentalMinHour"].ToString();
                refRentMinAmt = dr["RentalMinAmount"].ToString();
                refRentPrompt = dr["RentalPrompt"].ToString();
                //refRepairAmt = dr["RepairCharge"].ToString();
                //refRepairPromptAmt = dr["RepairPromptForCharge"].ToString();
                refRepairPromptTag = dr["RepairPromptForTag"].ToString();

                refRepairAmt = dr["Price"].ToString();
                refRepairPromptAmt = dr["PromptForPrice"].ToString();

                refUOM = dr["UOM"].ToString();
            }

            dtblProduct.Dispose();
        }
        private string GetProductDescInCart1(string str, string did, string fid, string buyfree)
        {
            if (did != "0")
            {
                if (fid != "0")
                {
                    if (buyfree == "B")
                    {
                        return "\n" + str + "\n" + "\n";
                    }
                    else
                    {
                        return str + "\n" + "\n";
                    }
                }

                else
                {
                    if (buyfree == "B")
                    {
                        return "\n" + str + "\n";
                    }
                    else
                    {
                        return str + "\n";
                    }
                }
            }
            else
            {
                if (fid != "0")
                {
                    if (buyfree == "B")
                    {
                        return "\n" + str + "\n";
                    }
                    else
                    {
                        return str + "\n";
                    }
                }
                else
                {
                    if (buyfree == "B")
                    {
                        return "\n" + str;
                    }
                    else
                    {
                        return str;
                    }
                }
            }
        }
        private string FetchTaxName(int TaxID)
        {
            string strName = "";
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = SystemVariables.Conn;
            DataTable dtbl = objTax.ShowHeaderRecord(TaxID);
            foreach (DataRow dr in dtbl.Rows)
            {
                strName = dr["TaxName"].ToString();
            }
            dtbl.Dispose();
            return strName;
        }
        private void btnPrintLabel_Click(object sender, RoutedEventArgs e)
        {
            btnPrintLabelClick(sender, e);
        }
        public void btnPrintLabelClick(object sender, EventArgs e)
        {


            if (intCustID == 0)
            {
                new MessageBoxWindow().Show(Properties.Resources.No_Customer_selected, Properties.Resources.Print_Customer_Label, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtCust);
                CloseMoreFunctions();
                return;
            }

            if (!CheckFunctionButton("31z4"))
            {
                GeneralFunctions.SetFocus(txtCust);
                CloseMoreFunctions();
                return;
            }

            /*if (Settings.LabelPrinterName == "")
            {
                DocMessage.MsgInformation(Properties.Resources."Please Define Label Printer in Setup.","frmPOSN_msg_PleaseDefineLabelPrinterinSetu"));
                CloseMoreFunctions();
                return;
            }*/
            blurGrid.Visibility = Visibility.Visible;
            frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
            try
            {
                frm_POSInvoicePrintDlg.PrintType = "Customer Label";
                frm_POSInvoicePrintDlg.InvNo = intCustID;
                frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                frm_POSInvoicePrintDlg.ShowDialog();
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }

            CloseMoreFunctions();
        }

        private void btnPrintGiftReceipt_Click(object sender, RoutedEventArgs e)
        {
            btnPrintGiftReceiptClick(sender, e);
        }
        public void btnPrintGiftReceiptClick(object sender, EventArgs e)
        {

            if (!CheckFunctionButton("31z5")) // permission
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSGiftReceiptDlg frm_POSGiftReceiptDlg = new frm_POSGiftReceiptDlg();
            try
            {
                frm_POSGiftReceiptDlg.MainScreenCustID = intCustID;
                frm_POSGiftReceiptDlg.ShowDialog();
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }

        private async void btnCoupon_Click(object sender, RoutedEventArgs e)
        {
            await btnCouponClick(sender, e);
        }
        public async Task btnCouponClick(object sender, EventArgs e)
        {
            if ((strCurrentServiceType == "Repair") || (strCurrentServiceType == "Rent")) return;

            if (blReturnItem) return;

            if (IsDonationRecordExistsInCart()) return;

            string str = await GetDiscountID("Ticket");
            if (str != "")
            {
                frm_POSCouponDlg frm_POSCouponDlg = new frm_POSCouponDlg();
                try
                {
                    frm_POSCouponDlg.POSFormN = this;
                    frm_POSCouponDlg.BrowseType = "Coupons";
                    frm_POSCouponDlg.DiscountOn = "Ticket";
                    frm_POSCouponDlg.DiscData = await GetDiscountID("Ticket");
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSCouponDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                }
                finally
                {
                }
            }

            CloseMoreFunctions();
        }
        private async Task<string> GetDiscountID(string strDiscountType)
        {
            string ret = "";
            if (strDiscountType == "Item")
            {
                int intRowID = 0;
                if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return "";
                }
                intRowID = gridView1.FocusedRowHandle;
                if (intRowID < 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return "";
                }

                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colID))))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return "";
                }

                bool fc = false;
                if (intCustID > 0)
                {
                    if (IsCustomerDiscountApplicable(intCustID)) fc = true;
                }

                PosDataObject.POS objp1 = new PosDataObject.POS();
                objp1.Connection = SystemVariables.Conn;
                if (!fc) objp1.GetItemDiscount(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colID)), DateTime.Now, ref ret);
                if (fc) objp1.GetItemDiscount_Cust(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colID)), intCustID, DateTime.Now, ref ret);
            }

            if (strDiscountType == "Ticket")
            {
                int TotalItem = 0;
                int NonDiscountableItem = 0;

                PosDataObject.POS ob1 = new PosDataObject.POS();
                ob1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                ob1.DeleteRecordFromTempDiscount(Settings.TerminalName);
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                        || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")
                        || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")) continue;

                    if (dr["PRICE"].ToString() == "") continue;
                    TotalItem++;
                    if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString())))
                    {
                        NonDiscountableItem++;
                        continue;
                    }

                    PosDataObject.POS ob2 = new PosDataObject.POS();
                    ob2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    ob2.InsertDataIntoTempDiscount(Settings.TerminalName, GeneralFunctions.fnInt32(dr["ID"].ToString()));
                }
                if ((TotalItem > 0) && (TotalItem > NonDiscountableItem))
                {
                    bool fc = false;
                    if (intCustID > 0)
                    {
                        if (IsCustomerDiscountApplicable(intCustID)) fc = true;
                    }

                    PosDataObject.POS objp2 = new PosDataObject.POS();
                    objp2.Connection = SystemVariables.Conn;

                    if (!fc) objp2.GetTicketDiscount(Settings.TerminalName, DateTime.Now, ref ret);
                    if (fc) objp2.GetTicketDiscountCust(intCustID, Settings.TerminalName, DateTime.Now, ref ret);
                }
            }

            if (strDiscountType == "FeeItem")
            {
                int intRowID = 0;
                if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return "";
                }
                intRowID = gridView1.FocusedRowHandle;
                if (intRowID < 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return "";
                }
                PosDataObject.POS objp1 = new PosDataObject.POS();
                objp1.Connection = SystemVariables.Conn;
                objp1.GetFeesNCharges(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colID)), ref ret);
            }


            if (strDiscountType == "FeeTicket")
            {
                int TotalItem = 0;

                PosDataObject.POS ob1 = new PosDataObject.POS();
                ob1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                ob1.DeleteRecordFromTempDiscount(Settings.TerminalName);
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                        || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")
                        || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")) continue;

                    if (dr["PRICE"].ToString() == "") continue;
                    TotalItem++;

                    PosDataObject.POS ob2 = new PosDataObject.POS();
                    ob2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    ob2.InsertDataIntoTempDiscount(Settings.TerminalName, GeneralFunctions.fnInt32(dr["ID"].ToString()));
                }
                if (TotalItem > 0)
                {
                    bool fc = false;

                    PosDataObject.POS objp2 = new PosDataObject.POS();
                    objp2.Connection = SystemVariables.Conn;

                    if (!fc) objp2.GetTicketFeesNCharges(Settings.TerminalName, ref ret);
                }
            }

            return ret;
        }
        private void btnRentRecall_Click(object sender, RoutedEventArgs e)
        {
            btnRentRecallClick(sender, e);
        }
        public void btnRentRecallClick(object sender, EventArgs e)
        {
            if (Settings.RentService == "N") return;
            if ((blReturnItem) || (blWorkOrder) || (blResumeTransaction) || (blRepairRecall))
            {
                if (dtblPOS.Rows.Count > 0) return;
                else
                {
                    blReturnItem = false;
                    blWorkOrder = false;
                    blResumeTransaction = false;
                    blRepairRecall = false;
                }
            }
            if ((blRentIssued) && (dtblPOS.Rows.Count > 0)) return;
            if ((blRepairIssued) && (dtblPOS.Rows.Count > 0)) return;

            if (intCustID > 0)
            {
                if (!CheckActiveCustomer(intCustID))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Transaction_is_possible_for_active_customer_only, Properties.Resources.Customer_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtCust);
                    CloseMoreFunctions();
                    return;
                }
            }

            if (strCurrentServiceType != "Rent")
            {
                strCurrentServiceType = "Rent";
                blRentIssued = false;
                blRepairIssued = false;
                SetServiceTypeButtonColor();
            }

            blRentRecall = true;
            blRentIssued = false;
            blurGrid.Visibility = Visibility.Visible;
            frm_POSRentalRecallDlg frm_POSRentalRecallDlg = new frm_POSRentalRecallDlg();
            try
            {
                dtblReturnItem = new DataTable();
                frm_POSRentalRecallDlg.MainScreenCustID = intCustID;
                frm_POSRentalRecallDlg.SuperUserID = intSuperUserID;
                frm_POSRentalRecallDlg.FunctionBtnAccess = blFunctionBtnAccess;
                frm_POSRentalRecallDlg.ShowDialog();
                if (frm_POSRentalRecallDlg.DialogResult == true)
                {
                    if (!frm_POSRentalRecallDlg.blReturnTransaction)
                    {
                        RentReturnInv = 0;
                        RentReturnDeposit1 = 0;
                        RentReturnDeposit2 = 0;
                        RentReturnDeposit3 = 0;
                        dtblReturnItem = frm_POSRentalRecallDlg.ReturnItem;
                        RentReturnInv = GeneralFunctions.fnInt32(frm_POSRentalRecallDlg.InvNo);
                        RentReturnDeposit1 = frm_POSRentalRecallDlg.dep1;
                        RentReturnDeposit2 = frm_POSRentalRecallDlg.dep2;
                        RentReturnDeposit3 = frm_POSRentalRecallDlg.dep3;
                        intCustID = frm_POSRentalRecallDlg.CustID;
                        RentCalcFlag = frm_POSRentalRecallDlg.Calc;
                        AddDatatablewithReturnedRentalItem();
                        SetTenderButton();
                    }
                    else
                    {
                        InitializeScreen();
                    }
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);

            CloseMoreFunctions();
        }
        // Assign Cart with Rental Return item(s)

        private void AddDatatablewithReturnedRentalItem()
        {
            dtblPOS.Rows.Clear();

            blChangeCustomer = true;
            string refTaxExempt = "";
            string refDiscountLevel = "";
            string refTaxID = "";
            string refStoreCr = "";
            string refCID = "";
            string refCName = "";
            string refCAdd = "";
            double dblBalance = 0;
            string refARCredit = "";
            string refPOSNotes = "";

            int refDTaxID = 0;
            string refDTax = "";
            double refDTaxRate = 0;
            int refDTaxType = 0;
            if (intCustID > 0)
            {
                FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd, ref refTaxExempt, ref refDiscountLevel,
                            ref refTaxID, ref refStoreCr, ref refARCredit, ref refPOSNotes, ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);
                CustDTaxID = refDTaxID;
                CustDTaxName = refDTax;
                CustDTaxRate = refDTaxRate;
                CustDTaxType = refDTaxType;

                strTaxExempt = refTaxExempt;
                strDiscountLevel = refDiscountLevel.Trim();
                if (strDiscountLevel == "") strDiscountLevel = "A";
                dblBalance = GetAccountBalance(intCustID);
                txtCust.Text = refCID;
                if (Settings.CentralExportImport == "Y")
                {
                    string tstr = GetCustomerIssueStore(intCustID);
                    if (tstr != Settings.StoreCode) txtCustStore.Text = tstr;
                }
                //lbCustID.Text = "Customer ID : " + refCID;
                lbCustName.Text = refCName;
                lbCustAddress.Text = refCAdd;
                lbCustNotes.Text = refPOSNotes;
                blCustNotes = refPOSNotes != "";
                ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                if (blCustNotes) lbcustinfo2.Text = "Check 'Cust Notes' Apps";
                dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                dblCustAcctBalance = dblBalance;
                RearrangeProductAsCustomerChange();
                GetTotal();
                ShowTax();
            }


            double intQty = 0;
            double dblPrice = 0;
            double dblduration = 0;
            int rowno = 0;
            foreach (DataRow dr in dtblReturnItem.Rows)
            {
                rowno++;
                string ss = dr["ID"].ToString();
                intQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                dblduration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());
                double tempprice = 0;
                if (dr["DiscountID"].ToString() != "0") tempprice = (intQty * dblPrice * dblduration) - GeneralFunctions.fnDouble(dr["Discount"].ToString());
                else tempprice = (intQty * dblPrice * dblduration);

                dtblPOS.Rows.Add(new object[] {
                                              dr["ProductID"].ToString(),GetProductDescInCart(dr["Description"].ToString() + "\n",
                                              dr["DiscountID"].ToString(),dr["FEESID"].ToString()),dr["ProductType"].ToString(),"0","0","0",
                                              dr["Qty"].ToString(),dr["Price"].ToString(),dr["Price"].ToString(),
                                              tempprice.ToString(),"0","0","0",dr["ID"].ToString(),"","","",GetUniqueString(),"2","",
                                              dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                              dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),"1",
                                              "0","0","0","","","","0","0","0","N","N","N","Rent",dr["RentType"].ToString(),
                                              dr["RentDuration"].ToString(),dr["Price"].ToString(),
                                              dr["RentDeposit"].ToString(),"","","",
                                              GeneralFunctions.fnInt32(dr["TX1TYPE"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX2TYPE"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX2TYPE"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX1ID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX2ID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX3ID"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TX1"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TX2"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TX3"].ToString()),
                                              0,"","",0,0,0,"",
                                              dr["FEESID"].ToString(),
                                              dr["FEESLOGIC"].ToString(),
                                              dr["FEESVALUE"].ToString(),
                                              dr["FEESTAXRATE"].ToString(),
                                              dr["FEES"].ToString(),
                                              dr["FEESTAX"].ToString(),
                                              dr["FEESTEXT"].ToString(),
                                              dr["FEESQTY"].ToString(),
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              dr["EditFlag"].ToString(),
                                              dr["PromptPrice"].ToString(),
                                              "0","X",rowno.ToString(),"",
                                               0,
                                               dr["Price"].ToString(),
                                              tempprice.ToString(),"","","","","","N"}); // GeneralFunctions.fnInt32(dr["Age"].ToString())
            }
            SetCartDisplay();
            gridControl1.ItemsSource = dtblPOS;
            ToggleWithEmptyCart();
            GetTotal();
            ShowTax();
            ResetQty();
        }
        private void btnFastCC_Click(object sender, RoutedEventArgs e)
        {
            btnFastCCClick(sender, e);
        }
        public void btnFastCCClick(object sender, EventArgs e)
        {
            if (strCurrentServiceType != "Sales") return;

            dtblTender.Rows.Clear();

            if (blReturnItem) return;



            try
            {
                Cursor = System.Windows.Input.Cursors.Wait;
                if ((intCustID == 0) && (Settings.CustomerInfo == 2))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Customer_required_for_Fast_CC, "POS", MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtCust);
                    CloseMoreFunctions();
                    return;
                }
                if (intCustID > 0)
                {
                    if (!CheckActiveCustomer(intCustID))
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Transaction_is_possible_for_active_customer_only, Properties.Resources.Customer_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        GeneralFunctions.SetFocus(txtCust);
                        CloseMoreFunctions();
                        return;
                    }
                }
                if (dtblPOS.Rows.Count == 0)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Nothing_to_Tender_, Properties.Resources.Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                else
                {
                    CheckStockBeforeTender();
                    if (dtblZeroStock.Rows.Count > 0)
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSOutOfStockDlg frm_POSOutOfStockDlg = new frm_POSOutOfStockDlg();
                        try
                        {
                            frm_POSOutOfStockDlg.Stock = dtblZeroStock;
                            frm_POSOutOfStockDlg.ShowDialog();
                            if (frm_POSOutOfStockDlg.DialogResult == true)
                            {
                                if (new MessageBoxWindow().Show("Are you want to remove out of stock products from the cart?", "Stock Validation", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                                {
                                    RemoveProductFromCart();
                                    /// Set UP/Down Button to move cursor through Cart Item
                                    EnableDisableButton(btnUP, btnDown, gridControl1);
                                    GetTotal(); /// Calculate and Display Cart Total
                                    ShowTax(); /// Calculate and Display Taxes of Cart Items
                                    ResetQty();  /// Reset Item Quantity
                                }
                            }
                        }
                        finally
                        {
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                        GeneralFunctions.SetFocus(txtSKU);
                        CloseMoreFunctions();
                    }
                }
                if (dtblZeroStock.Rows.Count > 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }


                if (dtblPOS.Rows.Count == 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                if (CheckZeroQuantity())
                {
                    if (new MessageBoxWindow().Show(Properties.Resources.Items_with_qty__0__in_the_cart__Do_you_want_to_continue_, Properties.Resources.Validation, MessageBoxButton.YesNo, MessageBoxImage.Information) == MessageBoxResult.No)
                    {
                        GeneralFunctions.SetFocus(txtSKU);
                        CloseMoreFunctions();
                        return;
                    }
                }

                int ccnt = 0;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if (dr["PRODUCTTYPE"].ToString() == "C") ccnt++;
                }
                if (ccnt == dtblPOS.Rows.Count)
                {
                    new MessageBoxWindow().Show(Properties.Resources.No_item_selected_for_tendering, Properties.Resources.Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                if (Settings.DemoVersion == "Y")
                {
                    if (!ContinueWithDemoVersion())
                    {
                        new MessageBoxWindow().Show(Properties.Resources.DEMO_Version_does_not_permit_more_invoices_, Properties.Resources.DEMOVERSION, MessageBoxButton.OK, MessageBoxImage.Information);
                        Settings.PriceLevelForOneTime = "N";
                        Settings.PriceLevelForThisSale = "N";
                        CloseMoreFunctions();
                        return;
                    }
                }

                if (blWorkOrder)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Fast_Cash_option_can_not_be_used_for_Work_Order_Transaction_, Properties.Resources.Work_Order, MessageBoxButton.OK, MessageBoxImage.Information);
                    CloseMoreFunctions();
                    return;
                }

                if (Settings.POSCardPayment == "Y")
                {
                    if (Settings.PaymentGateway == 1)
                    {
                        if (Settings.ElementHPAccountID == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_Hosted_Payment_paramters_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }
                    }

                    if (Settings.PaymentGateway == 2)
                    {
                        if (Settings.MercuryHPMerchantID == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_Hosted_Payment_paramters_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }
                    }

                    if (Settings.PaymentGateway == 3)
                    {
                        if (Settings.PrecidiaClientMAC == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_Precidia_Client_MAC_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }
                    }

                    if (Settings.PaymentGateway == 6) // Datacap EMV
                    {
                        if (Settings.DatacapEMVServerIP == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_server_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }

                        if (Settings.DatacapEMVMID == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_MID_in_General_Settings_, "Credit Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }

                        if (Settings.DatacapEMVSecurityDevice == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_Security_Device_in_General_Settings_, "Credit Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }

                        if (Settings.DatacapEMVCOMPort == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_Security_COM_Port_in_General_Settings_, "Credit Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }
                    }


                    if (Settings.PaymentGateway == 7) // POSLink
                    {

                        if (Settings.POSLinkCommType == "")
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Please_setup_POSLink_Communication_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            CloseMoreFunctions();
                            return;
                        }
                    }



                    if (!CardVarify())
                    {
                        if (Settings.PaymentGateway == 6)
                        {
                            CallPadResetCount = 0;
                            CallEMVPadReset();

                            if (CallPadResetCount == 5)
                            {
                                CallPadResetCount = 0;
                                if (Dcap_PPAD_CmdStatus != "Success") new MessageBoxWindow().Show(Dcap_PPAD_CmdStatus + "\n\n" + Dcap_PPAD_TextResponse, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                        }
                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                        {
                            if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                            if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;
                        }
                        PrecidiaDisplayOnError();
                        return;
                    }
                    else
                    {
                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                            PrecidiaResponse = 0;
                    }
                }

                else
                {
                    PosDataObject.TenderTypes tend = new PosDataObject.TenderTypes();
                    tend.Connection = SystemVariables.Conn;
                    int TenderID = tend.FetchCCID();

                    dtblTender.Rows.Add(new object[] { TenderID.ToString(), "Credit Card", numTotal.Text, "", "", "", "0", "", "" });
                }

                double tempamt = 0;

                foreach (DataRow dr in dtblTender.Rows)
                {
                    tempamt = tempamt + GeneralFunctions.fnDouble(dr["AMOUNT"].ToString());
                }

                if (tempamt == Convert.ToDouble(numTotal.Text))
                {
                    int intINV = 0;
                    string srterrmsg = "";
                    PosDataObject.POS objpos = new PosDataObject.POS();
                    objpos.Connection = SystemVariables.Conn;
                    objpos.EmployeeID = 0;
                    objpos.CustomerID = intCustID;
                    objpos.TransType = 1; // sales
                    objpos.ReceiptCnt = 1;
                    objpos.Status = 3;
                    objpos.Tax = Convert.ToDouble(numTax.Text);
                    double tempcoupon = 0;
                    //CouponCalculation(dtblPOS, ref tempcoupon);
                    //dblCouponAmount = 0;
                    dblCouponPerc = 0;
                    dblCouponApplicableTotal = 0;
                    objpos.CustomerOrdering = blOpenCustomerOrder;
                    objpos.CustomerOrderNo = CurrentCustomerOrderID;
                    CouponCalculation(dtblPOS, ref tempcoupon, ref dblCouponPerc, ref dblCouponApplicableTotal);

                    double totfee = 0;
                    double totfeetax = 0;

                    FeesCalculation(dtblPOS, ref totfee, ref totfeetax);

                    objpos.TotalFees = totfee;
                    objpos.TotalFeesTax = totfeetax;

                    double tempdtx = 0;
                    DTaxCalculation(dtblPOS, ref tempdtx);
                    objpos.DTaxID = CustDTaxID;
                    objpos.DTax = tempdtx;

                    objpos.Coupon = tempcoupon;
                    objpos.CouponPerc = dblCouponPerc;
                    objpos.Discount = Convert.ToDouble(numDiscount.Text);
                    objpos.DiscountReason = "";
                    objpos.TotalSale = Convert.ToDouble(numTotal.Text);


                    objpos.ItemDataTable = FastCashFinalDataTable();

                    objpos.TaxID1 = intTaxID1;
                    objpos.TaxID2 = intTaxID2;
                    objpos.TaxID3 = intTaxID3;
                    objpos.Tax1 = dblTax1;
                    objpos.Tax2 = dblTax2;
                    objpos.Tax3 = dblTax3;
                    objpos.ErrorMsg = "";
                    objpos.ChangeAmount = 0;
                    objpos.SuspendInvoiceNo = intSuspendInvNo;

                    objpos.ChangedByAdmin = intSuperUserID;
                    objpos.FunctionButtonAccess = blFunctionBtnAccess;

                    //AddTenderForFastCash();
                    objpos.TenderDataTable = dtblTender;
                    // static value
                    objpos.StoreID = 1;
                    objpos.RegisterID = 1;
                    objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
                    objpos.TransNoteNo = 0;
                    objpos.LayawayNo = 0;
                    objpos.TransMSeconds = 0;
                    // static value
                    objpos.TerminalName = Settings.TerminalName;
                    dtblForStockUpdate = FastCashFinalDataTable();

                    if (Settings.AcceptTips == "Y")
                    {
                        objpos.AuthorisedTranNo = AuthCode;
                        objpos.SaleTranNo = "";
                    }
                    else
                    {
                        objpos.AuthorisedTranNo = "";
                        objpos.SaleTranNo = AuthCode;
                    }

                    objpos.CardTranID = intCardTranID;
                    objpos.tblCardID = cardidentity;
                    objpos.Return = blReturnItem;
                    objpos.NewLayaway = false;
                    objpos.Layaway = false;
                    objpos.LayawayRefund = false;
                    objpos.ApptDataTable = dtblAppt;

                    objpos.ServiceType = strCurrentServiceType;
                    objpos.GCCentralFlag = Settings.CentralExportImport;
                    objpos.GCOPStore = Settings.StoreCode;

                    objpos.OperateStore = Settings.StoreCode;

                    objpos.BeginTransaction();
                    if (objpos.CreateInvoice())
                    {
                        intINV = objpos.ID;

                    }
                    objpos.EndTransaction();
                    srterrmsg = objpos.ErrorMsg;
                    if (srterrmsg == "")
                    {
                        /*
                        if (Settings.ReceiptPrinterName != "")
                        {
                            if (IsOpenCashDrawer())
                            {
                                try
                                {
                                    RawPrinterHelper.OpenCashDrawer1(Settings.ReceiptPrinterName, Settings.CashDrawerCode);
                                }
                                catch
                                {
                                }
                            }
                        }*/

                        if (dtblForStockUpdate != null)
                        {
                            if (dtblForStockUpdate.Rows.Count > 0)
                            {
                                string strId = ""; int intStock = 0;
                                //Control[] findctrl;
                                PosDataObject.POS objPOS = new PosDataObject.POS();
                                objPOS.Connection = SystemVariables.Conn;

                                foreach (DataRow dr in dtblForStockUpdate.Rows)
                                {
                                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "H")
                                        || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "X")
                                        || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")) continue;
                                    // avoid gift certificate, account payment,bottle refund
                                    strId = dr["ID"].ToString();
                                    if (strId != "")
                                    {
                                        /* Block By Rajib for (int i = 0; i < POSItemsListBox.Items.Count; i++)
                                        {
                                            ListBoxItem lbi = POSItemsListBox.Items[i] as ListBoxItem;
                                            if ((lbi.Tag as POSItem).ItemID.ToString() == strId)
                                            {
                                                (lbi.Tag as POSItem).CurrentStock = intStock;
                                                break;
                                            }

                                        } Block By Rajib*/
                                        //findctrl = pnlCat.Controls.Find(strId, true);
                                        //if (findctrl.Length > 0)
                                        //{
                                        //    if (findctrl != null)
                                        //    {
                                        //        if (findctrl[0] is POSControls.POSItem)
                                        //        {
                                        //            intStock = objPOS.GetStockforItem(GeneralFunctions.fnInt32(strId));
                                        //            (findctrl[0] as POSControls.POSItem).CurrentStock = intStock;
                                        //        }
                                        //    }
                                        //}
                                    }
                                }
                            }
                        }

                        if (Settings.POSCardPayment == "Y")
                        {
                            if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                            {
                                if (PrecidiaResponse == 0)
                                {
                                    PrecidiaLaneOpen();
                                }
                            }
                        }

                        blInitAutoSignOut = true;
                        blInitAutoSignOutAfterTender = true;
                        InitializeScreen();
                    }

                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                }
                else
                {
                    bool blclearflg = false;
                    blurGrid.Visibility = Visibility.Visible;
                    frmPOSTenderDlg frm_POSTenderDlg = new frmPOSTenderDlg();
                    try
                    {
                        frm_POSTenderDlg.ResumeTransaction = blResumeTransaction;
                        frm_POSTenderDlg.WorkOrderTransaction = blWorkOrder;
                        if (blWorkOrder)
                        {
                            frm_POSTenderDlg.WODatatbl = FinalDataTable();
                        }
                        frm_POSTenderDlg.SelectedReturnInvoiceNo = intSelectedReturnInvoiceNo;
                        frm_POSTenderDlg.FashCC = true;
                        frm_POSTenderDlg.FashCCTender = dtblTender;
                        frm_POSTenderDlg.ApptDatatbl = dtblAppt;
                        frm_POSTenderDlg.SuspendInvoiceNo = intSuspendInvNo;
                        frm_POSTenderDlg.ReturnItem = blReturnItem;
                        frm_POSTenderDlg.ExistCoupon = blExistCoupon;
                        if (strCurrentServiceType == "Sales") frm_POSTenderDlg.Sale = true; else frm_POSTenderDlg.Sale = false;
                        frm_POSTenderDlg.ServiceType = strCurrentServiceType;
                        frm_POSTenderDlg.RentIssued = blRentIssued;
                        frm_POSTenderDlg.RentRecall = blRentRecall;
                        frm_POSTenderDlg.RepairIssued = blRepairIssued;
                        frm_POSTenderDlg.RepairRecall = blRepairRecall;
                        frm_POSTenderDlg.RepairAdvance = repairadv;
                        frm_POSTenderDlg.RepairDue = repairdue;
                        frm_POSTenderDlg.RepairTender = repairtender;
                        frm_POSTenderDlg.IssueRepairInvNo = repairparentinv;

                        frm_POSTenderDlg.RepairAmount = Convert.ToDouble(numTotal.Text);
                        frm_POSTenderDlg.dtlRepairItemInfo = dtblRepairInfo;

                        frm_POSTenderDlg.RentSecurityDeposit = dblRentSecurityDeposit;
                        frm_POSTenderDlg.IssueRentInvNo = RentReturnInv;
                        frm_POSTenderDlg.RentCalcFlag = RentCalcFlag;
                        frm_POSTenderDlg.FinalFlag = false;
                        frm_POSTenderDlg.CustID = intCustID;
                        frm_POSTenderDlg.TaxExempt = strTaxExempt;
                        frm_POSTenderDlg.StoreCr = dblStoreCr;
                        frm_POSTenderDlg.CustAcctLimit = dblCustAcctLimit;
                        frm_POSTenderDlg.CustAcctBalance = dblCustAcctBalance;
                        frm_POSTenderDlg.POSDatatbl = dtblPOS;
                        frm_POSTenderDlg.MaxInvNo = intMaxInvNo;
                        frm_POSTenderDlg.SuperUserID = intSuperUserID;
                        frm_POSTenderDlg.FunctionBtnAccess = blFunctionBtnAccess;
                        frm_POSTenderDlg.calledfrm = this;
                        frm_POSTenderDlg.dcardidentityfromfastcc = cardidentity;
                        frm_POSTenderDlg.ShowDialog();
                    }
                    finally
                    {
                        blurGrid.Visibility = Visibility.Collapsed;
                        blclearflg = frm_POSTenderDlg.FinalFlag;
                        dtblForStockUpdate = frm_POSTenderDlg.dtblForStockUpdate;  /*** for stock update ****/

                    }
                    if (blclearflg)
                    {
                        //  Update Stock here using the datatable dtblForStockUpdate  //
                        if (dtblForStockUpdate != null)
                        {
                            if (dtblForStockUpdate.Rows.Count > 0)
                            {
                                string strId = ""; int intStock = 0;
                                //Control[] findctrl;
                                PosDataObject.POS objPOS = new PosDataObject.POS();
                                objPOS.Connection = SystemVariables.Conn;

                                foreach (DataRow dr in dtblForStockUpdate.Rows)
                                {
                                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "H")
                                        || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")) continue;
                                    // avoid gift certificate, account payment
                                    strId = dr["ID"].ToString();
                                    if (strId != "")
                                    {
                                        /* Block By Rajib for (int i = 0; i < POSItemsListBox.Items.Count; i++)
                                        {
                                            ListBoxItem lbi = POSItemsListBox.Items[i] as ListBoxItem;
                                            if ((lbi.Tag as POSItem).ItemID.ToString() == strId)
                                            {
                                                (lbi.Tag as POSItem).CurrentStock = intStock;
                                                break;
                                            }

                                        } Block By Rajib */
                                        //findctrl = pnlCat.Controls.Find(strId, true);
                                        //if (findctrl.Length > 0)
                                        //{
                                        //    if (findctrl != null)
                                        //    {
                                        //        if (findctrl[0] is POSControls.POSItem)
                                        //        {
                                        //            intStock = objPOS.GetStockforItem(GeneralFunctions.fnInt32(strId));
                                        //            (findctrl[0] as POSControls.POSItem).CurrentStock = intStock;
                                        //        }
                                        //    }
                                        //}
                                    }
                                }
                            }
                        }
                        blInitAutoSignOut = true;
                        blInitAutoSignOutAfterTender = true;
                        InitializeScreen();
                    }
                    else
                    {
                        int fval = gridView1.FocusedRowHandle;
                        //SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), numSubTotal.Text, numDiscount.Text, numTax.Text, numTotal.Text);
                    }
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                }
            }
            finally
            {
                Cursor = System.Windows.Input.Cursors.Arrow;
            }
        }
        private async void btnFees_Click(object sender, RoutedEventArgs e)
        {
            await btnfeesclick(sender, e);
        }
        public async Task btnfeesclick(object sender, EventArgs e)
        {
            if (blReturnItem) return;
            if (IsDonationRecordExistsInCart()) return;


            int intRowID = gridView1.FocusedRowHandle;

            if (intRowID < 0)
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }
            else
            {
                string strProductType = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType);
                if ((strProductType == "C") || (strProductType == "G") || (strProductType == "A") || (strProductType == "O") || (strProductType == "Z")
                    || (strProductType == "H"))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colPrice) == "")
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }

                if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colBuyGetFreeCat) == "F")
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }

                //if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID,gridControl1, colMixID)) > 0) return;

                if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeID) != "0")
                {
                    if (new MessageBoxWindow().Show(Properties.Resources.Do_you_want_to_remove_current_fees__, Properties.Resources.Remove_Fees_Charges, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.No)
                    {
                        GeneralFunctions.SetFocus(txtSKU);
                        CloseMoreFunctions();
                        return;
                    }
                    else
                    {
                        gridControl1.SetFocusedRowCellValue(colFeeID, "0");
                        gridControl1.SetFocusedRowCellValue(colFeeText, "");
                        gridControl1.SetFocusedRowCellValue(colFee, "0");
                        gridControl1.SetFocusedRowCellValue(colFeeType, "");
                        gridControl1.SetFocusedRowCellValue(colFeeVal, "0");
                        gridControl1.SetFocusedRowCellValue(colFeeTaxRate, "0");
                        gridControl1.SetFocusedRowCellValue(colFeeTax, "0");
                        gridControl1.SetFocusedRowCellValue(colProduct, (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProduct)).ToString().Replace("\n", "").Trim());
                        if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colService) == "Rent")
                            gridControl1.SetFocusedRowCellValue(colProduct, (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProduct)).ToString() + "\n");
                        if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDiscountID) != "0")
                            gridControl1.SetFocusedRowCellValue(colProduct, (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProduct)).ToString() + "\n");
                        GetTotal();
                        ShowTax();
                        ResetQty();
                    }
                }
            }

            string str = await GetDiscountID("FeeItem");
            if (str != "")
            {

                frm_POSCouponDlg frm_POSCouponDlg = new frm_POSCouponDlg();
                try
                {
                    frm_POSCouponDlg.POSFormN = this;
                    frm_POSCouponDlg.BrowseType = "Fees";
                    frm_POSCouponDlg.DiscountOn = "Item";
                    frm_POSCouponDlg.DiscData = str;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSCouponDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                }
                finally
                {
                }
            }
            CloseMoreFunctions();
        }
        private void btnBottleRefund_Click(object sender, RoutedEventArgs e)
        {
            btnBottleRefundClick(sender, e);
        }
        public void btnBottleRefundClick(object sender, EventArgs e)
        {


            if (strCurrentServiceType != "Sales") return;
            if (blReturnItem) return;


            blurGrid.Visibility = Visibility.Visible;
            frm_POSBottleRefundDlg fdlg = new frm_POSBottleRefundDlg();
            try
            {
                fdlg.ShowDialog();

                if (fdlg.DialogResult == true)
                {
                    intBottleRefundID++;
                    dblBottleRefundQty = fdlg.RefundQty;
                    dblBottleRefundRate = fdlg.RefundAmount;
                    dblBottleRefundAmount = GeneralFunctions.fnDouble((dblBottleRefundQty * dblBottleRefundRate).ToString("f"));

                    string refDP = "";
                    if (Settings.DecimalPlace == 3) refDP = "2"; else refDP = "3";

                    dtblPOS.Rows.Add(new object[] { intBottleRefundID.ToString(), "Bottle Refund","O","0","0","0", dblBottleRefundQty.ToString(),
                                            dblBottleRefundRate.ToString(),"0",(-dblBottleRefundAmount).ToString(),"0","0","0","","","","",
                                            GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N","Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                            0,"","",0,0,0,"","0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,dblBottleRefundRate.ToString(),(-dblBottleRefundAmount).ToString(),"","","","","","N"});

                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                    GetTotal();
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        private async void btnDiscItem_Click(object sender, RoutedEventArgs e)
        {
            await btnItemDiscountClick(sender, e);
        }
        /// Item Discount Function Button Click Event

        public async Task btnItemDiscountClick(object sender, EventArgs e)
        {
            if (IsDonationRecordExistsInCart()) return;
            if (strCurrentServiceType == "Rent") return;
            if (blReturnItem) return;
            if (dtblPOS.Rows.Count == 0) return;
            int intRowID = gridView1.FocusedRowHandle;
            if (intRowID < 0)
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }
            else
            {
                string strProductType = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType);
                if ((strProductType == "C") || (strProductType == "G") || (strProductType == "O") || (strProductType == "Z") || (strProductType == "H"))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colBuyGetFreeHeader)) > 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
                if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colPrice) == "")
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colID))))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }

                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixID)) > 0) return;

                if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDiscountID) != "0")
                {

                    if (new MessageBoxWindow().Show(Properties.Resources.Do_you_want_to_remove_current_discount__, Properties.Resources.Remove_Item_Discount, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.No)
                    {
                        GeneralFunctions.SetFocus(txtSKU);
                        return;
                    }
                    else
                    {
                        double newprice = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colPrice) : await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colGPrice)) + GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDisc));
                        gridControl1.SetFocusedRowCellValue(colPrice, newprice.ToString("f"));
                        if (Settings.TaxInclusive == "Y")
                        {
                            gridControl1.SetFocusedRowCellValue(colGPrice, newprice.ToString("f"));
                        }
                        gridControl1.SetFocusedRowCellValue(colDiscountID, "0");
                        gridControl1.SetFocusedRowCellValue(colDiscountText, "");
                        gridControl1.SetFocusedRowCellValue(colDisc, "0");
                        gridControl1.SetFocusedRowCellValue(colDLogic, "");
                        gridControl1.SetFocusedRowCellValue(colDVal, "0");
                        gridControl1.SetFocusedRowCellValue(colProduct, (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProduct)).ToString().Replace("\n", "").Trim());
                        if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colService) == "Rent")
                            gridControl1.SetFocusedRowCellValue(colProduct, (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProduct)).ToString() + "\n");
                        if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeID) != "0")
                        {
                            gridControl1.SetFocusedRowCellValue(colProduct, (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProduct)).ToString() + "\n");

                            string ftype = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeType);
                            double fval = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeVal));
                            double ftxrate = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeTaxRate));
                            double appamt = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colPrice));

                            double fee = 0;
                            double feetax = 0;

                            fee = GeneralFunctions.FormatDouble(calculateitemdiscount(newprice, ftype, fval));

                            if (ftxrate > 0) feetax = GeneralFunctions.FormatDouble(fee * ftxrate / 100);

                            gridControl1.SetFocusedRowCellValue(colFee, fee.ToString());
                            gridControl1.SetFocusedRowCellValue(colFeeTax, feetax.ToString());
                        }
                        SetCartDisplay();
                        gridControl1.RefreshData();
                        GetTotal();
                        ShowTax();
                        
                    }
                }
            }
            string str = await GetDiscountID("Item");
            if (str != "")
            {
                frm_POSCouponDlg frm_POSCouponDlg = new frm_POSCouponDlg();
                try
                {
                    frm_POSCouponDlg.POSFormN = this;
                    frm_POSCouponDlg.BrowseType = "Coupons";
                    frm_POSCouponDlg.DiscountOn = "Item";
                    frm_POSCouponDlg.DiscData = str;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSCouponDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                }
                finally
                {
                }
            }
            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                int fval = gridView1.FocusedRowHandle;
                //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);

                SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), Convert.ToDouble(numSubTotal.Text), Convert.ToDouble(numDiscount.Text), Convert.ToDouble(numTax.Text), Convert.ToDouble(numTotal.Text), dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
            }
        }
        private async void btnAddQty_Click(object sender, RoutedEventArgs e)
        {
            await btnAddQtyClick(sender, e);
        }
        /// Click to add 1 more item into cart

        public async Task btnAddQtyClick(object sender, EventArgs e)
        {


            string line1 = "";
            string line2 = "";
            int intRowID = 0;
            if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0) return;
            intRowID = gridView1.FocusedRowHandle;
            if (intRowID < 0) return;
            if ((await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "G")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "A")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "W")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "C")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "H")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "Z")
                 || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "I")
                 || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "E"))
            {
                return;
            }

            

            if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colBuyGetFreeHeader)) > 0)
            {
                return;
            }

            string ptype = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType);

            if (ptype != "O")
            {
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixID)) > 0)
                {
                    if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixLast) != "X") return;
                }

                if (!CheckStock(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colID)),
                    1, await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMID),
                    await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMOV1),
                    await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMOV2),
                    await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMOV3)))
                {
                    new MessageBoxWindow().Show(Properties.Resources.No_Stock_available_, Properties.Resources.Stock_Validation, MessageBoxButton.OK, MessageBoxImage.Error);
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
            }


            if ((await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "P")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "M")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "K")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "F")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "U")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "W"))
            {
                if (strCurrentServiceType == "Sales")
                {
                    string itemexpiredt = GetProductExpiry2(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colID)));
                    if (itemexpiredt != "")
                    {
                        DisplayItemExpiryAlert(itemexpiredt);
                    }
                }
            }

            string srvtype = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colService);
            double renttime = 1;
            if (srvtype == "Rent")
            {
                renttime = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colRentDuration));
            }

            double intQty = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colQty));
            double dblQty = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colRate) : await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colGRate));

            double linediscnt = 0;
            double pretaxprice = (intQty + 1) * dblQty * renttime;

            if (Settings.TaxInclusive == "Y")
            {
                pretaxprice = GeneralFunctions.FormatDouble(pretaxprice + (GeneralFunctions.fnDouble(GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDisc)) / intQty) * (intQty + 1)));
            }

            if (ptype == "O") pretaxprice = -pretaxprice;

            if (ptype != "O")
            {
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDiscountID)) != 0)
                {
                    linediscnt = calculateitemdiscount(pretaxprice, await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDLogic),
                        GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDVal)));
                    pretaxprice = pretaxprice - linediscnt;
                }
            }


            gridControl1.SetCellValue(intRowID, colQty, GeneralFunctions.fnDouble(intQty + 1).ToString());

            if (Settings.DecimalPlace == 3)
            {
                gridControl1.SetCellValue(intRowID, colPrice, pretaxprice.ToString("f3"));
                gridControl1.SetCellValue(intRowID, colGPrice, pretaxprice.ToString("f3"));
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDiscountID)) != 0)
                    gridControl1.SetCellValue(intRowID, colDisc, linediscnt.ToString("f3"));
            }
            else
            {
                gridControl1.SetCellValue(intRowID, colPrice, pretaxprice.ToString("f"));
                gridControl1.SetCellValue(intRowID, colGPrice, pretaxprice.ToString("f"));
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDiscountID)) != 0)
                    gridControl1.SetCellValue(intRowID, colDisc, linediscnt.ToString("f"));
            }

            if (ptype != "O")
            {
                int intFID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeID));

                if (intFID > 0)
                {
                    double fees = 0;
                    double feestax = 0;
                    double discntamt = 0;
                    double taxrate = 0;
                    string tx1 = "";

                    string fty = "";
                    double fval = 0;

                    string dlogic = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDLogic);
                    double dval = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDVal));
                    double pr = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colPrice) : await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colGPrice));
                    double disc = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDisc));

                    fty = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeType);
                    fval = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeVal));
                    taxrate = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeTaxRate));

                    fees = calculateitemdiscount(pr + disc, fty, fval);

                    if (IfDiscountableFees(intFID))
                    {
                        fees = fees - calculateitemdiscount(fees, dlogic, dval);
                    }

                    if (taxrate > 0)
                    {
                        if (Settings.TaxInclusive == "N")
                        {
                            feestax = GeneralFunctions.FormatDouble(fees * taxrate / 100);
                        }
                        else
                        {
                            double tempApplicableAmount = fees / ((100 + taxrate) / 100);
                            feestax = GeneralFunctions.FormatDouble(fees - tempApplicableAmount);
                        }
                    }

                    if (Settings.TaxInclusive == "Y")
                    {
                        fees = fees - feestax;
                    }

                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colPrice)), fty, fval);
                    string damt = "0";
                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                    double newpretaxamt = 0;
                    newpretaxamt = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colPrice)) - GeneralFunctions.fnDouble(damt);

                    gridControl1.SetFocusedRowCellValue(colFee, fees.ToString("f"));
                    gridControl1.SetFocusedRowCellValue(colFeeTax, feestax);
                }
            }


            line1 = "";
            line2 = "";
            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProduct), "1", dblQty.ToString(), ref line1, ref line2);
            DisplayPoleText(2, "N", "N", line1, line2);

           

            if (strCurrentServiceType == "Sales") AddAutoMixNMatch();
            SetCartDisplay();
            gridControl1.ItemsSource = dtblPOS;

            if (strCurrentServiceType == "Sales")
            {
                if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "B")
                {

                }
                else
                {
                    CheckAndExecuteReorderStockAlert(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colID)));
                }
            }

            ToggleWithEmptyCart();
            gridControl1.RefreshData();
            GetTotal();
            ShowTax();
            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {

                int fval = gridView1.FocusedRowHandle;
                //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);
                SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), Convert.ToDouble(numSubTotal.Text), Convert.ToDouble(numDiscount.Text), Convert.ToDouble(numTax.Text), Convert.ToDouble(numTotal.Text), dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
            }

            CloseMoreFunctions();
        }

        // check if discountable Fees and charge

        private bool IfDiscountableFees(int FID)
        {
            PosDataObject.POS objProduct = new PosDataObject.POS();
            objProduct.Connection = SystemVariables.Conn;
            return objProduct.IsDiscounttableFees(FID);
        }
        private async void btnMinusQty_Click(object sender, RoutedEventArgs e)
        {
            await btnMinusQtyClick(sender, e);
        }
        /// Click to delete 1 item from cart

        public async Task btnMinusQtyClick(object sender, EventArgs e)
        {


            string line1 = "";
            string line2 = "";
            int intRowID = 0;
            if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0) return;
            intRowID = gridView1.FocusedRowHandle;
            if (intRowID < 0) return;
            int ProductID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colID));
            string ptype1 = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType);

                if ((await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "G")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "A")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "W")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "C")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "H")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "Z")
                || (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType) == "I")) return;

            if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colBuyGetFreeHeader)) > 0)
            {
                return;
            }

            string ptype = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProductType);

            if (ptype != "O")
            {
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixID)) > 0)
                {
                    if (await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colMixLast) != "X") return;
                }
            }
            string srvtype = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colService);
            double renttime = 1;
            if (srvtype == "Rent")
            {
                renttime = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colRentDuration));
            }

            double intQty = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colQty));

            //if (intQty > 1)
            //{

            double dblQty = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colRate) : await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colGRate));

            double linediscnt = 0;
            double pretaxprice = (intQty - 1) * dblQty * renttime;

            if (Settings.TaxInclusive == "Y")
            {
                pretaxprice = GeneralFunctions.FormatDouble(pretaxprice + (GeneralFunctions.fnDouble(GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDisc)) / intQty) * (intQty - 1)));
            }

            if (ptype == "O") pretaxprice = -pretaxprice;

            if (ptype != "O")
            {
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDiscountID)) != 0)
                {
                    linediscnt = calculateitemdiscount(pretaxprice, await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDLogic),
                        GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDVal)));
                    pretaxprice = pretaxprice - linediscnt;
                }
            }

            gridControl1.SetCellValue(intRowID, colQty, GeneralFunctions.fnDouble(intQty - 1).ToString());

            if (Settings.DecimalPlace == 3)
            {
                gridControl1.SetCellValue(intRowID, colPrice, pretaxprice.ToString("f3"));
                gridControl1.SetCellValue(intRowID, colGPrice, pretaxprice.ToString("f3"));
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDiscountID)) != 0)
                    gridControl1.SetCellValue(intRowID, colDisc, linediscnt.ToString("f3"));
            }
            else
            {
                gridControl1.SetCellValue(intRowID, colPrice, pretaxprice.ToString("f"));
                gridControl1.SetCellValue(intRowID, colGPrice, pretaxprice.ToString("f"));
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDiscountID)) != 0)
                    gridControl1.SetCellValue(intRowID, colDisc, linediscnt.ToString("f"));
            }

            if (ptype != "O")
            {
                int intFID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeID));

                if (intFID > 0)
                {
                    double fees = 0;
                    double feestax = 0;
                    double discntamt = 0;
                    double taxrate = 0;
                    string tx1 = "";

                    string fty = "";
                    double fval = 0;

                    string dlogic = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDLogic);
                    double dval = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDVal));
                    double pr = GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colPrice) : await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colGPrice));
                    double disc = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colDisc));

                    fty = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeType);
                    fval = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeVal));
                    taxrate = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colFeeTaxRate));

                    fees = calculateitemdiscount(pr + disc, fty, fval);

                    if (IfDiscountableFees(intFID))
                    {
                        fees = fees - calculateitemdiscount(fees, dlogic, dval);
                    }

                    if (taxrate > 0)
                    {
                        if (Settings.TaxInclusive == "N")
                        {
                            feestax = GeneralFunctions.FormatDouble(fees * taxrate / 100);
                        }
                        else
                        {
                            double tempApplicableAmount = fees / ((100 + taxrate) / 100);
                            feestax = GeneralFunctions.FormatDouble(fees - tempApplicableAmount);
                        }

                    }

                    if (Settings.TaxInclusive == "Y")
                    {
                        fees = fees - feestax;
                    }

                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colPrice)), fty, fval);
                    string damt = "0";
                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                    double newpretaxamt = 0;
                    newpretaxamt = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colPrice)) - GeneralFunctions.fnDouble(damt);

                    gridControl1.SetFocusedRowCellValue(colFee, fees.ToString("f"));
                    gridControl1.SetFocusedRowCellValue(colFeeTax, feestax);
                }
            }

            string tmpItem = "";
            tmpItem = await GeneralFunctions.GetCellValue1(intRowID, gridControl1, colProduct);
            line1 = "";
            line2 = "";
            RearrangeCartItemTextBeforePoleDisplay(tmpItem, "", "", ref line1, ref line2);
            if (line2.Length > 8) line2 = line2.Substring(0, 8);
            DisplayPoleText(2, "N", "N", line1, line2 + " * REMOVED *");
            //}
            //else
            //{
            /*string tmpItem = "";
            tmpItem = await GeneralFunctions.GetCellValue1(intRowID,gridControl1, colProduct);
            line1 = "";
            line2 = "";
            RearrangeCartItemTextBeforePoleDisplay(tmpItem, "", "", ref line1, ref line2);
            if (line2.Length > 8) line2 = line2.Substring(0, 8);
            DisplayPoleText(2, "N", "N", line1, line2 + " * REMOVED *");
            gridView1.DeleteRow(intRowID);
            SetCurrentRow(intRowID - 1);*/
            //}
            if (strCurrentServiceType == "Sales") AddAutoMixNMatch();

            

            SetCartDisplay();
            gridControl1.ItemsSource = dtblPOS;

            if (strCurrentServiceType == "Sales")
            {
                if (ptype1 == "B")
                {
                }
                else
                {
                    CheckAndExecuteReorderStockAlert(ProductID);
                }
            }

            ToggleWithEmptyCart();
            gridControl1.RefreshData();

            GetTotal();
            ShowTax();
            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                int fval = gridView1.FocusedRowHandle;
                //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);
                //SecondMonitor.ClearWeightInfo();
                SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), Convert.ToDouble(numSubTotal.Text), Convert.ToDouble(numDiscount.Text), Convert.ToDouble(numTax.Text), Convert.ToDouble(numTotal.Text), dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
            }

            CloseMoreFunctions();
        }
        private void btnMoreFunctions_Click(object sender, RoutedEventArgs e)
        {
            int L = 0;
            int T = 0;
            int W = 0;
            int H = 0;

            int RowNo = 0;

            if (Settings.POSMoreFunctionAlignment == 0)  // vertical alignment
            {
                blOpenMorefuncDlg = true;

                VerticalData(ref L, ref T, ref W, ref H, ref RowNo);


                //if (frm_mfv != null)
                //{
                //    frm_mfv.Close();
                //    frm_mfv.Dispose();
                //}



                //frm_POSMoreFunctions frmPOSMoreFunctionsControl = new frm_POSMoreFunctions();
                frmPOSMoreFunctionsControl.FValue1 = L;
                frmPOSMoreFunctionsControl.FValue2 = 20;
                frmPOSMoreFunctionsControl.FValue3 = H;
                frmPOSMoreFunctionsControl.FValue4 = W;
                frmPOSMoreFunctionsControl.FValue5 = RowNo;
                frmPOSMoreFunctionsControl.POSFormN = this;
                if (dtblPOS.Rows.Count == 0)
                    frmPOSMoreFunctionsControl.ResumeSuspend = "Resume";
                else
                    frmPOSMoreFunctionsControl.ResumeSuspend = "Suspend";
                frmPOSMoreFunctionsControl.IgnoreCount = VisibleFunctionButton;

                frmPOSMoreFunctionsControl.LoadFunctionButtons();
                try
                {
                    iscallfromMFV = true;
                    frmPOSMoreFunctionsControl.Visibility = Visibility.Visible;
                }
                finally
                {
                }
                //AlignCategory();
            }

            if (Settings.POSMoreFunctionAlignment == 1)  // horizontal alignment
            {

                //if (frm_mfh != null)
                //{
                //    frm_mfh.Close();
                //    frm_mfh.Dispose();
                //}

                blOpenMorefuncDlg = true;
                //HorizontalData(ref L, ref T, ref W, ref H);

                //frmPOSMoreFunctionsH frmPOSMoreFunctionsControlH = new frmPOSMoreFunctionsH();
                //frmPOSMoreFunctionsControlH.FValue1 = L;
                //frmPOSMoreFunctionsControlH.FValue2 = T;
                //frmPOSMoreFunctionsControlH.FValue3 = H;
                //frmPOSMoreFunctionsControlH.FValue4 = W;

                //frmPOSMoreFunctionsControlH.POSFormN = this;
                //frmPOSMoreFunctionsControlH.IgnoreCount = VisibleFunctionButton;
                //if (dtblPOS.Rows.Count == 0)
                //    frmPOSMoreFunctionsControlH.ResumeSuspend = "Resume";
                //else
                //    frmPOSMoreFunctionsControlH.ResumeSuspend = "Suspend";
                //frmPOSMoreFunctionsControlH.LoadPosition();
                //frmPOSMoreFunctionsControlH.LoadFunctionButtons();
                //try
                //{
                //    iscallfromMFH = true;
                //    frm_mfh = frmPOSMoreFunctionsControlH;
                //    frmPOSMoreFunctionsControlH.ShowDialog();
                //}
                //finally
                //{
                //}

            }
            GeneralFunctions.SetFocus(txtSKU);
        }
        // set vertical panel for more visible functions

        private void VerticalData(ref int L, ref int T, ref int W, ref int H, ref int RowNo)
        {
            bool blf = false;
            if (Settings.POSCardPayment == "Y")
            {
                if (Settings.PaymentGateway == 1) blf = false;
                else blf = true;
            }
            else
            {
                blf = false;
            }
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            DataTable dtblItemButtons = objPOS.FetchVisiblePOSFunction(blf, SystemVariables.CurrentUserID);

            int intCount = 0;
            int intInc = 0;

            foreach (DataRow dr in dtblItemButtons.Rows)
            {
                intCount++;
                if (intCount < VisibleFunctionButton) continue;
                intInc++;
            }



            int hgt = 0/*Screen.PrimaryScreen.Bounds.Height - pnlCatBottom.Height - 30*/;
            int t = (hgt - 70) % 75;
            int t1 = (hgt - 70) / 75;

            if (t > 0)
            {
                t1 = t1 + 1;
            }

            int rowcnt = intInc / t1;

            int rowcnt1 = intInc % t1;

            if (rowcnt1 > 0)
            {
                rowcnt = rowcnt + 1;
            }

            RowNo = rowcnt;

            if ((RowNo == 1) || (RowNo == 2))
            {
                RowNo = 3;
            }

            if (RowNo == 1)
            {
                //H = pnlmfV.Height; 
                //W = 75;
            }
            else if (RowNo == 2)
            {
                //W = 150;
                /*if ((intInc % 2) == 0)
                {
                    H = pnlmfV.Height; 
                }
                else
                {
                    H = pnlmfV.Height;
                }*/
            }
            //else if (RowNo == 3)
            //{
            //    W = 235;
            //    H = Screen.PrimaryScreen.Bounds.Height - pnlCatBottom.Height - 30;
            //}
            //else if (RowNo == 4)
            //{
            //    W = 310;
            //    H = Screen.PrimaryScreen.Bounds.Height - pnlCatBottom.Height - 30;
            //}
            //else
            //{
            //    W = 380;
            //    H = Screen.PrimaryScreen.Bounds.Height - pnlCatBottom.Height - 30;
            //}


            //if (RowNo == 1)
            //{
            //    T = panel1.Height - panel3.Height - panel2.Height - pnlCatBottom.Height - H + 10;
            //    L = pnlLeft.Left - W - 45;
            //}
            //else
            //{
            //    T = panel1.Height - panel2.Height - pnlCatBottom.Height - H + 10;
            //    L = pnlLeft.Left - W - 2;
            //}


        }
        private void btnHelp_Click(object sender, RoutedEventArgs e)
        {
            btnHelpClick(sender, e);
        }
        public void btnHelpClick(object sender, EventArgs e)
        {
            InvokeHelp();
        }
        private void InvokeHelp()
        {


            if (btnHelp.Tag.ToString() == "")
            {
                new MessageBoxWindow().Show(Properties.Resources.This_help_topic_is_currently_not_available_, "POS Help", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }
            else
            {
                string ret = GeneralFunctions.IsHelpFileExists(btnHelp.Tag.ToString());
                if (ret == "")
                {
                    new MessageBoxWindow().Show(Properties.Resources.This_help_topic_is_currently_not_available_, "POS Help", MessageBoxButton.OK, MessageBoxImage.Information);
                    return;
                }
                else
                {
                    System.Diagnostics.Process p = new System.Diagnostics.Process();
                    p.StartInfo.FileName = ret;
                    p.Start();
                }
            }

            if (iscallfromMFV)
            {
                //pnlmfV.Width = 1;
                //pnlmfV.Visible = false;
                //if (frm_POSMoreFunctions != null)
                //    frm_POSMoreFunctions.Close();
                iscallfromMFV = false;
            }
            if (iscallfromMFH)
            {
                //pnlmfH.Height = 1;
                //pnlmfH.Visible = false;
                //if (frm_POSMoreFunctionsH != null)
                //    frm_POSMoreFunctionsH.Close();
                iscallfromMFH = false;
            }

        }
        private void btnApptBook_Click(object sender, RoutedEventArgs e)
        {
            btnApptBookClick(sender, e);
        }
        private void btnApptBookClick(object sender, RoutedEventArgs e)
        {

            if (!CheckFunctionButton("31a1"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                //CloseMoreFunctions();
                return;
            }

            if (intCustID > 0)
            {
                if (!CheckActiveCustomer(intCustID))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Transaction_is_possible_for_active_customer_only, Properties.Resources.Customer_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtCust);
                    //CloseMoreFunctions();
                    return;
                }
            }


            blurGrid.Visibility = Visibility.Visible;
            frm_POSApptBookBrw frm_POSApptBookBrw = new frm_POSApptBookBrw();
            try
            {
                frm_POSApptBookBrw.ApptAction = "Booking";
                frm_POSApptBookBrw.poscustomer = intCustID;
                frm_POSApptBookBrw.ShowDialog();
            }
            finally
            {
                frm_POSApptBookBrw.Close();
                blurGrid.Visibility = Visibility.Collapsed;
            }

            //CloseMoreFunctions();
        }
        private async void btnApptRecall_Click(object sender, RoutedEventArgs e)
        {
            await btnApptRecallClick(sender, e);
        }
        public async Task btnApptRecallClick(object sender, EventArgs e)
        {


            if (!CheckFunctionButton("31a1"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            if (dtblAppt.Rows.Count > 0)
            {
                if (dtblPOS.Rows.Count == 0)
                {
                    dtblAppt.Rows.Clear();
                }
                else { return; }

            }

            if (intCustID > 0)
            {
                if (!CheckActiveCustomer(intCustID))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Transaction_is_possible_for_active_customer_only, Properties.Resources.Customer_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtCust);
                    //CloseMoreFunctions();
                    return;
                }
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSApptBookBrw frm_POSApptBookBrw = new frm_POSApptBookBrw();
            try
            {
                frm_POSApptBookBrw.ApptAction = "Invoice";
                frm_POSApptBookBrw.poscustomer = intCustID;
                frm_POSApptBookBrw.ShowDialog();
                if (frm_POSApptBookBrw.DialogResult == true)
                {
                    dtblAppt = frm_POSApptBookBrw.RecallTbl;
                    await AddServicesToCart();
                   
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }

            //CloseMoreFunctions();
        }
        /// Add Service Record into cart

        private async Task AddServicesToCart()
        {
            foreach (DataRow drApptH in dtblAppt.Rows)
            {
                PosDataObject.POS objpos = new PosDataObject.POS();
                objpos.Connection = SystemVariables.Conn;
                DataTable dtblApptD = objpos.FetchApptDetail(GeneralFunctions.fnInt32(drApptH["ID"].ToString()));


                pnlCust.Visibility = System.Windows.Visibility.Visible;

                string refTaxExempt = "";
                string refDiscountLevel = "";
                string refTaxID = "";
                string refStoreCr = "";
                string refCID = "";
                string refCName = "";
                string refCAdd = "";
                double dblBalance = 0;
                string refARCredit = "";
                string refPOSNotes = "";

                int refDTaxID = 0;
                string refDTax = "";
                double refDTaxRate = 0;
                int refDTaxType = 0;

                intCustID = objpos.FetchApptCustomer(GeneralFunctions.fnInt32(drApptH["ID"].ToString()));

                FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd,
                                ref refTaxExempt, ref refDiscountLevel, ref refTaxID, ref refStoreCr, ref refARCredit,
                                ref refPOSNotes, ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);

                CustDTaxID = refDTaxID;
                CustDTaxName = refDTax;
                CustDTaxRate = refDTaxRate;
                CustDTaxType = refDTaxType;

                strTaxExempt = refTaxExempt;
                strDiscountLevel = refDiscountLevel;
                if (strDiscountLevel == "") strDiscountLevel = "A";
                dblBalance = GetAccountBalance(intCustID);
                txtCust.Text = refCID;
                //lbCustID.Text = "Customer ID : " + refCID;
                strCustomerID = refCID;
                lbCustName.Text = refCName;
                //DisplayPoleText(2, "N", "N", "welcome", refCName);

                //lbCustAddress.Text = refCAdd;
                //ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                //lbCustNotes.Text = refPOSNotes;
                blCustNotes = refPOSNotes != "";
                // ShowCustomerPhoto();
                FetchCustomerNote("", "Customer", intCustID, DateTime.Today.Year, DateTime.Today.Month);
                //if (blCustNotes) lbcustinfo2.Text = "Check 'Cust Notes' Apps";
                dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                dblCustAcctBalance = dblBalance;

                foreach (DataRow drD in dtblApptD.Rows)
                {
                    await AddService(GeneralFunctions.fnInt32(drD["ID"].ToString()), drD["Description"].ToString());
                }
                
            }
        }
        public async Task AddService(int papptID, string papptName)
        {
            //add to sell
            if (strCurrentServiceType != "Sales") return;
            if (blReturnItem) return;

            bool blExit = false;
            string line1 = "";
            string line2 = "";
            int intRowID = 0;
            intRowID = papptID;

            bool blfinddata = false;
            string strselectid = intRowID.ToString();

            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";
            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";
            string refRentPrompt = "";
            int iAge = 0;
            string refUOM = "";
            string refExpiry = "";
            FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                            ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY,
                            ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt, ref refRentPrompt,
                            ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

            if (Settings.POSIDRequired == "Y")
            {
                if (GeneralFunctions.fnInt32(refAge) > 0)
                {
                    iAge = GeneralFunctions.fnInt32(refAge);
                    if (!AgeCheck(DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)))) return;
                    //if (new MessageBoxWindow().Show(Properties.Resources."Minimum Age ","frmPOSN_msg_MinimumAge") + refAge + Properties.Resources." : Birthday on or before ","frmPOSN_msg_Birthdayonorbefore") + DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)).ToString("MM/dd/yyyy"), Properties.Resources."Age Verification","frmPOSN_msg_AgeVerification"), MessageBoxButton.OKCancel, MessageBoxImage.Information) == DialogResult.Cancel) return;
                }
            }

            string strUOMCount = "";
            string strUOMPrice = "";
            string strUOMDesc = "";

            string strMatxOID = "";
            string strMatxOV1 = "";
            string strMatxOV2 = "";
            string strMatxOV3 = "";
            string strSLID = "0";

            int intfocusrow = 0;
            double dblRate = 0;
            double dblPrice = 0;

            if (!CheckStock(GeneralFunctions.fnInt32(strselectid), 1, strMatxOID, strMatxOV1, strMatxOV2, strMatxOV3))
            {
                new MessageBoxWindow().Show(Properties.Resources.No_Stock_available_, Properties.Resources.Stock_Validation, MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            if (!blfinddata)
            {
                if (refPrompt == "Y")
                {
                    double promptPrice = GetPromptPrice(papptName, GeneralFunctions.fnDouble(refPrice));
                    if (promptPrice == -99999) return;
                    dtblPOS.Rows.Add(new object[]
                                        {
                                              intRowID.ToString(),papptName,refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,
                                              Convert.ToDecimal(intPressQty*promptPrice),"0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                              "0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,"NA","0","0","0","","","",
                                              0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",0,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,promptPrice,
                                              Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(papptName, "1", promptPrice.ToString(), ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);

                }
                else
                {
                    dtblPOS.Rows.Add(new object[]
                                        {   intRowID.ToString(),papptName,refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,
                                            Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,"NA","0","0","0","","","",
                                            0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,refPrice,
                                            Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(papptName, "1", refPrice, ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);
                }

                if (Settings.PriceLevelForOneTime == "Y")
                {
                    Settings.PriceLevelForOneTime = "N";
                    intUsePriceLevel = Settings.UsePriceLevel;
                }
                SetCartDisplay();
                gridControl1.ItemsSource = dtblPOS;
                //gridControl1.RefreshData();
                //gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                GeneralFunctions.SetFocus(txtSKU);
            }
            else
            {
                SetCartDisplay();
                gridControl1.ItemsSource = dtblPOS;
                ToggleWithEmptyCart();
                //gridView1.FocusedRowHandle = intfocusrow;
            }
            /// Set UP/Down Button to move cursor through Cart Item
            EnableDisableButton(btnUP, btnDown, gridControl1);
            /// Automatic Discount Add in Cart
            await AddAutoDiscountInCart(intRowID, true);
            /// Automatic Fees and Charge Add in Cart
            await AddAutoFeesInCart(intRowID);

            SetCartDisplay();
            ToggleWithEmptyCart();

            GetTotal(); /// Calculate and Display Cart Total
            ShowTax(); /// Calculate and Display Taxes of Cart Items
            ResetQty();  /// Reset Item Quantity
            //gridControl1.RefreshData();
        }

        private void btnPaidIn_Click(object sender, RoutedEventArgs e)
        {
            btnPaidInClick(sender, e);
        }

        private void btnSafeDrop_Click(object sender, RoutedEventArgs e)
        {
            btnSafeDropClick(sender, e);
        }

        public void btnPaidInClick(object sender, EventArgs e)
        {
            if (strCurrentServiceType != "Sales") return;


            if (!CheckFunctionButton("31xx5"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (dtblPOS.Rows.Count > 0)
            {
                DocMessage.MsgInformation("Transaction needs to be completed first !");
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }
            else
            {

                bool boolPosted;
                string strDesc = "";
                int intTran = 0;
                int intINV = 0;
                double dblAmt = 0;
                bool bOk = false;
                blurGrid.Visibility = Visibility.Visible;
                frm_POSPaidInDlg frm_POSPaidOutDlg = new frm_POSPaidInDlg();
                try
                {

                    //frm_POSPaidOutDlg = this;
                    frm_POSPaidOutDlg.SuperUserID = intSuperUserID;
                    frm_POSPaidOutDlg.FunctionBtnAccess = blFunctionBtnAccess;
                    frm_POSPaidOutDlg.ShowDialog();
                    if (frm_POSPaidOutDlg.DialogResult == true)
                    {
                        strDesc = frm_POSPaidOutDlg.PaidOutDesc;
                        dblAmt = frm_POSPaidOutDlg.PaidOutAmount;

                        bOk = true;
                    }

                }
                finally
                {
                    frm_POSPaidOutDlg.Close();
                    blurGrid.Visibility = Visibility.Collapsed;


                   /* boolPosted = frm_POSPaidOutDlg.FinalFlag;
                    strDesc = frm_POSPaidOutDlg.PaidOutDesc;
                    intTran = frm_POSPaidOutDlg.TranNo;
                    dblAmt = frm_POSPaidOutDlg.PaidOutAmount;
                    intINV = frm_POSPaidOutDlg.InvNo;
                    frm_POSPaidOutDlg.Close();
                    blurGrid.Visibility = Visibility.Collapsed;*/
                }

                /*
                if (boolPosted)
                {
                    if (Settings.ReceiptPrinterName != "")
                    {
                        if (IsOpenCashDrawer())
                        {
                            try
                            {
                                RawPrinterHelper.OpenCashDrawer1(Settings.ReceiptPrinterName, Settings.CashDrawerCode);
                            }
                            catch
                            {
                            }
                        }
                    }
                    blurGrid.Visibility = Visibility.Visible;
                    frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                    try
                    {
                        frm_POSInvoicePrintDlg.InvNo = intINV;
                        frm_POSInvoicePrintDlg.PrintType = "Paid In";
                        frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                        frm_POSInvoicePrintDlg.PaidOutDesc = strDesc;
                        frm_POSInvoicePrintDlg.PaidOutAmount = dblAmt;
                        frm_POSInvoicePrintDlg.PaidOutTranNo = intTran;
                        frm_POSInvoicePrintDlg.ShowDialog();
                    }
                    finally
                    {
                        frm_POSInvoicePrintDlg.Close();
                        blurGrid.Visibility = Visibility.Collapsed;
                    }
                }
                InitializeScreen();
                GeneralFunctions.SetFocus(txtSKU); */

                if (bOk)
                {
                    GoToTenderForPaidinoutSafedrop("Paid In", strDesc, dblAmt);
                }
            }
        }

        public void btnSafeDropClick(object sender, EventArgs e)
        {
            if (strCurrentServiceType != "Sales") return;


            if (!CheckFunctionButton("31xx6"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (dtblPOS.Rows.Count > 0)
            {
                DocMessage.MsgInformation("Transaction needs to be completed first !");
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }
            else
            {
                if (Settings.ReceiptPrinterName == "")
                {
                    DocMessage.MsgInformation("Please Define Receipt Printer in Setup.");
                    return;
                }
                bool boolPosted;
                string strDesc = "";
                int intTran = 0;
                int intINV = 0;
                double dblAmt = 0;
                bool bOk = false;
                blurGrid.Visibility = Visibility.Visible;
                frm_POSSafeDropDlg frm_POSPaidOutDlg = new frm_POSSafeDropDlg();
                try
                {
                    frm_POSPaidOutDlg.SuperUserID = intSuperUserID;
                    frm_POSPaidOutDlg.FunctionBtnAccess = blFunctionBtnAccess;
                    frm_POSPaidOutDlg.ShowDialog();
                    if (frm_POSPaidOutDlg.DialogResult == true)
                    {
                        
                        dblAmt = frm_POSPaidOutDlg.PaidOutAmount;

                        bOk = true;
                    }


                }
                finally
                {
                    frm_POSPaidOutDlg.Close();
                    blurGrid.Visibility = Visibility.Collapsed;
                    /*
                    boolPosted = frm_POSPaidOutDlg.FinalFlag;
                    //strDesc = frm_POSPaidOutDlg.PaidOutDesc;
                    intTran = frm_POSPaidOutDlg.TranNo;
                    dblAmt = frm_POSPaidOutDlg.PaidOutAmount;
                    intINV = frm_POSPaidOutDlg.InvNo;
                    frm_POSPaidOutDlg.Close();*/
                }

                /*
                if (boolPosted)
                {
                    if (Settings.ReceiptPrinterName != "")
                    {
                        if (IsOpenCashDrawer())
                        {
                            try
                            {
                                RawPrinterHelper.OpenCashDrawer1(Settings.ReceiptPrinterName, Settings.CashDrawerCode);
                            }
                            catch
                            {
                            }
                        }
                    }

                    frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                    try
                    {
                        frm_POSInvoicePrintDlg.InvNo = intINV;
                        frm_POSInvoicePrintDlg.PrintType = "Safe Drop";
                        frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                        //frm_POSInvoicePrintDlg.PaidOutDesc = strDesc;
                        frm_POSInvoicePrintDlg.PaidOutAmount = dblAmt;
                        frm_POSInvoicePrintDlg.PaidOutTranNo = intTran;
                        frm_POSInvoicePrintDlg.ShowDialog();
                    }
                    finally
                    {
                        frm_POSInvoicePrintDlg.Close();
                    }
                }
                blurGrid.Visibility = Visibility.Collapsed;
                InitializeScreen();
                GeneralFunctions.SetFocus(txtSKU);*/

                if (bOk)
                {
                    GoToTenderForPaidinoutSafedrop("Safe Drop", strDesc, -dblAmt);
                }
            }
        }


        private void btnPaidOut_Click(object sender, RoutedEventArgs e)
        {
            btnPaidOutClick(sender, e);
        }
        public void btnPaidOutClick(object sender, EventArgs e)
        {
            if (strCurrentServiceType != "Sales") return;


            if (!CheckFunctionButton("31e"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (dtblPOS.Rows.Count > 0)
            {
                new MessageBoxWindow().Show("Transaction must be complete before a 'Paid Out' will process!", Properties.Resources.Paid_Out_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }
            else
            {
                /*
                if (Settings.ReceiptPrinterName == "")
                {
                    DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                    return;
                }*/

                bool boolPosted;
                string strDesc = "";
                int intTran = 0;
                int intINV = 0;
                double dblAmt = 0;
                bool bOk = false;
                blurGrid.Visibility = Visibility.Visible;
                frm_POSPaidOutDlg frm_POSPaidOutDlg = new frm_POSPaidOutDlg();
                try
                {
                    frm_POSPaidOutDlg.calledfrm = this;
                    frm_POSPaidOutDlg.SuperUserID = intSuperUserID;
                    frm_POSPaidOutDlg.FunctionBtnAccess = blFunctionBtnAccess;
                    frm_POSPaidOutDlg.ShowDialog();
                    if (frm_POSPaidOutDlg.DialogResult == true)
                    {
                        strDesc = frm_POSPaidOutDlg.PaidOutDesc;
                        dblAmt = frm_POSPaidOutDlg.PaidOutAmount;

                        bOk = true;
                    }
                }
                finally
                {
                    frm_POSPaidOutDlg.Close();
                    blurGrid.Visibility = Visibility.Collapsed;
                    /* boolPosted = frm_POSPaidOutDlg.FinalFlag;
                     strDesc = frm_POSPaidOutDlg.PaidOutDesc;
                     intTran = frm_POSPaidOutDlg.TranNo;
                     dblAmt = frm_POSPaidOutDlg.PaidOutAmount;
                     intINV = frm_POSPaidOutDlg.InvNo;*/
                }

                /*
                if (boolPosted)
                {
                    if (Settings.ReceiptPrinterName != "")
                    {
                        if (IsOpenCashDrawer())
                        {
                            try
                            {
                                RawPrinterHelper.OpenCashDrawer1(Settings.ReceiptPrinterName, Settings.CashDrawerCode);
                            }
                            catch
                            {
                            }
                        }
                    }

                    frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                    try
                    {
                        frm_POSInvoicePrintDlg.InvNo = intINV;
                        frm_POSInvoicePrintDlg.PrintType = "Paid Out";
                        frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                        frm_POSInvoicePrintDlg.PaidOutDesc = strDesc;
                        frm_POSInvoicePrintDlg.PaidOutAmount = dblAmt;
                        frm_POSInvoicePrintDlg.PaidOutTranNo = intTran;
                        frm_POSInvoicePrintDlg.ShowDialog();
                    }
                    finally
                    {
                    }
                }
                */
                //blurGrid.Visibility = Visibility.Collapsed;
                //InitializeScreen();
                //GeneralFunctions.SetFocus(txtSKU);

                if (bOk)
                {
                    GoToTenderForPaidinoutSafedrop("Paid Out", strDesc, -dblAmt);
                }
            }

   
        }

        private void GoToTenderForPaidinoutSafedrop(string callFor, string strExp, double dblAmt)
        {
            bool blclearflg = false;
            frmPOSTenderDlg frm_POSTenderDlg = new frmPOSTenderDlg();
            try
            {
                frm_POSTenderDlg.PaidInOutExplanation = strExp;
                frm_POSTenderDlg.PaidInOutAmount = dblAmt;
                if (callFor == "Paid Out")
                {
                    frm_POSTenderDlg.boolPaidout = true;
                }
                if (callFor == "Paid In")
                {
                    frm_POSTenderDlg.boolPaidin = true;
                }
                if (callFor == "Safe Drop")
                {
                    frm_POSTenderDlg.boolSafedrop = true;
                }

                frm_POSTenderDlg.ResumeTransaction = false;
                frm_POSTenderDlg.WorkOrderTransaction = false;
                
                frm_POSTenderDlg.SelectedReturnInvoiceNo = 0;
                frm_POSTenderDlg.ApptDatatbl = null;
                frm_POSTenderDlg.SuspendInvoiceNo = 0;
                frm_POSTenderDlg.ReturnItem = false;
                frm_POSTenderDlg.ExistCoupon = false;
                frm_POSTenderDlg.Sale = false;
                frm_POSTenderDlg.ServiceType = strCurrentServiceType;
                frm_POSTenderDlg.RentIssued = false;
                frm_POSTenderDlg.RentRecall = false;
                frm_POSTenderDlg.RepairIssued = false;
                frm_POSTenderDlg.RepairRecall = false;
                frm_POSTenderDlg.RepairAdvance = 0;
                frm_POSTenderDlg.RepairDue = 0;
                frm_POSTenderDlg.RepairTender = 0;
                frm_POSTenderDlg.IssueRepairInvNo = 0;

                frm_POSTenderDlg.CustomerOrdering = false;
                frm_POSTenderDlg.CustomerOrderNo = 0;

                frm_POSTenderDlg.RepairAmount = 0;
                frm_POSTenderDlg.dtlRepairItemInfo = null;

                frm_POSTenderDlg.RentSecurityDeposit = 0;
                frm_POSTenderDlg.IssueRentInvNo = 0;
                frm_POSTenderDlg.RentCalcFlag = "";
                frm_POSTenderDlg.FinalFlag = false;
                frm_POSTenderDlg.CustID = 0;
                frm_POSTenderDlg.TaxExempt = "N";
                frm_POSTenderDlg.StoreCr = 0;
                frm_POSTenderDlg.CustAcctLimit = 0;
                frm_POSTenderDlg.CustAcctBalance = 0;
                frm_POSTenderDlg.POSDatatbl = null;
                frm_POSTenderDlg.MaxInvNo = intMaxInvNo;
                frm_POSTenderDlg.SuperUserID = intSuperUserID;
                frm_POSTenderDlg.FunctionBtnAccess = blFunctionBtnAccess;

                frm_POSTenderDlg.TCustDTaxID = CustDTaxID;
                frm_POSTenderDlg.TCustDTaxName = CustDTaxName;
                frm_POSTenderDlg.TCustDTaxType = CustDTaxType;
                frm_POSTenderDlg.TCustDTaxRate = CustDTaxRate;
                frm_POSTenderDlg.TCustDTaxValue = CustDTaxValue;

                frm_POSTenderDlg.calledfrm = this;

                

                

                blurGrid.Visibility = Visibility.Visible;
                frm_POSTenderDlg.ShowDialog();
                boolLoadAllItem = true;
                blurGrid.Visibility = Visibility.Collapsed;
            }
            finally
            {
                blclearflg = frm_POSTenderDlg.FinalFlag;
                
            }
            InitializeScreen();
            GeneralFunctions.SetFocus(txtSKU);
        }

        private void btnNoSale_Click(object sender, RoutedEventArgs e)
        {
            btnNoSaleClick(sender, e);
        }
        public void btnNoSaleClick(object sender, EventArgs e)
        {
            if (strCurrentServiceType != "Sales") return;



            if (!CheckFunctionButton("31m"))
            {
                CloseMoreFunctions();
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }


            string srterrmsg = "Error";
            if (dtblPOS.Rows.Count > 0)
            {
                new MessageBoxWindow().Show("Transaction must be complete before a No Sale will process", "No Sale Validation", MessageBoxButton.OK, MessageBoxImage.Information);
                CloseMoreFunctions();
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }
            else
            {
                /*
                if (Settings.ReceiptPrinterName == "")
                {
                    DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                    CloseMoreFunctions();
                    return;
                }*/

                PosDataObject.POS objpos = new PosDataObject.POS();
                objpos.Connection = SystemVariables.Conn;
                objpos.EmployeeID = SystemVariables.CurrentUserID;
                objpos.TransType = 5; // No Sale
                objpos.CustomerID = 0;
                objpos.FunctionButtonAccess = blFunctionBtnAccess;
                objpos.ChangedByAdmin = intSuperUserID;
                // static value
                objpos.StoreID = 1;
                objpos.RegisterID = 1;
                objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
                objpos.TransNoteNo = 0;
                // static value
                objpos.TerminalName = Settings.TerminalName;
                objpos.GCCentralFlag = Settings.CentralExportImport;
                objpos.GCOPStore = Settings.StoreCode;

                objpos.OperateStore = Settings.StoreCode;

                objpos.BeginTransaction();
                if (objpos.CreateInvoice())
                {
                    blInitAutoSignOut = true;
                    srterrmsg = "";
                }
                objpos.EndTransaction();
                if (srterrmsg == "")
                {
                    if (Settings.ReceiptPrinterName != "")
                    {
                        if (IsOpenCashDrawer())
                        {
                            try
                            {
                                RawPrinterHelper.OpenCashDrawer1(Settings.ReceiptPrinterName, Settings.CashDrawerCode);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if (Settings.NoSaleReceipt == "N")
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                        try
                        {
                            frm_POSInvoicePrintDlg.InvNo = objpos.TransactionNo;
                            frm_POSInvoicePrintDlg.PrintType = "No Sale";
                            frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                            frm_POSInvoicePrintDlg.ShowDialog();
                        }
                        finally
                        {
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                    }
                }

                CloseMoreFunctions();
                InitializeScreen();
                GeneralFunctions.SetFocus(txtSKU);
            }
        }
        private void btnCancel_Click(object sender, RoutedEventArgs e)
        {
            btnCancelClick(sender, e);
        }
        public void btnCancelClick(object sender, EventArgs e)
        {


            if (dtblPOS.Rows.Count > 0)
            {
                if (new MessageBoxWindow().Show("Do you want to cancel all items?", "Cancel Transaction", MessageBoxButton.OKCancel, MessageBoxImage.Information) == MessageBoxResult.Cancel)
                {
                    CloseMoreFunctions();
                    return;
                }
            }
            if ((blResumeTransaction) && (dtblPOS.Rows.Count > 0))
            {
                PosDataObject.POS objPOS = new PosDataObject.POS();
                objPOS.Connection = SystemVariables.Conn;
                objPOS.SuspendInvoiceNo = intMaxInvNo;
                objPOS.BeginTransaction();
                if (objPOS.CancelSuspendedTran())
                {
                }
                objPOS.EndTransaction();
            }

            if ((blWorkOrder) && (dtblPOS.Rows.Count > 0))
            {
                PosDataObject.POS objPOS = new PosDataObject.POS();
                objPOS.Connection = SystemVariables.Conn;
                objPOS.SuspendInvoiceNo = intMaxInvNo;
                objPOS.BeginTransaction();
                if (objPOS.CancelWorkOrderTran())
                {
                }
                objPOS.EndTransaction();
            }

            CloseMoreFunctions();
            InitializeScreen();

        }



        private void btnLayAway_Click(object sender, RoutedEventArgs e)
        {
            btnLayawayClick(sender, e);
        }
        public void btnLayawayClick(object sender, EventArgs e)
        {


            if (strCurrentServiceType != "Sales") return;
            if (blReturnItem) return;

            if (!CheckFunctionButton("31u"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (intCustID == 0)
            {
                new MessageBoxWindow().Show("Customer required for Layaway", Properties.Resources.Layaway, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }

            if (intCustID > 0)
            {
                if (!CheckActiveCustomer(intCustID))
                {
                    new MessageBoxWindow().Show("Transaction is possible for active customer only", Properties.Resources.Customer_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtCust);
                    CloseMoreFunctions();
                    return;
                }
            }

            if (Settings.DemoVersion == "Y")
            {
                if (!ContinueWithDemoVersion())
                {
                    new MessageBoxWindow().Show(Properties.Resources.DEMO_Version_does_not_permit_more_invoices_, Properties.Resources.DEMOVERSION, MessageBoxButton.OK, MessageBoxImage.Information);
                    Settings.PriceLevelForOneTime = "N";
                    Settings.PriceLevelForThisSale = "N";
                    CloseMoreFunctions();
                    return;
                }
            }

            bool blclearflg = false;
            if (dtblPOS.Rows.Count > 0)
            {
                if (!IfCouponExistsInLayaway())
                {
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSNewLayawayDlg frm_POSNewLayawayDlg = new frm_POSNewLayawayDlg();
                    try
                    {
                        frm_POSNewLayawayDlg.CustID = intCustID;
                        frm_POSNewLayawayDlg.TaxExempt = strTaxExempt;
                        frm_POSNewLayawayDlg.POSdtbl = dtblPOS;
                        frm_POSNewLayawayDlg.TotalAmt = Convert.ToDouble(numTotal.Text);
                        frm_POSNewLayawayDlg.StoreCr = dblStoreCr;
                        frm_POSNewLayawayDlg.CustAcctLimit = dblCustAcctLimit;
                        frm_POSNewLayawayDlg.CustAcctBalance = dblCustAcctBalance;
                        frm_POSNewLayawayDlg.FinalFlag = false;
                        frm_POSNewLayawayDlg.FunctionBtnAccess = blFunctionBtnAccess;
                        frm_POSNewLayawayDlg.SuperUserID = intSuperUserID;
                        frm_POSNewLayawayDlg.calledfrm = this;

                        frm_POSNewLayawayDlg.TCustDTaxID = CustDTaxID;
                        frm_POSNewLayawayDlg.TCustDTaxName = CustDTaxName;
                        frm_POSNewLayawayDlg.TCustDTaxType = CustDTaxType;
                        frm_POSNewLayawayDlg.TCustDTaxRate = CustDTaxRate;
                        frm_POSNewLayawayDlg.TCustDTaxValue = CustDTaxValue;

                        frm_POSNewLayawayDlg.ShowDialog();
                    }
                    finally
                    {
                        blclearflg = frm_POSNewLayawayDlg.FinalFlag;
                        blurGrid.Visibility = Visibility.Collapsed;

                    }
                    if (blclearflg)
                    {
                        blInitAutoSignOut = true;
                        InitializeScreen();
                    }
                }
                else
                {
                    new MessageBoxWindow().Show("Ticket Discount not allowed in Layaway", Properties.Resources.Layaway, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
            }
            else
            {
                DataTable dtbl = new DataTable();
                PosDataObject.POS objPOS = new PosDataObject.POS();
                objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
                dtbl = objPOS.FetchLayawayHeader(intCustID);
                if (dtbl.Rows.Count == 0)
                {
                    new MessageBoxWindow().Show(lbCustName.Text + " has no outstanding items on layaway." + "\n" + "Items required for new layaway", Properties.Resources.Layaway, MessageBoxButton.OK, MessageBoxImage.Information);
                    return;
                }
                blurGrid.Visibility = Visibility.Visible;
                frm_POSLayawayBrw frm_POSLayawayBrw = new frm_POSLayawayBrw();
                try
                {
                    frm_POSLayawayBrw.frm_POSLayawayBrwUC.CustomerID = intCustID;
                    frm_POSLayawayBrw.frm_POSLayawayBrwUC.FinalFlag = false;
                    frm_POSLayawayBrw.frm_POSLayawayBrwUC.FunctionBtnAccess = blFunctionBtnAccess;
                    frm_POSLayawayBrw.frm_POSLayawayBrwUC.SuperUserID = intSuperUserID;
                    frm_POSLayawayBrw.frm_POSLayawayBrwUC.calledform = this;
                    frm_POSLayawayBrw.ShowDialog();
                }
                finally
                {
                    blurGrid.Visibility = Visibility.Collapsed;
                    blclearflg = frm_POSLayawayBrw.frm_POSLayawayBrwUC.FinalFlag;
                    dtblForStockUpdate = frm_POSLayawayBrw.frm_POSLayawayBrwUC.Layaway;

                }
                if (blclearflg)
                {
                    if (dtblForStockUpdate != null)
                    {
                        if (dtblForStockUpdate.Rows.Count > 0)
                        {
                            string strId = ""; int intStock = 0;
                            //Control[] findctrl;
                            PosDataObject.POS objPOS1 = new PosDataObject.POS();
                            objPOS1.Connection = SystemVariables.Conn;

                            foreach (DataRow dr in dtblForStockUpdate.Rows)
                            {
                                if ((dr["ProductType"].ToString() == "G") || (dr["ProductType"].ToString() == "A")
                                    || (dr["ProductType"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "X")
                                    || (dr["PRODUCTTYPE"].ToString() == "O")) continue;
                                // avoid gift certificate, account payment
                                strId = dr["ProductID"].ToString();
                                if (strId != "")
                                {
                                    /*Block By Rajib for (int i = 0; i < POSItemsListBox.Items.Count; i++)
                                    {
                                        ListBoxItem lbi = POSItemsListBox.Items[i] as ListBoxItem;
                                        if ((lbi.Tag as POSItem).ItemID.ToString() == strId)
                                        {
                                            (lbi.Tag as POSItem).CurrentStock = intStock;
                                            break;
                                        }

                                    } Block By Rajib*/

                                    //findctrl = pnlCat.Controls.Find(strId, true);
                                    //if (findctrl.Length > 0)
                                    //{
                                    //    if (findctrl != null)
                                    //    {
                                    //        if (findctrl[0] is POSControls.POSItem)
                                    //        {
                                    //            intStock = objPOS1.GetStockforItem(GeneralFunctions.fnInt32(strId));
                                    //            (findctrl[0] as POSControls.POSItem).CurrentStock = intStock;

                                    //        }
                                    //    }
                                    //}
                                }
                            }
                        }
                    }
                    blInitAutoSignOut = true;
                    InitializeScreen();
                }
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
            }

        }
        private bool IfCouponExistsInLayaway()
        {
            bool bfg = false;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() == "C")
                {
                    bfg = true;
                    break;
                }
            }
            return bfg;
        }

        public void btnGiftAidClick(object sender, EventArgs e)
        {
            if (strCurrentServiceType != "Sales") return;

            if (blReturnItem) return;

            if (dtblPOS.Rows.Count > 0) return;


            /*if ((SystemVariables.CurrentUserID > 0) && (!SecurityPermission.AcssPOSAcctpay))
            {
                DocMessage.POSRestrictAccess();
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (intCustID == 0)
            {
                new MessageBoxWindow().Show(Properties.Resources.Customer_Required_for_Account_Pay, Properties.Resources.Account_Pay, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }*/

            blurGrid.Visibility = Visibility.Visible;
            frm_POSGiftAidDlg frm_POSAcctPayDlg = new frm_POSGiftAidDlg();
            try
            {
                frm_POSAcctPayDlg.CustomerID = intCustID;
                frm_POSAcctPayDlg.ShowDialog();
                if (frm_POSAcctPayDlg.DialogResult == true)
                {
                    int APID = intGiftAidID++;
                    string refDP = "";
                    if (Settings.DecimalPlace == 3)
                    {
                        refDP = "3";
                    }
                    else
                    {
                        refDP = "2";
                    }
                    dtblPOS.Rows.Add(new object[]
                                            { APID.ToString(),"Gift Aid","I","0","0","0",1,frm_POSAcctPayDlg.Price,
                                              frm_POSAcctPayDlg.Price,frm_POSAcctPayDlg.Price,"0","0","0","","","","",
                                              GetUniqueString(),refDP,frm_POSAcctPayDlg.CustomerAddress,"","0","0","0",frm_POSAcctPayDlg.CustomerName,"1", "0","0","0","","","","0","0","0",
                                              "N","N","N","Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,frm_POSAcctPayDlg.Price,frm_POSAcctPayDlg.Price,"","","","","","Y"});
                    /// Set UP/Down Button to move cursor through Cart Item
                    
                    SetCartDisplay();

                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;

                    EnableDisableButton(btnUP, btnDown, gridControl1);
                    GetTotal(); /// Calculate and Display Cart Total
                    ShowTax(); /// Calculate and Display Taxes of Cart Items
                    ResetQty();  /// Reset Item Quantity
                }
            }
            finally
            {
                frm_POSAcctPayDlg.Close();
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }

        private void btnAcctPay_Click(object sender, RoutedEventArgs e)
        {
            btnAcctPayClick(sender, e);
        }
        public void btnAcctPayClick(object sender, EventArgs e)
        {
            if (strCurrentServiceType != "Sales") return;

            if (blReturnItem) return;

            if (IsDonationRecordExistsInCart()) return;

            if ((SystemVariables.CurrentUserID > 0) && (!SecurityPermission.AcssPOSAcctpay))
            {
                DocMessage.POSRestrictAccess();
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (intCustID == 0)
            {
                new MessageBoxWindow().Show(Properties.Resources.Customer_Required_for_Account_Pay, Properties.Resources.Account_Pay, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSAcctPayDlg frm_POSAcctPayDlg = new frm_POSAcctPayDlg();
            try
            {
                frm_POSAcctPayDlg.CustomerID = intCustID;
                frm_POSAcctPayDlg.ShowDialog();
                if (frm_POSAcctPayDlg.DialogResult == true)
                {
                    int APID = intAcctPayID++;
                    string refDP = "";
                    if (Settings.DecimalPlace == 3)
                    {
                        refDP = "3";
                    }
                    else
                    {
                        refDP = "2";
                    }
                    dtblPOS.Rows.Add(new object[]
                                            { APID.ToString(),"Account Payment","A","0","0","0",intPressQty,frm_POSAcctPayDlg.Payment,
                                              frm_POSAcctPayDlg.Payment,frm_POSAcctPayDlg.Payment,"0","0","0","","","","",
                                              GetUniqueString(),refDP,"","","0","0","0","","1", "0","0","0","","","","0","0","0",
                                              "N","N","N","Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                              "0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,frm_POSAcctPayDlg.Payment,frm_POSAcctPayDlg.Payment,"","","","","","N"});
                    /// Set UP/Down Button to move cursor through Cart Item

                   
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                    EnableDisableButton(btnUP, btnDown, gridControl1);
                    GetTotal(); /// Calculate and Display Cart Total
                    ShowTax(); /// Calculate and Display Taxes of Cart Items
                    ResetQty();  /// Reset Item Quantity
                }
            }
            finally
            {
                frm_POSAcctPayDlg.Close();
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        private void btnGiftCert_Click(object sender, RoutedEventArgs e)
        {
            btnGiftCertClick(sender, e);
        }
        public void btnGiftCertClick(object sender, EventArgs e)
        {

            if (strCurrentServiceType != "Sales") return;
            if (blReturnItem) return;
            if (IsDonationRecordExistsInCart()) return;

            if (!CheckFunctionButton("31g"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSGiftCertDlg frm_POSGiftCertDlg = new frm_POSGiftCertDlg();
            try
            {
                frm_POSGiftCertDlg.IsMercuryGiftCard = false;
                frm_POSGiftCertDlg.CustomerID = intCustID;

                frm_POSGiftCertDlg.ShowDialog();

                if (frm_POSGiftCertDlg.DialogResult == true)
                {
                    intGiftCertNo = frm_POSGiftCertDlg.GiftCertNo;
                    dblGiftCertAmt = frm_POSGiftCertDlg.GiftCertAmount;

                    if (Settings.AutoGC == "N")
                    {
                        if (!ExistGiftCertInCart(intGiftCertNo))
                        {
                            string refDP = "";
                            if (Settings.DecimalPlace == 3)
                            {
                                refDP = "2";
                            }
                            else
                            {
                                refDP = "3";
                            }
                            dtblPOS.Rows.Add(new object[] { intGiftCertNo.ToString(), "GC#:"+intGiftCertNo.ToString(),"G","0","0","0", "1",
                                            dblGiftCertAmt.ToString(),"0",dblGiftCertAmt.ToString(),"0","0","0","","","","",
                                            GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N","Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                            0,"","",0,0,0,"","0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,dblGiftCertAmt.ToString(),dblGiftCertAmt.ToString(),"","","","","","N"});
                            SetCartDisplay();
                            gridControl1.ItemsSource = dtblPOS;
                            ToggleWithEmptyCart();
                            gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                            GetTotal();
                        }
                        else
                        {
                            new MessageBoxWindow().Show(Properties.Resources.This_Gift_Certificate___already_exists_in_this_transaction, Properties.Resources.Gift_Certificate_Validation, MessageBoxButton.OK, MessageBoxImage.Stop);
                        }
                    }
                    else
                    {
                        string refDP = "";
                        if (Settings.DecimalPlace == 3)
                        {
                            refDP = "2";
                        }
                        else
                        {
                            refDP = "3";
                        }
                        dtblPOS.Rows.Add(new object[] { intGiftCertNo.ToString(), "GC#:"+intGiftCertNo.ToString(),"G","0","0","0", "1",
                                            dblGiftCertAmt.ToString(),"0",dblGiftCertAmt.ToString(),"0","0","0","","","","",
                                            GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N","Sales","NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                            0,"","",0,0,0,"","0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,dblGiftCertAmt.ToString(),dblGiftCertAmt.ToString(),"","","","","","N"});
                        SetCartDisplay();
                        gridControl1.ItemsSource = dtblPOS;
                        ToggleWithEmptyCart();
                        gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                        GetTotal();
                    }
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        /// check if gift certificate exists in the cart or not

        private bool ExistGiftCertInCart(string GC)
        {
            bool blExists = false;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() != "G") continue;
                if (dr["ID"].ToString() == GC)
                {
                    blExists = true;
                    break;
                }
            }
            return blExists;
        }
        private void btnResumeSuspend_Click(object sender, RoutedEventArgs e)
        {
            btnResumeSuspendClick(sender, e);
        }
        public void btnResumeSuspendClick(object sender, EventArgs e)
        {


            if (strCurrentServiceType != "Sales") return;
            if (blReturnItem) return;
            if (!CheckFunctionButton("31j"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (Settings.DemoVersion == "Y")
            {
                if (!ContinueWithDemoVersion())
                {
                    new MessageBoxWindow().Show(Properties.Resources.DEMO_Version_does_not_permit_more_invoices_, Properties.Resources.DEMOVERSION, MessageBoxButton.OK, MessageBoxImage.Information);
                    Settings.PriceLevelForOneTime = "N";
                    Settings.PriceLevelForThisSale = "N";
                    CloseMoreFunctions();
                    return;
                }
            }

            if (dtblPOS.Rows.Count > 0)  // Suspend
            {
                int ccnt = 0;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")) ccnt++;
                }
                if (ccnt == dtblPOS.Rows.Count)
                {
                    new MessageBoxWindow().Show(Properties.Resources.No_item_selected_for_suspend, Properties.Resources.Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }

                if (!FinalAgeVerificationOfCartBeforePosting()) return;

                /*
                if (Settings.ReceiptPrinterName == "")
                {
                    DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                    CloseMoreFunctions();
                    return;
                }*/

                double tempfeescpn = 0;
                double tempfeescpntax = 0;
                double tempfees = 0;
                double tempfeestax = 0;
                double tempdiscount = 0;
                double tempcoupon = 0;
                double tempdtax = 0;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                        || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")
                        || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                    if (dr["PRODUCTTYPE"].ToString() == "C") tempcoupon = tempcoupon + GeneralFunctions.fnDouble(dr["DISCOUNT"]);
                    else tempdiscount = tempdiscount + GeneralFunctions.fnDouble(dr["DISCOUNT"]);
                }

                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if (dr["FEESID"].ToString() == "0") continue;
                    if (dr["PRODUCTTYPE"].ToString() == "H")
                    {
                        tempfeescpn = tempfeescpn + GeneralFunctions.fnDouble(dr["FEES"]);
                        tempfeescpntax = tempfeescpntax + GeneralFunctions.fnDouble(dr["FEESTAX"]);
                    }
                    else
                    {
                        tempfees = tempfees + GeneralFunctions.fnDouble(dr["FEES"]);
                        tempfeestax = tempfees + GeneralFunctions.fnDouble(dr["FEESTAX"]);
                    }
                }

                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if (dr["DTXID"].ToString() == "0") continue;
                    tempdtax = tempdtax + GeneralFunctions.fnDouble(dr["DTX"]);
                }

                tempcoupon = 0;
                dblCouponPerc = 0;
                dblCouponApplicableTotal = 0;
                CouponCalculation(dtblPOS, ref tempcoupon, ref dblCouponPerc, ref dblCouponApplicableTotal);

                int intINV = 0;
                string srterrmsg = "";
                PosDataObject.POS objpos = new PosDataObject.POS();
                objpos.Connection = SystemVariables.Conn;
                objpos.LoginUserID = SystemVariables.CurrentUserID;
                objpos.EmployeeID = SystemVariables.CurrentUserID;
                objpos.CustomerID = intCustID;
                objpos.TransType = 9; // suspend
                objpos.ReceiptCnt = 1;
                objpos.Status = 2;
                objpos.Tax = Convert.ToDouble(numTax.Text);
                objpos.TotalFees = tempfees;
                objpos.TotalFeesTax = tempfeestax;
                objpos.TotalFeesCoupon = tempfeescpn;
                objpos.TotalFeesCouponTax = tempfeescpntax;
                objpos.DTaxID = CustDTaxID;
                objpos.DTax = tempdtax;
                objpos.Discount = tempdiscount;
                objpos.Coupon = tempcoupon;
                objpos.CouponPerc = dblCouponPerc;
                objpos.DiscountReason = "";
                objpos.TotalSale = Convert.ToDouble(numTotal.Text);
                objpos.ItemDataTable = FinalDataTable();
                objpos.TaxID1 = intTaxID1;
                objpos.TaxID2 = intTaxID2;
                objpos.TaxID3 = intTaxID3;
                objpos.Tax1 = dblTax1;
                objpos.Tax2 = dblTax2;
                objpos.Tax3 = dblTax3;
                objpos.ErrorMsg = "";
                objpos.SuspendInvoiceNo = intSuspendInvNo;
                objpos.ChangedByAdmin = intSuperUserID;
                objpos.FunctionButtonAccess = blFunctionBtnAccess;
                // static value
                objpos.StoreID = 1;
                objpos.RegisterID = 1;
                objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
                objpos.TransNoteNo = 0;
                objpos.LayawayNo = 0;
                objpos.TransMSeconds = 0;
                // static value
                objpos.TerminalName = Settings.TerminalName;
                objpos.GCCentralFlag = Settings.CentralExportImport;
                objpos.GCOPStore = Settings.StoreCode;

                objpos.OperateStore = Settings.StoreCode;

                objpos.CustomerDOB = dtCustomerDOB;

                objpos.BeginTransaction();
                if (objpos.CreateInvoice())
                {
                    blInitAutoSignOut = true;
                    intINV = objpos.SuspendInvoiceNo;
                }

                objpos.EndTransaction();
                srterrmsg = objpos.ErrorMsg;
                if (srterrmsg == "")
                {
                    new MessageBoxWindow().Show("Invoice No. :" + intINV.ToString() + " " + "has been suspended", "Suspend Transaction", MessageBoxButton.OK, MessageBoxImage.Information);
                    InitializeScreen();

                    blurGrid.Visibility = Visibility.Visible;
                    frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                    try
                    {
                        frm_POSInvoicePrintDlg.PrintType = "Suspend Receipt";
                        frm_POSInvoicePrintDlg.InvNo = intINV;
                        frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                        frm_POSInvoicePrintDlg.ShowDialog();
                    }
                    finally
                    {
                        blurGrid.Visibility = Visibility.Collapsed;
                    }
                    CloseMoreFunctions();
                    return;
                }
            }

            if (dtblPOS.Rows.Count == 0)  // Resume
            {
                blurGrid.Visibility = Visibility.Visible;
                frm_POSResumeTranDlg frm_POSResumeTranDlg = new frm_POSResumeTranDlg();
                try
                {
                    frm_POSResumeTranDlg.ShowDialog();
                    if (frm_POSResumeTranDlg.DialogResult == true)
                    {
                        intSuspendInvNo = frm_POSResumeTranDlg.SuspendInv;
                        intMaxInvNo = intSuspendInvNo;
                        lbRedTop.Text = "Invoice #  " + intMaxInvNo.ToString() + "  ";
                        dtCustomerDOB = frm_POSResumeTranDlg.SuspendDOB == "" ? Convert.ToDateTime(null) : Convert.ToDateTime(frm_POSResumeTranDlg.SuspendDOB);
                        AddDatatableWithSuspendData();
                        blResumeTransaction = true;
                    }
                }
                finally
                {
                    blurGrid.Visibility = Visibility.Collapsed;
                }
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
            }
        }
        // Assign Cart with Suspended ticket

        private void AddDatatableWithSuspendData()
        {

            DataTable dtbl = new DataTable();

            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;

            dtbl = objPOS.FetchSuspendedRecord(intSuspendInvNo);

            string strUOMCount = "0";
            string strUOMPrice = "";
            string strUOMDesc = "";

            string strMatxOID = "";
            string strMatxOV1 = "";
            string strMatxOV2 = "";
            string strMatxOV3 = "";

            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";

            int intfocusrow = 0;
            double intQty = 0;
            double dblPrice = 0;
            string strselectid = "";
            string strDL = "";

            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";
            string refRentPrompt = "";
            int tmixunique = 0;

            string refUOM = "";

            int rowno = 0;
            foreach (DataRow dr in dtbl.Rows)
            {
                if (GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()) > tmixunique)
                    tmixunique = GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString());
                if (intfocusrow == 0)
                {
                    intCustID = GeneralFunctions.fnInt32(dr["CustomerID"].ToString());
                    if (intCustID > 0)
                    {
                        blChangeCustomer = true;
                        string refTaxExempt = "";
                        string refDiscountLevel = "";
                        string refTaxID = "";
                        string refStoreCr = "";
                        string refCID = "";
                        string refCName = "";
                        string refCAdd = "";
                        double dblBalance = 0;
                        string refARCredit = "";
                        string refPOSNotes = "";

                        int refDTaxID = 0;
                        string refDTax = "";
                        double refDTaxRate = 0;
                        int refDTaxType = 0;

                        FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd, ref refTaxExempt,
                                        ref refDiscountLevel, ref refTaxID, ref refStoreCr, ref refARCredit,
                                        ref refPOSNotes, ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);

                        CustDTaxID = refDTaxID;
                        CustDTaxName = refDTax;
                        CustDTaxRate = refDTaxRate;
                        CustDTaxType = refDTaxType;
                        strTaxExempt = refTaxExempt;

                        strDiscountLevel = refDiscountLevel.Trim();
                        if (strDiscountLevel == "") strDiscountLevel = "A";
                        dblBalance = GetAccountBalance(intCustID);
                        txtCust.Text = refCID;
                        if (Settings.CentralExportImport == "Y")
                        {
                            string tstr = GetCustomerIssueStore(intCustID);
                            if (tstr != Settings.StoreCode) txtCustStore.Text = tstr;
                        }
                        lbCustNotes.Text = refPOSNotes;

                        lbCustName.Text = refCName;
                        lbCustAddress.Text = refCAdd;
                        ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                        dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                        dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                        dblCustAcctBalance = dblBalance;
                        RearrangeProductAsCustomerChange();
                        GetTotal();
                        ShowTax();
                    }
                }
                strselectid = "";
                strDL = "A";
                if ((dr["ProductType"].ToString() != "G") && (dr["ProductType"].ToString() != "A") &&
                    (dr["ProductType"].ToString() != "B") && (dr["ProductType"].ToString() != "C") &&
                    (dr["ProductType"].ToString() != "X") && (dr["ProductType"].ToString() != "O")
                     && (dr["ProductType"].ToString() != "H") && (dr["ProductType"].ToString() != "Z"))
                {

                    if (dr["ProductType"].ToString() == "U")
                    {
                        strUOMCount = dr["UOMCount"].ToString();
                        strUOMPrice = dr["UOMPrice"].ToString();
                        strUOMDesc = dr["UOMDesc"].ToString();
                    }

                    if (dr["ProductType"].ToString() == "M")
                    {
                        strMatxOID = dr["MatrixOptionID"].ToString();
                        strMatxOV1 = dr["OptionValue1"].ToString();
                        strMatxOV2 = dr["OptionValue2"].ToString();
                        strMatxOV3 = dr["OptionValue3"].ToString();
                    }

                    strselectid = dr["ProductID"].ToString();

                    if (dr["CustomerID"].ToString() != "0") strDL = dr["DiscountLevel"].ToString();

                    string refExpiry = "";

                    FetchProduct(GeneralFunctions.fnInt32(strselectid), strDL, intUsePriceLevel,
                                    ref refType, ref refOHQty, ref refNQty, ref refPrice, ref refNPrice,
                                    ref refCost, ref refPrompt, ref refDP, ref refAge,
                                    ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY, ref refRentWK,
                                    ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt, ref refRentPrompt,
                                    ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

                    //if (GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) > 0) 
                    refPrice = dr["NewPrice"].ToString();

                    intQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblPrice = GeneralFunctions.fnDouble(refPrice);
                    double tempprice = 0;

                    rowno++;

                    if (refType == "U")
                    {
                        if (dr["DiscountID"].ToString() != "0")
                            tempprice = (intQty * GeneralFunctions.fnDouble(strUOMPrice)) - GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        else
                            tempprice = (intQty * GeneralFunctions.fnDouble(strUOMPrice));
                        dtblPOS.Rows.Add(new object[] {
                                              dr["ProductID"].ToString(),
                                              GetProductDescInCart1(dr["Description"].ToString()+ " * "+ strUOMDesc,dr["DiscountID"].ToString(),
                                              dr["FEESID"].ToString(),dr["BuyNGetFreeCategory"].ToString()),
                                              refType,refOHQty,refNQty,refCost,GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),dr["QtyDecimal"].ToString(),dr["ProductType"].ToString()),strUOMPrice,refNPrice,tempprice.ToString(),
                                              strUOMCount,strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"",
                                              dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                              dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),

                                              GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                              "","","",
                                              GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                              dr["Taxable1"].ToString(),
                                              dr["Taxable2"].ToString(),
                                              dr["Taxable3"].ToString(),

                                              "Sales","NA","0","0","0","","","",
                                              GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                              dr["MixMatchFlag"].ToString(),
                                              dr["MixMatchType"].ToString(),
                                              GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                              GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                              dr["MixMatchLast"].ToString(),
                                              dr["FeesID"].ToString(),
                                              dr["FeesLogic"].ToString(),
                                              dr["FeesValue"].ToString(),
                                              dr["FeesTaxRate"].ToString(),
                                              dr["Fees"].ToString(),
                                              dr["FeesTax"].ToString(),
                                              dr["FeesText"].ToString(),
                                              dr["FeesQty"].ToString(),
                                              dr["SalePriceID"].ToString(),
                                              GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                              dr["EditFlag"].ToString(),
                                              dr["PromptPrice"].ToString(),
                                              dr["BuyNGetFreeHeaderID"].ToString(),
                                              dr["BuyNGetFreeCategory"].ToString(),
                                              rowno.ToString(),
                                              dr["BuyNGetFreeName"].ToString(),
                                              GeneralFunctions.fnInt32(dr["Age"].ToString()),
                                              GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                              dr["UOM"].ToString(),"","","","","N"});
                    }
                    else if (refType == "M")
                    {
                        if (dr["DiscountID"].ToString() != "0")
                            tempprice = (intQty * GeneralFunctions.fnDouble(refPrice)) - GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        else
                            tempprice = (intQty * GeneralFunctions.fnDouble(refPrice));

                        dtblPOS.Rows.Add(new object[] {
                                                dr["ProductID"].ToString(),
                                                GetProductDescInCart1(dr["Description"].ToString(),dr["DiscountID"].ToString(),
                                                dr["FEESID"].ToString(),dr["BuyNGetFreeCategory"].ToString()),
                                                refType,refOHQty,refNQty,refCost,GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),dr["QtyDecimal"].ToString(),dr["ProductType"].ToString()),refPrice,refNPrice,
                                                tempprice.ToString(),"0","0","0",
                                                strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"",
                                                dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                                dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                "","","",
                                                GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                dr["Taxable1"].ToString(),
                                                dr["Taxable2"].ToString(),
                                                dr["Taxable3"].ToString(),
                                                "Sales","NA","0","0","0","","","",
                                                GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                                dr["MixMatchFlag"].ToString(),
                                                dr["MixMatchType"].ToString(),
                                                GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                                dr["MixMatchLast"].ToString(),
                                                dr["FeesID"].ToString(),
                                                dr["FeesLogic"].ToString(),
                                                dr["FeesValue"].ToString(),
                                                dr["FeesTaxRate"].ToString(),
                                                dr["Fees"].ToString(),
                                                dr["FeesTax"].ToString(),
                                                dr["FeesText"].ToString(),
                                                dr["FeesQty"].ToString(),
                                                dr["SalePriceID"].ToString(),
                                                GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                                GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                                dr["EditFlag"].ToString(),
                                                dr["PromptPrice"].ToString(),
                                                dr["BuyNGetFreeHeaderID"].ToString(),
                                                dr["BuyNGetFreeCategory"].ToString(),
                                                rowno.ToString(),
                                                dr["BuyNGetFreeName"].ToString(),
                                                GeneralFunctions.fnInt32(dr["Age"].ToString()),
                                                GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                                dr["UOM"].ToString(),"","","",""
                        });
                    }
                    else
                    {
                        if (dr["DiscountID"].ToString() != "0")
                            tempprice = (intQty * GeneralFunctions.fnDouble(refPrice)) - GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        else
                            tempprice = (intQty * GeneralFunctions.fnDouble(refPrice));

                        dtblPOS.Rows.Add(new object[] {
                                                        dr["ProductID"].ToString(),
                                                        GetProductDescInCart1(dr["Description"].ToString(),dr["DiscountID"].ToString(),dr["FEESID"].ToString(),dr["BuyNGetFreeCategory"].ToString()),
                                                        refType,refOHQty,refNQty,refCost,GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),dr["QtyDecimal"].ToString(),dr["ProductType"].ToString()),refPrice,refNPrice,
                                                        tempprice.ToString(),dr["UOMCount"].ToString(),
                                                        "0","0","","","","",GetUniqueString(),refDP,"",
                                                        dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                                        dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),

                                                        GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                        "","","",
                                                        GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                        dr["Taxable1"].ToString(),
                                                        dr["Taxable2"].ToString(),
                                                        dr["Taxable3"].ToString(),
                                                        "Sales","NA","0","0","0","","","",
                                                        GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                                        dr["MixMatchFlag"].ToString(),
                                                        dr["MixMatchType"].ToString(),
                                                        GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                                        dr["MixMatchLast"].ToString(),
                                                        dr["FeesID"].ToString(),
                                                        dr["FeesLogic"].ToString(),
                                                        dr["FeesValue"].ToString(),
                                                        dr["FeesTaxRate"].ToString(),
                                                        dr["Fees"].ToString(),
                                                        dr["FeesTax"].ToString(),
                                                        dr["FeesText"].ToString(),
                                                        dr["FeesQty"].ToString(),
                                                        dr["SalePriceID"].ToString(),
                                                        GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                                        dr["EditFlag"].ToString(),
                                                        dr["PromptPrice"].ToString(),
                                                        dr["BuyNGetFreeHeaderID"].ToString(),
                                                        dr["BuyNGetFreeCategory"].ToString(),
                                                        rowno.ToString(),
                                                        dr["BuyNGetFreeName"].ToString(),
                                                        GeneralFunctions.fnInt32(dr["Age"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                                        dr["UOM"].ToString(),"","","",""
                                                        });
                    }
                    intfocusrow++;

                }
                else
                {
                    if (dr["ProductType"].ToString() == "A")
                    {
                        dtblPOS.Rows.Add(new object[] {
                                                    dr["ProductID"].ToString(),
                                                    "Account Payment","A","0","0","0",GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),dr["QtyDecimal"].ToString(),dr["ProductType"].ToString()),
                                                    dr["PriceA"].ToString(),dr["PriceA"].ToString(),dr["PriceA"].ToString(),
                                                    "0","0","0","","","","",GetUniqueString(),refDP,"",
                                                    dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                                    dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                    GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                    GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                    GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                    "","","",
                                                    GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                    GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                    GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                    dr["Taxable1"].ToString(),
                                                    dr["Taxable2"].ToString(),
                                                    dr["Taxable3"].ToString(),
                                                    "Sales","NA","0","0","0","","","",
                                                    GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                                    GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                                    GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                                    GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                    GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                    GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                    GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                                    GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                                    GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                                    GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                                    dr["MixMatchFlag"].ToString(),
                                                    dr["MixMatchType"].ToString(),
                                                    GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                                    GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                                    GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                                    dr["MixMatchLast"].ToString(),
                                                    dr["FeesID"].ToString(),
                                                    dr["FeesLogic"].ToString(),
                                                    dr["FeesValue"].ToString(),
                                                    dr["FeesTaxRate"].ToString(),
                                                    dr["Fees"].ToString(),
                                                    dr["FeesTax"].ToString(),
                                                    dr["FeesText"].ToString(),
                                                    dr["FeesQty"].ToString(),
                                                    dr["SalePriceID"].ToString(),
                                                    GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                                    GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                                    GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                                    GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                                    dr["EditFlag"].ToString(),
                                                    dr["PromptPrice"].ToString(),
                                                    dr["BuyNGetFreeHeaderID"].ToString(),
                                                    dr["BuyNGetFreeCategory"].ToString(),
                                                    rowno.ToString(),
                                                    dr["BuyNGetFreeName"].ToString(),
                                                    0,GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                                    GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                                    dr["UOM"].ToString(),"","","","","N"});
                    }

                    if (dr["ProductType"].ToString() == "G")
                    {
                        dtblPOS.Rows.Add(new object[] {
                                                dr["ProductID"].ToString(), dr["Description"].ToString(),
                                                "G","0","0","0", GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),dr["QtyDecimal"].ToString(),dr["ProductType"].ToString()),dr["PriceOverride"].ToString(),"0",
                                                dr["PriceOverride"].ToString(),"0","0","0","","","","",GetUniqueString(),refDP,"",
                                                dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                                dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                "","","",
                                                GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                dr["Taxable1"].ToString(),
                                                dr["Taxable2"].ToString(),
                                                dr["Taxable3"].ToString(),
                                                "Sales","NA","0","0","0","","","",
                                                GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                                dr["MixMatchFlag"].ToString(),
                                                dr["MixMatchType"].ToString(),
                                                GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                                dr["MixMatchLast"].ToString(),
                                                dr["FeesID"].ToString(),
                                                dr["FeesLogic"].ToString(),
                                                dr["FeesValue"].ToString(),
                                                dr["FeesTaxRate"].ToString(),
                                                dr["Fees"].ToString(),
                                                dr["FeesTax"].ToString(),
                                                dr["FeesText"].ToString(),
                                                dr["FeesQty"].ToString(),
                                                dr["SalePriceID"].ToString(),
                                                GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                                GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                                dr["EditFlag"].ToString(),
                                                dr["PromptPrice"].ToString(),
                                                dr["BuyNGetFreeHeaderID"].ToString(),
                                                dr["BuyNGetFreeCategory"].ToString(),
                                                rowno.ToString(),
                                                dr["BuyNGetFreeName"].ToString(),0,GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                                dr["UOM"].ToString(),"","","","","N"});
                    }

                    if (dr["ProductType"].ToString() == "O") // bottle refund
                    {
                        dtblPOS.Rows.Add(new object[] {
                                                dr["ProductID"].ToString(), dr["Description"].ToString(),
                                                "O","0","0","0", GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),dr["QtyDecimal"].ToString(),dr["ProductType"].ToString()),dr["PriceOverride"].ToString(),"0",
                                                -(GeneralFunctions.fnDouble(dr["PriceOverride"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString())),"0","0","0","","","","",GetUniqueString(),refDP,"",
                                                dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                                dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                "","","",
                                                GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                dr["Taxable1"].ToString(),
                                                dr["Taxable2"].ToString(),
                                                dr["Taxable3"].ToString(),
                                                "Sales","NA","0","0","0","","","",
                                                GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                                dr["MixMatchFlag"].ToString(),
                                                dr["MixMatchType"].ToString(),
                                                GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                                dr["MixMatchLast"].ToString(),
                                                dr["FeesID"].ToString(),
                                                dr["FeesLogic"].ToString(),
                                                dr["FeesValue"].ToString(),
                                                dr["FeesTaxRate"].ToString(),
                                                dr["Fees"].ToString(),
                                                dr["FeesTax"].ToString(),
                                                dr["FeesText"].ToString(),
                                                dr["FeesQty"].ToString(),
                                                dr["SalePriceID"].ToString(),
                                                GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                                GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                                dr["EditFlag"].ToString(),
                                                dr["PromptPrice"].ToString(),
                                                dr["BuyNGetFreeHeaderID"].ToString(),
                                                dr["BuyNGetFreeCategory"].ToString(),
                                                rowno.ToString(),
                                                dr["BuyNGetFreeName"].ToString(),0,GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                                dr["UOM"].ToString(),"","","","","N"});
                    }

                    if (dr["ProductType"].ToString() == "C")
                    {
                        dtblPOS.Rows.Add(new object[] {
                                                dr["ProductID"].ToString(), dr["Description"].ToString(),
                                                "C","0","0","0", "999888777","99988863777.00","0",
                                                "99988863777.00","0","0","0","","","","",GetUniqueString(),refDP,"",
                                                dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                                dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                "","","",
                                                GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                dr["Taxable1"].ToString(),
                                                dr["Taxable2"].ToString(),
                                                dr["Taxable3"].ToString(),
                                                "Sales","NA","0","0","0","","","",
                                                GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                                dr["MixMatchFlag"].ToString(),
                                                dr["MixMatchType"].ToString(),
                                                GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                                dr["MixMatchLast"].ToString(),
                                                dr["FeesID"].ToString(),
                                                dr["FeesLogic"].ToString(),
                                                dr["FeesValue"].ToString(),
                                                dr["FeesTaxRate"].ToString(),
                                                dr["Fees"].ToString(),
                                                dr["FeesTax"].ToString(),
                                                dr["FeesText"].ToString(),
                                                dr["FeesQty"].ToString(),
                                                dr["SalePriceID"].ToString(),
                                                GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                                GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                                dr["EditFlag"].ToString(),
                                                dr["PromptPrice"].ToString(),
                                                dr["BuyNGetFreeHeaderID"].ToString(),
                                                dr["BuyNGetFreeCategory"].ToString(),
                                                rowno.ToString(),
                                                dr["BuyNGetFreeName"].ToString(),0,GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                                dr["UOM"].ToString(),"","","","","N"});
                    }

                    if (dr["ProductType"].ToString() == "H")
                    {
                        dtblPOS.Rows.Add(new object[] {
                                                dr["ProductID"].ToString(), dr["Description"].ToString(),
                                                "H","0","0","0", "999888777","99988863777.00","0",
                                                "99988863777.00","0","0","0","","","","",GetUniqueString(),refDP,"",
                                                dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                                dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                "","","",
                                                GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                dr["Taxable1"].ToString(),
                                                dr["Taxable2"].ToString(),
                                                dr["Taxable3"].ToString(),
                                                "Sales","NA","0","0","0","","","",
                                                GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                                dr["MixMatchFlag"].ToString(),
                                                dr["MixMatchType"].ToString(),
                                                GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                                dr["MixMatchLast"].ToString(),
                                                dr["FeesID"].ToString(),
                                                dr["FeesLogic"].ToString(),
                                                dr["FeesValue"].ToString(),
                                                dr["FeesTaxRate"].ToString(),
                                                dr["Fees"].ToString(),
                                                dr["FeesTax"].ToString(),
                                                dr["FeesText"].ToString(),
                                                dr["FeesQty"].ToString(),
                                                dr["SalePriceID"].ToString(),
                                                GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                                GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                                dr["EditFlag"].ToString(),
                                                dr["PromptPrice"].ToString(),
                                                dr["BuyNGetFreeHeaderID"].ToString(),
                                                dr["BuyNGetFreeCategory"].ToString(),
                                                rowno.ToString(),
                                                dr["BuyNGetFreeName"].ToString(),0,GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                                dr["UOM"].ToString(),"","","","","N"});
                    }

                    if (dr["ProductType"].ToString() == "Z")
                    {
                        dtblPOS.Rows.Add(new object[] {
                                                dr["ProductID"].ToString(), dr["Description"].ToString(),
                                                "Z","0","0","0", "999888777","99988863777.00","0",
                                                "99988863777.00","0","0","0","","","","",GetUniqueString(),refDP,"",
                                                dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                                dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                "","","",
                                                GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                dr["Taxable1"].ToString(),
                                                dr["Taxable2"].ToString(),
                                                dr["Taxable3"].ToString(),
                                                "Sales","NA","0","0","0","","","",
                                                GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                                dr["MixMatchFlag"].ToString(),
                                                dr["MixMatchType"].ToString(),
                                                GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                                dr["MixMatchLast"].ToString(),
                                                dr["FeesID"].ToString(),
                                                dr["FeesLogic"].ToString(),
                                                dr["FeesValue"].ToString(),
                                                dr["FeesTaxRate"].ToString(),
                                                dr["Fees"].ToString(),
                                                dr["FeesTax"].ToString(),
                                                dr["FeesText"].ToString(),
                                                dr["FeesQty"].ToString(),
                                                dr["SalePriceID"].ToString(),
                                                GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                                GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                                dr["EditFlag"].ToString(),
                                                dr["PromptPrice"].ToString(),
                                                dr["BuyNGetFreeHeaderID"].ToString(),
                                                dr["BuyNGetFreeCategory"].ToString(),
                                                rowno.ToString(),
                                                dr["BuyNGetFreeName"].ToString(),0,GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                              GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                                dr["UOM"].ToString(),"","","","","N"});
                    }

                    if (dr["ProductType"].ToString() == "B")
                    {
                        string strTaxName1 = FetchTaxName(GeneralFunctions.fnInt32(dr["TaxID1"].ToString()));
                        string strTaxName2 = FetchTaxName(GeneralFunctions.fnInt32(dr["TaxID2"].ToString()));
                        string strTaxName3 = FetchTaxName(GeneralFunctions.fnInt32(dr["TaxID3"].ToString()));

                        dtblPOS.Rows.Add(new object[] {
                                                dr["ProductID"].ToString(),
                                                dr["Description"].ToString(),
                                                "B","0","0","0",
                                                GeneralFunctions.GetDisplayQty(dr["Qty"].ToString(),dr["QtyDecimal"].ToString(),dr["ProductType"].ToString()),
                                                dr["PriceA"].ToString(),
                                                "0",
                                                Convert.ToDecimal((GeneralFunctions.fnDouble(dr["Qty"].ToString())*GeneralFunctions.fnDouble(dr["PriceA"].ToString())) - GeneralFunctions.fnDouble(dr["Discount"].ToString())).ToString(),
                                                "0","0","0","","","","",GetUniqueString(),refDP,"",
                                                dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                                dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                                dr["TaxID1"].ToString(),dr["TaxID2"].ToString(),dr["TaxID3"].ToString(),
                                                strTaxName1,strTaxName2,strTaxName3,
                                                dr["TaxRate1"].ToString(),dr["TaxRate2"].ToString(),dr["TaxRate3"].ToString(),
                                                dr["Taxable1"].ToString(),dr["Taxable2"].ToString(),dr["Taxable3"].ToString(),
                                                "Sales","NA","0","0","0","","","",
                                                GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                                GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchID"].ToString()),
                                                dr["MixMatchFlag"].ToString(),
                                                dr["MixMatchType"].ToString(),
                                                GeneralFunctions.fnDouble(dr["MixMatchValue"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchQty"].ToString()),
                                                GeneralFunctions.fnInt32(dr["MixMatchUnique"].ToString()),
                                                dr["MixMatchLast"].ToString(),
                                                dr["FeesID"].ToString(),
                                                dr["FeesLogic"].ToString(),
                                                dr["FeesValue"].ToString(),
                                                dr["FeesTaxRate"].ToString(),
                                                dr["Fees"].ToString(),
                                                dr["FeesTax"].ToString(),
                                                dr["FeesText"].ToString(),
                                                dr["FeesQty"].ToString(),
                                                dr["SalePriceID"].ToString(),
                                                GeneralFunctions.fnInt32(dr["DTaxID"].ToString()),
                                                GeneralFunctions.fnInt32(dr["DTaxType"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTaxRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["DTax"].ToString()),
                                                dr["EditFlag"].ToString(),
                                                dr["PromptPrice"].ToString(),
                                                dr["BuyNGetFreeHeaderID"].ToString(),
                                                dr["BuyNGetFreeCategory"].ToString(),
                                                rowno.ToString(),
                                                dr["BuyNGetFreeName"].ToString(),0,
                                                GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                                GeneralFunctions.fnDouble(dr["GPrice"].ToString()),
                                                dr["UOM"].ToString(),"","","","","N"});
                    }
                }
                if (Settings.PriceLevelForOneTime == "Y")
                {
                    Settings.PriceLevelForOneTime = "N";
                    intUsePriceLevel = Settings.UsePriceLevel;
                }
                SetCartDisplay();
                gridControl1.ItemsSource = dtblPOS;
                ToggleWithEmptyCart();
                gridView1.FocusedRowHandle = intfocusrow;
            }

            MixMatchUnique = tmixunique;
            /// Set UP/Down Button to move cursor through Cart Item
            EnableDisableButton(btnUP, btnDown, gridControl1);
            GetTotal();  /// Calculate and Display Cart Total
            ShowTax();  /// Calculate and Display Taxes of Cart Items
        }
        private void btnReprint_Click(object sender, RoutedEventArgs e)
        {
            btnReprintClick(sender, e);
        }
        public void btnReprintClick(object sender, EventArgs e)
        {


            if (!CheckFunctionButton("31i"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            blExistCoupon = false;
            blurGrid.Visibility = Visibility.Visible;
            frm_POSReturnReprintDlg frm_POSReturnReprintDlg = new frm_POSReturnReprintDlg();
            try
            {
                frm_POSReturnReprintDlg.MainScreenCustID = intCustID;
                frm_POSReturnReprintDlg.ShowDialog();
                if (frm_POSReturnReprintDlg.DialogResult == true)
                {
                    blReturnItem = true;
                    dtblReturnItem = new DataTable();
                    if (frm_POSReturnReprintDlg.CustID > 0)
                        intCustID = frm_POSReturnReprintDlg.CustID;

                    intSelectedReturnInvoiceNo = frm_POSReturnReprintDlg.SelectedReturnInvoiceNo;
                    dtblReturnItem = frm_POSReturnReprintDlg.ReturnItem;
                    blExistCoupon = frm_POSReturnReprintDlg.ExistCoupon;
                    dtCustomerDOB = frm_POSReturnReprintDlg.CustomerDOB != "" ? GeneralFunctions.fnDate(frm_POSReturnReprintDlg.CustomerDOB) : Convert.ToDateTime(null);
                    AddDatatableWithReturnedItem();
                    intSuperUserID = frm_POSReturnReprintDlg.SuperUserID;
                    blFunctionBtnAccess = frm_POSReturnReprintDlg.FunctionBtnAccess;
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        // Assign Cart with Return item(s)

        private void AddDatatableWithReturnedItem()
        {
            dtblPOS.Rows.Clear();

            blChangeCustomer = true;
            string refTaxExempt = "";
            string refDiscountLevel = "";
            string refTaxID = "";
            string refStoreCr = "";
            string refCID = "";
            string refCName = "";
            string refCAdd = "";
            double dblBalance = 0;
            string refARCredit = "";
            string refPOSNotes = "";

            int refDTaxID = 0;
            string refDTax = "";
            double refDTaxRate = 0;
            int refDTaxType = 0;


            if (intCustID > 0)
            {
                FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd, ref refTaxExempt, ref refDiscountLevel,
                            ref refTaxID, ref refStoreCr, ref refARCredit, ref refPOSNotes, ref refDTaxID, ref refDTax,
                            ref refDTaxRate, ref refDTaxType);

                CustDTaxID = refDTaxID;
                CustDTaxName = refDTax;
                CustDTaxRate = refDTaxRate;
                CustDTaxType = refDTaxType;

                strTaxExempt = refTaxExempt;
                strDiscountLevel = refDiscountLevel.Trim();
                if (strDiscountLevel == "") strDiscountLevel = "A";
                dblBalance = GetAccountBalance(intCustID);
                txtCust.Text = refCID;
                if (Settings.CentralExportImport == "Y")
                {
                    string tstr = GetCustomerIssueStore(intCustID);
                    if (tstr != Settings.StoreCode) txtCustStore.Text = tstr;
                }
                //lbCustID.Text = "Customer ID : " + refCID;
                lbCustName.Text = refCName;
                lbCustAddress.Text = refCAdd;
                lbCustNotes.Text = refPOSNotes;
                blCustNotes = refPOSNotes != "";
                ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                if (blCustNotes) lbcustinfo2.Text = "Check 'Cust Notes' Apps";
                dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                dblCustAcctBalance = dblBalance;
                RearrangeProductAsCustomerChange();
                GetTotal();
                ShowTax();

            }


            double intQty = 0;
            double dblPrice = 0;
            foreach (DataRow dr in dtblReturnItem.Rows)
            {
                string ss = dr["ID"].ToString();
                intQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                dblPrice = Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["Price"].ToString()) : GeneralFunctions.fnDouble(dr["GRate"].ToString());
                double tempprice = 0;
                if (dr["ProductType"].ToString() != "O")
                {
                    if (GeneralFunctions.fnDouble(dr["Discount"].ToString()) != 0) tempprice = (intQty * dblPrice) - GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    else tempprice = (intQty * dblPrice);
                }
                else
                {
                    tempprice = -GeneralFunctions.fnDouble(intQty * dblPrice);
                }

                dtblPOS.Rows.Add(new object[]
                                        {     dr["ProductID"].ToString(),GetProductDescInCart1(dr["Description"].ToString(),
                                              dr["DiscountID"].ToString(),dr["FEESID"].ToString(), dr["BuyNGetFreeCategory"].ToString()),dr["ProductType"].ToString(),"0","0","0",
                                              "-" + GeneralFunctions.GetDisplayQty(dr["Qty"].ToString().Remove(0,1),dr["QtyDecimal"].ToString(),dr["ProductType"].ToString()),
                                              dr["Price"].ToString(),dr["Price"].ToString(),
                                              tempprice.ToString(),"0","0","0",dr["ID"].ToString(),"","","",GetUniqueString(),
                                              "2","",dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                              dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),"1",
                                              GeneralFunctions.fnInt32(dr["TX1ID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX2ID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX3ID"].ToString()),
                                              "","","",
                                              GeneralFunctions.fnDouble(dr["TXRATE1"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TXRATE2"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TXRATE3"].ToString()),
                                              dr["TAXABLE1"].ToString(),
                                              dr["TAXABLE2"].ToString(),
                                              dr["TAXABLE3"].ToString(),
                                              "Sales","NA","0","0","0","","","",
                                              GeneralFunctions.fnInt32(dr["TX1TYPE"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX2TYPE"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX2TYPE"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX1ID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX2ID"].ToString()),
                                              GeneralFunctions.fnInt32(dr["TX3ID"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TX1"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TX2"].ToString()),
                                              GeneralFunctions.fnDouble(dr["TX3"].ToString()),
                                              0,"","",0,0,0,"",
                                              dr["FEESID"].ToString(),
                                              dr["FEESLOGIC"].ToString(),
                                              dr["FEESVALUE"].ToString(),
                                              dr["FEESTAXRATE"].ToString(),
                                              dr["FEES"].ToString(),
                                              dr["FEESTAX"].ToString(),
                                              dr["FEESTEXT"].ToString(),
                                              dr["FEESQTY"].ToString(),
                                              0,
                                              dr["DTXID"].ToString(),
                                              dr["DTXTYPE"].ToString(),
                                              dr["DTXRATE"].ToString(),
                                              dr["DTX"].ToString(),
                                              dr["EditFlag"].ToString(),
                                              dr["PromptPrice"].ToString(),
                                              dr["BuyNGetFreeHeaderID"].ToString(),
                                              dr["BuyNGetFreeCategory"].ToString(),
                                              dr["SL"].ToString(),
                                              dr["BuyNGetFreeName"].ToString(),
                                              GeneralFunctions.fnInt32(dr["Age"].ToString()),
                                              GeneralFunctions.fnDouble(dr["GRate"].ToString()),
                                              tempprice.ToString(),
                                              dr["UOM"].ToString(),"","","",""
                                        });
            }
            SetCartDisplay();
            gridControl1.ItemsSource = dtblPOS;
            ToggleWithEmptyCart();
            GetTotal();
            ShowTax();
            ResetQty();
        }


        private void btnUp_Click1(object sender, RoutedEventArgs e)
        {
            btnUpClick(sender, e);

        }

        public void btnUpClick(object sender, EventArgs e)
        {

            if (tcPOS.SelectedIndex != 0) return;

            ScrollViewer _ScrollViewer = posscroll; //GetDescendantByType(POSItemsListBox, typeof(ScrollViewer)) as ScrollViewer;

            double sclindx = _ScrollViewer.VerticalOffset - 300;

            if (sclindx < 0)
            {
                _ScrollViewer.ScrollToVerticalOffset(0);
            }
            else
            {
                _ScrollViewer.ScrollToVerticalOffset(sclindx);
            }
        }


        private void btnDown_Click1(object sender, RoutedEventArgs e)
        {
            btnDownClick(sender, e);

        }

        public void btnDownClick(object sender, EventArgs e)
        {

            if (tcPOS.SelectedIndex != 0) return;

            ScrollViewer _ScrollViewer = posscroll; //GetDescendantByType(POSItemsListBox, typeof(ScrollViewer)) as ScrollViewer;

            double sclindx = _ScrollViewer.VerticalOffset + 300;

            if (sclindx < 0)
            {
                _ScrollViewer.ScrollToVerticalOffset(0);
            }
            else
            {
                _ScrollViewer.ScrollToVerticalOffset(sclindx);
            }

        }

        public Visual GetDescendantByType(Visual element, Type type)
        {
            if (element == null) return null;
            if (element.GetType() == type) return element;
            Visual foundElement = null;
            if (element is FrameworkElement)
            {
                (element as FrameworkElement).ApplyTemplate();
            }
            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(element); i++)
            {
                Visual visual = VisualTreeHelper.GetChild(element, i) as Visual;
                foundElement = GetDescendantByType(visual, type);
                if (foundElement != null)
                    break;
            }
            return foundElement;
        }

        private void btnStockRefresh_Click(object sender, RoutedEventArgs e)
        {
            btnStockRefreshClick(sender, e);

        }
        public void btnStockRefreshClick(object sender, EventArgs e)
        {

            int intProductid = 0;
            int intStock = 0;
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;



            foreach (UIElement ctrl in pnlCat1.Children)
            {
                if (ctrl is System.Windows.Controls.Border)
                {
                    if ((ctrl as System.Windows.Controls.Border).Name == "catgroup")
                    {
                        Grid grd = (ctrl as System.Windows.Controls.Border).Child as Grid;

                        foreach (UIElement dpnl in grd.Children)
                        {
                            if (dpnl is System.Windows.Controls.DockPanel)
                            {
                                foreach (UIElement btnctrl in (dpnl as System.Windows.Controls.DockPanel).Children)
                                {
                                    if (btnctrl is System.Windows.Controls.Button)
                                    {

                                        intProductid = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemID;
                                        intStock = objPOS.GetStockforItem(intProductid);
                                        ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock = intStock;




                                        string itemtext = "";

                                        if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).DisplayStockinPOS)
                                        {
                                            itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")" : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")";
                                        }
                                        else
                                        {
                                            itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName;
                                        }

                                        TextBlock tb = new TextBlock();
                                        tb.Text = itemtext;
                                        tb.TextAlignment = TextAlignment.Center;
                                        tb.TextWrapping = TextWrapping.WrapWithOverflow;
                                        tb.VerticalAlignment = VerticalAlignment.Center;
                                        tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                                        GeneralFunctions.SetWpfFont(tb, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontFamily, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontSize, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontBold, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontItalic);
                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor.Contains("#00000000")))
                                        {

                                        }
                                        else
                                        {
                                            tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor));
                                        }

                                        double ifactor = 0.3;
                                        if (itemtext.Length <= 8)
                                        {
                                            ifactor = 0.6;
                                        }
                                        else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                                        {
                                            ifactor = 0.8;
                                        }
                                        else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                                        {
                                            ifactor = 0.8;
                                        }
                                        else
                                        {
                                            ifactor = 0.85;
                                        }
                                        tb.Width = (pnlCat1.Width - 10) * ifactor;
                                        object contentobj1 = (btnctrl as System.Windows.Controls.Button).Content;
                                        if (contentobj1 is Viewbox)
                                        {
                                            (contentobj1 as Viewbox).Child = tb;
                                        }
                                            //(btnctrl as System.Windows.Controls.Button).Content = tb;
                                    }
                                }


                            }
                        }
                    }
                }
            }

            foreach (UIElement ctrl in pnlCat2.Children)
            {
                if (ctrl is System.Windows.Controls.Border)
                {
                    if ((ctrl as System.Windows.Controls.Border).Name == "catgroup")
                    {
                        Grid grd = (ctrl as System.Windows.Controls.Border).Child as Grid;

                        foreach (UIElement dpnl in grd.Children)
                        {
                            if (dpnl is System.Windows.Controls.DockPanel)
                            {
                                foreach (UIElement btnctrl in (dpnl as System.Windows.Controls.DockPanel).Children)
                                {
                                    if (btnctrl is System.Windows.Controls.Button)
                                    {

                                        intProductid = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemID;
                                        intStock = objPOS.GetStockforItem(intProductid);
                                        ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock = intStock;


                                        string itemtext = "";

                                        if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).DisplayStockinPOS)
                                        {
                                            itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")" : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")";
                                        }
                                        else
                                        {
                                            itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName;
                                        }

                                        TextBlock tb = new TextBlock();
                                        tb.Text = itemtext;
                                        tb.TextAlignment = TextAlignment.Center;
                                        tb.TextWrapping = TextWrapping.WrapWithOverflow;
                                        tb.VerticalAlignment = VerticalAlignment.Center;
                                        tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                                        GeneralFunctions.SetWpfFont(tb, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontFamily, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontSize, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontBold, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontItalic);
                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor.Contains("#00000000")))
                                        {

                                        }
                                        else
                                        {
                                            tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor));
                                        }

                                        double ifactor = 0.3;
                                        if (itemtext.Length <= 8)
                                        {
                                            ifactor = 0.6;
                                        }
                                        else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                                        {
                                            ifactor = 0.8;
                                        }
                                        else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                                        {
                                            ifactor = 0.8;
                                        }
                                        else
                                        {
                                            ifactor = 0.85;
                                        }
                                        tb.Width = (pnlCat1.Width - 10) * ifactor;
                                        object contentobj1 = (btnctrl as System.Windows.Controls.Button).Content;
                                        if (contentobj1 is Viewbox)
                                        {
                                            (contentobj1 as Viewbox).Child = tb;
                                        }
                                                                //(btnctrl as System.Windows.Controls.Button).Content = tb;
                                    }
                                }


                            }
                        }
                    }
                }
            }

            foreach (UIElement ctrl in pnlCat3.Children)
            {
                if (ctrl is System.Windows.Controls.Border)
                {
                    if ((ctrl as System.Windows.Controls.Border).Name == "catgroup")
                    {
                        Grid grd = (ctrl as System.Windows.Controls.Border).Child as Grid;

                        foreach (UIElement dpnl in grd.Children)
                        {
                            if (dpnl is System.Windows.Controls.DockPanel)
                            {
                                foreach (UIElement btnctrl in (dpnl as System.Windows.Controls.DockPanel).Children)
                                {
                                    if (btnctrl is System.Windows.Controls.Button)
                                    {

                                        intProductid = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemID;
                                        intStock = objPOS.GetStockforItem(intProductid);
                                        ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock = intStock;

                                        string itemtext = "";

                                        if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).DisplayStockinPOS)
                                        {
                                            itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")" : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")";
                                        }
                                        else
                                        {
                                            itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName;
                                        }

                                        TextBlock tb = new TextBlock();
                                        tb.Text = itemtext;
                                        tb.TextAlignment = TextAlignment.Center;
                                        tb.TextWrapping = TextWrapping.WrapWithOverflow;
                                        tb.VerticalAlignment = VerticalAlignment.Center;
                                        tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                                        GeneralFunctions.SetWpfFont(tb, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontFamily, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontSize, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontBold, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontItalic);
                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor.Contains("#00000000")))
                                        {

                                        }
                                        else
                                        {
                                            tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor));
                                        }

                                        double ifactor = 0.3;
                                        if (itemtext.Length <= 8)
                                        {
                                            ifactor = 0.6;
                                        }
                                        else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                                        {
                                            ifactor = 0.8;
                                        }
                                        else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                                        {
                                            ifactor = 0.8;
                                        }
                                        else
                                        {
                                            ifactor = 0.85;
                                        }
                                        tb.Width = (pnlCat1.Width - 10) * ifactor;
                                        object contentobj1 = (btnctrl as System.Windows.Controls.Button).Content;
                                        if (contentobj1 is Viewbox)
                                        {
                                            (contentobj1 as Viewbox).Child = tb;
                                        }

                                                                //(btnctrl as System.Windows.Controls.Button).Content = tb;
                                    }
                                }


                            }
                        }
                    }
                }
            }

            foreach (UIElement ctrl in pnlCat4.Children)
            {
                if (ctrl is System.Windows.Controls.Border)
                {
                    if ((ctrl as System.Windows.Controls.Border).Name == "catgroup")
                    {
                        Grid grd = (ctrl as System.Windows.Controls.Border).Child as Grid;

                        foreach (UIElement dpnl in grd.Children)
                        {
                            if (dpnl is System.Windows.Controls.DockPanel)
                            {
                                foreach (UIElement btnctrl in (dpnl as System.Windows.Controls.DockPanel).Children)
                                {
                                    if (btnctrl is System.Windows.Controls.Button)
                                    {

                                        intProductid = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemID;
                                        intStock = objPOS.GetStockforItem(intProductid);
                                        ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock = intStock;

                                        string itemtext = "";

                                        if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).DisplayStockinPOS)
                                        {
                                            itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")" : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")";
                                        }
                                        else
                                        {
                                            itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName;
                                        }

                                        TextBlock tb = new TextBlock();
                                        tb.Text = itemtext;
                                        tb.TextAlignment = TextAlignment.Center;
                                        tb.TextWrapping = TextWrapping.WrapWithOverflow;
                                        tb.VerticalAlignment = VerticalAlignment.Center;
                                        tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                                        GeneralFunctions.SetWpfFont(tb, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontFamily, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontSize, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontBold, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontItalic);
                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor.Contains("#00000000")))
                                        {

                                        }
                                        else
                                        {
                                            tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor));
                                        }

                                        double ifactor = 0.3;
                                        if (itemtext.Length <= 8)
                                        {
                                            ifactor = 0.6;
                                        }
                                        else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                                        {
                                            ifactor = 0.8;
                                        }
                                        else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                                        {
                                            ifactor = 0.8;
                                        }
                                        else
                                        {
                                            ifactor = 0.85;
                                        }
                                        tb.Width = (pnlCat1.Width - 10) * ifactor;
                                        object contentobj1 = (btnctrl as System.Windows.Controls.Button).Content;
                                        if (contentobj1 is Viewbox)
                                        {
                                            (contentobj1 as Viewbox).Child = tb;
                                        }

                                        //(btnctrl as System.Windows.Controls.Button).Content = tb;
                                    }
                                }


                            }
                        }
                    }
                }
            }

            foreach (UIElement ctrl in pnlCat5.Children)
            {
                if (ctrl is System.Windows.Controls.Border)
                {
                    if ((ctrl as System.Windows.Controls.Border).Name == "catgroup")
                    {
                        Grid grd = (ctrl as System.Windows.Controls.Border).Child as Grid;

                        foreach (UIElement dpnl in grd.Children)
                        {
                            if (dpnl is System.Windows.Controls.DockPanel)
                            {
                                foreach (UIElement btnctrl in (dpnl as System.Windows.Controls.DockPanel).Children)
                                {
                                    if (btnctrl is System.Windows.Controls.Button)
                                    {

                                        intProductid = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemID;
                                        intStock = objPOS.GetStockforItem(intProductid);
                                        ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock = intStock;

                                        string itemtext = "";

                                        if (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).DisplayStockinPOS)
                                        {
                                            itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")" : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName + " (" + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).CurrentStock.ToString() + ")";
                                        }
                                        else
                                        {
                                            itemtext = ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ShowSKU ? ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemSKU + " - " + ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName : ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemName;
                                        }

                                        TextBlock tb = new TextBlock();
                                        tb.Text = itemtext;
                                        tb.TextAlignment = TextAlignment.Center;
                                        tb.TextWrapping = TextWrapping.WrapWithOverflow;
                                        tb.VerticalAlignment = VerticalAlignment.Center;
                                        tb.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;
                                        GeneralFunctions.SetWpfFont(tb, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontFamily, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontSize, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontBold, ((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemFontItalic);
                                        if ((((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor == "0") || (((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor.Contains("#00000000")))
                                        {

                                        }
                                        else
                                        {
                                            tb.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString(((btnctrl as System.Windows.Controls.Button).Tag as POSControls.POSItem).ItemForeColor));
                                        }

                                        double ifactor = 0.3;
                                        if (itemtext.Length <= 8)
                                        {
                                            ifactor = 0.6;
                                        }
                                        else if ((itemtext.Length >= 9) && (itemtext.Length <= 15))
                                        {
                                            ifactor = 0.8;
                                        }
                                        else if ((itemtext.Length >= 16) && (itemtext.Length <= 22))
                                        {
                                            ifactor = 0.8;
                                        }
                                        else
                                        {
                                            ifactor = 0.85;
                                        }
                                        tb.Width = (pnlCat1.Width - 10) * ifactor;
                                        object contentobj1 = (btnctrl as System.Windows.Controls.Button).Content;
                                        if (contentobj1 is Viewbox)
                                        {
                                            (contentobj1 as Viewbox).Child = tb;
                                        }
                                        //(btnctrl as System.Windows.Controls.Button).Content = tb;
                                    }
                                }


                            }
                        }
                    }
                }
            }

            new MessageBoxWindow().Show("Stock Refreshed Successfully", "Stock Update", MessageBoxButton.OK, MessageBoxImage.Information);

            CloseMoreFunctions();
        }
        private async void btnCustomize_Click(object sender, RoutedEventArgs e)
        {
            await btnCustomizeClick(sender, e);
        }
        public async Task btnCustomizeClick(object sender, EventArgs e)
        {


            blFunctionOrderChangeAccess = true;
            if (!CheckFunctionButton("31z1"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_GeneralSetupDlg frm_GeneralSetupDlg = new frm_GeneralSetupDlg();
            try
            {
                frm_GeneralSetupDlg.CallFromAdmin = false;
                //Todo:frm_GeneralSetupDlg.tcSetup.SelectedTabPage
                //frm_GeneralSetupDlg.tcSetup.SelectedTabPage = frm_GeneralSetupDlg.tpPOS; --Sam
                //frm_GeneralSetupDlg.tcSetup.ShowTabHeader = DevExpress.Utils.DefaultBoolean.False;
                frm_GeneralSetupDlg.tcSetup.SelectedIndex = 3;
                frm_GeneralSetupDlg.Title.Text = Properties.Resources.Customize_Functions;
                //frm_GeneralSetupDlg.grpservice.Visible = false;--Sam
                frm_GeneralSetupDlg.FunctionOrderChangeAccess = true;//blFunctionOrderChangeAccess;
                frm_GeneralSetupDlg.FunctionBtnAccess = true; //blFunctionBtnAccess;
                frm_GeneralSetupDlg.SuperUserID = intSuperUserID;
                frm_GeneralSetupDlg.ShowDialog();
                if (frm_GeneralSetupDlg.DialogResult == true)
                {
                    if (frm_GeneralSetupDlg.changeskudisplay)
                    {
                        //pnlCat1.Controls.Clear();--Sam
                        //pnlCat2.Controls.Clear();
                        //pnlCat3.Controls.Clear();
                        //pnlCat4.Controls.Clear();
                        //pnlCat5.Controls.Clear();
                        // await LoadPOSButtons();
                        LoadPOSButtons();
                    }

                    if (frm_GeneralSetupDlg.ChangeProductImgDisplay)
                    {
                        SetPOSProductImage();
                    }


                }
                if (frm_GeneralSetupDlg.SetPOSFunction)
                {
                    try
                    {
                        ArrangeVisibleFunctions();
                        AddRemoveRepairExtra();
                        DisplayFunctionButtons();
                        SetServiceTypeButtonColor();
                    }
                    finally
                    {
                    }
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        /// Set Item image on POS Tab (Runtime)
        private void SetPOSProductImage()
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;

            //foreach (Control cr in pnlCat1.Controls)--Sam
            //{
            //    if (cr is POSControls.POSCategory)
            //    {
            //        POSControls.POSCategory LoopCat = (cr as POSControls.POSCategory);
            //        for (int i = 0; i <= LoopCat.Controls.Count - 1; i++)
            //        {
            //            Control dr = LoopCat.Controls[i];
            //            if (dr is POSControls.POSItem)
            //            {
            //                GeneralFunctions.LoadPhotofromDB(dr as POSControls.POSItem);
            //            }
            //        }
            //    }

            //}

            //foreach (Control cr in pnlCat2.Controls)--Sam
            //{
            //    if (cr is POSControls.POSCategory)
            //    {
            //        POSControls.POSCategory LoopCat = (cr as POSControls.POSCategory);
            //        for (int i = 0; i <= LoopCat.Controls.Count - 1; i++)
            //        {
            //            Control dr = LoopCat.Controls[i];
            //            if (dr is POSControls.POSItem)
            //            {
            //                GeneralFunctions.LoadPhotofromDB(dr as POSControls.POSItem);
            //            }
            //        }
            //    }
            //}

            //foreach (Control cr in pnlCat3.Controls)--Sam
            //{
            //    if (cr is POSControls.POSCategory)
            //    {
            //        POSControls.POSCategory LoopCat = (cr as POSControls.POSCategory);
            //        for (int i = 0; i <= LoopCat.Controls.Count - 1; i++)
            //        {
            //            Control dr = LoopCat.Controls[i];
            //            if (dr is POSControls.POSItem)
            //            {
            //                GeneralFunctions.LoadPhotofromDB(dr as POSControls.POSItem);
            //            }
            //        }
            //    }
            //}


            //foreach (Control cr in pnlCat4.Controls)--Sam
            //{
            //    if (cr is POSControls.POSCategory)
            //    {
            //        POSControls.POSCategory LoopCat = (cr as POSControls.POSCategory);
            //        for (int i = 0; i <= LoopCat.Controls.Count - 1; i++)
            //        {
            //            Control dr = LoopCat.Controls[i];
            //            if (dr is POSControls.POSItem)
            //            {
            //                GeneralFunctions.LoadPhotofromDB(dr as POSControls.POSItem);
            //            }
            //        }
            //    }
            //}


            //foreach (Control cr in pnlCat5.Controls)--Sam
            //{
            //    if (cr is POSControls.POSCategory)
            //    {
            //        POSControls.POSCategory LoopCat = (cr as POSControls.POSCategory);
            //        for (int i = 0; i <= LoopCat.Controls.Count - 1; i++)
            //        {
            //            Control dr = LoopCat.Controls[i];
            //            if (dr is POSControls.POSItem)
            //            {
            //                GeneralFunctions.LoadPhotofromDB(dr as POSControls.POSItem);
            //            }
            //        }
            //    }
            //}
        }
        private void btnCustPhoto_Click(object sender, RoutedEventArgs e)
        {
            btnCustPhotoClick(sender, e);
        }
        public void btnCustPhotoClick(object sender, EventArgs e)
        {


            if (intCustID == 0)
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSPhotoDlg frm_POSPhotoDlg = new frm_POSPhotoDlg();
            try
            {
                frm_POSPhotoDlg.PhotoType = "Customer";
                frm_POSPhotoDlg.PhotoFile = strCustomerID;
                frm_POSPhotoDlg.PhotoID = intCustID;
                frm_POSPhotoDlg.Title.Text = Properties.Resources.Customer_Picture;
                //frm_POSPhotoDlg.lbDesc.Text = lbCustName.Text + "  ( ID : " + strCustomerID + " )";
                frm_POSPhotoDlg.ShowDialog();
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        private void btnCustNotes_Click(object sender, RoutedEventArgs e)
        {
            btnCustNotesClick(sender, e);
        }
        public void btnCustNotesClick(object sender, EventArgs e)
        {

            if (intCustID == 0)
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSCustNotesBrw frm_POSCustNotesBrw = new frm_POSCustNotesBrw();
            try
            {
                frm_POSCustNotesBrw.Title.Text = Properties.Resources.Customer_Notes__ + lbCustName.Text.Trim() + " ( " + Properties.Resources.ID + " : " + strCustomerID + " )";
                frm_POSCustNotesBrw.Notes = dtblCustNotes;
                frm_POSCustNotesBrw.ScreenNotes = lbCustNotes.Text;
                frm_POSCustNotesBrw.ShowDialog();
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        private void btnEmpPhoto_Click(object sender, RoutedEventArgs e)
        {
            btnEmpPhotoClick(sender, e);
        }
        public void btnEmpPhotoClick(object sender, EventArgs e)
        {

            blurGrid.Visibility = Visibility.Visible;
            frm_POSEmpList frm_POSEmpList = new frm_POSEmpList();
            try
            {
                frm_POSEmpList.ShowDialog();
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        private async void btnProductPhoto_Click(object sender, RoutedEventArgs e)
        {
            await btnProductPhotoClick(sender, e);
        }
        public async Task btnProductPhotoClick(object sender, EventArgs e)
        {
            if (IsDonationRecordExistsInCart()) return;
            string strSKU = "";
            int intProductID = 0;
            string strProductDesc = "";
            if (!((tcPOS.SelectedIndex == 0) || (tcPOS.SelectedIndex == 2)))
            {
                CloseMoreFunctions();
                return;
            }
            if (tcPOS.SelectedIndex == 0)
            {
                if (gridView1.FocusedRowHandle < 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
                if ((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "G")
                     || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "A")
                     || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProductType) == "O"))
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    CloseMoreFunctions();
                    return;
                }
                strSKU = GetProductSKU(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colID)));
                intProductID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colID));
                strProductDesc = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colProduct);
            }

            if ((tcPOS.SelectedIndex == 2) && (dtblPOS.Rows.Count == 0))
            {
                if (PgridView1.FocusedRowHandle < 0)
                {
                    CloseMoreFunctions();
                    return;
                }

                strSKU = GetProductSKU(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)));
                intProductID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                strProductDesc = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, gridControl1, colIMDesc);
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSPhotoDlg frm_POSPhotoDlg = new frm_POSPhotoDlg();
            try
            {
                frm_POSPhotoDlg.PhotoType = "Product";
                frm_POSPhotoDlg.PhotoFile = strSKU;
                frm_POSPhotoDlg.PhotoID = intProductID;
                frm_POSPhotoDlg.Title.Text = Properties.Resources.Product_Picture;
                frm_POSPhotoDlg.lbDesc.Text = strProductDesc + "  ( " + Properties.Resources.SKU + " : " + strSKU + " )";
                frm_POSPhotoDlg.ShowDialog();
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        private void btnsrvSales_Click(object sender, RoutedEventArgs e)
        {
            if ((blReturnItem) || (blWorkOrder) || (blResumeTransaction) || (blOpenCustomerOrder))
            {
                if (dtblPOS.Rows.Count > 0) return;
            }
            if (sender is System.Windows.Controls.Button)
            {
                if (validcheckcart((sender as System.Windows.Controls.Button).Tag.ToString()))
                {
                    strCurrentServiceType = (sender as System.Windows.Controls.Button).Tag.ToString();



                    if (strCurrentServiceType == "Sales")
                    {
                        blSales = true;
                        blRentIssued = false;
                        blRentRecall = false;
                        blRepairIssued = false;
                        blRepairRecall = false;
                    }

                    if (strCurrentServiceType == "Rent")
                    {
                        blSales = false;
                        if (blRentRecall)
                        {
                            if (dtblPOS.Rows.Count == 0)
                            {
                                blRentRecall = false;
                                blReturnItem = false;
                                blWorkOrder = false;
                                blResumeTransaction = false;
                                blOpenCustomerOrder = false;
                            }
                            else
                            {
                                return;
                            }
                        }

                        if (blRepairRecall)
                        {
                            if (dtblPOS.Rows.Count == 0)
                            {
                                blRepairRecall = false;
                                blReturnItem = false;
                                blWorkOrder = false;
                                blResumeTransaction = false;
                                blOpenCustomerOrder = false;
                            }
                            else
                            {
                                return;
                            }
                        }
                        if (blRepairIssued)
                        {
                            if (dtblPOS.Rows.Count == 0)
                            {
                                blRepairIssued = false;
                                blReturnItem = false;
                                blWorkOrder = false;
                                blResumeTransaction = false;
                                blOpenCustomerOrder = false;
                            }
                            else
                            {
                                return;
                            }
                        }

                        if ((!blRentRecall) && (!blRentIssued)) blRentIssued = true;
                    }

                    if (strCurrentServiceType == "Repair")
                    {
                        blSales = false;
                        if (blRepairRecall)
                        {
                            if (dtblPOS.Rows.Count == 0)
                            {
                                blRepairRecall = false;
                                blReturnItem = false;
                                blWorkOrder = false;
                                blResumeTransaction = false;
                                blOpenCustomerOrder = false;
                            }
                            else
                            {
                                return;
                            }
                        }
                        if (blRentRecall)
                        {
                            if (dtblPOS.Rows.Count == 0)
                            {
                                blRentRecall = false;
                                blReturnItem = false;
                                blWorkOrder = false;
                                blResumeTransaction = false;
                                blOpenCustomerOrder = false;
                            }
                            else
                            {
                                return;
                            }
                        }
                        if (blRentIssued)
                        {
                            if (dtblPOS.Rows.Count == 0)
                            {
                                blRentIssued = false;
                                blReturnItem = false;
                                blWorkOrder = false;
                                blResumeTransaction = false;
                                blOpenCustomerOrder = false;
                            }
                            else
                            {
                                return;
                            }
                        }
                        if ((!blRepairRecall) && (!blRepairIssued)) blRepairIssued = true;
                    }

                    AddRemoveRepairExtra();

                    DisplayFunctionButtons();

                    SetServiceTypeButtonColor();
                }

                SetTenderButton();
            }
        }


        private void AddRemoveRepairExtra()
        {
            bool bAdd = false;
            if ((strCurrentServiceType == "Sales") || (strCurrentServiceType == "Rent")) bAdd = false;
            if (strCurrentServiceType == "Repair") bAdd = true;

            int iRepairSL = 0;
            bool blExtra = false;
            if (bAdd)
            {
                foreach (DataRow dr in dtblFunctionButton.Rows)
                {
                    if (dr["NAME"].ToString() == "Repair")
                    {
                        iRepairSL = GeneralFunctions.fnInt32(dr["SL"].ToString());
                        break;
                    }
                }

                foreach (DataRow dr in dtblFunctionButton.Rows)
                {
                    if (GeneralFunctions.fnInt32(dr["ID"].ToString()) == 99999)
                    {
                        blExtra = true;
                        break;
                    }
                }



                if (!blExtra)
                {
                    DataTable dtblTemp = dtblFunctionButton.Clone();


                    foreach (DataRow dr in dtblFunctionButton.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["SL"].ToString()) <= iRepairSL)
                        {
                            dtblTemp.Rows.Add(new object[] { GeneralFunctions.fnInt32(dr["SL"].ToString()),
                                dr["ID"].ToString(),dr["NAME"].ToString()});
                        }
                        else
                        {
                            break;
                        }
                    }

                    dtblTemp.Rows.Add(new object[] { iRepairSL + 1, "99999", "Save Invoice" });


                    foreach (DataRow dr in dtblFunctionButton.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["SL"].ToString()) > iRepairSL)
                        {
                            dtblTemp.Rows.Add(new object[] { GeneralFunctions.fnInt32(dr["SL"].ToString()) + 1,
                                dr["ID"].ToString(),dr["NAME"].ToString()});
                        }
                    }

                    dtblFunctionButton = dtblTemp;

                }
            }
            else
            {
                foreach (DataRow dr in dtblFunctionButton.Rows)
                {
                    if (GeneralFunctions.fnInt32(dr["ID"].ToString()) == 99999)
                    {
                        blExtra = true;
                        break;
                    }
                }


                if (blExtra)
                {
                    iRepairSL = 0;
                    foreach (DataRow dr in dtblFunctionButton.Rows)
                    {
                        if (dr["NAME"].ToString() == "Repair")
                        {
                            iRepairSL = GeneralFunctions.fnInt32(dr["SL"].ToString());
                            break;
                        }
                    }

                    DataTable dtblTemp = dtblFunctionButton.Clone();

                    foreach (DataRow dr in dtblFunctionButton.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["SL"].ToString()) <= iRepairSL)
                        {
                            dtblTemp.Rows.Add(new object[] { GeneralFunctions.fnInt32(dr["SL"].ToString()),
                                dr["ID"].ToString(),dr["NAME"].ToString()});
                        }
                    }



                    foreach (DataRow dr in dtblFunctionButton.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["SL"].ToString()) > iRepairSL + 1)
                        {
                            dtblTemp.Rows.Add(new object[] { GeneralFunctions.fnInt32(dr["SL"].ToString()) - 1,
                                dr["ID"].ToString(),dr["NAME"].ToString()});
                        }

                    }

                    dtblFunctionButton = dtblTemp;

                }

            }
        }

        // check if Items in the cart are from different service

        private bool validcheckcart(string pservicetype)
        {
            if (dtblPOS.Rows.Count == 0) return true;
            else
            {
                bool tflag = false;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if (dr["SERVICE"].ToString() == pservicetype) tflag = true;
                    break;
                }
                if (tflag) return true;
                else
                {
                    if (new MessageBoxWindow().Show("Items in the cart are from different service." + "\n" + "You must remove this items from the cart to start this service." + "\n" + Properties.Resources.Do_you_want_to_continue_, Properties.Resources.Validation, MessageBoxButton.YesNo, MessageBoxImage.Information) == MessageBoxResult.Yes)
                    {
                        InitializeScreen();
                        return true;
                    }
                    else return false;
                }
            }
        }
        private void btnsrvRent_Click(object sender, RoutedEventArgs e)
        {

        }

        private void btnsrvRepair_Click(object sender, RoutedEventArgs e)
        {

        }

        private void btnSaveRepair_Click(object sender, RoutedEventArgs e)
        {
            if (((sender as System.Windows.Controls.Button).Content as TextBlock).Text == "Save Invoice")
            {
                if (dtblPOS.Rows.Count == 0)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Empty_Cart__, Properties.Resources.Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
                else
                {
                    CheckStockBeforeTender();
                    if (dtblZeroStock.Rows.Count > 0)
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSOutOfStockDlg frm_POSOutOfStockDlg = new frm_POSOutOfStockDlg();
                        try
                        {
                            frm_POSOutOfStockDlg.Stock = dtblZeroStock;
                            frm_POSOutOfStockDlg.ShowDialog();
                            if (frm_POSOutOfStockDlg.DialogResult == true)
                            {
                                if (new MessageBoxWindow().Show("Are you want to remove out of stock products from the cart?", "Stock Validation", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                                {
                                    RemoveProductFromCart();
                                    /// Set UP/Down Button to move cursor through Cart Item
                                    EnableDisableButton(btnUP, btnDown, gridControl1);
                                    GetTotal(); /// Calculate and Display Cart Total
                                    ShowTax(); /// Calculate and Display Taxes of Cart Items
                                    ResetQty();  /// Reset Item Quantity
                                }
                            }
                        }
                        finally
                        {
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                    }
                }
                if (dtblZeroStock.Rows.Count > 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
                if (dtblPOS.Rows.Count == 0)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }

                int ccnt = 0;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if (dr["PRODUCTTYPE"].ToString() == "C") ccnt++;
                }
                if (ccnt == dtblPOS.Rows.Count)
                {
                    new MessageBoxWindow().Show(Properties.Resources.No_item_selected_for_Repairing, "Validation", MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }

                if (intCustID == 0)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Please_Select_Customer, "Repair Info.", MessageBoxButton.OK, MessageBoxImage.Information);
                    tcPOS.SelectedIndex = 1;
                    return;
                }

                if (intCustID > 0)
                {
                    if (!CheckActiveCustomer(intCustID))
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Transaction_is_possible_for_active_customer_only, Properties.Resources.Customer_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        GeneralFunctions.SetFocus(txtCust);
                        return;
                    }
                }

                if (Settings.GeneralReceiptPrint == "N")
                {
                    /*if (Settings.ReceiptPrinterName == "")
                    {
                        DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                        return;
                    }*/
                }

                if (intCustID > 0)
                {
                    if (repairparentinv == 0)
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frmPOSRepairInfoDlg frm_POSRepairInfoDlg = new frmPOSRepairInfoDlg();
                        try
                        {
                            frm_POSRepairInfoDlg.CalledFor = "Issue";
                            frm_POSRepairInfoDlg.CustomerID = intCustID;
                            frm_POSRepairInfoDlg.RepairAmount = Convert.ToDouble(numTotal.Text);
                            frm_POSRepairInfoDlg.ID = 0;
                            frm_POSRepairInfoDlg.ShowDialog();
                            if (frm_POSRepairInfoDlg.DialogResult == true)
                            {
                                dtblRepairInfo.Rows.Clear();
                                dtblRepairInfo = frm_POSRepairInfoDlg.pdtbl;
                                //if (frm_POSRepairInfoDlg.changebrwfield) blChangeCustomerOnDelivery = true;
                            }
                            else
                            {
                                return;
                            }
                        }
                        finally
                        {
                            blurGrid.Visibility = Visibility.Collapsed;
                        }

                        //Thread.Sleep(100); --Sam
                        //Refresh();
                    }

                    if (repairparentinv > 0)
                    {
                        repairdue = Convert.ToDouble(numTotal.Text) - repairadv;
                    }

                    string AutoEmail = "N";


                    foreach (DataRow drrp in dtblRepairInfo.Rows)
                    {
                        repairadv = GeneralFunctions.fnDouble(drrp["AdvanceAmount"].ToString());
                        AutoEmail = drrp["AutoEmail"].ToString();
                    }

                    /*
                    if (intINV > 0)
                    {
                        if (repairparentinv == 0) PrintInvoice(intINV, "Repair In");
                        InitializeScreen();
                    }*/



                    int i = SaveRepairInvoice();

                    if ((i > 0) && (repairparentinv == 0))
                    {
                        bool blclearflg = false;
                        if (repairadv > 0)
                        {
                            blurGrid.Visibility = Visibility.Visible;
                            frmPOSTenderDlg frm_POSTenderDlg = new frmPOSTenderDlg();
                            try
                            {
                                frm_POSTenderDlg.ResumeTransaction = blResumeTransaction;
                                frm_POSTenderDlg.WorkOrderTransaction = blWorkOrder;
                                if (blWorkOrder)
                                {
                                    frm_POSTenderDlg.WODatatbl = FinalDataTable();
                                }
                                frm_POSTenderDlg.SelectedReturnInvoiceNo = intSelectedReturnInvoiceNo;
                                frm_POSTenderDlg.ApptDatatbl = dtblAppt;
                                frm_POSTenderDlg.SuspendInvoiceNo = intSuspendInvNo;
                                frm_POSTenderDlg.ReturnItem = blReturnItem;
                                frm_POSTenderDlg.ExistCoupon = blExistCoupon;
                                if (strCurrentServiceType == "Sales") frm_POSTenderDlg.Sale = true; else frm_POSTenderDlg.Sale = false;
                                frm_POSTenderDlg.ServiceType = strCurrentServiceType;
                                frm_POSTenderDlg.RentIssued = blRentIssued;
                                frm_POSTenderDlg.RentRecall = blRentRecall;
                                frm_POSTenderDlg.RepairIssued = true;
                                frm_POSTenderDlg.RepairRecall = false;
                                frm_POSTenderDlg.RepairAdvance = repairadv;
                                frm_POSTenderDlg.RepairDue = repairdue;
                                frm_POSTenderDlg.RepairTender = repairtender;
                                frm_POSTenderDlg.IssueRepairInvNo = repairparentinv;

                                frm_POSTenderDlg.RepairAmount = Convert.ToDouble(numTotal.Text);
                                frm_POSTenderDlg.dtlRepairItemInfo = dtblRepairInfo;

                                frm_POSTenderDlg.RentSecurityDeposit = dblRentSecurityDeposit;
                                frm_POSTenderDlg.IssueRentInvNo = RentReturnInv;
                                frm_POSTenderDlg.RentCalcFlag = RentCalcFlag;
                                frm_POSTenderDlg.FinalFlag = false;
                                frm_POSTenderDlg.CustID = intCustID;
                                frm_POSTenderDlg.TaxExempt = strTaxExempt;
                                frm_POSTenderDlg.StoreCr = dblStoreCr;
                                frm_POSTenderDlg.CustAcctLimit = dblCustAcctLimit;
                                frm_POSTenderDlg.CustAcctBalance = dblCustAcctBalance;
                                frm_POSTenderDlg.POSDatatbl = dtblPOS;
                                frm_POSTenderDlg.MaxInvNo = intMaxInvNo;
                                frm_POSTenderDlg.SuperUserID = intSuperUserID;
                                frm_POSTenderDlg.FunctionBtnAccess = blFunctionBtnAccess;

                                frm_POSTenderDlg.TCustDTaxID = CustDTaxID;
                                frm_POSTenderDlg.TCustDTaxName = CustDTaxName;
                                frm_POSTenderDlg.TCustDTaxType = CustDTaxType;
                                frm_POSTenderDlg.TCustDTaxRate = CustDTaxRate;
                                frm_POSTenderDlg.TCustDTaxValue = CustDTaxValue;

                                frm_POSTenderDlg.calledfrm = this;
                                frm_POSTenderDlg.RepairDeposit = true;
                                frm_POSTenderDlg.RepairInvoiceForDeposit = i;
                                frm_POSTenderDlg.ShowDialog();
                            }
                            finally
                            {
                                blurGrid.Visibility = Visibility.Collapsed;
                                blclearflg = frm_POSTenderDlg.FinalFlag;
                                dtblForStockUpdate = frm_POSTenderDlg.dtblForStockUpdate;  /*** for stock update ****/

                            }

                            Thread.Sleep(100);
                            if (blclearflg)
                            {
                                if (AutoEmail == "Y")
                                {
                                    //DevExpress.XtraSplashScreen.SplashScreenManager.ShowForm(typeof(wait_form));
                                    bool bmail = false;
                                    try
                                    {
                                        bmail = EmailRepairForm(i);
                                    }
                                    finally
                                    {
                                        //DevExpress.XtraSplashScreen.SplashScreenManager.CloseForm();
                                        DocMessage.MsgInformation(bmail ? "Email send successfully" : "Error while sending Email...");
                                    }
                                }
                                blInitAutoSignOut = true;
                                blInitAutoSignOutAfterTender = true;
                                InitializeScreen();
                            }
                            else
                            {
                                PosDataObject.POS ops1 = new PosDataObject.POS();
                                ops1.Connection = SystemVariables.Conn;
                                string er = ops1.ResetRepairAdvanceAmount(i);

                                if (AutoEmail == "Y")
                                {
                                    //DevExpress.XtraSplashScreen.SplashScreenManager.ShowForm(typeof(wait_form));
                                    bool bmail = false;
                                    try
                                    {
                                        bmail = EmailRepairForm(i);
                                    }
                                    finally
                                    {
                                        //DevExpress.XtraSplashScreen.SplashScreenManager.CloseForm();
                                        DocMessage.MsgInformation(bmail ? "Email send successfully" : "Error while sending Email...");
                                    }
                                }

                                blInitAutoSignOut = true;
                                blInitAutoSignOutAfterTender = true;
                                InitializeScreen();
                            }
                        }
                        else
                        {
                            blInitAutoSignOut = true;
                            blInitAutoSignOutAfterTender = true;
                            if (repairparentinv == 0)
                            {
                                PrintInvoice(i, "Repair In");

                                if (AutoEmail == "Y")
                                {
                                    //DevExpress.XtraSplashScreen.SplashScreenManager.ShowForm(typeof(wait_form));
                                    bool bmail = false;
                                    try
                                    {
                                        bmail = EmailRepairForm(i);
                                    }
                                    finally
                                    {
                                        //DevExpress.XtraSplashScreen.SplashScreenManager.CloseForm();
                                        DocMessage.MsgInformation(bmail ? "Email send successfully" : "Error while sending Email...");
                                    }
                                }
                            }

                            InitializeScreen();
                        }
                    }

                    if ((i > 0) && (repairparentinv > 0))
                    {
                        blInitAutoSignOut = true;
                        blInitAutoSignOutAfterTender = true;
                        InitializeScreen();
                    }
                }
            }

            if (((sender as System.Windows.Controls.Button).Content as TextBlock).Text == "Open Invoice")
            {
                if (Settings.GeneralReceiptPrint == "N")
                {
                    /*if (Settings.ReceiptPrinterName == "")
                    {
                        DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                        return;
                    }*/
                }
                btnRepairRecallClick(sender, e);
            }
        }
        /// Save Repair records

        private int SaveRepairInvoice()
        {
            int intINV = 0;
            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            objpos.EmployeeID = SystemVariables.CurrentUserID;
            objpos.CustomerID = intCustID;
            objpos.TransType = 17;
            objpos.ReceiptCnt = 1;
            objpos.Status = 17;
            objpos.Tax = Convert.ToDouble(numTax.Text);
            double tempcoupon = 0;
            objpos.Coupon = tempcoupon;
            double tempfees = 0;
            double tempfeestax = 0;
            FeesCalculation(dtblPOS, ref tempfees, ref tempfeestax);
            objpos.TotalFees = tempfees;
            objpos.TotalFeesTax = tempfeestax;

            double tempdtx = 0;
            DTaxCalculation(dtblPOS, ref tempdtx);
            objpos.DTaxID = CustDTaxID;
            objpos.DTax = tempdtx;

            objpos.CouponPerc = 0;
            objpos.Discount = Convert.ToDouble(numDiscount.Text);
            objpos.DiscountReason = "";
            objpos.TotalSale = Convert.ToDouble(numTotal.Text);
            objpos.ItemDataTable = FinalDataTableForRepair(dtblPOS);
            objpos.TaxID1 = intTaxID1;
            objpos.TaxID2 = intTaxID2;
            objpos.TaxID3 = intTaxID3;
            objpos.Tax1 = dblTax1;
            objpos.Tax2 = dblTax2;
            objpos.Tax3 = dblTax3;
            objpos.ErrorMsg = "";
            objpos.ChangeAmount = 0;
            objpos.SuspendInvoiceNo = 0;

            objpos.ChangedByAdmin = intSuperUserID;
            objpos.FunctionButtonAccess = blFunctionBtnAccess;

            objpos.TenderDataTable = null;
            // static value
            objpos.StoreID = 1;
            objpos.RegisterID = 1;
            objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
            objpos.TransNoteNo = 0;
            objpos.LayawayNo = 0;
            objpos.TransMSeconds = 0;
            // static value
            objpos.TerminalName = Settings.TerminalName;
            objpos.Return = false;
            objpos.NewLayaway = false;
            objpos.Layaway = false;
            objpos.LayawayRefund = false;
            objpos.ApptDataTable = null;
            objpos.RentReturn = false;
            objpos.ServiceType = "Repair";
            objpos.IssueRepairInvNo = repairparentinv;

            DateTime rpin = Convert.ToDateTime(null);
            DateTime rpdelvy = Convert.ToDateTime(null);
            DateTime rpnotf = Convert.ToDateTime(null);
            string strrpnotes1 = "";
            string strrpnotes2 = "";
            string strrpnotes3 = "";

            string strrpitemname = "";
            string strrpitemsl = "";
            string strrpfind = "";
            if (repairparentinv == 0)
            {
                foreach (DataRow drrp in dtblRepairInfo.Rows)
                {
                    strrpnotes1 = drrp["ProblemDesc"].ToString();
                    strrpnotes2 = drrp["RepairDesc"].ToString();
                    strrpnotes3 = drrp["Remarks"].ToString();
                    rpin = GeneralFunctions.fnDate(drrp["DateIn"].ToString());
                    if (drrp["ExpectedDeliveryDate"].ToString() != "") rpdelvy = GeneralFunctions.fnDate(drrp["ExpectedDeliveryDate"].ToString());
                    if (drrp["NotifiedDate"].ToString() != "") rpnotf = GeneralFunctions.fnDate(drrp["NotifiedDate"].ToString());
                    strrpitemname = drrp["ItemTag"].ToString();
                    strrpitemsl = drrp["ItemSL"].ToString();
                    strrpfind = drrp["RepairFindUs"].ToString();
                }
            }
            objpos.RepairFindUs = strrpfind;
            objpos.RepairDateIn = rpin;
            objpos.RepairDeliveryDate = rpdelvy;
            objpos.RepairNotifiedDate = rpnotf;
            objpos.RepairProblem = strrpnotes1;
            objpos.RepairNotes = strrpnotes2;
            objpos.RepairRemarks = strrpnotes3;
            objpos.RepairAmount = Convert.ToDouble(numTotal.Text);
            objpos.RepairAdvanceAmount = repairadv;
            objpos.RentalSecurityDeposit = 0;
            objpos.RepairItemName = strrpitemname;
            objpos.RepairItemSL = strrpitemsl;
            objpos.GCCentralFlag = Settings.CentralExportImport;
            objpos.GCOPStore = Settings.StoreCode;

            objpos.OperateStore = Settings.StoreCode;

            objpos.BeginTransaction();
            if (objpos.CreateInvoice())
            {
                intINV = objpos.ID;
            }
            objpos.EndTransaction();

            return intINV;


        }
        /// Emailing Repair Document to Customer

        private bool EmailRepairForm(int pRepairID)
        {
            bool val = false;
            try
            {
                string CustEmail = "";
                string CustName = "";
                OfflineRetailV2.Report.Customer.RepairForm repf1 = new OfflineRetailV2.Report.Customer.RepairForm();

                string repxFile = "";
                repxFile = "RepairForm.repx";

                PosDataObject.POS opos1 = new PosDataObject.POS();
                opos1.Connection = SystemVariables.Conn;
                DataTable dtbl = opos1.FetchRepairHeaderForEmail(pRepairID);

                DataTable d1 = new DataTable("Repair Info");
                d1.Columns.Add("Customer First Name", System.Type.GetType("System.String"));
                d1.Columns.Add("Customer Last Name", System.Type.GetType("System.String"));
                d1.Columns.Add("Customer Phone", System.Type.GetType("System.String"));
                d1.Columns.Add("Date In", System.Type.GetType("System.String"));
                d1.Columns.Add("Expected Delivery Date", System.Type.GetType("System.String"));
                d1.Columns.Add("Customer Notified Date", System.Type.GetType("System.String"));
                d1.Columns.Add("Repair Item", System.Type.GetType("System.String"));
                d1.Columns.Add("Problem", System.Type.GetType("System.String"));
                d1.Columns.Add("Repair", System.Type.GetType("System.String"));
                d1.Columns.Add("Remarks", System.Type.GetType("System.String"));
                d1.Columns.Add("Repair Amount", System.Type.GetType("System.String"));
                d1.Columns.Add("Deposit Amount", System.Type.GetType("System.String"));
                d1.Columns.Add("Customer Agreement", System.Type.GetType("System.String"));
                d1.Columns.Add("Repair Disclaimer", System.Type.GetType("System.String"));
                d1.Columns.Add("Repair Item Serial", System.Type.GetType("System.String"));
                d1.Columns.Add("Repair No", System.Type.GetType("System.String"));
                d1.Columns.Add("Find Us", System.Type.GetType("System.String"));

                DataTable d2 = new DataTable("Repair Parts");
                d2.Columns.Add("Item Name", System.Type.GetType("System.String"));
                d2.Columns.Add("Tag", System.Type.GetType("System.String"));
                d2.Columns.Add("Serial", System.Type.GetType("System.String"));
                d2.Columns.Add("Quantity", System.Type.GetType("System.String"));
                d2.Columns.Add("SKU", System.Type.GetType("System.String"));

                PosDataObject.POS opos2 = new PosDataObject.POS();
                opos2.Connection = SystemVariables.Conn;
                DataTable dtbl2 = opos2.FetchRepairPartsForEmail(pRepairID);
                foreach (DataRow dr in dtbl2.Rows)
                {
                    d2.Rows.Add(new object[] { dr["Item Name"].ToString(),
                                               dr["Tag"].ToString(),
                                               dr["Serial"].ToString(),
                                               dr["Quantity"].ToString(),
                                               dr["Item SKU"].ToString()
                    });
                }

                foreach (DataRow dr in dtbl.Rows)
                {
                    d1.Rows.Add(new object[] { dr["FirstName"].ToString(),
                                               dr["LastName"].ToString(),
                                               dr["MobilePhone"].ToString(),
                                               GeneralFunctions.fnDate(dr["RepairDateIn"].ToString()).ToString("MM - dd - yyyy"),
                                               dr["RepairDeliveryDate"].ToString() == "" ? "" : GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToString("MM - dd - yyyy"),
                                               dr["RepairNotifiedDate"].ToString() == "" ? "" : GeneralFunctions.fnDate(dr["RepairNotifiedDate"].ToString()).ToString("MM - dd - yyyy"),
                                               dr["RepairItemName"].ToString(),
                                               dr["RepairProblem"].ToString(),
                                               dr["RepairNotes"].ToString(),
                                               dr["RepairRemarks"].ToString(),
                                               dr["RepairAmount"].ToString(),
                                               dr["RepairAdvanceAmount"].ToString(),
                                               Settings.ReceiptFooter,
                                               Settings.ReceiptLayawayPolicy,
                                               dr["RepairItemSlNo"].ToString(),
                                               pRepairID.ToString(),
                                               dr["RepairFindUs"].ToString()
                     });

                    CustEmail = dr["EMail"].ToString();
                    CustName = dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                }

                string emailattachpth = "";
                emailattachpth = Path.GetTempPath();
                if (emailattachpth.EndsWith("\\")) emailattachpth = emailattachpth + SystemVariables.BrandName + "\\Email\\";
                else emailattachpth = emailattachpth + "\\" + SystemVariables.BrandName + "\\Email\\";
                if (!Directory.Exists(emailattachpth)) Directory.CreateDirectory(emailattachpth);
                else
                {
                    Directory.Delete(@emailattachpth, true);
                    Directory.CreateDirectory(emailattachpth);
                }

                XtraReport fReport = new XtraReport();


                if (File.Exists(GeneralFunctions.GetReportFilePath(repxFile)))
                    fReport = XtraReport.FromFile(GeneralFunctions.GetReportFilePath(repxFile), true);
                else
                {
                    fReport = repf1;
                }
                if (!File.Exists(GeneralFunctions.GetReportFilePath(repxFile)))
                {
                    string fileName = GeneralFunctions.GetReportPath(fReport, "repx");
                    fReport.SaveLayout(fileName);
                }

                DataSet ds = new DataSet();
                ds.Tables.Add(d1);
                ds.Tables.Add(d2);
                fReport.Report.DataSource = ds;
                fReport.DataSource = ds;
                fReport.CreateDocument();
                fReport.PrintingSystem.ShowMarginsWarning = false;

                bool do_email = false;

                try
                {
                    do_email = GeneralFunctions.EmailRepair(fReport, emailattachpth, pRepairID.ToString(), CustEmail, CustName);
                }
                catch
                {
                }

                val = do_email;


            }
            finally
            {
                Cursor = System.Windows.Input.Cursors.Arrow;
            }
            return val;
        }
        // Assign Cart before Repair Transaction

        private DataTable FinalDataTableForRepair(DataTable dtblPOSDatatbl)
        {

            DataTable dtblFinal = new DataTable();
            dtblFinal.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ONHANDQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NORMALQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("COST", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("QTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("RATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DEPT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("CAT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMDESC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMID", System.Type.GetType("System.String"));
            // add for layaway Invoice
            dtblFinal.Columns.Add("TAX1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TOTALSALE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTREASON", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("LAYAWAYAMOUNT", System.Type.GetType("System.String"));

            // add for invoice notes
            dtblFinal.Columns.Add("NOTES", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMDISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("RENTTYPE", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("RENTDURATION", System.Type.GetType("System.Double"));//35
            dtblFinal.Columns.Add("RENTAMOUNT", System.Type.GetType("System.Double"));//36
            dtblFinal.Columns.Add("RENTDEPOSIT", System.Type.GetType("System.Double"));//37

            dtblFinal.Columns.Add("REPAIRITEMTAG", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("REPAIRITEMSLNO", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("REPAIRITEMPURCHASEDATE", System.Type.GetType("System.String"));//34

            dtblFinal.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//38
            dtblFinal.Columns.Add("TX1", System.Type.GetType("System.Double"));//39
            dtblFinal.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//40
            dtblFinal.Columns.Add("TX2", System.Type.GetType("System.Double"));//41
            dtblFinal.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//42
            dtblFinal.Columns.Add("TX3", System.Type.GetType("System.Double"));//43

            // for Fees & Charges
            dtblFinal.Columns.Add("FEESID", System.Type.GetType("System.Int32"));//62
            dtblFinal.Columns.Add("FEESLOGIC", System.Type.GetType("System.String"));//63
            dtblFinal.Columns.Add("FEESVALUE", System.Type.GetType("System.Double"));//64
            dtblFinal.Columns.Add("FEESTAXRATE", System.Type.GetType("System.Double"));//65
            dtblFinal.Columns.Add("FEES", System.Type.GetType("System.Double"));//66
            dtblFinal.Columns.Add("FEESTAX", System.Type.GetType("System.Double"));//67
            dtblFinal.Columns.Add("FEESTEXT", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("FEESQTY", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("EDITF", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PROMPTPRICE", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("GRATE", System.Type.GetType("System.Double"));
            dtblFinal.Columns.Add("GPRICE", System.Type.GetType("System.Double"));

            dtblFinal.Columns.Add("UOM", System.Type.GetType("System.String"));

            // fetch TaxID, TaxName first

            string strTaxID1 = "0";
            string strTaxID2 = "0";
            string strTaxID3 = "0";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";
            string strTaxRate1 = "0";
            string strTaxRate2 = "0";
            string strTaxRate3 = "0";
            int iTaxType1 = 0;
            int iTaxType2 = 0;
            int iTaxType3 = 0;
            double TaxVal1 = 0;
            double TaxVal2 = 0;
            double TaxVal3 = 0;

            int iFeeID = 0;
            string sFeeLogic = "";
            double dFeeVal = 0;
            double dFeeTxRate = 0;
            double dFee = 0;
            double dFeeTx = 0;
            string sFeeText = "";
            string sFeeQty = "N";
            string ef = "N";
            string prompt = "N";

            int intCount = 0;
            DataTable dtblTaxHeader = new DataTable();
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTaxHeader = objTax.FetchActiveTax();
            foreach (DataRow dr in dtblTaxHeader.Rows)
            {
                intCount++;
                if (intCount == 1)
                {
                    strTaxID1 = dr["ID"].ToString();
                    strTaxName1 = dr["TaxName"].ToString();
                    strTaxRate1 = dr["TaxRate"].ToString();
                }
                if (intCount == 2)
                {
                    strTaxID2 = dr["ID"].ToString();
                    strTaxName2 = dr["TaxName"].ToString();
                    strTaxRate2 = dr["TaxRate"].ToString();
                }
                if (intCount == 3)
                {
                    strTaxID3 = dr["ID"].ToString();
                    strTaxName3 = dr["TaxName"].ToString();
                    strTaxRate3 = dr["TaxRate"].ToString();
                    break;
                }
            }
            dtblTaxHeader.Dispose();

            foreach (DataRow dr1 in dtblPOSDatatbl.Rows)
            {
                iTaxType1 = 0;
                iTaxType2 = 0;
                iTaxType3 = 0;
                TaxVal1 = 0;
                TaxVal2 = 0;
                TaxVal3 = 0;
                ef = "N";
                string pSKU = "";
                string pDept = "";
                string pCat = "";
                string pT1 = "N";
                string pT2 = "N";
                string pT3 = "N";

                int tx1ty = 0;
                int tx2ty = 0;
                int tx3ty = 0;

                int tx1id = 0;
                int tx2id = 0;
                int tx3id = 0;

                double tx1 = 0;
                double tx2 = 0;
                double tx3 = 0;

                double dGRate = 0;
                double dGPrice = 0;

                dGRate = GeneralFunctions.fnDouble(dr1["GRATE"].ToString());
                dGPrice = GeneralFunctions.fnDouble(dr1["GPRICE"].ToString());


                tx1ty = GeneralFunctions.fnInt32(dr1["TX1TYPE"].ToString());
                tx2ty = GeneralFunctions.fnInt32(dr1["TX2TYPE"].ToString());
                tx3ty = GeneralFunctions.fnInt32(dr1["TX3TYPE"].ToString());

                tx1id = GeneralFunctions.fnInt32(dr1["TX1ID"].ToString());
                tx2id = GeneralFunctions.fnInt32(dr1["TX2ID"].ToString());
                tx3id = GeneralFunctions.fnInt32(dr1["TX3ID"].ToString());

                tx1 = GeneralFunctions.fnDouble(dr1["TX1"].ToString());
                tx2 = GeneralFunctions.fnDouble(dr1["TX2"].ToString());
                tx3 = GeneralFunctions.fnDouble(dr1["TX3"].ToString());

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx1id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx1id > 0))
                {
                    iTaxType1 = tx1ty;
                    TaxVal1 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx2id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx2id > 0))
                {
                    iTaxType1 = tx2ty;
                    TaxVal1 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx3id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx3id > 0))
                {
                    iTaxType1 = tx3ty;
                    TaxVal1 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx1id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx1id > 0))
                {
                    iTaxType2 = tx1ty;
                    TaxVal2 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx2id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx2id > 0))
                {
                    iTaxType2 = tx2ty;
                    TaxVal2 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx3id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx3id > 0))
                {
                    iTaxType2 = tx3ty;
                    TaxVal2 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx1id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx1id > 0))
                {
                    iTaxType3 = tx1ty;
                    TaxVal3 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx2id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx2id > 0))
                {
                    iTaxType3 = tx2ty;
                    TaxVal3 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx3id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx3id > 0))
                {
                    iTaxType3 = tx3ty;
                    TaxVal3 = tx3;
                }

                iFeeID = GeneralFunctions.fnInt32(dr1["FEESID"].ToString());
                sFeeLogic = dr1["FEESLOGIC"].ToString();
                dFeeVal = GeneralFunctions.fnDouble(dr1["FEESVALUE"].ToString());
                dFeeTxRate = GeneralFunctions.fnDouble(dr1["FEESTAXRATE"].ToString());
                dFee = GeneralFunctions.fnDouble(dr1["FEES"].ToString());
                dFeeTx = GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString());
                sFeeText = dr1["FEESTEXT"].ToString();
                sFeeQty = dr1["FEESQTY"].ToString();

                ef = dr1["EDITF"].ToString();
                prompt = dr1["PROMPTPRICE"].ToString();

                if (dr1["PRODUCTTYPE"].ToString() == "G") // Gift Certificate
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "GC",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "A") // Account Pay
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,
                                        pT1,pT2,pT3,strTaxRate1,
                                        strTaxRate2,strTaxRate3,
                                        "AR",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","",
                                        "0",dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "C") // Coupon
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,
                                        pT1,pT2,pT3,strTaxRate1,strTaxRate2,
                                        strTaxRate3,
                                        "COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),"0","","0",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "H") // Fees Ticket
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,
                                        pT1,pT2,pT3,strTaxRate1,strTaxRate2,
                                        strTaxRate3,
                                        "FEE COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),"0","","0",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "Z") // Special Mix n Match
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,
                                        pT1,pT2,pT3,strTaxRate1,strTaxRate2,
                                        strTaxRate3,
                                        "Mix n Match",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),"0","","0",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "B") // Blank Line
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        "Blank",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),"0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else
                {
                    int pID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                    FetchItemAdditionData(pID, ref pSKU, ref pDept, ref pCat);

                    if (strTaxExempt == "N")
                    {
                        GetTaxable(pID, strTaxID1, strTaxID2, strTaxID3, ref pT1, ref pT2, ref pT3);
                    }

                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),"0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dGRate,dGPrice,dr1["UOM"].ToString()});
                }

            }



            intTaxID1 = GeneralFunctions.fnInt32(strTaxID1);
            intTaxID2 = GeneralFunctions.fnInt32(strTaxID2);
            intTaxID3 = GeneralFunctions.fnInt32(strTaxID3);

            if (strTaxExempt == "N")
            {
                GetTax();
                DataTable dtblTaxS = dtblTax;
                foreach (DataRow drTax in dtblTaxS.Rows)
                {
                    if (drTax["TAXID"].ToString() == strTaxID1) dblTax1 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                    if (drTax["TAXID"].ToString() == strTaxID2) dblTax2 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                    if (drTax["TAXID"].ToString() == strTaxID3) dblTax3 = GeneralFunctions.fnDouble(drTax["Amount"].ToString());
                }
                dtblTaxS.Dispose();
                dtblTax.Dispose();
            }

            return dtblFinal;
        }
        private void btnOrdering_Click(object sender, RoutedEventArgs e)
        {
            if (strCurrentServiceType != "Sales") return;
            if (blReturnItem) return;
            if (blResumeTransaction) return;

            frm_POSOrderDlg fdlg = new frm_POSOrderDlg();
            try
            {
                fdlg.ShowDialog();

                if (fdlg.DialogResult == true)
                {
                    blOpenCustomerOrder = true;
                    CurrentCustomerOrderID = fdlg.SelectID;
                    AddDatatableWithCustomerOrderData();
                }

            }
            finally
            {

            }
        }
        /// Add cart for customer ordering

        private void AddDatatableWithCustomerOrderData()
        {
            DataTable dtblH = new DataTable();
            DataTable dtbl = new DataTable();

            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            dtblH = objPOS.FetchCustomerOrderHeaderRecord(CurrentCustomerOrderID);
            dtbl = objPOS.FetchCustomerOrderDetailRecord(CurrentCustomerOrderID);

            string strUOMCount = "0";
            string strUOMPrice = "";
            string strUOMDesc = "";

            string strMatxOID = "";
            string strMatxOV1 = "";
            string strMatxOV2 = "";
            string strMatxOV3 = "";

            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";

            int intfocusrow = 0;
            double intQty = 0;
            double dblPrice = 0;
            string strselectid = "";
            string strDL = "";

            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";
            string refRentPrompt = "";
            int tmixunique = 0;

            string refUOM = "";
            string refExpiry = "";


            foreach (DataRow drH in dtblH.Rows)
            {
                intCustID = GeneralFunctions.fnInt32(drH["CustomerID"].ToString());

                string refTaxExempt = "";
                string refDiscountLevel = "";
                string refTaxID = "";
                string refStoreCr = "";
                string refCID = "";
                string refCName = "";
                string refCAdd = "";
                double dblBalance = 0;
                string refARCredit = "";
                string refPOSNotes = "";

                int refDTaxID = 0;
                string refDTax = "";
                double refDTaxRate = 0;
                int refDTaxType = 0;

                FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd, ref refTaxExempt,
                                ref refDiscountLevel, ref refTaxID, ref refStoreCr, ref refARCredit, ref refPOSNotes,
                                ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);

                CustDTaxID = refDTaxID;
                CustDTaxName = refDTax;
                CustDTaxRate = refDTaxRate;
                CustDTaxType = refDTaxType;
                strTaxExempt = drH["CTaxExempt"].ToString();

                strDiscountLevel = drH["CDiscountLevel"].ToString();
                dblBalance = GetAccountBalance(intCustID);
                txtCust.Text = refCID;
                if (Settings.CentralExportImport == "Y")
                {
                    string tstr = GetCustomerIssueStore(intCustID);
                    if (tstr != Settings.StoreCode) txtCustStore.Text = tstr;
                }
                lbCustNotes.Text = refPOSNotes;

                lbCustName.Text = refCName;
                lbCustAddress.Text = refCAdd;
                ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                dblCustAcctBalance = dblBalance;

                blChangeCustomer = true;

            }



            foreach (DataRow dr in dtbl.Rows)
            {

                strselectid = "";
                strDL = strDiscountLevel;

                strselectid = dr["ProductID"].ToString();
                
                FetchProduct(GeneralFunctions.fnInt32(strselectid), strDL, intUsePriceLevel,
                                ref refType, ref refOHQty, ref refNQty, ref refPrice, ref refNPrice,
                                ref refCost, ref refPrompt, ref refDP, ref refAge,
                                ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY, ref refRentWK,
                                ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt, ref refRentPrompt,
                                ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

                refPrice = dr["ItemRate"].ToString();

                intQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                dblPrice = GeneralFunctions.fnDouble(refPrice);
                double tempprice = 0;

                if (dr["DiscountID"].ToString() != "0")
                    tempprice = (intQty * GeneralFunctions.fnDouble(refPrice)) - GeneralFunctions.fnDouble(dr["Discount"].ToString());
                else
                    tempprice = (intQty * GeneralFunctions.fnDouble(refPrice));

                dtblPOS.Rows.Add(new object[] {
                                                        dr["ProductID"].ToString(),
                                                        GetProductDescInCart(dr["Description"].ToString(),dr["DiscountID"].ToString(),"0"),
                                                        refType,refOHQty,refNQty,refCost,dr["Qty"].ToString(),refPrice,refNPrice,
                                                        tempprice.ToString(),"0",
                                                        "0","0","","","","",GetUniqueString(),refDP,"",
                                                        dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                                        dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),"1",

                                                        GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                        "","","",
                                                        GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()),
                                                        dr["Taxable1"].ToString(),
                                                        dr["Taxable2"].ToString(),
                                                        dr["Taxable3"].ToString(),
                                                        "Sales","NA","0","0","0","","","",
                                                        GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                                        GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                                        GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                                        0,
                                                        "",
                                                        "",
                                                        0,
                                                        0,
                                                        0,
                                                        "",
                                                        "0",
                                                        "",
                                                        "0",
                                                        "0",
                                                        "",
                                                        "0",
                                                        "",
                                                        "0",
                                                        "0",
                                                        0,
                                                        0,
                                                        0,
                                                        0,
                                                        "Y",
                                                        "N",
                                                        "0","X",++CartSL,"",0,
                                                        0,0,"","","","","","N"});
                intfocusrow++;

                if (Settings.PriceLevelForOneTime == "Y")
                {
                    Settings.PriceLevelForOneTime = "N";
                    intUsePriceLevel = Settings.UsePriceLevel;
                }
                SetCartDisplay();
                gridControl1.ItemsSource = dtblPOS;
                ToggleWithEmptyCart();
                gridView1.FocusedRowHandle = intfocusrow;
            }

            MixMatchUnique = tmixunique;
            /// Set UP/Down Button to move cursor through Cart Item
            EnableDisableButton(btnUP, btnDown, gridControl1);
            GetTotal(); /// Calculate and Display Cart Total
            ShowTax(); /// Calculate and Display Taxes of Cart Items
            ResetQty();  /// Reset Item Quantity
        }
        // Item name with single / multiple line 

        private string GetProductDescInCart(string str, string did, string fid)
        {
            if (did != "0")
            {
                if (fid != "0") return str + "\n" + "\n"; else return str + "\n";
            }
            else
            {
                if (fid != "0") return str + "\n"; else return str;
            }
        }





        private void btnRepairRecall_Click(object sender, RoutedEventArgs e)
        {
            btnRepairRecallClick(sender, e);
        }



        public void btnRepairRecallClick(object sender, EventArgs e)
        {
            if (Settings.RepairService == "N") return;
            if ((blReturnItem) || (blWorkOrder) || (blResumeTransaction) || (blRentRecall))
            {
                if (dtblPOS.Rows.Count > 0) return;
                else
                {
                    blReturnItem = false;
                    blWorkOrder = false;
                    blResumeTransaction = false;
                    blRentRecall = false;
                }
            }
            if ((blRentIssued) && (dtblPOS.Rows.Count > 0)) return;
            if ((blRepairIssued) && (dtblPOS.Rows.Count > 0)) return;

            if (intCustID > 0)
            {
                if (!CheckActiveCustomer(intCustID))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Transaction_is_possible_for_active_customer_only, Properties.Resources.Customer_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtCust);
                    CloseMoreFunctions();
                    return;
                }
            }

            if (strCurrentServiceType != "Repair")
            {
                strCurrentServiceType = "Repair";
                blRentIssued = false;
                blRepairIssued = false;
                ArrangeVisibleFunctions();
                AddRemoveRepairExtra();
                DisplayFunctionButtons();
                SetServiceTypeButtonColor();
            }

            /*if (!CheckFunctionButton("31z5")) // permission
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }*/
            blRepairRecall = true;
            blRepairIssued = false;
            blurGrid.Visibility = Visibility.Visible;
            frm_POSRepairRecallDlg frm_POSRepairRecallDlg = new frm_POSRepairRecallDlg();
            try
            {
                dtblReturnItem = new DataTable();
                frm_POSRepairRecallDlg.MainScreenCustID = intCustID;
                frm_POSRepairRecallDlg.SuperUserID = intSuperUserID;
                frm_POSRepairRecallDlg.FunctionBtnAccess = blFunctionBtnAccess;
                frm_POSRepairRecallDlg.ShowDialog();
                if (frm_POSRepairRecallDlg.DialogResult == true)
                {
                    RentReturnInv = 0;
                    RentReturnDeposit1 = 0;
                    RentReturnDeposit2 = 0;
                    RentReturnDeposit3 = 0;
                    dtblDeliveryItem = frm_POSRepairRecallDlg.DeliverItem;
                    repairparentinv = GeneralFunctions.fnInt32(frm_POSRepairRecallDlg.InvNo);

                    dtblRepairInfo.Rows.Clear();

                    DataTable dtb = new DataTable();
                    dtb.Columns.Add("AdvanceAmount", System.Type.GetType("System.String"));
                    dtb.Columns.Add("DateIn", System.Type.GetType("System.String"));
                    dtb.Columns.Add("ExpectedDeliveryDate", System.Type.GetType("System.String"));
                    dtb.Columns.Add("NotifiedDate", System.Type.GetType("System.String"));
                    dtb.Columns.Add("ProblemDesc", System.Type.GetType("System.String"));
                    dtb.Columns.Add("RepairDesc", System.Type.GetType("System.String"));
                    dtb.Columns.Add("Remarks", System.Type.GetType("System.String"));
                    dtb.Columns.Add("ItemTag", System.Type.GetType("System.String"));
                    dtb.Columns.Add("ItemSL", System.Type.GetType("System.String"));
                    dtb.Columns.Add("RepairFindUs", System.Type.GetType("System.String"));
                    dtb.Columns.Add("AutoEmail", System.Type.GetType("System.String"));

                    PosDataObject.POS ops1 = new PosDataObject.POS();
                    ops1.Connection = SystemVariables.Conn;
                    DataTable dtbl = ops1.FetchRepairInfo(repairparentinv);
                    foreach (DataRow dr in dtbl.Rows)
                    {
                        dtb.Rows.Add(new object[] { dr["RepairAdvanceAmount"].ToString(),
                                                    dr["RepairDateIn"].ToString(),
                                                    dr["ExpectedDeliveryDate"].ToString(),
                                                    dr["NotifiedDate"].ToString(),
                                                    dr["RepairProblem"].ToString(),
                                                    dr["RepairNotes"].ToString(),
                                                    dr["RepairRemarks"].ToString(),
                                                    dr["RepairItemName"].ToString(),
                                                    dr["RepairItemSlNo"].ToString(),
                                                    dr["RepairFindUs"].ToString(),
                                                    "N"});
                    }
                    dtbl.Dispose();
                    dtblRepairInfo = dtb;
                    dtb.Dispose();

                    repairadv = frm_POSRepairRecallDlg.DepositRepairAmt;
                    repairdue = frm_POSRepairRecallDlg.DueRepairAmt;
                    intCustID = frm_POSRepairRecallDlg.CustID;
                    AddDatatablewithDeliverRepairItem();
                    SetTenderButton();

                    /*if (!frm_POSRepairRecallDlg.blReturnTransaction)
                    {

                    }
                    else
                    {
                        InitializeScreen();
                    }*/
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        // Assign Cart with Repair Item(s) for Delivery

        private void AddDatatablewithDeliverRepairItem()
        {
            dtblPOS.Rows.Clear();

            blChangeCustomer = true;
            string refTaxExempt = "";
            string refDiscountLevel = "";
            string refTaxID = "";
            string refStoreCr = "";
            string refCID = "";
            string refCName = "";
            string refCAdd = "";
            double dblBalance = 0;
            string refARCredit = "";
            string refPOSNotes = "";

            int refDTaxID = 0;
            string refDTax = "";
            double refDTaxRate = 0;
            int refDTaxType = 0;
            if (intCustID > 0)
            {
                FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd, ref refTaxExempt, ref refDiscountLevel,
                            ref refTaxID, ref refStoreCr, ref refARCredit, ref refPOSNotes, ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);

                CustDTaxID = refDTaxID;
                CustDTaxName = refDTax;
                CustDTaxRate = refDTaxRate;
                CustDTaxType = refDTaxType;
                strTaxExempt = refTaxExempt;
                strDiscountLevel = refDiscountLevel.Trim();
                if (strDiscountLevel == "") strDiscountLevel = "A";

                dblBalance = GetAccountBalance(intCustID);
                txtCust.Text = refCID;
                if (Settings.CentralExportImport == "Y")
                {
                    string tstr = GetCustomerIssueStore(intCustID);
                    if (tstr != Settings.StoreCode) txtCustStore.Text = tstr;
                }
                //lbCustID.Text = "Customer ID : " + refCID;
                lbCustName.Text = refCName;
                lbCustAddress.Text = refCAdd;
                lbCustNotes.Text = refPOSNotes;
                blCustNotes = refPOSNotes != "";
                ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                if (blCustNotes) lbcustinfo2.Text = Properties.Resources.Check__Cust_Notes__Apps;
                dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                dblCustAcctBalance = dblBalance;
                RearrangeProductAsCustomerChange();
                GetTotal();
                ShowTax();
            }

            double intQty = 0;
            double dblPrice = 0;

            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            dtblDeliveryItem = objpos.FetchRepairInvoiceDetails(repairparentinv, Settings.TaxInclusive);

            int rowno = 0;
            foreach (DataRow dr in dtblDeliveryItem.Rows)
            {
                string ss = dr["ID"].ToString();
                intQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                double tempprice = 0;
                if (dr["DiscountID"].ToString() != "0") tempprice = (intQty * dblPrice) - GeneralFunctions.fnDouble(dr["Discount"].ToString());
                else tempprice = (intQty * dblPrice);
                rowno++;
                dtblPOS.Rows.Add(new object[]
                                    {
                                       dr["ProductID"].ToString(),
                                       GetProductDescInCart(dr["Description"].ToString(),dr["DiscountID"].ToString(),dr["FEESID"].ToString()),
                                       dr["ProductType"].ToString(),"0","0","0",dr["Qty"].ToString(),
                                       dr["Price"].ToString(),dr["NormalPrice"].ToString(),tempprice.ToString(),dr["UOMCount"].ToString(),
                                       dr["UOMPrice"].ToString(),dr["UOMDesc"].ToString(),dr["MOID"].ToString(),dr["MOV1"].ToString(),
                                       dr["MOV2"].ToString(),dr["MOV3"].ToString(),GetUniqueString(),dr["DP"].ToString(),dr["Notes"].ToString(),
                                       dr["DiscLogic"].ToString(),dr["DiscValue"].ToString(),dr["Discount"].ToString(),
                                       dr["DiscountID"].ToString(),dr["DiscountText"].ToString(),dr["ItemIndex"].ToString(),
                                       dr["TaxID1"].ToString(),dr["TaxID2"].ToString(),dr["TaxID3"].ToString(),"","","",
                                       dr["TaxRate1"].ToString(),dr["TaxRate2"].ToString(),dr["TaxRate3"].ToString(),
                                       dr["Taxable1"].ToString(),dr["Taxable2"].ToString(),dr["Taxable3"].ToString(),
                                       "Repair","NA","0","0","0",
                                       dr["RepairItemTag"].ToString(),dr["RepairItemSLNO"].ToString(),
                                       dr["RepairItemPurchaseDate"].ToString(),
                                       GeneralFunctions.fnInt32(dr["TaxType1"].ToString()),
                                       GeneralFunctions.fnInt32(dr["TaxType2"].ToString()),
                                       GeneralFunctions.fnInt32(dr["TaxType3"].ToString()),
                                       GeneralFunctions.fnInt32(dr["TaxID1"].ToString()),
                                       GeneralFunctions.fnInt32(dr["TaxID2"].ToString()),
                                       GeneralFunctions.fnInt32(dr["TaxID3"].ToString()),
                                       GeneralFunctions.fnDouble(dr["TaxTotal1"].ToString()),
                                       GeneralFunctions.fnDouble(dr["TaxTotal2"].ToString()),
                                       GeneralFunctions.fnDouble(dr["TaxTotal3"].ToString()),
                                       0,"","",0,0,0,"",

                                        dr["FeesID"].ToString(),
                                        dr["FeesLogic"].ToString(),
                                        dr["FeesValue"].ToString(),
                                        dr["FeesTaxRate"].ToString(),
                                        dr["Fees"].ToString(),
                                        dr["FeesTax"].ToString(),
                                        dr["FeesText"].ToString(),
                                        dr["FeesQty"].ToString(),
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        dr["EditFlag"].ToString(),
                                        dr["PromptPrice"].ToString(),
                                        "0","X",rowno,"",0,
                                        dr["GRate"].ToString(),dr["GPrice"].ToString(),"","","","",""
                                        });

            }
            SetCartDisplay();
            gridControl1.ItemsSource = dtblPOS;
            ToggleWithEmptyCart();
            GetTotal();
            ShowTax();
            ResetQty();
        }
        private void btnCardTran_Click(object sender, RoutedEventArgs e)
        {
            btnCardTranClick(sender, e);
        }
        public void btnCardTranClick(object sender, EventArgs e)
        {


            if (!CheckFunctionButton("31z6"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }

            frm_POSCardAdjustBrw frm_POSCardAdjustBrw = new frm_POSCardAdjustBrw();
            try
            {
                frm_POSCardAdjustBrw.ShowDialog();
            }
            finally
            {

            }
            CloseMoreFunctions();
        }
        private void btnMcryGiftCard_Click(object sender, RoutedEventArgs e)
        {
            btnMcryGiftCardClick(sender, e);
        }
        public void btnMcryGiftCardClick(object sender, EventArgs e)
        {


            if (strCurrentServiceType != "Sales") return;
            if (blReturnItem) return;

            /*if (!CheckFunctionButton("31g"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }*/
            blurGrid.Visibility = Visibility.Visible;
            frm_POSGiftCertDlg frm_POSGiftCertDlg = new frm_POSGiftCertDlg();
            try
            {
                frm_POSGiftCertDlg.IsMercuryGiftCard = true;
                frm_POSGiftCertDlg.CustomerID = intCustID;

                frm_POSGiftCertDlg.ShowDialog();

                if (frm_POSGiftCertDlg.DialogResult == true)
                {
                    intGiftCertNo = frm_POSGiftCertDlg.GiftCertNo;
                    dblGiftCertAmt = frm_POSGiftCertDlg.GiftCertAmount;

                    int i = 0;//MercuryGiftCardInCartValidation();
                    if (i == 0)
                    {
                        string refDP = "";
                        if (Settings.DecimalPlace == 3)
                        {
                            refDP = "2";
                        }
                        else
                        {
                            refDP = "3";
                        }

                        string SpecificGC = "";
                        if (Settings.PaymentGateway == 2) SpecificGC = "Mercury Gift Card";
                        if (Settings.PaymentGateway == 3) SpecificGC = "Precidia Gift Card";
                        if (Settings.PaymentGateway == 5) SpecificGC = "Datacap Gift Card";
                        if (Settings.PaymentGateway == 7) SpecificGC = "POSLink Gift Card";

                        dtblPOS.Rows.Add(new object[] {
                                            "111",frm_POSGiftCertDlg.MgcTranType + " " + SpecificGC,"X","0","0","0", "1",
                                            dblGiftCertAmt.ToString(),"0",dblGiftCertAmt.ToString(),"0","0","0","","","","",
                                            GetUniqueString(),refDP,"","","0","0","0","","1",
                                            "0","0","0","","","","0","0","0","N","N","N","Sales","NA","0","0","0","","","",
                                            0,0,0,0,0,0,0,0,0,0,"","",0,0,0,"",
                                            "0","","0","0","0","0","","N",0,0,0,0,0,"N","N","0","X",++CartSL,"",0,dblGiftCertAmt.ToString(),
                                            dblGiftCertAmt.ToString(),"","","","","","N"});

                        gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                        GetTotal();
                    }
                    else
                    {
                        if (i == 1) new MessageBoxWindow().Show(Properties.Resources.Only_one_Gift_Card_can_be_issued, Properties.Resources.Validation, MessageBoxButton.OK, MessageBoxImage.Stop);
                        if (i == 2) new MessageBoxWindow().Show(Settings.PaymentGateway == 3 ? Properties.Resources.Cart_has_item_s__other_than_Precidia_Gift_Card : (Settings.PaymentGateway == 5 ? Properties.Resources.Cart_has_item_s__other_than_Datacap_Gift_Card : (Settings.PaymentGateway == 7 ? Properties.Resources.Cart_has_item_s__other_than_POSLink_Gift_Card : Properties.Resources.Cart_has_item_s__other_than_Mercury_Gift_Card)), Properties.Resources.Validation, MessageBoxButton.OK, MessageBoxImage.Stop);
                    }
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }
            GeneralFunctions.SetFocus(txtSKU);
            CloseMoreFunctions();
        }
        private void btnEBTBal_Click(object sender, RoutedEventArgs e)
        {
            btnebtbalclick(sender, e);
        }
        public void btnebtbalclick(object sender, EventArgs e)
        {


            frm_POSEBTBalDlg fdlg = new frm_POSEBTBalDlg();
            try
            {
                fdlg.ShowDialog();
            }
            finally
            {

            }

            CloseMoreFunctions();
        }
        private void btnTare_Click(object sender, RoutedEventArgs e)
        {
            btnTareClick(sender, e);
        }
        /// Tare Function Button CLick Event

        public void btnTareClick(object sender, EventArgs e)
        {

            if (weightstring == "") return;

            if (!GeneralFunctions.IsValidScaleWeight_POS(weightstring, true)) return;

            frm_SCALE_Tare_Change fTare = new frm_SCALE_Tare_Change();
            try
            {
                //Todo: fTare.Title.Text = Properties.Resources.Enter_Tare_Value;
                fTare.Weight = GeneralFunctions.fnDouble(weightstring);
                fTare.bCallFromPOS = true;
                fTare.Tare = 0;
                fTare.ShowDialog();
                if (fTare.DialogResult == true)
                {
                    dblTareEntryValue = fTare.Tare;
                    blTareEntry = true;
                }
            }
            finally
            {

            }

            CloseMoreFunctions();
        }
        private async void btnFeesCoupon_Click(object sender, RoutedEventArgs e)
        {
            await btnFeesCouponClick(sender, e);
        }
        public async Task btnFeesCouponClick(object sender, EventArgs e)
        {
            if ((strCurrentServiceType == "Repair") || (strCurrentServiceType == "Rent")) return;

            if (blReturnItem) return;

            if (IsDonationRecordExistsInCart()) return;

            string str = await GetDiscountID("FeeTicket");
            if (str != "")
            {
                frm_POSCouponDlg frm_POSCouponDlg = new frm_POSCouponDlg();
                try
                {
                    frm_POSCouponDlg.POSFormN = this;
                    frm_POSCouponDlg.BrowseType = "Fees";
                    frm_POSCouponDlg.DiscountOn = "Ticket";
                    frm_POSCouponDlg.DiscData = str;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSCouponDlg.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                }
                finally
                {

                }
            }

            CloseMoreFunctions();
        }
        private void btnCheckInOut_Click(object sender, RoutedEventArgs e)
        {
            btnCheckInOutclick(sender, e);
        }
        public void btnCheckInOutclick(object sender, EventArgs e)
        {
            frm_EmpMain frm = new frm_EmpMain();
            try
            {
                frm.bcallfrompos = false;
                frm.ShowDialog();
            }
            finally
            {

            }
        }
        private void btnPointToStoreCredit_Click(object sender, RoutedEventArgs e)
        {
            btnPointToStoreCreditclick(sender, e);
        }
        public void btnPointToStoreCreditclick(object sender, EventArgs e)
        {
            if (strCurrentServiceType != "Sales") return;


            if (blReturnItem) return;

            if (!CheckFunctionButton("31z7"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }


            if (intCustID == 0)
            {
                new MessageBoxWindow().Show("Customer Required for Points to Store Credit", Properties.Resources.Points_to_Store_Credit, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtSKU);
                CloseMoreFunctions();
                return;
            }
            blurGrid.Visibility = Visibility.Visible;
            frm_POSPointConversionDlg frm = new frm_POSPointConversionDlg();
            try
            {
                frm.ID = intCustID;
                frm.ShowDialog();
                if (frm.DialogResult == true)
                {
                    if (frm.TranStoreCreditAmout > 0)
                    {
                        ApplyPointConversion(frm.TranStoreCreditAmout);
                    }
                }
            }
            finally
            {
                blurGrid.Visibility = Visibility.Collapsed;
            }

            InitializeScreen();
            txtSKU.Focus();
            CloseMoreFunctions();
        }
        private void ApplyPointConversion(double storecrdamt)
        {
            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            objpos.EmployeeID = SystemVariables.CurrentUserID;
            objpos.TransType = 51; // Point to Store Credit
            objpos.CustomerID = intCustID;
            objpos.FunctionButtonAccess = blFunctionBtnAccess;
            objpos.ChangedByAdmin = intSuperUserID;
            // static value
            objpos.StoreID = 1;
            objpos.RegisterID = 1;
            objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
            objpos.TransNoteNo = 0;
            // static value
            objpos.TerminalName = Settings.TerminalName;
            objpos.GCCentralFlag = Settings.CentralExportImport;
            objpos.GCOPStore = Settings.StoreCode;
            objpos.OperateStore = Settings.StoreCode;
            objpos.StoreCreditPointEquivalent = storecrdamt;
            objpos.BeginTransaction();
            string srterrmsg = "error";
            if (objpos.CreateInvoice())
            {
                srterrmsg = "";
            }
            objpos.EndTransaction();
        }
        private void btnLottoPayout_Click(object sender, RoutedEventArgs e)
        {
            btnLottoPayoutClick(sender, e);
        }
        public void btnLottoPayoutClick(object sender, EventArgs e)
        {
            if (strCurrentServiceType != "Sales") return;


            if (!CheckFunctionButton("31e"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (dtblPOS.Rows.Count > 0)
            {
                new MessageBoxWindow().Show("Lotto Payout can not be proceed as Transaction exists", Properties.Resources.Lotto_Payout_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }
            else
            {
                /*
                if (Settings.ReceiptPrinterName == "")
                {
                    DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.", "frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                    return;
                }*/
                bool boolPosted;
                string strDesc = "";
                int intTran = 0;
                int intINV = 0;
                double dblAmt = 0;
                blurGrid.Visibility = Visibility.Visible;
                frm_POSLottoPayoutDlg frm_POSPaidOutDlg = new frm_POSLottoPayoutDlg();
                try
                {
                    frm_POSPaidOutDlg.SuperUserID = intSuperUserID;
                    frm_POSPaidOutDlg.FunctionBtnAccess = blFunctionBtnAccess;
                    frm_POSPaidOutDlg.ShowDialog();
                }
                finally
                {
                    boolPosted = frm_POSPaidOutDlg.FinalFlag;
                    strDesc = frm_POSPaidOutDlg.PaidOutDesc;
                    intTran = frm_POSPaidOutDlg.TranNo;
                    dblAmt = frm_POSPaidOutDlg.PaidOutAmount;
                    intINV = frm_POSPaidOutDlg.InvNo;




                }

                if (boolPosted)
                {
                    if (Settings.ReceiptPrinterName != "")
                    {
                        if (IsOpenCashDrawer())
                        {
                            try
                            {
                                RawPrinterHelper.OpenCashDrawer1(Settings.ReceiptPrinterName, Settings.CashDrawerCode);
                            }
                            catch
                            {
                            }
                        }
                    }

                    frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                    try
                    {
                        frm_POSInvoicePrintDlg.InvNo = intINV;
                        frm_POSInvoicePrintDlg.PrintType = "Lotto Payout";
                        frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                        frm_POSInvoicePrintDlg.PaidOutDesc = strDesc;
                        frm_POSInvoicePrintDlg.PaidOutAmount = dblAmt;
                        frm_POSInvoicePrintDlg.PaidOutTranNo = intTran;
                        frm_POSInvoicePrintDlg.ShowDialog();
                    }
                    finally
                    {

                    }
                }

                //if (iscallfromMFV)
                //{
                //    pnlmfV.Width = 1;
                //    pnlmfV.Visible = false;
                //    if (frm_mfv != null)
                //    {
                //        frm_mfv.Close();
                //        frm_mfv.Dispose();
                //    }
                //    iscallfromMFV = false;
                //}
                //if (iscallfromMFH)
                //{
                //    pnlmfH.Height = 1;
                //    pnlmfH.Visible = false;
                //    if (frm_mfh != null)
                //    {
                //        frm_mfh.Close();
                //        frm_mfh.Dispose();
                //    }
                //    iscallfromMFH = false;
                //}

                blurGrid.Visibility = Visibility.Collapsed;
                InitializeScreen();
                GeneralFunctions.SetFocus(txtSKU);
            }
        }

        #region Quick Tendering

        private void btnC1_Click(object sender, EventArgs e)
        {

            if (dtblPOS.Rows.Count == 0)
            {
                new MessageBoxWindow().Show(Properties.Resources.Nothing_to_Tender_, Properties.Resources.Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            dblTenderQT = dblTenderQT + GeneralFunctions.fnDouble((sender as System.Windows.Controls.Button).Tag.ToString()) * intPressQty;



            if (dblTenderQT > 0)
            {
                //lbQuickTenderOutstanding.Refresh(); --Sam
                lbQuickTenderOutstanding.Visibility = Visibility.Visible;

                double qtBalance = blReturnItem ? Convert.ToDouble(numTotal.Text) + dblTenderQT : Convert.ToDouble(numTotal.Text) - dblTenderQT;

                string qtFormattedBalance = GeneralFunctions.FormatDouble(qtBalance).ToString();
                if (qtFormattedBalance.StartsWith("-"))
                {
                    qtFormattedBalance = "(" + qtFormattedBalance.Remove(0, 1) + ")";
                }
                if (blReturnItem)
                {
                    if (qtBalance < 0)
                    {
                        lbQuickTenderOutstanding.Text = "Outstanding : " + SystemVariables.CurrencySymbol + " " + qtFormattedBalance;
                    }
                    else
                    {
                        lbQuickTenderOutstanding.Text = "Outstanding : " + SystemVariables.CurrencySymbol + " " + qtFormattedBalance;
                    }

                }
                else
                {
                    if (qtBalance < 0)
                    {
                        lbQuickTenderOutstanding.Text = "Outstanding : " + SystemVariables.CurrencySymbol + " " + qtFormattedBalance;
                    }
                    else
                    {
                        lbQuickTenderOutstanding.Text = "Outstanding : " + SystemVariables.CurrencySymbol + " " + qtFormattedBalance;
                    }
                }
            }
            else
            {
                //lbQuickTenderOutstanding.Refresh(); --Sam
                lbQuickTenderOutstanding.Visibility = Visibility.Collapsed;
            }



            ResetQty();

            ProcessQuickTendering();
        }

        private void ProcessQuickTendering()
        {
            if (!CheckFunctionButton("31s"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }
            if ((intCustID == 0) && (Settings.CustomerInfo == 2))
            {
                new MessageBoxWindow().Show(Properties.Resources.Enter_Valid_Customer, "POS", MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtCust);
                return;
            }

            if (intCustID > 0)
            {
                if (!CheckActiveCustomer(intCustID))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Transaction_is_possible_for_active_customer_only, Properties.Resources.Customer_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetFocus(txtCust);
                    return;
                }
            }

            if (dtblPOS.Rows.Count == 0)
            {

            }
            else
            {
                if (strCurrentServiceType != "Repair")
                {
                    CheckStockBeforeTender();
                    if (dtblZeroStock.Rows.Count > 0)
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSOutOfStockDlg frm_POSOutOfStockDlg = new frm_POSOutOfStockDlg();
                        try
                        {
                            frm_POSOutOfStockDlg.Stock = dtblZeroStock;
                            frm_POSOutOfStockDlg.ShowDialog();
                            if (frm_POSOutOfStockDlg.DialogResult == true)
                            {
                                if (new MessageBoxWindow().Show("Are you want to remove out of stock products from the cart?", "Stock Validation", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                                {
                                    RemoveProductFromCart();
                                    EnableDisableButton(btnUP, btnDown, gridControl1);
                                    GetTotal(); /// Calculate and Display Cart Total
                                    ShowTax(); /// Calculate and Display Taxes of Cart Items
                                    ResetQty();  /// Reset Item Quantity
                                }
                            }
                        }
                        finally
                        {
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                    }
                }
            }

            if (dtblZeroStock.Rows.Count > 0)
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (dtblPOS.Rows.Count == 0)
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (CheckZeroQuantity())
            {
                if (new MessageBoxWindow().Show(Properties.Resources.Items_with_qty__0__in_the_cart__Do_you_want_to_continue_, Properties.Resources.Validation, MessageBoxButton.YesNo, MessageBoxImage.Information) == MessageBoxResult.No)
                {
                    GeneralFunctions.SetFocus(txtSKU);
                    return;
                }
            }

            int ccnt = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() == "C") ccnt++;
            }
            if (ccnt == dtblPOS.Rows.Count)
            {
                new MessageBoxWindow().Show(Properties.Resources.No_item_selected_for_tendering, Properties.Resources.Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            if (!FinalAgeVerificationOfCartBeforePosting()) return;



            if ((blRentIssued) || (blRentRecall))
            {
                if ((intCustID == 0) && (Settings.CustomerRequiredOnRent == "Y"))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Please_Select_Customer, Properties.Resources.Rent, MessageBoxButton.OK, MessageBoxImage.Information);
                    tcPOS.SelectedIndex = 1;
                    return;
                }
            }

            dblRentSecurityDeposit = 0;

            if (blRentIssued)
            {
                dblRentSecurityDeposit = GetRentSecurityDeposit();
                blurGrid.Visibility = Visibility.Visible;
                frmPOSRentDepositDlg frm_POSRentDepositDlg = new frmPOSRentDepositDlg();
                try
                {
                    frm_POSRentDepositDlg.blisnewrent = true;
                    frm_POSRentDepositDlg.RentDeposit = dblRentSecurityDeposit;
                    frm_POSRentDepositDlg.ShowDialog();
                    if (frm_POSRentDepositDlg.DialogResult == true) dblRentSecurityDeposit = frm_POSRentDepositDlg.RentDeposit; else return;
                }
                finally
                {
                    blurGrid.Visibility = Visibility.Collapsed;
                }

                if (Settings.CalculateRentLater == "Y")
                {
                    if (dblRentSecurityDeposit == 0)
                    {
                        IssueRentItem();
                        return;
                    }
                }
            }

            if (blRentRecall)
            {
                blurGrid.Visibility = Visibility.Visible;
                frmPOSRentDepositDlg frm_POSRentDepositDlg = new frmPOSRentDepositDlg();
                try
                {
                    frm_POSRentDepositDlg.blisnewrent = false;
                    frm_POSRentDepositDlg.Inv = RentReturnInv.ToString();
                    frm_POSRentDepositDlg.Deposit1 = RentReturnDeposit1;
                    frm_POSRentDepositDlg.Deposit2 = RentReturnDeposit2;
                    frm_POSRentDepositDlg.RentDeposit = RentReturnDeposit3;
                    frm_POSRentDepositDlg.ShowDialog();
                    if (frm_POSRentDepositDlg.DialogResult == true) dblRentSecurityDeposit = -frm_POSRentDepositDlg.RentDeposit;
                    else return;
                }
                finally
                {
                    blurGrid.Visibility = Visibility.Collapsed;
                }
                if (RentCalcFlag == "N")
                {
                    if (dblRentSecurityDeposit == 0)
                    {
                        ReturnRentItem();
                        return;
                    }
                }
            }

            if (blRepairIssued)
            {
                if (intCustID == 0)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Please_Select_Customer, Properties.Resources.Repair_Info_, MessageBoxButton.OK, MessageBoxImage.Information);
                    tcPOS.SelectedIndex = 1;
                    return;
                }
                if (intCustID > 0)
                {
                    blurGrid.Visibility = Visibility.Visible;
                    frmPOSRepairInfoDlg frm_POSRepairInfoDlg = new frmPOSRepairInfoDlg();
                    try
                    {
                        frm_POSRepairInfoDlg.CalledFor = "Issue";
                        frm_POSRepairInfoDlg.CustomerID = intCustID;
                        frm_POSRepairInfoDlg.RepairAmount = Convert.ToDouble(numTotal.Text);
                        frm_POSRepairInfoDlg.ID = 0;
                        frm_POSRepairInfoDlg.ShowDialog();
                        if (frm_POSRepairInfoDlg.DialogResult == true)
                        {
                            dtblRepairInfo.Rows.Clear();
                            dtblRepairInfo = frm_POSRepairInfoDlg.pdtbl;
                            //if (frm_POSRepairInfoDlg.changebrwfield) blChangeCustomerOnDelivery = true;
                        }
                        else
                        {
                            return;
                        }
                    }
                    finally
                    {
                        blurGrid.Visibility = Visibility.Collapsed;
                    }


                    /*foreach (DataRow drrp in dtblRepairInfo.Rows)
                    {
                        repairadv = GeneralFunctions.fnDouble(drrp["AdvanceAmount"].ToString());
                    }

                    if (repairadv == 0)
                    {
                        IssueRepairTransaction();
                        return;
                    }*/
                }
            }

            /*if (blRepairRecall)
            {
                //if (GetRepairItemNotDeliverCount(repairparentinv) == dtblPOS.Rows.Count) // last item delivered
                //{
                    //repairtender = repairdue;
                //}
                //else
                //{
                    frmPOSRepairTenderAmtDlg frm_POSRepairTenderAmtDlg = new frmPOSRepairTenderAmtDlg();
                    try
                    {
                        frm_POSRepairTenderAmtDlg.Inv = repairparentinv.ToString();
                        frm_POSRepairTenderAmtDlg.DueAmt = repairdue;
                        frm_POSRepairTenderAmtDlg.ShowDialog();
                        if (frm_POSRepairTenderAmtDlg.DialogResult == true) repairtender = frm_POSRepairTenderAmtDlg.TenderAmt;
                        else return;
                    }
                    finally
                    {
                        frm_POSRepairTenderAmtDlg.Dispose();
                    }
                //}

            }*/

            if (Settings.DemoVersion == "Y")
            {
                if (!ContinueWithDemoVersion())
                {
                    new MessageBoxWindow().Show(Properties.Resources.DEMO_Version_does_not_permit_more_invoices_, Properties.Resources.DEMOVERSION, MessageBoxButton.OK, MessageBoxImage.Information);
                    Settings.PriceLevelForOneTime = "N";
                    Settings.PriceLevelForThisSale = "N";
                    return;
                }
            }
            bool blclearflg = false;
            if (blWorkOrder)
            {
                if (!ValidItemForWorkOrder())
                {
                    new MessageBoxWindow().Show(Properties.Resources.Invalid_work_order_item_s__found_in_cart_, Properties.Resources.Work_Order, MessageBoxButton.OK, MessageBoxImage.Information);
                    return;
                }
            }








            blResumeTransactionQT = blResumeTransaction;
            blWorkOrderTransactionQT = blWorkOrder;
            if (blWorkOrder)
            {
                dtblWODatatblQT = FinalDataTable();
            }
            dtblApptDatatblQT = dtblAppt;

            intSuspendInvoiceNoQT = intSuspendInvNo;
            blReturnItemQT = blReturnItem;
            blExistCouponQT = blExistCoupon;
            if (strCurrentServiceType == "Sales") blSaleQT = true; else blSaleQT = false;
            strServiceTypeQT = strCurrentServiceType;
            blRentIssuedQT = blRentIssued;
            blRentRecallQT = blRentRecall;
            blRepairIssuedQT = blRepairIssued;
            blRepairRecallQT = blRepairRecall;
            dblRepairAdvanceQT = repairadv;
            dblRepairDueQT = repairdue;
            dblRepairTenderQT = repairtender;
            intIssueRepairInvNoQT = repairparentinv;

            blCustomerOrderingQT = blOpenCustomerOrder;
            intCustomerOrderNoQT = CurrentCustomerOrderID;

            dblRepairAmountQT = Convert.ToDouble(numTotal.Text);
            dtblRepairItemInfoQT = dtblRepairInfo;

            dblRentSecurityDepositQT = dblRentSecurityDeposit;
            intIssueRentInvNoQT = RentReturnInv;
            sRentCalcFlagQT = RentCalcFlag;
            blFinalFlag = false;
            intCustIDQT = intCustID;
            strTaxExemptQT = strTaxExempt;
            dblStoreCrQT = dblStoreCr;
            dblCustAcctLimitQT = dblCustAcctLimit;
            dblCustAcctBalanceQT = dblCustAcctBalance;
            dtblPOSDatatblQT = dtblPOS;
            intMaxInvNoQT = intMaxInvNo;
            intSuperUserIDQT = intSuperUserID;
            blFunctionBtnAccessQT = blFunctionBtnAccess;

            CustDTaxIDQT = CustDTaxID;
            CustDTaxNameQT = CustDTaxName;
            CustDTaxTypeQT = CustDTaxType;
            CustDTaxRateQT = CustDTaxRate;
            CustDTaxValueQT = CustDTaxValue;

            if (blRepairIssued)
            {
                double ddeposit = 0;
                foreach (DataRow dr in dtblRepairInfo.Rows)
                {
                    ddeposit = GeneralFunctions.fnDouble(dr["AdvanceAmount"].ToString());
                }
                if (ddeposit > 0)
                {
                    blRepairDepositQT = true;
                    intRepairInvoiceForDepositQT = 0;
                    dblRepairAdvanceQT = ddeposit;
                }
            }

            dtCustomerDOBQT = dtCustomerDOB;




            if ((!blNewLayawayQT) && (!blLayawayQT) && (!blLayawayRefundQT) && ((!blRentRecallQT) || (blRentRecallQT && (sRentCalcFlagQT == "Y")))) GetValue();

            if ((blNewLayawayQT) || (blLayawayQT) || (blLayawayRefundQT)) dblTotalsaleQT = GeneralFunctions.FormatDouble(dblLayawayAmtQT);


            ArrangeSettings();



            if (blReturnItemQT)
            {
                if (-numTenderQT != numTotalsaleQT)
                {
                    return;
                }
            }
            else
            {
                if (numTenderQT < numTotalsaleQT)
                {
                    return;
                }
            }

            if ((blReturnItemQT) || (blLayawayRefundQT) || (blRentRecallQT) || (dblTotalsaleQT < 0))
            {
                int gettrannofromitem = 0;
                try
                {
                    foreach (DataRow drt in dtblPOSDatatblQT.Rows)
                    {
                        gettrannofromitem = GetTranID(GeneralFunctions.fnInt32(drt["MATRIXOID"].ToString()));
                        break;
                    }
                }
                catch
                {
                }

                if (!IsEBTPayment(gettrannofromitem))
                {
                    CheckEBTPaymentQT = false;
                }

                if (!IsCardPayment1(gettrannofromitem))
                {
                    CheckCardPaymentQT = false;
                }

                if (!IsMercuryGCPayment(gettrannofromitem))
                {
                    CheckMercuryGCPaymentQT = false;
                }

            }



            if (dtblPOSDatatblQT != null)
            {
                try
                {
                    foreach (DataRow dr in dtblPOSDatatblQT.Rows)
                    {
                        if ((dr["PRODUCTTYPE"].ToString() == "X") && (dr["PRODUCT"].ToString() == (Settings.PaymentGateway == 3 ? "Issue Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Issue Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "Issue POSLink Gift Card" : "Issue Mercury Gift Card")))))
                        {
                            blMercuryGiftCardIssueQT = true;
                            dblMercuryGiftCardIssueValueQT = dblMercuryGiftCardIssueValueQT + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
                        }
                    }

                    foreach (DataRow dr in dtblPOSDatatblQT.Rows)
                    {
                        if ((dr["PRODUCTTYPE"].ToString() == "X") && (dr["PRODUCT"].ToString() == (Settings.PaymentGateway == 3 ? "Reload Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Reload Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "Reload POSLink Gift Card" : "Reload Mercury Gift Card")))))
                        {
                            blMercuryGiftCardReloadQT = true;
                            dblMercuryGiftCardReloadValueQT = dblMercuryGiftCardReloadValueQT + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
                        }
                    }
                }
                catch
                {
                }
            }



            if (Settings.ShowFoodStampTotal == "Y")
            {
                double val = 0;
                double tx = 0;
                try
                {
                    val = GetFoodStampAmount(ref tx);
                    dblFoodStampTotalQT = val;
                }
                catch
                {
                }
            }


            if ((Settings.GeneralReceiptPrint == "N") && (Settings.POSPrintInvoice != 2))
            {
                if ((blLayawayQT) || (blNewLayawayQT) || (blLayawayRefundQT))
                {
                    /*if (Settings.ReceiptPrinterName == "")
                    {
                        DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.", "frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                        return;
                    }*/
                }
                else
                {
                    /*if (Settings.ReceiptPrinterName == "")
                    {
                        DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.", "frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                        return;
                    }*/
                }
            }




            blFinalFlag = false;

            cardidentityQT = new DataTable();
            cardidentityQT.Columns.Add("CardID", System.Type.GetType("System.String"));

            mgccardidentityQT = new DataTable();
            mgccardidentityQT.Columns.Add("TranType", System.Type.GetType("System.String"));
            mgccardidentityQT.Columns.Add("CardID", System.Type.GetType("System.String"));

            dtblPrintData = new DataTable();
            dtblPrintData.Columns.Add("PrinterID", System.Type.GetType("System.String"));
            dtblPrintData.Columns.Add("Qty", System.Type.GetType("System.String"));
            dtblPrintData.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblPrintData.Columns.Add("Menu", System.Type.GetType("System.String"));
            dtblPrintData.Columns.Add("UniqueNo", System.Type.GetType("System.String"));

            dtblstrm = new DataTable();
            dtblstrm.Columns.Add("Npos", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("Cpos", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("Fpos", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("param", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("SL", System.Type.GetType("System.String"));

            dtblstrm1 = new DataTable();
            dtblstrm1.Columns.Add("Npos", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("Cpos", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("Fpos", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("param", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("SL", System.Type.GetType("System.String"));



            if ((Settings.POSCardPayment == "Y") && (blMercuryGiftCardIssueQT || blMercuryGiftCardReloadQT))
            {
                if (Settings.PaymentGateway == 1)
                {
                    if (Settings.ElementHPAccountID == "")
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Please_setup_Hosted_Payment_paramters_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }

                if (Settings.PaymentGateway == 2)
                {
                    if (Settings.MercuryHPMerchantID == "")
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Please_setup_Hosted_Payment_paramters_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);

                        return;
                    }


                }

                if (Settings.PaymentGateway == 3)
                {
                    if (Settings.PrecidiaClientMAC == "")
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Please_setup_Precidia_Client_MAC_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);

                        return;
                    }

                    if (Settings.PrecidiaPOSLynxMAC == "")
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Please_setup_Precidia_POSLynx_MAC_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);

                        return;
                    }


                }

                if (Settings.PaymentGateway == 5)
                {
                    if (Settings.DatacapServer == "")
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_server_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }

                    if (Settings.DatacapMID == "")
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_MID_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }


                if (Settings.PaymentGateway == 6) // Datacap EMV
                {
                    if (Settings.DatacapEMVServerIP == "")
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_server_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }

                    if (Settings.DatacapEMVMID == "")
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_Merchant_ID_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }

                    if (Settings.DatacapEMVSecurityDevice == "")
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_Security_Device_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }

                    if (Settings.DatacapEMVCOMPort == "")
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_Security_COM_Port_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }


                if (Settings.PaymentGateway == 7) // POSLink
                {
                    if (Settings.POSLinkCommType == "")
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Please_setup_POSLink_Communication_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }


            }




            if (blMercuryGiftCardIssueQT)
            {


                if (!IsValidMarcuryGiftCardIssue())
                {


                    new MessageBoxWindow().Show(Properties.Resources.Error___Issue_Gift_Card, Properties.Resources.Gift_Card_Issue, MessageBoxButton.OK, MessageBoxImage.Information);

                    mgccardidentityQT.Rows.Clear();
                    return;
                }
                else
                {
                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                }
            }

            if (blMercuryGiftCardReloadQT)
            {


                if (!IsValidMarcuryGiftCardReload())
                {

                    new MessageBoxWindow().Show(Properties.Resources.Error___Reload_Gift_Card, Properties.Resources.Gift_Card_Reload, MessageBoxButton.OK, MessageBoxImage.Information);
                    mgccardidentityQT.Rows.Clear();
                    return;
                }
                else
                {
                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                }
            }




            /******************* Transaction **********************/





            string srterrmsg = "";
            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            objpos.EmployeeID = SystemVariables.CurrentUserID;
            objpos.LoginUserID = SystemVariables.CurrentUserID;
            objpos.CustomerID = intCustIDQT;
            objpos.Return = blReturnItemQT;
            objpos.NewLayaway = blNewLayawayQT;
            objpos.Layaway = blLayawayQT;
            objpos.LayawayRefund = blLayawayRefundQT;
            objpos.RentReturn = blRentRecallQT;
            objpos.ServiceType = strServiceTypeQT;
            objpos.MGCIssue = blMercuryGiftCardIssueQT;
            objpos.MercuryGCIssueCardID = tempMercuryGCCardIDQT;
            objpos.CustomerOrdering = blCustomerOrderingQT;
            objpos.CustomerOrderNo = intCustomerOrderNoQT;
            if (blSaleQT)
            {
                objpos.TransType = 1; // sale
                objpos.Status = 3;
            }

            if (blWorkOrderTransactionQT)
            {
                objpos.TransType = 12; // WorkOrder Payment
                objpos.Status = 3;
                objpos.SuspendInvoiceNo = intSuspendInvoiceNoQT;
            }

            if (blResumeTransactionQT)
            {
                objpos.TransType = 3; // Resume Transaction
                objpos.Status = 3;
                objpos.SuspendInvoiceNo = intSuspendInvoiceNoQT;
            }

            if (blNewLayawayQT)
            {
                objpos.TransType = 2; // Layaway deposit
                objpos.Status = 1;
            }

            if (blLayawayQT)
            {
                objpos.TransType = 2; // Layaway Payment
                objpos.Status = 3;
            }

            if (blLayawayRefundQT)
            {
                objpos.TransType = 2; // Layaway Payment
                objpos.Status = 5;
            }

            if (blRentIssuedQT)
            {
                objpos.TransType = 15; // Rent Issue
                objpos.Status = 15;
            }

            if (blRentRecallQT)
            {
                objpos.TransType = 16; // Rent Issue
                objpos.Status = 16;
            }


            if (blRepairIssuedQT)
            {
                objpos.TransType = 17; // Repair Issue
                objpos.Status = 17;
                if (!blRepairDepositQT) objpos.RepairIssueNClosed = true;
                else objpos.RepairIssueNClosed = false;
            }

            if (blRepairRecallQT)
            {
                objpos.TransType = 18; // Repair Delivered
                objpos.Status = 18;
            }

            objpos.RentalSecurityDeposit = dblRentSecurityDepositQT;
            objpos.IssueRentInvNo = intIssueRentInvNoQT;
            objpos.IsRentCalculated = Settings.CalculateRentLater;

            DateTime rpin = Convert.ToDateTime(null);
            DateTime rpdelvy = Convert.ToDateTime(null);
            DateTime rpnotf = Convert.ToDateTime(null);
            string strrpnotes1 = "";
            string strrpnotes2 = "";
            string strrpnotes3 = "";
            string strrpritm = "";
            string strrprsl = "";
            string strrpfind = "";

            if (strServiceTypeQT == "Repair")
            {
                foreach (DataRow drrp in dtblRepairItemInfoQT.Rows)
                {
                    strrpnotes1 = drrp["ProblemDesc"].ToString();
                    strrpnotes2 = drrp["RepairDesc"].ToString();
                    strrpnotes3 = drrp["Remarks"].ToString();
                    strrpritm = drrp["ItemTag"].ToString();
                    strrprsl = drrp["ItemSL"].ToString();
                    rpin = GeneralFunctions.fnDate(drrp["DateIn"].ToString());
                    if (drrp["ExpectedDeliveryDate"].ToString() != "") rpdelvy = GeneralFunctions.fnDate(drrp["ExpectedDeliveryDate"].ToString());
                    if (drrp["NotifiedDate"].ToString() != "") rpnotf = GeneralFunctions.fnDate(drrp["NotifiedDate"].ToString());
                    strrpfind = drrp["RepairFindUs"].ToString();
                }
                objpos.RepairDepositTransaction = blRepairDepositQT;
                objpos.RepairDepositLinkID = intRepairInvoiceForDepositQT;
            }

            objpos.RepairFindUs = strrpfind;
            objpos.RepairItemName = strrpritm;
            objpos.RepairItemSL = strrprsl;
            objpos.RepairDateIn = rpin;
            objpos.RepairDeliveryDate = rpdelvy;
            objpos.RepairNotifiedDate = rpnotf;
            objpos.RepairProblem = strrpnotes1;
            objpos.RepairNotes = strrpnotes2;
            objpos.RepairRemarks = strrpnotes3;

            objpos.RepairAmount = dblRepairAmountQT;
            objpos.RepairAdvanceAmount = dblRepairAdvanceQT;

            objpos.RepairTenderAmount = dblRepairTenderQT;
            objpos.IssueRepairInvNo = intIssueRepairInvNoQT;

            objpos.ReceiptCnt = 1;

            if (!blNewLayawayQT)
            {
                if (!blRentIssuedQT) objpos.TotalSale = GeneralFunctions.FormatDouble(numTotalsaleQT);
                if (blRentIssuedQT) objpos.TotalSale = GeneralFunctions.FormatDouble(numTotalsaleQT - numRentDepositQT);
                if (blRepairRecallQT) objpos.TotalSale = GeneralFunctions.FormatDouble(numTotalsaleQT + numRepairAdvanceQT);
                objpos.Tax = GeneralFunctions.FormatDouble(numTaxQT);
                //if (blRepairIssued || blRepairRecall) objpos.Tax = GetTaxForRepair();
            }

            if (blNewLayawayQT)
            {
                objpos.Tax = 0;
                objpos.TotalSale = 0;
                objpos.LayawayDateDue = dtLayawayDateDueQT;
            }

            objpos.Discount = GeneralFunctions.FormatDouble(numDiscountQT);
            objpos.Coupon = GeneralFunctions.FormatDouble(numCouponQT);
            objpos.CouponPerc = dblCouponPercQT;
            objpos.DiscountReason = strDiscountReasonQT;

            objpos.TotalFees = dblFeesQT;
            objpos.TotalFeesTax = dblFeesTaxQT;
            objpos.TotalFeesCoupon = dblFeesCouponAmountQT;
            objpos.TotalFeesCouponTax = dblFeesCouponTaxAmountQT;

            objpos.DTaxID = CustDTaxIDQT;
            objpos.DTax = blNewLayawayQT ? CustDTaxValueQT : dblDTxQT;


            if ((blResumeTransactionQT) || (blSaleQT) || (blWorkOrderTransactionQT))
            {
                pdtblForStockUpdateQT = FinalDataTableQT();
                objpos.ItemDataTable = pdtblForStockUpdateQT;
            }
            if (blWorkOrderTransactionQT) objpos.WorkOrder1 = dtblWODatatblQT;
            if ((blLayawayQT) || (blLayawayRefundQT)) objpos.ItemDataTable = dtblLayawayPaymentQT;
            if (blLayawayQT) pdtblForStockUpdateQT = dtblLayawayPaymentQT;
            if (blNewLayawayQT)
            {
                pdtblForStockUpdateQT = FinalDataTableQT();
                objpos.ItemDataTable = GetLayawayInvoiceTableQT();
            }

            if ((blRentIssuedQT) || (blRentRecallQT))
            {
                pdtblForStockUpdateQT = FinalDataTableForRentQT();
                objpos.ItemDataTable = pdtblForStockUpdateQT;
            }

            if ((blRepairIssuedQT) || (blRepairRecallQT))
            {
                pdtblForStockUpdateQT = FinalDataTableForRepairQT();
                objpos.ItemDataTable = pdtblForStockUpdateQT;
            }

            DataTable dtblTenderQT = new DataTable();
            dtblTenderQT.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblTenderQT.Columns.Add("TENDER", System.Type.GetType("System.String"));
            dtblTenderQT.Columns.Add("DISPLAY", System.Type.GetType("System.String"));
            dtblTenderQT.Columns.Add("AMOUNT", System.Type.GetType("System.Double"));
            dtblTenderQT.Columns.Add("GIFTCERTIFICATE", System.Type.GetType("System.String"));
            dtblTenderQT.Columns.Add("NEWGC", System.Type.GetType("System.String"));
            dtblTenderQT.Columns.Add("OLDGC", System.Type.GetType("System.String"));
            dtblTenderQT.Columns.Add("OLDGCAMT", System.Type.GetType("System.String"));
            dtblTenderQT.Columns.Add("CCTRANNO", System.Type.GetType("System.String"));
            dtblTenderQT.Columns.Add("GCSTORE", System.Type.GetType("System.String"));
            dtblTenderQT.Columns.Add("MANUAL", System.Type.GetType("System.String"));
            dtblTenderQT.Columns.Add("PROCESSCARD", System.Type.GetType("System.String"));

            dtblTenderQT.Rows.Add(new object[] { CashTID.ToString(), CashTName, CashTDisplay,
                                                   GeneralFunctions.FormatDouble(dblTenderQT).ToString(), "", "", "", "0", "", "" , "N","N"});

            objpos.TenderDataTable = dtblTenderQT;
            objpos.TaxID1 = intTaxID1QT;
            objpos.TaxID2 = intTaxID2QT;
            objpos.TaxID3 = intTaxID3QT;
            objpos.Tax1 = GeneralFunctions.FormatDouble(dblTax1QT);
            objpos.Tax2 = GeneralFunctions.FormatDouble(dblTax2QT);
            objpos.Tax3 = GeneralFunctions.FormatDouble(dblTax3QT);

            objpos.ChangeAmount = dblChangeQT;
            objpos.ApptDataTable = dtblApptDatatblQT;
            objpos.ErrorMsg = "";

            // static value
            objpos.StoreID = 1;
            objpos.RegisterID = 1;
            objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
            objpos.TransNoteNo = 0;
            objpos.LayawayNo = 0;
            objpos.TransMSeconds = 0;
            // static value

            objpos.TerminalName = Settings.TerminalName;

            objpos.CardTranID = intCardTranIDQT;

            objpos.ChangedByAdmin = intSuperUserIDQT;
            objpos.FunctionButtonAccess = blFunctionBtnAccessQT;

            if (Settings.AcceptTips == "Y")
            {
                objpos.AuthorisedTranNo = AuthCode;
                objpos.SaleTranNo = "";
            }
            else
            {
                objpos.AuthorisedTranNo = "";
                objpos.SaleTranNo = AuthCode;
            }

            objpos.tblCardID = cardidentityQT;
            objpos.MercuryGiftCardDataTable = mgccardidentityQT;

            objpos.GCCentralFlag = Settings.CentralExportImport;
            objpos.GCOPStore = GCOPSTORE;

            objpos.OperateStore = Settings.StoreCode;

            objpos.CustomerDOB = dtCustomerDOBQT;

            objpos.BeginTransaction();

            if (objpos.CreateInvoice())
            {
                boolInvoiceCreated = true;
                intINVQT = objpos.ID;
                PrintOrderNo = intINVQT;
                if (blNewLayawayQT) intLAYNOQT = objpos.LayawayID;
                intLAYTRANQT = objpos.TransactionNo;
            }
            objpos.EndTransaction();
            srterrmsg = objpos.ErrorMsg;

            if (srterrmsg == "")
            {
                if (Settings.ReceiptPrinterName != "")
                {
                    if (IsOpenCashDrawer())
                    {
                        try
                        {
                            RawPrinterHelper.OpenCashDrawer1(Settings.ReceiptPrinterName, Settings.CashDrawerCode);
                        }
                        catch
                        {
                        }
                    }
                }

                if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                {
                    SecondMonitor.ClearWeightInfo();
                    if (!blReturnItemQT) SecondMonitor.FinalTenderingDisplay(numChangeDueQT);
                    else SecondMonitor.FinalTenderingDisplay(-numTotalsaleQT);
                }
                DisplayPoleText(2, "N", "N", "", Properties.Resources.Thank_You);
                //Application.DoEvents(); --Sam

                if (dtblPOSDatatblQT != null)
                {
                    printorders();
                }

                if (Settings.POSPrintInvoice != 2)
                {
                    if (((blLayawayQT) || (blNewLayawayQT) || (blLayawayRefundQT)) && (Settings.PreprintedReceipt == "N"))
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                        try
                        {
                            frm_POSInvoicePrintDlg.LayTran = intLAYTRANQT;
                            frm_POSInvoicePrintDlg.LayawayDtbl = LayawayNoForInvoicePrinting();
                            frm_POSInvoicePrintDlg.PrintType = "Layaway";
                            frm_POSInvoicePrintDlg.IsLayawayRefund = blLayawayRefundQT;
                            frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                            frm_POSInvoicePrintDlg.ShowDialog();
                        }
                        finally
                        {
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                    }
                    else
                    {
                        PrintInvoice();
                    }
                }



                if (Settings.POSDisplayChangeDue == "Y")
                {
                    blurGrid.Visibility = Visibility.Visible;
                    frmPOSShowBalanceDlg frm_POSShowBalanceDlg = new frmPOSShowBalanceDlg();
                    try
                    {
                        DisplayPoleText(2, "N", "B", Properties.Resources.Change_Due, GeneralFunctions.FormatDouble((!blReturnItem ? dblChangeQT : -dblTotalsaleQT)).ToString());
                        frm_POSShowBalanceDlg.Totalsale = GeneralFunctions.FormatDouble(dblTotalsaleQT);
                        frm_POSShowBalanceDlg.Tender = GeneralFunctions.FormatDouble((!blReturnItemQT ? dblTenderQT : 0));
                        frm_POSShowBalanceDlg.Change = GeneralFunctions.FormatDouble((!blReturnItemQT ? dblChangeQT : -dblTotalsaleQT));
                        frm_POSShowBalanceDlg.ShowDialog();
                    }
                    finally
                    {
                        blurGrid.Visibility = Visibility.Collapsed;
                        if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                        {
                            SecondMonitor.ClearWeightInfo();
                            SecondMonitor.ClearTenderingDisplay();
                        }

                        blFinalFlag = true;
                    }
                }
                else
                {
                    blFinalFlag = true;
                }
            }
            else
            {
                GeneralFunctions.SetTransactionLog("Invoice generation fail", srterrmsg);
            }

            if (blFinalFlag)
            {
                blInitAutoSignOut = true;
                blInitAutoSignOutAfterTender = true;
                InitializeScreen();
            }
            else
            {
                int fval = gridView1.FocusedRowHandle;
            }
            GeneralFunctions.SetFocus(txtSKU);
        }


        private DataTable LayawayNoForInvoicePrinting()
        {
            dtblLayawayForInvoiceQT = new DataTable();
            dtblLayawayForInvoiceQT.Columns.Add("LAYAWAYNO", System.Type.GetType("System.String"));
            if (blNewLayawayQT)
            {
                dtblLayawayForInvoiceQT.Rows.Add(new object[] {
                                        intLAYNOQT.ToString() });
            }
            else
            {
                foreach (DataRow dr in dtblLayawayPaymentQT.Rows)
                {
                    dtblLayawayForInvoiceQT.Rows.Add(new object[] {
                                        dr["LayawayNo"].ToString() });
                }
            }

            return dtblLayawayForInvoiceQT;
        }



        private void GetValue()
        {
            FeesCouponCalculationQT(dtblPOSDatatblQT, ref dblFeesCouponAmountQT, ref dblFeesCouponTaxAmountQT);
            CouponCalculationQT(dtblPOSDatatblQT, ref dblCouponQT, ref dblCouponPercQT, ref dblCouponApplicableTotalQT);
            SpecialMixnMatchCalculationQT(dtblPOSDatatblQT, ref dblSpecialMixnMatchQT);
            double dblST = 0;
            double dblTX = 0;
            double dblDTax = 0;
            double dblTXR = 0;
            double dblITEMDISC = 0;
            double rate = 0;
            double qty = 0;
            double renttime = 1;
            double dblFC = 0;
            double dblFCTx = 0;
            string strFQty = "N";
            foreach (DataRow drc in dtblPOSDatatblQT.Rows)
            {
                bl100percinvdiscount = false;
                if (drc["PRODUCTTYPE"].ToString() != "C") continue;
                if (drc["PRODUCTTYPE"].ToString() != "H") continue;
                if (drc["PRODUCTTYPE"].ToString() == "Z") continue;
                if ((drc["DISCLOGIC"].ToString() == "P") && (GeneralFunctions.fnDouble(drc["DISCVALUE"].ToString()) == 100))
                {
                    bl100percinvdiscount = true;
                    break;
                }
            }

            foreach (DataRow dr in dtblPOSDatatblQT.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() == "C") continue;
                if (dr["PRODUCTTYPE"].ToString() == "H") continue;
                if (dr["PRODUCTTYPE"].ToString() == "Z") continue;
                if (dr["RATE"].ToString() == "") rate = 0; else rate = GeneralFunctions.fnDouble(dr["RATE"].ToString());
                if (dr["QTY"].ToString() == "") qty = 1; else qty = GeneralFunctions.fnDouble(dr["QTY"].ToString());
                if ((dr["RENTDURATION"].ToString() == "") || (dr["RENTDURATION"].ToString() == "0"))
                {
                    if ((blRentIssuedQT) && (Settings.CalculateRentLater == "Y")) renttime = 0;
                    else renttime = 1;
                }
                else renttime = GeneralFunctions.fnDouble(dr["RENTDURATION"].ToString());

                if (dr["PRODUCTTYPE"].ToString() != "O")
                {
                    dblST = GeneralFunctions.FormatDouble(dblST + rate * qty * renttime);
                }
                else
                {
                    dblST = GeneralFunctions.FormatDouble(dblST + GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                    blBottleRefundQT = true;
                }

                strFQty = dr["FEESQTY"].ToString();

                if (strFQty == "Y")
                {
                    if (!blReturnItemQT)
                    {
                        dblFC = GeneralFunctions.FormatDouble(dblFC + GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEES"].ToString())));
                        dblFCTx = GeneralFunctions.FormatDouble(dblFCTx + GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEESTAX"].ToString())));
                    }
                    else
                    {
                        dblFC = GeneralFunctions.FormatDouble(dblFC + GeneralFunctions.FormatDouble(-qty * GeneralFunctions.fnDouble(dr["FEES"].ToString())));
                        dblFCTx = GeneralFunctions.FormatDouble(dblFCTx + GeneralFunctions.FormatDouble(-qty * GeneralFunctions.fnDouble(dr["FEESTAX"].ToString())));
                    }
                }

                if (strFQty == "N")
                {
                    if (!blReturnItemQT)
                    {
                        dblFC = GeneralFunctions.FormatDouble(dblFC + GeneralFunctions.fnDouble(dr["FEES"].ToString()));
                        dblFCTx = GeneralFunctions.FormatDouble(dblFCTx + GeneralFunctions.fnDouble(dr["FEESTAX"].ToString()));
                    }
                    else
                    {
                        dblFC = GeneralFunctions.FormatDouble(dblFC - GeneralFunctions.fnDouble(dr["FEES"].ToString()));
                        dblFCTx = GeneralFunctions.FormatDouble(dblFCTx - GeneralFunctions.fnDouble(dr["FEESTAX"].ToString()));
                    }
                }

                if ((dr["PRODUCTTYPE"].ToString() != "G") && (dr["PRODUCTTYPE"].ToString() != "A") && (dr["PRODUCTTYPE"].ToString() != "C")
                    && (dr["PRODUCTTYPE"].ToString() != "Z") && (dr["PRODUCTTYPE"].ToString() != "H")
                    && (dr["PRODUCTTYPE"].ToString() != "X") && (dr["PRODUCTTYPE"].ToString() != "O"))
                {
                    if (strTaxExemptQT == "N")
                    {
                        if (!bl100percinvdiscount)
                        {
                            if (dr["PRODUCTTYPE"].ToString() != "B")
                            {
                                dblTX = dblTX + GetTaxRate(GeneralFunctions.fnInt32(dr["ID"].ToString()), Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) * ((100 - dblCouponPerc) / 100);

                                if (strServiceTypeQT == "Sales")
                                {
                                    if (CustDTaxIDQT > 0)
                                    {
                                        double tempDTax = 0;
                                        tempDTax = GetDTaxAmount(CustDTaxID, CustDTaxRate, CustDTaxType, GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                                        dblDTax = dblDTax + tempDTax;
                                        dblTX = dblTX + tempDTax;
                                    }
                                }
                            }
                            else
                            {
                                dblTXR = 0;

                                if (dr["TAXABLE1"].ToString() == "Y")
                                {

                                    double txtemp = 0;
                                    if (Settings.TaxInclusive == "N")
                                    {
                                        txtemp = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                    }
                                    else
                                    {
                                        //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                        double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString())) / 100);
                                        txtemp = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);
                                    }


                                    dblTXR = dblTXR + GeneralFunctions.FormatDouble(txtemp) * ((100 - dblCouponPerc) / 100);

                                    //dblTXR = dblTXR + GeneralFunctions.FormatDouble((GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100) * ((100 - dblCouponPerc) / 100);
                                }

                                if (dr["TAXABLE2"].ToString() == "Y")
                                {
                                    double txtemp = 0;
                                    if (Settings.TaxInclusive == "N")
                                    {
                                        txtemp = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                    }
                                    else
                                    {
                                        //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                        double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString())) / 100);
                                        txtemp = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);
                                    }


                                    dblTXR = dblTXR + GeneralFunctions.FormatDouble(txtemp) * ((100 - dblCouponPerc) / 100);
                                }
                                if (dr["TAXABLE3"].ToString() == "Y")
                                {
                                    double txtemp = 0;
                                    if (Settings.TaxInclusive == "N")
                                    {
                                        txtemp = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                    }
                                    else
                                    {
                                        //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                        double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString())) / 100);
                                        txtemp = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);
                                    }


                                    dblTXR = dblTXR + GeneralFunctions.FormatDouble(txtemp) * ((100 - dblCouponPerc) / 100);
                                }


                                /*

                                if (dr["TAXABLE1"].ToString() == "Y") dblTXR = dblTXR + GeneralFunctions.FormatDouble((GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100) * ((100 - dblCouponPerc) / 100);
                                if (dr["TAXABLE2"].ToString() == "Y") dblTXR = dblTXR + GeneralFunctions.FormatDouble((GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100) * ((100 - dblCouponPerc) / 100);
                                if (dr["TAXABLE3"].ToString() == "Y") dblTXR = dblTXR + GeneralFunctions.FormatDouble((GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100) * ((100 - dblCouponPerc) / 100);

                                 */

                                dblTX = dblTX + dblTXR;

                                if (strServiceTypeQT == "Sales")
                                {
                                    if (CustDTaxIDQT > 0)
                                    {
                                        double tempDTax = 0;
                                        tempDTax = GetDTaxAmount(CustDTaxID, CustDTaxRate, CustDTaxType, GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                                        dblDTax = dblDTax + tempDTax;
                                        dblTX = dblTX + tempDTax;
                                    }
                                }
                            }

                        }

                    }
                    dblITEMDISC = GeneralFunctions.FormatDouble(dblITEMDISC + GeneralFunctions.fnDouble(dr["DISCOUNT"].ToString()));
                }
            }




            dblSubtotalQT = dblST;
            dblDiscountQT = dblITEMDISC;
            dblTaxQT = dblTX;
            dblFeesQT = dblFC;
            dblFeesTaxQT = dblFCTx;
            dblDTxQT = dblDTax;
        }

        private void ArrangeSettings()
        {
            dblBalanceQT = 0;
            //dblTenderQT = 0;
            dblChangeQT = 0;

            if ((!blNewLayawayQT) && (!blLayawayQT) && (!blLayawayRefundQT) && (!blRentRecallQT))
            {
                numRepairAdvanceQT = GeneralFunctions.FormatDouble(dblRepairAdvanceQT);

                if (!blRepairDepositQT)
                {
                    ShowTaxQT();
                    numTaxQT = GeneralFunctions.FormatDouble(dblTaxQT);


                    numRentDepositQT = GeneralFunctions.FormatDouble(dblRentSecurityDepositQT);
                    numSubtotalQT = GeneralFunctions.FormatDouble(dblSubtotalQT);
                    numDiscountQT = GeneralFunctions.FormatDouble(dblDiscountQT);
                    if (Settings.TaxInclusive == "N")
                    {
                        dblNewSubtotalQT = GeneralFunctions.FormatDouble(numSubtotalQT - numDiscountQT);
                    }
                    else
                    {
                        dblNewSubtotalQT = GeneralFunctions.FormatDouble(numSubtotalQT);
                    }
                    numNewSubtotalQT = GeneralFunctions.FormatDouble(dblNewSubtotalQT);
                    numFeeQT = GeneralFunctions.FormatDouble(dblFeesQT + dblFeesCouponAmountQT);
                    numFeeTaxQT = GeneralFunctions.FormatDouble(dblFeesTaxQT + dblFeesCouponTaxAmountQT);
                    numCouponQT = GeneralFunctions.FormatDouble(dblCouponQT + dblSpecialMixnMatchQT);

                    dblTotalsaleQT = GeneralFunctions.FormatDouble(numNewSubtotalQT + numFeeQT + numFeeTaxQT + numTaxQT + numRentDepositQT - numRepairAdvanceQT - numCouponQT + dblBottleRefundQT);

                    /*
                    if (Settings.TaxInclusive == "N")
                    {
                        dblTotalsaleQT = GeneralFunctions.FormatDouble(numNewSubtotalQT + numFeeQT + numFeeTaxQT + numTaxQT + numRentDepositQT - numRepairAdvanceQT - numCouponQT + dblBottleRefundQT);
                    }
                    else
                    {
                        dblTotalsaleQT = GeneralFunctions.FormatDouble(numNewSubtotalQT + numFeeQT + numFeeTaxQT + numRentDepositQT - numRepairAdvanceQT - numCouponQT + dblBottleRefundQT);
                    }*/
                }
                else
                {
                    dblTotalsaleQT = numRepairAdvanceQT;
                }
            }
            if ((blNewLayawayQT) || (blLayawayQT) || (blLayawayRefundQT))
            {
                dblTaxQT = 0;
                numTaxQT = GeneralFunctions.FormatDouble(dblTaxQT);

                dblSubtotalQT = GeneralFunctions.FormatDouble(dblLayawayAmtQT);
                numSubtotalQT = GeneralFunctions.FormatDouble(dblSubtotalQT);
                numDiscountQT = GeneralFunctions.FormatDouble(dblDiscountQT);
                if (Settings.TaxInclusive == "N")
                {
                    dblNewSubtotalQT = GeneralFunctions.FormatDouble(numSubtotalQT - numDiscountQT);
                }
                else
                {
                    dblNewSubtotalQT = GeneralFunctions.FormatDouble(numSubtotalQT);
                }
                numNewSubtotalQT = GeneralFunctions.FormatDouble(dblNewSubtotalQT);
                numFeeQT = GeneralFunctions.FormatDouble(dblFeesQT + dblFeesCouponAmountQT);
                numFeeTaxQT = GeneralFunctions.FormatDouble(dblFeesTaxQT + dblFeesCouponTaxAmountQT);
                numCouponQT = GeneralFunctions.FormatDouble(dblCouponQT + dblSpecialMixnMatchQT);

                dblTotalsaleQT = GeneralFunctions.FormatDouble(numNewSubtotalQT + numFeeQT + numFeeTaxQT + numTaxQT - numCouponQT + dblBottleRefundQT);

                /*
                if (Settings.TaxInclusive == "N")
                {
                    dblTotalsaleQT = GeneralFunctions.FormatDouble(numNewSubtotalQT + numFeeQT + numFeeTaxQT + numTaxQT - numCouponQT + dblBottleRefundQT);
                }
                else
                {
                    dblTotalsaleQT = GeneralFunctions.FormatDouble(numNewSubtotalQT + numFeeQT + numFeeTaxQT  - numCouponQT + dblBottleRefundQT);
                }*/
            }

            if (blRentRecallQT)
            {
                if (sRentCalcFlagQT == "N") dblTotalsaleQT = GeneralFunctions.FormatDouble(dblRentSecurityDepositQT);

                if (sRentCalcFlagQT == "Y")
                {
                    ShowTaxQT();
                    numTaxQT = GeneralFunctions.FormatDouble(dblTaxQT);



                    numRentDepositQT = GeneralFunctions.FormatDouble(-dblRentSecurityDeposit);
                    numSubtotalQT = GeneralFunctions.FormatDouble(dblSubtotalQT);
                    numDiscountQT = GeneralFunctions.FormatDouble(dblDiscountQT);
                    if (Settings.TaxInclusive == "N")
                    {
                        dblNewSubtotalQT = GeneralFunctions.FormatDouble(numSubtotalQT - numDiscountQT);
                    }
                    else
                    {
                        dblNewSubtotalQT = GeneralFunctions.FormatDouble(numSubtotalQT);
                    }
                    numNewSubtotalQT = GeneralFunctions.FormatDouble(dblNewSubtotalQT);
                    numFeeQT = GeneralFunctions.FormatDouble(dblFeesQT + dblFeesCouponAmountQT);
                    numFeeTaxQT = GeneralFunctions.FormatDouble(dblFeesTaxQT + dblFeesCouponTaxAmountQT);
                    numCouponQT = GeneralFunctions.FormatDouble(dblCouponQT + dblSpecialMixnMatchQT);



                    dblTotalsaleQT = GeneralFunctions.FormatDouble(numNewSubtotalQT + numFeeQT + numFeeTaxQT + numTaxQT - numCouponQT + dblRentSecurityDepositQT + dblBottleRefundQT);

                    /*
                    if (Settings.TaxInclusive == "N")
                    {
                        dblTotalsaleQT = GeneralFunctions.FormatDouble(numNewSubtotalQT + numFeeQT + numFeeTaxQT + numTaxQT - numCouponQT + dblRentSecurityDepositQT + dblBottleRefundQT);
                    }
                    else
                    {
                        dblTotalsaleQT = GeneralFunctions.FormatDouble(numNewSubtotalQT + numFeeQT + numFeeTaxQT - numCouponQT + dblRentSecurityDepositQT + dblBottleRefundQT);
                    }*/
                }
            }

            //if (blRepairRecall) dblTotalsale = GeneralFunctions.FormatDouble(dblRepairTender); 

            numTotalsaleQT = GeneralFunctions.FormatDouble(dblTotalsaleQT);
            numTenderQT = GeneralFunctions.FormatDouble(dblTenderQT);

            if (GeneralFunctions.FormatDouble(numTotalsaleQT - numTenderQT) >= 0)
            {
                dblBalanceQT = GeneralFunctions.FormatDouble(numTotalsaleQT - numTenderQT);
            }
            else
            {
                if ((blReturnItemQT) || (blLayawayRefundQT) || (blRentRecallQT && (sRentCalcFlagQT == "N")) || (dblTotalsaleQT < 0)) dblBalanceQT = GeneralFunctions.FormatDouble(numTotalsaleQT - numTenderQT);
                else dblBalanceQT = 0;
            }

            numBalanceDueQT = GeneralFunctions.FormatDouble(dblBalanceQT);

            if (GeneralFunctions.FormatDouble(numTenderQT - numTotalsaleQT) >= 0)
            {
                dblChangeQT = GeneralFunctions.FormatDouble(numTenderQT - numTotalsaleQT);
            }
            else
            {
                dblChangeQT = 0;
            }

            numChangeDueQT = GeneralFunctions.FormatDouble(dblChangeQT);


            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                SecondMonitor.ClearWeightInfo();
                SecondMonitor.InsertTender(dtblTenderQT, numTenderQT, numBalanceDueQT, numChangeDueQT);
            }
        }



        private void ShowTaxQT()
        {

            if (strTaxExemptQT == "N")
            {
                DataTable dtblTax = new DataTable();
                DataTable dtblTax1 = new DataTable();
                dtblTax.Columns.Add("TAXID", System.Type.GetType("System.String"));
                dtblTax.Columns.Add("Tax", System.Type.GetType("System.String"));
                dtblTax.Columns.Add("Amount", System.Type.GetType("System.Double"));
                dtblTax.Columns.Add("DTax", System.Type.GetType("System.String"));

                double dblChangeTax = 0;
                double dblDiscountSum = 0;
                int intCountRow = dtblPOSDatatblQT.Rows.Count;
                int intCountCRow = dtblPOSDatatblQT.Rows.Count;

                foreach (DataRow dr in dtblPOSDatatblQT.Rows)
                {
                    intCountCRow++;
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                        || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "X")
                        || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                        || (dr["PRODUCTTYPE"].ToString() == "H")) continue;


                    int intPID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                    double dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? dr["PRICE"].ToString() : dr["GPRICE"].ToString()));
                    if (intCountCRow != intCountRow)
                    {
                        dblPrice = GeneralFunctions.FormatDouble(dblPrice - (dblPrice * dblDiscountPercentQT / 100));
                        dblDiscountSum = GeneralFunctions.FormatDouble(dblDiscountSum + (dblPrice * dblDiscountPercentQT / 100));
                    }
                    else
                    {
                        dblPrice = GeneralFunctions.FormatDouble(dblDiscountQT - dblDiscountSum);
                    }

                    double dblQty = 0;

                    if (dr["QTY"].ToString() == "")
                    {
                        dblQty = 1;
                    }
                    else
                    {
                        dblQty = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["QTY"].ToString()));
                    }

                    /*if (GetFStamp(intPID) == "Y")
                    {
                        if (IsFSTenderApplicable()) continue;
                    }*/

                    double dblTaxR = 0;
                    PosDataObject.Product objTax = new PosDataObject.Product();
                    objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    if ((dr["PRODUCTTYPE"].ToString() != "B") && (dr["EDITF"].ToString() == "N"))
                    {
                        if ((strServiceTypeQT == "Sales") || (strServiceTypeQT == "Repair")) dtblTax1 = objTax.ShowActiveTaxes(intPID);
                        if (strServiceTypeQT == "Rent") dtblTax1 = objTax.ShowActiveRentTaxes(intPID);
                        //if (strServiceType == "Repair") dtblTax1 = objTax.ShowActiveRepairTaxes(intPID);
                    }
                    else
                    {
                        DataTable dtblTemp = new DataTable();
                        dtblTemp.Columns.Add("ID", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxID", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxType", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxName", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxRate", System.Type.GetType("System.String"));

                        double dblRate = 0.00;
                        string strTaxName = "";

                        if (dr["TAXABLE1"].ToString() == "Y")
                        {
                            if (dr["TAXRATE1"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString());
                            }
                            if (dr["TAXNAME1"].ToString() != "")
                            {
                                if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME1"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = dr["TAXNAME1"].ToString() + " (" + dblRate.ToString("f") + "%)";
                            }
                            else
                            {
                                string txnm = GetTaxName(GeneralFunctions.fnInt32(dr["TAXID1"].ToString()));
                                if (Settings.DecimalPlace == 3) strTaxName = txnm + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = txnm + " (" + dblRate.ToString("f") + "%)";
                            }

                            dtblTemp.Rows.Add(new object[] {
                                                "1",
                                                dr["TAXID1"].ToString(),
                                                dr["TX1TYPE"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE1"].ToString()});
                        }

                        if (dr["TAXABLE2"].ToString() == "Y")
                        {
                            if (dr["TAXRATE2"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString());
                            }

                            if (dr["TAXNAME2"].ToString() != "")
                            {
                                if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME2"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = dr["TAXNAME2"].ToString() + " (" + dblRate.ToString("f") + "%)";
                            }
                            else
                            {
                                string txnm = GetTaxName(GeneralFunctions.fnInt32(dr["TAXID2"].ToString()));
                                if (Settings.DecimalPlace == 3) strTaxName = txnm + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = txnm + " (" + dblRate.ToString("f") + "%)";
                            }

                            dtblTemp.Rows.Add(new object[] {
                                                "2",
                                                dr["TAXID2"].ToString(),
                                                dr["TX2TYPE"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE2"].ToString()});
                        }

                        if (dr["TAXABLE3"].ToString() == "Y")
                        {
                            if (dr["TAXRATE3"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString());
                            }

                            if (dr["TAXNAME3"].ToString() != "")
                            {
                                if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME3"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = dr["TAXNAME3"].ToString() + " (" + dblRate.ToString("f") + "%)";
                            }
                            else
                            {
                                string txnm = GetTaxName(GeneralFunctions.fnInt32(dr["TAXID3"].ToString()));
                                if (Settings.DecimalPlace == 3) strTaxName = txnm + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = txnm + " (" + dblRate.ToString("f") + "%)";
                            }

                            dtblTemp.Rows.Add(new object[] {
                                                "3",
                                                dr["TAXID3"].ToString(),
                                                dr["TX3TYPE"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE3"].ToString()});
                        }
                        dtblTax1 = dtblTemp;
                        dtblTemp.Dispose();
                    }


                    DataTable dtblF = new DataTable();

                    dtblF.Columns.Add("ID", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxID", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxType", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxName", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxRate", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("DTax", System.Type.GetType("System.String"));




                    foreach (DataRow drt in dtblTax1.Rows)
                    {
                        dtblF.Rows.Add(new object[] { drt["ID"].ToString(),drt["TaxID"].ToString(),drt["TaxType"].ToString(),
                                                      drt["TaxName"].ToString(),drt["TaxRate"].ToString(),"N" });
                    }

                    if (strServiceTypeQT == "Sales")
                    {
                        if (CustDTaxIDQT > 0)
                        {
                            dtblF.Rows.Add(new object[] { "4",CustDTaxIDQT.ToString(),CustDTaxTypeQT.ToString(),
                                                      CustDTaxNameQT.ToString(),CustDTaxRateQT.ToString(),"Y" });
                        }
                    }


                    foreach (DataRow drt in dtblF.Rows)
                    {
                        if (bl100percinvdiscount) continue;
                        bool blfinddata = false;
                        foreach (DataRow dr1 in dtblTax.Rows)
                        {
                            if ((dr1["TAXID"].ToString() == drt["TAXID"].ToString()) && (dr1["DTax"].ToString() == drt["DTax"].ToString()))
                            {
                                double tx = 0;
                                if (drt["TaxType"].ToString() == "0")
                                {
                                    //tx = GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100;

                                    if (Settings.TaxInclusive == "N")
                                    {
                                        tx = (GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice) / 100;
                                    }
                                    else
                                    {
                                        //dblPrice = GeneralFunctions.FormatDouble(dblPrice / dblQty);

                                        double tempApplicableAmount = dblPrice / ((100 + GeneralFunctions.fnDouble(drt["TaxRate"].ToString())) / 100);
                                        tx = GeneralFunctions.FormatDouble(dblPrice - tempApplicableAmount);
                                    }

                                }
                                else
                                {
                                    tx = GeneralFunctions.GetTaxFromTaxTable(GeneralFunctions.fnInt32(drt["TaxID"].ToString()), GeneralFunctions.fnDouble(drt["TaxRate"].ToString()), dblPrice);
                                }
                                dblChangeTax = dblChangeTax + GeneralFunctions.fnDouble(tx * ((100 - dblCouponPercQT) / 100));
                                double prevtax = GeneralFunctions.fnDouble(dr1["Amount"].ToString());
                                double dblRate = tx * ((100 - dblCouponPercQT) / 100);
                                dr1["Amount"] = Convert.ToString(prevtax + dblRate);
                                blfinddata = true;
                                break;
                            }
                        }
                        if (!blfinddata)
                        {
                            double tx = 0;
                            if (drt["TaxType"].ToString() == "0")
                            {
                                //tx = GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100;

                                if (Settings.TaxInclusive == "N")
                                {
                                    tx = (GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice) / 100;
                                }
                                else
                                {
                                    //dblPrice = GeneralFunctions.FormatDouble(dblPrice / dblQty);
                                    double tempApplicableAmount = dblPrice / ((100 + GeneralFunctions.fnDouble(drt["TaxRate"].ToString())) / 100);
                                    tx = GeneralFunctions.FormatDouble(dblPrice - tempApplicableAmount);
                                }
                            }
                            else
                            {
                                tx = GeneralFunctions.GetTaxFromTaxTable(GeneralFunctions.fnInt32(drt["TaxID"].ToString()), GeneralFunctions.fnDouble(drt["TaxRate"].ToString()), dblPrice);
                            }

                            dtblTax.Rows.Add(new object[] { drt["TAXID"].ToString(), drt["TaxName"].ToString(), GeneralFunctions.fnDouble(tx * (100 - dblCouponPercQT) / 100),
                                                            drt["DTax"].ToString()});
                            dblChangeTax = dblChangeTax + (tx * ((100 - dblCouponPercQT) / 100));
                        }
                    }
                }
                dtblTax.DefaultView.Sort = "DTax asc";
                dtblTax.DefaultView.ApplyDefaultSort = true;

                grdTaxQT.ItemsSource = dtblTax;
                dtblTax1.Dispose();
                dtblTax.Dispose();
                dblTaxQT = dblChangeTax;


                /* Adjust decimal */

                double tgrdval = 0;

                foreach (DataRow dr in (grdTax.ItemsSource as DataTable).Rows)
                {
                    tgrdval = tgrdval + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["Amount"].ToString()));
                }

                if (tgrdval != GeneralFunctions.FormatDouble(dblTaxQT))
                {
                    double divval = GeneralFunctions.FormatDouble(dblTaxQT) - tgrdval;

                    DataTable dtb = grdTax.ItemsSource as DataTable;
                    int cnt = dtb.Rows.Count;
                    int i = 0;

                    foreach (DataRow dr in dtb.Rows)
                    {
                        i++;
                        if (i == cnt)
                        {
                            dr["Amount"] = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["Amount"].ToString())) + divval;
                        }
                    }

                    grdTax.DataSource = dtb;

                    dtb.Dispose();
                }
            }
        }

        // Mix and Match Calculation

        private void SpecialMixnMatchCalculationQT(DataTable dtbl, ref double resultAmount)
        {

            double dpp = 0;
            double dAA = 0;
            double dp = 0;
            double dA = 0;
            double retamt = 0;
            resultAmount = 0;
            double AppAmount = 0;
            foreach (DataRow dr in dtbl.Rows)
            {
                dp = 0;
                dA = 0;
                AppAmount = 0;
                if (dr["PRODUCTTYPE"].ToString() != "Z") continue;

                if (dr["DISCLOGIC"].ToString() == "P") dp = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());
                if (dr["DISCLOGIC"].ToString() == "A") dA = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());

                AppAmount = GeneralFunctions.fnDouble(dr["DTXRATE"].ToString());

                if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                {
                    retamt = (AppAmount * dp / 100) + dA;
                    dAA = dAA + dA;
                    dpp = dpp + dp;
                }
                resultAmount = resultAmount + retamt;
            }

        }


        private void CouponCalculationQT(DataTable dtbl, ref double resultAmount, ref double resultPerc, ref double TotAmount)
        {
            foreach (DataRow dr in dtblPOSDatatblQT.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if ((dr["BUYNGETFREECATEGORY"].ToString() == "B") || (dr["BUYNGETFREECATEGORY"].ToString() == "F")) continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                TotAmount = TotAmount + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            double dpp = 0;
            double dAA = 0;
            double dp = 0;
            double dA = 0;
            double retamt = 0;
            resultAmount = 0;
            double AppAmount = 0;
            foreach (DataRow dr in dtbl.Rows)
            {
                dp = 0;
                dA = 0;
                AppAmount = 0;
                if (dr["PRODUCTTYPE"].ToString() != "C") continue;

                if (dr["DISCLOGIC"].ToString() == "P") dp = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());
                if (dr["DISCLOGIC"].ToString() == "A") dA = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());

                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;

                if (CheckIfRestrictedItem(GeneralFunctions.fnInt32(dr["ID"].ToString())))
                {
                    // discount calculation on restricted items
                    AppAmount = RestrictItemApplicableAmountQT(GeneralFunctions.fnInt32(dr["ID"].ToString()));

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    resultAmount = resultAmount + retamt;
                }
                else
                {
                    // discount calculation on all items

                    AppAmount = AllItemApplicableAmountQT();

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    resultAmount = resultAmount + retamt;
                }
            }

            if (TotAmount != 0) resultPerc = dpp + GeneralFunctions.fnDouble(dAA * 100 / TotAmount);
        }


        private double RestrictItemApplicableAmountQT(int DID)
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOSDatatblQT.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["DISCOUNTID"].ToString() != "0") continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                string chr = "N";
                PosDataObject.POS objp = new PosDataObject.POS();
                objp.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objp.IsApplicableForRestrictedDiscount(GeneralFunctions.fnInt32(dr["ID"].ToString()), DID, ref chr);
                if (chr == "Y") ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }


        /// get all discount applicable to the item

        private double AllItemApplicableAmountQT()
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOSDatatblQT.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["DISCOUNTID"].ToString() != "0") continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }

        private void FeesCouponCalculationQT(DataTable dtbl, ref double resultAmount, ref double TxAmount)
        {
            foreach (DataRow dr in dtblPOSDatatblQT.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() != "H") continue;
                resultAmount = resultAmount + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEES"].ToString()));
                TxAmount = TxAmount + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEESTAX"].ToString()));
            }

        }

        // Get Food Stamp Amount (from the transaction details)

        private double GetFoodStampAmount(ref double fstx)
        {
            double pr = 0;
            foreach (DataRow dr in dtblPOSDatatblQT.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (GetFStamp(GeneralFunctions.fnInt32(dr["ID"].ToString())) != "Y") continue;

                double rate = 0;
                double qty = 1;
                // if (dr["RATE"].ToString() == "") rate = 0; else rate = GeneralFunctions.fnDouble(dr["RATE"].ToString());
                //if (dr["QTY"].ToString() == "") qty = 1; else qty = GeneralFunctions.fnDouble(dr["QTY"].ToString());

                pr = pr + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["PRICE"].ToString()));

                fstx = fstx + GeneralFunctions.fnDouble(dr["TX1"].ToString()) +
                    GeneralFunctions.fnDouble(dr["TX2"].ToString()) + GeneralFunctions.fnDouble(dr["TX3"].ToString());
            }

            foreach (DataRow dr1 in dtblPOSDatatblQT.Rows)
            {
                if (dr1["FEESID"].ToString() == "0") continue;
                if (IsFoodStampableFees(GeneralFunctions.fnInt32(dr1["FEESID"].ToString())))
                {
                    if (IsApplyToQtyFees(GeneralFunctions.fnInt32(dr1["FEESID"].ToString())))
                    {
                        pr = pr + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr1["QTY"].ToString()) * (GeneralFunctions.fnDouble(dr1["FEES"].ToString()) + GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString())));
                    }
                    else
                    {
                        pr = pr + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr1["FEES"].ToString()) + GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString()));
                    }
                }
            }

            double cpnAmount = 0;
            double cpnPerc = 0;
            double cpnTotal = 0;

            CouponCalculation_FoodStamp(dtblPOSDatatblQT, ref cpnAmount, ref cpnPerc, ref cpnTotal);
            pr = pr - cpnAmount;

            return pr;
        }


        private bool IsEBTPayment(int prm)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;
            return objp.IsEBTPayment(prm);
        }

        private bool IsCardPayment1(int prm)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;
            return objp.IsCardPayment2(prm);
        }

        private bool IsMercuryGCPayment(int prm)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;
            return objp.IsCardPayment4(prm);
        }


        private int GetTranID(int prm)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;
            return objp.GetTranID1(prm);
        }

        // Get Cash Tender Details 

        private void GetCashTenderTypeData()
        {
            PosDataObject.TenderTypes tnd = new PosDataObject.TenderTypes();
            tnd.Connection = SystemVariables.Conn;
            tnd.GetCashRecord(ref CashTID, ref CashTName, ref CashTDisplay);
        }

        private DataTable FinalDataTableQT()
        {
            DataTable dtblFinal = new DataTable();
            dtblFinal.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ONHANDQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NORMALQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("COST", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("QTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("RATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DEPT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("CAT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMDESC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMID", System.Type.GetType("System.String"));
            // add for Layaway Invoice

            dtblFinal.Columns.Add("TAX1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TOTALSALE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTREASON", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("LAYAWAYAMOUNT", System.Type.GetType("System.String"));

            // add for invoice notes
            dtblFinal.Columns.Add("NOTES", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMDISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("RENTTYPE", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("RENTDURATION", System.Type.GetType("System.Double"));//35
            dtblFinal.Columns.Add("RENTAMOUNT", System.Type.GetType("System.Double"));//36
            dtblFinal.Columns.Add("RENTDEPOSIT", System.Type.GetType("System.Double"));//37

            dtblFinal.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//38
            dtblFinal.Columns.Add("TX1", System.Type.GetType("System.Double"));//39
            dtblFinal.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//40
            dtblFinal.Columns.Add("TX2", System.Type.GetType("System.Double"));//41
            dtblFinal.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//42
            dtblFinal.Columns.Add("TX3", System.Type.GetType("System.Double"));//43

            dtblFinal.Columns.Add("MIXMATCHID", System.Type.GetType("System.Int32"));//46
            dtblFinal.Columns.Add("MIXMATCHFLAG", System.Type.GetType("System.String"));//47
            dtblFinal.Columns.Add("MIXMATCHTYPE", System.Type.GetType("System.String"));//48
            dtblFinal.Columns.Add("MIXMATCHVALUE", System.Type.GetType("System.Double"));//49
            dtblFinal.Columns.Add("MIXMATCHQTY", System.Type.GetType("System.Int32"));//50
            dtblFinal.Columns.Add("MIXMATCHUNIQUE", System.Type.GetType("System.Int32"));//51
            dtblFinal.Columns.Add("MIXMATCHLAST", System.Type.GetType("System.String"));//52

            // for Fees & Charges
            dtblFinal.Columns.Add("FEESID", System.Type.GetType("System.Int32"));//62
            dtblFinal.Columns.Add("FEESLOGIC", System.Type.GetType("System.String"));//63
            dtblFinal.Columns.Add("FEESVALUE", System.Type.GetType("System.Double"));//64
            dtblFinal.Columns.Add("FEESTAXRATE", System.Type.GetType("System.Double"));//65
            dtblFinal.Columns.Add("FEES", System.Type.GetType("System.Double"));//66
            dtblFinal.Columns.Add("FEESTAX", System.Type.GetType("System.Double"));//67
            dtblFinal.Columns.Add("FEESTEXT", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("FEESQTY", System.Type.GetType("System.String"));//68

            dtblFinal.Columns.Add("SALEPRICEID", System.Type.GetType("System.Int32"));//69

            // customer Destination Tax
            dtblFinal.Columns.Add("DTXID", System.Type.GetType("System.Int32"));//71
            dtblFinal.Columns.Add("DTXTYPE", System.Type.GetType("System.Int32"));//72
            dtblFinal.Columns.Add("DTXRATE", System.Type.GetType("System.Double"));//73
            dtblFinal.Columns.Add("DTX", System.Type.GetType("System.Double"));//74

            dtblFinal.Columns.Add("EDITF", System.Type.GetType("System.String"));//75
            dtblFinal.Columns.Add("PROMPTPRICE", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("BUYNGETFREEHEADERID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREECATEGORY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREENAME", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("AGE", System.Type.GetType("System.Int32"));

            dtblFinal.Columns.Add("GRATE", System.Type.GetType("System.Double"));
            dtblFinal.Columns.Add("GPRICE", System.Type.GetType("System.Double"));

            dtblFinal.Columns.Add("UOM", System.Type.GetType("System.String"));

            // fetch TaxID, TaxName first

            string strTaxID1 = "0";
            string strTaxID2 = "0";
            string strTaxID3 = "0";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";
            string strTaxRate1 = "0";
            string strTaxRate2 = "0";
            string strTaxRate3 = "0";
            int iTaxType1 = 0;
            int iTaxType2 = 0;
            int iTaxType3 = 0;
            double TaxVal1 = 0;
            double TaxVal2 = 0;
            double TaxVal3 = 0;
            int intCount = 0;

            //Mix n Match

            int iMixID = 0;
            int iMixQty = 0;
            int iMixUnique = 0;
            double dMixVal = 0;
            string sMixType = "";
            string sMixFlag = "N";
            string sMixLast = "N";


            // Fees & Charges

            int iFeeID = 0;
            string sFeeLogic = "";
            double dFeeVal = 0;
            double dFeeTxRate = 0;
            double dFee = 0;
            double dFeeTx = 0;
            string sFeeText = "";
            string sFeeQty = "N";
            // Sale price

            int iSalePriceID = 0;

            int idtxid = 0;
            int idtxtype = 0;
            double ddtxrate = 0;
            double ddtx = 0;

            int iAge = 0;

            double dGRate = 0;
            double dGPrice = 0;

            DataTable dtblTaxHeader = new DataTable();
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTaxHeader = objTax.FetchActiveTax();
            foreach (DataRow dr in dtblTaxHeader.Rows)
            {
                intCount++;
                if (intCount == 1)
                {
                    strTaxID1 = dr["ID"].ToString();
                    strTaxName1 = dr["TaxName"].ToString();
                    strTaxRate1 = dr["TaxRate"].ToString();
                }
                if (intCount == 2)
                {
                    strTaxID2 = dr["ID"].ToString();
                    strTaxName2 = dr["TaxName"].ToString();
                    strTaxRate2 = dr["TaxRate"].ToString();
                }
                if (intCount == 3)
                {
                    strTaxID3 = dr["ID"].ToString();
                    strTaxName3 = dr["TaxName"].ToString();
                    strTaxRate3 = dr["TaxRate"].ToString();
                    break;
                }
            }
            dtblTaxHeader.Dispose();

            if ((!blReturnItemQT) && (!blRentRecallQT))
            {
                foreach (DataRow dr1 in dtblPOSDatatblQT.Rows)
                {
                    iTaxType1 = 0;
                    iTaxType2 = 0;
                    iTaxType3 = 0;
                    TaxVal1 = 0;
                    TaxVal2 = 0;
                    TaxVal3 = 0;

                    string pSKU = "";
                    string pDept = "";
                    string pCat = "";
                    string pT1 = "N";
                    string pT2 = "N";
                    string pT3 = "N";

                    int tx1ty = 0;
                    int tx2ty = 0;
                    int tx3ty = 0;

                    int tx1id = 0;
                    int tx2id = 0;
                    int tx3id = 0;

                    double tx1 = 0;
                    double tx2 = 0;
                    double tx3 = 0;

                    dGRate = 0;
                    dGPrice = 0;


                    tx1ty = GeneralFunctions.fnInt32(dr1["TX1TYPE"].ToString());
                    tx2ty = GeneralFunctions.fnInt32(dr1["TX2TYPE"].ToString());
                    tx3ty = GeneralFunctions.fnInt32(dr1["TX3TYPE"].ToString());

                    tx1id = GeneralFunctions.fnInt32(dr1["TX1ID"].ToString());
                    tx2id = GeneralFunctions.fnInt32(dr1["TX2ID"].ToString());
                    tx3id = GeneralFunctions.fnInt32(dr1["TX3ID"].ToString());

                    tx1 = GeneralFunctions.fnDouble(dr1["TX1"].ToString());
                    tx2 = GeneralFunctions.fnDouble(dr1["TX2"].ToString());
                    tx3 = GeneralFunctions.fnDouble(dr1["TX3"].ToString());


                    iMixID = GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString());
                    iMixQty = GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString());
                    iMixUnique = GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString());
                    dMixVal = GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString());

                    sMixFlag = dr1["MIXMATCHFLAG"].ToString();
                    sMixLast = dr1["MIXMATCHLAST"].ToString();
                    sMixType = dr1["MIXMATCHTYPE"].ToString();

                    iFeeID = GeneralFunctions.fnInt32(dr1["FEESID"].ToString());
                    sFeeLogic = dr1["FEESLOGIC"].ToString();
                    dFeeVal = GeneralFunctions.fnDouble(dr1["FEESVALUE"].ToString());
                    dFeeTxRate = GeneralFunctions.fnDouble(dr1["FEESTAXRATE"].ToString());
                    dFee = GeneralFunctions.fnDouble(dr1["FEES"].ToString());
                    dFeeTx = GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString());
                    sFeeText = dr1["FEESTEXT"].ToString();
                    sFeeQty = dr1["FEESQTY"].ToString();

                    iSalePriceID = GeneralFunctions.fnInt32(dr1["SALEPRICEID"].ToString());

                    idtxid = GeneralFunctions.fnInt32(dr1["DTXID"].ToString());
                    idtxtype = GeneralFunctions.fnInt32(dr1["DTXTYPE"].ToString());
                    ddtxrate = GeneralFunctions.fnDouble(dr1["DTXRATE"].ToString());
                    ddtx = GeneralFunctions.fnDouble(dr1["DTX"].ToString());

                    iAge = GeneralFunctions.fnInt32(dr1["AGE"].ToString());

                    dGRate = GeneralFunctions.fnDouble(dr1["GRATE"].ToString());
                    dGPrice = GeneralFunctions.fnDouble(dr1["GPRICE"].ToString());

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx1id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx1id > 0))
                    {
                        iTaxType1 = tx1ty;
                        TaxVal1 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx2id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx2id > 0))
                    {
                        iTaxType1 = tx2ty;
                        TaxVal1 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx3id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx3id > 0))
                    {
                        iTaxType1 = tx3ty;
                        TaxVal1 = tx3;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx1id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx1id > 0))
                    {
                        iTaxType2 = tx1ty;
                        TaxVal2 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx2id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx2id > 0))
                    {
                        iTaxType2 = tx2ty;
                        TaxVal2 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx3id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx3id > 0))
                    {
                        iTaxType2 = tx3ty;
                        TaxVal2 = tx3;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx1id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx1id > 0))
                    {
                        iTaxType3 = tx1ty;
                        TaxVal3 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx2id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx2id > 0))
                    {
                        iTaxType3 = tx2ty;
                        TaxVal3 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx3id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx3id > 0))
                    {
                        iTaxType3 = tx3ty;
                        TaxVal3 = tx3;
                    }

                    if (dr1["PRODUCTTYPE"].ToString() == "G") // Gift Certificate
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "GC",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,dGRate,dGPrice,dr1["UOM"].ToString()
                                });
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "O") // Bottle Refund
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "BTL",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "X") // Mercury Gift Card
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        Settings.PaymentGateway == 5 ? "DGC" : (Settings.PaymentGateway == 7 ? "PLGC" : (Settings.PaymentGateway == 3 ? "PGC" : "MGC")),
                                        pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "A") // Account Pay
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "AR",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "C") // Coupon
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","2",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "H") // Fees Coupon
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "FEE COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","2",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "Z") // MixMatch
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "Mix n Match",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","9",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "B") // Blank Line
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),
                                        dr1["TAXID2"].ToString(),
                                        dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),
                                        dr1["TAXABLE2"].ToString(),
                                        dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),
                                        dr1["TAXRATE2"].ToString(),
                                        dr1["TAXRATE3"].ToString(),
                                        "Blank",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else
                    {
                        int pID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                        FetchItemAdditionData(pID, ref pSKU, ref pDept, ref pCat);

                        if (strTaxExempt == "N")
                        {
                            GetTaxable(pID, strTaxID1, strTaxID2, strTaxID3, ref pT1, ref pT2, ref pT3);
                        }

                        if (dr1["EDITF"].ToString() == "N")
                        {
                            dtblFinal.Rows.Add(new object[]
                                {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,
                                        pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,
                                        idtxid,idtxtype,ddtxrate,ddtx,dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),iAge,dGRate,dGPrice,dr1["UOM"].ToString()
                                });
                        }


                        if (dr1["EDITF"].ToString() == "Y")
                        {
                            dtblFinal.Rows.Add(new object[]
                                {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),
                                        dr1["TAXID2"].ToString(),
                                        dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),
                                        dr1["TAXABLE2"].ToString(),
                                        dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),
                                        dr1["TAXRATE2"].ToString(),
                                        dr1["TAXRATE3"].ToString(),
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,
                                        idtxid,idtxtype,ddtxrate,ddtx,dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),iAge,dGRate,dGPrice,dr1["UOM"].ToString()
                               });
                        }
                    }
                }
            }
            else
            {
                foreach (DataRow drR in dtblPOSDatatblQT.Rows)
                {
                    iMixID = GeneralFunctions.fnInt32(drR["MIXMATCHID"].ToString());
                    iMixQty = GeneralFunctions.fnInt32(drR["MIXMATCHQTY"].ToString());
                    iMixUnique = GeneralFunctions.fnInt32(drR["MIXMATCHUNIQUE"].ToString());
                    dMixVal = GeneralFunctions.fnDouble(drR["MIXMATCHVALUE"].ToString());

                    sMixFlag = drR["MIXMATCHFLAG"].ToString();
                    sMixLast = drR["MIXMATCHLAST"].ToString();
                    sMixType = drR["MIXMATCHTYPE"].ToString();

                    iFeeID = GeneralFunctions.fnInt32(drR["FEESID"].ToString());
                    sFeeLogic = drR["FEESLOGIC"].ToString();
                    dFeeVal = GeneralFunctions.fnDouble(drR["FEESVALUE"].ToString());
                    dFeeTxRate = GeneralFunctions.fnDouble(drR["FEESTAXRATE"].ToString());
                    dFee = GeneralFunctions.fnDouble(drR["FEES"].ToString());
                    dFeeTx = GeneralFunctions.fnDouble(drR["FEESTAX"].ToString());
                    sFeeText = drR["FEESTEXT"].ToString();
                    sFeeQty = drR["FEESQTY"].ToString();

                    iSalePriceID = GeneralFunctions.fnInt32(drR["SALEPRICEID"].ToString());

                    idtxid = GeneralFunctions.fnInt32(drR["DTXID"].ToString());
                    idtxtype = GeneralFunctions.fnInt32(drR["DTXTYPE"].ToString());
                    ddtxrate = GeneralFunctions.fnDouble(drR["DTXRATE"].ToString());
                    ddtx = GeneralFunctions.fnDouble(drR["DTX"].ToString());

                    iAge = GeneralFunctions.fnInt32(drR["AGE"].ToString());

                    dGRate = GeneralFunctions.fnDouble(drR["GRATE"].ToString());
                    dGPrice = GeneralFunctions.fnDouble(drR["GPRICE"].ToString());

                    DataTable dtblR = new DataTable();
                    PosDataObject.POS objR = new PosDataObject.POS();
                    objR.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    int d = GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString());
                    dtblR = objR.FetchItemDetails(GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString()));

                    foreach (DataRow drR1 in dtblR.Rows)
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        drR1["ProductID"].ToString(),
                                        drR1["Description"].ToString(),
                                        drR1["ProductType"].ToString(),
                                        "0",
                                        "0",
                                        drR1["Cost"].ToString(),
                                        drR["Qty"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["NormalPrice"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["TaxID1"].ToString(),
                                        drR1["TaxID2"].ToString(),
                                        drR1["TaxID3"].ToString(),
                                        drR1["Taxable1"].ToString(),
                                        drR1["Taxable2"].ToString(),
                                        drR1["Taxable3"].ToString(),
                                        drR1["TaxRate1"].ToString(),
                                        drR1["TaxRate2"].ToString(),
                                        drR1["TaxRate3"].ToString(),
                                        drR1["SKU"].ToString(),
                                        drR1["DepartmentID"].ToString(),
                                        drR1["CategoryID"].ToString(),
                                        drR1["UOMCount"].ToString(),
                                        drR1["UOMPrice"].ToString(),
                                        drR1["UOMDesc"].ToString(),
                                        drR1["MatrixOptionID"].ToString(),
                                        drR1["OptionValue1"].ToString(),
                                        drR1["OptionValue2"].ToString(),
                                        drR1["OptionValue3"].ToString(),
                                        drR["MATRIXOID"].ToString(),
                                        "0","0","0","0","0","0","","0",
                                        drR["NOTES"].ToString(),
                                        drR1["DiscLogic"].ToString(),
                                        drR1["DiscValue"].ToString(),
                                        drR1["Discount"].ToString(),
                                        drR1["DiscountID"].ToString(),
                                        drR1["DiscountText"].ToString(),"1",
                                        drR["RENTTYPE"].ToString(),
                                        drR["RENTDURATION"].ToString(),
                                        drR["RENTAMOUNT"].ToString(),
                                        drR["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        drR["EDITF"].ToString(),
                                        drR["PROMPTPRICE"].ToString(),
                                        drR["BUYNGETFREEHEADERID"].ToString(),
                                        drR["BUYNGETFREECATEGORY"].ToString(),
                                        drR["BUYNGETFREENAME"].ToString(),iAge, dGRate, dGPrice,drR["UOM"].ToString()});
                    }
                    dtblR.Dispose();
                }
            }

            intTaxID1QT = GeneralFunctions.fnInt32(strTaxID1);
            intTaxID2QT = GeneralFunctions.fnInt32(strTaxID2);
            intTaxID3QT = GeneralFunctions.fnInt32(strTaxID3);

            if (strTaxExemptQT == "N")
            {
                if ((!blNewLayawayQT) && (!blRentRecallQT))
                {
                    DataTable dtblTax = grdTaxQT.ItemsSource as DataTable;
                    foreach (DataRow drTax in dtblTax.Rows)
                    {
                        if (drTax["DTAX"].ToString() == "Y") continue;
                        if (drTax["TAXID"].ToString() == strTaxID1) dblTax1QT = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                        if (drTax["TAXID"].ToString() == strTaxID2) dblTax2QT = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                        if (drTax["TAXID"].ToString() == strTaxID3) dblTax3QT = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                    }
                    dtblTax.Dispose();
                }
            }

            return dtblFinal;
        }

        private DataTable GetLayawayInvoiceTableQT()
        {

            DataTable dtbl = new DataTable();
            dtbl = pdtblForStockUpdateQT;

            int Rcount = pdtblForStockUpdateQT.Rows.Count;
            int Ccount = 0;
            double dblTotalDiscount = 0;
            double dblTotalSaleAmt = 0;
            foreach (DataRow dr in pdtblForStockUpdateQT.Rows)
            {
                Ccount++;

                double Tax1 = 0;
                double Tax2 = 0;
                double Tax3 = 0;
                double DTax = 0;
                double dblPrice = 0;
                double dblDiscount = 0;
                dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                dblDiscount = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["ITEMDISCOUNT"].ToString()));

                dblTotalDiscount = GeneralFunctions.FormatDouble(dblTotalDiscount + dblDiscount);

                if (strTaxExempt == "N")
                {
                    if (dr["TAXABLE1"].ToString() == "Y")
                        Tax1 = (GeneralFunctions.fnInt32(dr["TX1TYPE"].ToString()) == 0) ? GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString()) * dblPrice / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TX1"].ToString()));
                    if (dr["TAXABLE2"].ToString() == "Y")
                        Tax2 = (GeneralFunctions.fnInt32(dr["TX2TYPE"].ToString()) == 0) ? GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString()) * dblPrice / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TX2"].ToString()));
                    if (dr["TAXABLE3"].ToString() == "Y")
                        Tax3 = (GeneralFunctions.fnInt32(dr["TX3TYPE"].ToString()) == 0) ? GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString()) * dblPrice / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TX3"].ToString()));
                    if (GeneralFunctions.fnInt32(dr["DTXID"].ToString()) > 0)
                        DTax = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["DTX"].ToString()));
                }

                dr["TAX1"] = Tax1.ToString();
                dr["TAX2"] = Tax2.ToString();
                dr["TAX3"] = Tax3.ToString();
                dr["TAX"] = Convert.ToString(Tax1 + Tax2 + Tax3 + DTax);
                dr["DISCOUNT"] = dblDiscount.ToString();
                dr["TOTALSALE"] = Convert.ToString(Tax1 + Tax2 + Tax3 + DTax + dblPrice);
                dr["DISCOUNTREASON"] = strDiscountReasonQT;
                dblTax1 = Tax1;
                dblTax2 = Tax2;
                dblTax3 = Tax3;

                dblTaxQT = Tax1 + Tax2 + Tax3 + DTax;
                dblTotalSaleAmt = GeneralFunctions.FormatDouble(dblTotalSaleAmt + Tax1 + Tax2 + Tax3 + DTax + dblPrice);
            }

            Ccount = 0;
            double dblSumLayawayTender = 0;
            foreach (DataRow dr1 in pdtblForStockUpdateQT.Rows)
            {
                Ccount++;
                double dblLayawayTender = 0;
                if (Ccount != Rcount)
                {
                    dblLayawayTender = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr1["TOTALSALE"].ToString()) * dblTenderQT / dblTotalSaleAmt);

                    dblSumLayawayTender = dblSumLayawayTender + dblLayawayTender;
                }
                else
                {
                    dblLayawayTender = GeneralFunctions.FormatDouble(dblTenderQT - dblSumLayawayTender);
                }

                dr1["LAYAWAYAMOUNT"] = dblLayawayTender.ToString();
            }
            return dtbl;
        }

        // Assign Cart before repair transaction

        private DataTable FinalDataTableForRepairQT()
        {
            DataTable dtblFinal = new DataTable();
            dtblFinal.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ONHANDQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NORMALQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("COST", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("QTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("RATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DEPT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("CAT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMDESC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMID", System.Type.GetType("System.String"));
            // add for layaway Invoice
            dtblFinal.Columns.Add("TAX1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TOTALSALE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTREASON", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("LAYAWAYAMOUNT", System.Type.GetType("System.String"));

            // add for invoice notes
            dtblFinal.Columns.Add("NOTES", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMDISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("RENTTYPE", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("RENTDURATION", System.Type.GetType("System.Double"));//35
            dtblFinal.Columns.Add("RENTAMOUNT", System.Type.GetType("System.Double"));//36
            dtblFinal.Columns.Add("RENTDEPOSIT", System.Type.GetType("System.Double"));//37

            dtblFinal.Columns.Add("REPAIRITEMTAG", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("REPAIRITEMSLNO", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("REPAIRITEMPURCHASEDATE", System.Type.GetType("System.String"));//34

            dtblFinal.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//38
            dtblFinal.Columns.Add("TX1", System.Type.GetType("System.Double"));//39
            dtblFinal.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//40
            dtblFinal.Columns.Add("TX2", System.Type.GetType("System.Double"));//41
            dtblFinal.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//42
            dtblFinal.Columns.Add("TX3", System.Type.GetType("System.Double"));//43

            // for Fees & Charges
            dtblFinal.Columns.Add("FEESID", System.Type.GetType("System.Int32"));//62
            dtblFinal.Columns.Add("FEESLOGIC", System.Type.GetType("System.String"));//63
            dtblFinal.Columns.Add("FEESVALUE", System.Type.GetType("System.Double"));//64
            dtblFinal.Columns.Add("FEESTAXRATE", System.Type.GetType("System.Double"));//65
            dtblFinal.Columns.Add("FEES", System.Type.GetType("System.Double"));//66
            dtblFinal.Columns.Add("FEESTAX", System.Type.GetType("System.Double"));//67
            dtblFinal.Columns.Add("FEESTEXT", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("FEESQTY", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("EDITF", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("PROMPTPRICE", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("BUYNGETFREEHEADERID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREECATEGORY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREENAME", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("GRATE", System.Type.GetType("System.Double"));
            dtblFinal.Columns.Add("GPRICE", System.Type.GetType("System.Double"));

            dtblFinal.Columns.Add("UOM", System.Type.GetType("System.String"));


            // fetch TaxID, TaxName first

            string strTaxID1 = "0";
            string strTaxID2 = "0";
            string strTaxID3 = "0";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";
            string strTaxRate1 = "0";
            string strTaxRate2 = "0";
            string strTaxRate3 = "0";

            int iTaxType1 = 0;
            int iTaxType2 = 0;
            int iTaxType3 = 0;
            double TaxVal1 = 0;
            double TaxVal2 = 0;
            double TaxVal3 = 0;

            int intCount = 0;


            // Fees & Charges

            int iFeeID = 0;
            string sFeeLogic = "";
            double dFeeVal = 0;
            double dFeeTxRate = 0;
            double dFee = 0;
            double dFeeTx = 0;
            string sFeeText = "";
            string sFeeQty = "N";
            string ef = "N";
            string prompt = "N";
            DataTable dtblTaxHeader = new DataTable();
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTaxHeader = objTax.FetchActiveTax();
            foreach (DataRow dr in dtblTaxHeader.Rows)
            {
                intCount++;
                if (intCount == 1)
                {
                    strTaxID1 = dr["ID"].ToString();
                    strTaxName1 = dr["TaxName"].ToString();
                    strTaxRate1 = dr["TaxRate"].ToString();
                }
                if (intCount == 2)
                {
                    strTaxID2 = dr["ID"].ToString();
                    strTaxName2 = dr["TaxName"].ToString();
                    strTaxRate2 = dr["TaxRate"].ToString();
                }
                if (intCount == 3)
                {
                    strTaxID3 = dr["ID"].ToString();
                    strTaxName3 = dr["TaxName"].ToString();
                    strTaxRate3 = dr["TaxRate"].ToString();
                    break;
                }
            }
            dtblTaxHeader.Dispose();

            //if (blRepairIssued)
            //{
            foreach (DataRow dr1 in dtblPOSDatatblQT.Rows)
            {
                string pSKU = "";
                string pDept = "";
                string pCat = "";
                string pT1 = "N";
                string pT2 = "N";
                string pT3 = "N";

                iTaxType1 = 0;
                iTaxType2 = 0;
                iTaxType3 = 0;
                TaxVal1 = 0;
                TaxVal2 = 0;
                TaxVal3 = 0;
                ef = "N";

                int tx1ty = 0;
                int tx2ty = 0;
                int tx3ty = 0;

                int tx1id = 0;
                int tx2id = 0;
                int tx3id = 0;

                double tx1 = 0;
                double tx2 = 0;
                double tx3 = 0;

                double dGRate = 0;
                double dGPrice = 0;

                dGRate = GeneralFunctions.fnDouble(dr1["GRATE"].ToString());
                dGPrice = GeneralFunctions.fnDouble(dr1["GPRICE"].ToString());

                tx1ty = GeneralFunctions.fnInt32(dr1["TX1TYPE"].ToString());
                tx2ty = GeneralFunctions.fnInt32(dr1["TX2TYPE"].ToString());
                tx3ty = GeneralFunctions.fnInt32(dr1["TX3TYPE"].ToString());

                tx1id = GeneralFunctions.fnInt32(dr1["TX1ID"].ToString());
                tx2id = GeneralFunctions.fnInt32(dr1["TX2ID"].ToString());
                tx3id = GeneralFunctions.fnInt32(dr1["TX3ID"].ToString());

                tx1 = GeneralFunctions.fnDouble(dr1["TX1"].ToString());
                tx2 = GeneralFunctions.fnDouble(dr1["TX2"].ToString());
                tx3 = GeneralFunctions.fnDouble(dr1["TX3"].ToString());

                iFeeID = GeneralFunctions.fnInt32(dr1["FEESID"].ToString());
                sFeeLogic = dr1["FEESLOGIC"].ToString();
                dFeeVal = GeneralFunctions.fnDouble(dr1["FEESVALUE"].ToString());
                dFeeTxRate = GeneralFunctions.fnDouble(dr1["FEESTAXRATE"].ToString());
                dFee = GeneralFunctions.fnDouble(dr1["FEES"].ToString());
                dFeeTx = GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString());
                sFeeText = dr1["FEESTEXT"].ToString();
                sFeeQty = dr1["FEESQTY"].ToString();

                ef = dr1["EDITF"].ToString();
                prompt = dr1["PROMPTPRICE"].ToString();
                if ((GeneralFunctions.fnInt32(strTaxID1) == tx1id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx1id > 0))
                {
                    iTaxType1 = tx1ty;
                    TaxVal1 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx2id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx2id > 0))
                {
                    iTaxType1 = tx2ty;
                    TaxVal1 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx3id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx3id > 0))
                {
                    iTaxType1 = tx3ty;
                    TaxVal1 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx1id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx1id > 0))
                {
                    iTaxType2 = tx1ty;
                    TaxVal2 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx2id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx2id > 0))
                {
                    iTaxType2 = tx2ty;
                    TaxVal2 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx3id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx3id > 0))
                {
                    iTaxType2 = tx3ty;
                    TaxVal2 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx1id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx1id > 0))
                {
                    iTaxType3 = tx1ty;
                    TaxVal3 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx2id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx2id > 0))
                {
                    iTaxType3 = tx2ty;
                    TaxVal3 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx3id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx3id > 0))
                {
                    iTaxType3 = tx3ty;
                    TaxVal3 = tx3;
                }


                if (dr1["PRODUCTTYPE"].ToString() == "G") // Gift Certificate
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "GC",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "A") // Account Pay
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "AR",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "C") // Coupon
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "H") // Fees Ticket
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "FEE COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "Z") // Special Mix n Match
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "Mix n Match",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "B") // Blank Line
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        "Blank",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),"0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice, dr1["UOM"].ToString()});
                }
                else
                {
                    int pID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                    FetchItemAdditionData(pID, ref pSKU, ref pDept, ref pCat);

                    if (strTaxExempt == "N")
                    {
                        GetTaxable(pID, strTaxID1, strTaxID2, strTaxID3, ref pT1, ref pT2, ref pT3);
                    }

                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),"0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                }
            }

            //}

            /*if ( blRepairRecall)
            {
                foreach (DataRow drR in dtblPOSDatatbl.Rows)
                {
                    DataTable dtblR = new DataTable();
                    PosDataObject.POS objR = new PosDataObject.POS();
                    objR.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    int d = GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString());
                    dtblR = objR.FetchItemDetails(GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString()));
                    foreach (DataRow drR1 in dtblR.Rows)
                    {
                        dtblFinal.Rows.Add(new object[] { 
                                        drR1["ProductID"].ToString(),
                                        drR1["Description"].ToString(),
                                        drR1["ProductType"].ToString(),
                                        "0",
                                        "0",
                                        drR1["Cost"].ToString(),
                                        drR["Qty"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["NormalPrice"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["TaxID1"].ToString(),
                                        drR1["TaxID2"].ToString(),
                                        drR1["TaxID3"].ToString(),
                                        drR1["Taxable1"].ToString(),
                                        drR1["Taxable2"].ToString(),
                                        drR1["Taxable3"].ToString(),
                                        drR1["TaxRate1"].ToString(),
                                        drR1["TaxRate2"].ToString(),
                                        drR1["TaxRate3"].ToString(),
                                        drR1["SKU"].ToString(),
                                        drR1["DepartmentID"].ToString(),
                                        drR1["CategoryID"].ToString(),
                                        drR1["UOMCount"].ToString(),
                                        drR1["UOMPrice"].ToString(),
                                        drR1["UOMDesc"].ToString(),
                                        drR1["MatrixOptionID"].ToString(),
                                        drR1["OptionValue1"].ToString(),
                                        drR1["OptionValue2"].ToString(),
                                        drR1["OptionValue3"].ToString(),drR["MATRIXOID"].ToString(),
                                        "0","0","0","0","0","0","","0",drR["NOTES"].ToString(),
                                        drR1["DiscLogic"].ToString(),drR1["DiscValue"].ToString(),drR1["Discount"].ToString(),
                                        drR1["DiscountID"].ToString(),drR1["DiscountText"].ToString(),"1",
                                        drR["RENTTYPE"].ToString(),drR["RENTDURATION"].ToString(),
                                        drR["RENTAMOUNT"].ToString(),drR["RENTDEPOSIT"].ToString(),
                                        drR["REPAIRITEMTAG"].ToString(),
                                        drR["REPAIRITEMSLNO"].ToString(),
                                        drR["REPAIRITEMPURCHASEDATE"].ToString()});
                    }
                    dtblR.Dispose();
                }
            }*/

            intTaxID1QT = GeneralFunctions.fnInt32(strTaxID1);
            intTaxID2QT = GeneralFunctions.fnInt32(strTaxID2);
            intTaxID3QT = GeneralFunctions.fnInt32(strTaxID3);

            DataTable dtblTax = grdTaxQT.ItemsSource as DataTable;
            if (dtblTax != null)
            {
                foreach (DataRow drTax in dtblTax.Rows)
                {
                    if (drTax["TAXID"].ToString() == strTaxID1) dblTax1QT = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                    if (drTax["TAXID"].ToString() == strTaxID2) dblTax2QT = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                    if (drTax["TAXID"].ToString() == strTaxID3) dblTax3QT = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                }
                dtblTax.Dispose();
            }


            return dtblFinal;
        }

        // Assign Cart before rental transaction

        private DataTable FinalDataTableForRentQT()
        {
            DataTable dtblFinal = new DataTable();
            dtblFinal.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ONHANDQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NORMALQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("COST", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("QTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("RATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DEPT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("CAT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMDESC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMID", System.Type.GetType("System.String"));

            // add for layaway Invoice
            dtblFinal.Columns.Add("TAX1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TOTALSALE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTREASON", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("LAYAWAYAMOUNT", System.Type.GetType("System.String"));

            // add for invoice notes
            dtblFinal.Columns.Add("NOTES", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMDISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("RENTTYPE", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("RENTDURATION", System.Type.GetType("System.Double"));//35
            dtblFinal.Columns.Add("RENTAMOUNT", System.Type.GetType("System.Double"));//36
            dtblFinal.Columns.Add("RENTDEPOSIT", System.Type.GetType("System.Double"));//37

            dtblFinal.Columns.Add("REPAIRITEMTAG", System.Type.GetType("System.String"));//38
            dtblFinal.Columns.Add("REPAIRITEMSLNO", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("REPAIRITEMPURCHASEDATE", System.Type.GetType("System.String"));//34

            dtblFinal.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//38
            dtblFinal.Columns.Add("TX1", System.Type.GetType("System.Double"));//39
            dtblFinal.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//40
            dtblFinal.Columns.Add("TX2", System.Type.GetType("System.Double"));//41
            dtblFinal.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//42
            dtblFinal.Columns.Add("TX3", System.Type.GetType("System.Double"));//43

            // for Fees & Charges
            dtblFinal.Columns.Add("FEESID", System.Type.GetType("System.Int32"));//62
            dtblFinal.Columns.Add("FEESLOGIC", System.Type.GetType("System.String"));//63
            dtblFinal.Columns.Add("FEESVALUE", System.Type.GetType("System.Double"));//64
            dtblFinal.Columns.Add("FEESTAXRATE", System.Type.GetType("System.Double"));//65
            dtblFinal.Columns.Add("FEES", System.Type.GetType("System.Double"));//66
            dtblFinal.Columns.Add("FEESTAX", System.Type.GetType("System.Double"));//67
            dtblFinal.Columns.Add("FEESTEXT", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("FEESQTY", System.Type.GetType("System.String"));//68

            dtblFinal.Columns.Add("EDITF", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("PROMPTPRICE", System.Type.GetType("System.String"));//68

            dtblFinal.Columns.Add("BUYNGETFREEHEADERID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREECATEGORY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREENAME", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("GRATE", System.Type.GetType("System.Double"));
            dtblFinal.Columns.Add("GPRICE", System.Type.GetType("System.Double"));

            dtblFinal.Columns.Add("UOM", System.Type.GetType("System.String"));

            // fetch TaxID, TaxName first

            string strTaxID1 = "0";
            string strTaxID2 = "0";
            string strTaxID3 = "0";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";
            string strTaxRate1 = "0";
            string strTaxRate2 = "0";
            string strTaxRate3 = "0";
            int iTaxType1 = 0;
            int iTaxType2 = 0;
            int iTaxType3 = 0;
            double TaxVal1 = 0;
            double TaxVal2 = 0;
            double TaxVal3 = 0;
            int intCount = 0;

            // Fees & Charges

            int iFeeID = 0;
            string sFeeLogic = "";
            double dFeeVal = 0;
            double dFeeTxRate = 0;
            double dFee = 0;
            double dFeeTx = 0;
            string sFeeText = "";
            string sFeeQty = "N";

            DataTable dtblTaxHeader = new DataTable();
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTaxHeader = objTax.FetchActiveTax();
            foreach (DataRow dr in dtblTaxHeader.Rows)
            {
                intCount++;
                if (intCount == 1)
                {
                    strTaxID1 = dr["ID"].ToString();
                    strTaxName1 = dr["TaxName"].ToString();
                    strTaxRate1 = dr["TaxRate"].ToString();
                }
                if (intCount == 2)
                {
                    strTaxID2 = dr["ID"].ToString();
                    strTaxName2 = dr["TaxName"].ToString();
                    strTaxRate2 = dr["TaxRate"].ToString();
                }
                if (intCount == 3)
                {
                    strTaxID3 = dr["ID"].ToString();
                    strTaxName3 = dr["TaxName"].ToString();
                    strTaxRate3 = dr["TaxRate"].ToString();
                    break;
                }
            }
            dtblTaxHeader.Dispose();

            if (blRentIssuedQT)
            {
                foreach (DataRow dr1 in dtblPOSDatatblQT.Rows)
                {
                    string pSKU = "";
                    string pDept = "";
                    string pCat = "";
                    string pT1 = "N";
                    string pT2 = "N";
                    string pT3 = "N";

                    iTaxType1 = 0;
                    iTaxType2 = 0;
                    iTaxType3 = 0;
                    TaxVal1 = 0;
                    TaxVal2 = 0;
                    TaxVal3 = 0;

                    int tx1ty = 0;
                    int tx2ty = 0;
                    int tx3ty = 0;

                    int tx1id = 0;
                    int tx2id = 0;
                    int tx3id = 0;

                    double tx1 = 0;
                    double tx2 = 0;
                    double tx3 = 0;

                    double dGRate = 0;
                    double dGPrice = 0;

                    dGRate = GeneralFunctions.fnDouble(dr1["GRATE"].ToString());
                    dGPrice = GeneralFunctions.fnDouble(dr1["GPRICE"].ToString());


                    tx1ty = GeneralFunctions.fnInt32(dr1["TX1TYPE"].ToString());
                    tx2ty = GeneralFunctions.fnInt32(dr1["TX2TYPE"].ToString());
                    tx3ty = GeneralFunctions.fnInt32(dr1["TX3TYPE"].ToString());

                    tx1id = GeneralFunctions.fnInt32(dr1["TX1ID"].ToString());
                    tx2id = GeneralFunctions.fnInt32(dr1["TX2ID"].ToString());
                    tx3id = GeneralFunctions.fnInt32(dr1["TX3ID"].ToString());

                    tx1 = GeneralFunctions.fnDouble(dr1["TX1"].ToString());
                    tx2 = GeneralFunctions.fnDouble(dr1["TX2"].ToString());
                    tx3 = GeneralFunctions.fnDouble(dr1["TX3"].ToString());

                    iFeeID = GeneralFunctions.fnInt32(dr1["FEESID"].ToString());
                    sFeeLogic = dr1["FEESLOGIC"].ToString();
                    dFeeVal = GeneralFunctions.fnDouble(dr1["FEESVALUE"].ToString());
                    dFeeTxRate = GeneralFunctions.fnDouble(dr1["FEESTAXRATE"].ToString());
                    dFee = GeneralFunctions.fnDouble(dr1["FEES"].ToString());
                    dFeeTx = GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString());
                    sFeeText = dr1["FEESTEXT"].ToString();
                    sFeeQty = dr1["FEESQTY"].ToString();

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx1id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx1id > 0))
                    {
                        iTaxType1 = tx1ty;
                        TaxVal1 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx2id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx2id > 0))
                    {
                        iTaxType1 = tx2ty;
                        TaxVal1 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx3id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx3id > 0))
                    {
                        iTaxType1 = tx3ty;
                        TaxVal1 = tx3;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx1id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx1id > 0))
                    {
                        iTaxType2 = tx1ty;
                        TaxVal2 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx2id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx2id > 0))
                    {
                        iTaxType2 = tx2ty;
                        TaxVal2 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx3id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx3id > 0))
                    {
                        iTaxType2 = tx3ty;
                        TaxVal2 = tx3;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx1id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx1id > 0))
                    {
                        iTaxType3 = tx1ty;
                        TaxVal3 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx2id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx2id > 0))
                    {
                        iTaxType3 = tx2ty;
                        TaxVal3 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx3id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx3id > 0))
                    {
                        iTaxType3 = tx3ty;
                        TaxVal3 = tx3;
                    }


                    if (dr1["PRODUCTTYPE"].ToString() == "G") // Gift Certificate
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "GC",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","",
                                        "0",dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "A") // Account Pay
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "AR",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "C") // Coupon
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "H") // Fees Ticket
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "FEE COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "Z") // Special Mix n Match
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "Mix n Match",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "B") // Blank Line
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        "Blank",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),
                                        "1",
                                        iTaxType1,TaxVal1,iTaxType2,
                                        TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                    }
                    else
                    {
                        int pID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                        FetchItemAdditionData(pID, ref pSKU, ref pDept, ref pCat);

                        if (strTaxExempt == "N")
                        {
                            GetTaxable(pID, strTaxID1, strTaxID2, strTaxID3, ref pT1, ref pT2, ref pT3);
                        }

                        if (dr1["EDITF"].ToString() == "N")
                        {

                            dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                        }

                        if (dr1["EDITF"].ToString() == "Y")
                        {

                            dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                        }

                    }
                }

            }

            if (blRentRecallQT)
            {
                foreach (DataRow drR in dtblPOSDatatblQT.Rows)
                {
                    DataTable dtblR = new DataTable();
                    PosDataObject.POS objR = new PosDataObject.POS();
                    objR.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    int d = GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString());
                    dtblR = objR.FetchItemDetails(GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString()));
                    foreach (DataRow drR1 in dtblR.Rows)
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        drR1["ProductID"].ToString(),
                                        drR1["Description"].ToString(),
                                        drR1["ProductType"].ToString(),
                                        "0",
                                        "0",
                                        drR1["Cost"].ToString(),
                                        drR["Qty"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["NormalPrice"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["TaxID1"].ToString(),
                                        drR1["TaxID2"].ToString(),
                                        drR1["TaxID3"].ToString(),
                                        drR1["Taxable1"].ToString(),
                                        drR1["Taxable2"].ToString(),
                                        drR1["Taxable3"].ToString(),
                                        drR1["TaxRate1"].ToString(),
                                        drR1["TaxRate2"].ToString(),
                                        drR1["TaxRate3"].ToString(),
                                        drR1["SKU"].ToString(),
                                        drR1["DepartmentID"].ToString(),
                                        drR1["CategoryID"].ToString(),
                                        drR1["UOMCount"].ToString(),
                                        drR1["UOMPrice"].ToString(),
                                        drR1["UOMDesc"].ToString(),
                                        drR1["MatrixOptionID"].ToString(),
                                        drR1["OptionValue1"].ToString(),
                                        drR1["OptionValue2"].ToString(),
                                        drR1["OptionValue3"].ToString(),
                                        drR["MATRIXOID"].ToString(),
                                        "0","0","0","0","0","0","","0",
                                        drR["NOTES"].ToString(),
                                        drR1["DiscLogic"].ToString(),
                                        drR1["DiscValue"].ToString(),
                                        drR1["Discount"].ToString(),
                                        drR1["DiscountID"].ToString(),
                                        drR1["DiscountText"].ToString(),"1",
                                        drR["RENTTYPE"].ToString(),
                                        drR["RENTDURATION"].ToString(),
                                        drR["RENTAMOUNT"].ToString(),
                                        drR["RENTDEPOSIT"].ToString(),
                                        drR["REPAIRITEMTAG"].ToString(),
                                        drR["REPAIRITEMSLNO"].ToString(),
                                        drR["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        drR["EDITF"].ToString(),drR["PROMPTPRICE"].ToString(),
                                        drR["BUYNGETFREEHEADERID"].ToString(),
                                        drR["BUYNGETFREECATEGORY"].ToString(),
                                        drR["BUYNGETFREENAME"].ToString(),
                                        GeneralFunctions.fnDouble(drR1["GRate"].ToString()),
                                        GeneralFunctions.fnDouble(drR1["GPrice"].ToString()),
                                        drR["Cost"].ToString()});
                    }
                    dtblR.Dispose();
                }
            }

            intTaxID1QT = GeneralFunctions.fnInt32(strTaxID1);
            intTaxID2QT = GeneralFunctions.fnInt32(strTaxID2);
            intTaxID3QT = GeneralFunctions.fnInt32(strTaxID3);

            DataTable dtblTax = grdTaxQT.ItemsSource as DataTable;
            if (dtblTax != null)
            {
                foreach (DataRow drTax in dtblTax.Rows)
                {
                    if (drTax["DTax"].ToString() == "Y") continue;
                    if (drTax["TAXID"].ToString() == strTaxID1) dblTax1QT = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                    if (drTax["TAXID"].ToString() == strTaxID2) dblTax2QT = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                    if (drTax["TAXID"].ToString() == strTaxID3) dblTax3QT = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                }
                dtblTax.Dispose();
            }


            return dtblFinal;
        }

        private void printorders()
        {
            ArrangePrinterData();

            if (dtblPrintData.Rows.Count > 0)
            {
                if (IfPrintOrders())
                {
                    DataTable dtbl = new DataTable();
                    dtbl.Columns.Add("ID", System.Type.GetType("System.String"));

                    int rid = 0;
                    dtblPrintData.DefaultView.Sort = "PrinterID";
                    dtblPrintData.DefaultView.ApplyDefaultSort = true;
                    foreach (DataRowView dr in dtblPrintData.DefaultView)
                    {
                        if ((rid == 0) || (rid != GeneralFunctions.fnInt32(dr["PrinterID"].ToString())))
                        {
                            rid = GeneralFunctions.fnInt32(dr["PrinterID"].ToString());
                            dtbl.Rows.Add(new object[] { rid.ToString() });
                        }
                    }
                    foreach (DataRow dr1 in dtbl.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr1["ID"].ToString()) == 0) continue;
                        prevPrinterID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                        prevPrinterName = getprintername(prevPrinterID);
                        string printername = getprinter(prevPrinterID);
                        if ((printername == "") || (printername == "(None)")) continue;
                        lineptr = 0;
                        linecnt = 0;
                        dtblstrm.Rows.Clear();
                        GetPrintStream();
                        int i = 1;
                        foreach (DataRow dr in dtblstrm.Rows)
                        {
                            dr["SL"] = i.ToString();
                            i++;
                        }

                        System.Drawing.Printing.PrintDocument pd = new System.Drawing.Printing.PrintDocument();
                        PrintPreviewControl prtctrl = new PrintPreviewControl();
                        prtctrl.Document = pd;
                        System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
                        ps.PrinterName = printername;
                        try
                        {
                            pd.DefaultPageSettings.PaperSize = ps.DefaultPageSettings.PaperSize;
                        }
                        catch
                        {
                        }
                        pd.PrinterSettings = ps;
                        pd.BeginPrint += new System.Drawing.Printing.PrintEventHandler(this.beginprint);
                        pd.EndPrint += new System.Drawing.Printing.PrintEventHandler(this.endprint);
                        pd.PrintPage += new System.Drawing.Printing.PrintPageEventHandler(this.printpage);

                        if (!pd.PrinterSettings.IsValid)
                        {
                            string msg = String.Format("Can't find printer \"{0}\".", printername);
                            DocMessage.MsgInformation(Properties.Resources.Print_Error__ + msg);
                            return;
                        }
                        pd.Print();
                    }
                    dtbl.Dispose();
                }
            }
        }

        public void beginprint(object sender, System.Drawing.Printing.PrintEventArgs e)
        {
            f_title = new System.Drawing.Font("Lucida Console", 12, System.Drawing.FontStyle.Regular);
            f_body = new System.Drawing.Font("Lucida Console", 11, System.Drawing.FontStyle.Regular);
            f_footer = new System.Drawing.Font("Lucida Console", 9, System.Drawing.FontStyle.Regular);
        }

        public void endprint(object sender, System.Drawing.Printing.PrintEventArgs e)
        {
            f_title = null;
            f_body = null;
        }

        public void printpage(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {

            if (linecnt == 0)
            {
                linecnt = dtblstrm.Rows.Count;
                lineptr = 1;
            }
            printFont = new System.Drawing.Font("Arial", 10);
            float linesPerPage = 0;
            float yPos = 0;
            int count = 0;
            float leftMargin = 0;
            float topMargin = 0;
            //leftMargin = e.MarginBounds.Left;
            //topMargin = e.MarginBounds.Top;
            int W = 0;

            if (Settings.GeneralReceiptPrint == "Y") W = 450; else W = 245 + SystemVariables.PageAdjustmentForPrint;

            int H = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(printFont.GetHeight(e.Graphics)))) + 1;
            // Calculate the number of lines per page.
            linesPerPage = e.PageBounds.Height / H;

            // Print each line of the file.
            System.Drawing.Rectangle border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
            System.Drawing.StringFormat f = new System.Drawing.StringFormat();
            while ((count < linesPerPage))
            {
                foreach (DataRow dr in dtblstrm.Rows)
                {
                    if (GeneralFunctions.fnInt32(dr["SL"].ToString()) != lineptr) continue;
                    yPos = topMargin + (count * H);

                    if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                    {
                        System.Drawing.Pen pn1 = new System.Drawing.Pen(System.Drawing.Color.Black);
                        pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        pn1.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                    {
                        System.Drawing.Pen pn2 = new System.Drawing.Pen(System.Drawing.Color.Black);
                        pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn2, 265 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn2, 60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        pn2.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                    {
                        System.Drawing.Pen pn2 = new System.Drawing.Pen(System.Drawing.Color.Black);
                        pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn2, 350 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn2, 120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        pn2.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                    {
                        System.Drawing.Pen pn3 = new System.Drawing.Pen(System.Drawing.Color.Black);
                        pn3.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn3, 20 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn3, -70 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        pn3.Dispose();
                    }
                    else
                    {
                        if (dr["param"].ToString() == "")
                        {
                            border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                            f.Alignment = System.Drawing.StringAlignment.Near;
                            f.LineAlignment = System.Drawing.StringAlignment.Near;
                            e.Graphics.DrawString(dr["Npos"].ToString(), printFont, System.Drawing.Brushes.Black, border, f);
                            f.Alignment = System.Drawing.StringAlignment.Center;
                            f.LineAlignment = System.Drawing.StringAlignment.Center;
                            e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, System.Drawing.Brushes.Black, border, f);
                            f.Alignment = System.Drawing.StringAlignment.Far;
                            f.LineAlignment = System.Drawing.StringAlignment.Far;
                            e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, System.Drawing.Brushes.Black, border, f);
                        }
                        if (dr["param"].ToString() == "red")
                        {
                            border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                            f.Alignment = System.Drawing.StringAlignment.Near;
                            f.LineAlignment = System.Drawing.StringAlignment.Near;
                            e.Graphics.DrawString(dr["Npos"].ToString(), printFont, System.Drawing.Brushes.Red, border, f);
                            f.Alignment = System.Drawing.StringAlignment.Center;
                            f.LineAlignment = System.Drawing.StringAlignment.Center;
                            e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, System.Drawing.Brushes.Red, border, f);
                            f.Alignment = System.Drawing.StringAlignment.Far;
                            f.LineAlignment = System.Drawing.StringAlignment.Far;
                            e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, System.Drawing.Brushes.Red, border, f);
                        }
                    }
                }

                count++;
                lineptr++;
            }

            if (lineptr <= linecnt) e.HasMorePages = true; else e.HasMorePages = false;
        }

        private void ArrangePrinterData()
        {
            bool blPrintSavedOrder = true;
            bool chksettings = false;
            dtblPrintData.Rows.Clear();
            DataTable dtbl = new DataTable();
            DataTable dtbl1 = new DataTable();
            DataTable dtbl2 = new DataTable();
            dtbl = dtblPOSDatatblQT;
            dtbl1 = dtbl;
            dtbl2 = dtbl;
            foreach (DataRow dr in dtbl.Rows)
            {
                //if (dr["PRINTER"].ToString() == "0") continue;
                if (dr["PRODUCTTYPE"].ToString() == "G") continue;
                bool flg = false;
                foreach (DataRow drF1 in dtblPrintData.Rows)
                {
                    if (drF1["UniqueNo"].ToString() == dr["UNIQUE"].ToString())
                    {
                        flg = true;
                        break;
                    }
                }
                if (flg) continue;
                if (!chksettings)
                {

                    blPrintSavedOrder = true;
                    chksettings = true;
                }
                if (blPrintSavedOrder)
                {
                    string menu = "";
                    string sku = "";
                    menu = dr["PRODUCT"].ToString();
                    double qty = GeneralFunctions.fnDouble(dr["QTY"].ToString());
                    DataTable pdbtbl1 = new DataTable();
                    pdbtbl1 = AttachPrinters(GeneralFunctions.fnInt32(dr["ID"].ToString()), qty);

                    PosDataObject.Product oprod = new PosDataObject.Product();
                    oprod.Connection = SystemVariables.Conn;
                    sku = oprod.GetSKUFromID(GeneralFunctions.fnInt32(dr["ID"].ToString()));
                    if (pdbtbl1.Rows.Count > 0)
                    {

                        foreach (DataRow drp1 in pdbtbl1.Rows)
                        {
                            dtblPrintData.Rows.Add(new object[]
                                                    {
                                                        drp1["PrinterID"].ToString(),
                                                        dr["QTY"].ToString(),sku,menu,
                                                        dr["UNIQUE"].ToString()
                                                    });
                        }
                    }
                    pdbtbl1.Dispose();
                }
            }
        }

        private DataTable AttachPrinters(int MenuID, double pval)
        {
            PosDataObject.Product objrest = new PosDataObject.Product();
            objrest.Connection = SystemVariables.Conn;
            return objrest.ShowPrintersForRemotePrint(MenuID, "Product", pval);
        }

        private string getprintername(int pID)
        {
            PosDataObject.Setup objstup = new PosDataObject.Setup();
            objstup.Connection = SystemVariables.Conn;
            return objstup.GetPrinterName(pID);
        }

        private string getprinter(int pID)
        {
            DataTable dtbl = new DataTable();
            string retstr = "";
            PosDataObject.Setup objstup = new PosDataObject.Setup();
            objstup.Connection = new SqlConnection(SystemVariables.ConnectionString);

            dtbl = objstup.FetchLinkPrinterData(Settings.TerminalName);
            if (dtbl.Rows.Count > 0)
            {
                foreach (DataRow dr in dtbl.Rows)
                {
                    int indx = dr["ParamName"].ToString().IndexOf("All Printers - ");
                    int PrniterID = 0;
                    PrniterID = GeneralFunctions.fnInt32(dr["ParamName"].ToString().Substring(15, dr["ParamName"].ToString().Length - 15));
                    if (PrniterID == pID)
                    {
                        retstr = dr["LinkPrinter"].ToString();
                        break;
                    }
                }
            }
            return retstr;
        }

        // confirmation before remote printing

        private bool IfPrintOrders()
        {
            bool ret = false;
            if (Settings.POSPrintTender == 0) ret = true;
            if (Settings.POSPrintTender == 1) ret = false;
            if (Settings.POSPrintTender == 2)
            {
                if (new MessageBoxWindow().Show(Properties.Resources.Do_you_want_to_print_tendered_items_on_remote_printer_, Properties.Resources.Print_items_confirmation, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes) ret = true;
                else ret = false;
            }
            return ret;
        }

        private int FetchWorkorderNo(int INV)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objPOS.FetchWorkOrderNo(INV);
        }

        private int FetchRepairParentID(int INV)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objPOS.FetchRepairParentOrder(INV);
        }

        // Get Work Order Date from Invoice ( Printing )

        private string FetchWorkorderDate(int INV)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objPOS.FetchWorkOrderDate(INV);
        }

        private void PrintInvoice()
        {


            if (Settings.GeneralReceiptPrint == "N")  // Receipt Printer
            {
                blurGrid.Visibility = Visibility.Visible;
                frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                try
                {
                    frm_POSInvoicePrintDlg.PrintType = "Invoice";
                    if (blRentIssuedQT) frm_POSInvoicePrintDlg.PrintType = "Rent Issue";
                    if (blRentRecallQT) frm_POSInvoicePrintDlg.PrintType = "Return Rent Item";
                    if (blRepairIssuedQT)
                    {
                        if (!blRepairDepositQT) frm_POSInvoicePrintDlg.PrintType = "Repair Deliver";
                        else frm_POSInvoicePrintDlg.PrintType = "Repair In";
                    }
                    if (blRepairRecall) frm_POSInvoicePrintDlg.PrintType = "Repair Deliver";
                    frm_POSInvoicePrintDlg.InvNo = intINVQT;
                    frm_POSInvoicePrintDlg.ApprovalNumber = AuthCode;
                    frm_POSInvoicePrintDlg.TranID = TranID;
                    frm_POSInvoicePrintDlg.CardNumber = CardNum;
                    frm_POSInvoicePrintDlg.CardType = CardType;
                    frm_POSInvoicePrintDlg.CardLogo = CardLogo;
                    frm_POSInvoicePrintDlg.CardExMM = CardExMM;
                    frm_POSInvoicePrintDlg.CardExYY = CardExYY;
                    frm_POSInvoicePrintDlg.RefNo = RefNo;
                    frm_POSInvoicePrintDlg.ApprovedAmt = ApprovedAmt;
                    frm_POSInvoicePrintDlg.CardEntry = CardEntry;
                    frm_POSInvoicePrintDlg.MercuryMerchantID = strMercuryMerchantID;
                    frm_POSInvoicePrintDlg.IsRentIssued = blRentIssued;
                    frm_POSInvoicePrintDlg.IsRentReturned = blRentRecall;
                    //frm_POSInvoicePrintDlg.Forced2ReceiptsOnPrecidiaSignatureFailure = blForced2ReceiptsOnPrecidiaSignatureFailure;
                    frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                    frm_POSInvoicePrintDlg.ShowDialog();
                }
                finally
                {
                    blurGrid.Visibility = Visibility.Collapsed;
                }
            }
            else  // A4 printing
            {
                if (Settings.PreprintedReceipt == "N") // Not Preprinted format
                {
                    DataTable dtbl = new DataTable();
                    PosDataObject.POS objPOS1 = new PosDataObject.POS();
                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dtbl = objPOS1.FetchInvoiceHeader(intINVQT, Settings.StoreCode);

                    DataTable dlogo = new DataTable();
                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dlogo = objPOS1.FetchStoreLogo();
                    bool boolnulllogo = false;
                    foreach (DataRow drl1 in dtbl.Rows)
                    {
                        foreach (DataRow drl2 in dlogo.Rows)
                        {
                            if (drl2["logo"] == null) boolnulllogo = true;
                            drl1["Logo"] = drl2["logo"];
                        }
                    }

                    int intTranNo = 0;
                    double dblOrderTotal = 0;
                    double dblOrderSubtotal = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTax = 0;
                    double dblSurcharge = 0;
                    int intCID = 0;
                    string strDiscountReason = "";
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    string strTaxNM1 = "";
                    string strTaxNM2 = "";
                    string strTaxNM3 = "";
                    string strservice = "";
                    int intHeaderStatus = 0;
                    double dblRentDeposit = 0;
                    double dblRentReturnDeposit = 0;
                    double dblRepairAmount = 0;
                    double dblRepairAdvanceAmount = 0;
                    string strRepairDeliveryDate = "";
                    string calcrent = "N";

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    string strDTaxNM = "";
                    double dblDTax = 0;

                    string strCustomerDOB = "";

                    foreach (DataRow dr in dtbl.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intCID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                        dblOrderTotal = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        strTaxNM1 = dr["TaxNM1"].ToString();
                        strTaxNM2 = dr["TaxNM2"].ToString();
                        strTaxNM3 = dr["TaxNM3"].ToString();

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        strDiscountReason = dr["DiscountReason"].ToString();
                        strservice = dr["ServiceType"].ToString();
                        intHeaderStatus = GeneralFunctions.fnInt32(dr["Status"].ToString());
                        dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                        dblRepairAmount = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        dblRepairAdvanceAmount = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        if (dr["RepairDeliveryDate"].ToString() != "") strRepairDeliveryDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToShortDateString();
                        calcrent = dr["IsRentCalculated"].ToString();

                        strDTaxNM = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        if (Settings.POSIDRequired == "Y") strCustomerDOB = dr["CustomerDOB"].ToString();
                    }
                    if (intHeaderStatus == 17) dblOrderTotal = dblRepairAmount;



                    blRepairPrintQT = (strservice == "Repair") ? true : false;

                    DataTable dtbl1 = new DataTable();
                    DataTable dtbl2 = new DataTable();
                    DataTable dtbl3 = new DataTable();
                    DataTable dtbl4 = new DataTable();
                    DataTable dtbl5 = new DataTable();

                    OfflineRetailV2.Report.Sales.repInvMain rep_InvMain = new OfflineRetailV2.Report.Sales.repInvMain();
                    OfflineRetailV2.Report.Sales.repInvHeader1 rep_InvHeader1 = new OfflineRetailV2.Report.Sales.repInvHeader1();
                    OfflineRetailV2.Report.Sales.repInvHeader2 rep_InvHeader2 = new OfflineRetailV2.Report.Sales.repInvHeader2();
                    OfflineRetailV2.Report.Sales.repInvLine rep_InvLine = new OfflineRetailV2.Report.Sales.repInvLine();
                    OfflineRetailV2.Report.Sales.repInvSubtotal rep_InvSubtotal = new OfflineRetailV2.Report.Sales.repInvSubtotal();
                    OfflineRetailV2.Report.Sales.repInvRentLine rep_InvRentLine = new OfflineRetailV2.Report.Sales.repInvRentLine();
                    OfflineRetailV2.Report.Sales.repInvRentSubTotal rep_InvRentSubTotal = new OfflineRetailV2.Report.Sales.repInvRentSubTotal();
                    OfflineRetailV2.Report.Sales.repInvRentReturnLine rep_InvRentReturnLine = new OfflineRetailV2.Report.Sales.repInvRentReturnLine();
                    OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal rep_InvRentReturnSubTotal = new OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal();
                    OfflineRetailV2.Report.Sales.repInvTax rep_InvTax = new OfflineRetailV2.Report.Sales.repInvTax();
                    OfflineRetailV2.Report.Sales.repPPInvTendering rep_InvTendering = new OfflineRetailV2.Report.Sales.repPPInvTendering();
                    OfflineRetailV2.Report.Sales.repInvGC rep_InvGC = new OfflineRetailV2.Report.Sales.repInvGC();
                    OfflineRetailV2.Report.Sales.repInvMGC rep_InvMGC = new OfflineRetailV2.Report.Sales.repInvMGC();
                    OfflineRetailV2.Report.Sales.repInvCC rep_InvCC = new OfflineRetailV2.Report.Sales.repInvCC();
                    OfflineRetailV2.Report.Sales.repInvHA rep_InvHA = new OfflineRetailV2.Report.Sales.repInvHA();
                    OfflineRetailV2.Report.Sales.repInvSC rep_InvSC = new OfflineRetailV2.Report.Sales.repInvSC();

                    OfflineRetailV2.Report.Sales.repInvSign rep_InvSign = new OfflineRetailV2.Report.Sales.repInvSign();
                    OfflineRetailV2.Report.Sales.repInvCoupon rep_InvCoupon = new OfflineRetailV2.Report.Sales.repInvCoupon();
                    rep_InvMain.rReprint.Text = "";
                    if (Settings.ReceiptFooter == "")
                    {
                        rep_InvMain.rReportFooter.HeightF = 1.0f;
                        rep_InvMain.rReportFooter.LocationF = new System.Drawing.PointF(8, 2);
                        rep_InvMain.xrBarCode.LocationF = new System.Drawing.PointF(8, 5);
                        rep_InvMain.rCopy.LocationF = new System.Drawing.PointF(567, 5);

                        rep_InvMain.xrShape1.LocationF = new System.Drawing.PointF(581, 25);
                        rep_InvMain.xrPageInfo2.LocationF = new System.Drawing.PointF(594, 25);
                        rep_InvMain.xrPageInfo1.LocationF = new System.Drawing.PointF(681, 25);
                        rep_InvMain.xrShape2.LocationF = new System.Drawing.PointF(725, 25);

                        rep_InvMain.ReportFooter.Height = 60;
                        rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                    }
                    else
                    {
                        rep_InvMain.ReportFooter.Height = 91;
                        rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;

                    }


                    rep_InvMain.subrepH1.ReportSource = rep_InvHeader1;
                    rep_InvHeader1.Report.DataSource = dtbl;
                    rep_InvHeader1.rReprint.Text = "";
                    GeneralFunctions.MakeReportWatermark(rep_InvMain);
                    rep_InvHeader1.rReportHeaderCompany.Text = Settings.ReceiptHeader_Company;
                    rep_InvHeader1.rReportHeader.Text = Settings.ReceiptHeader_Address;
                    rep_InvHeader1.rTraining.Visible = Settings.PrintTrainingMode == "Y";
                    if (strservice == "Sales") rep_InvHeader1.rRefundCaption.Visible = dblOrderTotal < 0;
                    int WO = FetchWorkorderNo(intINVQT);
                    if (WO != 0)
                    {
                        rep_InvHeader1.rType.Text = Properties.Resources.Work_Order__ + WO.ToString() + "    " + Properties.Resources.Date + " : " + GeneralFunctions.fnDate(FetchWorkorderDate(intINVQT)).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    }
                    else
                    {
                        rep_InvHeader1.rType.Text = "";
                    }

                    if (strservice == "Rent")
                    {
                        if (intHeaderStatus == 15) rep_InvHeader1.rType.Text = Properties.Resources.Rent_Issued;
                        if (intHeaderStatus == 16) rep_InvHeader1.rType.Text = Properties.Resources.Rent_Item_Returned;
                    }

                    int RprParent = 0;
                    if (strservice == "Repair")
                    {
                        if (intHeaderStatus == 17)
                        {
                            if (strRepairDeliveryDate != "") rep_InvHeader1.rType.Text = Properties.Resources.Repair_In + "      " + Properties.Resources.Expected_Delivety_Date__ + " : " + strRepairDeliveryDate;
                            else rep_InvHeader1.rType.Text = Properties.Resources.Repair_In;
                        }
                        if (intHeaderStatus == 18)
                        {
                            rep_InvHeader1.rType.Text = Properties.Resources.Repair_Delivered;
                            RprParent = FetchRepairParentID(intINVQT);
                        }
                    }
                    rep_InvHeader1.rOrderNo.Text = intINVQT.ToString();
                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        if (!boolnulllogo) rep_InvHeader1.rPic.DataBindings.Add("Image", dtbl, "Logo");
                    }
                    rep_InvHeader1.rOrderDate.DataBindings.Add("Text", dtbl, "TransDate");

                    rep_InvMain.xrBarCode.Text = intINVQT.ToString();

                    if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                    {
                        rep_InvHeader1.rOrderDate.DataBindings.Add("Text", dtbl, "RepairDateIn");
                    }


                    if (intCID > 0)
                    {
                        rep_InvMain.subrepH2.ReportSource = rep_InvHeader2;
                        rep_InvHeader2.Report.DataSource = dtbl;
                        rep_InvHeader2.rCustID.DataBindings.Add("Text", dtbl, "CustID");
                        rep_InvHeader2.rCustName.DataBindings.Add("Text", dtbl, "CustName");
                        rep_InvHeader2.rCompany.DataBindings.Add("Text", dtbl, "CustCompany");

                        if (intHeaderStatus == 3)
                        {
                            if (strCustomerDOB != "")
                            {
                                rep_InvHeader2.rlCustDOB.Text = Properties.Resources.Date_of_Birth;
                                rep_InvHeader2.rCustDOB.Text = GeneralFunctions.fnDate(strCustomerDOB).ToString(SystemVariables.DateFormat);
                            }
                        }

                        if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                        {
                            rep_InvHeader2.rlCustID.Text = Properties.Resources.Ph_;
                            rep_InvHeader2.rCustID.DataBindings.Add("Text", dtbl, "CustMobile");

                            rep_InvHeader2.rlCompany.DataBindings.Add("Text", dtbl, "RepairItemName");
                            rep_InvHeader2.rCompany.DataBindings.Add("Text", dtbl, "RepairItemSlNo");
                        }
                    }
                    else
                    {
                        if (intHeaderStatus == 3)
                        {
                            if (strCustomerDOB != "")
                            {
                                rep_InvMain.subrepH2.ReportSource = rep_InvHeader2;
                                rep_InvHeader2.Report.DataSource = dtbl;
                                rep_InvHeader2.rCustName.Text = "";
                                rep_InvHeader2.rCustID.Text = "";
                                rep_InvHeader2.rCompany.Text = "";
                                rep_InvHeader2.rlCustName.Text = "";
                                rep_InvHeader2.rlCustID.Text = "";
                                rep_InvHeader2.rlCompany.Text = "";

                                if (intHeaderStatus == 3)
                                {
                                    if (strCustomerDOB != "")
                                    {
                                        rep_InvHeader2.rlCustDOB.Text = Properties.Resources.Date_of_Birth;
                                        rep_InvHeader2.rCustDOB.Text = GeneralFunctions.fnDate(strCustomerDOB).ToString(SystemVariables.DateFormat);
                                    }
                                }
                            }
                        }
                    }

                    PosDataObject.POS objPOS2 = new PosDataObject.POS();
                    objPOS2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    if (intHeaderStatus != 18) dtbl1 = objPOS2.FetchInvoiceDetails1(intINVQT, dblOrderTotal < 0 ? true : false, Settings.TaxInclusive);
                    else dtbl1 = objPOS2.FetchInvoiceDetails1(RprParent, false, Settings.TaxInclusive);
                    RearrangeForTaggedItemInInvoice(dtbl1);
                    RearrangeForLineDisplay(dtbl1);
                    if ((intHeaderStatus == 16) && (calcrent == "Y"))
                    {
                        foreach (DataRow d in dtbl1.Rows)
                        {
                            d["Qty"] = -GeneralFunctions.fnDouble(d["Qty"].ToString());
                            d["TotalPrice"] = -GeneralFunctions.fnDouble(d["TotalPrice"].ToString());
                        }
                    }
                    if (strservice == "Rent")
                    {
                        if (intHeaderStatus == 15) // issue
                        {
                            rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                            rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                            rep_InvRentLine.Report.DataSource = dtbl1;
                            rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                            rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                            rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                            rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                            rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                            rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                            rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                            rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                            rep_InvLine.rManualWeight.DataBindings.Add("Text", dtbl1, "ExtraValue1");

                            if (Settings.ShowFeesInReceipt == "Y")
                            {
                                rep_InvRentLine.rFeesTxt.Visible = true;
                                rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                            }
                            else
                            {
                                rep_InvRentLine.rFeesTxt.Visible = false;
                            }
                        }
                        if (intHeaderStatus == 16) // return
                        {
                            if (calcrent == "N")
                            {
                                rep_InvMain.subrepLine.ReportSource = rep_InvRentReturnLine;
                                rep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                                rep_InvRentReturnLine.Report.DataSource = dtbl1;
                                rep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                rep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                rep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                rep_InvRentReturnLine.rlAmt.Visible = false;
                                rep_InvRentReturnLine.xrTableCell2.Visible = false;
                            }
                            if (calcrent == "Y")
                            {
                                rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                                rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                rep_InvRentLine.Report.DataSource = dtbl1;
                                rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    rep_InvRentLine.rFeesTxt.Visible = true;
                                    rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                }
                                else
                                {
                                    rep_InvRentLine.rFeesTxt.Visible = false;
                                }
                            }
                        }
                    }
                    else if (strservice == "Repair")
                    {
                        if (intHeaderStatus == 17) // issue
                        {
                            rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                            rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                            rep_InvRentLine.Report.DataSource = dtbl1;
                            rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                            rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                            rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                            rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                            rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                            rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                            rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                            rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                            if (Settings.ShowFeesInReceipt == "Y")
                            {
                                rep_InvRentLine.rFeesTxt.Visible = true;
                                rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                            }
                            else
                            {
                                rep_InvRentLine.rFeesTxt.Visible = false;
                            }
                        }
                        if (intHeaderStatus == 18) // return
                        {
                            rep_InvMain.subrepLine.ReportSource = rep_InvRentReturnLine;
                            rep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                            rep_InvRentReturnLine.Report.DataSource = dtbl1;
                            rep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                            rep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                            rep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                            rep_InvRentReturnLine.rlAmt.DataBindings.Add("Text", dtbl1, "TotalPrice");
                        }
                    }
                    else
                    {
                        rep_InvMain.subrepLine.ReportSource = rep_InvLine;
                        rep_InvLine.DecimalPlace = Settings.DecimalPlace;
                        rep_InvLine.Report.DataSource = dtbl1;
                        rep_InvLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                        rep_InvLine.rlSKU.DataBindings.Add("Text", dtbl1, "SKU");
                        rep_InvLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                        rep_InvLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                        rep_InvLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                        rep_InvLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                        rep_InvLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                        rep_InvLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                        rep_InvLine.rManualWeight.DataBindings.Add("Text", dtbl1, "ExtraValue1");
                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            rep_InvLine.rFeesTxt.Visible = true;
                            rep_InvLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                        }
                        else
                        {
                            rep_InvLine.rFeesTxt.Visible = false;
                        }
                    }

                    foreach (DataRow dr12 in dtbl1.Rows)
                    {
                        dblOrderSubtotal = dblOrderSubtotal + GeneralFunctions.fnDouble(dr12["TotalPrice"].ToString()) + GeneralFunctions.fnDouble(dr12["Discount"].ToString());
                    }

                    //dblOrderSubtotal = Settings.TaxInclusive == "N" ? dblOrderSubtotal : dblOrderSubtotal - dblTax;

                    if (strservice == "Rent")
                    {
                        if (intHeaderStatus == 15) // issue
                        {
                            rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentSubTotal;
                            rep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                            rep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                            rep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                            rep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                            rep_InvRentSubTotal.DR = strDiscountReason;
                            rep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                        }

                        if (intHeaderStatus == 16) // return
                        {
                            if (calcrent == "N")
                            {
                                if (dblOrderTotal != 0)
                                {
                                    rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentReturnSubTotal;
                                    rep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                    rep_InvRentReturnSubTotal.rReturnDeposit.Text = dblOrderTotal.ToString();
                                }
                            }

                            if (calcrent == "Y")
                            {
                                rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentReturnSubTotal;
                                rep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                rep_InvRentReturnSubTotal.rReturnDeposit.Text = (-dblRentDeposit).ToString();
                            }
                        }
                    }
                    else if (strservice == "Repair")
                    {
                        if (intHeaderStatus == 17) // issue
                        {
                            rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentSubTotal;
                            rep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                            rep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                            rep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                            rep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                            rep_InvRentSubTotal.DR = strDiscountReason;
                            rep_InvRentSubTotal.rw1.Visible = false;
                            rep_InvRentSubTotal.rw2.Visible = false;
                            rep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                        }
                    }
                    else
                    {
                        rep_InvMain.subrepSubtotal.ReportSource = rep_InvSubtotal;
                        rep_InvSubtotal.DecimalPlace = Settings.DecimalPlace;
                        rep_InvSubtotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                        rep_InvSubtotal.rDiscount.Text = dblDiscount.ToString();
                        rep_InvSubtotal.DR = strDiscountReason;
                        rep_InvSubtotal.rTax.Text = dblTax.ToString();


                    }

                    if (dblTax != 0)
                    {
                        dtbl2.Columns.Add("Name", System.Type.GetType("System.String"));
                        dtbl2.Columns.Add("Amount", System.Type.GetType("System.String"));

                        if (dblTax1 != 0)
                        {
                            dtbl2.Rows.Add(new object[] { strTaxNM1, dblTax1.ToString() });
                        }

                        if (dblTax2 != 0)
                        {
                            dtbl2.Rows.Add(new object[] { strTaxNM2, dblTax2.ToString() });
                        }

                        if (dblTax3 != 0)
                        {
                            dtbl2.Rows.Add(new object[] { strTaxNM3, dblTax3.ToString() });
                        }

                        if (dblDTax != 0)
                        {
                            dtbl2.Rows.Add(new object[] { "Dest. Tax: " + strDTaxNM, dblDTax.ToString() });
                        }

                        rep_InvMain.subrepTax.ReportSource = rep_InvTax;
                        rep_InvTax.DecimalPlace = Settings.DecimalPlace;

                        rep_InvTax.Report.DataSource = dtbl2;
                        rep_InvTax.rDTax1.DataBindings.Add("Text", dtbl2, "Name");
                        rep_InvTax.rDTax2.DataBindings.Add("Text", dtbl2, "Amount");
                    }

                    PosDataObject.POS objPOS23 = new PosDataObject.POS();
                    objPOS23.Connection = new SqlConnection(SystemVariables.ConnectionString);

                    if (intHeaderStatus != 18) dtbl5 = objPOS23.FetchInvoiceCoupons(intINVQT);
                    else dtbl5 = objPOS23.FetchInvoiceCoupons(RprParent);

                    if (dtbl5.Rows.Count > 0)
                    {
                        rep_InvMain.subrepCoupon.ReportSource = rep_InvCoupon;
                        rep_InvCoupon.DecimalPlace = Settings.DecimalPlace;
                        rep_InvCoupon.Report.DataSource = dtbl5;
                        rep_InvCoupon.rAmt.Text = dblCoupon.ToString();
                        rep_InvCoupon.rDTax1.DataBindings.Add("Text", dtbl5, "Name");
                        rep_InvCoupon.rDTax2.DataBindings.Add("Text", dtbl5, "Amount");
                    }

                    PosDataObject.POS objPOS4 = new PosDataObject.POS();
                    objPOS4.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dtbl3 = objPOS4.FetchInvoiceTender(intTranNo);
                    dtbl3 = RearrangeTenderForCashBack(intTranNo, dtbl3);

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    double dblTenderAmt = 0;
                    int TenderCount = 0;
                    TenderCount = dtbl3.Rows.Count;
                    foreach (DataRow dr1 in dtbl3.Rows)
                    {
                        if (dr1["DisplayAs"].ToString() == "Debit Card Total") continue;
                        dblTenderAmt = dblTenderAmt + GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                        if (dr1["Name"].ToString() == "House Account") boolHATender = true;
                        if (dr1["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }

                    rep_InvMain.subrepTender.ReportSource = rep_InvTendering;
                    rep_InvTendering.Report.DataSource = dtbl3;
                    rep_InvTendering.DecimalPlace = Settings.DecimalPlace;

                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intINVQT, intCID);
                        rep_InvMain.subrepHA.ReportSource = rep_InvHA;
                        rep_InvHA.DecimalPlace = Settings.DecimalPlace;
                        rep_InvHA.rAmt.Text = dval.ToString();
                    }

                    if (boolSCrdtTender)
                    {
                        PosDataObject.POS objscrtbal = new PosDataObject.POS();
                        objscrtbal.Connection = SystemVariables.Conn;
                        double dval = objscrtbal.GetCustomerStoreCreditBalance(intCID);
                        rep_InvMain.subrepSCrdt.ReportSource = rep_InvSC;
                        rep_InvSC.DecimalPlace = Settings.DecimalPlace;
                        rep_InvSC.rAmt.Text = dval.ToString();
                    }

                    if (TenderCount == 0) rep_InvTendering.lbTenderText.Text = "";

                    if (Settings.ShowFeesInReceipt == "Y")
                    {
                        bool bfdata = false;
                        bool bftx = false;
                        DataTable dFees = FetchInvFees(intINVQT);
                        if (dblFees + dblFeesCoupon != 0)
                        {
                            if (dFees.Rows.Count == 1) rep_InvTendering.lbFees.Text = dFees.Rows[0]["FeesName"].ToString();
                            rep_InvTendering.rFees.Text = (dblFees + dblFeesCoupon).ToString();
                            rep_InvTendering.rFees.Visible = true;
                            rep_InvTendering.lbFees.Visible = true;
                        }
                        else
                        {
                            bfdata = true;
                        }
                        if (dblFeesTax + dblFeesCouponTax != 0)
                        {
                            if (dFees.Rows.Count == 1) rep_InvTendering.lbFeeTx.Text = dFees.Rows[0]["FeesName"].ToString() + " " + "Tax";
                            rep_InvTendering.rFeeTx.Text = (dblFeesTax + dblFeesCouponTax).ToString();
                            rep_InvTendering.rFeeTx.Visible = true;
                            rep_InvTendering.lbFeeTx.Visible = true;
                        }
                        else
                        {
                            bftx = true;
                        }
                        if ((bfdata) && (bftx))
                        {
                            rep_InvTendering.ReportHeader.Visible = false;
                        }
                    }

                    if ((intHeaderStatus == 15) && (calcrent == "Y")) rep_InvTendering.rTotal.Text = dblRentDeposit.ToString();
                    else if ((intHeaderStatus == 15) && (calcrent == "N")) rep_InvTendering.rTotal.Text = (dblOrderTotal + dblRentDeposit).ToString();
                    else rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                    //rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                    rep_InvTendering.rTenderName.DataBindings.Add("Text", dtbl3, "DisplayAs");
                    rep_InvTendering.rTenderAmt.DataBindings.Add("Text", dtbl3, "Amount");

                    if (strservice == "Repair")
                    {
                        string MFooter = "";
                        if ((Settings.ReceiptFooter == "") && (Settings.ReceiptLayawayPolicy == ""))
                        {
                            rep_InvMain.ReportFooter.Height = 35;
                            rep_InvMain.rReportFooter.Text = "";
                        }
                        else
                        {
                            if (Settings.ReceiptFooter != "") MFooter = Properties.Resources.CUSTOMER_AGREEMENT_ + Settings.ReceiptFooter;
                            if (Settings.ReceiptLayawayPolicy != "")
                            {
                                if (Settings.ReceiptFooter == "") MFooter = Properties.Resources.REPAIR_DISCLAIMER_ + Settings.ReceiptLayawayPolicy;
                                else MFooter = MFooter + " \n " + Properties.Resources.REPAIR_DISCLAIMER_ + Settings.ReceiptLayawayPolicy;
                            }
                            rep_InvMain.ReportFooter.Height = 130;
                            rep_InvMain.rReportFooter.Text = MFooter;

                        }

                        rep_InvMain.subrepRepairSign.ReportSource = rep_InvSign;

                        if (intHeaderStatus == 17)
                        {
                            rep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                            rep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                            rep_InvTendering.rlbDue.Text = Properties.Resources.Balance_Due;
                            rep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();

                            rep_InvSign.rTxt.Text = Properties.Resources.I_AGREE_TO_PAY + " " + (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                        }
                        if (intHeaderStatus == 18)
                        {
                            if (dblRepairAdvanceAmount > 0)
                            {
                                rep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                                rep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                                rep_InvTendering.rlbDue.Text = Properties.Resources.Balance_Due;
                                rep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                            }
                            else
                            {
                                rep_InvTendering.rlbAdvance.Text = "";
                                rep_InvTendering.rAdvance.Text = "";
                                rep_InvTendering.rlbDue.Text = "";
                                rep_InvTendering.rDue.Text = "";

                                rep_InvTendering.rtr1.HeightF = 1.0f;
                                rep_InvTendering.rtr2.HeightF = 1.0f;
                                rep_InvTendering.rtbl.HeightF = 55.0f;
                                rep_InvTendering.PageHeader.HeightF = 55.0f;
                            }
                            rep_InvSign.rTxt.Text = "";
                        }
                    }
                    else
                    {
                        rep_InvTendering.rlbAdvance.Text = "";
                        rep_InvTendering.rAdvance.Text = "";
                        rep_InvTendering.rlbDue.Text = "";
                        rep_InvTendering.rDue.Text = "";

                        rep_InvTendering.rtr1.HeightF = 1.0f;
                        rep_InvTendering.rtr2.HeightF = 1.0f;
                        rep_InvTendering.rtbl.HeightF = 55.0f;
                        rep_InvTendering.PageHeader.HeightF = 55.0f;
                    }

                    double EffectiveTotal = 0;
                    if ((intHeaderStatus == 15) && (calcrent == "Y")) EffectiveTotal = dblRentDeposit;
                    else if ((intHeaderStatus == 15) && (calcrent == "N")) EffectiveTotal = dblOrderTotal + dblRentDeposit;
                    else if (intHeaderStatus == 17) EffectiveTotal = dblRepairAdvanceAmount;
                    else if (intHeaderStatus == 18) EffectiveTotal = dblRepairAmount - dblRepairAdvanceAmount;
                    else EffectiveTotal = dblOrderTotal;

                    if (dblTenderAmt != EffectiveTotal)
                    {
                        rep_InvTendering.ChangeDue = true;
                        rep_InvTendering.ReportFooter.Visible = true;
                        rep_InvTendering.rChangeDueText.Text = Properties.Resources.Change;
                        rep_InvTendering.rChangeDue.Text = Convert.ToString(dblTenderAmt - EffectiveTotal);
                    }
                    else
                    {
                        rep_InvTendering.ChangeDue = false;
                        rep_InvTendering.ReportFooter.Visible = false;
                    }

                    if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                    {
                        //rep_InvTendering.ChangeDue = false;
                        //rep_InvTendering.ReportFooter.Visible = false;
                    }

                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        PosDataObject.POS objPOS5 = new PosDataObject.POS();
                        objPOS5.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dtbl4 = objPOS5.ActiveGiftCert(intINVQT, Settings.CentralExportImport, Settings.StoreCode);
                        if (dtbl4.Rows.Count > 0)
                        {
                            rep_InvMain.subrepGC.ReportSource = rep_InvGC;
                            rep_InvGC.Report.DataSource = dtbl4;
                            rep_InvGC.DecimalPlace = Settings.DecimalPlace;
                            rep_InvGC.rGCHeader.Text = Properties.Resources.Gift_Cert__with_balance_as_on__ + DateTime.Today.Date.ToShortDateString();
                            rep_InvGC.rGCName.DataBindings.Add("Text", dtbl4, "GC");
                            rep_InvGC.rGCAmt.DataBindings.Add("Text", dtbl4, "GCAMT");
                        }
                    }

                    // EBT Balance on Receipt

                    PosDataObject.POS objPOS87 = new PosDataObject.POS();
                    objPOS87.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    DataTable dtblEBT = objPOS87.FetchEBTBalanceFromReceipt(intINVQT);
                    if (dtblEBT.Rows.Count > 0)
                    {
                        OfflineRetailV2.Report.Sales.repInvEBT rep_InvEBT = new OfflineRetailV2.Report.Sales.repInvEBT();
                        rep_InvMain.subrepEBT.ReportSource = rep_InvEBT;
                        rep_InvEBT.Report.DataSource = dtblEBT;
                        rep_InvEBT.DecimalPlace = Settings.DecimalPlace;

                        rep_InvEBT.rEBTCard.DataBindings.Add("Text", dtblEBT, "CardNo");
                        rep_InvEBT.rEBTBal.DataBindings.Add("Text", dtblEBT, "CardBalance");
                    }

                    int prmmgc = 0;
                    PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                    obcc01mgc.Connection = SystemVariables.Conn;
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intINVQT);
                    DataTable ccdtbl11mgc = new DataTable();
                    PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                    obcc11mgc.Connection = SystemVariables.Conn;
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                    if (ccdtbl11mgc.Rows.Count > 0)
                    {
                        rep_InvMain.subrepMGC.ReportSource = rep_InvMGC;
                        rep_InvMGC.Report.DataSource = ccdtbl11mgc;
                        rep_InvMGC.DecimalPlace = Settings.DecimalPlace;
                        rep_InvMGC.rGCName.DataBindings.Add("Text", ccdtbl11mgc, "RefCardAct");
                        rep_InvMGC.rGCAmt.DataBindings.Add("Text", ccdtbl11mgc, "RefCardBalance");
                    }

                    if (Settings.POSPrintInvoice == 0)
                    {
                        //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
                        try
                        {
                            if (Settings.ReportPrinterName != "") rep_InvMain.PrinterName = Settings.ReportPrinterName;
                            rep_InvMain.CreateDocument();
                            rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                            rep_InvMain.PrintingSystem.ShowPrintStatusDialog = false;

                            //rep_InvMain.ShowPreviewDialog();

                            DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                            window.PreviewControl.DocumentSource = rep_InvMain;
                            window.ShowDialog();

                        }
                        finally
                        {
                            rep_InvMain.Dispose();
                            rep_InvHeader1.Dispose();
                            rep_InvHeader2.Dispose();
                            rep_InvLine.Dispose();
                            rep_InvSubtotal.Dispose();
                            rep_InvTax.Dispose();
                            rep_InvTendering.Dispose();
                            rep_InvGC.Dispose();
                            rep_InvHA.Dispose();
                            rep_InvSign.Dispose();
                            rep_InvCoupon.Dispose();

                            dtbl.Dispose();
                            dtbl1.Dispose();
                            dtbl2.Dispose();
                            dtbl3.Dispose();
                            dtbl4.Dispose();
                            dtbl5.Dispose();
                            ccdtbl11mgc.Dispose();
                        }
                    }

                    if (Settings.POSPrintInvoice == 1)
                    {
                        try
                        {
                            rep_InvMain.CreateDocument();
                            rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                            rep_InvMain.PrinterName = Settings.ReceiptPrinterName;
                            GeneralFunctions.PrintReport(rep_InvMain);
                        }
                        catch
                        {
                        }
                        finally
                        {
                            rep_InvMain.Dispose();
                            rep_InvHeader1.Dispose();
                            rep_InvHeader2.Dispose();
                            rep_InvLine.Dispose();
                            rep_InvSubtotal.Dispose();
                            rep_InvTax.Dispose();
                            rep_InvTendering.Dispose();
                            rep_InvGC.Dispose();
                            rep_InvHA.Dispose();
                            rep_InvCoupon.Dispose();
                            rep_InvSign.Dispose();
                            dtbl.Dispose();
                            dtbl1.Dispose();
                            dtbl2.Dispose();
                            dtbl3.Dispose();
                            dtbl4.Dispose();
                            dtbl5.Dispose();
                        }
                    }



















                }
                else // Preprinted format
                {
                    bool printlayaway = false;
                    if ((blLayawayQT) || (blNewLayawayQT) || (blLayawayRefundQT)) printlayaway = true;
                    if (printlayaway)
                    {
                        ExecuteCustomerReport();
                        return;
                    }
                    DataTable dtbl = new DataTable();
                    PosDataObject.POS objPOS1 = new PosDataObject.POS();
                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dtbl = objPOS1.FetchInvoiceHeader(intINVQT, Settings.StoreCode);

                    DataTable dlogo = new DataTable();
                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dlogo = objPOS1.FetchStoreLogo();
                    bool boolnulllogo = false;
                    foreach (DataRow drl1 in dtbl.Rows)
                    {
                        foreach (DataRow drl2 in dlogo.Rows)
                        {
                            if (drl2["logo"] == null) boolnulllogo = true;
                            drl1["Logo"] = drl2["logo"];
                        }
                    }

                    int intTranNo = 0;
                    double dblOrderTotal = 0;
                    double dblOrderSubtotal = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTax = 0;
                    int intCID = 0;
                    string strCInfo = "";
                    string strDiscountReason = "";
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    string strTaxNM1 = "";
                    string strTaxNM2 = "";
                    string strTaxNM3 = "";
                    string strservice = "";
                    int intHeaderStatus = 0;
                    double dblRentDeposit = 0;
                    double dblRepairAmount = 0;
                    double dblRepairAdvanceAmount = 0;
                    string strRepairDeliveryDate = "";
                    string calcrent = "N";

                    foreach (DataRow dr in dtbl.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intCID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                        dblOrderTotal = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        strTaxNM1 = dr["TaxNM1"].ToString();
                        strTaxNM2 = dr["TaxNM2"].ToString();
                        strTaxNM3 = dr["TaxNM3"].ToString();

                        strDiscountReason = dr["DiscountReason"].ToString();
                        strservice = dr["ServiceType"].ToString();
                        intHeaderStatus = GeneralFunctions.fnInt32(dr["Status"].ToString());
                        dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                        dblRepairAmount = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        dblRepairAdvanceAmount = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        if (dr["RepairDeliveryDate"].ToString() != "") strRepairDeliveryDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToShortDateString();
                        calcrent = dr["IsRentCalculated"].ToString();
                        strCInfo = dr["CustDetails"].ToString();
                    }



                    DataTable dtbl1 = new DataTable();
                    DataTable dtbl2 = new DataTable();
                    DataTable dtbl3 = new DataTable();
                    DataTable dtbl4 = new DataTable();
                    DataTable dtbl5 = new DataTable();

                    OfflineRetailV2.Report.Sales.PrePrint.repPPInv rep_InvMain = new OfflineRetailV2.Report.Sales.PrePrint.repPPInv();
                    OfflineRetailV2.Report.Sales.PrePrint.repPPInvHeader rep_InvHeader1 = new OfflineRetailV2.Report.Sales.PrePrint.repPPInvHeader();
                    OfflineRetailV2.Report.Sales.PrePrint.repPPInvLine rep_InvLine = new OfflineRetailV2.Report.Sales.PrePrint.repPPInvLine();
                    OfflineRetailV2.Report.Sales.PrePrint.repPPInvSubtotal rep_InvSubtotal = new OfflineRetailV2.Report.Sales.PrePrint.repPPInvSubtotal();
                    OfflineRetailV2.Report.Sales.PrePrint.repPPInvTax rep_InvTax = new OfflineRetailV2.Report.Sales.PrePrint.repPPInvTax();
                    OfflineRetailV2.Report.Sales.PrePrint.repPPInvTendering rep_InvTendering = new OfflineRetailV2.Report.Sales.PrePrint.repPPInvTendering();

                    OfflineRetailV2.Report.Sales.PrePrint.repPPLayLine rep_PPLayLine = new OfflineRetailV2.Report.Sales.PrePrint.repPPLayLine();

                    GeneralFunctions.MakeReportWatermark(rep_InvMain);
                    rep_InvMain.rReportHeader.Text = Settings.MainReceiptHeader;
                    if (Settings.DemoVersion == "Y") rep_InvHeader1.rDemo.Visible = true;
                    else rep_InvHeader1.rDemo.Visible = false;

                    rep_InvMain.subrepH.ReportSource = rep_InvHeader1;
                    rep_InvHeader1.Report.DataSource = dtbl;

                    rep_InvHeader1.rOrder.Text = intINVQT.ToString();
                    rep_InvHeader1.rDate.DataBindings.Add("Text", dtbl, "TransDate");
                    rep_InvHeader1.rTime.DataBindings.Add("Text", dtbl, "TransDate");

                    if (intCID > 0)
                    {
                        rep_InvHeader1.rCustomer.DataBindings.Add("Text", dtbl, "CustID");
                        rep_InvHeader1.rCustDetails.DataBindings.Add("Text", dtbl, "CustDetails");
                    }
                    else
                    {
                        rep_InvHeader1.rCustomer.Visible = false;
                        rep_InvHeader1.rCustDetails.Visible = false;
                    }

                    rep_InvHeader1.rClerk.DataBindings.Add("Text", dtbl, "EmpID");
                    rep_InvHeader1.rStore.DataBindings.Add("Text", dtbl, "StoreID");
                    rep_InvHeader1.rRegister.DataBindings.Add("Text", dtbl, "RegisterID");

                    PosDataObject.POS objPOS2 = new PosDataObject.POS();
                    objPOS2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dtbl1 = objPOS2.FetchInvoiceDetails1(intINVQT, dblOrderTotal < 0 ? true : false, Settings.TaxInclusive);
                    RearrangeForTaggedItemInInvoice(dtbl1);

                    rep_InvMain.subrepL.ReportSource = rep_InvLine;
                    rep_InvLine.DecimalPlace = Settings.DecimalPlace;
                    rep_InvLine.Report.DataSource = dtbl1;
                    rep_InvLine.rQty.DataBindings.Add("Text", dtbl1, "Qty");
                    rep_InvLine.rSKU.DataBindings.Add("Text", dtbl1, "SKU");
                    rep_InvLine.rItem.DataBindings.Add("Text", dtbl1, "Description");
                    rep_InvLine.rRate.DataBindings.Add("Text", dtbl1, "Price");
                    rep_InvLine.rTot.DataBindings.Add("Text", dtbl1, "TotalPrice");
                    rep_InvLine.rDisc.DataBindings.Add("Text", dtbl1, "DiscountInfo");

                    foreach (DataRow dr12 in dtbl1.Rows)
                    {
                        dblOrderSubtotal = dblOrderSubtotal + GeneralFunctions.fnDouble(dr12["TotalPrice"].ToString()); //+ GeneralFunctions.fnDouble(dr12["Discount"].ToString());
                    }

                    //dblOrderSubtotal = Settings.TaxInclusive == "N" ? dblOrderSubtotal : dblOrderSubtotal - dblTax;

                    rep_InvMain.subrepS.ReportSource = rep_InvSubtotal;
                    rep_InvSubtotal.DecimalPlace = Settings.DecimalPlace;
                    rep_InvSubtotal.rSubTotal.Text = dblOrderSubtotal.ToString();

                    if (dblTax != 0)
                    {
                        dtbl2.Columns.Add("Name", System.Type.GetType("System.String"));
                        dtbl2.Columns.Add("Amount", System.Type.GetType("System.String"));

                        if (dblTax1 != 0)
                        {
                            dtbl2.Rows.Add(new object[] { strTaxNM1, dblTax1.ToString() });
                        }

                        if (dblTax2 != 0)
                        {
                            dtbl2.Rows.Add(new object[] { strTaxNM2, dblTax2.ToString() });
                        }

                        if (dblTax3 != 0)
                        {
                            dtbl2.Rows.Add(new object[] { strTaxNM3, dblTax3.ToString() });
                        }

                        rep_InvMain.subrepX.ReportSource = rep_InvTax;
                        rep_InvTax.DecimalPlace = Settings.DecimalPlace;

                        rep_InvTax.Report.DataSource = dtbl2;
                        rep_InvTax.rDTax1.DataBindings.Add("Text", dtbl2, "Name");
                        rep_InvTax.rDTax2.DataBindings.Add("Text", dtbl2, "Amount");
                    }

                    PosDataObject.POS objPOS4 = new PosDataObject.POS();
                    objPOS4.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dtbl3 = objPOS4.FetchInvoiceTender(intTranNo);
                    dtbl3 = RearrangeTenderForCashBack(intTranNo, dtbl3);
                    double dblTenderAmt = 0;

                    foreach (DataRow dr1 in dtbl3.Rows)
                    {
                        if (dr1["DisplayAs"].ToString() == "Debit Card Total") continue;
                        dblTenderAmt = dblTenderAmt + GeneralFunctions.fnDouble(dr1["Amount"].ToString());
                    }

                    rep_InvMain.subrepT.ReportSource = rep_InvTendering;
                    rep_InvTendering.Report.DataSource = dtbl3;
                    rep_InvTendering.DecimalPlace = Settings.DecimalPlace;
                    rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();
                    rep_InvTendering.rTenderName.DataBindings.Add("Text", dtbl3, "DisplayAs");
                    rep_InvTendering.rTenderAmt.DataBindings.Add("Text", dtbl3, "Amount");

                    double EffectiveTotal = 0;

                    EffectiveTotal = dblOrderTotal;

                    if (dblTenderAmt != EffectiveTotal)
                    {

                    }
                    else
                    {

                    }

                    if (Settings.POSPrintInvoice == 0)
                    {

                        //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
                        try
                        {
                            if (Settings.ReportPrinterName != "") rep_InvMain.PrinterName = Settings.ReportPrinterName;
                            rep_InvMain.CreateDocument();
                            rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                            rep_InvMain.PrintingSystem.ShowPrintStatusDialog = false;

                            //rep_InvMain.ShowPreviewDialog();

                            DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                            window.PreviewControl.DocumentSource = rep_InvMain;
                            window.ShowDialog();

                        }
                        finally
                        {
                            rep_InvMain.Dispose();
                            rep_InvHeader1.Dispose();
                            rep_InvLine.Dispose();
                            rep_InvSubtotal.Dispose();
                            rep_InvTax.Dispose();
                            rep_InvTendering.Dispose();

                            dtbl.Dispose();
                            dtbl1.Dispose();
                            dtbl2.Dispose();
                            dtbl3.Dispose();
                            dtbl4.Dispose();
                            dtbl5.Dispose();
                        }
                    }

                    if (Settings.POSPrintInvoice == 1)
                    {
                        try
                        {
                            rep_InvMain.CreateDocument();
                            rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                            rep_InvMain.PrinterName = Settings.ReceiptPrinterName;
                            GeneralFunctions.PrintReport(rep_InvMain);
                        }
                        catch
                        {
                        }
                        finally
                        {
                            rep_InvMain.Dispose();
                            rep_InvHeader1.Dispose();
                            rep_InvLine.Dispose();
                            rep_InvSubtotal.Dispose();
                            rep_InvTax.Dispose();
                            rep_InvTendering.Dispose();
                            dtbl.Dispose();
                            dtbl1.Dispose();
                            dtbl2.Dispose();
                            dtbl3.Dispose();
                            dtbl4.Dispose();
                            dtbl5.Dispose();
                        }
                    }
                }
            }
        }

        private void RearrangeForTaggedItemInInvoice(DataTable dtbl)
        {
            foreach (DataRow dr in dtbl.Rows)
            {
                if ((dr["ProductType"].ToString() == "T") && (dr["TaggedInInvoice"].ToString() == "Y"))
                {
                    double qty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    DataTable ptbl = new DataTable();
                    PosDataObject.Product objp = new PosDataObject.Product();
                    objp.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    ptbl = objp.FetchTaggedData(GeneralFunctions.fnInt32(dr["ProductID"].ToString()));
                    string str = "";
                    foreach (DataRow dr1 in ptbl.Rows)
                    {
                        double val = qty * GeneralFunctions.fnDouble(dr1["ItemQty"].ToString());
                        if (str == "")
                        {
                            str = dr1["ItemName"].ToString() + "   " + val.ToString();
                        }
                        else
                        {
                            str = str + "\n" + dr1["ItemName"].ToString() + "   " + val.ToString();
                        }
                    }
                    string pval = dr["Description"].ToString() + "\n" + str;
                    dr["Description"] = pval;
                }
            }
        }

        private void RearrangeForLineDisplay(DataTable dtbl)
        {
            foreach (DataRow dr in dtbl.Rows)
            {

                if (dr["ProductType"].ToString() == "W")
                {
                    dr["Price"] = dr["Price"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["Price"].ToString()).ToString()) + "/" + dr["UOM"].ToString().ToString();
                    dr["NormalPrice"] = dr["NormalPrice"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["NormalPrice"].ToString()).ToString()) + "/" + dr["UOM"].ToString().ToString();
                }
                else
                {
                    dr["Price"] = dr["Price"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["Price"].ToString()).ToString());
                    dr["NormalPrice"] = dr["NormalPrice"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["NormalPrice"].ToString()).ToString());
                }

                dr["Qty"] = dr["Qty"].ToString() == "" ? "" : GetDisplayQty(dr["Qty"].ToString(), dr["QtyDecimal"].ToString(), dr["ProductType"].ToString());

                if ((Settings.ScaleDevice == "(None)") && (dr["ProductType"].ToString() == "W"))
                {
                    dr["ExtraValue1"] = "Manual Weight";
                }
            }
        }

        private void RearrangeForLineDisplay1(DataTable dtbl)
        {
            foreach (DataRow dr in dtbl.Rows)
            {

                if (dr["ProductType"].ToString() == "W")
                {
                    dr["Price"] = dr["Price"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["Price"].ToString()).ToString()) + "/" + dr["UOM"].ToString().ToString();
                    dr["NormalPrice"] = dr["NormalPrice"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["NormalPrice"].ToString()).ToString()) + "/" + dr["UOM"].ToString().ToString();
                }
                else
                {
                    dr["Price"] = dr["Price"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["Price"].ToString()).ToString());
                    dr["NormalPrice"] = dr["NormalPrice"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["NormalPrice"].ToString()).ToString());
                }

                dr["Qty"] = dr["Qty"].ToString() == "" ? "" : GetDisplayQty(dr["Qty"].ToString(), "", dr["ProductType"].ToString());

                if ((Settings.ScaleDevice == "(None)") && (dr["ProductType"].ToString() == "W"))
                {
                    dr["ExtraValue1"] = "Manual Weight";
                }
            }
        }

        private string GetDisplayQty(string pQty, string pDecimal, string pProdType)
        {
            string ReturnS = pQty;
            bool minusval = false;
            if (pQty.StartsWith("-"))
            {
                minusval = true;
                pQty = pQty.Remove(0, 1);
            }
            if (pDecimal == "")
            {
                ReturnS = pQty;
            }
            else
            {
                if ((pProdType == "Z") || (pProdType == "C") || (pProdType == "H"))
                {
                    ReturnS = pQty;
                }
                else
                {
                    decimal dQty = GeneralFunctions.fnDecimal(pQty);
                    int IPart = (int)Decimal.Truncate(dQty);
                    Decimal decimal_part = dQty - Decimal.Truncate(IPart);
                    if (decimal_part == 0)
                    {
                        ReturnS = IPart.ToString();
                    }
                    else
                    {
                        if (pDecimal == "0")
                        {
                            ReturnS = pQty;
                        }
                        else
                        {
                            string TempDecimal = "";
                            string strDecimal = decimal_part.ToString();
                            TempDecimal = strDecimal.Substring(2);

                            if (pDecimal == "1") ReturnS = String.Format("{0:0.0}", GeneralFunctions.fnDecimal(IPart + "." + TempDecimal));
                            if (pDecimal == "2") ReturnS = String.Format("{0:0.00}", GeneralFunctions.fnDecimal(IPart + "." + TempDecimal));
                            if (pDecimal == "3") ReturnS = String.Format("{0:0.000}", GeneralFunctions.fnDecimal(IPart + "." + TempDecimal));

                        }
                    }
                }
            }
            if (pProdType == "W")
            {
                ReturnS = ReturnS + " lb";
            }
            if (minusval)
            {
                ReturnS = "(" + ReturnS + ")";
            }
            return ReturnS;
        }


        public void GetPrintStream()
        {
            string SP1 = new string(' ', Settings.NoOfPrintSpace1);
            if (Settings.DemoVersion == "Y")
            {
                dtblstrm.Rows.Add(new object[] { "", "*** DEMO VERSION ***", "", "" });
                dtblstrm.Rows.Add(new object[] { "", "", "", "" });
            }

            dtblstrm.Rows.Add(new object[] { "", "* " + prevPrinterName + " *", "", "" });

            dtblstrm.Rows.Add(new object[] { "", "Invoice # : " + PrintOrderNo.ToString(), "", "" });
            dtblstrm.Rows.Add(new object[] { "", DateTime.Now.ToString(SystemVariables.DateFormat + " hh:mm:ss tt"), "", "" });

            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

            DataTable prndtblINV = new DataTable();

            int intTranNo = 0;
            int intStoreID = 0;
            int intRegisterID = 0;
            string strEmpID = "";
            string strTransDate = "";

            dtblPrintData.DefaultView.Sort = "UniqueNo asc";
            dtblPrintData.DefaultView.ApplyDefaultSort = true;
            int currst = 0;
            int pervst = 0;
            int stcnt = 0;

            foreach (DataRowView dr in dtblPrintData.DefaultView)
            {
                if (prevPrinterID != GeneralFunctions.fnInt32(dr["PrinterID"].ToString())) continue;
                strTransDate = DateTime.Now.ToString(SystemVariables.DateFormat + " hh:mm:ss tt");


                dtblstrm.Rows.Add(new object[] { "QTY - " + dr["Qty"].ToString(), "", "", "" });
                string spd1 = "";
                string spd2 = "";
                string spd3 = "";
                SetProductDesc(dr["Menu"].ToString(), dr["SKU"].ToString(), ref spd1, ref spd2, ref spd3);
                if (spd1 != "")
                {
                    dtblstrm.Rows.Add(new object[] { spd1, "", "", "" });
                }
                if (spd2 != "")
                {
                    dtblstrm.Rows.Add(new object[] { spd2, "", "", "" });
                }
                if (spd3 != "")
                {
                    dtblstrm.Rows.Add(new object[] { spd3, "", "", "" });
                }
                dtblstrm.Rows.Add(new object[] { "", "", "", "" });
            }
        }

        private DataTable FetchInvFees(int pInvNo)
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchFeesInInvoice(pInvNo);
        }

        private void SetProductDesc(string PD, string SKU, ref string PD1, ref string PD2, ref string PD3)
        {
            int intFirstLine = 0;
            intFirstLine = 40;

            bool fl = false;
            bool sl = false;
            bool tl = false;

            if ((PD.Length + SKU.Length + 3) <= intFirstLine)
            {
                PD1 = SKU + " - " + PD;
                PD2 = "";
                PD3 = "";
            }
            else
            {
                string stradd = "";

                foreach (char c in SKU + " - " + PD + "\n")
                {
                    if ((c.ToString() != " ") && (c.ToString() != "\n"))
                        stradd = stradd + c.ToString();

                    if ((!fl) && (!sl) && (!tl))
                    {
                        if (PD1.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD1 == "")
                                    PD1 = stradd;
                                else
                                    PD1 = PD1 + " " + stradd;

                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD1 == "")
                                    PD1 = stradd;
                                else
                                    PD1 = PD1 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            fl = true;
                        }
                    }
                    else if ((fl) && (!sl) && (!tl))
                    {
                        if (PD2.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD2 == "")
                                    PD2 = stradd;
                                else
                                    PD2 = PD2 + " " + stradd;
                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD2 == "")
                                    PD2 = stradd;
                                else
                                    PD2 = PD2 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            sl = true;
                        }
                    }

                    else if ((fl) && (sl) && (!tl))
                    {
                        if (PD3.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD3 == "")
                                    PD3 = stradd;
                                else
                                    PD3 = PD3 + " " + stradd;
                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD3 == "")
                                    PD3 = stradd;
                                else
                                    PD3 = PD3 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            tl = true;
                        }
                    }
                    else
                    {
                    }

                }
            }
        }


        // Preprinted Layout Report

        private void ExecuteCustomerReport()
        {
            double tot = 0;
            double pmt = 0;

            //frmPreviewControl frm_PreviewControl = new frmPreviewControl();

            DataTable dtbl = new DataTable();
            PosDataObject.POS objSales = new PosDataObject.POS();
            objSales.Connection = SystemVariables.Conn;
            dtbl = objSales.FetchLayawayHeaderForPreprint(LayawayNoForInvoicePrinting(), intLAYTRANQT, false, Settings.StoreCode);

            if (dtbl.Rows.Count == 0)
            {
                DocMessage.MsgInformation(Properties.Resources.No_Record_found_for_Printing);
                dtbl.Dispose();
                return;
            }


            OfflineRetailV2.Report.Layaway.repLayawayPP rep_LayawayCust = new OfflineRetailV2.Report.Layaway.repLayawayPP();
            GeneralFunctions.MakeReportWatermark(rep_LayawayCust);
            rep_LayawayCust.rReportHeader.Text = Settings.ReportHeader;
            //rep_LayawayCust.DecimalPlace = Settings.DecimalPlace;

            DataTable p = new DataTable("Parent");
            p.Columns.Add("TransDate", System.Type.GetType("System.String"));
            p.Columns.Add("StoreID", System.Type.GetType("System.String"));
            p.Columns.Add("RegisterID", System.Type.GetType("System.String"));
            p.Columns.Add("EmpID", System.Type.GetType("System.String"));
            p.Columns.Add("CustID", System.Type.GetType("System.String"));
            p.Columns.Add("CustDetails", System.Type.GetType("System.String"));
            p.Columns.Add("InvoiceNo", System.Type.GetType("System.String"));
            p.Columns.Add("LayawayNo", System.Type.GetType("System.Int32"));
            p.Columns.Add("SKU", System.Type.GetType("System.String"));
            p.Columns.Add("Description", System.Type.GetType("System.String"));
            p.Columns.Add("DiscountInfo", System.Type.GetType("System.String"));
            p.Columns.Add("Qty", System.Type.GetType("System.String"));
            p.Columns.Add("Price", System.Type.GetType("System.String"));
            p.Columns.Add("TotalSale", System.Type.GetType("System.String"));
            p.Columns.Add("DateDue", System.Type.GetType("System.String"));

            foreach (DataRow dr in dtbl.Rows)
            {
                DataRow r1 = p.NewRow();
                r1["TransDate"] = dr["TransDate"].ToString();
                r1["StoreID"] = dr["StoreID"].ToString();
                r1["RegisterID"] = dr["RegisterID"].ToString();
                r1["EmpID"] = dr["EmpID"].ToString();
                r1["CustID"] = dr["CustID"].ToString();
                r1["CustDetails"] = dr["CustDetails"].ToString();
                r1["InvoiceNo"] = dr["InvoiceNo"].ToString();
                r1["LayawayNo"] = GeneralFunctions.fnInt32(dr["LayawayNo"].ToString());
                r1["SKU"] = dr["SKU"].ToString();
                r1["Description"] = dr["Description"].ToString();
                r1["DiscountInfo"] = dr["DiscountInfo"].ToString();
                r1["Qty"] = dr["Qty"].ToString();
                r1["Price"] = dr["Price"].ToString();
                r1["TotalSale"] = dr["TotalSale"].ToString();
                r1["DateDue"] = dr["DateDue"].ToString();
                p.Rows.Add(r1);

                tot = tot + GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
            }

            DataTable dtbl1 = new DataTable();
            PosDataObject.POS objProduct1 = new PosDataObject.POS();
            objProduct1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtbl1 = objProduct1.FetchLayawayPaymentPreprint(LayawayNoForInvoicePrinting(), intLAYNOQT);

            foreach (DataRow dr2 in dtbl1.Rows)
            {
                pmt = pmt + GeneralFunctions.fnDouble(dr2["Payment"].ToString());
            }

            DataTable dtbl2 = new DataTable();
            PosDataObject.POS objProduct2 = new PosDataObject.POS();
            objProduct2.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtbl2 = objProduct2.FetchInvoiceTender(intLAYTRANQT);
            dtbl2 = RearrangeTenderForCashBack(intLAYTRANQT, dtbl2);
            string t1 = "";
            string t2 = "";
            foreach (DataRow dr3 in dtbl2.Rows)
            {
                t1 = (t1 == "") ? "Paid in " + dr3["DisplayAs"].ToString() : t1 + "\r\n" + "Paid in " + dr3["DisplayAs"].ToString();
                t2 = (t2 == "") ? SystemVariables.CurrencySymbol + GeneralFunctions.fnDouble(dr3["Amount"].ToString()).ToString("f") : t2 + "\r\n" + SystemVariables.CurrencySymbol + GeneralFunctions.fnDouble(dr3["Amount"].ToString()).ToString("f");
            }
            DataTable c = new DataTable("Child");

            c.Columns.Add("TransDate", System.Type.GetType("System.String"));
            c.Columns.Add("StoreID", System.Type.GetType("System.String"));
            c.Columns.Add("RegisterID", System.Type.GetType("System.String"));
            c.Columns.Add("EmpID", System.Type.GetType("System.String"));
            c.Columns.Add("CustID", System.Type.GetType("System.String"));
            c.Columns.Add("CustDetails", System.Type.GetType("System.String"));
            c.Columns.Add("InvoiceNo", System.Type.GetType("System.String"));
            c.Columns.Add("LayawayNo", System.Type.GetType("System.Int32"));
            c.Columns.Add("SKU", System.Type.GetType("System.String"));
            c.Columns.Add("Description", System.Type.GetType("System.String"));
            c.Columns.Add("DiscountInfo", System.Type.GetType("System.String"));
            c.Columns.Add("Qty", System.Type.GetType("System.String"));
            c.Columns.Add("Price", System.Type.GetType("System.String"));
            c.Columns.Add("TotalSale", System.Type.GetType("System.String"));

            c.Columns.Add("DateDue", System.Type.GetType("System.String"));
            c.Columns.Add("TransactionNo", System.Type.GetType("System.String"));
            c.Columns.Add("PaymentDateTime", System.Type.GetType("System.String"));
            c.Columns.Add("PaymentType", System.Type.GetType("System.String"));
            c.Columns.Add("PaymentDate", System.Type.GetType("System.String"));
            c.Columns.Add("Payment", System.Type.GetType("System.String"));
            c.Columns.Add("BalanceDue", System.Type.GetType("System.String"));
            c.Columns.Add("Tender1", System.Type.GetType("System.String"));
            c.Columns.Add("Tender2", System.Type.GetType("System.String"));

            foreach (DataRow dr in dtbl1.Rows)
            {
                double crgamt = 0;

                DataRow r1 = c.NewRow();
                string a1 = "", a2 = "", a4 = "", a5 = "", a6 = "", a7 = "", a8 = "", a9 = "", a10 = "", a11 = "", a12 = "", a13 = "",
                    a14 = "", a15 = "", a16 = "", a17 = "", a18 = "";
                int a3 = 0;
                foreach (DataRow dr1 in p.Rows)
                {

                    if (dr["InvoiceNo"].ToString() == dr1["InvoiceNo"].ToString())
                    {
                        a11 = dr1["TransDate"].ToString();
                        a12 = dr1["StoreID"].ToString();
                        a13 = dr1["RegisterID"].ToString();
                        a14 = dr1["EmpID"].ToString();
                        a15 = dr1["DiscountInfo"].ToString();
                        a16 = dr1["Qty"].ToString();
                        a17 = dr1["Price"].ToString();
                        a1 = dr1["CustID"].ToString();
                        a2 = dr1["CustDetails"].ToString();
                        a3 = GeneralFunctions.fnInt32(dr1["LayawayNo"].ToString());
                        a4 = dr1["SKU"].ToString();
                        a5 = dr1["Description"].ToString();
                        a6 = dr1["TotalSale"].ToString();
                        a7 = dr1["DateDue"].ToString();

                        break;
                    }
                }

                r1["TransDate"] = a11;
                r1["StoreID"] = a12;
                r1["RegisterID"] = a13;
                r1["EmpID"] = a14;
                r1["DiscountInfo"] = a15;
                r1["Qty"] = a16;
                r1["Price"] = a17;
                r1["CustID"] = a1;
                r1["CustDetails"] = a2;
                r1["InvoiceNo"] = dr["InvoiceNo"].ToString();
                r1["LayawayNo"] = a3;
                r1["SKU"] = a4;
                r1["Description"] = a5;
                r1["TotalSale"] = a6;
                r1["DateDue"] = a7;
                r1["TransactionNo"] = dr["TransactionNo"].ToString();
                r1["PaymentDateTime"] = dr["PaymentDate"].ToString();
                r1["PaymentType"] = dr["PaymentType"].ToString();
                r1["PaymentDate"] = GeneralFunctions.fnDate(dr["PaymentDate"].ToString()).ToString(SystemVariables.DateFormat);
                r1["Payment"] = dr["Payment"].ToString();
                r1["BalanceDue"] = (tot - pmt).ToString();
                r1["Tender1"] = t1;
                r1["Tender2"] = t2;
                c.Rows.Add(r1);

            }

            DataSet ds = new DataSet();
            ds.Tables.Add(p);
            ds.Tables.Add(c);


            DataRelation relation = new DataRelation("ParentChild",
            ds.Tables["Parent"].Columns["InvoiceNo"],
            ds.Tables["Child"].Columns["InvoiceNo"]);
            ds.Relations.Add(relation);
            //relation.Nested = true;
            GeneralFunctions.MakeReportWatermark(rep_LayawayCust);
            rep_LayawayCust.rReportHeader.Text = Settings.MainReceiptHeader;
            rep_LayawayCust.GroupHeader2.GroupFields.Add(rep_LayawayCust.CreateGroupField("CustID"));
            rep_LayawayCust.GroupHeader1.GroupFields.Add(rep_LayawayCust.CreateGroupField("LayawayNo"));
            rep_LayawayCust.GroupHeader1.GroupFields[0].SortOrder = DevExpress.XtraReports.UI.XRColumnSortOrder.Ascending;
            //rep_LayawayCust.GroupHeader3.GroupFields.Add(rep_LayawayCust.CreateGroupField("PaymentDateTime"));

            rep_LayawayCust.DataSource = ds;

            //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
            try
            {
                if (Settings.ReportPrinterName != "") rep_LayawayCust.PrinterName = Settings.ReportPrinterName;
                rep_LayawayCust.CreateDocument();
                rep_LayawayCust.PrintingSystem.ShowMarginsWarning = false;
                rep_LayawayCust.PrintingSystem.ShowPrintStatusDialog = false;

                //rep_LayawayCust.ShowPreviewDialog();

                DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                window.PreviewControl.DocumentSource = rep_LayawayCust;
                window.ShowDialog();

            }
            finally
            {
                rep_LayawayCust.Dispose();

                dtbl.Dispose();
            }
        }


        // Mercury/ Precidia Gift Card Issue Transaction

        private bool IsValidMarcuryGiftCardIssue()
        {
            tempMercuryGCCardID = 0;
            intCardTranID = 0;
            bool blVarify = false;
            double dblCardAmt = 0;
            string strCard = "";

            foreach (DataRow dmgc in dtblPOSDatatblQT.Rows)
            {
                if (!((dmgc["PRODUCT"].ToString() == (Settings.PaymentGateway == 3 ? "Issue Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Issue Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "Issue POSLink Gift Card" : "Issue Mercury Gift Card")))) && (dmgc["PRODUCTTYPE"].ToString() == "X"))) continue;

                double val = GeneralFunctions.fnDouble(dmgc["PRICE"].ToString());
                AuthCode = "";

                PosDataObject.POS objcard = new PosDataObject.POS();
                objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objcard.CustomerID = intCustID;
                objcard.LoginUserID = SystemVariables.CurrentUserID;
                objcard.EmployeeID = SystemVariables.CurrentUserID;
                objcard.CardType = Settings.PaymentGateway == 3 ? "Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "POSLink Gift Card" : "Mercury Gift Card"));
                objcard.CardAmount = val;

                objcard.PaymentGateway = Settings.PaymentGateway;

                objcard.TerminalName = Settings.TerminalName;
                if (Settings.PaymentGateway == 2)
                {
                    objcard.LogFileName = MercuryLogFile;
                }
                else if (Settings.PaymentGateway == 3)
                {
                    objcard.LogFileName = PrecidiaLogFile;
                }
                else if (Settings.PaymentGateway == 5)
                {
                    objcard.LogFileName = DatacapLogFile;
                }
                else if (Settings.PaymentGateway == 6)
                {
                    objcard.LogFileName = DatacapEMVLogFile;
                }
                else
                {
                    objcard.LogFileName = "";
                }

                try
                {
                    string strerr = objcard.InsertCardTrans();
                }
                catch (Exception ex)
                {
                    blVarify = false;
                    new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Settings.PaymentGateway == 3 ? "Precidia Gift Card Issue" : (Settings.PaymentGateway == 5 ? "Datacap Gift Card Issue" : (Settings.PaymentGateway == 7 ? "POSLink Gift Card Issue" : "Mercury Gift Card Issue")), MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                    Cursor = System.Windows.Input.Cursors.Arrow;
                    break;
                }
                intCardTranID = objcard.CardTranID;
                mgccardidentityQT.Rows.Add(new object[] { "Issue", intCardTranID.ToString() });

                tempMercuryGCCardID = intCardTranID;

                /*
                if (Settings.PaymentGateway == 2)
                {
                    WriteToMercuryLogFile("GC Issue: start");

                    Cursor.Current = Cursors.Hand;
                    string strAuthCode = "0";

                    MercuryPayment.clsMercuryPymnt mp = new MercuryPayment.clsMercuryPymnt();
                    mp.MerchantID = Settings.MercuryHPMerchantID;
                    mp.UserID = Settings.MercuryHPUserID;
                    mp.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                    mp.InvNo = intCardTranID.ToString();
                    mp.PurchaseAmount = val;

                    string msg1 = "";
                    string msg2 = "";

                    if (Settings.ElementHPMode == 0) mp.GiftCardIssue(ref msg1);
                    if (Settings.ElementHPMode == 1) mp.TestGiftCardIssue(ref msg1);

                    GeneralFunctions.CreateMercuryTransactionXML(mp.MercuryXmlResponse, mp.Token);

                    WriteToMercuryLogFile("Response: " + msg1);

                    if (msg1 != "")
                    {
                        if (msg1.ToUpper().Trim() == "APPROVED")
                        {
                            AuthCode = mp.AuthID;
                            TranID = mp.TranID;
                            CardNum = mp.CardNumber;
                            CardExMM = mp.CardExMM;
                            CardExYY = mp.CardExYY;
                            CardLogo = mp.CardLogo;
                            CardType = mp.CardType;
                            ApprovedAmt = mp.ApprovedAmt;
                            RefNo = mp.RefNo;
                            MercuryPurchaseAmount = mp.PurchaseAmount;
                            MercuryProcessData = mp.MercuryProcessData;
                            MercuryTranCode = mp.MercuryTranCode;
                            MercuryTextResponse = mp.MercuryTextResponse;
                            MercuryRecordNo = mp.MercuryRecordNo;
                            MercuryResponseOrigin = mp.MercuryResponseOrigin;
                            MercuryResponseReturnCode = mp.MercuryResponseReturnCode;
                            CardEntry = mp.CardEntry;
                            Token = mp.Token;
                            AcqRef = mp.AcqRefData;
                            strMercuryMerchantID = mp.MerchantID;
                            MercuryGiftCardBalance = mp.BalanceAmt;

                            if (AuthCode == null) AuthCode = "";
                            if (TranID == null) TranID = "";
                            if (CardNum == null) CardNum = "";
                            if (CardExMM == null) CardExMM = "";
                            if (CardExYY == null) CardExYY = "";
                            if (CardLogo == null) CardLogo = "";
                            if (CardType == null) CardType = "";
                            if (ApprovedAmt == null) ApprovedAmt = "0";
                            if (RefNo == null) RefNo = "";
                            if (CardEntry == null) CardEntry = "";
                            if (Token == null) Token = "";
                            if (AcqRef == null) AcqRef = "";

                            if (MercuryProcessData == null) MercuryProcessData = "";
                            if (MercuryTranCode == null) MercuryTranCode = "";
                            if (MercuryRecordNo == null) MercuryRecordNo = "";
                            if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                            if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                            if (MercuryTextResponse == null) MercuryTextResponse = "";
                            if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";

                            if ((MercuryTextResponse.ToUpper().Trim() == "AP") || (MercuryTextResponse.ToUpper().Trim() == "AP-NEW INFO")
                                || (MercuryTextResponse.ToUpper().Trim() == "APPROVED"))
                            {
                                string updtstr = "";

                                objcard.MercuryInvNo = TranID;
                                objcard.MercuryProcessData = MercuryProcessData;
                                objcard.MercuryTranCode = MercuryTranCode;
                                objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                objcard.MercuryRecordNo = MercuryRecordNo;
                                objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                objcard.MercuryTextResponse = MercuryTextResponse;

                                objcard.CardType = CardLogo;
                                objcard.AuthCode = AuthCode;
                                objcard.Reference = RefNo;
                                objcard.AcqRefData = AcqRef;
                                objcard.TokenData = Token;

                                objcard.RefCardAct = CardNum;
                                objcard.RefCardLogo = CardLogo;
                                objcard.RefCardEntry = CardEntry;
                                objcard.RefCardAuthID = AuthCode;
                                objcard.RefCardTranID = TranID;
                                objcard.RefCardMerchID = strMercuryMerchantID;
                                objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                objcard.CardTranType = "Issue";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                objcard.PrintXml = "";
                                updtstr = objcard.UpdateCardResponse();

                                if (updtstr == "") blVarify = true;
                                Cursor = System.Windows.Input.Cursors.Arrow;
                            }
                        }
                        else
                        {
                            if (cardidentity.Rows.Count > 0)
                            {
                                foreach (DataRow dr1 in cardidentity.Rows)
                                {
                                    DataTable dt = new DataTable();
                                    dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                    int CCID = 0;
                                    string val1 = "";
                                    string val2 = "";
                                    string val3 = "";
                                    string val4 = "";
                                    string val5 = "";
                                    string val6 = "";
                                    string val7 = "";
                                    string val8 = "";
                                    string val9 = "";
                                    string val10 = "";
                                    string val20 = "";
                                    int pmntgwy = 0;

                                    bool flag = true;
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                        val1 = dr["CardType"].ToString();
                                        val2 = dr["CardAmount"].ToString();
                                        val3 = dr["Reference"].ToString();
                                        val9 = dr["MercuryProcessData"].ToString();
                                        val4 = dr["MercuryInvoiceNo"].ToString();
                                        val5 = dr["MercuryAcqRef"].ToString();
                                        val6 = dr["MercuryToken"].ToString();
                                        val7 = dr["AuthCode"].ToString();
                                        val8 = dr["IsDebitCard"].ToString();
                                        val10 = dr["RefCardTranID"].ToString();
                                        val20 = dr["TransactionType"].ToString();
                                        pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());



                                        MercuryPayment.clsMercuryPymnt mp1 = new MercuryPayment.clsMercuryPymnt();
                                        mp1.MerchantID = Settings.MercuryHPMerchantID;
                                        mp1.UserID = Settings.MercuryHPUserID;
                                        mp1.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                                        mp1.InvNo = val4;
                                        mp1.RefNo = val3;
                                        mp1.AuthID = val7;
                                        mp1.AcqRefData = val5;
                                        mp1.Token = val6;
                                        mp1.PurchaseAmount = GeneralFunctions.fnDouble(val2);
                                        mp1.MercuryProcessData = val9;
                                        string msg11 = "";
                                        if (val1 == "Credit Card")
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.CreditVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestCreditVoidSale(ref msg11);
                                        }
                                        if ((val1 == "Credit Card (STAND-IN)") || (val1 == "Credit Card - Voice Auth (STAND-IN)"))
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.StandInCreditVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestStandInCreditVoidSale(ref msg11);
                                        }
                                        if (val1 == "Debit Card")
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.DebitVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestDebitVoidSale(ref msg11);
                                        }

                                        if (val1 == "Mercury Gift Card")
                                        {
                                            if (val20 == "Sale")
                                            {
                                                if (Settings.ElementHPMode == 0) mp1.GiftCardVoidSales(ref msg11);
                                                if (Settings.ElementHPMode == 1) mp1.TestGiftCardVoidSales(ref msg11);
                                            }
                                        }

                                        GeneralFunctions.CreateMercuryTransactionXML(mp1.MercuryXmlResponse, val6);


                                        if (msg11.ToUpper().Trim() == "APPROVED")
                                        {
                                            AuthCode = mp1.AuthID;
                                            TranID = mp1.TranID;
                                            CardNum = mp1.CardNumber;
                                            CardExMM = mp1.CardExMM;
                                            CardExYY = mp1.CardExYY;
                                            CardLogo = mp1.CardLogo;
                                            CardType = mp1.CardType;
                                            ApprovedAmt = mp1.ApprovedAmt;
                                            RefNo = mp1.RefNo;
                                            CardEntry = mp1.CardEntry;
                                            Token = mp1.Token;
                                            AcqRef = mp1.AcqRefData;
                                            strMercuryMerchantID = mp1.MerchantID;
                                            MercuryProcessData = mp1.MercuryProcessData;
                                            MercuryPurchaseAmount = mp1.PurchaseAmount;
                                            MercuryTranCode = mp1.MercuryTranCode;
                                            MercuryRecordNo = mp1.MercuryRecordNo;
                                            MercuryResponseOrigin = mp1.MercuryResponseOrigin;
                                            MercuryResponseReturnCode = mp1.MercuryResponseReturnCode;
                                            MercuryGiftCardBalance = mp1.BalanceAmt;
                                            MercuryTextResponse = mp1.MercuryTextResponse;

                                            if (AuthCode == null) AuthCode = "";
                                            if (TranID == null) TranID = "";
                                            if (CardNum == null) CardNum = "";
                                            if (CardExMM == null) CardExMM = "";
                                            if (CardExYY == null) CardExYY = "";
                                            if (CardLogo == null) CardLogo = "";
                                            if (CardType == null) CardType = "";
                                            if (ApprovedAmt == null) ApprovedAmt = "0";
                                            if (RefNo == null) RefNo = "";
                                            if (CardEntry == null) CardEntry = "";
                                            if (Token == null) Token = "";
                                            if (AcqRef == null) AcqRef = "";

                                            if (MercuryTranCode == null) MercuryTranCode = "";
                                            if (MercuryRecordNo == null) MercuryRecordNo = "";
                                            if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                                            if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                                            if (MercuryTextResponse == null) MercuryTextResponse = "";
                                            if (MercuryProcessData == null) MercuryProcessData = "";
                                            if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";
                                        }
                                        else
                                        {
                                            flag = false;
                                            break;
                                        }

                                        if (flag)
                                        {
                                            PosDataObject.POS objcard1 = new PosDataObject.POS();
                                            objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                            objcard1.CustomerID = intCustID;
                                            objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                            objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                            objcard1.CardType = CardType;//CardLogo
                                            objcard1.IsDebit = val8;
                                            objcard1.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard1.PaymentGateway = pmntgwy;
                                            objcard1.MercuryInvNo = TranID;
                                            objcard1.MercuryProcessData = MercuryProcessData;
                                            objcard1.MercuryTranCode = MercuryTranCode;
                                            objcard1.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                            objcard1.AuthCode = AuthCode;
                                            objcard1.Reference = RefNo;
                                            objcard1.AcqRefData = AcqRef;
                                            objcard1.TokenData = Token;
                                            objcard1.MercuryRecordNo = MercuryRecordNo;
                                            objcard1.MercuryResponseOrigin = MercuryResponseOrigin;
                                            objcard1.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                            objcard1.MercuryTextResponse = MercuryTextResponse;

                                            objcard1.RefCardAct = CardNum;
                                            objcard1.RefCardLogo = CardLogo;
                                            objcard1.RefCardEntry = CardEntry;
                                            objcard1.RefCardAuthID = AuthCode;
                                            objcard1.RefCardTranID = TranID;
                                            objcard1.RefCardMerchID = strMercuryMerchantID;
                                            objcard1.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard1.CardTranType = "Void";
                                            objcard1.TerminalName = Settings.TerminalName;
                                            if (Settings.PaymentGateway == 2)
                                            {
                                                objcard1.LogFileName = MercuryLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 3)
                                            {
                                                objcard1.LogFileName = PrecidiaLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 5)
                                            {
                                                objcard1.LogFileName = DatacapLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 6)
                                            {
                                                objcard1.LogFileName = DatacapEMVLogFile;
                                            }
                                            else
                                            {
                                                objcard1.LogFileName = "";
                                            }
                                            string strer = objcard1.InsertCardTrans1();
                                            intCardTranID = objcard1.CardTranID;

                                            PosDataObject.POS ob = new PosDataObject.POS();
                                            ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                            ob.LoginUserID = SystemVariables.CurrentUserID;
                                            ob.CardTranID = CCID;
                                            string s = ob.UpdateCardAdjustment();
                                        }
                                    }
                                }
                            }
                            PrecidiaErrorText = mp.MercuryTextResponse;
                            blVarify = false;
                            new MessageBoxWindow().Show(Properties.Resources."Transaction failed.","frmPOSTenderDlg_msg_Transactionfailed"), "Mercury Gift Card Issue", MessageBoxButton.OK, MessageBoxImage.Information);
                            WriteToMercuryLogFile("Mercury Gift Card Issue - Transaction Failed");
                            Cursor = System.Windows.Input.Cursors.Arrow;
                        }
                    }
                    else
                    {
                        new MessageBoxWindow().Show(Properties.Resources."Transaction failed.","frmPOSTenderDlg_msg_Transactionfailed"), "Mercury Gift Card Issue", MessageBoxButton.OK, MessageBoxImage.Information);
                        WriteToMercuryLogFile("Mercury Gift Card Issue - Transaction Failed");
                        Cursor = System.Windows.Input.Cursors.Arrow;
                    }
                }


                if (Settings.PaymentGateway == 3)
                {
                    WriteToPrecidiaLogFile("GC Activate: start");

                    blCG = false;
                    blCGgc = false;
                    string resp = "";
                    string resptxt = "";

                    //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                    CGtrantype = "GCACTIVATE";

                    CGamt = val;
                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    CGinv = objPOS.FetchMaxInvoiceNo();



                    XmlDocument XDoc = new XmlDocument();

                    // Create root node.
                    XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

                    XDoc.AppendChild(XElemRoot);

                    XmlElement XTemp = XDoc.CreateElement("Command");
                    XTemp.InnerText = CGtrantype;
                    XElemRoot.AppendChild(XTemp);

                    XTemp = XDoc.CreateElement("Id");
                    XTemp.InnerText = CGinv.ToString();
                    XElemRoot.AppendChild(XTemp);

                    XTemp = XDoc.CreateElement("Amount");
                    XTemp.InnerText = CGamt.ToString("f");
                    XElemRoot.AppendChild(XTemp);

                    XTemp = XDoc.CreateElement("Input");
                    XTemp.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                    XElemRoot.AppendChild(XTemp);

                    XmlDocument XmlResponse = new XmlDocument();

                    XTemp = XDoc.CreateElement("KeepAlive");
                    XTemp.InnerText = "N";
                    XElemRoot.AppendChild(XTemp);

                    XTemp = XDoc.CreateElement("ClientMAC");
                    XTemp.InnerText = Settings.PrecidiaClientMAC;
                    XElemRoot.AppendChild(XTemp);

                    if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc.OuterXml);

                    bool bTelnet = false;
                    try
                    {
                        SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                        bTelnet = true;
                    }
                    catch (Exception ex)
                    {
                        WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                        bTelnet = false;
                    }

                    if (bTelnet)
                    {
                        if (XmlResponse.InnerXml != "")
                        {
                            if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse.InnerXml);

                            SocketResponse_GC(XmlResponse);

                            resp = CGresp;
                            resptxt = CGresptxt;

                            WriteToPrecidiaLogFile("Response: " + resp);
                            WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));

                            if (resp != "")
                            {
                                if (resp != "APPROVED")
                                {
                                    if (cardidentity.Rows.Count > 0)
                                    {
                                        foreach (DataRow dr1 in cardidentity.Rows)
                                        {
                                            blCG = false;
                                            DataTable dt = new DataTable();
                                            dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                            int CCID = 0;
                                            string val1 = "";
                                            string val2 = "";
                                            string val3 = "";
                                            string val4 = "";
                                            string val5 = "";
                                            string val6 = "";
                                            string val7 = "";
                                            string val8 = "";
                                            string val9 = "";
                                            string val10 = "";
                                            string val20 = "";
                                            int pmntgwy = 0;

                                            bool flag = true;
                                            foreach (DataRow dr in dt.Rows)
                                            {
                                                CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                                val1 = dr["CardType"].ToString();
                                                val2 = dr["CardAmount"].ToString();
                                                val3 = dr["Reference"].ToString();
                                                val9 = dr["MercuryProcessData"].ToString();
                                                val4 = dr["MercuryInvoiceNo"].ToString();
                                                val5 = dr["MercuryAcqRef"].ToString();
                                                val6 = dr["MercuryToken"].ToString();
                                                val7 = dr["AuthCode"].ToString();
                                                val8 = dr["IsDebitCard"].ToString();
                                                val10 = dr["RefCardTranID"].ToString();
                                                val20 = dr["TransactionType"].ToString();
                                                pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());



                                                string resp1 = "";
                                                string resptxt1 = "";

                                                //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                                                if (val1 == "Credit Card")
                                                {
                                                    CGtrantype = "CCVOID";
                                                }
                                                if ((val1 == "Credit Card - Voice Auth") || (val1 == "Credit Card (STAND-IN)") || (val1 == "Credit Card - Voice Auth (STAND-IN)"))
                                                {
                                                    CGtrantype = "CCVOID";
                                                }
                                                if (val1 == "Debit Card")
                                                {
                                                    CGtrantype = "DCREFUND";
                                                }

                                                if (val1 == "Precidia Gift Card")
                                                {
                                                    if (val20 == "Sale")
                                                    {
                                                        CGtrantype = "GCVOID";
                                                    }
                                                    if (val20 == "Issue")
                                                    {
                                                        CGtrantype = "GCVOIDACTIVATE";
                                                    }

                                                    if (val20 == "Reload")
                                                    {
                                                        CGtrantype = "GCVOID";
                                                    }
                                                }

                                                CGamt = GeneralFunctions.fnDouble(val2);



                                                XmlDocument XDoc1 = new XmlDocument();

                                                // Create root node.
                                                XmlElement XElemRoot1 = XDoc1.CreateElement("PLRequest");

                                                XDoc1.AppendChild(XElemRoot1);

                                                XmlElement XTemp1 = XDoc1.CreateElement("Command");
                                                XTemp1.InnerText = CGtrantype;
                                                XElemRoot1.AppendChild(XTemp1);

                                                if (val1 != "Debit Card")
                                                {
                                                    XTemp1 = XDoc1.CreateElement("RecNum");
                                                    XTemp1.InnerText = val10.ToString();
                                                    XElemRoot1.AppendChild(XTemp1);
                                                }

                                                XTemp1 = XDoc1.CreateElement("Amount");
                                                XTemp1.InnerText = CGamt.ToString("f");
                                                XElemRoot1.AppendChild(XTemp1);

                                                if (val1 == "Debit Card")
                                                {
                                                    XTemp1 = XDoc1.CreateElement("Input");
                                                    XTemp1.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                                                    XElemRoot1.AppendChild(XTemp1);
                                                }

                                                XmlDocument XmlResponse1 = new XmlDocument();

                                                XTemp1 = XDoc1.CreateElement("KeepAlive");
                                                XTemp1.InnerText = "N";
                                                XElemRoot1.AppendChild(XTemp1);

                                                XTemp1 = XDoc1.CreateElement("ClientMAC");
                                                XTemp1.InnerText = Settings.PrecidiaClientMAC;
                                                XElemRoot1.AppendChild(XTemp1);

                                                if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc1.OuterXml);

                                                bool bTelnet1 = false;
                                                try
                                                {
                                                    SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc1, ref XmlResponse1);
                                                    bTelnet1 = true;
                                                }
                                                catch (Exception ex)
                                                {
                                                    WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                                                    bTelnet1 = false;
                                                }

                                                if (bTelnet1)
                                                {
                                                    if (XmlResponse1.InnerXml != "")
                                                    {
                                                        if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse1.InnerXml);
                                                        SocketResponse_General(XmlResponse1);

                                                        resp1 = CGresp;
                                                        resptxt1 = CGresptxt;

                                                        WriteToPrecidiaLogFile("Response : " + resptxt1);

                                                        if (resp != "")
                                                        {
                                                            if (resp != "APPROVED")
                                                            {
                                                                new MessageBoxWindow().Show(Properties.Resources."Error occured during Card Transaction", "frmPOSTenderDlg_msg_ErroroccuredduringCardTransact"), "Credit Card Transaction", MessageBoxButton.OK, MessageBoxImage.Information);
                                                                flag = false;
                                                                break;
                                                            }
                                                            else
                                                            {

                                                            }
                                                        }

                                                        if (flag)
                                                        {
                                                            PosDataObject.POS objcard1 = new PosDataObject.POS();
                                                            objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                            objcard1.CustomerID = intCustID;
                                                            objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                                            objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                                            objcard1.CardType = CardType;//CardLogo
                                                            objcard1.IsDebit = val8;
                                                            objcard1.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                                            objcard1.PaymentGateway = pmntgwy;
                                                            objcard1.MercuryInvNo = TranID;
                                                            objcard1.MercuryProcessData = MercuryProcessData;
                                                            objcard1.MercuryTranCode = MercuryTranCode;
                                                            objcard1.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                                            objcard1.AuthCode = AuthCode;
                                                            objcard1.Reference = RefNo;
                                                            objcard1.AcqRefData = AcqRef;
                                                            objcard1.TokenData = Token;
                                                            objcard1.MercuryRecordNo = MercuryRecordNo;
                                                            objcard1.MercuryResponseOrigin = MercuryResponseOrigin;
                                                            objcard1.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                                            objcard1.MercuryTextResponse = MercuryTextResponse;

                                                            objcard1.RefCardAct = CardNum;
                                                            objcard1.RefCardLogo = CardLogo;
                                                            objcard1.RefCardEntry = CardEntry;
                                                            objcard1.RefCardAuthID = AuthCode;
                                                            objcard1.RefCardTranID = TranID;
                                                            objcard1.RefCardMerchID = strMercuryMerchantID;
                                                            objcard1.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                                            objcard1.CardTranType = "Void";
                                                            objcard1.TerminalName = Settings.TerminalName;
                                                            if (Settings.PaymentGateway == 2)
                                                            {
                                                                objcard1.LogFileName = MercuryLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 3)
                                                            {
                                                                objcard1.LogFileName = PrecidiaLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 5)
                                                            {
                                                                objcard1.LogFileName = DatacapLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 6)
                                                            {
                                                                objcard1.LogFileName = DatacapEMVLogFile;
                                                            }
                                                            else
                                                            {
                                                                objcard1.LogFileName = "";
                                                            }
                                                            try
                                                            {
                                                                string strerr = objcard1.InsertCardTrans1();
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                                                GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                                                                Cursor = System.Windows.Input.Cursors.Arrow;
                                                                break;
                                                            }
                                                            intCardTranID = objcard1.CardTranID;

                                                            PosDataObject.POS ob = new PosDataObject.POS();
                                                            ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                            ob.LoginUserID = SystemVariables.CurrentUserID;
                                                            ob.CardTranID = CCID;
                                                            string s = ob.UpdateCardAdjustment();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    PrecidiaDisplayResultText = "TRANSACTION DECLINED";
                                    PrecidiaErrorText = "Transaction Declined" + "\n" + resptxt;
                                    WriteToPrecidiaLogFile(resptxt);
                                    blVarify = false;
                                }
                                else
                                {


                                    string updtstr = "";
                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = 0;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardType = CardLogo;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = "";
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardTranType = "Issue";
                                    objcard.AdjustFlag = "N";
                                    objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();

                                    if (updtstr == "")
                                    {
                                        blVarify = true;
                                        WriteToPrecidiaLogFile("Card Trans Updated");
                                    }
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                }
                            }
                        }

                    }
                }


                if (Settings.PaymentGateway == 5) // Datacap
                {
                    WriteToDatacapLogFile("Datacap Prepaid Issue : start");

                    Dcap_CmdStatus = "";
                    Dcap_TextResponse = "";
                    Dcap_AcctNo = "";
                    Dcap_Merchant = "";
                    Dcap_TranCode = "";
                    Dcap_CardType = "";
                    Dcap_AuthCode = "";
                    Dcap_RefNo = "";
                    Dcap_AcqRefData = "";
                    Dcap_RecordNo = "";
                    Dcap_InvoiceNo = "";
                    Dcap_TranAmt = 0;
                    Dcap_AuthAmt = 0;
                    Dcap_CashBkAmt = 0;
                    Dcap_BalAmt = 0;

                    bool bproceed = true;
                    string request_xml = "";
                    string response_xml = "";

                    DSIPDCXLib.DsiPDCX dsipdx = new DSIPDCXLib.DsiPDCX();

                    dsipdx.ServerIPConfig(Settings.DatacapServer, 1);

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int dcap_max_inv = objPOS.FetchMaxInvoiceNo();

                    request_xml = GeneralFunctions.Datacap_PrePaidIssue_Request_XML(val, dcap_max_inv);
                    try
                    {
                        response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                    }
                    catch
                    {
                        bproceed = false;
                    }

                    WriteToDatacapLogFile("Request XML : " + request_xml);

                    WriteToDatacapLogFile("Response XML : " + response_xml);

                    if (bproceed)
                    {
                        GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);
                        if (Dcap_CmdStatus == "Approved")
                        {
                            string updtstr = "";
                            objcard.MercuryRecordNo = "";
                            objcard.MercuryResponseOrigin = "";
                            objcard.MercuryResponseReturnCode = "";
                            objcard.MercuryTextResponse = "";

                            objcard.MercuryInvNo = Dcap_InvoiceNo;
                            objcard.MercuryProcessData = "";
                            objcard.MercuryTranCode = "";
                            objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                            objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                            objcard.CardType = Dcap_CardType;
                            objcard.AuthCode = Dcap_AuthCode;
                            objcard.Reference = Dcap_RefNo;
                            objcard.AcqRefData = Dcap_AcqRefData;
                            objcard.TokenData = Dcap_RecordNo;

                            objcard.RefCardAct = Dcap_AcctNo;
                            objcard.RefCardLogo = Dcap_CardType;
                            objcard.RefCardEntry = CardEntry;
                            objcard.RefCardAuthID = Dcap_AuthCode;
                            objcard.RefCardTranID = TranID;
                            objcard.RefCardMerchID = Dcap_Merchant;
                            objcard.RefCardAuthAmount = Dcap_AuthAmt;
                            objcard.CardTranType = "Issue";
                            objcard.AdjustFlag = "N";
                            objcard.RefCardBalAmount = Dcap_BalAmt;
                            objcard.PrintXml = Dcap_PrintDraft;
                            updtstr = objcard.UpdateCardResponse();

                            if (updtstr == "")
                            {
                                blVarify = true;
                            }
                            else
                            {
                                blVarify = false;
                            }
                            Cursor = System.Windows.Input.Cursors.Arrow;
                        }
                        else
                        {
                            new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Datacap Gift Card Issue", MessageBoxButton.OK, MessageBoxImage.Information);
                            WriteToDatacapLogFile(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse);
                            if (cardidentity.Rows.Count > 0)
                            {
                                foreach (DataRow dr1 in cardidentity.Rows)
                                {
                                    blCG = false;
                                    DataTable dt = new DataTable();
                                    dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                    int CCID = 0;
                                    string val1 = "";
                                    string val2 = "";
                                    string val3 = "";
                                    string val4 = "";
                                    string val5 = "";
                                    string val6 = "";
                                    string val7 = "";
                                    string val8 = "";
                                    string val9 = "";
                                    string val10 = "";
                                    string val20 = "";
                                    int pmntgwy = 0;

                                    bool flag = true;
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                        val1 = dr["CardType"].ToString();
                                        val2 = dr["CardAmount"].ToString();
                                        val3 = dr["Reference"].ToString();
                                        val9 = dr["MercuryProcessData"].ToString();
                                        val4 = dr["MercuryInvoiceNo"].ToString();
                                        val5 = dr["MercuryAcqRef"].ToString();
                                        val6 = dr["MercuryToken"].ToString();
                                        val7 = dr["AuthCode"].ToString();
                                        val8 = dr["IsDebitCard"].ToString();
                                        val10 = dr["RefCardTranID"].ToString();
                                        val20 = dr["TransactionType"].ToString();
                                        pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());



                                        string resp1 = "";
                                        string resptxt1 = "";

                                        //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                                        if (val1 == "Credit Card")
                                        {
                                            request_xml = GeneralFunctions.Datacap_CreditVoidSale_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7, val5,blPressManual);

                                            try
                                            {
                                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                            }
                                            catch
                                            {
                                                bproceed = false;
                                            }
                                        }

                                        if (val1 == "Debit Card")
                                        {

                                        }

                                        if (val1 == "Datacap Gift Card")
                                        {
                                            if (val20 == "Sale")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidSale_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }
                                            if (val20 == "Issue")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidIssue_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }

                                            if (val20 == "Reload")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidReload_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }
                                        }

                                        if (bproceed)
                                        {
                                            GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                                ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                                ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);

                                            if (Dcap_CmdStatus == "Approved")
                                            {
                                                PosDataObject.POS objcard1 = new PosDataObject.POS();
                                                objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                objcard1.CustomerID = intCustID;
                                                objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                                objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                                objcard1.CardType = Dcap_CardType;
                                                objcard1.IsDebit = val8;
                                                objcard1.CardAmount = Dcap_AuthAmt;
                                                objcard1.PaymentGateway = pmntgwy;
                                                objcard1.MercuryInvNo = Dcap_InvoiceNo;
                                                objcard1.MercuryProcessData = "";
                                                objcard1.MercuryTranCode = "";
                                                objcard1.MercuryPurchaseAmount = Dcap_TranAmt;
                                                objcard1.AuthCode = Dcap_AuthCode;
                                                objcard1.Reference = Dcap_RefNo;
                                                objcard1.AcqRefData = Dcap_AcqRefData;
                                                objcard1.TokenData = Dcap_RecordNo;
                                                objcard1.MercuryRecordNo = "";
                                                objcard1.MercuryResponseOrigin = "";
                                                objcard1.MercuryResponseReturnCode = "";
                                                objcard1.MercuryTextResponse = "";

                                                objcard1.RefCardAct = Dcap_AcctNo;
                                                objcard1.RefCardLogo = Dcap_CardType;
                                                objcard1.RefCardEntry = CardEntry;
                                                objcard1.RefCardAuthID = Dcap_AuthCode;
                                                objcard1.RefCardTranID = TranID;
                                                objcard1.RefCardMerchID = Dcap_Merchant;
                                                objcard1.RefCardAuthAmount = Dcap_AuthAmt;
                                                objcard1.CardTranType = "Void";
                                                objcard1.TerminalName = Settings.TerminalName;
                                                if (Settings.PaymentGateway == 2)
                                                {
                                                    objcard1.LogFileName = MercuryLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 3)
                                                {
                                                    objcard1.LogFileName = PrecidiaLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 5)
                                                {
                                                    objcard1.LogFileName = DatacapLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 6)
                                                {
                                                    objcard1.LogFileName = DatacapEMVLogFile;
                                                }
                                                else
                                                {
                                                    objcard1.LogFileName = "";
                                                }
                                                try
                                                {
                                                    string strerr = objcard1.InsertCardTrans1();
                                                }
                                                catch (Exception ex)
                                                {
                                                    new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                                    GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                                    break;
                                                }
                                                intCardTranID = objcard1.CardTranID;

                                                PosDataObject.POS ob = new PosDataObject.POS();
                                                ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                ob.LoginUserID = SystemVariables.CurrentUserID;
                                                ob.CardTranID = CCID;
                                                string s = ob.UpdateCardAdjustment();
                                            }
                                            else
                                            {
                                                new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Card Void", MessageBoxButton.OK, MessageBoxImage.Information);
                                            }
                                        }
                                        else
                                        {
                                            blVarify = false;
                                            Cursor = System.Windows.Input.Cursors.Arrow;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                */



                /*

                if (Settings.PaymentGateway == 7) // POSLink
                {
                    //WriteToPOSLinkLogFile("Inside PAX Card Processing - start");
                    POSLinkLogPath = POSLinkLogFilePath();
                    POSLink_ResultCode = "";
                    POSLink_ResultTxt = "";
                    POSLink_RefNum = "";
                    POSLink_AuthCode = "";
                    POSLink_CardType = "";
                    POSLink_BogusAccountNum = "";
                    POSLink_CashBack = 0;
                    POSLink_RequestedAmt = 0;
                    POSLink_ApprovedAmt = 0;
                    POSLink_RemainingBalance = 0;
                    POSLink_ExtraBalance = 0;

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int refinv = objPOS.FetchMaxInvoiceNo();

                    POSLink.PosLink pg = new POSLink.PosLink();

                    pg.CommSetting = GeneralFunctions.GetPOSLinkCommSetup();

                    POSLink.LogManagement plog = new POSLink.LogManagement();
                    plog.LogLevel = 1;
                    plog.LogFilePath = Path.GetDirectoryName(POSLinkLogPath);
                    pg.LogManageMent = plog;

                    POSLink.PaymentRequest paymentRequest = new POSLink.PaymentRequest();


                    paymentRequest.TenderType = paymentRequest.ParseTenderType("GIFT");

                    paymentRequest.TransType = paymentRequest.ParseTransType("ACTIVATE");

                    paymentRequest.Amount = Convert.ToString(val * 100);

                    paymentRequest.OrigRefNum = "";
                    paymentRequest.InvNum = refinv.ToString();
                    paymentRequest.UserID = "";
                    paymentRequest.PassWord = "";
                    paymentRequest.ClerkID = "";
                    paymentRequest.ServerID = "";
                    paymentRequest.ECRRefNum = "1";



                    pg.PaymentRequest = paymentRequest;

                    POSLink.ProcessTransResult result = new POSLink.ProcessTransResult();

                    result = pg.ProcessTrans();

                    //WriteToPOSLinkLogFile("PAX ProcessTransResult : " + result.Msg);

                    if (result.Code == POSLink.ProcessTransResultCode.OK)
                    {
                        POSLink.PaymentResponse paymentResponse = pg.PaymentResponse;
                        if (paymentResponse != null && paymentResponse.ResultCode != null)
                        {
                            POSLink_ResultCode = paymentResponse.ResultCode;
                            POSLink_ResultTxt = paymentResponse.ResultTxt;
                            POSLink_RefNum = paymentResponse.RefNum;

                            POSLink_RequestedAmt = GeneralFunctions.fnDouble(paymentResponse.RequestedAmount) / 100;
                            POSLink_ApprovedAmt = GeneralFunctions.fnDouble(paymentResponse.ApprovedAmount) / 100;
                            POSLink_RemainingBalance = GeneralFunctions.fnDouble(paymentResponse.RemainingBalance) / 100;
                            POSLink_ExtraBalance = GeneralFunctions.fnDouble(paymentResponse.ExtraBalance) / 100;

                            POSLink_BogusAccountNum = paymentResponse.BogusAccountNum;
                            POSLink_CardType = paymentResponse.CardType;


                            POSLink_AuthCode = paymentResponse.AuthCode;

                            if (POSLink_ResultCode == "000000") // Approved
                            {




                                string updtstr = "";

                                objcard.MercuryRecordNo = "";
                                objcard.MercuryResponseOrigin = "";
                                objcard.MercuryResponseReturnCode = "";
                                objcard.MercuryTextResponse = "";

                                objcard.MercuryInvNo = "";
                                objcard.MercuryProcessData = "";
                                objcard.MercuryTranCode = "";
                                objcard.MercuryPurchaseAmount = POSLink_RequestedAmt;
                                objcard.CardAmount = POSLink_ApprovedAmt;
                                objcard.CardType = POSLink_CardType;
                                objcard.AuthCode = POSLink_AuthCode;
                                objcard.Reference = POSLink_RefNum;
                                objcard.AcqRefData = "";
                                objcard.TokenData = "";

                                objcard.RefCardAct = POSLink_BogusAccountNum;
                                objcard.RefCardLogo = POSLink_CardType;
                                objcard.RefCardEntry = "";
                                objcard.RefCardAuthID = POSLink_AuthCode;
                                objcard.RefCardTranID = POSLink_RefNum;
                                objcard.RefCardMerchID = "";
                                objcard.RefCardAuthAmount = POSLink_ApprovedAmt;
                                objcard.CardTranType = "Issue";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = POSLink_RemainingBalance;
                                objcard.PrintXml = "";
                                updtstr = objcard.UpdateCardResponse();

                                if (updtstr == "")
                                {
                                    blVarify = true;
                                }
                                else
                                {
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                    blVarify = false;
                                }

                            }
                            else
                            {
                                new MessageBoxWindow().Show(POSLink_ResultTxt, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blVarify = false;
                            }

                        }
                        else
                        {
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            blVarify = false;
                        }

                    }
                    else if (result.Code == POSLink.ProcessTransResultCode.TimeOut)
                    {
                        new MessageBoxWindow().Show("Action Timeout.", "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        blVarify = false;
                    }
                    else
                    {
                        new MessageBoxWindow().Show(result.Msg, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        blVarify = false;

                    }
                }
                */
            }

            return blVarify;
        }

        // Mercury/ Precidia Gift Card Reload Transaction

        private bool IsValidMarcuryGiftCardReload()
        {
            tempMercuryGCCardID = 0;
            intCardTranID = 0;
            bool blVarify = false;
            double dblCardAmt = 0;
            string strCard = "";


            foreach (DataRow dmgc in dtblPOSDatatblQT.Rows)
            {
                if (!((dmgc["PRODUCT"].ToString() == (Settings.PaymentGateway == 3 ? "Reload Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Reload Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "Reload POSLink Gift Card" : "Reload Mercury Gift Card")))) && (dmgc["PRODUCTTYPE"].ToString() == "X"))) continue;

                double val = GeneralFunctions.fnDouble(dmgc["PRICE"].ToString());
                dblCardAmt = val;
                AuthCode = "";


                PosDataObject.POS objcard = new PosDataObject.POS();
                objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objcard.CustomerID = intCustID;
                objcard.LoginUserID = SystemVariables.CurrentUserID;
                objcard.EmployeeID = SystemVariables.CurrentUserID;
                objcard.CardType = Settings.PaymentGateway == 3 ? "Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "POSLink Gift Card" : "Mercury Gift Card"));
                objcard.CardAmount = val;

                objcard.PaymentGateway = Settings.PaymentGateway;

                objcard.TerminalName = Settings.TerminalName;
                if (Settings.PaymentGateway == 2)
                {
                    objcard.LogFileName = MercuryLogFile;
                }
                else if (Settings.PaymentGateway == 3)
                {
                    objcard.LogFileName = PrecidiaLogFile;
                }
                else if (Settings.PaymentGateway == 5)
                {
                    objcard.LogFileName = DatacapLogFile;
                }
                else if (Settings.PaymentGateway == 6)
                {
                    objcard.LogFileName = DatacapEMVLogFile;
                }
                else
                {
                    objcard.LogFileName = "";
                }

                try
                {
                    string strerr = objcard.InsertCardTrans();
                }
                catch (Exception ex)
                {
                    blVarify = false;
                    new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, "Gift Card Reload", MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                    Cursor = System.Windows.Input.Cursors.Arrow;
                    break;
                }
                intCardTranID = objcard.CardTranID;
                mgccardidentityQT.Rows.Add(new object[] { "Reload", intCardTranID.ToString() });

                tempMercuryGCCardID = intCardTranID;
                Cursor = System.Windows.Input.Cursors.Hand;
                string strAuthCode = "0";

                /*
                if (Settings.PaymentGateway == 2)
                {
                    WriteToMercuryLogFile("Mercury Gift Card Reload - Start");

                    MercuryPayment.clsMercuryPymnt mp = new MercuryPayment.clsMercuryPymnt();
                    mp.MerchantID = Settings.MercuryHPMerchantID;
                    mp.UserID = Settings.MercuryHPUserID;
                    mp.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                    mp.InvNo = intCardTranID.ToString();
                    mp.PurchaseAmount = val;

                    string msg1 = "";
                    string msg2 = "";

                    if (Settings.ElementHPMode == 0) mp.GiftCardReload(ref msg1);
                    if (Settings.ElementHPMode == 1) mp.TestGiftCardReload(ref msg1);

                    GeneralFunctions.CreateMercuryTransactionXML(mp.MercuryXmlResponse, mp.Token);

                    WriteToMercuryLogFile("Response: " + msg1);

                    if (msg1 != "")
                    {
                        if (msg1.ToUpper().Trim() == "APPROVED")
                        {
                            AuthCode = mp.AuthID;
                            TranID = mp.TranID;
                            CardNum = mp.CardNumber;
                            CardExMM = mp.CardExMM;
                            CardExYY = mp.CardExYY;
                            CardLogo = mp.CardLogo;
                            CardType = mp.CardType;
                            ApprovedAmt = mp.ApprovedAmt;
                            RefNo = mp.RefNo;
                            MercuryPurchaseAmount = mp.PurchaseAmount;
                            MercuryProcessData = mp.MercuryProcessData;
                            MercuryTranCode = mp.MercuryTranCode;
                            MercuryTextResponse = mp.MercuryTextResponse;
                            MercuryRecordNo = mp.MercuryRecordNo;
                            MercuryResponseOrigin = mp.MercuryResponseOrigin;
                            MercuryResponseReturnCode = mp.MercuryResponseReturnCode;
                            CardEntry = mp.CardEntry;
                            Token = mp.Token;
                            AcqRef = mp.AcqRefData;
                            strMercuryMerchantID = mp.MerchantID;
                            MercuryGiftCardBalance = mp.BalanceAmt;

                            if (AuthCode == null) AuthCode = "";
                            if (TranID == null) TranID = "";
                            if (CardNum == null) CardNum = "";
                            if (CardExMM == null) CardExMM = "";
                            if (CardExYY == null) CardExYY = "";
                            if (CardLogo == null) CardLogo = "";
                            if (CardType == null) CardType = "";
                            if (ApprovedAmt == null) ApprovedAmt = "0";
                            if (RefNo == null) RefNo = "";
                            if (CardEntry == null) CardEntry = "";
                            if (Token == null) Token = "";
                            if (AcqRef == null) AcqRef = "";

                            if (MercuryProcessData == null) MercuryProcessData = "";
                            if (MercuryTranCode == null) MercuryTranCode = "";
                            if (MercuryRecordNo == null) MercuryRecordNo = "";
                            if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                            if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                            if (MercuryTextResponse == null) MercuryTextResponse = "";
                            if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";

                            if ((MercuryTextResponse.ToUpper().Trim() == "AP") || (MercuryTextResponse.ToUpper().Trim() == "AP-NEW INFO")
                                || (MercuryTextResponse.ToUpper().Trim() == "APPROVED"))
                            {
                                string updtstr = "";

                                objcard.MercuryInvNo = TranID;
                                objcard.MercuryProcessData = MercuryProcessData;
                                objcard.MercuryTranCode = MercuryTranCode;
                                objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                objcard.MercuryRecordNo = MercuryRecordNo;
                                objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                objcard.MercuryTextResponse = MercuryTextResponse;

                                objcard.CardType = CardLogo;
                                objcard.AuthCode = AuthCode;
                                objcard.Reference = RefNo;
                                objcard.AcqRefData = AcqRef;
                                objcard.TokenData = Token;

                                objcard.RefCardAct = CardNum;
                                objcard.RefCardLogo = CardLogo;
                                objcard.RefCardEntry = CardEntry;
                                objcard.RefCardAuthID = AuthCode;
                                objcard.RefCardTranID = TranID;
                                objcard.RefCardMerchID = strMercuryMerchantID;
                                objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                objcard.CardTranType = "Reload";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                objcard.PrintXml = "";
                                updtstr = objcard.UpdateCardResponse();

                                if (updtstr == "") blVarify = true;
                                Cursor = System.Windows.Input.Cursors.Arrow;
                            }
                        }
                        else
                        {
                            if (cardidentity.Rows.Count > 0)
                            {
                                foreach (DataRow dr1 in cardidentity.Rows)
                                {
                                    DataTable dt = new DataTable();
                                    dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                    int CCID = 0;
                                    string val1 = "";
                                    string val2 = "";
                                    string val3 = "";
                                    string val4 = "";
                                    string val5 = "";
                                    string val6 = "";
                                    string val7 = "";
                                    string val8 = "";
                                    string val9 = "";
                                    string val10 = "";
                                    string val20 = "";
                                    int pmntgwy = 0;

                                    bool flag = true;
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                        val1 = dr["CardType"].ToString();
                                        val2 = dr["CardAmount"].ToString();
                                        val3 = dr["Reference"].ToString();
                                        val9 = dr["MercuryProcessData"].ToString();
                                        val4 = dr["MercuryInvoiceNo"].ToString();
                                        val5 = dr["MercuryAcqRef"].ToString();
                                        val6 = dr["MercuryToken"].ToString();
                                        val7 = dr["AuthCode"].ToString();
                                        val8 = dr["IsDebitCard"].ToString();
                                        val10 = dr["RefCardTranID"].ToString();
                                        val20 = dr["TransactionType"].ToString();
                                        pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());



                                        MercuryPayment.clsMercuryPymnt mp1 = new MercuryPayment.clsMercuryPymnt();
                                        mp1.MerchantID = Settings.MercuryHPMerchantID;
                                        mp1.UserID = Settings.MercuryHPUserID;
                                        mp1.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                                        mp1.InvNo = val4;
                                        mp1.RefNo = val3;
                                        mp1.AuthID = val7;
                                        mp1.AcqRefData = val5;
                                        mp1.Token = val6;
                                        mp1.PurchaseAmount = GeneralFunctions.fnDouble(val2);
                                        mp1.MercuryProcessData = val9;
                                        string msg11 = "";
                                        if (val1 == "Credit Card")
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.CreditVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestCreditVoidSale(ref msg11);
                                        }
                                        if ((val1 == "Credit Card (STAND-IN)") || (val1 == "Credit Card - Voice Auth (STAND-IN)"))
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.StandInCreditVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestStandInCreditVoidSale(ref msg11);
                                        }
                                        if (val1 == "Debit Card")
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.DebitVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestDebitVoidSale(ref msg11);
                                        }

                                        if (val1 == "Mercury Gift Card")
                                        {
                                            if (val20 == "Sale")
                                            {
                                                if (Settings.ElementHPMode == 0) mp1.GiftCardVoidSales(ref msg11);
                                                if (Settings.ElementHPMode == 1) mp1.TestGiftCardVoidSales(ref msg11);
                                            }
                                        }

                                        GeneralFunctions.CreateMercuryTransactionXML(mp1.MercuryXmlResponse, val6);


                                        if (msg11.ToUpper().Trim() == "APPROVED")
                                        {
                                            AuthCode = mp1.AuthID;
                                            TranID = mp1.TranID;
                                            CardNum = mp1.CardNumber;
                                            CardExMM = mp1.CardExMM;
                                            CardExYY = mp1.CardExYY;
                                            CardLogo = mp1.CardLogo;
                                            CardType = mp1.CardType;
                                            ApprovedAmt = mp1.ApprovedAmt;
                                            RefNo = mp1.RefNo;
                                            CardEntry = mp1.CardEntry;
                                            Token = mp1.Token;
                                            AcqRef = mp1.AcqRefData;
                                            strMercuryMerchantID = mp1.MerchantID;
                                            MercuryProcessData = mp1.MercuryProcessData;
                                            MercuryPurchaseAmount = mp1.PurchaseAmount;
                                            MercuryTranCode = mp1.MercuryTranCode;
                                            MercuryRecordNo = mp1.MercuryRecordNo;
                                            MercuryResponseOrigin = mp1.MercuryResponseOrigin;
                                            MercuryResponseReturnCode = mp1.MercuryResponseReturnCode;
                                            MercuryGiftCardBalance = mp1.BalanceAmt;
                                            MercuryTextResponse = mp1.MercuryTextResponse;

                                            if (AuthCode == null) AuthCode = "";
                                            if (TranID == null) TranID = "";
                                            if (CardNum == null) CardNum = "";
                                            if (CardExMM == null) CardExMM = "";
                                            if (CardExYY == null) CardExYY = "";
                                            if (CardLogo == null) CardLogo = "";
                                            if (CardType == null) CardType = "";
                                            if (ApprovedAmt == null) ApprovedAmt = "0";
                                            if (RefNo == null) RefNo = "";
                                            if (CardEntry == null) CardEntry = "";
                                            if (Token == null) Token = "";
                                            if (AcqRef == null) AcqRef = "";

                                            if (MercuryTranCode == null) MercuryTranCode = "";
                                            if (MercuryRecordNo == null) MercuryRecordNo = "";
                                            if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                                            if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                                            if (MercuryTextResponse == null) MercuryTextResponse = "";
                                            if (MercuryProcessData == null) MercuryProcessData = "";
                                            if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";
                                        }
                                        else
                                        {
                                            flag = false;
                                            break;
                                        }

                                        if (flag)
                                        {
                                            PosDataObject.POS objcard1 = new PosDataObject.POS();
                                            objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                            objcard1.CustomerID = intCustID;
                                            objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                            objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                            objcard1.CardType = CardType;//CardLogo
                                            objcard1.IsDebit = val8;
                                            objcard1.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard1.PaymentGateway = pmntgwy;
                                            objcard1.MercuryInvNo = TranID;
                                            objcard1.MercuryProcessData = MercuryProcessData;
                                            objcard1.MercuryTranCode = MercuryTranCode;
                                            objcard1.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                            objcard1.AuthCode = AuthCode;
                                            objcard1.Reference = RefNo;
                                            objcard1.AcqRefData = AcqRef;
                                            objcard1.TokenData = Token;
                                            objcard1.MercuryRecordNo = MercuryRecordNo;
                                            objcard1.MercuryResponseOrigin = MercuryResponseOrigin;
                                            objcard1.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                            objcard1.MercuryTextResponse = MercuryTextResponse;

                                            objcard1.RefCardAct = CardNum;
                                            objcard1.RefCardLogo = CardLogo;
                                            objcard1.RefCardEntry = CardEntry;
                                            objcard1.RefCardAuthID = AuthCode;
                                            objcard1.RefCardTranID = TranID;
                                            objcard1.RefCardMerchID = strMercuryMerchantID;
                                            objcard1.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard1.CardTranType = "Void";
                                            objcard1.TerminalName = Settings.TerminalName;
                                            if (Settings.PaymentGateway == 2)
                                            {
                                                objcard1.LogFileName = MercuryLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 3)
                                            {
                                                objcard1.LogFileName = PrecidiaLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 5)
                                            {
                                                objcard1.LogFileName = DatacapLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 6)
                                            {
                                                objcard1.LogFileName = DatacapEMVLogFile;
                                            }
                                            else
                                            {
                                                objcard1.LogFileName = "";
                                            }
                                            string strer = objcard1.InsertCardTrans1();
                                            intCardTranID = objcard1.CardTranID;

                                            PosDataObject.POS ob = new PosDataObject.POS();
                                            ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                            ob.LoginUserID = SystemVariables.CurrentUserID;
                                            ob.CardTranID = CCID;
                                            string s = ob.UpdateCardAdjustment();
                                        }
                                    }
                                }
                            }
                            PrecidiaErrorText = mp.MercuryTextResponse;
                            blVarify = false;
                            new MessageBoxWindow().Show(Properties.Resources."Transaction failed.","frmPOSTenderDlg_msg_Transactionfailed"), "Mercury Gift Card Reload", MessageBoxButton.OK, MessageBoxImage.Information);
                            WriteToMercuryLogFile("Mercury Gift Card Reload - Error");
                            Cursor = System.Windows.Input.Cursors.Arrow;
                        }
                    }
                    else
                    {
                        blVarify = false;
                        new MessageBoxWindow().Show(Properties.Resources."Transaction failed.","frmPOSTenderDlg_msg_Transactionfailed"), "Mercury Gift Card Reload", MessageBoxButton.OK, MessageBoxImage.Information);
                        WriteToMercuryLogFile("Mercury Gift Card Reload - Error");
                        Cursor = System.Windows.Input.Cursors.Arrow;
                    }
                }
                if (Settings.PaymentGateway == 3)
                {
                    WriteToPrecidiaLogFile("GC Reload: - start");
                    blCG = false;
                    blCGgc = false;

                    string resp = "";
                    string resptxt = "";

                    //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                    CGtrantype = "GCRELOAD";

                    CGamt = dblCardAmt;
                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    CGinv = objPOS.FetchMaxInvoiceNo();



                    XmlDocument XDoc = new XmlDocument();

                    // Create root node.
                    XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

                    XDoc.AppendChild(XElemRoot);

                    XmlElement XTemp = XDoc.CreateElement("Command");
                    XTemp.InnerText = CGtrantype;
                    XElemRoot.AppendChild(XTemp);

                    XTemp = XDoc.CreateElement("Id");
                    XTemp.InnerText = CGinv.ToString();
                    XElemRoot.AppendChild(XTemp);

                    XTemp = XDoc.CreateElement("Amount");
                    XTemp.InnerText = CGamt.ToString("f");
                    XElemRoot.AppendChild(XTemp);

                    XTemp = XDoc.CreateElement("Input");
                    XTemp.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                    XElemRoot.AppendChild(XTemp);

                    XmlDocument XmlResponse = new XmlDocument();

                    XTemp = XDoc.CreateElement("KeepAlive");
                    XTemp.InnerText = "N";
                    XElemRoot.AppendChild(XTemp);

                    XTemp = XDoc.CreateElement("ClientMAC");
                    XTemp.InnerText = Settings.PrecidiaClientMAC;
                    XElemRoot.AppendChild(XTemp);

                    if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc.OuterXml);

                    bool bTelnet = false;
                    try
                    {
                        SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                        bTelnet = true;
                    }
                    catch (Exception ex)
                    {
                        WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                        bTelnet = false;
                    }

                    if (bTelnet)
                    {
                        if (XmlResponse.InnerXml != "")
                        {
                            if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse.InnerXml);
                            SocketResponse_GC(XmlResponse);

                            resp = CGresp;
                            resptxt = CGresptxt;

                            WriteToPrecidiaLogFile("Response: " + resp);
                            WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));

                            if (resp != "")
                            {
                                if (resp != "APPROVED")
                                {
                                    if (cardidentity.Rows.Count > 0)
                                    {
                                        foreach (DataRow dr1 in cardidentity.Rows)
                                        {
                                            DataTable dt = new DataTable();
                                            dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                            int CCID = 0;
                                            string val1 = "";
                                            string val2 = "";
                                            string val3 = "";
                                            string val4 = "";
                                            string val5 = "";
                                            string val6 = "";
                                            string val7 = "";
                                            string val8 = "";
                                            string val9 = "";
                                            string val10 = "";
                                            string val20 = "";
                                            int pmntgwy = 0;

                                            bool flag = true;
                                            foreach (DataRow dr in dt.Rows)
                                            {
                                                blCG = false;
                                                CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                                val1 = dr["CardType"].ToString();
                                                val2 = dr["CardAmount"].ToString();
                                                val3 = dr["Reference"].ToString();
                                                val9 = dr["MercuryProcessData"].ToString();
                                                val4 = dr["MercuryInvoiceNo"].ToString();
                                                val5 = dr["MercuryAcqRef"].ToString();
                                                val6 = dr["MercuryToken"].ToString();
                                                val7 = dr["AuthCode"].ToString();
                                                val8 = dr["IsDebitCard"].ToString();
                                                val10 = dr["RefCardTranID"].ToString();
                                                val20 = dr["TransactionType"].ToString();
                                                pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());



                                                string resp1 = "";
                                                string resptxt1 = "";

                                                //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                                                if (val1 == "Credit Card")
                                                {
                                                    CGtrantype = "CCVOID";
                                                }
                                                if ((val1 == "Credit Card - Voice Auth") || (val1 == "Credit Card (STAND-IN)") || (val1 == "Credit Card - Voice Auth (STAND-IN)"))
                                                {
                                                    CGtrantype = "CCVOID";
                                                }
                                                if (val1 == "Debit Card")
                                                {
                                                    CGtrantype = "DCREFUND";
                                                }

                                                if (val1 == "Precidia Gift Card")
                                                {
                                                    if (val20 == "Sale")
                                                    {
                                                        CGtrantype = "GCVOID";
                                                    }
                                                    if (val20 == "Issue")
                                                    {
                                                        CGtrantype = "GCVOIDACTIVATE";
                                                    }

                                                    if (val20 == "Reload")
                                                    {
                                                        CGtrantype = "GCVOID";
                                                    }
                                                }

                                                CGamt = GeneralFunctions.fnDouble(val2);



                                                XmlDocument XDoc1 = new XmlDocument();

                                                // Create root node.
                                                XmlElement XElemRoot1 = XDoc1.CreateElement("PLRequest");

                                                XDoc1.AppendChild(XElemRoot1);

                                                XmlElement XTemp1 = XDoc1.CreateElement("Command");
                                                XTemp1.InnerText = CGtrantype;
                                                XElemRoot1.AppendChild(XTemp1);

                                                if (val1 != "Debit Card")
                                                {
                                                    XTemp1 = XDoc1.CreateElement("RecNum");
                                                    XTemp1.InnerText = val10.ToString();
                                                    XElemRoot1.AppendChild(XTemp1);
                                                }


                                                XTemp1 = XDoc1.CreateElement("Amount");
                                                XTemp1.InnerText = CGamt.ToString("f");
                                                XElemRoot1.AppendChild(XTemp1);

                                                if (val1 == "Debit Card")
                                                {
                                                    XTemp1 = XDoc1.CreateElement("Input");
                                                    XTemp1.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                                                    XElemRoot1.AppendChild(XTemp1);
                                                }

                                                XmlDocument XmlResponse1 = new XmlDocument();

                                                XTemp1 = XDoc1.CreateElement("KeepAlive");
                                                XTemp1.InnerText = "N";
                                                XElemRoot1.AppendChild(XTemp1);

                                                XTemp1 = XDoc1.CreateElement("ClientMAC");
                                                XTemp1.InnerText = Settings.PrecidiaClientMAC;
                                                XElemRoot1.AppendChild(XTemp1);

                                                if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc1.OuterXml);

                                                bool bTelnet1 = false;
                                                try
                                                {
                                                    SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc1, ref XmlResponse1);
                                                    bTelnet1 = true;
                                                }
                                                catch (Exception ex)
                                                {
                                                    WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                                                    bTelnet1 = false;
                                                }

                                                if (bTelnet1)
                                                {
                                                    if (XmlResponse1.InnerXml != "")
                                                    {
                                                        if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse1.InnerXml);
                                                        SocketResponse_General(XmlResponse1);

                                                        resp1 = CGresp;
                                                        resptxt1 = CGresptxt;

                                                        if (resp != "")
                                                        {
                                                            if (resp != "APPROVED")
                                                            {
                                                                new MessageBoxWindow().Show(Properties.Resources."Error occured during Card Transaction", "frmPOSTenderDlg_msg_ErroroccuredduringCardTransact"), "Credit Card Transaction", MessageBoxButton.OK, MessageBoxImage.Information);
                                                                flag = false;
                                                                break;
                                                            }
                                                            else
                                                            {

                                                            }
                                                        }

                                                        if (flag)
                                                        {
                                                            PosDataObject.POS objcard1 = new PosDataObject.POS();
                                                            objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                            objcard1.CustomerID = intCustID;
                                                            objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                                            objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                                            objcard1.CardType = CardType;//CardLogo
                                                            objcard1.IsDebit = val8;
                                                            objcard1.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                                            objcard1.PaymentGateway = pmntgwy;
                                                            objcard1.MercuryInvNo = TranID;
                                                            objcard1.MercuryProcessData = MercuryProcessData;
                                                            objcard1.MercuryTranCode = MercuryTranCode;
                                                            objcard1.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                                            objcard1.AuthCode = AuthCode;
                                                            objcard1.Reference = RefNo;
                                                            objcard1.AcqRefData = AcqRef;
                                                            objcard1.TokenData = Token;
                                                            objcard1.MercuryRecordNo = MercuryRecordNo;
                                                            objcard1.MercuryResponseOrigin = MercuryResponseOrigin;
                                                            objcard1.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                                            objcard1.MercuryTextResponse = MercuryTextResponse;

                                                            objcard1.RefCardAct = CardNum;
                                                            objcard1.RefCardLogo = CardLogo;
                                                            objcard1.RefCardEntry = CardEntry;
                                                            objcard1.RefCardAuthID = AuthCode;
                                                            objcard1.RefCardTranID = TranID;
                                                            objcard1.RefCardMerchID = strMercuryMerchantID;
                                                            objcard1.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                                            objcard1.CardTranType = "Void";

                                                            objcard1.TerminalName = Settings.TerminalName;
                                                            if (Settings.PaymentGateway == 2)
                                                            {
                                                                objcard1.LogFileName = MercuryLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 3)
                                                            {
                                                                objcard1.LogFileName = PrecidiaLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 5)
                                                            {
                                                                objcard1.LogFileName = DatacapLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 6)
                                                            {
                                                                objcard1.LogFileName = DatacapEMVLogFile;
                                                            }
                                                            else
                                                            {
                                                                objcard1.LogFileName = "";
                                                            }

                                                            try
                                                            {
                                                                string strerr = objcard1.InsertCardTrans1();
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                               new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                                                GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                                                                Cursor = System.Windows.Input.Cursors.Arrow;
                                                                break;
                                                            }
                                                            intCardTranID = objcard1.CardTranID;

                                                            PosDataObject.POS ob = new PosDataObject.POS();
                                                            ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                            ob.LoginUserID = SystemVariables.CurrentUserID;
                                                            ob.CardTranID = CCID;
                                                            string s = ob.UpdateCardAdjustment();
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                    }
                                    PrecidiaErrorText = "Transaction Declined" + "\n" + resptxt;
                                    PrecidiaDisplayResultText = "TRANSACTION DECLINED";
                                    DocMessage.MsgInformation(resptxt);
                                    blVarify = false;
                                }
                                else
                                {



                                   // foreach (DataRow dra1 in dtblTender.Rows)
                                  //  {
                                  //      if (dra1["TENDER"].ToString() == strCard)
                                   //     {
                                   //         dra1["CCTRANNO"] = intCardTranID.ToString();
                                   //         break;
                                   //     }
                                   // }



                                    string updtstr = "";
                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = 0;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardType = CardLogo;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = "";
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardTranType = "Reload";
                                    objcard.AdjustFlag = "N";
                                    objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();

                                    if (updtstr == "")
                                    {
                                        WriteToPrecidiaLogFile("Card Trans Updated");
                                        blVarify = true;
                                    }
                                    else
                                    {
                                        PrecidiaErrorText = Properties.Resources."Record Update: ", "frmPOSTenderDlg_RecordUpdate") + updtstr;
                                    }
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                }
                            }
                            else
                            {
                                WriteToPrecidiaLogFile(resptxt);
                                blVarify = false;
                                break;
                            }
                        }
                    }
                }




                if (Settings.PaymentGateway == 5) // Datacap
                {
                    WriteToDatacapLogFile("Datacap Prepaid Reload - Start");

                    Dcap_CmdStatus = "";
                    Dcap_TextResponse = "";
                    Dcap_AcctNo = "";
                    Dcap_Merchant = "";
                    Dcap_TranCode = "";
                    Dcap_CardType = "";
                    Dcap_AuthCode = "";
                    Dcap_RefNo = "";
                    Dcap_AcqRefData = "";
                    Dcap_RecordNo = "";
                    Dcap_InvoiceNo = "";
                    Dcap_TranAmt = 0;
                    Dcap_AuthAmt = 0;
                    Dcap_CashBkAmt = 0;
                    Dcap_BalAmt = 0;

                    bool bproceed = true;
                    string request_xml = "";
                    string response_xml = "";

                    DSIPDCXLib.DsiPDCX dsipdx = new DSIPDCXLib.DsiPDCX();

                    dsipdx.ServerIPConfig(Settings.DatacapServer, 1);

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int dcap_max_inv = objPOS.FetchMaxInvoiceNo();

                    request_xml = GeneralFunctions.Datacap_PrePaidReload_Request_XML(val, dcap_max_inv);

                    try
                    {
                        response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                    }
                    catch
                    {
                        bproceed = false;
                    }

                    WriteToDatacapLogFile("Request XML : " + request_xml);

                    if (bproceed)
                    {
                        GeneralFunctions.Datacap_General_Response(  response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                                                    ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                                                    ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);

                        WriteToDatacapLogFile("Response XML : " + response_xml);

                        if (Dcap_CmdStatus == "Approved")
                        {
                            string updtstr = "";
                            objcard.MercuryRecordNo = "";
                            objcard.MercuryResponseOrigin = "";
                            objcard.MercuryResponseReturnCode = "";
                            objcard.MercuryTextResponse = "";

                            objcard.MercuryInvNo = Dcap_InvoiceNo;
                            objcard.MercuryProcessData = "";
                            objcard.MercuryTranCode = "";
                            objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                            objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                            objcard.CardType = Dcap_CardType;
                            objcard.AuthCode = Dcap_AuthCode;
                            objcard.Reference = Dcap_RefNo;
                            objcard.AcqRefData = Dcap_AcqRefData;
                            objcard.TokenData = Dcap_RecordNo;

                            objcard.RefCardAct = Dcap_AcctNo;
                            objcard.RefCardLogo = Dcap_CardType;
                            objcard.RefCardEntry = CardEntry;
                            objcard.RefCardAuthID = Dcap_AuthCode;
                            objcard.RefCardTranID = TranID;
                            objcard.RefCardMerchID = Dcap_Merchant;
                            objcard.RefCardAuthAmount = Dcap_AuthAmt;
                            objcard.CardTranType = "Reload";
                            objcard.AdjustFlag = "N";
                            objcard.RefCardBalAmount = Dcap_BalAmt;
                            objcard.PrintXml = "";
                            updtstr = objcard.UpdateCardResponse();

                            if (updtstr == "")
                            {
                                blVarify = true;
                                WriteToDatacapLogFile("Card Trans Record Updated");
                            }
                            else
                            {
                                WriteToDatacapLogFile("Card Trans Record updation fails");
                                blVarify = false;
                            }
                            Cursor = System.Windows.Input.Cursors.Arrow;
                        }
                        else
                        {
                            new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Datacap Gift Card Reload", MessageBoxButton.OK, MessageBoxImage.Information);

                            WriteToDatacapLogFile(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse);

                            if (cardidentity.Rows.Count > 0)
                            {
                                foreach (DataRow dr1 in cardidentity.Rows)
                                {
                                    blCG = false;
                                    DataTable dt = new DataTable();
                                    dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                    int CCID = 0;
                                    string val1 = "";
                                    string val2 = "";
                                    string val3 = "";
                                    string val4 = "";
                                    string val5 = "";
                                    string val6 = "";
                                    string val7 = "";
                                    string val8 = "";
                                    string val9 = "";
                                    string val10 = "";
                                    string val20 = "";
                                    int pmntgwy = 0;

                                    bool flag = true;
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                        val1 = dr["CardType"].ToString();
                                        val2 = dr["CardAmount"].ToString();
                                        val3 = dr["Reference"].ToString();
                                        val9 = dr["MercuryProcessData"].ToString();
                                        val4 = dr["MercuryInvoiceNo"].ToString();
                                        val5 = dr["MercuryAcqRef"].ToString();
                                        val6 = dr["MercuryToken"].ToString();
                                        val7 = dr["AuthCode"].ToString();
                                        val8 = dr["IsDebitCard"].ToString();
                                        val10 = dr["RefCardTranID"].ToString();
                                        val20 = dr["TransactionType"].ToString();
                                        pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());


                                        if (val1 == "Credit Card")
                                        {
                                            request_xml = GeneralFunctions.Datacap_CreditVoidSale_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7, val5,blPressManual);

                                            try
                                            {
                                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                            }
                                            catch
                                            {
                                                bproceed = false;
                                            }
                                        }

                                        if (val1 == "Debit Card")
                                        {

                                        }

                                        if (val1 == "Datacap Gift Card")
                                        {
                                            if (val20 == "Sale")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidSale_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }
                                            if (val20 == "Issue")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidIssue_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }

                                            if (val20 == "Reload")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidReload_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }
                                        }

                                        if (bproceed)
                                        {
                                            GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                                ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                                ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);

                                            if (Dcap_CmdStatus == "Approved")
                                            {
                                                PosDataObject.POS objcard1 = new PosDataObject.POS();
                                                objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                objcard1.CustomerID = intCustID;
                                                objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                                objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                                objcard1.CardType = Dcap_CardType;
                                                objcard1.IsDebit = val8;
                                                objcard1.CardAmount = Dcap_AuthAmt;
                                                objcard1.PaymentGateway = pmntgwy;
                                                objcard1.MercuryInvNo = Dcap_InvoiceNo;
                                                objcard1.MercuryProcessData = "";
                                                objcard1.MercuryTranCode = "";
                                                objcard1.MercuryPurchaseAmount = Dcap_TranAmt;
                                                objcard1.AuthCode = Dcap_AuthCode;
                                                objcard1.Reference = Dcap_RefNo;
                                                objcard1.AcqRefData = Dcap_AcqRefData;
                                                objcard1.TokenData = Dcap_RecordNo;
                                                objcard1.MercuryRecordNo = "";
                                                objcard1.MercuryResponseOrigin = "";
                                                objcard1.MercuryResponseReturnCode = "";
                                                objcard1.MercuryTextResponse = "";

                                                objcard1.RefCardAct = Dcap_AcctNo;
                                                objcard1.RefCardLogo = Dcap_CardType;
                                                objcard1.RefCardEntry = CardEntry;
                                                objcard1.RefCardAuthID = Dcap_AuthCode;
                                                objcard1.RefCardTranID = TranID;
                                                objcard1.RefCardMerchID = Dcap_Merchant;
                                                objcard1.RefCardAuthAmount = Dcap_AuthAmt;
                                                objcard1.CardTranType = "Void";

                                                objcard1.TerminalName = Settings.TerminalName;
                                                if (Settings.PaymentGateway == 2)
                                                {
                                                    objcard1.LogFileName = MercuryLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 3)
                                                {
                                                    objcard1.LogFileName = PrecidiaLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 5)
                                                {
                                                    objcard1.LogFileName = DatacapLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 6)
                                                {
                                                    objcard1.LogFileName = DatacapEMVLogFile;
                                                }
                                                else
                                                {
                                                    objcard1.LogFileName = "";
                                                }

                                                try
                                                {
                                                    string strerr = objcard1.InsertCardTrans1();
                                                }
                                                catch (Exception ex)
                                                {
                                                    new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                                    GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                                    break;
                                                }
                                                intCardTranID = objcard1.CardTranID;

                                                PosDataObject.POS ob = new PosDataObject.POS();
                                                ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                ob.LoginUserID = SystemVariables.CurrentUserID;
                                                ob.CardTranID = CCID;
                                                string s = ob.UpdateCardAdjustment();
                                            }
                                            else
                                            {
                                                new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Card Void", MessageBoxButton.OK, MessageBoxImage.Information);
                                            }
                                        }
                                        else
                                        {
                                            blVarify = false;
                                            Cursor = System.Windows.Input.Cursors.Arrow;
                                            break;
                                        }


                                    }
                                }
                            }
                        }

                    }
                }

                */


                /*
                if (Settings.PaymentGateway == 7) // POSLink
                {
                    POSLinkLogPath = POSLinkLogFilePath();
                    POSLink_ResultCode = "";
                    POSLink_ResultTxt = "";
                    POSLink_RefNum = "";
                    POSLink_AuthCode = "";
                    POSLink_CardType = "";
                    POSLink_BogusAccountNum = "";
                    POSLink_CashBack = 0;
                    POSLink_RequestedAmt = 0;
                    POSLink_ApprovedAmt = 0;
                    POSLink_RemainingBalance = 0;
                    POSLink_ExtraBalance = 0;

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int refinv = objPOS.FetchMaxInvoiceNo();

                    POSLink.PosLink pg = new POSLink.PosLink();

                    pg.CommSetting = GeneralFunctions.GetPOSLinkCommSetup();

                    POSLink.LogManagement plog = new POSLink.LogManagement();
                    plog.LogLevel = 1;
                    plog.LogFilePath = Path.GetDirectoryName(POSLinkLogPath);
                    pg.LogManageMent = plog;

                    POSLink.PaymentRequest paymentRequest = new POSLink.PaymentRequest();

                    paymentRequest.TenderType = paymentRequest.ParseTenderType("GIFT");

                    paymentRequest.TransType = paymentRequest.ParseTransType("RELOAD");

                    paymentRequest.Amount = Convert.ToString(dblCardAmt * 100);

                    paymentRequest.OrigRefNum = "";
                    paymentRequest.InvNum = refinv.ToString();
                    paymentRequest.UserID = "";
                    paymentRequest.PassWord = "";
                    paymentRequest.ClerkID = "";
                    paymentRequest.ServerID = "";
                    paymentRequest.ECRRefNum = "1";

                    pg.PaymentRequest = paymentRequest;

                    POSLink.ProcessTransResult result = new POSLink.ProcessTransResult();

                    result = pg.ProcessTrans();

                    if (result.Code == POSLink.ProcessTransResultCode.OK)
                    {
                        POSLink.PaymentResponse paymentResponse = pg.PaymentResponse;
                        if (paymentResponse != null && paymentResponse.ResultCode != null)
                        {
                            POSLink_ResultCode = paymentResponse.ResultCode;
                            POSLink_ResultTxt = paymentResponse.ResultTxt;
                            POSLink_RefNum = paymentResponse.RefNum;

                            POSLink_RequestedAmt = GeneralFunctions.fnDouble(paymentResponse.RequestedAmount) / 100;
                            POSLink_ApprovedAmt = GeneralFunctions.fnDouble(paymentResponse.ApprovedAmount) / 100;
                            POSLink_RemainingBalance = GeneralFunctions.fnDouble(paymentResponse.RemainingBalance) / 100;
                            POSLink_ExtraBalance = GeneralFunctions.fnDouble(paymentResponse.ExtraBalance) / 100;

                            POSLink_BogusAccountNum = paymentResponse.BogusAccountNum;
                            POSLink_CardType = paymentResponse.CardType;


                            POSLink_AuthCode = paymentResponse.AuthCode;

                            if (POSLink_ResultCode == "000000") // Approved
                            {
                                string updtstr = "";

                                objcard.MercuryRecordNo = "";
                                objcard.MercuryResponseOrigin = "";
                                objcard.MercuryResponseReturnCode = "";
                                objcard.MercuryTextResponse = "";

                                objcard.MercuryInvNo = "";
                                objcard.MercuryProcessData = "";
                                objcard.MercuryTranCode = "";
                                objcard.MercuryPurchaseAmount = POSLink_RequestedAmt;
                                objcard.CardAmount = POSLink_ApprovedAmt;
                                objcard.CardType = POSLink_CardType;
                                objcard.AuthCode = POSLink_AuthCode;
                                objcard.Reference = POSLink_RefNum;
                                objcard.AcqRefData = "";
                                objcard.TokenData = "";

                                objcard.RefCardAct = POSLink_BogusAccountNum;
                                objcard.RefCardLogo = POSLink_CardType;
                                objcard.RefCardEntry = "";
                                objcard.RefCardAuthID = POSLink_AuthCode;
                                objcard.RefCardTranID = POSLink_RefNum;
                                objcard.RefCardMerchID = "";
                                objcard.RefCardAuthAmount = POSLink_ApprovedAmt;
                                objcard.CardTranType = "Reload";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = POSLink_RemainingBalance;
                                objcard.PrintXml = "";
                                updtstr = objcard.UpdateCardResponse();

                                if (updtstr == "")
                                {
                                    blVarify = true;
                                }
                                else
                                {
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                    blVarify = false;
                                }

                            }
                            else
                            {
                                new MessageBoxWindow().Show(POSLink_ResultTxt, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blVarify = false;
                            }

                        }
                        else
                        {
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            blVarify = false;
                        }

                    }
                    else if (result.Code == POSLink.ProcessTransResultCode.TimeOut)
                    {
                        new MessageBoxWindow().Show("Action Timeout.", "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        blVarify = false;
                    }
                    else
                    {
                        new MessageBoxWindow().Show(result.Msg, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        blVarify = false;

                    }
                }
                */



            }

            return blVarify;
        }






        #region Mercury Log

        private string MercuryLogFilePath()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            //csConnPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\Mercury Logs";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\Mercury Logs";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath + "\\" + MercuryLogFile;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\" + MercuryLogFile;
            }
            return strfilename;
        }

        private void WriteToMercuryLogFile(string txt)
        {
            FileStream fileStrm;
            if (File.Exists(MercuryLogPath)) fileStrm = new FileStream(MercuryLogPath, FileMode.Append, FileAccess.Write);
            else fileStrm = new FileStream(MercuryLogPath, FileMode.OpenOrCreate, FileAccess.Write);

            StreamWriter sw = new StreamWriter(fileStrm);
            sw.WriteLine(txt);
            sw.Close();
            fileStrm.Close();
        }

        #endregion

        #region Datacap Log

        private string DatacapLogFilePath()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\Datacap Logs";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\Datacap Logs";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath + "\\" + DatacapLogFile;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\" + DatacapLogFile;
            }
            return strfilename;
        }

        private void WriteToDatacapLogFile(string txt)
        {
            FileStream fileStrm;
            if (File.Exists(DatacapLogPath)) fileStrm = new FileStream(DatacapLogPath, FileMode.Append, FileAccess.Write);
            else fileStrm = new FileStream(DatacapLogPath, FileMode.OpenOrCreate, FileAccess.Write);

            StreamWriter sw = new StreamWriter(fileStrm);
            sw.WriteLine(txt);
            sw.Close();
            fileStrm.Close();
        }

        #endregion

        #region Datacap EMV Log

        private string DatacapEMVLogFilePath()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\DatacapEMV Logs";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\DatacapEMV Logs";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath + "\\" + DatacapEMVLogFile;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\" + DatacapEMVLogFile;
            }
            return strfilename;
        }

        private void WriteToDatacapEMVLogFile(string txt)
        {
            FileStream fileStrm;
            if (File.Exists(DatacapEMVLogPath)) fileStrm = new FileStream(DatacapEMVLogPath, FileMode.Append, FileAccess.Write);
            else fileStrm = new FileStream(DatacapEMVLogPath, FileMode.OpenOrCreate, FileAccess.Write);

            StreamWriter sw = new StreamWriter(fileStrm);
            sw.WriteLine(txt);
            sw.Close();
            fileStrm.Close();
        }

        #endregion

        private void btnNoTax_Click(object sender, EventArgs e)
        {
            if (dtblPOS.Rows.Count == 0) return;


            foreach (DataRow dr in dtblPOS.Rows)
            {
                //if ((strCurrentServiceType == "Sales") && (GeneralFunctions.fnInt32(dr["MIXMATCHID"].ToString()) > 0)) continue;
                //if ((strCurrentServiceType == "Sales") && (GeneralFunctions.fnInt32(dr["BUYNGETFREEHEADERID"].ToString()) > 0)) continue;

                dr["EDITF"] = "Y";

                dr["TAXABLE1"] = "N";
                dr["TAXABLE2"] = "N";
                dr["TAXABLE2"] = "N";
            }
            SetCartDisplay();
            gridControl1.ItemsSource = dtblPOS;
            ToggleWithEmptyCart();
            /// Set UP/Down Button to move cursor through Cart Item
            EnableDisableButton(btnUP, btnDown, gridControl1);
            GetTotal(); /// Calculate and Display Cart Total
            ShowTax(); /// Calculate and Display Taxes of Cart Items
            ResetQty();  /// Reset Item Quantity
        }




        #endregion

        private async Task AddWeightedItemForLiveWeight(string data)
        {
            DevExpress.Data.CurrencyDataController.DisableThreadingProblemsDetection = true;
            try
            {
                string line1 = "";
                string line2 = "";
                bool blfinddata = false;
                string strselectid = weightitemid.ToString();
                string refType = "";
                string refOHQty = "";
                string refNQty = "";
                string refPrice = "";
                string refNPrice = "";
                string refCost = "";
                string refPrompt = "";
                string refDP = "";
                string refAge = "";
                string refRentMI = "";
                string refRentHR = "";
                string refRentHDY = "";
                string refRentDY = "";
                string refRentWK = "";
                string refRentMN = "";
                string refRentDeposit = "";
                string refRentMinHR = "";
                string refRentMinAmt = "";
                string refRepairAmt = "";
                string refRepairPromptAmt = "";
                string refRepairPromptTag = "";
                string refRentPrompt = "";
                int SaleID = 0;
                double SalePrice = 0;
                double Tare = 0;
                string refUOM = "";
                string refExpiry = "";

                FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty, ref refNQty,
                             ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI, ref refRentHR, ref refRentHDY, ref refRentDY,
                             ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt, ref refRentPrompt, ref refRepairAmt,
                             ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

                FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref SaleID, ref SalePrice);



                double Tr1 = 0;
                double Tr2 = 0;
                FetchTare(GeneralFunctions.fnInt32(strselectid), ref Tr1, ref Tr2);

                Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                if (blTareEntry)
                {
                    Tare = dblTareEntryValue;
                    blTareEntry = false;
                }

                if (SaleID > 0)
                {
                    refPrompt = "N";
                    refPrice = SalePrice.ToString();
                }

                if (refPrompt == "Y")
                {
                    double promptPrice = GetPromptPrice(weightitemname, GeneralFunctions.fnDouble(refPrice));
                    if (promptPrice == -99999) return;
                    dtblPOS.Rows.Add(new object[]
                                            { strselectid,weightitemname,refType,refOHQty,refNQty,refCost,GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()),promptPrice,promptPrice.ToString(),
                                              Convert.ToDecimal((GeneralFunctions.fnDouble(GeneralFunctions.SetWeightAccuracy(weightstring)) - Tare)  * GeneralFunctions.fnDouble(promptPrice)).ToString(),"0","0","0",
                                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",strCurrentServiceType,"NA","0",
                                              "0","0","","","",0,0,0,0,0,0,0,0,0,
                                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",0,
                                              promptPrice,
                                              Convert.ToDecimal((GeneralFunctions.fnDouble(GeneralFunctions.SetWeightAccuracy(weightstring)) - Tare)  * GeneralFunctions.fnDouble(promptPrice)).ToString(),
                                             weightuom == "" ? refUOM : weightuom,"","","","","N"});
                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(weightitemname, intPressQty.ToString(), promptPrice.ToString(),
                    ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);
                }
                else
                {
                    dtblPOS.Rows.Add(new object[]
                                        { strselectid,weightitemname,refType,refOHQty,refNQty,refCost,GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()),refPrice,refNPrice,
                                          Convert.ToDecimal((GeneralFunctions.fnDouble(GeneralFunctions.SetWeightAccuracy(weightstring)) - Tare) * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                          "0","0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1",
                                          "0","0","0","","","","0","0","0","N","N","N",
                                          strCurrentServiceType,"NA","0","0","0","","","",0,0,0,0,0,0,0,0,0,
                                          0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",0,
                                          refPrice,
                                          Convert.ToDecimal((GeneralFunctions.fnDouble(GeneralFunctions.SetWeightAccuracy(weightstring)) - Tare) * GeneralFunctions.fnDouble(refPrice)).ToString(),
                                          weightuom == "" ? refUOM : weightuom,"","","","","N"});
                    line1 = "";
                    line2 = "";
                    RearrangeCartItemTextBeforePoleDisplay(weightitemname, GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()), refPrice,
                    ref line1, ref line2);
                    DisplayPoleText(2, "N", "N", line1, line2);

                }

                if (Settings.PriceLevelForOneTime == "Y")
                {
                    Settings.PriceLevelForOneTime = "N";
                    intUsePriceLevel = Settings.UsePriceLevel;
                }

                SetCartDisplay();
                gridControl1.ItemsSource = dtblPOS;
                ToggleWithEmptyCart();
                gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;


                EnableDisableButton(btnUP, btnDown, gridControl1);

                await AddAutoDiscountInCart(weightitemid, SaleID > 0 ? false : true);

                await AddAutoFeesInCart(weightitemid);

                //  Automatic MixnMatch
                if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();

                GetTotal();
                ShowTax();
                ResetQty();
                //gridControl1.RefreshData();
            }
            catch
            {

            }
        }

        /// Get Tax from Tax Table

        private double GetTaxFromTaxTable(int TxID, double TxPerc, double AppValue)
        {
            double val = 0;

            DataTable dtbl = new DataTable();
            PosDataObject.Tax objtx = new PosDataObject.Tax();
            objtx.Connection = SystemVariables.Conn;
            dtbl = objtx.ShowDetailRecord(TxID);
            if (dtbl.Rows.Count == 0)
            {
                val = GeneralFunctions.FormatDouble((TxPerc * AppValue) / 100);
            }
            else
            {
                bool exactval = false;
                double ttx = 0;
                bool startrange = false;
                bool endrange = false;
                int cnt = 0;
                foreach (DataRow dr in dtbl.Rows)
                {
                    cnt++;
                    if (GeneralFunctions.fnDouble(dr["BreakPoints"].ToString()) == AppValue)
                    {
                        exactval = true;
                        ttx = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        break;
                    }

                    if (AppValue > GeneralFunctions.fnDouble(dr["BreakPoints"].ToString()))
                    {
                        startrange = true;
                        ttx = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    }
                    else
                    {
                        if (startrange)
                        {
                            endrange = true;
                            break;
                        }
                    }
                }

                if ((exactval) || (startrange && endrange))
                {
                    val = ttx;
                }
                else
                {
                    if (!startrange && !endrange)
                    {
                        val = 0;
                    }
                    if (startrange && !endrange)
                    {
                        val = GeneralFunctions.FormatDouble((TxPerc * AppValue) / 100);
                    }
                }
            }
            return val;
        }

        //  Repair Issue Function

        private void IssueRepairTransaction()
        {

            int intINV = 0;
            string srterrmsg = "";
            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            objpos.EmployeeID = SystemVariables.CurrentUserID;
            objpos.CustomerID = intCustID;
            objpos.TransType = 17;
            objpos.ReceiptCnt = 1;
            objpos.Status = 17;
            objpos.Tax = 0;
            double tempcoupon = 0;
            objpos.Coupon = tempcoupon;
            objpos.CouponPerc = 0;
            objpos.Discount = Convert.ToDouble(numDiscount.Text);
            objpos.DiscountReason = "";
            objpos.TotalSale = 0;
            objpos.ItemDataTable = FinalDataTableForRepair(dtblPOS);

            objpos.TaxID1 = 0;
            objpos.TaxID2 = 0;
            objpos.TaxID3 = 0;
            objpos.Tax1 = 0;
            objpos.Tax2 = 0;
            objpos.Tax3 = 0;
            objpos.ErrorMsg = "";
            objpos.ChangeAmount = 0;
            objpos.SuspendInvoiceNo = 0;

            objpos.ChangedByAdmin = intSuperUserID;
            objpos.FunctionButtonAccess = blFunctionBtnAccess;

            objpos.TenderDataTable = null;
            // static value
            objpos.StoreID = 1;
            objpos.RegisterID = 1;
            objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
            objpos.TransNoteNo = 0;
            objpos.LayawayNo = 0;
            objpos.TransMSeconds = 0;
            // static value
            objpos.TerminalName = Settings.TerminalName;
            objpos.Return = false;
            objpos.NewLayaway = false;
            objpos.Layaway = false;
            objpos.LayawayRefund = false;
            objpos.ApptDataTable = null;
            objpos.RentReturn = false;
            objpos.ServiceType = "Repair";

            DateTime rpdelvy = Convert.ToDateTime(null);
            DateTime rpnotf = Convert.ToDateTime(null);
            string strrpnotes1 = "";
            string strrpnotes2 = "";
            string strrpnotes3 = "";
            string strrpitm = "";
            string strrpsl = "";

            foreach (DataRow drrp in dtblRepairInfo.Rows)
            {
                strrpitm = drrp["ItemTag"].ToString();
                strrpsl = drrp["ItemSL"].ToString();
                strrpnotes1 = drrp["ProblemDesc"].ToString();
                strrpnotes2 = drrp["RepairDesc"].ToString();
                strrpnotes3 = drrp["Remarks"].ToString();
                if (drrp["ExpectedDeliveryDate"].ToString() != "") rpdelvy = GeneralFunctions.fnDate(drrp["ExpectedDeliveryDate"].ToString());
                if (drrp["NotifiedDate"].ToString() != "") rpnotf = GeneralFunctions.fnDate(drrp["NotifiedDate"].ToString());
            }
            objpos.RepairItemName = strrpitm;
            objpos.RepairItemSL = strrpsl;
            objpos.RepairDeliveryDate = rpdelvy;
            objpos.RepairNotifiedDate = rpnotf;
            objpos.RepairProblem = strrpnotes1;
            objpos.RepairNotes = strrpnotes2;
            objpos.RepairRemarks = strrpnotes3;
            objpos.RepairAmount = Convert.ToDouble(numTotal.Text);
            objpos.RepairAdvanceAmount = repairadv;
            objpos.RentalSecurityDeposit = 0;
            objpos.GCCentralFlag = Settings.CentralExportImport;
            objpos.GCOPStore = Settings.StoreCode;

            objpos.OperateStore = Settings.StoreCode;

            objpos.BeginTransaction();
            if (objpos.CreateInvoice())
            {
                intINV = objpos.ID;
            }
            objpos.EndTransaction();
            if (intINV > 0)
            {
                PrintInvoice(intINV, "Repair In");
                InitializeScreen();
            }
        }

        /// Scan item with DataLogic Scanner and add into cart 

        private async Task ExecuteDataLogicScanData()
        {
            bool blFindBySKU = false;
            bool blFindByAltSKU = false;
            bool blFindByAltSKU2 = false;
            bool blFindByUPC = false;
            string SKU = "";
            try
            {
                if (blReturnItem) return;
                if (txtSKU.Text.Trim() == "") return;

                if ((intCustID == 0) && (Settings.CustomerInfo == 2))
                {
                    if (dtblPOS.Rows.Count == 0)
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Enter_valid_customer_before_ringing_item, "POS", MessageBoxButton.OK, MessageBoxImage.Information);
                        GeneralFunctions.SetFocus(txtCust);
                        return;
                    }
                }

                if (IfExistsSKU(txtSKU.Text.Trim()) == 1)
                {
                    blFindBySKU = true;
                    SKU = txtSKU.Text.Trim();
                    if (IfActiveProduct(SKU) == 0)
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }
                else
                {
                    blFindBySKU = false;
                }
                if (!blFindBySKU)
                {
                    if (IfExistsAltSKU(txtSKU.Text.Trim()) == 1)
                    {
                        blFindByAltSKU = true;
                        SKU = SKUfromAltSKU(txtSKU.Text.Trim());
                        if (IfActiveProduct(SKU) == 0)
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                    else
                    {
                        blFindByAltSKU = false;
                    }

                    if (!blFindByAltSKU)
                    {
                        if (IfExistsAltSKU2(txtSKU.Text.Trim()) == 1)
                        {
                            blFindByAltSKU2 = true;
                            SKU = SKUfromAltSKU2(txtSKU.Text.Trim());
                            if (IfActiveProduct(SKU) == 0)
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                return;
                            }
                        }
                        else
                        {
                            blFindByAltSKU2 = false;
                        }

                        if (!blFindByAltSKU2)
                        {
                            if (IfExistsUPC(txtSKU.Text.Trim()) == 1)
                            {
                                blFindByUPC = true;
                                SKU = SKUfromUPC(txtSKU.Text.Trim());
                                if (IfActiveProduct(SKU) == 0)
                                {
                                    new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                    return;
                                }
                            }
                            else
                            {
                                blFindByUPC = false;
                            }
                        }
                    }

                    
                }
                bool refWFlag = false;
                string refSKU = "";
                string refWPrice = "0";
                string strSKU = "";
                double isvalidprice = 0;

                // 03-15-2013    Add both UPC A and EAN 13 barcode

                if ((Settings.NotReadBarcodeCheckDigit == "N" ? ((txtSKU.Text.Trim().Length == 12) || (txtSKU.Text.Trim().Length == 13)) : ((txtSKU.Text.Trim().Length == 11) || (txtSKU.Text.Trim().Length == 12))) && (txtSKU.Text.Trim().Substring(0, 1) == Settings.EmbeddedBarcodeNumberSystemChar)) //&& (txtSKU.Text.Trim().Substring(0, 1) == "2")
                {
                    IsWeighedItem(txtSKU.Text.Trim(), ref refWFlag, ref refSKU, ref refWPrice);
                    if (refWFlag)
                    {
                        strSKU = refSKU;
                        try
                        {
                            isvalidprice = GeneralFunctions.fnDouble(refWPrice);
                        }
                        catch
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Invalid_embedded_bar_code_product_price, Properties.Resources.Embedded_bar_code_Item_Price_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                    else
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Invalid_embedded_bar_code_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }
                else
                    strSKU = SKU;

                if (strCurrentServiceType != "Sales")
                {
                    if (refWFlag) return;
                }

                if (IfExistsSKU(strSKU) == 1)
                {
                    if (!GeneralFunctions.ProceedFromItemImage(GetProductID(strSKU))) return;
                    if (!refWFlag)
                    {
                        await AddSKURecord(strSKU, refWFlag, isvalidprice);
                    }
                    else
                    {
                        await AddSKURecordForEmbeddedProduct(strSKU, refWFlag, isvalidprice);
                    }

                    GetTotal();
                    ShowTax();
                    ResetQty();
                }
                else
                {
                    if (((SecurityPermission.AcssProductAdd) && (SystemVariables.CurrentUserID > 0)) ||
                        (SystemVariables.CurrentUserID <= 0))
                    {
                        if (txtSKU.Text.Trim() != "")
                        {
                            if (new MessageBoxWindow().Show(Properties.Resources.This_is_a_new_item_ + "\n" + Properties.Resources.Do_you_want_to_add_it_to_the_system_, Properties.Resources.New_Item, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                            {
                                int CatID = 0;
                                string DisplayPOS = "N";
                                int intNewRecID = 0;
                                blurGrid.Visibility = Visibility.Visible;
                                AddProductWindow frm_ProductDlg = new AddProductWindow();
                                try
                                {
                                    frm_ProductDlg.AddSKU = GeneralFunctions.CheckLengthOfString(txtSKU.Text.Trim(), 16);
                                    frm_ProductDlg.AddFromPOS = true;
                                    frm_ProductDlg.Duplicate = false;
                                    frm_ProductDlg.ID = 0;
                                    frm_ProductDlg.ShowDialog();
                                    intNewRecID = frm_ProductDlg.NewID;
                                    DisplayPOS = frm_ProductDlg.AddDisplayItemInPOS;
                                    CatID = frm_ProductDlg.AddCategory;
                                }
                                finally
                                {
                                    blurGrid.Visibility = Visibility.Collapsed;
                                }

                                if (intNewRecID > 0)
                                {
                                    pnlProdtMain.Children.Clear();
                                    frm_ProductBrw = new POSSection.frmProductBrwUC();
                                    frm_ProductBrw.bar1.Visibility = Visibility.Collapsed;
                                    frm_ProductBrw.bar2.Visibility = Visibility.Collapsed;

                                    frm_ProductBrw.cmbFilter.EditValue = "Active Products";
                                    frm_ProductBrw.IsPOS = true;
                                    frm_ProductBrw.FetchData(true, "Active Products");
                                    frm_ProductBrw.SetDecimalPlace();
                                    blfetchProduct = true;
                                    EnableDisableButton(btnUpProduct, btnDownProduct, grdProduct);

                                    if (DisplayPOS == "Y")
                                    {
                                        SetNewPOSItem(CatID, intNewRecID);
                                    }
                                    await AddSKURecord(txtSKU.Text.Trim(), false, 0);
                                    GetTotal(); /// Calculate and Display Cart Total
                                    ShowTax(); /// Calculate and Display Taxes of Cart Items
                                    ResetQty();  /// Reset Item Quantity
                                }
                            }
                            else
                            {
                                blleavenotoscan = true;
                            }
                        }
                    }
                }
                txtSKU.Text = "";

                txtQty.Text = intPressQty.ToString();
                EnableDisableButton(btnUP, btnDown, gridControl1);
                blleave = true;
            }
            finally
            {
                txtSKU.Focus();
            }
        }

        private string GetFileType(string filepath)
        {
            string fext = Path.GetExtension(filepath).ToLower();
            if ((fext == ".ppt") || (fext == ".pps"))
            {
                return "PowerPoint";
            }
            else if ((fext == ".odp"))
            {
                return "OpenPowerPoint";
            }
            else if ((fext == ".asf") || (fext == ".wma") || (fext == ".wmv") || (fext == ".wm") || (fext == ".asx") || (fext == ".wax")
                    || (fext == ".wvx") || (fext == ".wpl") || (fext == ".wmx") || (fext == ".wmd") || (fext == ".mpg") || (fext == ".avi")
                || (fext == ".mpeg") || (fext == ".m1v") || (fext == ".mp2") || (fext == ".mp3") || (fext == ".mpa") || (fext == ".mpe")
                || (fext == ".mpv2") || (fext == ".m3u") || (fext == ".mid") || (fext == ".midi") || (fext == ".rmi") || (fext == ".aif")
                || (fext == ".aifc") || (fext == ".aiff") || (fext == ".au") || (fext == ".snd") || (fext == ".wav") || (fext == ".cda")
                || (fext == ".ivf") || (fext == ".wmz") || (fext == ".wms") || (fext == ".mov") || (fext == ".qt"))
            {
                return "Media";
            }
            else
            {
                return "Other";
            }
        }

        private void Find_GotFocus(object sender, RoutedEventArgs e)
        {
            if ((sender as OfflineRetailV2.Controls.CustomTextBox).InfoText == "Find Item")
            {
                (sender as OfflineRetailV2.Controls.CustomTextBox).Text = "";
            }

            if (Settings.UseTouchKeyboardInPOS == "N") return;
            CloseKeyboards();


            if (!IsAboutFullKybrdOpen)
            {
                fkybrd = new FullKeyboard();

                var location = (sender as OfflineRetailV2.Controls.CustomTextBox).PointToScreen(new Point(0, 0));
                fkybrd.Left = GeneralFunctions.fnInt32((SystemParameters.WorkArea.Width - 800) / 2);
                if (location.Y + 35 + 320 > System.Windows.SystemParameters.WorkArea.Height)
                {
                    fkybrd.Top = location.Y - 35 - 320;
                }
                else
                {
                    fkybrd.Top = location.Y + 35;
                }

                fkybrd.Height = 320;
                fkybrd.Width = 800;
                fkybrd.IsWindow = false;
                fkybrd.calledusercontrol = this;
                fkybrd.UCEdit = ((IInputElement)(sender as OfflineRetailV2.Controls.CustomTextBox)) as System.Windows.Controls.TextBox;
                fkybrd.Closing += new System.ComponentModel.CancelEventHandler(FKybrd_Closing);
                fkybrd.Show();
                IsAboutFullKybrdOpen = true;
            }
        }

        private async void Find_LostFocus(object sender, RoutedEventArgs e)
        {
            (sender as OfflineRetailV2.Controls.CustomTextBox).InfoText = "Find Item";
            CloseKeyboards();
            if (tcPOS == null) return;
            if ((sender as OfflineRetailV2.Controls.CustomTextBox).Text == "Find Item") return;
            await AddtoCartFromFind((sender as OfflineRetailV2.Controls.CustomTextBox).Text.Trim());
        }

        private async void Find_PreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if (tcPOS == null) return;
            if (txtSearch.Text == "Search Items") return;
            if (txtSearch.Text == "") return;
            if (e.Key == Key.Return)
            {
                CloseKeyboards();
                await AddtoCartFromFind((sender as OfflineRetailV2.Controls.CustomTextBox).Text.Trim());
            }
        }


        private void Find_TextChanged(object sender, TextChangedEventArgs e)
        {

            if (tcPOS == null) return;

            /*
            if (tcPOS.SelectedIndex == 1)
            {

                if ((sender as OfflineRetailV2.Controls.CustomTextBox).Text == "Find Customer") return;
                if ((sender as OfflineRetailV2.Controls.CustomTextBox).Text == "")
                {
                    frm_CustomerBrw.grdCustomer.FilterString = "";
                    return;
                }
                string filterValue = (sender as OfflineRetailV2.Controls.CustomTextBox).Text;
                if (!String.IsNullOrEmpty(filterValue))
                {
                    frm_CustomerBrw.grdCustomer.FilterString = "([CustomerID] LIKE '%" + filterValue + "%' OR [FirstName] LIKE '%" + filterValue + "%' OR [LastName] LIKE '%" + filterValue + "%')";
                }
            }

            if (tcPOS.SelectedIndex == 2)
            {

                if ((sender as OfflineRetailV2.Controls.CustomTextBox).Text == "Find Product") return;
                if ((sender as OfflineRetailV2.Controls.CustomTextBox).Text == "")
                {
                    grdProduct.FilterString = "";
                    return;
                }
                string filterValue = (sender as OfflineRetailV2.Controls.CustomTextBox).Text;
                if (!String.IsNullOrEmpty(filterValue))
                {
                    grdProduct.FilterString = "([SKU] LIKE '%" + filterValue + "%' OR [ProductName] LIKE '%" + filterValue + "%' OR [Brand] LIKE '%" + filterValue + "%')";
                }
            }*/
        }

        /// check if a valid customer or not

        private int IsValidCustID()
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            string scd = Settings.StoreCode;
            if (Settings.CentralExportImport == "Y") if (txtCustStore.Text.Trim() != "") scd = txtCustStore.Text;
            return objPOS.ValidCustomerID(txtCust.Text.Trim(), scd);
        }

        /// Get Customer Record ID from Code

        private int GetCustID()
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            string scd = Settings.StoreCode;
            if (Settings.CentralExportImport == "Y") if (txtCustStore.Text.Trim() != "") scd = txtCustStore.Text;
            return objPOS.GetCustomerID(txtCust.Text.Trim(), scd);
        }

        private void TxtCust_PreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                if (blScan)
                {
                    blScan = false;
                    return;
                }
                if (blleavenotoscan)
                {
                    blleavenotoscan = false;
                    return;
                }
                //if (blReturnItem) return;
                if (txtCust.Text.Trim() != "")
                {
                    int intpCust = IsValidCustID();
                    if (intpCust > 0)
                    {
                        pnlCust.Visibility = System.Windows.Visibility.Visible;


                        blChangeCustomer = true;
                        string refTaxExempt = "";
                        string refDiscountLevel = "";
                        string refTaxID = "";
                        string refStoreCr = "";
                        string refCID = "";
                        string refCName = "";
                        string refCAdd = "";
                        double dblBalance = 0;
                        string refARCredit = "";
                        string refPOSNotes = "";

                        int refDTaxID = 0;
                        string refDTax = "";
                        double refDTaxRate = 0;
                        int refDTaxType = 0;

                        intCustID = GetCustID();

                        FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd,
                            ref refTaxExempt, ref refDiscountLevel, ref refTaxID, ref refStoreCr, ref refARCredit,
                            ref refPOSNotes, ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);

                        CustDTaxID = refDTaxID;
                        CustDTaxName = refDTax;
                        CustDTaxRate = refDTaxRate;
                        CustDTaxType = refDTaxType;

                        strTaxExempt = refTaxExempt;
                        strDiscountLevel = refDiscountLevel;
                        if (strDiscountLevel == "") strDiscountLevel = "A";
                        dblBalance = GetAccountBalance(intCustID);
                        txtCust.Text = refCID;
                        //lbCustID.Text = "Customer ID : " + refCID;
                        strCustomerID = refCID;
                        lbCustName.Text = refCName;
                        //DisplayPoleText(2, "N", "N", "welcome", refCName);

                        //lbCustAddress.Text = refCAdd;
                        //ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                        //lbCustNotes.Text = refPOSNotes;
                        blCustNotes = refPOSNotes != "";
                        // ShowCustomerPhoto();
                        FetchCustomerNote("", "Customer", intCustID, DateTime.Today.Year, DateTime.Today.Month);
                        //if (blCustNotes) lbcustinfo2.Text = "Check 'Cust Notes' Apps";
                        dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                        dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                        dblCustAcctBalance = dblBalance;
                        RearrangeProductAsCustomerChange();

                        int i = -1;
                        foreach (DataRowView dr in dtblPOS.DefaultView)
                        {
                            if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                            || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                            || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                            || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                            i++;
                            AddAutoDiscountInCart_OnCustomerChange(GeneralFunctions.fnInt32(dr["ID"].ToString()), GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) > 0 ? false : true, i);
                        }
                        SetCartDisplay();
                        GetTotal();
                        ShowTax();
                        ResetQty();
                        //Block
                        /*
                        if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                        {
                            int fval = gridView1.FocusedRowHandle;
                            //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);

                            SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), numSubTotal.Value, numDiscount.Value, numTax.Value, numTotal.Value, dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
                        }*/

                    }
                    else
                    {
                        pnlCust.Visibility = System.Windows.Visibility.Collapsed;
                        DocMessage.MsgInformation("Invalid/Inactive Customer ID");
                        intCustID = 0;
                        txtCust.Text = "";

                        if (Settings.CentralExportImport == "Y")
                        {
                            if (txtCustStore.Text.Trim() == "") txtCustStore.Text = Settings.StoreCode;
                        }
                        else
                        {
                            txtCustStore.Text = "";
                        }
                        //lbCustID.Text = "";
                        lbCustName.Text = "";
                        //lbCustAddress.Text = "";
                        //lbCustBal.Text = "";
                        //lbCustNotes.Text = "";
                        //lbcustinfo1.Text = "";
                        //lbcustinfo2.Text = "";
                        //lbCustTax.Text = "";
                        //picCustPhoto.Image = null;
                        strTaxExempt = "N";
                        strDiscountLevel = "A";
                        //btnViewCustomerDetails.Visible = false;
                        RearrangeProductAsCustomerChange();

                        int i = -1;
                        foreach (DataRowView dr in dtblPOS.DefaultView)
                        {
                            if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                            || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                            || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                            || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                            i++;
                            AddAutoDiscountInCart_OnCustomerChange(GeneralFunctions.fnInt32(dr["ID"].ToString()), GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) > 0 ? false : true, i);
                        }
                        SetCartDisplay();
                        GetTotal();
                        ShowTax();
                        ResetQty();
                        /*
                        if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                        {
                            int fval = gridView1.FocusedRowHandle;
                            //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);

                            SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), numSubTotal.Value, numDiscount.Value, numTax.Value, numTotal.Value, dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
                        }*/
                        GeneralFunctions.SetFocus(txtSKU);
                        return;
                    }
                }
                else
                {
                    intCustID = 0;
                    //lbCustID.Text = "";
                    lbCustName.Text = "";
                    if (Settings.CentralExportImport == "Y")
                    {
                        if (txtCustStore.Text.Trim() == "") txtCustStore.Text = Settings.StoreCode;
                    }
                    else
                    {
                        txtCustStore.Text = "";
                    }

                    //lbCustAddress.Text = "";
                    //lbCustBal.Text = "";
                    //lbCustNotes.Text = "";

                    //lbcustinfo1.Text = "";
                    //lbcustinfo2.Text = "";
                    //lbCustTax.Text = "";
                    //picCustPhoto.Image = null;
                    strTaxExempt = "N";
                    strDiscountLevel = "A";
                    //btnViewCustomerDetails.Visible = false;
                    RearrangeProductAsCustomerChange();

                    int i = -1;
                    foreach (DataRowView dr in dtblPOS.DefaultView)
                    {
                        if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                        || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                        || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                        || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                        i++;
                        AddAutoDiscountInCart_OnCustomerChange(GeneralFunctions.fnInt32(dr["ID"].ToString()), GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) > 0 ? false : true, i);
                    }
                    SetCartDisplay();
                    GetTotal();
                    //Block ShowTax();
                    ResetQty();
                    //gridControl1.RefreshData();

                    /*
                    if (Settings.PoleScreen != "")
                    {
                        string txt1 = "";
                        string txt2 = "";
                        ArrangePoleDisplayGreetings(ref txt1, ref txt2);
                        DisplayPoleText(2, "N", "N", txt1, txt2);
                    }
                    else
                    {
                        DisplayPoleText(2, "N", "N", Translation.SetMultilingualTextInCodes("welcome to", "frmPOSN_welcometo"), Settings.Company);
                    }*/
                }
            }
        }

        private void BtnUP_Click(object sender, RoutedEventArgs e)
        {
            if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0) return;
            if (gridView1.FocusedRowHandle == 0) return;
            gridView1.FocusedRowHandle = gridView1.FocusedRowHandle - 1;
        }

        private void BtnDown_Click(object sender, RoutedEventArgs e)
        {
            if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0) return;
            if (gridView1.FocusedRowHandle == (gridControl1.ItemsSource as DataTable).Rows.Count - 1) return;
            gridView1.FocusedRowHandle = gridView1.FocusedRowHandle + 1;
        }

        private void BtnUpProduct_Click(object sender, RoutedEventArgs e)
        {
            if ((grdProduct.ItemsSource as DataTable).Rows.Count == 0) return;
            if (PgridView1.FocusedRowHandle == 0) return;
            PgridView1.FocusedRowHandle = PgridView1.FocusedRowHandle - 1;
            //EnableDisableButton(btnUpProduct, btnDownProduct, grdProduct);
        }

        private void BtnDownProduct_Click(object sender, RoutedEventArgs e)
        {
            if ((grdProduct.ItemsSource as DataTable).Rows.Count == 0) return;
            if (PgridView1.FocusedRowHandle == (grdProduct.ItemsSource as DataTable).Rows.Count - 1) return;
            PgridView1.FocusedRowHandle = PgridView1.FocusedRowHandle + 1;
            //EnableDisableButton(btnUpProduct, btnDownProduct, grdProduct);
        }

        private async void TxtSKU_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            /*if (e.Key == Key.Return)
            {
                await AddtoCart();
                //e.Handled = true;
            }*/
        }

        private async void TxtSKU_PreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if (e.Key == Key.Return)
            {
                await AddtoCart();
                //e.Handled = true;
            }
        }

        private void TxtCustStore_LostFocus(object sender, RoutedEventArgs e)
        {
            CloseKeyboards();
            GeneralFunctions.SetFocus(txtCust);
        }

        private async Task SelectProductBrowseMixMatch()
        {
            bool blExit = false;
            int intRowID = 0;
            if ((grdProduct.ItemsSource as DataTable).Rows.Count == 0) return;
            intRowID = PgridView1.FocusedRowHandle;

            if (intRowID < 0) return;
            string line1 = "";
            string line2 = "";
            bool blfinddata = false;

            string strselectid = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID);

            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";
            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRentPrompt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";
            int MixMatchID = 0;
            string MixMatchFlag = "N";
            string MixMatchCat = "";
            string MixMatchType = "";
            double MixMatchVal = 0;
            int MixMatchPlus = 0;
            double MixMatchPartPrice = 0;
            bool MixMatchApplicableLast = false;

            int SaleID = 0;
            double SalePrice = 0;
            int iAge = 0;
            string refUOM = "";
            string refExpiry = "";
            FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty,
                            ref refNQty, ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI,
                            ref refRentHR, ref refRentHDY, ref refRentDY, ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt,
                            ref refRentPrompt, ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);


            if ((refType == "P") || (refType == "M") || (refType == "K") || (refType == "U")
                             || (refType == "W") || (refType == "E") || (refType == "F") || (refType == "S") || (refType == "T"))
            {
                if (strCurrentServiceType == "Sales")
                {
                    FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref SaleID, ref SalePrice);
                    if (SaleID == 0)
                    {
                        FetchMix_n_Match(GeneralFunctions.fnInt32(strselectid), ref MixMatchID, ref MixMatchFlag, ref MixMatchCat,
                                            ref MixMatchType, ref MixMatchVal, ref MixMatchPlus, ref MixMatchPartPrice, ref MixMatchApplicableLast);

                        // MixMatchFlag = N / Y - Not Applicable / Applicale
                        // MixMatchCat = N / P - Normal Pricing / Plus Pricing
                        // MixMatchType = P/A - % off / Amount off
                    }
                }
            }

            if (strCurrentServiceType == "Rent")
            {
                if (blRentRecall) return;
                else if ((refType == "S") || (refType == "W")) return;
            }
            if (strCurrentServiceType == "Repair")
            {
                //if (blRepairRecall) return;
                //else if ((refType == "S") || (refType == "W")) return;
                if (refType == "W") return;
            }

            if (Settings.POSIDRequired == "Y")
            {
                if (GeneralFunctions.fnInt32(refAge) > 0)
                {
                    iAge = GeneralFunctions.fnInt32(refAge);
                    if (!AgeCheck(DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)))) return;
                    //if (MyMessageBox.ShowBox(Translation.SetMultilingualTextInCodes("Minimum Age ","frmPOSN_msg_MinimumAge") + refAge + Translation.SetMultilingualTextInCodes(" : Birthday on or before ","frmPOSN_msg_Birthdayonorbefore") + DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)).ToString("MM/dd/yyyy"), Translation.SetMultilingualTextInCodes("Age Verification","frmPOSN_msg_AgeVerification"), MessageBoxButtons.OKCancel, MessageBoxIcon.Information) == DialogResult.Cancel) return;
                }
            }

            string strUOMCount = "";
            string strUOMPrice = "";
            string strUOMDesc = "";

            string strMatxOID = "";
            string strMatxOV1 = "";
            string strMatxOV2 = "";
            string strMatxOV3 = "";
            string strSLID = "0";

            if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Unit of Measure")
            {
                blurGrid.Visibility = Visibility.Visible;
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {
                    frm_POSProductAddnDlg.ProductType = "Unit of Measure";
                    frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                        grdProduct, colIMID));
                    frm_POSProductAddnDlg.Heading = "Unit of Measure Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                        grdProduct, colIMDesc);
                    frm_POSProductAddnDlg.ShowDialog();
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strUOMCount = frm_POSProductAddnDlg.UOMCount;
                        strUOMPrice = frm_POSProductAddnDlg.UOMPrice;
                        strUOMDesc = frm_POSProductAddnDlg.UOMDesc;
                    }
                    else blExit = true;
                }
                finally
                {
                    frm_POSProductAddnDlg.Close();
                    blurGrid.Visibility = Visibility.Collapsed;
                }
                if (blExit)
                {
                    return;
                }
            }

            if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Matrix")
            {
                blurGrid.Visibility = Visibility.Visible;
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {
                    frm_POSProductAddnDlg.ProductType = "Matrix";
                    frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                    frm_POSProductAddnDlg.Heading = "Matrix Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                    frm_POSProductAddnDlg.ShowDialog();
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strMatxOID = frm_POSProductAddnDlg.MatrixOID;
                        strMatxOV1 = frm_POSProductAddnDlg.MatrixOV1;
                        strMatxOV2 = frm_POSProductAddnDlg.MatrixOV2;
                        strMatxOV3 = frm_POSProductAddnDlg.MatrixOV3;
                    }
                    else blExit = true;
                }
                finally
                {
                    frm_POSProductAddnDlg.Close();
                    blurGrid.Visibility = Visibility.Collapsed;
                }
                if (blExit)
                {
                    return;
                }
            }

            if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Serialized")
            {
                blurGrid.Visibility = Visibility.Visible;
                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                try
                {
                    frm_POSProductAddnDlg.ProductType = "Serialized";
                    frm_POSProductAddnDlg.dtblS = dtblPOS;
                    frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                    frm_POSProductAddnDlg.Heading = "Serialized Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                    frm_POSProductAddnDlg.ShowDialog();
                    if (frm_POSProductAddnDlg.DialogResult == true)
                    {
                        strSLID = frm_POSProductAddnDlg.SLID;
                    }
                    else blExit = true;
                }
                finally
                {
                    frm_POSProductAddnDlg.Close();
                    blurGrid.Visibility = Visibility.Collapsed;
                }
                if (blExit)
                {
                    return;
                }
            }

            /*if (intCustID != 0)
            {
                if (GeneralFunctions.fnDouble(refPrice) == 0) refPrice = refNPrice;
            }*/

            int intfocusrow = 0;
            double dblRate = 0;
            double dblPrice = 0;

            //if (strCurrentServiceType != "Repair")
            //{
            if (!CheckStock(GeneralFunctions.fnInt32(strselectid), 1, strMatxOID, strMatxOV1, strMatxOV2, strMatxOV3))
            {
                DocMessage.MsgInformation("No Stock available!");
                return;
            }
            //}

            string strRentType = "NA";
            double dblRentDuration = 0;
            double dblRentValue = 0;
            double dblRentDeposit = 0;

            if (strCurrentServiceType == "Rent")
            {
                //Block
                /*
                if (!blRentRecall)
                {
                    frmPOSRentalSelectDlg frmrentsel = new frmPOSRentalSelectDlg();
                    try
                    {
                        frmrentsel.PID = GeneralFunctions.fnInt32(strselectid);
                        frmrentsel.ShowDialog();
                        if (frmrentsel.DialogResult == DialogResult.OK)
                        {
                            strRentType = frmrentsel.RentType;
                            dblRentDuration = frmrentsel.RentDuration;
                            dblRentValue = frmrentsel.RentValue;
                            dblRentDeposit = frmrentsel.RentDeposit;
                        }
                        else blExit = true;
                    }
                    finally
                    {
                        frmrentsel.Dispose();
                    }
                    if (blExit) return;
                }*/
            }

            string strRepairItemTag = "";
            string strRepairItemSlNo = "";
            string strRepairItemPurchaseDate = "";

            if (SaleID > 0)
            {
                refPrompt = "N";
                refPrice = SalePrice.ToString();
                if (refType == "U") strUOMPrice = SalePrice.ToString();
            }

            if (!blfinddata)
            {
                if (refType == "U")
                {
                    if (refPrompt == "Y")
                    {
                        double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, GeneralFunctions.fnDouble(strUOMPrice));

                        if (promptPrice == -99999) return;

                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable    
                        {
                            dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(1*promptPrice),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                    "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(1*promptPrice),refUOM,"","","","","N"});

                        }
                        else
                        {
                            double discntamt = 0;
                            string damt = "0";
                            double newpretaxamt = 0;
                            string amtstr = "";
                            if (MixMatchCat == "N")  // Normal Pricing
                            {
                                discntamt = 0;
                                discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                            }

                            if (MixMatchCat == "P")  // Plus Pricing
                            {
                                discntamt = 0;

                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                damt = (promptPrice - newpretaxamt).ToString("f");
                            }

                            if (MixMatchCat == "A")  // Absolute Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchVal - MixMatchPartPrice;
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                amtstr = "";
                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                            }

                            string linetxt = "";
                            linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc + "\n";


                            dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,1,promptPrice,refNPrice,Convert.ToDecimal(1 * promptPrice),strUOMCount,newpretaxamt.ToString(),strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(1 * promptPrice),refUOM,"","","","","N"});


                        }
                    }
                    else
                    {
                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                        {
                            dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                                    refType,refOHQty,refNQty,refCost,1,strUOMPrice,refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(strUOMPrice)),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    strUOMPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(strUOMPrice)),refUOM,"","","","","N"});
                        }
                        else
                        {
                            double discntamt = 0;
                            string damt = "0";
                            double newpretaxamt = 0;
                            string amtstr = "";
                            if (MixMatchCat == "N")  // Normal Pricing
                            {
                                discntamt = 0;
                                discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                            }

                            if (MixMatchCat == "P")  // Plus Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                damt = (GeneralFunctions.fnDouble(strUOMPrice) - newpretaxamt).ToString("f");
                            }

                            if (MixMatchCat == "A")  // Absolute Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchVal - MixMatchPartPrice;
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                damt = (GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                amtstr = "";
                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                            }


                            string linetxt = "";
                            linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc + "\n";

                            dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,1,strUOMPrice,refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(strUOMPrice)),strUOMCount,newpretaxamt.ToString(),strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    strUOMPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(strUOMPrice)),refUOM,"","","","","N"});
                        }


                    }
                }

                else if (refType == "E")
                {
                    if (refPrompt == "Y")
                    {
                        double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));

                        if (promptPrice == -99999) return;

                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                        {
                            dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,1,promptPrice,refNPrice,Convert.ToDecimal(1*promptPrice),strSLID,"0","0","","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0
                                    ,MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(1*promptPrice),refUOM,"","","","","N"});
                        }
                        else
                        {
                            double discntamt = 0;
                            string damt = "0";
                            double newpretaxamt = 0;
                            string amtstr = "";
                            if (MixMatchCat == "N")  // Normal Pricing
                            {
                                discntamt = 0;
                                discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                            }

                            if (MixMatchCat == "P")  // Plus Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                damt = (promptPrice - newpretaxamt).ToString("f");
                            }

                            if (MixMatchCat == "A")  // Absolute Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchVal - MixMatchPartPrice;
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                amtstr = "";
                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                            }


                            string linetxt = "";
                            linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                            dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,1,promptPrice,refNPrice,Convert.ToDecimal(1*newpretaxamt).ToString(),strSLID,"0","0","","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0
                                    ,MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(1*newpretaxamt).ToString(),refUOM,"","","","","N"});


                        }
                    }

                    else
                    {
                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                        {
                            dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,1,refPrice,refNPrice,Convert.ToDecimal(1* GeneralFunctions.fnDouble(refPrice)),strSLID,"0","0","","","","",GetUniqueString(),
                                    refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(1* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                        }
                        else
                        {
                            double discntamt = 0;
                            string damt = "0";
                            double newpretaxamt = 0;
                            string amtstr = "";
                            if (MixMatchCat == "N")  // Normal Pricing
                            {
                                discntamt = 0;
                                discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                            }

                            if (MixMatchCat == "P")  // Plus Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                            }

                            if (MixMatchCat == "A")  // Absolute Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchVal - MixMatchPartPrice;
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                amtstr = "";
                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                            }

                            string linetxt = "";
                            linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                            dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,1,refPrice,refNPrice,Convert.ToDecimal(1*newpretaxamt).ToString(),strSLID,"0","0","","","","",GetUniqueString(),
                                    refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(1*newpretaxamt).ToString(),refUOM,"","","","","N"});
                        }
                        /*
                        line1 = "";
                        line2 = "";
                        RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                        DisplayPoleText(2, "N", "N", line1, line2);*/
                    }
                }
                else if (refType == "M")
                {
                    if (refPrompt == "Y")
                    {
                        double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));

                        if (promptPrice == -99999) return;

                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                        {
                            dtblPOS.Rows.Add(new object[]
                                {
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                refType,refOHQty,refNQty,refCost,1,promptPrice,refNPrice,Convert.ToDecimal(1 * promptPrice),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,
                                strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                promptPrice,Convert.ToDecimal(1 * promptPrice),refUOM,"","","","","N"});
                        }
                        else
                        {

                            double discntamt = 0;
                            string damt = "0";
                            double newpretaxamt = 0;
                            string amtstr = "";
                            if (MixMatchCat == "N")  // Normal Pricing
                            {
                                discntamt = 0;
                                discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                            }

                            if (MixMatchCat == "P")  // Plus Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                damt = (promptPrice - newpretaxamt).ToString("f");
                            }

                            if (MixMatchCat == "A")  // Absolute Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchVal - MixMatchPartPrice;
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                amtstr = "";
                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                            }

                            string linetxt = "";
                            linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                            dtblPOS.Rows.Add(new object[]
                                {
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                linetxt,
                                refType,refOHQty,refNQty,refCost,1,promptPrice,refNPrice,Convert.ToDecimal(1 * newpretaxamt),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,
                                strMatxOV3,GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                promptPrice,Convert.ToDecimal(1 * newpretaxamt),refUOM,"","","","","N"});
                        }
                        /*
                        line1 = "";
                        line2 = "";
                        RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                        DisplayPoleText(2, "N", "N", line1, line2);*/
                    }
                    else
                    {
                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                        {
                            dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,1,refPrice,refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                        }
                        else
                        {
                            double discntamt = 0;
                            string damt = "0";
                            double newpretaxamt = 0;
                            string amtstr = "";
                            if (MixMatchCat == "N")  // Normal Pricing
                            {
                                discntamt = 0;
                                discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                            }

                            if (MixMatchCat == "P")  // Plus Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                            }

                            if (MixMatchCat == "A")  // Absolute Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchVal - MixMatchPartPrice;
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                amtstr = "";
                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                            }


                            string linetxt = "";
                            linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                            dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,1,refPrice,refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                        }
                        /*
                        line1 = "";
                        line2 = "";
                        RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                        PgridView1, colIMDesc), "1", refPrice, ref line1, ref line2);
                        DisplayPoleText(2, "N", "N", line1, line2);*/
                    }
                }
                else if (refType == "W")
                {

                    weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                    weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                    if (CheckForFixedWeight(weightitemid))
                    {
                        await AddFixedWeightedItem();
                    }
                    else
                    {
                        if ((Settings.ScaleDevice == "Datalogic Scale") && (m_posScale != null))
                        {
                            try
                            {
                                if (!tmrDL.IsEnabled) tmrDL.IsEnabled = true;
                                weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                weightstring = m_posScale.ReadWeight(20000).ToString();

                                double Tare = 0;
                                double Tr1 = 0;
                                double Tr2 = 0;
                                FetchTare(weightitemid, ref Tr1, ref Tr2);

                                Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);
                                if (blTareEntry)
                                {
                                    Tare = dblTareEntryValue;
                                }

                                if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                {
                                    SecondMonitor.AddWeightInfo(GeneralFunctions.FormatDoubleForPrint((GeneralFunctions.fnDouble(weightstring) - Tare).ToString("0.###")) + " " + m_posScale.WeightUnit.ToString(), Tare);
                                }

                                if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                {

                                    await AddWeightedItem();

                                }
                                else
                                {
                                    DocMessage.MsgInformation("Invalid scale weight");
                                    return;
                                }
                            }
                            catch
                            {
                                DocMessage.MsgInformation("Cannot read from scale device");
                                return;
                            }
                        }
                        else if ((Settings.ScaleDevice == "Kilotech") && (Settings.COMPort != "(None)"))
                        {
                            try
                            {
                                string wt = "";
                                blGetWeight = false;

                                if (IsActiveScale1())
                                {
                                    if (s_wght != 0) wt = s_wght.ToString();
                                    if (wt != "")
                                    {
                                        weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                        weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                        weightstring = wt;

                                        double Tare = 0;
                                        double Tr1 = 0;
                                        double Tr2 = 0;
                                        FetchTare(weightitemid, ref Tr1, ref Tr2);

                                        Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);
                                        if (blTareEntry)
                                        {
                                            Tare = dblTareEntryValue;
                                        }
                                        if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                        {
                                            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                            {
                                                SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + s_wght_u, Tare);
                                            }
                                            await AddWeightedItem();

                                        }
                                        else
                                        {
                                            DocMessage.MsgInformation("No scale weight");
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        blGetWeight = false;
                                        DocMessage.MsgInformation("Cannot read from scale device");
                                        return;
                                    }
                                }
                                else
                                {
                                    DocMessage.MsgInformation("Cannot read from scale device");
                                    return;
                                }
                            }
                            catch
                            {
                                DocMessage.MsgInformation("Cannot read from scale device");
                                return;
                            }


                        }

                        else if ((Settings.ScaleDevice == "Live Weight") && (Settings.COMPort != "(None)"))
                        {
                            weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                            weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                            //dtblLiveWeightStable.Rows.Clear();
                            //tmrLW.Enabled = true;
                            await AddWeightedItem();
                        }

                        else if (Settings.ScaleDevice == "XEPOS")
                        {
                            string strfilename = "";
                            strfilename = System.AppDomain.CurrentDomain.BaseDirectory;
                            if (strfilename.EndsWith("\\"))
                            {
                                strfilename = strfilename + "Weight.exe";
                            }
                            else
                            {
                                strfilename = strfilename + "\\Weight.exe";
                            }
                            if (!System.IO.File.Exists(strfilename)) return;
                            blopenweight = true;
                            weightcallfrom = "ProductTab";

                            weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                            weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);

                            Process p = new Process();
                            p.StartInfo.FileName = strfilename;
                            p.Start();
                        }

                        else
                        {
                            bool proceedflag = false;
                            double wqty = 0;
                            double wdisc = 0;
                            string val1 = "";
                            string val2 = "0";
                            string val3 = "0";
                            string val4 = "";
                            string val5 = "";

                            frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                            try
                            {
                                frm_POSItemDlg.BlankLine = false;
                                //frm_POSItemDlg.ParentForm = this;
                                frm_POSItemDlg.IsEdit = false;
                                frm_POSItemDlg.ServiceType = strCurrentServiceType;
                                frm_POSItemDlg.ProductDesc = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                frm_POSItemDlg.Qty = 1;
                                frm_POSItemDlg.Price = GeneralFunctions.fnDouble(refPrice);
                                frm_POSItemDlg.Weighted = true;
                                blurGrid.Visibility = Visibility.Visible;
                                frm_POSItemDlg.ShowDialog();
                                blurGrid.Visibility = Visibility.Collapsed;
                                if (frm_POSItemDlg.DialogResult == true)
                                {
                                    proceedflag = true;
                                    wqty = frm_POSItemDlg.Qty;
                                    wdisc = frm_POSItemDlg.Discount;
                                    if (!GeneralFunctions.IsValidScaleWeight_POS(wqty.ToString(), true)) return;
                                    if (blTareEntry)
                                    {
                                        wqty = wqty - dblTareEntryValue;
                                        if (wqty <= 0)
                                        {
                                            DocMessage.MsgInformation("Enter valid weight");
                                            return;
                                        }
                                    }
                                }
                            }
                            finally
                            {
                                frm_POSItemDlg.Close();

                            }
                            if (!proceedflag) return;

                            if (wdisc > 0)
                            {
                                val1 = "A";
                                val2 = wdisc.ToString();
                                val3 = wdisc.ToString();
                                val4 = "9988";
                                val5 = "  Discount - $".Replace("$", SystemVariables.CurrencySymbol) + wdisc.ToString("f");
                            }

                            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                            {
                                SecondMonitor.AddWeightInfo(GeneralFunctions.fnDouble(wqty).ToString(), 0);
                            }

                            // double Tare = 0;
                            // FetchTare(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)), ref Tare);


                            if (refPrompt == "Y")
                            {
                                double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                if (promptPrice == -99999) return;

                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                    {
                                        await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        wdisc == 0 ? await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) :
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n",
                                        refType,refOHQty,refNQty,refCost,wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),
                                        "0","0","0","","","","",GetUniqueString(),refDP,"",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                        strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                        dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                        MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                        "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                       promptPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),refUOM,"","","","","N"});
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (promptPrice * wqty - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (promptPrice * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }


                                    string linetxt = "";
                                    linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                    {
                                        await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        linetxt,
                                        refType,refOHQty,refNQty,refCost,wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),
                                        "0","0","0","","","","",GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                        strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                        dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                        MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                        "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                        promptPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                grdProduct, colIMDesc), wqty.ToString(), promptPrice.ToString(), ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                            else
                            {
                                if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                {
                                    dtblPOS.Rows.Add(new object[]
                                    {   await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        wdisc == 0 ? await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) :
                                        await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n" ,
                                        refType,refOHQty,refNQty,refCost,wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal((wqty) * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                        "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                        strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                        dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                        MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                        "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                        refPrice,Convert.ToDecimal((wqty) * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),refUOM,"","","",""
                                    });
                                }
                                else
                                {
                                    double discntamt = 0;
                                    string damt = "0";
                                    double newpretaxamt = 0;
                                    string amtstr = "";
                                    if (MixMatchCat == "N")  // Normal Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                    }

                                    if (MixMatchCat == "P")  // Plus Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                        amtstr = "";
                                        if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                        else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        damt = (GeneralFunctions.fnDouble(refPrice) * wqty - newpretaxamt).ToString("f");
                                    }

                                    if (MixMatchCat == "A")  // Absolute Pricing
                                    {
                                        discntamt = 0;
                                        discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                        damt = "0";
                                        if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                        if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                        newpretaxamt = 0;
                                        newpretaxamt = GeneralFunctions.fnDouble(damt);

                                        damt = (GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                        amtstr = "";
                                        amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                    }

                                    string linetxt = "";
                                    linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                    dtblPOS.Rows.Add(new object[]
                                    {   await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        linetxt,
                                        refType,refOHQty,refNQty,refCost,wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                        "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                        strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                        dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                        MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                        "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                        refPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),refUOM,"","","","","N"});
                                }

                                line1 = "";
                                line2 = "";
                                RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), wqty.ToString(), refPrice, ref line1, ref line2);
                                DisplayPoleText(2, "N", "N", line1, line2);
                            }
                        }
                    }
                }
                else if ((refType == "F") && (Settings.AddGallon == "Y"))
                {
                    //Block
                    /*
                    double gl = 0;
                    bool pf = false;
                    frmPOSGallonEntryDlg fgaldlg = new frmPOSGallonEntryDlg();
                    try
                    {
                        fgaldlg.ShowDialog();
                        if (fgaldlg.DialogResult == DialogResult.OK)
                        {
                            pf = true;
                            gl = fgaldlg.Gallon;
                        }
                    }
                    finally
                    {
                        fgaldlg.Dispose();
                    }
                    if (!pf) return;

                    if (refPrompt == "Y")
                    {
                        double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                        if (promptPrice == -99999) return;

                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                        {
                            dtblPOS.Rows.Add(new object[] 
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,gl,promptPrice,refNPrice,gl*promptPrice,"0","0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                              "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,promptPrice,gl*promptPrice});
                        }
                        else
                        {
                            double discntamt = 0;
                            string damt = "0";
                            double newpretaxamt = 0;
                            string amtstr = "";
                            if (MixMatchCat == "N")  // Normal Pricing
                            {
                                discntamt = 0;
                                discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                            }

                            if (MixMatchCat == "P")  // Plus Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                damt = (promptPrice - newpretaxamt).ToString("f");
                            }

                            if (MixMatchCat == "A")  // Absolute Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchVal - MixMatchPartPrice;
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                amtstr = "";
                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                            }

                            string linetxt = "";
                            linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";


                            dtblPOS.Rows.Add(new object[] 
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              linetxt,
                              refType,refOHQty,refNQty,refCost,gl,promptPrice,refNPrice,gl*newpretaxamt,"0","0","0","","","","",
                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                              "1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                              "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,promptPrice,gl*newpretaxamt});

                        }

                        line1 = "";
                        line2 = "";
                        RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                        PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                        DisplayPoleText(2, "N", "N", line1, line2);
                    }
                    else
                    {
                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                        {
                            dtblPOS.Rows.Add(new object[] 
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                      await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                      refType,refOHQty,refNQty,refCost,gl,refPrice,refNPrice,gl*GeneralFunctions.fnDouble(refPrice),"0","0","0","","","","",GetUniqueString(),refDP,
                                      "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                      "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,refPrice,gl*GeneralFunctions.fnDouble(refPrice)});
                        }
                        else
                        {
                            double discntamt = 0;
                            string damt = "0";
                            double newpretaxamt = 0;
                            string amtstr = "";
                            if (MixMatchCat == "N")  // Normal Pricing
                            {
                                discntamt = 0;
                                discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                            }

                            if (MixMatchCat == "P")  // Plus Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                            }

                            if (MixMatchCat == "A")  // Absolute Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchVal - MixMatchPartPrice;
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                amtstr = "";
                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                            }

                            string linetxt = "";
                            linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";




                            dtblPOS.Rows.Add(new object[] 
                                    {  await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        linetxt,
                                      refType,refOHQty,refNQty,refCost,gl,refPrice,refNPrice,gl*newpretaxamt,"0","0","0","","","","",GetUniqueString(),refDP,
                                      "", MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                      "1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                      "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,refPrice,gl*newpretaxamt});

                        }



                        line1 = "";
                        line2 = "";
                        RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                        DisplayPoleText(2, "N", "N", line1, line2);
                    }*/
                }
                else
                {
                    if (refPrompt == "Y")
                    {
                        double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                        if (promptPrice == -99999) return;

                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                        {
                            dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,1,promptPrice,refNPrice,Convert.ToDecimal(1 * promptPrice),"0","0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                              "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,promptPrice,Convert.ToDecimal(1 * promptPrice),refUOM
                            ,"","","","","N"});
                        }
                        else
                        {
                            double discntamt = 0;
                            string damt = "0";
                            double newpretaxamt = 0;
                            string amtstr = "";
                            if (MixMatchCat == "N")  // Normal Pricing
                            {
                                discntamt = 0;
                                discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                            }

                            if (MixMatchCat == "P")  // Plus Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                damt = (promptPrice - newpretaxamt).ToString("f");
                            }

                            if (MixMatchCat == "A")  // Absolute Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchVal - MixMatchPartPrice;
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                amtstr = "";
                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                            }

                            string linetxt = "";
                            linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";


                            dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              linetxt,
                              refType,refOHQty,refNQty,refCost,1,promptPrice,refNPrice,Convert.ToDecimal(1 * newpretaxamt),"0","0","0","","","","",
                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                              "1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                              "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(1 * newpretaxamt),refUOM,"","","","","N"});

                        }
                        /*
                        line1 = "";
                        line2 = "";
                        RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                        PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                        DisplayPoleText(2, "N", "N", line1, line2);*/
                    }
                    else
                    {
                        if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                        {
                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                      await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                      refType,refOHQty,refNQty,refCost,1,refPrice,refNPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                                      "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                      "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      refPrice,Convert.ToDecimal(1 * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                        }
                        else
                        {
                            double discntamt = 0;
                            string damt = "0";
                            double newpretaxamt = 0;
                            string amtstr = "";
                            if (MixMatchCat == "N")  // Normal Pricing
                            {
                                discntamt = 0;
                                discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                            }

                            if (MixMatchCat == "P")  // Plus Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                amtstr = "";
                                if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                            }

                            if (MixMatchCat == "A")  // Absolute Pricing
                            {
                                discntamt = 0;
                                discntamt = MixMatchVal - MixMatchPartPrice;
                                damt = "0";
                                if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                newpretaxamt = 0;
                                newpretaxamt = GeneralFunctions.fnDouble(damt);

                                damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                amtstr = "";
                                amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                            }

                            string linetxt = "";
                            linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";




                            dtblPOS.Rows.Add(new object[]
                                    {  await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        linetxt,
                                      refType,refOHQty,refNQty,refCost,1,refPrice,refNPrice,Convert.ToDecimal(1*newpretaxamt),"0","0","0","","","","",GetUniqueString(),refDP,
                                      "", MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                      "1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                      "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      refPrice,Convert.ToDecimal(1*newpretaxamt),refUOM,"","","","","N"});

                        }


                        /*
                        line1 = "";
                        line2 = "";
                        RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                        DisplayPoleText(2, "N", "N", line1, line2);*/
                    }
                }
                SetCartDisplay();
                gridControl1.ItemsSource = dtblPOS;
                ToggleWithEmptyCart();
                //gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                //await SetCurrentRow1(dtblPOS.Rows.Count - 1);


                if (Settings.PriceLevelForOneTime == "Y")
                {
                    Settings.PriceLevelForOneTime = "N";
                    intUsePriceLevel = Settings.UsePriceLevel;
                }
            }
            else
            {
                SetCartDisplay();
                gridControl1.ItemsSource = dtblPOS;
                ToggleWithEmptyCart();
                //await SetCurrentRow1(intfocusrow);

            }
        }

        private async void BtnSelectProduct_Click(object sender, RoutedEventArgs e)
        {
            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                //SecondMonitor.ClearWeightInfo();
            }
            if ((intCustID == 0) && (Settings.CustomerInfo == 2))
            {
                if (dtblPOS.Rows.Count == 0)
                {
                    DocMessage.MsgInformation("Enter valid customer before ringing item");
                    GeneralFunctions.SetFocus(txtCust);
                    return;
                }
            }

            if (strCurrentServiceType == "Sales")
            {
                if ((blReturnItem) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blReturnItem) && (dtblPOS.Rows.Count == 0))
                {
                    blReturnItem = false;
                }
            }
            if (strCurrentServiceType == "Rent")
            {
                if ((blRentRecall) && (dtblPOS.Rows.Count > 0)) return;
                else if ((blRentRecall) && (dtblPOS.Rows.Count == 0))
                {
                    blRentRecall = false;
                    blRentIssued = true;
                }
                else if ((await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Service") ||
                    (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Weighted")) return;
            }
            if (strCurrentServiceType == "Repair")
            {
                if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Weighted") return;
            }



            bool blExit = false;

            int intRowID = 0;
            if ((grdProduct.ItemsSource as DataTable).Rows.Count == 0) return;
            intRowID = PgridView1.FocusedRowHandle;

            if (intRowID < 0) return;
            string line1 = "";
            string line2 = "";
            bool blfinddata = false;

            string strselectid = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID);

            string refType = "";
            string refOHQty = "";
            string refNQty = "";
            string refPrice = "";
            string refNPrice = "";
            string refCost = "";
            string refPrompt = "";
            string refDP = "";
            string refAge = "";
            string refRentMI = "";
            string refRentHR = "";
            string refRentHDY = "";
            string refRentDY = "";
            string refRentWK = "";
            string refRentMN = "";
            string refRentDeposit = "";
            string refRentMinHR = "";
            string refRentMinAmt = "";
            string refRentPrompt = "";
            string refRepairAmt = "";
            string refRepairPromptAmt = "";
            string refRepairPromptTag = "";
            int MixMatchID = 0;
            string MixMatchFlag = "N";
            string MixMatchCat = "";
            string MixMatchType = "";
            double MixMatchVal = 0;
            int MixMatchPlus = 0;
            double MixMatchPartPrice = 0;
            bool MixMatchApplicableLast = false;

            int SaleID = 0;
            double SalePrice = 0;
            int iAge = 0;
            string refUOM = "";
            string refExpiry = "";
            FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty,
                            ref refNQty, ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI,
                            ref refRentHR, ref refRentHDY, ref refRentDY, ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt,
                            ref refRentPrompt, ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

            //Block if (!GeneralFunctions.ProceedFromItemImage(GeneralFunctions.fnInt32(strselectid))) return;

            

            if (strCurrentServiceType == "Sales")
            {
                if (refExpiry != "")
                {
                    DisplayItemExpiryAlert(refExpiry);
                }
            }

            int TSaleID = 0;
            double TSalePrice = 0;
            int TMixMatchID = 0;

            DataTable dtblBuyGetFree = new DataTable();
            int TBuyNFreeID = 0;
            int TBuyNFreeQty = 0;
            bool TBuyNFreeProceed = false;
            ArrayList TBuyNFree_ItemToBeDeletedFirst = new ArrayList();

            /// For Sale, before adding an item into cart, first check if active sale price is present or not. If not present then check Mix n Match. 
            /// If active Mix n Match found, then cart added with Mix n Match data.
            /// If no active Mix n Match found then check for Buy n Get Free promotion, if satisfied then Buy n Get Free data will the added into cart

            if (strCurrentServiceType == "Sales")
            {
                FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref TSaleID, ref TSalePrice);
                if (TSaleID == 0)
                {
                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    TMixMatchID = objPOS.ActiveMixNMatch(GeneralFunctions.fnInt32(strselectid));
                }

                if (TMixMatchID == 0)
                {
                    dtblBuyGetFree = CheckIfActiveBuyNGetFree(GeneralFunctions.fnInt32(strselectid));
                    if (dtblBuyGetFree.Rows.Count > 0)
                    {
                        TBuyNFreeProceed = CheckCartForProceedBuyNGetFree(GeneralFunctions.fnInt32(strselectid), dtblBuyGetFree, ref TBuyNFreeID, ref TBuyNFreeQty, ref TBuyNFree_ItemToBeDeletedFirst);
                    }
                    else
                    {
                        TBuyNFreeProceed = false;
                    }
                }


                if (TBuyNFreeProceed)
                {
                    AddBuyNGetFreeQty(GeneralFunctions.fnInt32(strselectid), await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), TBuyNFreeID, TBuyNFreeQty, TBuyNFree_ItemToBeDeletedFirst, TSaleID, TSalePrice);
                }
            }

            if (!TBuyNFreeProceed)
            {
                if ((strCurrentServiceType == "Sales") && (TMixMatchID > 0))
                {
                    for (int lp = 1; lp <= intPressQty; lp++)
                    {
                        await SelectProductBrowseMixMatch();
                    }
                }
                else
                {

                    if ((refType == "P") || (refType == "M") || (refType == "K") || (refType == "U")
                                || (refType == "W") || (refType == "E") || (refType == "F") || (refType == "S") || (refType == "T"))
                    {
                        if (strCurrentServiceType == "Sales")
                        {
                            FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref SaleID, ref SalePrice);
                            if (SaleID == 0)
                            {
                                FetchMix_n_Match(GeneralFunctions.fnInt32(strselectid), ref MixMatchID, ref MixMatchFlag, ref MixMatchCat,
                                                    ref MixMatchType, ref MixMatchVal, ref MixMatchPlus, ref MixMatchPartPrice, ref MixMatchApplicableLast);

                                // MixMatchFlag = N / Y - Not Applicable / Applicale
                                // MixMatchCat = N / P - Normal Pricing / Plus Pricing
                                // MixMatchType = P/A - % off / Amount off
                            }
                        }
                    }

                    if (strCurrentServiceType == "Rent")
                    {
                        if (blRentRecall) return;
                        else if ((refType == "S") || (refType == "W")) return;
                    }
                    if (strCurrentServiceType == "Repair")
                    {
                        //if (blRepairRecall) return;
                        //else if ((refType == "S") || (refType == "W")) return;
                        if (refType == "W") return;
                    }

                    if (Settings.POSIDRequired == "Y")
                    {
                        if (GeneralFunctions.fnInt32(refAge) > 0)
                        {
                            iAge = GeneralFunctions.fnInt32(refAge);
                            if (!AgeCheck(DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)))) return;
                            //if (MyMessageBox.ShowBox(Translation.SetMultilingualTextInCodes("Minimum Age ", "frmPOSN_msg_MinimumAge") + refAge + Translation.SetMultilingualTextInCodes(" : Birthday on or before ", "frmPOSN_msg_Birthdayonorbefore") + DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)).ToString("MM/dd/yyyy"), Translation.SetMultilingualTextInCodes("Age Verification", "frmPOSN_msg_AgeVerification"), MessageBoxButtons.OKCancel, MessageBoxIcon.Information) == DialogResult.Cancel) return;
                        }
                    }

                    string strUOMCount = "";
                    string strUOMPrice = "";
                    string strUOMDesc = "";

                    string strMatxOID = "";
                    string strMatxOV1 = "";
                    string strMatxOV2 = "";
                    string strMatxOV3 = "";
                    string strSLID = "0";


                    if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Unit of Measure")
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                        try
                        {
                            frm_POSProductAddnDlg.ProductType = "Unit of Measure";
                            frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                grdProduct, colIMID));
                            frm_POSProductAddnDlg.Heading = "Unit of Measure Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                grdProduct, colIMDesc);
                            frm_POSProductAddnDlg.ShowDialog();
                            if (frm_POSProductAddnDlg.DialogResult == true)
                            {
                                strUOMCount = frm_POSProductAddnDlg.UOMCount;
                                strUOMPrice = frm_POSProductAddnDlg.UOMPrice;
                                strUOMDesc = frm_POSProductAddnDlg.UOMDesc;
                            }
                            else blExit = true;
                        }
                        finally
                        {
                            frm_POSProductAddnDlg.Close();
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                        if (blExit)
                        {
                            return;
                        }
                    }

                    if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Matrix")
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                        try
                        {
                            frm_POSProductAddnDlg.ProductType = "Matrix";
                            frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                            frm_POSProductAddnDlg.Heading = " Matrix Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                            frm_POSProductAddnDlg.ShowDialog();
                            if (frm_POSProductAddnDlg.DialogResult == true)
                            {
                                strMatxOID = frm_POSProductAddnDlg.MatrixOID;
                                strMatxOV1 = frm_POSProductAddnDlg.MatrixOV1;
                                strMatxOV2 = frm_POSProductAddnDlg.MatrixOV2;
                                strMatxOV3 = frm_POSProductAddnDlg.MatrixOV3;
                            }
                            else blExit = true;
                        }
                        finally
                        {
                            frm_POSProductAddnDlg.Close();
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                        if (blExit)
                        {
                            return;
                        }
                    }

                    if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Serialized")
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                        try
                        {
                            frm_POSProductAddnDlg.ProductType = "Serialized";
                            frm_POSProductAddnDlg.dtblS = dtblPOS;
                            frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                            frm_POSProductAddnDlg.Heading = "Serialized Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                            frm_POSProductAddnDlg.ShowDialog();
                            if (frm_POSProductAddnDlg.DialogResult == true)
                            {
                                strSLID = frm_POSProductAddnDlg.SLID;
                            }
                            else blExit = true;
                        }
                        finally
                        {
                            frm_POSProductAddnDlg.Close();
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                        if (blExit)
                        {
                            return;
                        }
                    }

                    /*if (intCustID != 0)
                    {
                        if (GeneralFunctions.fnDouble(refPrice) == 0) refPrice = refNPrice;
                    }*/

                    int intfocusrow = 0;
                    double dblRate = 0;
                    double dblPrice = 0;

                    //if (strCurrentServiceType != "Repair")
                    //{
                    if (!CheckStock(GeneralFunctions.fnInt32(strselectid), 1, strMatxOID, strMatxOV1, strMatxOV2, strMatxOV3))
                    {
                        DocMessage.MsgInformation("No Stock available!");
                        return;
                    }
                    //}

                    string strRentType = "NA";
                    double dblRentDuration = 0;
                    double dblRentValue = 0;
                    double dblRentDeposit = 0;

                    //Block
                    /*
                    if (strCurrentServiceType == "Rent")
                    {
                        if (!blRentRecall)
                        {
                            frmPOSRentalSelectDlg frmrentsel = new frmPOSRentalSelectDlg();
                            try
                            {
                                frmrentsel.PID = GeneralFunctions.fnInt32(strselectid);
                                frmrentsel.ShowDialog();
                                if (frmrentsel.DialogResult == DialogResult.OK)
                                {
                                    strRentType = frmrentsel.RentType;
                                    dblRentDuration = frmrentsel.RentDuration;
                                    dblRentValue = frmrentsel.RentValue;
                                    dblRentDeposit = frmrentsel.RentDeposit;
                                }
                                else blExit = true;
                            }
                            finally
                            {
                                frmrentsel.Dispose();
                            }
                            if (blExit) return;
                        }
                    }
                    */
                    string strRepairItemTag = "";
                    string strRepairItemSlNo = "";
                    string strRepairItemPurchaseDate = "";


                    if (strCurrentServiceType == "Sales")
                    {
                        if (SaleID > 0)
                        {
                            refPrompt = "N";
                            refPrice = SalePrice.ToString();
                            if (refType == "U") strUOMPrice = SalePrice.ToString();
                        }

                        if (!blfinddata)
                        {
                            if (refType == "U")
                            {
                                if (refPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, GeneralFunctions.fnDouble(strUOMPrice));

                                    if (promptPrice == -99999) return;

                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                    "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});

                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;

                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }


                                        string linetxt = "";
                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc + "\n";


                                        dtblPOS.Rows.Add(new object[]
                                    {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * promptPrice),strUOMCount,newpretaxamt.ToString(),strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty * promptPrice),refUOM,"","","","","N"});
                                        /*
                                        line1 = "";
                                        line2 = "";
                                        RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", promptPrice.ToString(), ref line1, ref line2);
                                        DisplayPoleText(2, "N", "N", line1, line2);*/
                                    }
                                }
                                else
                                {
                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                                    refType,refOHQty,refNQty,refCost,intPressQty,strUOMPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    strUOMPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (GeneralFunctions.fnDouble(strUOMPrice) - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }


                                        string linetxt = "";
                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,strUOMPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),strUOMCount,newpretaxamt.ToString(),strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    strUOMPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),refUOM,"","","","","N"});
                                    }
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", strUOMPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }

                            else if (refType == "E")
                            {
                                if (refPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));

                                    if (promptPrice == -99999) return;

                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strSLID,"0","0","","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0
                                    ,MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),strSLID,"0","0","","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0
                                    ,MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),refUOM,"","","","","N"});

                                        /*
                                        line1 = "";
                                        line2 = "";

                                        RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                        DisplayPoleText(2, "N", "N", line1, line2);*/
                                    }
                                }

                                else
                                {
                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),strSLID,"0","0","","","","",GetUniqueString(),
                                    refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),strSLID,"0","0","","","","",GetUniqueString(),
                                    refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),refUOM,"","","","","N"});
                                    }

                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }
                            else if (refType == "M")
                            {
                                if (refPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));

                                    if (promptPrice == -99999) return;

                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                {
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * promptPrice),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,
                                strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                promptPrice,Convert.ToDecimal(intPressQty * promptPrice),refUOM,"","","","","N"});
                                    }
                                    else
                                    {

                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                {
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                linetxt,
                                refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * newpretaxamt),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,
                                strMatxOV3,GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                promptPrice,Convert.ToDecimal(intPressQty * newpretaxamt),"","","","","N"});
                                    }
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                                else
                                {
                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                        dtblPOS.Rows.Add(new object[]
                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                    }
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                    PgridView1, colIMDesc), "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }
                            else if (refType == "W")
                            {
                                if (CheckForFixedWeight(intRowID))
                                {
                                    weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                    weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                    //weightitemid = intRowID;
                                    //weightitemname = (sender as POSControls.POSItem).ItemName;
                                    await AddFixedWeightedItem();
                                }
                                else
                                {
                                    if ((Settings.ScaleDevice == "Datalogic Scale") && (m_posScale != null))
                                    {
                                        try
                                        {
                                            weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                            weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                            //weightitemid = intRowID;
                                            //weightitemname = (sender as POSControls.POSItem).ItemName;
                                            weightstring = m_posScale.ReadWeight(20000).ToString();

                                            double Tare = 0;

                                            double Tr1 = 0;
                                            double Tr2 = 0;
                                            FetchTare(weightitemid, ref Tr1, ref Tr2);

                                            Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);


                                            if (blTareEntry)
                                            {
                                                Tare = dblTareEntryValue;
                                            }

                                            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                            {
                                                SecondMonitor.AddWeightInfo(GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()) + " " + m_posScale.WeightUnit.ToString(), Tare);
                                            }

                                            if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                            {
                                                /*if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                {
                                                    SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + m_posScale.WeightUnit.ToString());
                                                }*/
                                                await AddWeightedItem();

                                            }
                                            else
                                            {
                                                DocMessage.MsgInformation(Properties.Resources.Invalid_scale_weight);
                                                return;
                                            }
                                        }
                                        catch
                                        {
                                            DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                            return;
                                        }

                                    }
                                    else if ((Settings.ScaleDevice == "Kilotech") && (Settings.COMPort != "(None)"))
                                    {
                                        try
                                        {
                                            string wt = "";
                                            blGetWeight = false;
                                            if (IsActiveScale1())
                                            {
                                                if (s_wght != 0) wt = s_wght.ToString();
                                                if (wt != "")
                                                {
                                                    weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                                    weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                                    //weightitemid = intRowID;
                                                    //weightitemname = (sender as POSControls.POSItem).ItemName;
                                                    weightstring = wt;
                                                    weightuom = s_wght_u;
                                                    double Tare = 0;
                                                    double Tr1 = 0;
                                                    double Tr2 = 0;
                                                    FetchTare(weightitemid, ref Tr1, ref Tr2);

                                                    Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                                                    if (blTareEntry)
                                                    {
                                                        Tare = dblTareEntryValue;
                                                    }

                                                    if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                    {
                                                        if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                        {
                                                            SecondMonitor.AddWeightInfo(GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()) + " " + s_wght_u, Tare);
                                                        }

                                                        await AddWeightedItem();


                                                    }
                                                    else
                                                    {
                                                        DocMessage.MsgInformation(Properties.Resources.No_scale_weight);
                                                        return;
                                                    }
                                                }
                                                else
                                                {
                                                    blGetWeight = false;
                                                    DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                return;
                                            }
                                        }
                                        catch
                                        {
                                            DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                            return;
                                        }

                                    }
                                    else if ((Settings.ScaleDevice == "Live Weight") && (Settings.COMPort != "(None)"))
                                    {
                                        weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                        weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                        await AddWeightedItem();
                                        /*try
                                        {
                                            string wt = "";
                                            blGetWeight = false;
                                            if (s_wght != 0) wt = s_wght.ToString();
                                            if (wt != "")
                                            {
                                                weightitemid = intRowID;
                                                weightitemname = (sender as POSControls.POSItem).ItemName;
                                                weightstring = wt;

                                                double Tare = 0;
                                                FetchTare(weightitemid, ref Tare);
                                                if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                {
                                                    if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                    {
                                                        SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + s_wght_u);
                                                    }

                                                    AddWeightedItem();

                                                }
                                                else
                                                {
                                                    DocMessage.MsgInformation(Properties.Resources."No scale weight");
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                blGetWeight = false;
                                                DocMessage.MsgInformation(Properties.Resources."Cannot read from scale device");
                                                return;
                                            }
                                        }
                                        catch
                                        {
                                            DocMessage.MsgInformation(Properties.Resources."Cannot read from scale device");
                                            return;
                                        }*/

                                    }
                                    else if (Settings.ScaleDevice == "XEPOS")
                                    {
                                        string strfilename = "";
                                        strfilename = System.AppDomain.CurrentDomain.BaseDirectory;
                                        if (strfilename.EndsWith("\\"))
                                        {
                                            strfilename = strfilename + "Weight.exe";
                                        }
                                        else
                                        {
                                            strfilename = strfilename + "\\Weight.exe";
                                        }
                                        if (!System.IO.File.Exists(strfilename)) return;

                                        blopenweight = true;
                                        weightcallfrom = "POSItem";

                                        weightitemid = intRowID;
                                        weightitemname = (sender as POSControls.POSItem).ItemName;

                                        Process p = new Process();
                                        p.StartInfo.FileName = strfilename;
                                        p.Start();
                                    }
                                    else
                                    {
                                        bool proceedflag = false;
                                        double wqty = 0;
                                        double wdisc = 0;
                                        string val1 = "";
                                        string val2 = "0";
                                        string val3 = "0";
                                        string val4 = "";
                                        string val5 = "";

                                        frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                                        try
                                        {

                                            frm_POSItemDlg.BlankLine = false;
                                            //Todo: frm_POSItemDlg.ParentForm = this;
                                            frm_POSItemDlg.IsEdit = false;
                                            frm_POSItemDlg.ServiceType = strCurrentServiceType;
                                            frm_POSItemDlg.ProductDesc = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc); ;
                                            frm_POSItemDlg.Qty = intPressQty;
                                            frm_POSItemDlg.Price = GeneralFunctions.fnDouble(refPrice);
                                            frm_POSItemDlg.Weighted = true;
                                            frm_POSItemDlg.WeightedUOM = refUOM;
                                            blurGrid.Visibility = Visibility.Visible;
                                            frm_POSItemDlg.ShowDialog();
                                            blurGrid.Visibility = Visibility.Collapsed;
                                            if (frm_POSItemDlg.DialogResult == true)
                                            {
                                                proceedflag = true;
                                                wqty = frm_POSItemDlg.Qty;
                                                wdisc = frm_POSItemDlg.Discount;
                                                if (!GeneralFunctions.IsValidScaleWeight_POS(wqty.ToString(), true)) return;
                                                if (blTareEntry)
                                                {
                                                    wqty = wqty - dblTareEntryValue;
                                                    if (wqty <= 0)
                                                    {
                                                        new MessageBoxWindow().Show(Properties.Resources.Enter_valid_weight, Properties.Resources.Weight_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        finally
                                        {
                                        }
                                        if (!proceedflag) return;

                                        if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                        {
                                            SecondMonitor.AddWeightInfo(GeneralFunctions.fnDouble(wqty).ToString(), 0);
                                        }

                                        if (wdisc > 0)
                                        {
                                            val1 = "A";
                                            val2 = wdisc.ToString();
                                            val3 = wdisc.ToString();
                                            val4 = "9988";
                                            val5 = Properties.Resources.Discount__.Replace("$", SystemVariables.CurrencySymbol) + wdisc.ToString("f");
                                        }

                                        if (refPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                            if (promptPrice == -99999) return;

                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable 
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                            {
                                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        wdisc == 0 ? await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) :
                                        await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n",
                                              refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),refUOM,"","","","","N"});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (promptPrice * wqty - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (promptPrice * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }


                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                dtblPOS.Rows.Add(new object[]
                                            {
                                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                       linetxt,refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),refUOM,"","","","","N"});
                                            }

                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), wqty.ToString(), promptPrice.ToString(),
                                            ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);

                                        }
                                        else
                                        {
                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                            {
                                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        wdisc == 0 ? await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) :
                                        await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n",
                                                    refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),refUOM,"","","","","N"});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (GeneralFunctions.fnDouble(refPrice) * wqty - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                dtblPOS.Rows.Add(new object[]
                                            {
                                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),linetxt,refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"","","","","N"});
                                            }

                                            line1 = "";
                                            line2 = "";

                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), wqty.ToString(), refPrice, ref line1, ref line2);

                                            DisplayPoleText(2, "N", "N", line1, line2);
                                        }

                                        blTareEntry = false;
                                        dblTareEntryValue = 0;
                                    }
                                }
                            }
                            else if ((refType == "F") && (Settings.AddGallon == "Y"))
                            {
                                /*
                                double gl = 0;
                                bool pf = false;
                                frmPOSGallonEntryDlg fgaldlg = new frmPOSGallonEntryDlg();
                                try
                                {
                                    fgaldlg.ShowDialog();
                                    if (fgaldlg.DialogResult == DialogResult.OK)
                                    {
                                        pf = true;
                                        gl = fgaldlg.Gallon;
                                    }
                                }
                                finally
                                {
                                    fgaldlg.Dispose();
                                }
                                if (!pf) return;

                                if (refPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;

                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[] 
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,gl,promptPrice,refNPrice,gl*promptPrice,"0","0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                              "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                             promptPrice,gl*promptPrice});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";


                                        dtblPOS.Rows.Add(new object[] 
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              linetxt,
                              refType,refOHQty,refNQty,refCost,gl,promptPrice,refNPrice,gl*newpretaxamt,"0","0","0","","","","",
                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                              "1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                              "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,gl*newpretaxamt});

                                    }

                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                    PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }
                                else
                                {
                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[] 
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                      await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                      refType,refOHQty,refNQty,refCost,gl,refPrice,refNPrice,gl*GeneralFunctions.fnDouble(refPrice),"0","0","0","","","","",GetUniqueString(),refDP,
                                      "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                      "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      refPrice,gl*GeneralFunctions.fnDouble(refPrice)});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";




                                        dtblPOS.Rows.Add(new object[] 
                                    {  await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        linetxt,
                                      refType,refOHQty,refNQty,refCost,gl,refPrice,refNPrice,gl*newpretaxamt,"0","0","0","","","","",GetUniqueString(),refDP,
                                      "", MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                      "1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                      "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      refPrice,gl*newpretaxamt});

                                    }



                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);
                                }*/
                            }
                            else
                            {
                                if (refPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;

                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * promptPrice),"0","0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                              "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * promptPrice),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";


                                        dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              linetxt,
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * newpretaxamt),"0","0","0","","","","",
                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                              "1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                              "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * newpretaxamt),refUOM,"","","","","N"});

                                    }
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                    PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                                else
                                {
                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                    {
                                        dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                      await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                      refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                                      "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                      "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      refPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                    }
                                    else
                                    {
                                        double discntamt = 0;
                                        string damt = "0";
                                        double newpretaxamt = 0;
                                        string amtstr = "";
                                        if (MixMatchCat == "N")  // Normal Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                        }

                                        if (MixMatchCat == "P")  // Plus Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                            amtstr = "";
                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                        }

                                        if (MixMatchCat == "A")  // Absolute Pricing
                                        {
                                            discntamt = 0;
                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                            damt = "0";
                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                            newpretaxamt = 0;
                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                            amtstr = "";
                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                        }

                                        string linetxt = "";
                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";




                                        dtblPOS.Rows.Add(new object[]
                                    {  await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        linetxt,
                                      refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt),"0","0","0","","","","",GetUniqueString(),refDP,
                                      "", MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                      "1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                      "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      refPrice,Convert.ToDecimal(intPressQty*newpretaxamt),refUOM,"","","","","N"});

                                    }


                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }
                            SetCartDisplay();
                            gridControl1.ItemsSource = dtblPOS;
                            ToggleWithEmptyCart();

                           
                            gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;

                            if (Settings.PriceLevelForOneTime == "Y")
                            {
                                Settings.PriceLevelForOneTime = "N";
                                intUsePriceLevel = Settings.UsePriceLevel;
                            }
                        }
                        else
                        {
                            SetCartDisplay();
                            gridControl1.ItemsSource = dtblPOS;
                            ToggleWithEmptyCart();
                            gridView1.FocusedRowHandle = intfocusrow;
                        }
                    }


                    if (strCurrentServiceType == "Rent")
                    {
                        if (!blfinddata)
                        {
                            if (refType == "U")
                            {
                                if (refRentPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)
                                        + " * " + strUOMDesc, dblRentValue);
                                    if (promptPrice == -99999) return;

                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                            await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                            refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),strUOMCount,
                            strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0",
                            "N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                            0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                            promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),strUOMCount,
                              strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0",
                              "N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", strUOMPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }

                            else if (refType == "E")
                            {
                                if (refRentPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), dblRentValue);
                                    if (promptPrice == -99999) return;

                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),strSLID,
                              "0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),strSLID,
                              "0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }

                            else if (refType == "M")
                            {
                                if (refRentPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), dblRentValue);
                                    if (promptPrice == -99999) return;
                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),"0","0","0",
                              strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),
                              "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0",
                              "","","","0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                    PgridView1, colIMDesc), "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }
                            else
                            {
                                if (refRentPrompt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), dblRentValue);
                                    if (promptPrice == -99999) return;

                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),"0","0","0",
                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                    PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),"0","0","0",
                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }
                            SetCartDisplay();
                            gridControl1.ItemsSource = dtblPOS;
                            ToggleWithEmptyCart();
                            gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;

                            if (Settings.PriceLevelForOneTime == "Y")
                            {
                                Settings.PriceLevelForOneTime = "N";
                                intUsePriceLevel = Settings.UsePriceLevel;
                            }
                        }
                        else
                        {
                            SetCartDisplay();
                            gridControl1.ItemsSource = dtblPOS;
                            ToggleWithEmptyCart();
                            gridView1.FocusedRowHandle = intfocusrow;
                        }

                        int rwindx = -1;
                        foreach (DataRowView drv in dtblPOS.DefaultView)
                        {
                            rwindx++;
                            if ((drv["ITEMINDEX"].ToString() == "1") && (drv["SERVICE"].ToString() == "Rent"))
                            {
                                gridControl1.SetCellValue(rwindx, colProduct, drv["PRODUCT"].ToString().Replace("\n", "") + "\n");
                            }
                        }
                    }


                    if (strCurrentServiceType == "Repair")
                    {
                        if (!blfinddata)
                        {
                            if (refRepairPromptTag == "Y")
                            {
                                //Block
                                /*
                                frmPOSRepairItemInfoDlg frm_POSRepairItemInfoDlg = new frmPOSRepairItemInfoDlg();
                                try
                                {
                                    frm_POSRepairItemInfoDlg.ShowDialog();
                                    if (frm_POSRepairItemInfoDlg.DialogResult == DialogResult.OK)
                                    {
                                        strRepairItemTag = frm_POSRepairItemInfoDlg.RepairItemTag;
                                        strRepairItemSlNo = frm_POSRepairItemInfoDlg.RepairItemSlNo;
                                        if (frm_POSRepairItemInfoDlg.RepairItemPurchaseDate == Convert.ToDateTime(null)) strRepairItemPurchaseDate = "";
                                        else strRepairItemPurchaseDate = frm_POSRepairItemInfoDlg.RepairItemPurchaseDate.ToString("d");
                                    }
                                    else return;
                                }
                                finally
                                {
                                    frm_POSRepairItemInfoDlg.Dispose();
                                }*/
                            }



                            if (refType == "U")
                            {
                                if (refRepairPromptAmt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;

                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                            await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                            refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                            GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                            0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                            promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", strUOMPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }

                            else if (refType == "E")
                            {
                                if (refRepairPromptAmt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;

                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strSLID,"0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),strSLID,"0","0","","","","",GetUniqueString(),
                              refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }

                            else if (refType == "M")
                            {
                                if (refRepairPromptAmt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;
                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,refPrice,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,
                              strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                    PgridView1, colIMDesc), "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }
                            else
                            {
                                if (refRepairPromptAmt == "Y")
                                {
                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                    if (promptPrice == -99999) return;

                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),"0","0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});

                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                    PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                                else
                                {
                                    dtblPOS.Rows.Add(new object[]
                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                    /*
                                    line1 = "";
                                    line2 = "";
                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                }
                            }
                            SetCartDisplay();
                            gridControl1.ItemsSource = dtblPOS;
                            ToggleWithEmptyCart();
                            gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                            await SetCurrentRow1(dtblPOS.Rows.Count - 1);

                            if (Settings.PriceLevelForOneTime == "Y")
                            {
                                Settings.PriceLevelForOneTime = "N";
                                intUsePriceLevel = Settings.UsePriceLevel;
                            }
                        }
                        else
                        {
                            SetCartDisplay();
                            gridControl1.ItemsSource = dtblPOS;
                            ToggleWithEmptyCart();
                            await SetCurrentRow1(intfocusrow);
                            //gridView1.FocusedRowHandle = intfocusrow;
                        }
                    }
                }
            }


            /// Set UP/Down Button to move cursor through Cart Item

            EnableDisableButton(btnUP, btnDown, gridControl1);

            /// Automatic Discount Add in Cart

            if (strCurrentServiceType == "Sales")
                await AddAutoDiscountInCart(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)), SaleID > 0 ? false : true);

            /// Automatic Fees and Charge Add in Cart

            await AddAutoFeesInCart(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)));

            /// Automatic Mix n Match in Cart

            if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();

            if (strCurrentServiceType == "Sales")
            {
                CheckAndExecuteReorderStockAlert(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)));
            }
            

            SetCartDisplay();
            gridControl1.ItemsSource = dtblPOS;
            ToggleWithEmptyCart();
            GetTotal(); /// Calculate and Display Cart Total
            ShowTax();  /// Calculate and Display Taxes of Cart Items
            ResetQty(); /// Reset Item Quantity
            //gridControl1.RefreshData();

            //tcPOS.SelectedIndex = 0;  //  commented, to keep product grid open after product's selection

            //gridControl1.Focus();
            gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;

        }

        private void PART_Editor_Loaded_1(object sender, RoutedEventArgs e)
        {
            RichEditControl richEditControl = (RichEditControl)sender;
            richEditControl.ApplyTemplate();
            richEditControl.Views.SimpleView.BackColor = SystemVariables.SelectedTheme == "Light" ? System.Drawing.Color.FromArgb(255, 255, 255) : System.Drawing.Color.FromArgb(47, 58, 77);
            richEditControl.Views.SimpleView.Padding = new DevExpress.Portable.PortablePadding(0);// new System.Windows.Forms.Padding(0);
            richEditControl.Document.Sections[0].Margins.Left = Units.InchesToDocumentsF(2f);
        }

        private void SetCartDisplay()
        {

            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "H") || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "C")
                    || (dr["PRODUCTTYPE"].ToString() == "W") || (dr["PRODUCTTYPE"].ToString() == "I"))
                {
                    dr["PM"] = "N";
                }
                
                else
                {
                    if (GeneralFunctions.fnInt32(dr["BUYNGETFREEHEADERID"].ToString()) > 0)
                    {
                        dr["PM"] = "N";
                    }
                    else
                    {
                        dr["PM"] = "Y";
                    }
                }
            }

            if (SystemVariables.SelectedTheme == "Dark")
            {
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    string prodtype = dr["PRODUCTTYPE"].ToString();
                    string proddesc = dr["PRODUCT"].ToString();
                    string serv = dr["SERVICE"].ToString();

                    string rnttype = "";
                    string rnttime = "";
                    rnttype = dr["RENTTYPE"].ToString();
                    rnttime = dr["RENTDURATION"].ToString();

                    string buygetC = dr["BUYNGETFREECATEGORY"].ToString();
                    string buygetN = dr["BUYNGETFREENAME"].ToString();

                    string renttext = "";
                    string discText = dr["DISCOUNTTEXT"].ToString();
                    string feeText = dr["FEESTEXT"].ToString();

                    string prodqty = dr["QTY"].ToString();

                    string ProdUOM = dr["UOM"].ToString();

                    string prodrate = Settings.TaxInclusive == "N" ? dr["RATE"].ToString() : dr["GRATE"].ToString();
                    string prodtotal = Settings.TaxInclusive == "N" ? dr["PRICE"].ToString() : dr["GPRICE"].ToString();

                    if (prodtype == "W")
                    {
                        if (GeneralFunctions.fnDouble(prodqty) == 0)
                        {
                            prodtotal = "0";
                        }
                    }

                    prodrate = GeneralFunctions.FormatDoubleForPrint(prodrate);
                    prodtotal = GeneralFunctions.FormatDoubleForPrint(prodtotal);
                    string displayitem = "";
                    string displayqty = "";

                    string displayrate = "";
                    string displaytotal = "";

                    if (prodtype == "I") prodqty = "";
                    if (prodqty == "999888777") prodqty = "";

                    if (prodtype == "W") prodqty = prodqty + " " + ProdUOM;

                    if ((prodrate == "99988863777") || (prodrate == "99988863777.00") || (prodrate == "99988863777.000")) prodrate = "";
                    if (prodtype == "W") prodrate = GeneralFunctions.FormatDoubleForPrint(prodrate) + "/" + ProdUOM;

                    if ((prodtotal == "99988863777.00") || (prodtotal == "99988863777.000")) prodtotal = "";
                    if (prodtotal != "") prodtotal = prodtotal + "&nbsp;";
                    displayqty = "<font size='2' face='Open Sans' color='white'>" + prodqty + "</font>";
                    displayrate = "<font size='2' face='Open Sans' color='white'>" + prodrate + "</font>";
                    if (prodtotal != "")
                    displaytotal = "<font size='2' face='Open Sans' color='white'>" + SystemVariables.CurrencySymbol + prodtotal + "</font>";

                    if (prodtype == "C")
                    {
                        displayitem = "<font size='2' face='Open Sans' color='#7FFFD4'>" + proddesc + "</font>";
                    }
                    else if (prodtype == "H")
                    {
                        displayitem = "<font size='2' face='Open Sans' color='#9ACD32'>" + proddesc + "</font>";
                    }
                    else
                    {
                        displayitem = "<font size='2' face='Open Sans' color='white'>" + proddesc + "</font>";
                    }
                    if (buygetC == "B")
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='deeppink'><i>" + buygetN + "</i></font>";
                    }





                    if (serv == "Rent")
                    {
                        if ((blRentIssued) && (Settings.CalculateRentLater == "Y"))
                        {
                            if (rnttype == "MI") renttext = "minute basis";
                            else if (rnttype == "HR") renttext = "hourly";
                            else if (rnttype == "HD") renttext = "half day";
                            else if (rnttype == "DY") renttext = "daily";
                            else if (rnttype == "WK") renttext = "weekly";
                            else renttext = "monthly";
                        }
                        else
                        {

                            if (rnttype == "MI") renttext = " (" + rnttime + " " + "min." + ")";
                            else if (rnttype == "HR") renttext = " (" + rnttime + " " + "hr." + ")";
                            else if (rnttype == "HD") renttext = " (" + rnttime + " " + "half day" + ")";
                            else if (rnttype == "DY") renttext = " (" + rnttime + " " + "day" + ")";
                            else if (rnttype == "WK") renttext = " (" + rnttime + " " + "week" + ")";
                            else renttext = " (" + rnttime + " " + "month" + ")";
                        }
                    }

                    if ((discText != "") && (renttext == "") && (feeText == ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + discText + "</i></font>";
                    }

                    if ((discText == "") && (renttext == "") && (feeText != ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + feeText + "</i></font>";
                    }

                    if ((discText == "") && (renttext != "") && (feeText != ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + renttext + " " + feeText + "</i></font>";
                    }


                    if ((discText != "") && (renttext == "") && (feeText != ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + discText + " " + feeText + "</i></font>";
                    }

                    if ((discText != "") && (renttext != "") && (feeText != ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + renttext + " " + discText + " " + feeText + "</i></font>";
                    }


                    if ((discText == "") && (renttext != "") && (feeText == ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + renttext + "</i></u></font>";
                    }

                    if ((discText != "") && (renttext != "") && (feeText == ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + discText + " " + renttext + "</i></font>";
                    }

                    if (displayitem.Contains("<br/>"))
                    {
                        int freq = Regex.Matches(displayitem, "<br/>").Count;
                        if (freq == 1)
                        {
                            dr["DISPLAY_ITEM"] = "<p align='left' style='display:block;margin-top:10px'>" + displayitem + "</p>";
                        }
                        else
                        {
                            dr["DISPLAY_ITEM"] = "<p align='left' style='display:block;margin-top:1px'>" + displayitem + "</p>";
                        }
                    }
                    else
                    {
                        dr["DISPLAY_ITEM"] = "<p align='left' valign='middle' >" + displayitem + "</p>";
                    }

                    //dr["DISPLAY_ITEM"] = (displayitem.Contains("<br/>")) ? "<p align='left' valign='top'>" + displayitem + "</p>" : "<p align='left' valign='middle'>" + displayitem + "</p>";
                    dr["DISPLAY_QTY"] = "<p align='center' valign='middle'>" + displayqty + "</p>";
                    dr["DISPLAY_RATE"] = "<p align='right' valign='middle'>" + displayrate + "</p>";
                    dr["DISPLAY_TOTAL"] = "<p align='right' valign='middle' font-style='normal'>" + displaytotal + "</p>";

                }
            }

            if (SystemVariables.SelectedTheme == "Light")
            {
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    string prodtype = dr["PRODUCTTYPE"].ToString();
                    string proddesc = dr["PRODUCT"].ToString();
                    string serv = dr["SERVICE"].ToString();

                    string rnttype = "";
                    string rnttime = "";
                    rnttype = dr["RENTTYPE"].ToString();
                    rnttime = dr["RENTDURATION"].ToString();

                    string buygetC = dr["BUYNGETFREECATEGORY"].ToString();
                    string buygetN = dr["BUYNGETFREENAME"].ToString();

                    string renttext = "";
                    string discText = dr["DISCOUNTTEXT"].ToString();
                    string feeText = dr["FEESTEXT"].ToString();

                    string prodqty = dr["QTY"].ToString();

                    string ProdUOM = dr["UOM"].ToString();

                    string prodrate = Settings.TaxInclusive == "N" ? dr["RATE"].ToString() : dr["GRATE"].ToString();
                    string prodtotal = Settings.TaxInclusive == "N" ? dr["PRICE"].ToString() : dr["GPRICE"].ToString();

                    if (prodtype == "W")
                    {
                        if (GeneralFunctions.fnDouble(prodqty) == 0)
                        {
                            prodtotal = "0";
                        }
                     }

                    prodrate = GeneralFunctions.FormatDoubleForPrint(prodrate);
                    prodtotal = GeneralFunctions.FormatDoubleForPrint(prodtotal);
                    string displayitem = "";
                    string displayqty = "";

                    string displayrate = "";
                    string displaytotal = "";

                    if (prodqty == "999888777") prodqty = "";

                    if (prodtype == "W") prodqty = prodqty + " " + ProdUOM;

                    

                    if ((prodrate == "99988863777") || (prodrate == "99988863777.00") || (prodrate == "99988863777.000")) prodrate = "";
                    if (prodtype == "W") prodrate = GeneralFunctions.FormatDoubleForPrint(prodrate) + "/<br/><div width=200px>" + ProdUOM + "</div>";

                    if ((prodtotal == "99988863777.00") || (prodtotal == "99988863777.000")) prodtotal = "";
                    if (prodtotal != "") prodtotal = prodtotal + "&nbsp;";
                    displayqty = "<font size='2' face='Open Sans' color='#686868'>" + prodqty + "</font>";
                    displayrate = "<font size='2' face='Open Sans' color='#686868'>" + prodrate + "</font>";
                    if (prodtotal != "")
                        displaytotal = "<font size='2' face='Open Sans' color='#686868'>" + SystemVariables.CurrencySymbol + prodtotal + "</font>";

                    if (prodtype == "C")
                    {
                        displayitem = "<font size='2' face='Open Sans' color='#7FFFD4'>" + proddesc + "</font>";
                    }
                    else if (prodtype == "H")
                    {
                        displayitem = "<font size='2' face='Open Sans' color='#9ACD32'>" + proddesc + "</font>";
                    }
                    else
                    {
                        displayitem = "<font size='2' face='Open Sans' color='#686868'>" + proddesc + "</font>";
                    }
                    if (buygetC == "B")
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='deeppink'><i>" + buygetN + "</i></font>";
                    }





                    if (serv == "Rent")
                    {
                        if ((blRentIssued) && (Settings.CalculateRentLater == "Y"))
                        {
                            if (rnttype == "MI") renttext = "minute basis";
                            else if (rnttype == "HR") renttext = "hourly";
                            else if (rnttype == "HD") renttext = "half day";
                            else if (rnttype == "DY") renttext = "daily";
                            else if (rnttype == "WK") renttext = "weekly";
                            else renttext = "monthly";
                        }
                        else
                        {

                            if (rnttype == "MI") renttext = " (" + rnttime + " " + "min." + ")";
                            else if (rnttype == "HR") renttext = " (" + rnttime + " " + "hr." + ")";
                            else if (rnttype == "HD") renttext = " (" + rnttime + " " + "half day" + ")";
                            else if (rnttype == "DY") renttext = " (" + rnttime + " " + "day" + ")";
                            else if (rnttype == "WK") renttext = " (" + rnttime + " " + "week" + ")";
                            else renttext = " (" + rnttime + " " + "month" + ")";
                        }
                    }

                    if ((discText != "") && (renttext == "") && (feeText == ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + discText + "</i></font>";
                    }

                    if ((discText == "") && (renttext == "") && (feeText != ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + feeText + "</i></font>";
                    }

                    if ((discText == "") && (renttext != "") && (feeText != ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + renttext + " " + feeText + "</i></font>";
                    }


                    if ((discText != "") && (renttext == "") && (feeText != ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + discText + " " + feeText + "</i></font>";
                    }

                    if ((discText != "") && (renttext != "") && (feeText != ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + renttext + " " + discText + " " + feeText + "</i></font>";
                    }


                    if ((discText == "") && (renttext != "") && (feeText == ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + renttext + "</i></u></font>";
                    }

                    if ((discText != "") && (renttext != "") && (feeText == ""))
                    {
                        displayitem = displayitem + "<br/><font size='1' face='Open Sans' color='#00BFFF'><i>" + discText + " " + renttext + "</i></font>";
                    }

                    if (displayitem.Contains("<br/>"))
                    {
                        int freq = Regex.Matches(displayitem, "<br/>").Count;
                        if (freq == 1)
                        {
                            dr["DISPLAY_ITEM"] = "<p align='left' style='display:block;margin-top:10px'>" + displayitem + "</p>";
                        }
                        else
                        {
                            dr["DISPLAY_ITEM"] = "<p align='left' style='display:block;margin-top:1px'>" + displayitem + "</p>";
                        }
                    }
                    else
                    {
                        dr["DISPLAY_ITEM"] = "<p align='left' valign='middle' >" + displayitem + "</p>";
                    }

                    //dr["DISPLAY_ITEM"] = (displayitem.Contains("<br/>")) ? "<p align='left' valign='top'>" + displayitem + "</p>" : "<p align='left' valign='middle'>" + displayitem + "</p>";
                    dr["DISPLAY_QTY"] = "<p align='center' valign='middle'>" + displayqty + "</p>";
                    dr["DISPLAY_RATE"] = "<p align='right' valign='middle'>" + displayrate + "</p>";
                    dr["DISPLAY_TOTAL"] = "<p align='right' valign='middle' font-style='normal'>" + displaytotal + "</p>";
                }
            }
        }

        public static string ConvertHtmlToText(string source)
        {

            string result;

            // Remove HTML Development formatting
            // Replace line breaks with space
            // because browsers inserts space
            result = source.Replace("\r", " ");
            // Replace line breaks with space
            // because browsers inserts space
            result = result.Replace("\n", " ");
            // Remove step-formatting
            result = result.Replace("\t", string.Empty);
            // Remove repeating speces becuase browsers ignore them
            result = System.Text.RegularExpressions.Regex.Replace(result,
                                                                  @"( )+", " ");

            // Remove the header (prepare first by clearing attributes)
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"<( )*head([^>])*>", "<head>",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"(<( )*(/)( )*head( )*>)", "</head>",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     "(<head>).*(</head>)", string.Empty,
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            // remove all scripts (prepare first by clearing attributes)
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"<( )*script([^>])*>", "<script>",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"(<( )*(/)( )*script( )*>)", "</script>",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            //result = System.Text.RegularExpressions.Regex.Replace(result,
            //         @"(<script>)([^(<script>\.</script>)])*(</script>)",
            //         string.Empty,
            //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"(<script>).*(</script>)", string.Empty,
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            // remove all styles (prepare first by clearing attributes)
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"<( )*style([^>])*>", "<style>",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"(<( )*(/)( )*style( )*>)", "</style>",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     "(<style>).*(</style>)", string.Empty,
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            // insert tabs in spaces of <td> tags
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"<( )*td([^>])*>", "\t",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            // insert line breaks in places of <BR> and <LI> tags
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"<( )*br( )*>", "\r",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"<( )*li( )*>", "\r",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            // insert line paragraphs (double line breaks) in place
            // if <P>, <DIV> and <TR> tags
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"<( )*div([^>])*>", "\r\r",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"<( )*tr([^>])*>", "\r\r",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"<( )*p([^>])*>", "\r\r",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            // Remove remaining tags like <a>, links, images,
            // comments etc - anything thats enclosed inside < >
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"<[^>]*>", string.Empty,
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            // replace special characters:
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"&nbsp;", " ",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"&bull;", " * ",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"&lsaquo;", "<",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"&rsaquo;", ">",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"&trade;", "(tm)",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"&frasl;", "/",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"<", "<",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @">", ">",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"&copy;", "(c)",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"&reg;", "(r)",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            // Remove all others. More can be added, see
            // http://hotwired.lycos.com/webmonkey/reference/special_characters/
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     @"&(.{2,6});", string.Empty,
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);


            // make line breaking consistent
            result = result.Replace("\n", "\r");

            // Remove extra line breaks and tabs:
            // replace over 2 breaks with 2 and over 4 tabs with 4.
            // Prepare first to remove any whitespaces inbetween
            // the escaped characters and remove redundant tabs inbetween linebreaks
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     "(\r)( )+(\r)", "\r\r",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     "(\t)( )+(\t)", "\t\t",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     "(\t)( )+(\r)", "\t\r",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     "(\r)( )+(\t)", "\r\t",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            // Remove redundant tabs
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     "(\r)(\t)+(\r)", "\r\r",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            // Remove multible tabs followind a linebreak with just one tab
            result = System.Text.RegularExpressions.Regex.Replace(result,
                     "(\r)(\t)+", "\r\t",
                     System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            // Initial replacement target string for linebreaks
            string breaks = "\r\r\r";
            // Initial replacement target string for tabs
            string tabs = "\t\t\t\t\t";
            for (int index = 0; index < result.Length; index++)
            {
                result = result.Replace(breaks, "\r\r");
                result = result.Replace(tabs, "\t\t\t\t");
                breaks = breaks + "\r";
                tabs = tabs + "\t";
            }

            // Thats it.
            return result;

        }

        private void ResizeTabHeader()
        {
            double pnlWidth = 0;
            if (posPanel.ActualWidth == 0)
            {
                pnlWidth = 100;
            }
            else
            {
                pnlWidth = (posPanel.ActualWidth - 10) / 5;
            }

            if (pnlWidth < 100)
            {
                pnlWidth = 100;
            }

            POSTItem.Width = ExitTItem.Width = tpCustomer.Width = tpProduct.Width = tpSetup.Width = pnlWidth;
        }

        public void AlignCategory()
        {
            double pnlWidth = 0;
            if (posPanel.ActualWidth == 0)
            {
                //pnlWidth = (599 - 20) / 5;
                pnlWidth = (System.Windows.SystemParameters.PrimaryScreenWidth - 480) / 5;
            }
            else
            {
                pnlWidth = (posPanel.ActualWidth - 20) / 5;
            }
            pnlCat1.Width = pnlWidth;
            pnlCat2.Width = pnlWidth;
            pnlCat3.Width = pnlWidth;
            pnlCat4.Width = pnlWidth;
            pnlCat5.Width = pnlWidth;
            pnlCat1.SetValue(Canvas.LeftProperty, Convert.ToDouble(6));// pnlCat.Left;
            pnlCat2.SetValue(Canvas.LeftProperty, Canvas.GetLeft(pnlCat1) + pnlWidth);
            pnlCat3.SetValue(Canvas.LeftProperty, Canvas.GetLeft(pnlCat2) + pnlWidth);
            pnlCat4.SetValue(Canvas.LeftProperty, Canvas.GetLeft(pnlCat3) + pnlWidth);
            pnlCat5.SetValue(Canvas.LeftProperty, Canvas.GetLeft(pnlCat4) + pnlWidth);
        }

        private void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            var window = Window.GetWindow(this);
            window.KeyDown += HandleKeyPress;
        }

        private async void HandleKeyPress(object sender, System.Windows.Input.KeyEventArgs e)
        {
            GeneralFunctions.SetFocus(txtSearch);
            //if (tcPOS == null) return;
            //if (txtSearch.Text == "Search Items") return;
            //if (txtSearch.Text == "") return;
            //if (e.Key == Key.Return)
            //{
            //    await AddtoCartFromFind((sender as OfflineRetailV2.Controls.CustomTextBox).Text.Trim());
            //}
        }
        private void UserControl_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            AlignCategory();
            ResizeTabHeader();

            foreach (UIElement cr in pnlCat1.Children)
            {
                if (cr is System.Windows.Controls.Border)
                {
                    if ((cr as System.Windows.Controls.Border).Name == "catgroup")
                        (cr as System.Windows.Controls.Border).Width = pnlCat1.Width - 10;
                }
            }

            foreach (UIElement cr in pnlCat2.Children)
            {
                if (cr is System.Windows.Controls.Border)
                {
                    if ((cr as System.Windows.Controls.Border).Name == "catgroup")
                        (cr as System.Windows.Controls.Border).Width = pnlCat2.Width - 10;
                }
            }

            foreach (UIElement cr in pnlCat3.Children)
            {
                if (cr is System.Windows.Controls.Border)
                {
                    if ((cr as System.Windows.Controls.Border).Name == "catgroup")
                        (cr as System.Windows.Controls.Border).Width = pnlCat3.Width - 10;
                }
            }

            foreach (UIElement cr in pnlCat4.Children)
            {
                if (cr is System.Windows.Controls.Border)
                {
                    if ((cr as System.Windows.Controls.Border).Name == "catgroup")
                        (cr as System.Windows.Controls.Border).Width = pnlCat4.Width - 10;
                }
            }

            foreach (UIElement cr in pnlCat5.Children)
            {
                if (cr is System.Windows.Controls.Border)
                {
                    if ((cr as System.Windows.Controls.Border).Name == "catgroup")
                        (cr as System.Windows.Controls.Border).Width = pnlCat5.Width - 10;
                }
            }

            ResizeButtonContentWidth(pnlCat1);
            ResizeButtonContentWidth(pnlCat2);
            ResizeButtonContentWidth(pnlCat3);
            ResizeButtonContentWidth(pnlCat4);
            ResizeButtonContentWidth(pnlCat5);
        }

        private void ResizeButtonContentWidth(Canvas pnl)
        {
            foreach (UIElement ctrl in pnl.Children)
            {
                if (ctrl is System.Windows.Controls.Border)
                {
                    if ((ctrl as System.Windows.Controls.Border).Name == "catgroup")
                    {
                        Grid grd = (ctrl as System.Windows.Controls.Border).Child as Grid;

                        foreach (UIElement btnorgrid in grd.Children)
                        {
                            if (btnorgrid is System.Windows.Controls.Button)
                            {
                                object contentobj = (btnorgrid as System.Windows.Controls.Button).Content;

                                if (contentobj is Viewbox)
                                {
                                    int tlen = ((contentobj as Viewbox).Child as TextBlock).Text.Length;
                                    double ifactor = 0.3;
                                    if (tlen <= 8)
                                    {
                                        ifactor = 0.6;
                                    }
                                    else if ((tlen >= 9) && (tlen <= 15))
                                    {
                                        ifactor = 0.8;
                                    }
                                    else if ((tlen >= 16) && (tlen <= 22))
                                    {
                                        ifactor = 0.8;
                                    }
                                    else
                                    {
                                        ifactor = 0.85;
                                    }
                                    ((contentobj as Viewbox).Child as TextBlock).Width = (pnl.Width - 10) * ifactor;
                                }



                            }

                            if (btnorgrid is DockPanel)
                            {
                                foreach (UIElement dckplctrl in (btnorgrid as DockPanel).Children)
                                {
                                    if (dckplctrl is System.Windows.Controls.Button)
                                    {
                                        object contentobj1 = (dckplctrl as System.Windows.Controls.Button).Content;

                                        if (contentobj1 is Viewbox)
                                        {
                                            int tlen = ((contentobj1 as Viewbox).Child as TextBlock).Text.Length;
                                            double ifactor = 0.3;
                                            if (tlen <= 8)
                                            {
                                                ifactor = 0.6;
                                            }
                                            else if ((tlen >= 9) && (tlen <= 15))
                                            {
                                                ifactor = 0.8;
                                            }
                                            else if ((tlen >= 16) && (tlen <= 22))
                                            {
                                                ifactor = 0.8;
                                            }
                                            else
                                            {
                                                ifactor = 0.85;
                                            }
                                            ((contentobj1 as Viewbox).Child as TextBlock).Width = (pnl.Width - 10) * ifactor;
                                        }
                                    }
                                }

                            }
                        }
                    }
                }
            }
        }

        private void SetGridMargin(double width, Grid grd)
        {
            if (width <= 110)
            {
                grd.Margin = new Thickness(-7);
            }
            if ((width >= 115) && (width <= 120))
            {
                grd.Margin = new Thickness(-8);
            }
            if ((width >= 120) && (width <= 130))
            {
                grd.Margin = new Thickness(-9);
            }
        }

        private Size MeasureString(TextBlock tb, string candidate)
        {
            var formattedText = new FormattedText(
                candidate,
                CultureInfo.CurrentCulture,
                System.Windows.FlowDirection.LeftToRight,
                new Typeface(tb.FontFamily, tb.FontStyle, tb.FontWeight, tb.FontStretch),
                tb.FontSize,
                Brushes.Black,
                new NumberSubstitution(),
                1);

            return new Size(formattedText.Width, formattedText.Height);
        }

        private void FullKbd_Click(object sender, RoutedEventArgs e)
        {
            ResMan.ShowFullKeyboard();
        }

        private void HideAllBrowseForm(string VisibleControlName)
        {
            pnlSetupUpDown.Visibility = Visibility.Collapsed;
            foreach (System.Windows.Controls.UserControl uc in pnlBody.Children)
            {
                if (uc.Name == VisibleControlName)
                {
                    uc.Visibility = Visibility.Visible;
                }
                else
                {
                    uc.Visibility = Visibility.Collapsed;
                }
            }
        }

        private void Nvview_ItemSelected(object sender, DevExpress.Xpf.NavBar.NavBarItemSelectedEventArgs e)
        {
            if (e.Item.Name == "nbZips")
            {
                HideAllBrowseForm("frmZipCodeBrwUC");
                frmZipCodeBrwUC.FetchData();
                lbHeading.Text = Properties.Resources.List_Zipcodes;
                pnlSetupUpDown.Visibility = Visibility.Visible;
            }

            if (e.Item.Name == "nbTax")
            {
                HideAllBrowseForm("frm_TaxBrwUC");
                frm_TaxBrwUC.FetchData();
                lbHeading.Text = Properties.Resources.List_of_Taxes;
                pnlSetupUpDown.Visibility = Visibility.Visible;
            }

            if (e.Item.Name == "nbTenderTypes")
            {
                HideAllBrowseForm("frm_TenderTypesBrwUC");
                frm_TenderTypesBrwUC.FetchData();
                lbHeading.Text = "List of Tender Types";
                frm_TenderTypesBrwUC.EnableDisableButton();
                pnlSetupUpDown.Visibility = Visibility.Visible;
            }

            if (e.Item.Name == "nbRegistration")
            {
                HideAllBrowseForm("frm_DummyBrwUC");
                lbHeading.Text = Properties.Resources.Registration;
            }

            if (e.Item.Name == "nbGeneralSetup")
            {
                HideAllBrowseForm("frm_DummyBrwUC");
                lbHeading.Text = Properties.Resources.General_Settings;
            }

            if (e.Item.Name == "nbFees")
            {
                HideAllBrowseForm("frm_FeesBrwUC");
                frm_FeesBrwUC.FetchData();
                lbHeading.Text = Properties.Resources.Fees___Charges;
                pnlSetupUpDown.Visibility = Visibility.Visible;
            }
        }

        private void NbRegistration_Click(object sender, EventArgs e)
        {
            blurGrid.Visibility = Visibility.Visible;
            frmRegistrationDlg frm_RegistrationDlg = new frmRegistrationDlg();
            try
            {
                frm_RegistrationDlg.FirstTimeCall = false;
                frm_RegistrationDlg.ShowDialog();
                if (frm_RegistrationDlg.DialogResult == true)
                {
                    if (frm_RegistrationDlg.Registered)
                    {

                        DocMessage.MsgInformation("Successful Registration, Terminating Application...");
                        System.Windows.Application.Current.Shutdown();
                    }
                }
            }
            finally
            {
                frm_RegistrationDlg.Close();
                blurGrid.Visibility = Visibility.Collapsed;
            }
        }

        private async void NbGeneralSetup_Click(object sender, EventArgs e)
        {
            CheckAccessForGeneralSettings("31z1");
            blurGrid.Visibility = Visibility.Visible;
            Administrator.frm_GeneralSetupDlg frm_GeneralSetupDlg = new Administrator.frm_GeneralSetupDlg();
            try
            {
                frm_GeneralSetupDlg.bLoad = false;
                frm_GeneralSetupDlg.FunctionOrderChangeAccess = blFunctionOrderChangeAccess;
                frm_GeneralSetupDlg.FunctionBtnAccess = blFunctionBtnAccess;
                frm_GeneralSetupDlg.ShowDialog();
            }
            finally
            {
                if (frm_GeneralSetupDlg.changeskudisplay)
                {
                    pnlCat1.Children.Clear();
                    pnlCat2.Children.Clear();
                    pnlCat3.Children.Clear();
                    pnlCat4.Children.Clear();
                    pnlCat5.Children.Clear();
                    //await LoadPOSButtons();
                    LoadPOSButtons();
                }

                if (frm_GeneralSetupDlg.SetPOSFunction)
                {

                    pnlFB.Children.Clear();
                    ArrangeVisibleFunctions();
                    DisplayFunctionButtons();
                }
            }

            frm_GeneralSetupDlg.Close();
            blurGrid.Visibility = Visibility.Collapsed;
        }

        private void CheckAccessForGeneralSettings(string scode)
        {
            blFunctionBtnAccess = false;
            blFunctionOrderChangeAccess = false;
            if (SystemVariables.CurrentUserID <= 0)
            {
                blFunctionOrderChangeAccess = true;
                blFunctionBtnAccess = true;
                return;
            }
            else
            {
                PosDataObject.Security objSecurity = new PosDataObject.Security();
                objSecurity.Connection = new SqlConnection(SystemVariables.ConnectionString);
                int result = objSecurity.IsExistsPOSAccess(SystemVariables.CurrentUserID, scode);
                if (result == 0)
                {
                    blFunctionOrderChangeAccess = false;
                    blFunctionBtnAccess = true;
                    return;
                }
                else
                {
                    blFunctionOrderChangeAccess = true;
                    blFunctionBtnAccess = true;
                    return;
                }
            }
        }

        private void CustomItemClick(string clickitem)
        {
            if (clickitem == "nbZips1")
            {
                HideAllBrowseForm("frmZipCodeBrwUC");
                frmZipCodeBrwUC.FetchData();
                lbHeading.Text = Properties.Resources.List_Zipcodes;
                pnlSetupUpDown.Visibility = Visibility.Visible;
            }

            if (clickitem == "nbTax1")
            {
                HideAllBrowseForm("frm_TaxBrwUC");
                frm_TaxBrwUC.FetchData();
                lbHeading.Text = Properties.Resources.List_of_Taxes;
                pnlSetupUpDown.Visibility = Visibility.Visible;
            }

            if (clickitem == "nbTenderTypes1")
            {
                HideAllBrowseForm("frm_TenderTypesBrwUC");
                frm_TenderTypesBrwUC.FetchData();
                lbHeading.Text = "List of Tender Types";
                frm_TenderTypesBrwUC.EnableDisableButton();
                pnlSetupUpDown.Visibility = Visibility.Visible;
            }



            if (clickitem == "nbFees1")
            {
                HideAllBrowseForm("frm_FeesBrwUC");
                frm_FeesBrwUC.FetchData();
                lbHeading.Text = Properties.Resources.Fees___Charges;
                pnlSetupUpDown.Visibility = Visibility.Visible;
            }
        }


        private void SetNavBar()
        {

            int intNavSetup = 0;


            nbTax1.Visibility = Visibility.Visible;
            nbTenderTypes1.Visibility = Visibility.Visible;
            nbFees1.Visibility = Visibility.Visible;
            nbGeneralSetup1.Visibility = Visibility.Visible;
            nbRegistration1.Visibility = Visibility.Visible;
            nbZips1.Visibility = Visibility.Visible;


            tabSetup.Height = 156;

            lbHeading.Text = "";

            if (SystemVariables.CurrentUserID <= 0)
            {
                intSetNavBarSetup = 1;
            }
            else
            {
                string ModulesRegistered = GeneralFunctions.RegisteredModules();

                if (ModulesRegistered.Contains("POS"))
                {


                    if (!SecurityPermission.AccessTaxScreen)
                    {
                        nbTax1.Visibility = Visibility.Collapsed;
                        tabSetup.Height = tabSetup.Height - 26;
                    }
                    if (!SecurityPermission.AccessTenderTypeScreen)
                    {
                        nbTenderTypes1.Visibility = Visibility.Collapsed;
                        tabSetup.Height = tabSetup.Height - 26;
                    }

                    if (SecurityPermission.AccessTaxScreen)
                    {
                        if (intNavSetup == 0) intNavSetup = 1;
                        if (intSetNavBarSetup == 0) intSetNavBarSetup = 1;
                    }
                    if (SecurityPermission.AccessTenderTypeScreen)
                    {
                        if (intNavSetup == 0) intNavSetup = 1;
                        if (intSetNavBarSetup == 0) intSetNavBarSetup = 2;
                    }


                }

            }

            if (intSetNavBarSetup == 0)
            {
                tpSetup.Visibility = Visibility.Collapsed;
            }
            else
            {
                tabSetup.Visibility = Visibility.Visible;
            }
        }

        private void Itm_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {

            bool blProceed = true;
            DockPanel dp = sender as DockPanel;
            WrapPanel wp = dp.Parent as WrapPanel;

            foreach (UIElement uI in wp.Children)
            {

                if (((uI as DockPanel).Tag.ToString() == "1") && ((uI as DockPanel).Name == dp.Name))
                {
                    blProceed = false;
                    break;
                }
            }

            if (blProceed)
            {
                foreach (UIElement uI in wp.Children)
                {
                    if ((uI as DockPanel).Name == dp.Name)
                    {
                        (uI as DockPanel).Tag = "1";
                        (uI as DockPanel).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#364A5D"));
                        foreach (UIElement ulsub in (uI as DockPanel).Children)
                        {
                            if (ulsub is Grid)
                            {
                                foreach (UIElement cr in (ulsub as Grid).Children)
                                {
                                    if (cr is TextBlock)
                                    {
                                        (cr as TextBlock).FontFamily = this.FindResource("OSSemiBold") as FontFamily;
                                        (cr as TextBlock).Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#6EC1DA"));
                                    }

                                    if (cr is Image)
                                    {
                                        (cr as Image).Visibility = Visibility.Visible;
                                    }
                                }
                            }

                        }

                    }
                    else
                    {
                        (uI as DockPanel).Tag = "0";

                        (uI as DockPanel).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#2F3A4D"));
                        foreach (UIElement ulsub in (uI as DockPanel).Children)
                        {
                            if (ulsub is Grid)
                            {
                                foreach (UIElement cr in (ulsub as Grid).Children)
                                {
                                    if (cr is TextBlock)
                                    {
                                        (cr as TextBlock).FontFamily = this.FindResource("OSRegular") as FontFamily;
                                        (cr as TextBlock).Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FFFFFF"));
                                    }

                                    if (cr is Image)
                                    {
                                        (cr as Image).Visibility = Visibility.Collapsed;
                                    }
                                }
                            }

                        }
                    }
                }

                CustomItemClick(dp.Name);
            }


        }

        private void BtnSetupUP_Click(object sender, RoutedEventArgs e)
        {
            if (lbHeading.Text == Properties.Resources.List_of_Taxes)
            {
                if ((frm_TaxBrwUC.grdTax.ItemsSource as DataTable).Rows.Count == 0) return;
                if (frm_TaxBrwUC.gridView1.FocusedRowHandle == 0) return;
                frm_TaxBrwUC.gridView1.FocusedRowHandle = frm_TaxBrwUC.gridView1.FocusedRowHandle - 1;
                //EnableDisableButton(btnSetupUP, btnSetupDOWN, frm_TaxBrwUC.grdTax);
            }
            if (lbHeading.Text == "List of Tender Types")
            {
                if ((frm_TenderTypesBrwUC.grdTenderTypes.ItemsSource as DataTable).Rows.Count == 0) return;
                if (frm_TenderTypesBrwUC.gridView1.FocusedRowHandle == 0) return;
                frm_TenderTypesBrwUC.gridView1.FocusedRowHandle = frm_TenderTypesBrwUC.gridView1.FocusedRowHandle - 1;
                //EnableDisableButton(btnSetupUP, btnSetupDOWN, frm_TenderTypesBrwUC.grdTenderTypes);
            }
            if (lbHeading.Text == Properties.Resources.Fees___Charges)
            {
                if ((frm_FeesBrwUC.grdD.ItemsSource as DataTable).Rows.Count == 0) return;
                if (frm_FeesBrwUC.gridView1.FocusedRowHandle == 0) return;
                frm_FeesBrwUC.gridView1.FocusedRowHandle = frm_FeesBrwUC.gridView1.FocusedRowHandle - 1;
                //EnableDisableButton(btnSetupUP, btnSetupDOWN, frm_FeesBrwUC.grdD);
            }
            if (lbHeading.Text == Properties.Resources.List_Zipcodes)
            {
                if ((frmZipCodeBrwUC.grdZip.ItemsSource as DataTable).Rows.Count == 0) return;
                if (frmZipCodeBrwUC.gridView1.FocusedRowHandle == 0) return;
                frmZipCodeBrwUC.gridView1.FocusedRowHandle = frmZipCodeBrwUC.gridView1.FocusedRowHandle - 1;
                //EnableDisableButton(btnSetupUP, btnSetupDOWN, frmZipCodeBrwUC.grdZip);
            }
        }

        private void BtnSetupDOWN_Click(object sender, RoutedEventArgs e)
        {
            if (lbHeading.Text == Properties.Resources.List_of_Taxes)
            {
                if ((frm_TaxBrwUC.grdTax.ItemsSource as DataTable).Rows.Count == 0) return;
                if (frm_TaxBrwUC.gridView1.FocusedRowHandle == (frm_TaxBrwUC.grdTax.ItemsSource as DataTable).Rows.Count - 1) return;
                frm_TaxBrwUC.gridView1.FocusedRowHandle = frm_TaxBrwUC.gridView1.FocusedRowHandle + 1;
                //EnableDisableButton(btnSetupUP, btnSetupDOWN, frm_TaxBrwUC.grdTax);
            }
            if (lbHeading.Text == "List of Tender Types")
            {
                if ((frm_TenderTypesBrwUC.grdTenderTypes.ItemsSource as DataTable).Rows.Count == 0) return;
                if (frm_TenderTypesBrwUC.gridView1.FocusedRowHandle == (frm_TenderTypesBrwUC.grdTenderTypes.ItemsSource as DataTable).Rows.Count - 1) return;
                frm_TenderTypesBrwUC.gridView1.FocusedRowHandle = frm_TenderTypesBrwUC.gridView1.FocusedRowHandle + 1;
                //EnableDisableButton(btnSetupUP, btnSetupDOWN, frm_TenderTypesBrwUC.grdTenderTypes);
            }
            if (lbHeading.Text == Properties.Resources.Fees___Charges)
            {
                if ((frm_FeesBrwUC.grdD.ItemsSource as DataTable).Rows.Count == 0) return;
                if (frm_FeesBrwUC.gridView1.FocusedRowHandle == (frm_FeesBrwUC.grdD.ItemsSource as DataTable).Rows.Count - 1) return;
                frm_FeesBrwUC.gridView1.FocusedRowHandle = frm_FeesBrwUC.gridView1.FocusedRowHandle + 1;
                //EnableDisableButton(btnSetupUP, btnSetupDOWN, frm_FeesBrwUC.grdD);
            }
            if (lbHeading.Text == Properties.Resources.List_Zipcodes)
            {
                if ((frmZipCodeBrwUC.grdZip.ItemsSource as DataTable).Rows.Count == 0) return;
                if (frmZipCodeBrwUC.gridView1.FocusedRowHandle == (frmZipCodeBrwUC.grdZip.ItemsSource as DataTable).Rows.Count - 1) return;
                frmZipCodeBrwUC.gridView1.FocusedRowHandle = frmZipCodeBrwUC.gridView1.FocusedRowHandle + 1;
                //EnableDisableButton(btnSetupUP, btnSetupDOWN, frmZipCodeBrwUC.grdZip);
            }
        }

        private void CmbStore_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            DevExpress.Xpf.Editors.ComboBoxEdit editor = sender as DevExpress.Xpf.Editors.ComboBoxEdit;
            if (editor != null)
            {
                editor.IsPopupOpen = true;
                editor.ShowPopup();
                e.Handled = true;
            }
        }

        private async void NbGeneralSetup1_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            pnlSetupUpDown.Visibility = Visibility.Collapsed;
            DockPanel dp = sender as DockPanel;
            WrapPanel wp = dp.Parent as WrapPanel;

            foreach (UIElement uI in wp.Children)
            {
                if ((uI as DockPanel).Name == dp.Name)
                {
                    (uI as DockPanel).Tag = "1";
                    (uI as DockPanel).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#364A5D"));
                    foreach (UIElement ulsub in (uI as DockPanel).Children)
                    {
                        if (ulsub is Grid)
                        {
                            foreach (UIElement cr in (ulsub as Grid).Children)
                            {
                                if (cr is TextBlock)
                                {
                                    (cr as TextBlock).FontFamily = this.FindResource("OSSemiBold") as FontFamily;
                                    (cr as TextBlock).Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#6EC1DA"));
                                }

                                if (cr is Image)
                                {
                                    (cr as Image).Visibility = Visibility.Visible;
                                }
                            }
                        }

                    }

                }
                else
                {
                    (uI as DockPanel).Tag = "0";

                    (uI as DockPanel).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#2F3A4D"));
                    foreach (UIElement ulsub in (uI as DockPanel).Children)
                    {
                        if (ulsub is Grid)
                        {
                            foreach (UIElement cr in (ulsub as Grid).Children)
                            {
                                if (cr is TextBlock)
                                {
                                    (cr as TextBlock).FontFamily = this.FindResource("OSRegular") as FontFamily;
                                    (cr as TextBlock).Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FFFFFF"));
                                }

                                if (cr is Image)
                                {
                                    (cr as Image).Visibility = Visibility.Collapsed;
                                }
                            }
                        }

                    }
                }
            }

            HideAllBrowseForm("frm_DummyBrwUC");
            lbHeading.Text = Properties.Resources.General_Settings;

            CheckAccessForGeneralSettings("31z1");
            blurGrid.Visibility = Visibility.Visible;
            Administrator.frm_GeneralSetupDlg frm_GeneralSetupDlg = new Administrator.frm_GeneralSetupDlg();
            try
            {
                frm_GeneralSetupDlg.bLoad = false;
                frm_GeneralSetupDlg.FunctionOrderChangeAccess = blFunctionOrderChangeAccess;
                frm_GeneralSetupDlg.FunctionBtnAccess = blFunctionBtnAccess;
                frm_GeneralSetupDlg.ShowDialog();
            }
            finally
            {
                if (frm_GeneralSetupDlg.changeskudisplay)
                {
                    pnlCat1.Children.Clear();
                    pnlCat2.Children.Clear();
                    pnlCat3.Children.Clear();
                    pnlCat4.Children.Clear();
                    pnlCat5.Children.Clear();
                    //await LoadPOSButtons();
                    LoadPOSButtons();
                }

                if (frm_GeneralSetupDlg.SetPOSFunction)
                {

                    pnlFB.Children.Clear();
                    ArrangeVisibleFunctions();
                    DisplayFunctionButtons();

                    SetServiceTypeButtonColor();
                }
            }

            frm_GeneralSetupDlg.Close();
            blurGrid.Visibility = Visibility.Collapsed;
        }

        private void NbRegistration1_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            pnlSetupUpDown.Visibility = Visibility.Collapsed;
            DockPanel dp = sender as DockPanel;
            WrapPanel wp = dp.Parent as WrapPanel;

            foreach (UIElement uI in wp.Children)
            {
                if ((uI as DockPanel).Name == dp.Name)
                {
                    (uI as DockPanel).Tag = "1";
                    (uI as DockPanel).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#364A5D"));
                    foreach (UIElement ulsub in (uI as DockPanel).Children)
                    {
                        if (ulsub is Grid)
                        {
                            foreach (UIElement cr in (ulsub as Grid).Children)
                            {
                                if (cr is TextBlock)
                                {
                                    (cr as TextBlock).FontFamily = this.FindResource("OSSemiBold") as FontFamily;
                                    (cr as TextBlock).Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#6EC1DA"));
                                }

                                if (cr is Image)
                                {
                                    (cr as Image).Visibility = Visibility.Visible;
                                }
                            }
                        }

                    }

                }
                else
                {
                    (uI as DockPanel).Tag = "0";

                    (uI as DockPanel).Background = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#2F3A4D"));
                    foreach (UIElement ulsub in (uI as DockPanel).Children)
                    {
                        if (ulsub is Grid)
                        {
                            foreach (UIElement cr in (ulsub as Grid).Children)
                            {
                                if (cr is TextBlock)
                                {
                                    (cr as TextBlock).FontFamily = this.FindResource("OSRegular") as FontFamily;
                                    (cr as TextBlock).Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FFFFFF"));
                                }

                                if (cr is Image)
                                {
                                    (cr as Image).Visibility = Visibility.Collapsed;
                                }
                            }
                        }

                    }
                }
            }

            HideAllBrowseForm("frm_DummyBrwUC");
            lbHeading.Text = Properties.Resources.Registration;

            blurGrid.Visibility = Visibility.Visible;
            frmRegistrationDlg frm_RegistrationDlg = new frmRegistrationDlg();
            try
            {
                frm_RegistrationDlg.FirstTimeCall = false;
                frm_RegistrationDlg.ShowDialog();
                if (frm_RegistrationDlg.DialogResult == true)
                {
                    if (frm_RegistrationDlg.Registered)
                    {

                        DocMessage.MsgInformation("Successful Registration, Terminating Application...");
                        System.Windows.Application.Current.Shutdown();
                    }
                }
            }
            finally
            {
                frm_RegistrationDlg.Close();
                blurGrid.Visibility = Visibility.Collapsed;
            }
        }

        private async void BtnAddProduct_Click(object sender, RoutedEventArgs e)
        {
            bool flag;
            flag = (SecurityPermission.AcssProductAdd ? false : SystemVariables.CurrentUserID > 0);
            if (!flag)
            {
                this.blurGrid.Visibility = System.Windows.Visibility.Visible;
                int newID = 0;
                AddProductWindow addProductWindow = new AddProductWindow();
                try
                {
                    addProductWindow.AddFromPOS = true;
                    addProductWindow.Duplicate = false;
                    addProductWindow.ID = 0;
                    addProductWindow.ShowDialog();
                    newID = addProductWindow.NewID;
                    if (addProductWindow.PostData)
                    {
                        this.FetchItemData();
                    }
                }
                finally
                {
                    addProductWindow.Close();
                    this.blurGrid.Visibility = System.Windows.Visibility.Collapsed;
                }
                if (newID > 0)
                {
                    await this.SetCurrentRowProduct(newID);
                }
            }
            else
            {
                DocMessage.MsgPermission();
            }
        }

        private async void BtnEditProduct_Click(object sender, RoutedEventArgs e)
        {
            if ((!SecurityPermission.AcssProductEdit) && (SystemVariables.CurrentUserID > 0))
            {
                DocMessage.MsgPermission();
                return;
            }
            await EditProcess();
        }

        private async void BtnPrintBarCode_Click(object sender, RoutedEventArgs e)
        {
            await GeneralFunctions.PrintItemLabel(this, false);
        }

        public async Task<int> ReturnRowID()
        {
            int intRowID = -1;
            int intRecID = -1;
            if ((grdProduct.ItemsSource as DataTable).Rows.Count == 0) return intRecID;
            if (PgridView1.FocusedRowHandle < 0) return intRecID;
            intRowID = PgridView1.FocusedRowHandle;
            intRecID = GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(intRowID, grdProduct, colIMID)));
            return intRecID;
        }

        private async Task EditProcess()
        {
            int intNewRecID = 0;
            int intRowID = -1;
            intRowID = PgridView1.FocusedRowHandle;
            if ((grdProduct.ItemsSource as DataTable).Rows.Count == 0)
            {
                return;
            }

            if ((GeneralFunctions.GetCellValue(intRowID, grdProduct, colIMType) == "Service"))
            {
                blurGrid.Visibility = Visibility.Visible;
                frm_ServiceDlg frm_ProductDlg = new frm_ServiceDlg();
                try
                {
                    frm_ProductDlg.ID = await ReturnRowID();
                    if (frm_ProductDlg.ID > 0)
                    {
                        frm_ProductDlg.Duplicate = false;
                        frm_ProductDlg.AddFromPOS = true;
                        frm_ProductDlg.ShowDialog();
                        intNewRecID = frm_ProductDlg.ID;
                        if (frm_ProductDlg.PostData)
                        {
                            frm_ProductBrw.FetchData(true, frm_ProductBrw.cmbFilter.EditValue.ToString());
                        }
                    }
                }
                finally
                {
                    frm_ProductDlg.Close();
                    blurGrid.Visibility = Visibility.Collapsed;
                }
            }
            else
            {
                blurGrid.Visibility = Visibility.Visible;
                AddProductWindow frm_ProductDlg = new AddProductWindow();
                try
                {
                    frm_ProductDlg.ID = await ReturnRowID();
                    if (frm_ProductDlg.ID > 0)
                    {
                        frm_ProductDlg.Duplicate = false;
                        frm_ProductDlg.AddFromPOS = true;
                        frm_ProductDlg.ShowDialog();
                        intNewRecID = frm_ProductDlg.ID;
                        if (frm_ProductDlg.PostData)
                        {
                            //frm_ProductBrw.FetchData(true, frm_ProductBrw.cmbFilter.EditValue.ToString());
                            FetchItemData();
                        }
                    }
                }
                finally
                {
                    frm_ProductDlg.Close();
                    blurGrid.Visibility = Visibility.Collapsed;
                }
            }
            await SetCurrentRowProduct(intNewRecID);
        }


        public async Task SetCurrentRowProduct(int RecordID)
        {
            int intRecID = 0;
            int intColCtr = 0;
            for (intColCtr = 0; intColCtr < (grdProduct.ItemsSource as DataTable).Rows.Count; intColCtr++)
            {
                intRecID = GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(intColCtr, grdProduct, colIMID)));
                if (RecordID == intRecID) break;
            }
            if (intColCtr >= 0) PgridView1.FocusedRowHandle = intColCtr;
        }

        private async Task AddtoCartFromFind(string txtFind)
        {
            bool blFindBySKU = false;
            bool blFindByAltSKU = false;
            bool blFindByAltSKU2 = false;
            bool blFindByUPC = false;
            string SKU = "";

            try
            {
                if (blReturnItem) return;
                if (txtFind == "") return;

                if ((intCustID == 0) && (Settings.CustomerInfo == 2))
                {
                    if (dtblPOS.Rows.Count == 0)
                    {
                        System.Media.SystemSounds.Hand.Play();
                        new MessageBoxWindow().Show(Properties.Resources.Enter_valid_customer_before_ringing_item, "POS", MessageBoxButton.OK, MessageBoxImage.Information);
                        GeneralFunctions.SetFocus(txtCust);
                        return;
                    }
                }

                if (IfExistsSKU(txtFind) == 1)
                {
                    blFindBySKU = true;
                    SKU = txtFind;
                    if (IfActiveProduct(SKU) == 0)
                    {
                        System.Media.SystemSounds.Hand.Play();
                        new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }
                else
                {
                    blFindBySKU = false;
                }
                if (!blFindBySKU)
                {
                    if (IfExistsAltSKU(txtFind) == 1)
                    {
                        blFindByAltSKU = true;
                        SKU = SKUfromAltSKU(txtFind);
                        if (IfActiveProduct(SKU) == 0)
                        {
                            System.Media.SystemSounds.Hand.Play();
                            new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                    else
                    {
                        blFindByAltSKU = false;
                    }

                    if (!blFindByAltSKU)
                    {
                        if (IfExistsAltSKU2(txtFind) == 1)
                        {
                            blFindByAltSKU2 = true;
                            SKU = SKUfromAltSKU2(txtFind);
                            if (IfActiveProduct(SKU) == 0)
                            {
                                System.Media.SystemSounds.Hand.Play();
                                new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                return;
                            }
                        }
                        else
                        {
                            blFindByAltSKU2 = false;
                        }

                        if (!blFindByAltSKU2)
                        {
                            if (IfExistsUPC(txtFind) == 1)
                            {
                                blFindByUPC = true;
                                SKU = SKUfromUPC(txtFind);
                                if (IfActiveProduct(SKU) == 0)
                                {
                                    System.Media.SystemSounds.Hand.Play();
                                    new MessageBoxWindow().Show(Properties.Resources.Inactive_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                    return;
                                }
                            }
                            else
                            {
                                blFindByUPC = false;
                            }
                        }
                    }

                    
                }
                bool refWFlag = false;
                string refSKU = "";
                string refWPrice = "0";
                string strSKU = "";
                double isvalidprice = 0;

                // 03-15-2013    Add both UPC A and EAN 13 barcode

                if ((Settings.NotReadBarcodeCheckDigit == "N" ? ((txtFind.Length == 12) || (txtFind.Length == 13)) : ((txtFind.Length == 11) || (txtFind.Length == 12))) && (txtFind.Substring(0, 1) == Settings.EmbeddedBarcodeNumberSystemChar)) // && (txtFind.Substring(0, 1) == "2")
                {
                    IsWeighedItem(txtFind, ref refWFlag, ref refSKU, ref refWPrice);

                    if (refWFlag)
                    {
                        strSKU = refSKU;
                        try
                        {
                            isvalidprice = GeneralFunctions.fnDouble(refWPrice);
                        }
                        catch
                        {
                            System.Media.SystemSounds.Hand.Play();
                            new MessageBoxWindow().Show(Properties.Resources.Invalid_embedded_bar_code_product_price,
                                Properties.Resources.Embedded_bar_code_Item_Price_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                    else
                    {
                        System.Media.SystemSounds.Hand.Play();
                        new MessageBoxWindow().Show(Properties.Resources.Invalid_embedded_bar_code_product, Properties.Resources.SKU_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }
                else
                    strSKU = SKU;

                if (strCurrentServiceType != "Sales")
                {

                    if (refWFlag) return;
                }

                if (IfExistsSKU(strSKU) == 1)
                {


                    if (!GeneralFunctions.ProceedFromItemImage(GetProductID(strSKU))) return;

                    int MixMatchID = 0;
                    string MixMatchFlag = "N";
                    string MixMatchCat = "";
                    string MixMatchType = "";
                    double MixMatchVal = 0;
                    int MixMatchPlus = 0;
                    double MixMatchPartPrice = 0;
                    bool MixMatchApplicableLast = false;

                    int SaleID = 0;
                    double SalePrice = 0;
                    DataTable dtblBuyGetFree = new DataTable();
                    int TBuyNFreeID = 0;
                    int TBuyNFreeQty = 0;
                    bool TBuyNFreeProceed = false;
                    ArrayList TBuyNFree_ItemToBeDeletedFirst = new ArrayList();

                    /// For Sale, before adding an item into cart, first check if active sale price is present or not. If not present then check Mix n Match. 
                    /// If active Mix n Match found, then cart added with Mix n Match data.
                    /// If no active Mix n Match found then check for Buy n Get Free promotion, if satisfied then Buy n Get Free data will the added into cart


                    if (strCurrentServiceType == "Sales")
                    {
                        string itemexpiredt = GetProductExpiry(strSKU);
                        if (itemexpiredt != "")
                        {
                            DisplayItemExpiryAlert(itemexpiredt);
                        }
                    }


                    if (strCurrentServiceType == "Sales")
                    {

                        if (!refWFlag)
                        {
                            FetchActiveSale(GetProductID(strSKU), ref SaleID, ref SalePrice);

                            if (SaleID == 0)
                            {
                                PosDataObject.POS objPOS = new PosDataObject.POS();
                                objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                MixMatchID = objPOS.ActiveMixNMatch(GetProductID(strSKU));
                            }
                            if (MixMatchID > 0)
                            {
                                for (int lp = 1; lp <= intPressQty; lp++)
                                {
                                    await AddSKURecordForMixMatch(strSKU, refWFlag, isvalidprice);
                                }
                            }
                            else
                            {
                                dtblBuyGetFree = CheckIfActiveBuyNGetFree(GetProductID(strSKU));

                                if (dtblBuyGetFree.Rows.Count > 0)
                                {
                                    TBuyNFreeProceed = CheckCartForProceedBuyNGetFree(GetProductID(strSKU), dtblBuyGetFree, ref TBuyNFreeID, ref TBuyNFreeQty, ref TBuyNFree_ItemToBeDeletedFirst);
                                }
                                else
                                {
                                    TBuyNFreeProceed = false;
                                }

                                if (TBuyNFreeProceed)
                                {
                                    AddBuyNGetFreeQty(GetProductID(strSKU), GetProductName(GetProductID(strSKU)), TBuyNFreeID, TBuyNFreeQty, TBuyNFree_ItemToBeDeletedFirst, SaleID, SalePrice);
                                }
                                else
                                {
                                    await AddSKURecord(strSKU, refWFlag, isvalidprice);
                                }
                            }
                        }
                        if (refWFlag)
                        {
                            await AddSKURecordForEmbeddedProduct(strSKU, refWFlag, isvalidprice);
                        }


                    }
                    else
                    {
                        await AddSKURecord(strSKU, refWFlag, isvalidprice);
                    }

                    if (TBuyNFreeProceed)
                    {
                        // Automatic Discount Add in Cart
                        if (strCurrentServiceType == "Sales") await AddAutoDiscountInCart(GetProductID(strSKU), SaleID > 0 ? false : true);
                        //  Automatic MixnMatch
                        if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();
                        // Automatic Fees Add in Cart
                        await AddAutoFeesInCart(GetProductID(strSKU));
                    }
                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;

                    for (int j = 0; j < dtblPOS.Rows.Count; j++)
                    {
                        // gridControl1.Columns["DISPLAY_RATE"].Cells[1].PreferredWidth = 150;
                        // gridControl1.Columns["colDispQty"].Width = 70;
                        //         gridControl1.Columns["colDispQty1"].Width = 70;
                        //gridView1.Columns["productStatus"].Width = 50;
                        //gridControl1.Cells[0].PreferredWidthType = WidthType.Fixed;
                        //    tbl.Rows[j].Cells[1].PreferredWidth = 150;

                    }


                    ToggleWithEmptyCart();
                    GetTotal();
                    ShowTax();
                    ResetQty();
                    txtSearch.Text = "";
                    GeneralFunctions.SetFocus(txtSearch);


                    //gridControl1.RefreshData();
                }
                else
                {
                    if (((SecurityPermission.AcssProductAdd) && (SystemVariables.CurrentUserID > 0)) ||
                        (SystemVariables.CurrentUserID <= 0))
                    {
                        if (txtFind != "")
                        {
                            System.Media.SystemSounds.Hand.Play();
                            if (new MessageBoxWindow().Show(Properties.Resources.This_is_a_new_item_ + "\n" + Properties.Resources.Do_you_want_to_add_it_to_the_system_, Properties.Resources.New_Item, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                            {
                                int CatID = 0;
                                string DisplayPOS = "N";
                                int intNewRecID = 0;
                                AddProductWindow frm_ProductDlg = new AddProductWindow();
                                try
                                {

                                    frm_ProductDlg.AddSKU = GeneralFunctions.CheckLengthOfString(txtFind, 16); 
                                    frm_ProductDlg.AddFromPOS = true;
                                    frm_ProductDlg.Duplicate = false;
                                    frm_ProductDlg.ID = 0;
                                    blurGrid.Visibility = Visibility.Visible;
                                    frm_ProductDlg.ShowDialog();
                                    blurGrid.Visibility = Visibility.Collapsed;
                                    intNewRecID = frm_ProductDlg.NewID;
                                    DisplayPOS = frm_ProductDlg.AddDisplayItemInPOS;
                                    CatID = frm_ProductDlg.AddCategory;
                                }
                                finally
                                {
                                }

                                if (intNewRecID > 0)
                                {
                                    //pnlProdtMain.Children.Clear();
                                    frm_ProductBrw = new POSSection.frmProductBrwUC();
                                    frm_ProductBrw.bar1.Visibility = Visibility.Collapsed;
                                    frm_ProductBrw.bar2.Visibility = Visibility.Collapsed;
                                    frm_ProductBrw.cmbFilter.EditValue = "Active Products";
                                    frm_ProductBrw.IsPOS = true;
                                    frm_ProductBrw.FetchData(true, "Active Products");
                                    frm_ProductBrw.SetDecimalPlace();
                                    blfetchProduct = true;
                                    /// Set UP/Down Button to move cursor through Cart Item
                                    EnableDisableButton(btnUpProduct, btnDownProduct, grdProduct);

                                    if (DisplayPOS == "Y")
                                    {
                                        SetNewPOSItem(CatID, intNewRecID);
                                    }

                                    await AddSKURecord(txtFind, false, 0);



                                    GetTotal();
                                    ShowTax();
                                    ResetQty();
                                    txtSearch.Text = "";
                                    FetchItemData();
                                }
                                else
                                {
                                    blleavenotoscan = true;
                                }
                            }
                            else
                            {
                                blleavenotoscan = true;
                            }
                        }
                    }
                }

                (Window.GetWindow(this) as MainWindow).SearchMemberTextBox.Text = "Find Item";
                txtSKU.Text = "";
                txtQty.Text = intPressQty.ToString();
                //txtSKU.BackColor = Color.FromArgb(247, 245, 241);
                /// Set UP/Down Button to move cursor through Cart Item
                EnableDisableButton(btnUP, btnDown, gridControl1);
                blleave = true;
            }
            finally
            {
                txtSKU.Focus();
            }

        }



        private void LbCustName_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if ((SecurityPermission.AcssCustomerEdit) || (SystemVariables.CurrentUserID <= 0))
            {
                int intNewRecID = 0;

                blurGrid.Visibility = Visibility.Visible;
                frm_CustomerDlg frm_CustomerDlg = new frm_CustomerDlg();
                try
                {
                    frm_CustomerDlg.ID = intCustID;
                    if (frm_CustomerDlg.ID > 0)
                    {
                        //frm_CustomerDlg.ShowData();
                        frm_CustomerDlg.Duplicate = false;
                        frm_CustomerDlg.AddFromPOS = false;
                        frm_CustomerDlg.bPOS = true;
                        if (txtCustStore.Text.Trim() == "")
                        {
                            frm_CustomerDlg.OtherStoreRecord = false;
                        }
                        else
                        {
                            frm_CustomerDlg.OtherStoreRecord = (txtCustStore.Text.Trim() == Settings.StoreCode) ? false : true;
                        }
                        //frm_CustomerDlg.BrowseFormUC = this;
                        frm_CustomerDlg.ShowDialog();
                        intNewRecID = frm_CustomerDlg.ID;
                    }
                }
                finally
                {
                    blurGrid.Visibility = Visibility.Collapsed;
                }


                blChangeCustomer = true;
                string refTaxExempt = "";
                string refDiscountLevel = "";
                string refTaxID = "";
                string refStoreCr = "";
                string refCID = "";
                string refCName = "";
                string refCAdd = "";
                double dblBalance = 0;
                string refARCredit = "";
                string refPOSNotes = "";

                int refDTaxID = 0;
                string refDTax = "";
                double refDTaxRate = 0;
                int refDTaxType = 0;

                intCustID = GetCustID();

                FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd,
                    ref refTaxExempt, ref refDiscountLevel, ref refTaxID, ref refStoreCr, ref refARCredit,
                    ref refPOSNotes, ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);

                CustDTaxID = refDTaxID;
                CustDTaxName = refDTax;
                CustDTaxRate = refDTaxRate;
                CustDTaxType = refDTaxType;

                strTaxExempt = refTaxExempt;
                strDiscountLevel = refDiscountLevel;
                if (strDiscountLevel == "") strDiscountLevel = "A";
                dblBalance = GetAccountBalance(intCustID);
                txtCust.Text = refCID;
                //lbCustID.Text = "Customer ID : " + refCID;
                strCustomerID = refCID;
                lbCustName.Text = refCName;
                //DisplayPoleText(2, "N", "N", "welcome", refCName);

                //lbCustAddress.Text = refCAdd;
                //ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                //lbCustNotes.Text = refPOSNotes;
                blCustNotes = refPOSNotes != "";
                // ShowCustomerPhoto();
                FetchCustomerNote("", "Customer", intCustID, DateTime.Today.Year, DateTime.Today.Month);
                //if (blCustNotes) lbcustinfo2.Text = "Check 'Cust Notes' Apps";
                dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                dblCustAcctBalance = dblBalance;
                RearrangeProductAsCustomerChange();

                int i = -1;
                foreach (DataRowView dr in dtblPOS.DefaultView)
                {
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                    || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                    i++;
                    AddAutoDiscountInCart_OnCustomerChange(GeneralFunctions.fnInt32(dr["ID"].ToString()), GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) > 0 ? false : true, i);
                }
                SetCartDisplay();
                GetTotal();
                ShowTax();
                ResetQty();
                //Block
                /*
                if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                {
                    int fval = gridView1.FocusedRowHandle;
                    //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);

                    SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), numSubTotal.Value, numDiscount.Value, numTax.Value, numTotal.Value, dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
                }*/


            }
            else
            {
                DocMessage.MsgPermission();
            }
        }

        private void ToggleWithEmptyCart()
        {
            if ((gridControl1.ItemsSource as DataTable).Rows.Count > 0)
            {
                EmptyCart.Visibility = Visibility.Collapsed;
                gridControl1.Visibility = Visibility.Visible;
            }
            else
            {
                gridControl1.Visibility = Visibility.Collapsed;
                EmptyCart.Visibility = Visibility.Visible;
            }
        }

        private void UserControl_GotFocus(object sender, RoutedEventArgs e)
        {
            if (userControlHasFocus == true) e.Handled = true;
            else userControlHasFocus = true;


        }

        private void UserControl_LostFocus(object sender, RoutedEventArgs e)
        {
            var focused_element = FocusManager.GetFocusedElement(System.Windows.Application.Current.Windows.OfType<Window>().FirstOrDefault(x => x.IsActive));
            var parent = (focused_element as FrameworkElement).TryFindParent<POSControl>();

            if (parent != this) userControlHasFocus = false;
        }

        private async void BtnPlus_Click(object sender, RoutedEventArgs e)
        {
            await btnAddQtyClick(sender, e);
        }

        private async void BtnMinus_Click(object sender, RoutedEventArgs e)
        {
            double intQty = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridControl1, colQty));
            if (!blReturnItem)
            {
                if (intQty == 1)
                {
                    btnDelete_Click(btnDelete, new RoutedEventArgs());
                }
                else
                {
                    await btnMinusQtyClick(sender, e);
                }
            }
            else
            {
                await btnMinusQtyClick(sender, e);
            }

        }

        private async void BtnRowDelete_Click(object sender, RoutedEventArgs e)
        {
            btnDelete_Click(btnDelete, new RoutedEventArgs());
        }

        private void BtnDelete1_Click(object sender, RoutedEventArgs e)
        {
            if (lbQuickTenderOutstanding.Visibility == Visibility.Visible)
            {
                dblTenderQT = 0;
                lbQuickTenderOutstanding.Visibility = Visibility.Collapsed;

                return;
            }


            if ((gridControl1.ItemsSource as DataTable).Rows.Count == 0) return;

            if (!CheckFunctionButton("31n"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            dtblPOS.Rows.Clear();
           // dtblDummyPOS.Rows.Clear();

            ToggleWithEmptyCart();

            if (strCurrentServiceType == "Sales") AddAutoMixNMatch();
            GetTotal();
            ShowTax();
            ResetQty();
            EnableDisableButton(btnUP, btnDown, gridControl1);

            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                int fval = gridView1.FocusedRowHandle;
                if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);
                SecondMonitor.ClearWeightInfo();
                SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), double.Parse(numSubTotal.Text), double.Parse(numDiscount.Text), double.Parse(numTax.Text), double.Parse(numTotal.Text), dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
            }
        }

        private void Button_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (lbShowHide.Text == "Hide")
            {
                grdFB.Height = 0.0;
                lbShowHide.Text = "Show";
                imgshow1.Visibility = Visibility.Visible;
                imghide1.Visibility = Visibility.Hidden;
            }
            else
            {
                grdFB.Height = 100.0;
                lbShowHide.Text = "Hide";
                imgshow1.Visibility = Visibility.Hidden;
                imghide1.Visibility = Visibility.Visible;
            }
        }

        private void BtnECHeader_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            menuGrid.Visibility = Visibility.Visible;
        }

        private bool blSearchModifierFlag = false;
        private bool blSearchItemFlag = false;
        private bool blHeadingDisplayFlag = false;
        private string strSearchItemText = "";
        private async void BtnBack_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (pnlMenuHeaderD.Visibility == Visibility.Visible)
            {
                pnlMenuHeaderD.Visibility = Visibility.Collapsed;
                pnlMenuHeader.Visibility = Visibility.Visible;
            }
            //grdMain.Visibility = Visibility.Visible;
            //grdTables.Visibility = Visibility.Collapsed;
            //grdBarTabs.Visibility = Visibility.Collapsed;
            //grdDelivery.Visibility = Visibility.Collapsed;

            if (!blSearchModifierFlag)
            {
                if (tcPOS.SelectedIndex != 0) tcPOS.SelectedIndex = 0;
                txtSearch.InfoText = "Search Items";
                txtSearch.Text = "";
            }

            if (blSearchItemFlag)
            {
                if (blOnlyItem)
                {
                    blSearchItemFlag = false;
                    if (!blHeadingDisplayFlag)
                    {
                        pnlCategory.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        pnlCategory.Visibility = Visibility.Visible;
                    }
                    await LoadPOSItemsOnly(currentSearchCategory, currentSearchCategory.CategoryID);
                }
                else
                {
                    if (!blHeadingDisplayFlag)
                    {
                        pnlCategory.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        pnlCategory.Visibility = Visibility.Visible;
                    }
                     LoadPOSButtons();
                }
                strSearchItemText = "";
                blSearchItemFlag = false;
                blHeadingDisplayFlag = false;
            }
            else
            {
                if (!blOnlyItem)
                {
                    if (ParentCategoryID == 0) return;
                    CurrentParentCategoryLevel = CurrentParentCategoryLevel - 1;
                    if (CurrentParentCategoryLevel == 1)
                    {
                        ParentCategoryID = 0;
                        pnlCategory.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        PosDataObject.POS objpos = new PosDataObject.POS();
                        objpos.Connection = SystemVariables.Conn;
                        ParentCategoryID = objpos.GetParentCategoryID(ParentCategoryID);
                        if (ParentCategoryID > 0) pnlCategory.Visibility = Visibility.Visible;
                        lbCategory.Text = objpos.GetParentCategoryName(ParentCategoryID);
                    }

                   LoadPOSButtons();
                }
                else
                {
                    blOnlyItem = false;
                    if (ParentCategoryID == 0)
                    {
                        pnlcuststore.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        pnlCategory.Visibility = Visibility.Visible;
                        PosDataObject.POS objpos = new PosDataObject.POS();
                        objpos.Connection = SystemVariables.Conn;
                        lbCategory.Text = objpos.GetParentCategoryName(ParentCategoryID);
                    }
                     LoadPOSButtons();
                }
            }
        }
        private  void BtnBack_PreviewMouseLeftButtonDownOLD(object sender, MouseButtonEventArgs e)
        {
            if (menuGrid.Visibility == Visibility.Visible) menuGrid.Visibility = Visibility.Collapsed;
            ChangeMenuButtonColor("Cart");
            tcPOS.SelectedIndex = 0;
            if (boolLoadAllItem)
            {
                boolLoadAllItem = false;
                //await LoadPOSButtons();
                LoadPOSButtons();
            }
        }

        private async void BtnHome_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (menuGrid.Visibility == Visibility.Visible) menuGrid.Visibility = Visibility.Collapsed;
            ChangeMenuButtonColor("Cart");
            tcPOS.SelectedIndex = 0;
            if (boolLoadAllItem)
            {
                boolLoadAllItem = false;
                //await LoadPOSButtons();
                LoadPOSButtons();
            }
        }

        private void Image_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            menuGrid.Visibility = Visibility.Collapsed;
        }

        private void BtnECHeaderD_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            menuGrid.Visibility = Visibility.Collapsed;
        }


        private void ChangeMenuButtonColor(string selectaction)
        {
            bmLogout.Style = this.FindResource("POSLogout") as Style;
            bmPOS.Style = this.FindResource("POSCart") as Style;
            bmCustomer.Style = this.FindResource("POSCustomer") as Style;
            bmItem.Style = this.FindResource("POSItem") as Style;
            bmSetup.Style = this.FindResource("POSSetup") as Style;

            bmLogoutD.Style = this.FindResource("POSLogout") as Style;
            bmPOSD.Style = this.FindResource("POSCart") as Style;
            bmCustomerD.Style = this.FindResource("POSCustomer") as Style;
            bmItemD.Style = this.FindResource("POSItem") as Style;
            bmSetupD.Style = this.FindResource("POSSetup") as Style;

            if (selectaction == "Logout")
            {
                bmLogout.Style = this.FindResource("POSLogoutS") as Style;
                bmLogoutD.Style = this.FindResource("POSLogoutS") as Style;
            }

            if (selectaction == "Cart")
            {
                txtSearch.InfoText = "Search Barcode";
                bmPOS.Style = this.FindResource("POSCartS") as Style;
                bmPOSD.Style = this.FindResource("POSCartS") as Style;
            }

            if (selectaction == "Customer")
            {
                txtSearch.InfoText = "Search Customers";
                bmCustomer.Style = this.FindResource("POSCustomerS") as Style;
                bmCustomerD.Style = this.FindResource("POSCustomerS") as Style;
            }

            if (selectaction == "Item")
            {
                txtSearch.InfoText = "Search Items";
                bmItem.Style = this.FindResource("POSItemS") as Style;
                bmItemD.Style = this.FindResource("POSItemS") as Style;
            }

            if (selectaction == "Setup")
            {
                bmSetup.Style = this.FindResource("POSSetupS") as Style;
                bmSetupD.Style = this.FindResource("POSSetupS") as Style;
            }
        }

        private async void MnuPOS_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            Full_LostFocus(sender, e);
            if (menuGrid.Visibility == Visibility.Visible) menuGrid.Visibility = Visibility.Collapsed;
            ChangeMenuButtonColor("Cart");
            tcPOS.SelectedIndex = 0;
            boolLoadAllItem = false;
            //await LoadPOSButtons();
            LoadPOSButtons();
        }

        private void MnuCustomer_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            Full_LostFocus(sender, e);
            if (menuGrid.Visibility == Visibility.Visible) menuGrid.Visibility = Visibility.Collapsed;
            ChangeMenuButtonColor("Customer");
            tcPOS.SelectedIndex = 1;
            txtSearch.Text = "";
        }

        private void MnuItem_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            Full_LostFocus(sender, e);
            if (menuGrid.Visibility == Visibility.Visible) menuGrid.Visibility = Visibility.Collapsed;
            ChangeMenuButtonColor("Item");
            tcPOS.SelectedIndex = 2;
            txtSearch.Text = "";
            grdProduct.FilterString = "";
        }

        private async void MnuSetup_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            Full_LostFocus(sender, e);
            if (menuGrid.Visibility == Visibility.Visible) menuGrid.Visibility = Visibility.Collapsed;
            ChangeMenuButtonColor("Setup");
            CheckAccessForGeneralSettings("31z1");
            blurGrid.Visibility = Visibility.Visible;
            Administrator.frm_GeneralSetupDlg frm_GeneralSetupDlg = new Administrator.frm_GeneralSetupDlg();
            try
            {
                frm_GeneralSetupDlg.bLoad = false;
                frm_GeneralSetupDlg.FunctionOrderChangeAccess = blFunctionOrderChangeAccess;
                frm_GeneralSetupDlg.FunctionBtnAccess = blFunctionBtnAccess;
                frm_GeneralSetupDlg.ShowDialog();
            }
            finally
            {
                if (frm_GeneralSetupDlg.changeskudisplay)
                {
                    pnlCat1.Children.Clear();
                    pnlCat2.Children.Clear();
                    pnlCat3.Children.Clear();
                    pnlCat4.Children.Clear();
                    pnlCat5.Children.Clear();
                    //await LoadPOSButtons();
                    LoadPOSButtons();
                }

                if (frm_GeneralSetupDlg.SetPOSFunction)
                {

                    pnlFB.Children.Clear();
                    ArrangeVisibleFunctions();
                    DisplayFunctionButtons();

                    SetServiceTypeButtonColor();
                }
            }

            frm_GeneralSetupDlg.Close();
            blurGrid.Visibility = Visibility.Collapsed;
        }

        private void MnuLogout_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (menuGrid.Visibility == Visibility.Visible) menuGrid.Visibility = Visibility.Collapsed;
            CloseKeyboards();
            if (!CheckFunctionButton("20b"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                e.Handled = true;
                return;
            }
            if (dtblPOS.Rows.Count > 0)
            {
                if (ResMan.MessageBox.Show("Do you want to void order and exit?", Properties.Resources.Validation, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                {
                    BtnDelete1_Click(btnDelete1, new RoutedEventArgs());
                }
                else
                {
                    Dispatcher.BeginInvoke(new Action(() => tcPOS.SelectedIndex = 0));
                    ChangeMenuButtonColor("Cart");
                    e.Handled = true;
                    return;
                }
            }


            Settings.PriceLevelForOneTime = "N";
            Settings.PriceLevelForThisSale = "N";
            tcPOS.SelectedIndex = 0;

            InitializeScreen();

            UpdateUserCustomization();

            e.Handled = true;

            ResMan.closeKeyboard();
            Visibility = Visibility.Collapsed;
            OnPOSCloseCommand?.Execute(null);

            SystemVariables.CurrentUserID = -1;
            SystemVariables.CurrentUserName = "";
            (Window.GetWindow(this) as MainWindow).LoggedInUserTextBlock.Text = Properties.Resources.NoLoggedInUser;

            (Window.GetWindow(this) as MainWindow).InitializeLoginScreenAfterReset();

            (Window.GetWindow(this) as MainWindow).SearchMemberTextBox.Visibility = Visibility.Hidden;
            (Window.GetWindow(this) as MainWindow).btnFrontOffice.Visibility = Visibility.Hidden;
            (Window.GetWindow(this) as MainWindow).UpdateLayout();

            ComponentDispatcher.ThreadIdle -= IdleProcess;
            blInitAutoSignOut = false;
            blInitAutoSignOutAfterTender = false;
        }

        private void MnuExit_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (menuGrid.Visibility == Visibility.Visible) menuGrid.Visibility = Visibility.Collapsed;
            CloseKeyboards();
            if (!CheckFunctionButton("20b"))
            {
                GeneralFunctions.SetFocus(txtSKU);
                e.Handled = true;
                return;
            }
            if (dtblPOS.Rows.Count > 0)
            {
                if (ResMan.MessageBox.Show("Do you want to void order and exit?", Properties.Resources.Validation, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                {
                    BtnDelete1_Click(btnDelete1, new RoutedEventArgs());
                }
                else
                {
                    Dispatcher.BeginInvoke(new Action(() => tcPOS.SelectedIndex = 0));
                    ChangeMenuButtonColor("Cart");
                    e.Handled = true;
                    return;
                }
            }


            Settings.PriceLevelForOneTime = "N";
            Settings.PriceLevelForThisSale = "N";
            tcPOS.SelectedIndex = 0;

            InitializeScreen();

            UpdateUserCustomization();

            e.Handled = true;

            ResMan.closeKeyboard();
            Visibility = Visibility.Collapsed;
            OnPOSCloseCommand?.Execute(null);

            SystemVariables.CurrentUserID = -1;
            SystemVariables.CurrentUserName = "";
            (Window.GetWindow(this) as MainWindow).LoggedInUserTextBlock.Text = Properties.Resources.NoLoggedInUser;
            (Window.GetWindow(this) as MainWindow).LoginMenuBorder.Visibility = Visibility.Visible;
            (Window.GetWindow(this) as MainWindow).LoginBorder.Visibility = Visibility.Collapsed;
            (Window.GetWindow(this) as MainWindow).LoginGrid.Visibility = Visibility.Visible;
            (Window.GetWindow(this) as MainWindow).SearchMemberTextBox.Visibility = Visibility.Hidden;
            (Window.GetWindow(this) as MainWindow).btnFrontOffice.Visibility = Visibility.Hidden;
            (Window.GetWindow(this) as MainWindow).UpdateLayout();

            ComponentDispatcher.ThreadIdle -= IdleProcess;
            blInitAutoSignOut = false;
            blInitAutoSignOutAfterTender = false;
        }


        public async Task SetCurrentRowC(int RecordID)
        {
            int intRecID = 0;
            int intColCtr = 0;
            for (intColCtr = 0; intColCtr < (grdCustomer.ItemsSource as DataTable).Rows.Count; intColCtr++)
            {
                intRecID = GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(intColCtr, grdCustomer, colCMID)));
                if (RecordID == intRecID) break;
            }
            if (intColCtr >= 0) CgridView1.FocusedRowHandle = intColCtr;
        }

        public async Task<int> GetIDC()
        {
            int intRowID = 0;
            if ((grdCustomer.ItemsSource as DataTable).Rows.Count == 0) return 0;
            intRowID = CgridView1.FocusedRowHandle;
            if (intRowID < 0) return 0;
            return GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(intRowID, grdCustomer, colCMID)));
        }

        public async Task<int> ReturnRowIDC()
        {
            int intRowID = -1;
            int intRecID = -1;
            if ((grdCustomer.ItemsSource as DataTable).Rows.Count == 0) return intRecID;
            if (CgridView1.FocusedRowHandle < 0) return intRecID;
            intRowID = CgridView1.FocusedRowHandle;
            intRecID = GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(intRowID, grdCustomer, colCMID)));
            return intRecID;
        }

        public void FetchCustomerData()
        {
            DataTable dbtbl = new DataTable();
            PosDataObject.Customer objCustomer = new PosDataObject.Customer();
            objCustomer.Connection = SystemVariables.Conn;
            dbtbl = objCustomer.FetchData(cmbStore.Text, "Active Customers");

            DataTable dtblTemp = dbtbl.DefaultView.ToTable();
            DataColumn column = new DataColumn("CustomC");
            column.DataType = System.Type.GetType("System.String");
            column.AllowDBNull = true;
            column.Caption = "CustomC";
            dtblTemp.Columns.Add(column);

            foreach (DataRow dr in dtblTemp.Rows)
            {
                dr["CustomC"] = "X";
            }


            grdCustomer.ItemsSource = dtblTemp;

            dtblTemp.Dispose();
            dbtbl.Dispose();


        }


        private async void SetNewlyEnteredCustomer(int intNewRecID)
        {
            //if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(CgridView1.FocusedRowHandle, grdCustomer, colCMID)) != intCustID)
            // {
            blChangeCustomer = true;
            string refTaxExempt = "";
            string refDiscountLevel = "";
            string refTaxID = "";
            string refStoreCr = "";
            string refCID = "";
            string refCName = "";
            string refCAdd = "";
            double dblBalance = 0;
            string refARCredit = "";
            string refPOSNotes = "";

            int refDTaxID = 0;
            string refDTax = "";
            double refDTaxRate = 0;
            int refDTaxType = 0;

            intCustID = intNewRecID;// GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(CgridView1.FocusedRowHandle, grdCustomer, colCMID));

            FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd, ref refTaxExempt, ref refDiscountLevel, ref refTaxID,
                            ref refStoreCr, ref refARCredit, ref refPOSNotes, ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);

            CustDTaxID = refDTaxID;
            CustDTaxName = refDTax;
            CustDTaxRate = refDTaxRate;
            CustDTaxType = refDTaxType;
            strTaxExempt = refTaxExempt;
            strDiscountLevel = refDiscountLevel.Trim();
            if (strDiscountLevel == "") strDiscountLevel = "A";
            dblBalance = GetAccountBalance(intCustID);
            txtCust.Text = refCID;
            if (Settings.CentralExportImport == "Y")
            {
                if (cmbStore.EditText == Settings.StoreCode) txtCustStore.Text = "";
                else txtCustStore.Text = cmbStore.EditText;
            }
            //lbCustID.Text = "Customer ID : " + refCID;
            strCustomerID = refCID;
            lbCustName.Text = refCName;

            /*DisplayPoleText(2, "N", "N", "welcome", refCName);

            lbCustAddress.Text = refCAdd;
            ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
            lbCustNotes.Text = refPOSNotes;
            blCustNotes = refPOSNotes != "";
            ShowCustomerPhoto();*/
            FetchCustomerNote("", "Customer", intCustID, DateTime.Today.Year, DateTime.Today.Month);
            if (blCustNotes) lbcustinfo2.Text = "Check 'Cust Notes' Apps";
            dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
            dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
            dblCustAcctBalance = dblBalance;
            RearrangeProductAsCustomerChange();

            int i = -1;
            foreach (DataRowView dr in dtblPOS.DefaultView)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                i++;
                AddAutoDiscountInCart_OnCustomerChange(GeneralFunctions.fnInt32(dr["ID"].ToString()), GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) > 0 ? false : true, i);
            }
            SetCartDisplay();
            GetTotal();
            ShowTax();
            ResetQty();
            //gridControl1.RefreshData();

            //Block
            /*
            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                int fval = GridView.FocusedRowHandle;
                //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);

                SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), numSubTotal.Value, numDiscount.Value, numTax.Value, numTotal.Value, dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
            }*/


            pnlCust.Visibility = System.Windows.Visibility.Visible;

            ChangeMenuButtonColor("Cart");
            tcPOS.SelectedIndex = 0;
            boolLoadAllItem = false;
            //await LoadPOSButtons();
            LoadPOSButtons();
            //}
        }

        private async void CgridView1_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (CgridView1.FocusedRowHandle > -1)
            {
                var asx = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(CgridView1.FocusedRowHandle, grdCustomer, colCMID));
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(CgridView1.FocusedRowHandle, grdCustomer, colCMID)) != intCustID)
                {
                    blChangeCustomer = true;
                    string refTaxExempt = "";
                    string refDiscountLevel = "";
                    string refTaxID = "";
                    string refStoreCr = "";
                    string refCID = "";
                    string refCName = "";
                    string refCAdd = "";
                    double dblBalance = 0;
                    string refARCredit = "";
                    string refPOSNotes = "";

                    int refDTaxID = 0;
                    string refDTax = "";
                    double refDTaxRate = 0;
                    int refDTaxType = 0;

                    intCustID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(CgridView1.FocusedRowHandle, grdCustomer, colCMID));

                    FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd, ref refTaxExempt, ref refDiscountLevel, ref refTaxID,
                                    ref refStoreCr, ref refARCredit, ref refPOSNotes, ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);

                    CustDTaxID = refDTaxID;
                    CustDTaxName = refDTax;
                    CustDTaxRate = refDTaxRate;
                    CustDTaxType = refDTaxType;
                    strTaxExempt = refTaxExempt;
                    strDiscountLevel = refDiscountLevel.Trim();
                    if (strDiscountLevel == "") strDiscountLevel = "A";
                    dblBalance = GetAccountBalance(intCustID);
                    txtCust.Text = refCID;
                    if (Settings.CentralExportImport == "Y")
                    {
                        if (cmbStore.EditText == Settings.StoreCode) txtCustStore.Text = "";
                        else txtCustStore.Text = cmbStore.EditText;
                    }
                    //lbCustID.Text = "Customer ID : " + refCID;
                    strCustomerID = refCID;
                    lbCustName.Text = refCName;

                    /*DisplayPoleText(2, "N", "N", "welcome", refCName);

                    lbCustAddress.Text = refCAdd;
                    ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                    lbCustNotes.Text = refPOSNotes;
                    blCustNotes = refPOSNotes != "";
                    ShowCustomerPhoto();*/
                    FetchCustomerNote("", "Customer", intCustID, DateTime.Today.Year, DateTime.Today.Month);
                    if (blCustNotes) lbcustinfo2.Text = "Check 'Cust Notes' Apps";
                    dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                    dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                    dblCustAcctBalance = dblBalance;
                    RearrangeProductAsCustomerChange();

                    int i = -1;
                    foreach (DataRowView dr in dtblPOS.DefaultView)
                    {
                        if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                        || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                        || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                            || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                        i++;
                        AddAutoDiscountInCart_OnCustomerChange(GeneralFunctions.fnInt32(dr["ID"].ToString()), GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) > 0 ? false : true, i);
                    }
                    SetCartDisplay();
                    GetTotal();
                    ShowTax();
                    ResetQty();
                    //gridControl1.RefreshData();

                    //Block
                    /*
                    if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                    {
                        int fval = GridView.FocusedRowHandle;
                        //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);

                        SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), numSubTotal.Value, numDiscount.Value, numTax.Value, numTotal.Value, dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
                    }*/


                    pnlCust.Visibility = System.Windows.Visibility.Visible;

                    ChangeMenuButtonColor("Cart");
                    tcPOS.SelectedIndex = 0;
                    boolLoadAllItem = false;
                    //await LoadPOSButtons();
                    LoadPOSButtons();
                }
            }
        }

        private void TxtSearch_MouseDown(object sender, MouseButtonEventArgs e)
        {
            TxtSearch_GotFocus(sender, e);
            //System.Windows.Forms.MessageBox.Show("TxtSearch_MouseDown");
        }
        private void TxtSearch_GotFocus(object sender, RoutedEventArgs e)
        {
            Full_GotFocus(sender, e);

            if (tcPOS.SelectedIndex == 0)
            {
                if (txtSearch.InfoText == "Search Barcode")
                {
                    txtSearch.Text = "";
                }
            }

            if (tcPOS.SelectedIndex == 1)
            {
                if (txtSearch.InfoText == "Search Customers")
                {
                    txtSearch.Text = "";
                }
            }

            if (tcPOS.SelectedIndex == 2)
            {
                if (txtSearch.InfoText == "Search Items")
                {
                    txtSearch.Text = "";
                }
            }

        }

        private void TxtSearch_LostFocus(object sender, RoutedEventArgs e)
        {
            Full_LostFocus(sender, e);
            if (tcPOS.SelectedIndex == 0)
            {
                if (txtSearch.Text == "")
                {
                    txtSearch.InfoText = "Search Barcode";
                }
            }

            if (tcPOS.SelectedIndex == 1)
            {
                if (txtSearch.Text == "")
                {
                    txtSearch.InfoText = "Search Customers";
                }
            }

            if (tcPOS.SelectedIndex == 2)
            {
                if (txtSearch.Text == "")
                {
                    txtSearch.InfoText = "Search Items";
                }
            }
        }

        private void TxtSearch_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (tcPOS.SelectedIndex == 1)
            {
                if (txtSearch.Text == "Search Customers") return;
                if (txtSearch.Text == "")
                {
                    grdCustomer.FilterString = "";
                    return;
                }
                string filterValue = txtSearch.Text;
                if (!String.IsNullOrEmpty(filterValue))
                {
                    grdCustomer.FilterString = "([CustomerID] LIKE '%" + filterValue + "%' OR [FirstName] LIKE '" + filterValue + "%'  OR [LastName] LIKE '" + filterValue + "%'  OR [Company] LIKE '%" + filterValue + "%' OR [WorkPhone] LIKE '%" + filterValue + "%')";
                }
            }

            if (tcPOS.SelectedIndex == 2)
            {
                if (txtSearch.Text == "Search Items") return;
                if (txtSearch.Text == "")
                {
                    grdProduct.FilterString = "";
                    return;
                }
                string filterValue = txtSearch.Text;
                if (!String.IsNullOrEmpty(filterValue))
                {
                    grdProduct.FilterString = "([SKU] LIKE '%" + filterValue + "%' OR [ProductName] LIKE '%" + filterValue + "%' OR [SKU2] LIKE '%" + filterValue + "%' OR [SKU3] LIKE '%" + filterValue + "%')";
                    
                }
            }
        }






        public void FetchItemData()
        {
            DataTable dbtbl = new DataTable();
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = SystemVariables.Conn;
            dbtbl = objProduct.FetchData(true, "Active Products");



            DataTable dtblTemp = dbtbl.DefaultView.ToTable();
            DataColumn column = new DataColumn("CustomI");
            column.DataType = System.Type.GetType("System.String");
            column.AllowDBNull = true;
            column.Caption = "CustomI";
            dtblTemp.Columns.Add(column);

            column = new DataColumn("PriceCur");
            column.DataType = System.Type.GetType("System.String");
            column.AllowDBNull = true;
            column.Caption = "Price";
            dtblTemp.Columns.Add(column);

            foreach (DataRow dr in dtblTemp.Rows)
            {
                dr["CustomI"] = "X";
                dr["PriceCur"] = SystemVariables.CurrencySymbol + String.Format("{0:0.00}", Convert.ToDecimal(dr["PriceA"]));
            }


            grdProduct.ItemsSource = dtblTemp;

            dtblTemp.Dispose();
            dbtbl.Dispose();
        }

        private async void PgridView1_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (PgridView1.FocusedRowHandle > -1)
            {
                if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)) > 0)
                {
                    if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                    {
                        //SecondMonitor.ClearWeightInfo();
                    }
                    if ((intCustID == 0) && (Settings.CustomerInfo == 2))
                    {
                        if (dtblPOS.Rows.Count == 0)
                        {
                            DocMessage.MsgInformation("Enter valid customer before ringing item");
                            GeneralFunctions.SetFocus(txtCust);
                            return;
                        }
                    }

                    if (strCurrentServiceType == "Sales")
                    {
                        if ((blReturnItem) && (dtblPOS.Rows.Count > 0)) return;
                        else if ((blReturnItem) && (dtblPOS.Rows.Count == 0))
                        {
                            blReturnItem = false;
                        }
                    }
                    if (strCurrentServiceType == "Rent")
                    {
                        if ((blRentRecall) && (dtblPOS.Rows.Count > 0)) return;
                        else if ((blRentRecall) && (dtblPOS.Rows.Count == 0))
                        {
                            blRentRecall = false;
                            blRentIssued = true;
                        }
                        else if ((await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Service") ||
                            (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Weighted")) return;
                    }
                    if (strCurrentServiceType == "Repair")
                    {
                        if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Weighted") return;
                    }



                    bool blExit = false;

                    int intRowID = 0;
                    if ((grdProduct.ItemsSource as DataTable).Rows.Count == 0) return;
                    intRowID = PgridView1.FocusedRowHandle;

                    if (intRowID < 0) return;
                    string line1 = "";
                    string line2 = "";
                    bool blfinddata = false;

                    string strselectid = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID);

                    string refType = "";
                    string refOHQty = "";
                    string refNQty = "";
                    string refPrice = "";
                    string refNPrice = "";
                    string refCost = "";
                    string refPrompt = "";
                    string refDP = "";
                    string refAge = "";
                    string refRentMI = "";
                    string refRentHR = "";
                    string refRentHDY = "";
                    string refRentDY = "";
                    string refRentWK = "";
                    string refRentMN = "";
                    string refRentDeposit = "";
                    string refRentMinHR = "";
                    string refRentMinAmt = "";
                    string refRentPrompt = "";
                    string refRepairAmt = "";
                    string refRepairPromptAmt = "";
                    string refRepairPromptTag = "";
                    int MixMatchID = 0;
                    string MixMatchFlag = "N";
                    string MixMatchCat = "";
                    string MixMatchType = "";
                    double MixMatchVal = 0;
                    int MixMatchPlus = 0;
                    double MixMatchPartPrice = 0;
                    bool MixMatchApplicableLast = false;

                    int SaleID = 0;
                    double SalePrice = 0;
                    int iAge = 0;
                    string refUOM = "";
                    string refExpiry = "";
                    FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty,
                                    ref refNQty, ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI,
                                    ref refRentHR, ref refRentHDY, ref refRentDY, ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt,
                                    ref refRentPrompt, ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

                    //Block if (!GeneralFunctions.ProceedFromItemImage(GeneralFunctions.fnInt32(strselectid))) return;

                    if (strCurrentServiceType == "Sales")
                    {
                        if (refExpiry != "")
                        {
                            DisplayItemExpiryAlert(refExpiry);

                        }
                    }

                    int TSaleID = 0;
                    double TSalePrice = 0;
                    int TMixMatchID = 0;

                    DataTable dtblBuyGetFree = new DataTable();
                    int TBuyNFreeID = 0;
                    int TBuyNFreeQty = 0;
                    bool TBuyNFreeProceed = false;
                    ArrayList TBuyNFree_ItemToBeDeletedFirst = new ArrayList();

                    /// For Sale, before adding an item into cart, first check if active sale price is present or not. If not present then check Mix n Match. 
                    /// If active Mix n Match found, then cart added with Mix n Match data.
                    /// If no active Mix n Match found then check for Buy n Get Free promotion, if satisfied then Buy n Get Free data will the added into cart

                    if (strCurrentServiceType == "Sales")
                    {
                        FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref TSaleID, ref TSalePrice);
                        if (TSaleID == 0)
                        {
                            PosDataObject.POS objPOS = new PosDataObject.POS();
                            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            TMixMatchID = objPOS.ActiveMixNMatch(GeneralFunctions.fnInt32(strselectid));
                        }

                        if (TMixMatchID == 0)
                        {
                            dtblBuyGetFree = CheckIfActiveBuyNGetFree(GeneralFunctions.fnInt32(strselectid));
                            if (dtblBuyGetFree.Rows.Count > 0)
                            {
                                TBuyNFreeProceed = CheckCartForProceedBuyNGetFree(GeneralFunctions.fnInt32(strselectid), dtblBuyGetFree, ref TBuyNFreeID, ref TBuyNFreeQty, ref TBuyNFree_ItemToBeDeletedFirst);
                            }
                            else
                            {
                                TBuyNFreeProceed = false;
                            }
                        }


                        if (TBuyNFreeProceed)
                        {
                            AddBuyNGetFreeQty(GeneralFunctions.fnInt32(strselectid), await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), TBuyNFreeID, TBuyNFreeQty, TBuyNFree_ItemToBeDeletedFirst, TSaleID, TSalePrice);
                        }
                    }

                    if (!TBuyNFreeProceed)
                    {
                        if ((strCurrentServiceType == "Sales") && (TMixMatchID > 0))
                        {
                            for (int lp = 1; lp <= intPressQty; lp++)
                            {
                                await SelectProductBrowseMixMatch();
                            }
                        }
                        else
                        {

                            if ((refType == "P") || (refType == "M") || (refType == "K") || (refType == "U")
                                        || (refType == "W") || (refType == "E") || (refType == "F") || (refType == "S") || (refType == "T"))
                            {
                                if (strCurrentServiceType == "Sales")
                                {
                                    FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref SaleID, ref SalePrice);
                                    if (SaleID == 0)
                                    {
                                        FetchMix_n_Match(GeneralFunctions.fnInt32(strselectid), ref MixMatchID, ref MixMatchFlag, ref MixMatchCat,
                                                            ref MixMatchType, ref MixMatchVal, ref MixMatchPlus, ref MixMatchPartPrice, ref MixMatchApplicableLast);

                                        // MixMatchFlag = N / Y - Not Applicable / Applicale
                                        // MixMatchCat = N / P - Normal Pricing / Plus Pricing
                                        // MixMatchType = P/A - % off / Amount off
                                    }
                                }
                            }

                            if (strCurrentServiceType == "Rent")
                            {
                                if (blRentRecall) return;
                                else if ((refType == "S") || (refType == "W")) return;
                            }
                            if (strCurrentServiceType == "Repair")
                            {
                                //if (blRepairRecall) return;
                                //else if ((refType == "S") || (refType == "W")) return;
                                if (refType == "W") return;
                            }

                            if (Settings.POSIDRequired == "Y")
                            {
                                if (GeneralFunctions.fnInt32(refAge) > 0)
                                {
                                    iAge = GeneralFunctions.fnInt32(refAge);
                                    if (!AgeCheck(DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)))) return;
                                    //if (MyMessageBox.ShowBox(Translation.SetMultilingualTextInCodes("Minimum Age ", "frmPOSN_msg_MinimumAge") + refAge + Translation.SetMultilingualTextInCodes(" : Birthday on or before ", "frmPOSN_msg_Birthdayonorbefore") + DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)).ToString("MM/dd/yyyy"), Translation.SetMultilingualTextInCodes("Age Verification", "frmPOSN_msg_AgeVerification"), MessageBoxButtons.OKCancel, MessageBoxIcon.Information) == DialogResult.Cancel) return;
                                }
                            }

                            string strUOMCount = "";
                            string strUOMPrice = "";
                            string strUOMDesc = "";

                            string strMatxOID = "";
                            string strMatxOV1 = "";
                            string strMatxOV2 = "";
                            string strMatxOV3 = "";
                            string strSLID = "0";


                            if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Unit of Measure")
                            {
                                blurGrid.Visibility = Visibility.Visible;
                                frm_POSProductAddnDlg frm_ = new frm_POSProductAddnDlg();
                                try
                                {
                                    frm_.ProductType = "Unit of Measure";
                                    frm_.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                        grdProduct, colIMID));
                                    frm_.Heading = "Unit of Measure Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                        grdProduct, colIMDesc);
                                    frm_.ShowDialog();
                                    if (frm_.DialogResult == true)
                                    {
                                        strUOMCount = frm_.UOMCount;
                                        strUOMPrice = frm_.UOMPrice;
                                        strUOMDesc = frm_.UOMDesc;
                                    }
                                    else blExit = true;
                                }
                                finally
                                {
                                    blurGrid.Visibility = Visibility.Collapsed;
                                    //frm_.Close();
                                    await Dispatcher.BeginInvoke(new Action(() => frm_.Close()));
                                }
                                if (blExit)
                                {
                                    return;
                                }
                            }

                            if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Matrix")
                            {
                                blurGrid.Visibility = Visibility.Visible;
                                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                                try
                                {
                                    frm_POSProductAddnDlg.ProductType = "Matrix";
                                    frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                    frm_POSProductAddnDlg.Heading = " Matrix Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                    frm_POSProductAddnDlg.ShowDialog();
                                    if (frm_POSProductAddnDlg.DialogResult == true)
                                    {
                                        strMatxOID = frm_POSProductAddnDlg.MatrixOID;
                                        strMatxOV1 = frm_POSProductAddnDlg.MatrixOV1;
                                        strMatxOV2 = frm_POSProductAddnDlg.MatrixOV2;
                                        strMatxOV3 = frm_POSProductAddnDlg.MatrixOV3;
                                    }
                                    else blExit = true;
                                }
                                finally
                                {
                                    frm_POSProductAddnDlg.Close();
                                    blurGrid.Visibility = Visibility.Collapsed;
                                }
                                if (blExit)
                                {
                                    return;
                                }
                            }

                            if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Serialized")
                            {
                                blurGrid.Visibility = Visibility.Visible;
                                frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                                try
                                {
                                    frm_POSProductAddnDlg.ProductType = "Serialized";
                                    frm_POSProductAddnDlg.dtblS = dtblPOS;
                                    frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                    frm_POSProductAddnDlg.Heading = "Serialized Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                    frm_POSProductAddnDlg.ShowDialog();
                                    if (frm_POSProductAddnDlg.DialogResult == true)
                                    {
                                        strSLID = frm_POSProductAddnDlg.SLID;
                                    }
                                    else blExit = true;
                                }
                                finally
                                {
                                    frm_POSProductAddnDlg.Close();
                                    blurGrid.Visibility = Visibility.Collapsed;
                                }
                                if (blExit)
                                {
                                    return;
                                }
                            }

                            /*if (intCustID != 0)
                            {
                                if (GeneralFunctions.fnDouble(refPrice) == 0) refPrice = refNPrice;
                            }*/

                            int intfocusrow = 0;
                            double dblRate = 0;
                            double dblPrice = 0;

                            //if (strCurrentServiceType != "Repair")
                            //{
                            if (!CheckStock(GeneralFunctions.fnInt32(strselectid), 1, strMatxOID, strMatxOV1, strMatxOV2, strMatxOV3))
                            {
                                DocMessage.MsgInformation("No Stock available!");
                                return;
                            }
                            //}

                            string strRentType = "NA";
                            double dblRentDuration = 0;
                            double dblRentValue = 0;
                            double dblRentDeposit = 0;

                            //Block
                            /*
                            if (strCurrentServiceType == "Rent")
                            {
                                if (!blRentRecall)
                                {
                                    frmPOSRentalSelectDlg frmrentsel = new frmPOSRentalSelectDlg();
                                    try
                                    {
                                        frmrentsel.PID = GeneralFunctions.fnInt32(strselectid);
                                        frmrentsel.ShowDialog();
                                        if (frmrentsel.DialogResult == DialogResult.OK)
                                        {
                                            strRentType = frmrentsel.RentType;
                                            dblRentDuration = frmrentsel.RentDuration;
                                            dblRentValue = frmrentsel.RentValue;
                                            dblRentDeposit = frmrentsel.RentDeposit;
                                        }
                                        else blExit = true;
                                    }
                                    finally
                                    {
                                        frmrentsel.Dispose();
                                    }
                                    if (blExit) return;
                                }
                            }
                            */
                            string strRepairItemTag = "";
                            string strRepairItemSlNo = "";
                            string strRepairItemPurchaseDate = "";


                            if (strCurrentServiceType == "Sales")
                            {
                                if (SaleID > 0)
                                {
                                    refPrompt = "N";
                                    refPrice = SalePrice.ToString();
                                    if (refType == "U") strUOMPrice = SalePrice.ToString();
                                }

                                if (!blfinddata)
                                {
                                    if (refType == "U")
                                    {
                                        if (refPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, GeneralFunctions.fnDouble(strUOMPrice));

                                            if (promptPrice == -99999) return;

                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                        {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                    "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});

                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;

                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (promptPrice - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }


                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc + "\n";


                                                dtblPOS.Rows.Add(new object[]
                                            {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * promptPrice),strUOMCount,newpretaxamt.ToString(),strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty * promptPrice),refUOM,"","","","","N"});
                                                /*
                                                line1 = "";
                                                line2 = "";
                                                RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", promptPrice.ToString(), ref line1, ref line2);
                                                DisplayPoleText(2, "N", "N", line1, line2);*/
                                            }
                                        }
                                        else
                                        {
                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                        {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                                    refType,refOHQty,refNQty,refCost,intPressQty,strUOMPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    strUOMPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),refUOM,"","","","","N"});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (GeneralFunctions.fnDouble(strUOMPrice) - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }


                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc + "\n";

                                                dtblPOS.Rows.Add(new object[]
                                        {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,strUOMPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),strUOMCount,newpretaxamt.ToString(),strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    strUOMPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),refUOM,"","","","","N"});
                                            }
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", strUOMPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }

                                    else if (refType == "E")
                                    {
                                        if (refPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));

                                            if (promptPrice == -99999) return;

                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                        {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strSLID,"0","0","","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0
                                    ,MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (promptPrice - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                dtblPOS.Rows.Add(new object[]
                                        {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),strSLID,"0","0","","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0
                                    ,MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),refUOM,"","","","","N"});

                                                /*
                                                line1 = "";
                                                line2 = "";

                                                RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                                DisplayPoleText(2, "N", "N", line1, line2);*/
                                            }
                                        }

                                        else
                                        {
                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                        {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),strSLID,"0","0","","","","",GetUniqueString(),
                                    refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                dtblPOS.Rows.Add(new object[]
                                        {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),strSLID,"0","0","","","","",GetUniqueString(),
                                    refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),refUOM,"","","","","N"});
                                            }

                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }
                                    else if (refType == "M")
                                    {
                                        if (refPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));

                                            if (promptPrice == -99999) return;

                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                        {
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * promptPrice),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,
                                strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                promptPrice,Convert.ToDecimal(intPressQty * promptPrice),refUOM,"","","","","N"});
                                            }
                                            else
                                            {

                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (promptPrice - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                dtblPOS.Rows.Add(new object[]
                                        {
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                linetxt,
                                refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * newpretaxamt),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,
                                strMatxOV3,GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                promptPrice,Convert.ToDecimal(intPressQty * newpretaxamt),"","","","","N"});
                                            }
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                        else
                                        {
                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                        {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                dtblPOS.Rows.Add(new object[]
                                        {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                            }
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                            PgridView1, colIMDesc), "1", refPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }
                                    else if (refType == "W")
                                    {
                                        if (CheckForFixedWeight(intRowID))
                                        {
                                            weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                            weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                            //weightitemid = intRowID;
                                            //weightitemname = (sender as POSControls.POSItem).ItemName;
                                            await AddFixedWeightedItem();
                                        }
                                        else
                                        {
                                            if ((Settings.ScaleDevice == "Datalogic Scale") && (m_posScale != null))
                                            {
                                                try
                                                {
                                                    weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                                    weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                                    //weightitemid = intRowID;
                                                    //weightitemname = (sender as POSControls.POSItem).ItemName;
                                                    weightstring = m_posScale.ReadWeight(20000).ToString();

                                                    double Tare = 0;

                                                    double Tr1 = 0;
                                                    double Tr2 = 0;
                                                    FetchTare(weightitemid, ref Tr1, ref Tr2);

                                                    Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);


                                                    if (blTareEntry)
                                                    {
                                                        Tare = dblTareEntryValue;
                                                    }

                                                    if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                    {
                                                        SecondMonitor.AddWeightInfo(GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()) + " " + m_posScale.WeightUnit.ToString(), Tare);
                                                    }

                                                    if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                    {
                                                        /*if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                        {
                                                            SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + m_posScale.WeightUnit.ToString());
                                                        }*/
                                                        await AddWeightedItem();

                                                    }
                                                    else
                                                    {
                                                        DocMessage.MsgInformation(Properties.Resources.Invalid_scale_weight);
                                                        return;
                                                    }
                                                }
                                                catch
                                                {
                                                    DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                    return;
                                                }

                                            }
                                            else if ((Settings.ScaleDevice == "Kilotech") && (Settings.COMPort != "(None)"))
                                            {
                                                try
                                                {
                                                    string wt = "";
                                                    blGetWeight = false;
                                                    if (IsActiveScale1())
                                                    {
                                                        if (s_wght != 0) wt = s_wght.ToString();
                                                        if (wt != "")
                                                        {
                                                            weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                                            weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                                            //weightitemid = intRowID;
                                                            //weightitemname = (sender as POSControls.POSItem).ItemName;
                                                            weightstring = wt;
                                                            weightuom = s_wght_u;
                                                            double Tare = 0;
                                                            double Tr1 = 0;
                                                            double Tr2 = 0;
                                                            FetchTare(weightitemid, ref Tr1, ref Tr2);

                                                            Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                                                            if (blTareEntry)
                                                            {
                                                                Tare = dblTareEntryValue;
                                                            }

                                                            if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                            {
                                                                if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                                {
                                                                    SecondMonitor.AddWeightInfo(GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()) + " " + s_wght_u, Tare);
                                                                }

                                                                await AddWeightedItem();


                                                            }
                                                            else
                                                            {
                                                                DocMessage.MsgInformation(Properties.Resources.No_scale_weight);
                                                                return;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            blGetWeight = false;
                                                            DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                            return;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                        return;
                                                    }
                                                }
                                                catch
                                                {
                                                    DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                    return;
                                                }

                                            }
                                            else if ((Settings.ScaleDevice == "Live Weight") && (Settings.COMPort != "(None)"))
                                            {
                                                weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                                weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                                await AddWeightedItem();
                                                /*try
                                                {
                                                    string wt = "";
                                                    blGetWeight = false;
                                                    if (s_wght != 0) wt = s_wght.ToString();
                                                    if (wt != "")
                                                    {
                                                        weightitemid = intRowID;
                                                        weightitemname = (sender as POSControls.POSItem).ItemName;
                                                        weightstring = wt;

                                                        double Tare = 0;
                                                        FetchTare(weightitemid, ref Tare);
                                                        if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                        {
                                                            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                            {
                                                                SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + s_wght_u);
                                                            }

                                                            AddWeightedItem();

                                                        }
                                                        else
                                                        {
                                                            DocMessage.MsgInformation(Properties.Resources."No scale weight");
                                                            return;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        blGetWeight = false;
                                                        DocMessage.MsgInformation(Properties.Resources."Cannot read from scale device");
                                                        return;
                                                    }
                                                }
                                                catch
                                                {
                                                    DocMessage.MsgInformation(Properties.Resources."Cannot read from scale device");
                                                    return;
                                                }*/

                                            }
                                            else if (Settings.ScaleDevice == "XEPOS")
                                            {
                                                string strfilename = "";
                                                strfilename = System.AppDomain.CurrentDomain.BaseDirectory;
                                                if (strfilename.EndsWith("\\"))
                                                {
                                                    strfilename = strfilename + "Weight.exe";
                                                }
                                                else
                                                {
                                                    strfilename = strfilename + "\\Weight.exe";
                                                }
                                                if (!System.IO.File.Exists(strfilename)) return;

                                                blopenweight = true;
                                                weightcallfrom = "POSItem";

                                                weightitemid = intRowID;
                                                weightitemname = (sender as POSControls.POSItem).ItemName;

                                                Process p = new Process();
                                                p.StartInfo.FileName = strfilename;
                                                p.Start();
                                            }
                                            else
                                            {
                                                bool proceedflag = false;
                                                double wqty = 0;
                                                double wdisc = 0;
                                                string val1 = "";
                                                string val2 = "0";
                                                string val3 = "0";
                                                string val4 = "";
                                                string val5 = "";

                                                frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                                                try
                                                {

                                                    frm_POSItemDlg.BlankLine = false;
                                                    //Todo: frm_POSItemDlg.ParentForm = this;
                                                    frm_POSItemDlg.IsEdit = false;
                                                    frm_POSItemDlg.ServiceType = strCurrentServiceType;
                                                    frm_POSItemDlg.ProductDesc = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc); ;
                                                    frm_POSItemDlg.Qty = intPressQty;
                                                    frm_POSItemDlg.Price = GeneralFunctions.fnDouble(refPrice);
                                                    frm_POSItemDlg.Weighted = true;
                                                    frm_POSItemDlg.WeightedUOM = refUOM;
                                                    blurGrid.Visibility = Visibility.Visible;
                                                    frm_POSItemDlg.ShowDialog();
                                                    blurGrid.Visibility = Visibility.Collapsed;
                                                    if (frm_POSItemDlg.DialogResult == true)
                                                    {
                                                        proceedflag = true;
                                                        wqty = frm_POSItemDlg.Qty;
                                                        wdisc = frm_POSItemDlg.Discount;
                                                        if (!GeneralFunctions.IsValidScaleWeight_POS(wqty.ToString(), true)) return;
                                                        if (blTareEntry)
                                                        {
                                                            wqty = wqty - dblTareEntryValue;
                                                            if (wqty <= 0)
                                                            {
                                                                new MessageBoxWindow().Show(Properties.Resources.Enter_valid_weight, Properties.Resources.Weight_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                                finally
                                                {
                                                }
                                                if (!proceedflag) return;

                                                if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                {
                                                    SecondMonitor.AddWeightInfo(GeneralFunctions.fnDouble(wqty).ToString(), 0);
                                                }

                                                if (wdisc > 0)
                                                {
                                                    val1 = "A";
                                                    val2 = wdisc.ToString();
                                                    val3 = wdisc.ToString();
                                                    val4 = "9988";
                                                    val5 = Properties.Resources.Discount__.Replace("$", SystemVariables.CurrencySymbol) + wdisc.ToString("f");
                                                }

                                                if (refPrompt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                                    if (promptPrice == -99999) return;

                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable 
                                                    {
                                                        dtblPOS.Rows.Add(new object[]
                                                    {
                                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        wdisc == 0 ? await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) :
                                        await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n",
                                              refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),refUOM,"","","","","N"});
                                                    }
                                                    else
                                                    {
                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (promptPrice * wqty - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (promptPrice * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }


                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                        dtblPOS.Rows.Add(new object[]
                                                    {
                                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                       linetxt,refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),refUOM,"","","","","N"});
                                                    }

                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), wqty.ToString(), promptPrice.ToString(),
                                                    ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);

                                                }
                                                else
                                                {
                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                    {
                                                        dtblPOS.Rows.Add(new object[]
                                                    {
                                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        wdisc == 0 ? await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) :
                                        await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n",
                                                    refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),refUOM,"","","","","N"});
                                                    }
                                                    else
                                                    {
                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (GeneralFunctions.fnDouble(refPrice) * wqty - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }

                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                        dtblPOS.Rows.Add(new object[]
                                                    {
                                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),linetxt,refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"","","","","N"});
                                                    }

                                                    line1 = "";
                                                    line2 = "";

                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), wqty.ToString(), refPrice, ref line1, ref line2);

                                                    DisplayPoleText(2, "N", "N", line1, line2);
                                                }

                                                blTareEntry = false;
                                                dblTareEntryValue = 0;
                                            }
                                        }
                                    }
                                    else if ((refType == "F") && (Settings.AddGallon == "Y"))
                                    {
                                        /*
                                        double gl = 0;
                                        bool pf = false;
                                        frmPOSGallonEntryDlg fgaldlg = new frmPOSGallonEntryDlg();
                                        try
                                        {
                                            fgaldlg.ShowDialog();
                                            if (fgaldlg.DialogResult == DialogResult.OK)
                                            {
                                                pf = true;
                                                gl = fgaldlg.Gallon;
                                            }
                                        }
                                        finally
                                        {
                                            fgaldlg.Dispose();
                                        }
                                        if (!pf) return;

                                        if (refPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                            if (promptPrice == -99999) return;

                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[] 
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                      await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                      refType,refOHQty,refNQty,refCost,gl,promptPrice,refNPrice,gl*promptPrice,"0","0","0","","","","",
                                      GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                      "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                     promptPrice,gl*promptPrice});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (promptPrice - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";


                                                dtblPOS.Rows.Add(new object[] 
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                      linetxt,
                                      refType,refOHQty,refNQty,refCost,gl,promptPrice,refNPrice,gl*newpretaxamt,"0","0","0","","","","",
                                      GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                      "1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                      "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                      promptPrice,gl*newpretaxamt});

                                            }

                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                            PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);
                                        }
                                        else
                                        {
                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[] 
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                              refType,refOHQty,refNQty,refCost,gl,refPrice,refNPrice,gl*GeneralFunctions.fnDouble(refPrice),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                              "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,gl*GeneralFunctions.fnDouble(refPrice)});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";




                                                dtblPOS.Rows.Add(new object[] 
                                            {  await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                                linetxt,
                                              refType,refOHQty,refNQty,refCost,gl,refPrice,refNPrice,gl*newpretaxamt,"0","0","0","","","","",GetUniqueString(),refDP,
                                              "", MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                              "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                              refPrice,gl*newpretaxamt});

                                            }



                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);
                                        }*/
                                    }
                                    else
                                    {
                                        if (refPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                            if (promptPrice == -99999) return;

                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * promptPrice),"0","0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                              "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * promptPrice),refUOM,"","","","","N"});
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (promptPrice - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";


                                                dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              linetxt,
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * newpretaxamt),"0","0","0","","","","",
                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                              "1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                              "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * newpretaxamt),refUOM,"","","","","N"});

                                            }
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                            PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                        else
                                        {
                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                            {
                                                var one = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID);
                                                var two = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                                dtblPOS.Rows.Add(new object[]
                                            { one,
                                                two,
                                      refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                                      "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                      "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      refPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"}
                                            );
                                            }
                                            else
                                            {
                                                double discntamt = 0;
                                                string damt = "0";
                                                double newpretaxamt = 0;
                                                string amtstr = "";
                                                if (MixMatchCat == "N")  // Normal Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                }

                                                if (MixMatchCat == "P")  // Plus Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                    amtstr = "";
                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                    damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                                }

                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                {
                                                    discntamt = 0;
                                                    discntamt = MixMatchVal - MixMatchPartPrice;
                                                    damt = "0";
                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                    newpretaxamt = 0;
                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                    damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                    amtstr = "";
                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                }

                                                string linetxt = "";
                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";




                                                dtblPOS.Rows.Add(new object[]
                                            {  await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        linetxt,
                                      refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt),"0","0","0","","","","",GetUniqueString(),refDP,
                                      "", MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                      "1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                      "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      refPrice,Convert.ToDecimal(intPressQty*newpretaxamt),refUOM,"","","","","N"});

                                            }


                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }
                                    SetCartDisplay();
                                    gridControl1.ItemsSource = dtblPOS;
                                    ToggleWithEmptyCart();
                                    gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;

                                    if (Settings.PriceLevelForOneTime == "Y")
                                    {
                                        Settings.PriceLevelForOneTime = "N";
                                        intUsePriceLevel = Settings.UsePriceLevel;
                                    }
                                }
                                else
                                {
                                    SetCartDisplay();
                                    gridControl1.ItemsSource = dtblPOS;
                                    ToggleWithEmptyCart();
                                    gridView1.FocusedRowHandle = intfocusrow;
                                }
                            }


                            else if (strCurrentServiceType == "Rent")
                            {
                                if (!blfinddata)
                                {
                                    if (refType == "U")
                                    {
                                        if (refRentPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)
                                                + " * " + strUOMDesc, dblRentValue);
                                            if (promptPrice == -99999) return;

                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                            await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                            refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),strUOMCount,
                            strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0",
                            "N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                            0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                            promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", promptPrice.ToString(), ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                        else
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),strUOMCount,
                              strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0",
                              "N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", strUOMPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }

                                    else if (refType == "E")
                                    {
                                        if (refRentPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), dblRentValue);
                                            if (promptPrice == -99999) return;

                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),strSLID,
                              "0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                        else
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),strSLID,
                              "0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }

                                    else if (refType == "M")
                                    {
                                        if (refRentPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), dblRentValue);
                                            if (promptPrice == -99999) return;
                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),"0","0","0",
                              strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                        else
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),
                              "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0",
                              "","","","0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                            PgridView1, colIMDesc), "1", refPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }
                                    else
                                    {
                                        if (refRentPrompt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), dblRentValue);
                                            if (promptPrice == -99999) return;

                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),"0","0","0",
                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                            PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                        else
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),"0","0","0",
                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }
                                    SetCartDisplay();
                                    gridControl1.ItemsSource = dtblPOS;
                                    ToggleWithEmptyCart();
                                    gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;

                                    if (Settings.PriceLevelForOneTime == "Y")
                                    {
                                        Settings.PriceLevelForOneTime = "N";
                                        intUsePriceLevel = Settings.UsePriceLevel;
                                    }
                                }
                                else
                                {
                                    SetCartDisplay();
                                    gridControl1.ItemsSource = dtblPOS;
                                    ToggleWithEmptyCart();
                                    gridView1.FocusedRowHandle = intfocusrow;
                                }

                                int rwindx = -1;
                                foreach (DataRowView drv in dtblPOS.DefaultView)
                                {
                                    rwindx++;
                                    if ((drv["ITEMINDEX"].ToString() == "1") && (drv["SERVICE"].ToString() == "Rent"))
                                    {
                                        gridControl1.SetCellValue(rwindx, colProduct, drv["PRODUCT"].ToString().Replace("\n", "") + "\n");
                                    }
                                }
                            }


                            else if (strCurrentServiceType == "Repair")
                            {
                                if (!blfinddata)
                                {
                                    if (refRepairPromptTag == "Y")
                                    {
                                        //Block
                                        /*
                                        frmPOSRepairItemInfoDlg frm_POSRepairItemInfoDlg = new frmPOSRepairItemInfoDlg();
                                        try
                                        {
                                            frm_POSRepairItemInfoDlg.ShowDialog();
                                            if (frm_POSRepairItemInfoDlg.DialogResult == DialogResult.OK)
                                            {
                                                strRepairItemTag = frm_POSRepairItemInfoDlg.RepairItemTag;
                                                strRepairItemSlNo = frm_POSRepairItemInfoDlg.RepairItemSlNo;
                                                if (frm_POSRepairItemInfoDlg.RepairItemPurchaseDate == Convert.ToDateTime(null)) strRepairItemPurchaseDate = "";
                                                else strRepairItemPurchaseDate = frm_POSRepairItemInfoDlg.RepairItemPurchaseDate.ToString("d");
                                            }
                                            else return;
                                        }
                                        finally
                                        {
                                            frm_POSRepairItemInfoDlg.Dispose();
                                        }*/
                                    }



                                    if (refType == "U")
                                    {
                                        if (refRepairPromptAmt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, GeneralFunctions.fnDouble(refPrice));
                                            if (promptPrice == -99999) return;

                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                            await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                            refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                            GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                            0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                            promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", promptPrice.ToString(), ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                        else
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", strUOMPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }

                                    else if (refType == "E")
                                    {
                                        if (refRepairPromptAmt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                            if (promptPrice == -99999) return;

                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strSLID,"0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                        else
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),strSLID,"0","0","","","","",GetUniqueString(),
                              refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }

                                    else if (refType == "M")
                                    {
                                        if (refRepairPromptAmt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                            if (promptPrice == -99999) return;
                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,refPrice,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,
                              strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                        else
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                            PgridView1, colIMDesc), "1", refPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }
                                    else
                                    {
                                        if (refRepairPromptAmt == "Y")
                                        {
                                            double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                            if (promptPrice == -99999) return;

                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),"0","0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});

                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                            PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                        else
                                        {
                                            dtblPOS.Rows.Add(new object[]
                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                            /*
                                            line1 = "";
                                            line2 = "";
                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                            DisplayPoleText(2, "N", "N", line1, line2);*/
                                        }
                                    }
                                    SetCartDisplay();
                                    gridControl1.ItemsSource = dtblPOS;
                                    ToggleWithEmptyCart();
                                    gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                                    await SetCurrentRow1(dtblPOS.Rows.Count - 1);

                                    if (Settings.PriceLevelForOneTime == "Y")
                                    {
                                        Settings.PriceLevelForOneTime = "N";
                                        intUsePriceLevel = Settings.UsePriceLevel;
                                    }
                                }
                                else
                                {
                                    SetCartDisplay();
                                    gridControl1.ItemsSource = dtblPOS;
                                    ToggleWithEmptyCart();
                                    await SetCurrentRow1(intfocusrow);
                                    //gridView1.FocusedRowHandle = intfocusrow;
                                }
                            }
                        }
                    }


                    /// Set UP/Down Button to move cursor through Cart Item

                    EnableDisableButton(btnUP, btnDown, gridControl1);

                    /// Automatic Discount Add in Cart

                    if (strCurrentServiceType == "Sales")
                        await AddAutoDiscountInCart(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)), SaleID > 0 ? false : true);

                    /// Automatic Fees and Charge Add in Cart

                    await AddAutoFeesInCart(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)));

                    /// Automatic Mix n Match in Cart

                    if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();

                    if (strCurrentServiceType == "Sales")
                    {
                        CheckAndExecuteReorderStockAlert(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)));
                    }

                    SetCartDisplay();
                    gridControl1.ItemsSource = dtblPOS;
                    ToggleWithEmptyCart();
                    GetTotal(); /// Calculate and Display Cart Total
                    ShowTax();  /// Calculate and Display Taxes of Cart Items
                    ResetQty(); /// Reset Item Quantity
                    //gridControl1.RefreshData();

                    //tcPOS.SelectedIndex = 0;

                    //gridControl1.Focus();
                    gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                }
            }
        }

        private async void BtnDiscount1_Click(object sender, RoutedEventArgs e)
        {
            await btnItemDiscountClick(sender, e);
        }

        private void Grid_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {

        }

        private void ECR1_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (MoreButton1.Visibility == Visibility.Collapsed)
            {
                MoreButton1.Visibility = Visibility.Visible;

                imgEC1.Source = this.FindResource("DownGold") as ImageSource;
                imgEC2.Source = this.FindResource("UpGold") as ImageSource;
            }
            else
            {
                MoreButton1.Visibility = Visibility.Collapsed;

                imgEC1.Source = this.FindResource("UpGold") as ImageSource;
                imgEC2.Source = this.FindResource("DownGold") as ImageSource;
            }
        }

        private async void btnEditCustNew_Click(object sender, RoutedEventArgs e)
        {
            if ((grdCustomer.ItemsSource as DataTable).Rows.Count == 0) return;
            //int RH = CgridView1.GetRowHandleByMouseEventArgs(e);
            clickTimer.Start();
            e.Handled = true;
            //if (!grdCustomer.IsGroupRowHandle(RH))
            {
                await EditCustomer();
            }
        }

        private async void CgridView1_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            int RH = CgridView1.GetRowHandleByMouseEventArgs(e);

            if ((grdCustomer.ItemsSource as DataTable).Rows.Count == 0) return;
            if (e.ClickCount == 1)
            {
                clickTimer.Start();
                e.Handled = true;
                if (!grdCustomer.IsGroupRowHandle(RH))
                {
                    bool blflag = false;
                    if (grdCustomer.CurrentColumn.Name == "colSalutation")
                    {
                        string val = await GeneralFunctions.GetCellValue1(RH, grdCustomer, colSalutation);
                        if (val == "E") blflag = true;
                    }
                    foreach (DataRow dr in (grdCustomer.ItemsSource as DataTable).Rows)
                    {
                        dr["CustomC"] = "X";
                    }
                    grdCustomer.SetCellValue(RH, colSalutation, "E");

                    if ((grdCustomer.CurrentColumn.Name == "colSalutation") && (blflag))
                    {
                        await EditCustomer();
                    }
                    //DocMessage.MsgInformation("Click");
                }
            }
            if (e.ClickCount == 2)
            {
                if (!grdCustomer.IsGroupRowHandle(RH))
                {
                    grdCustomer.SetCellValue(RH, colSalutation, "X");

                    if (CgridView1.FocusedRowHandle > -1)
                    {
                        if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(CgridView1.FocusedRowHandle, grdCustomer, colCMID)) != intCustID)
                        {
                            blChangeCustomer = true;
                            string refTaxExempt = "";
                            string refDiscountLevel = "";
                            string refTaxID = "";
                            string refStoreCr = "";
                            string refCID = "";
                            string refCName = "";
                            string refCAdd = "";
                            double dblBalance = 0;
                            string refARCredit = "";
                            string refPOSNotes = "";

                            int refDTaxID = 0;
                            string refDTax = "";
                            double refDTaxRate = 0;
                            int refDTaxType = 0;

                            intCustID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(CgridView1.FocusedRowHandle, grdCustomer, colCMID));

                            FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd, ref refTaxExempt, ref refDiscountLevel, ref refTaxID,
                                            ref refStoreCr, ref refARCredit, ref refPOSNotes, ref refDTaxID, ref refDTax, ref refDTaxRate, ref refDTaxType);

                            CustDTaxID = refDTaxID;
                            CustDTaxName = refDTax;
                            CustDTaxRate = refDTaxRate;
                            CustDTaxType = refDTaxType;
                            strTaxExempt = refTaxExempt;
                            strDiscountLevel = refDiscountLevel.Trim();
                            if (strDiscountLevel == "") strDiscountLevel = "A";
                            dblBalance = GetAccountBalance(intCustID);
                            txtCust.Text = refCID;
                            if (Settings.CentralExportImport == "Y")
                            {
                                if (cmbStore.EditText == Settings.StoreCode) txtCustStore.Text = "";
                                else txtCustStore.Text = cmbStore.EditText;
                            }
                            //lbCustID.Text = "Customer ID : " + refCID;
                            strCustomerID = refCID;
                            lbCustName.Text = refCName;

                            /*DisplayPoleText(2, "N", "N", "welcome", refCName);

                            lbCustAddress.Text = refCAdd;
                            ArrangeCustomerLine(refCName, GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                            lbCustNotes.Text = refPOSNotes;
                            blCustNotes = refPOSNotes != "";
                            ShowCustomerPhoto();*/
                            FetchCustomerNote("", "Customer", intCustID, DateTime.Today.Year, DateTime.Today.Month);
                            if (blCustNotes) lbcustinfo2.Text = "Check 'Cust Notes' Apps";
                            dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                            dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                            dblCustAcctBalance = dblBalance;
                            RearrangeProductAsCustomerChange();

                            int i = -1;
                            foreach (DataRowView dr in dtblPOS.DefaultView)
                            {
                                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                                || (dr["PRODUCTTYPE"].ToString() == "U") || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "W")
                                || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                                i++;
                                AddAutoDiscountInCart_OnCustomerChange(GeneralFunctions.fnInt32(dr["ID"].ToString()), GeneralFunctions.fnInt32(dr["SALEPRICEID"].ToString()) > 0 ? false : true, i);
                            }
                            SetCartDisplay();
                            GetTotal();
                            ShowTax();
                            ResetQty();
                            //gridControl1.RefreshData();

                            //Block
                            /*
                            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                            {
                                int fval = GridView.FocusedRowHandle;
                                //if ((sm as SecondMonitor) == null) sm = new SecondMonitor(true);

                                SecondMonitor.InsertItem(dtblPOS, fval, lbCustName.Text.Trim(), numSubTotal.Value, numDiscount.Value, numTax.Value, numTotal.Value, dblRentSecurityDeposit, dblCouponAmount, dblFeesCrg);
                            }*/


                            pnlCust.Visibility = System.Windows.Visibility.Visible;

                            ChangeMenuButtonColor("Cart");
                            tcPOS.SelectedIndex = 0;
                            boolLoadAllItem = false;
                            //await LoadPOSButtons();
                            LoadPOSButtons();
                        }
                    }

                }
                clickTimer.Stop();
            }
        }


        private async Task EditCustomer()
        {
            if ((SecurityPermission.AcssCustomerEdit) || (SystemVariables.CurrentUserID <= 0))
            {
                int intNewRecID = 0;
                int intRowID = -1;
                intRowID = CgridView1.FocusedRowHandle;
                if ((grdCustomer.ItemsSource as DataTable).Rows.Count == 0) return;

                //if (strcd != Settings.StoreCode) return;
                (Window.GetWindow(this) as MainWindow).blurGrid.Visibility = Visibility.Visible;
                frm_CustomerDlg frm_CustomerDlg = new frm_CustomerDlg();
                try
                {
                    frm_CustomerDlg.ID = await ReturnRowIDCustomer();
                    if (frm_CustomerDlg.ID > 0)
                    {
                        //frm_CustomerDlg.ShowData();
                        frm_CustomerDlg.Duplicate = false;
                        frm_CustomerDlg.AddFromPOS = false;
                        frm_CustomerDlg.bPOS = true;
                        frm_CustomerDlg.OtherStoreRecord = false;
                        frm_CustomerDlg.ShowDialog();
                        intNewRecID = frm_CustomerDlg.ID;
                    }
                }
                finally
                {
                    (Window.GetWindow(this) as MainWindow).blurGrid.Visibility = Visibility.Collapsed;
                    FetchCustomerData();
                }
                await SetCurrentRowCustomer(intNewRecID);
            }
            else
            {
                DocMessage.MsgPermission();
            }
        }


        public async Task<int> ReturnRowIDCustomer()
        {
            int intRowID = -1;
            int intRecID = -1;
            if ((grdCustomer.ItemsSource as DataTable).Rows.Count == 0) return intRecID;
            if (CgridView1.FocusedRowHandle < 0) return intRecID;
            intRowID = CgridView1.FocusedRowHandle;
            intRecID = GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(intRowID, grdCustomer, colCMID)));
            return intRecID;
        }

        public async Task SetCurrentRowCustomer(int RecordID)
        {
            int intRecID = 0;
            int intColCtr = 0;
            for (intColCtr = 0; intColCtr < (grdCustomer.ItemsSource as DataTable).Rows.Count; intColCtr++)
            {
                intRecID = GeneralFunctions.fnInt32((await GeneralFunctions.GetCellValue1(intColCtr, grdCustomer, colCMID)));
                if (RecordID == intRecID) break;
            }
            if (intColCtr >= 0) gridView1.FocusedRowHandle = intColCtr;
        }

        private async void PgridView1_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            int RH = PgridView1.GetRowHandleByMouseEventArgs(e);

            if ((grdProduct.ItemsSource as DataTable).Rows.Count == 0) return;
            if (e.ClickCount == 1)
            {
                clickTimer1.Start();
                e.Handled = true;
                if (!grdProduct.IsGroupRowHandle(RH))
                {
                    bool blflag = false;
                    if (grdProduct.CurrentColumn.Name == "colIMType1")
                    {
                        string val = await GeneralFunctions.GetCellValue1(RH, grdProduct, colIMType1);
                        if (val == "E") blflag = true;
                    }
                    foreach (DataRow dr in (grdProduct.ItemsSource as DataTable).Rows)
                    {
                        dr["CustomI"] = "X";
                    }
                    grdProduct.SetCellValue(RH, colIMType1, "E");

                    if ((grdProduct.CurrentColumn.Name == "colIMType1") && (blflag))
                    {
                        if ((!SecurityPermission.AcssProductEdit) && (SystemVariables.CurrentUserID > 0))
                        {
                            DocMessage.MsgPermission();
                            return;
                        }
                        await EditProcess();
                    }
                    //DocMessage.MsgInformation("Click");
                }
            }
            if (e.ClickCount == 2)
            {
                if (!grdProduct.IsGroupRowHandle(RH))
                {
                    grdProduct.SetCellValue(RH, colIMType1, "X");

                    if (PgridView1.FocusedRowHandle > -1)
                    {
                        if (GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)) > 0)
                        {
                            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                            {
                                //SecondMonitor.ClearWeightInfo();
                            }
                            if ((intCustID == 0) && (Settings.CustomerInfo == 2))
                            {
                                if (dtblPOS.Rows.Count == 0)
                                {
                                    DocMessage.MsgInformation("Enter valid customer before ringing item");
                                    GeneralFunctions.SetFocus(txtCust);
                                    return;
                                }
                            }

                            if (strCurrentServiceType == "Sales")
                            {
                                if ((blReturnItem) && (dtblPOS.Rows.Count > 0)) return;
                                else if ((blReturnItem) && (dtblPOS.Rows.Count == 0))
                                {
                                    blReturnItem = false;
                                }
                            }
                            if (strCurrentServiceType == "Rent")
                            {
                                if ((blRentRecall) && (dtblPOS.Rows.Count > 0)) return;
                                else if ((blRentRecall) && (dtblPOS.Rows.Count == 0))
                                {
                                    blRentRecall = false;
                                    blRentIssued = true;
                                }
                                else if ((await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Service") ||
                                    (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Weighted")) return;
                            }
                            if (strCurrentServiceType == "Repair")
                            {
                                if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Weighted") return;
                            }



                            bool blExit = false;

                            int intRowID = 0;
                            if ((grdProduct.ItemsSource as DataTable).Rows.Count == 0) return;
                            intRowID = PgridView1.FocusedRowHandle;

                            if (intRowID < 0) return;
                            string line1 = "";
                            string line2 = "";
                            bool blfinddata = false;

                            string strselectid = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID);

                            string refType = "";
                            string refOHQty = "";
                            string refNQty = "";
                            string refPrice = "";
                            string refNPrice = "";
                            string refCost = "";
                            string refPrompt = "";
                            string refDP = "";
                            string refAge = "";
                            string refRentMI = "";
                            string refRentHR = "";
                            string refRentHDY = "";
                            string refRentDY = "";
                            string refRentWK = "";
                            string refRentMN = "";
                            string refRentDeposit = "";
                            string refRentMinHR = "";
                            string refRentMinAmt = "";
                            string refRentPrompt = "";
                            string refRepairAmt = "";
                            string refRepairPromptAmt = "";
                            string refRepairPromptTag = "";
                            int MixMatchID = 0;
                            string MixMatchFlag = "N";
                            string MixMatchCat = "";
                            string MixMatchType = "";
                            double MixMatchVal = 0;
                            int MixMatchPlus = 0;
                            double MixMatchPartPrice = 0;
                            bool MixMatchApplicableLast = false;

                            int SaleID = 0;
                            double SalePrice = 0;
                            int iAge = 0;
                            string refUOM = "";
                            string refExpiry = "";
                            FetchProduct(GeneralFunctions.fnInt32(strselectid), strDiscountLevel.Trim(), intUsePriceLevel, ref refType, ref refOHQty,
                                            ref refNQty, ref refPrice, ref refNPrice, ref refCost, ref refPrompt, ref refDP, ref refAge, ref refRentMI,
                                            ref refRentHR, ref refRentHDY, ref refRentDY, ref refRentWK, ref refRentMN, ref refRentDeposit, ref refRentMinHR, ref refRentMinAmt,
                                            ref refRentPrompt, ref refRepairAmt, ref refRepairPromptAmt, ref refRepairPromptTag, ref refUOM, ref refExpiry);

                            //Block if (!GeneralFunctions.ProceedFromItemImage(GeneralFunctions.fnInt32(strselectid))) return;


                            int TSaleID = 0;
                            double TSalePrice = 0;
                            int TMixMatchID = 0;

                            DataTable dtblBuyGetFree = new DataTable();
                            int TBuyNFreeID = 0;
                            int TBuyNFreeQty = 0;
                            bool TBuyNFreeProceed = false;
                            ArrayList TBuyNFree_ItemToBeDeletedFirst = new ArrayList();

                            /// For Sale, before adding an item into cart, first check if active sale price is present or not. If not present then check Mix n Match. 
                            /// If active Mix n Match found, then cart added with Mix n Match data.
                            /// If no active Mix n Match found then check for Buy n Get Free promotion, if satisfied then Buy n Get Free data will the added into cart

                            if (strCurrentServiceType == "Sales")
                            {
                                FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref TSaleID, ref TSalePrice);
                                if (TSaleID == 0)
                                {
                                    PosDataObject.POS objPOS = new PosDataObject.POS();
                                    objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                    TMixMatchID = objPOS.ActiveMixNMatch(GeneralFunctions.fnInt32(strselectid));
                                }

                                if (TMixMatchID == 0)
                                {
                                    dtblBuyGetFree = CheckIfActiveBuyNGetFree(GeneralFunctions.fnInt32(strselectid));
                                    if (dtblBuyGetFree.Rows.Count > 0)
                                    {
                                        TBuyNFreeProceed = CheckCartForProceedBuyNGetFree(GeneralFunctions.fnInt32(strselectid), dtblBuyGetFree, ref TBuyNFreeID, ref TBuyNFreeQty, ref TBuyNFree_ItemToBeDeletedFirst);
                                    }
                                    else
                                    {
                                        TBuyNFreeProceed = false;
                                    }
                                }


                                if (TBuyNFreeProceed)
                                {
                                    AddBuyNGetFreeQty(GeneralFunctions.fnInt32(strselectid), await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), TBuyNFreeID, TBuyNFreeQty, TBuyNFree_ItemToBeDeletedFirst, TSaleID, TSalePrice);
                                }
                            }

                            if (!TBuyNFreeProceed)
                            {
                                if ((strCurrentServiceType == "Sales") && (TMixMatchID > 0))
                                {
                                    for (int lp = 1; lp <= intPressQty; lp++)
                                    {
                                        await SelectProductBrowseMixMatch();
                                    }
                                }
                                else
                                {

                                    if ((refType == "P") || (refType == "M") || (refType == "K") || (refType == "U")
                                                || (refType == "W") || (refType == "E") || (refType == "F") || (refType == "S") || (refType == "T"))
                                    {
                                        if (strCurrentServiceType == "Sales")
                                        {
                                            FetchActiveSale(GeneralFunctions.fnInt32(strselectid), ref SaleID, ref SalePrice);
                                            if (SaleID == 0)
                                            {
                                                FetchMix_n_Match(GeneralFunctions.fnInt32(strselectid), ref MixMatchID, ref MixMatchFlag, ref MixMatchCat,
                                                                    ref MixMatchType, ref MixMatchVal, ref MixMatchPlus, ref MixMatchPartPrice, ref MixMatchApplicableLast);

                                                // MixMatchFlag = N / Y - Not Applicable / Applicale
                                                // MixMatchCat = N / P - Normal Pricing / Plus Pricing
                                                // MixMatchType = P/A - % off / Amount off
                                            }
                                        }
                                    }

                                    if (strCurrentServiceType == "Rent")
                                    {
                                        if (blRentRecall) return;
                                        else if ((refType == "S") || (refType == "W")) return;
                                    }
                                    if (strCurrentServiceType == "Repair")
                                    {
                                        //if (blRepairRecall) return;
                                        //else if ((refType == "S") || (refType == "W")) return;
                                        if (refType == "W") return;
                                    }

                                    if (Settings.POSIDRequired == "Y")
                                    {
                                        if (GeneralFunctions.fnInt32(refAge) > 0)
                                        {
                                            iAge = GeneralFunctions.fnInt32(refAge);
                                            if (!AgeCheck(DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)))) return;
                                            //if (MyMessageBox.ShowBox(Translation.SetMultilingualTextInCodes("Minimum Age ", "frmPOSN_msg_MinimumAge") + refAge + Translation.SetMultilingualTextInCodes(" : Birthday on or before ", "frmPOSN_msg_Birthdayonorbefore") + DateTime.Today.AddYears(-GeneralFunctions.fnInt32(refAge)).ToString("MM/dd/yyyy"), Translation.SetMultilingualTextInCodes("Age Verification", "frmPOSN_msg_AgeVerification"), MessageBoxButtons.OKCancel, MessageBoxIcon.Information) == DialogResult.Cancel) return;
                                        }
                                    }

                                    string strUOMCount = "";
                                    string strUOMPrice = "";
                                    string strUOMDesc = "";

                                    string strMatxOID = "";
                                    string strMatxOV1 = "";
                                    string strMatxOV2 = "";
                                    string strMatxOV3 = "";
                                    string strSLID = "0";


                                    if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Unit of Measure")
                                    {
                                        blurGrid.Visibility = Visibility.Visible;
                                        frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                                        try
                                        {
                                            frm_POSProductAddnDlg.ProductType = "Unit of Measure";
                                            frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                                grdProduct, colIMID));
                                            frm_POSProductAddnDlg.Heading = "Unit of Measure Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                                grdProduct, colIMDesc);
                                            frm_POSProductAddnDlg.ShowDialog();
                                            if (frm_POSProductAddnDlg.DialogResult == true)
                                            {
                                                strUOMCount = frm_POSProductAddnDlg.UOMCount;
                                                strUOMPrice = frm_POSProductAddnDlg.UOMPrice;
                                                strUOMDesc = frm_POSProductAddnDlg.UOMDesc;
                                            }
                                            else blExit = true;
                                        }
                                        finally
                                        {
                                            frm_POSProductAddnDlg.Close();
                                            blurGrid.Visibility = Visibility.Collapsed;
                                        }
                                        if (blExit)
                                        {
                                            return;
                                        }
                                    }

                                    if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Matrix")
                                    {
                                        blurGrid.Visibility = Visibility.Visible;
                                        frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                                        try
                                        {
                                            frm_POSProductAddnDlg.ProductType = "Matrix";
                                            frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                            frm_POSProductAddnDlg.Heading = " Matrix Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                            frm_POSProductAddnDlg.ShowDialog();
                                            if (frm_POSProductAddnDlg.DialogResult == true)
                                            {
                                                strMatxOID = frm_POSProductAddnDlg.MatrixOID;
                                                strMatxOV1 = frm_POSProductAddnDlg.MatrixOV1;
                                                strMatxOV2 = frm_POSProductAddnDlg.MatrixOV2;
                                                strMatxOV3 = frm_POSProductAddnDlg.MatrixOV3;
                                            }
                                            else blExit = true;
                                        }
                                        finally
                                        {
                                            frm_POSProductAddnDlg.Close();
                                            blurGrid.Visibility = Visibility.Collapsed;
                                        }
                                        if (blExit)
                                        {
                                            return;
                                        }
                                    }

                                    if (await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMType) == "Serialized")
                                    {
                                        blurGrid.Visibility = Visibility.Visible;
                                        frm_POSProductAddnDlg frm_POSProductAddnDlg = new frm_POSProductAddnDlg();
                                        try
                                        {
                                            frm_POSProductAddnDlg.ProductType = "Serialized";
                                            frm_POSProductAddnDlg.dtblS = dtblPOS;
                                            frm_POSProductAddnDlg.PID = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                            frm_POSProductAddnDlg.Heading = "Serialized Data :" + " " + await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                            frm_POSProductAddnDlg.ShowDialog();
                                            if (frm_POSProductAddnDlg.DialogResult == true)
                                            {
                                                strSLID = frm_POSProductAddnDlg.SLID;
                                            }
                                            else blExit = true;
                                        }
                                        finally
                                        {
                                            frm_POSProductAddnDlg.Close();
                                            blurGrid.Visibility = Visibility.Collapsed;
                                        }
                                        if (blExit)
                                        {
                                            return;
                                        }
                                    }

                                    /*if (intCustID != 0)
                                    {
                                        if (GeneralFunctions.fnDouble(refPrice) == 0) refPrice = refNPrice;
                                    }*/

                                    int intfocusrow = 0;
                                    double dblRate = 0;
                                    double dblPrice = 0;

                                    //if (strCurrentServiceType != "Repair")
                                    //{
                                    if (!CheckStock(GeneralFunctions.fnInt32(strselectid), 1, strMatxOID, strMatxOV1, strMatxOV2, strMatxOV3))
                                    {
                                        DocMessage.MsgInformation("No Stock available!");
                                        return;
                                    }
                                    //}

                                    string strRentType = "NA";
                                    double dblRentDuration = 0;
                                    double dblRentValue = 0;
                                    double dblRentDeposit = 0;

                                    //Block
                                    /*
                                    if (strCurrentServiceType == "Rent")
                                    {
                                        if (!blRentRecall)
                                        {
                                            frmPOSRentalSelectDlg frmrentsel = new frmPOSRentalSelectDlg();
                                            try
                                            {
                                                frmrentsel.PID = GeneralFunctions.fnInt32(strselectid);
                                                frmrentsel.ShowDialog();
                                                if (frmrentsel.DialogResult == DialogResult.OK)
                                                {
                                                    strRentType = frmrentsel.RentType;
                                                    dblRentDuration = frmrentsel.RentDuration;
                                                    dblRentValue = frmrentsel.RentValue;
                                                    dblRentDeposit = frmrentsel.RentDeposit;
                                                }
                                                else blExit = true;
                                            }
                                            finally
                                            {
                                                frmrentsel.Dispose();
                                            }
                                            if (blExit) return;
                                        }
                                    }
                                    */
                                    string strRepairItemTag = "";
                                    string strRepairItemSlNo = "";
                                    string strRepairItemPurchaseDate = "";


                                    if (strCurrentServiceType == "Sales")
                                    {
                                        if (SaleID > 0)
                                        {
                                            refPrompt = "N";
                                            refPrice = SalePrice.ToString();
                                            if (refType == "U") strUOMPrice = SalePrice.ToString();
                                        }

                                        if (!blfinddata)
                                        {
                                            if (refType == "U")
                                            {
                                                if (refPrompt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, GeneralFunctions.fnDouble(strUOMPrice));

                                                    if (promptPrice == -99999) return;

                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                    {
                                                        dtblPOS.Rows.Add(new object[]
                                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                    "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});

                                                    }
                                                    else
                                                    {
                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;

                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }


                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc + "\n";


                                                        dtblPOS.Rows.Add(new object[]
                                                    {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * promptPrice),strUOMCount,newpretaxamt.ToString(),strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty * promptPrice),refUOM,"","","","","N"});
                                                        /*
                                                        line1 = "";
                                                        line2 = "";
                                                        RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", promptPrice.ToString(), ref line1, ref line2);
                                                        DisplayPoleText(2, "N", "N", line1, line2);*/
                                                    }
                                                }
                                                else
                                                {
                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                    {
                                                        dtblPOS.Rows.Add(new object[]
                                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                                    refType,refOHQty,refNQty,refCost,intPressQty,strUOMPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    strUOMPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),refUOM,"","","","","N"});
                                                    }
                                                    else
                                                    {
                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(strUOMPrice), MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (GeneralFunctions.fnDouble(strUOMPrice) - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (GeneralFunctions.fnDouble(strUOMPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }


                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc + "\n";

                                                        dtblPOS.Rows.Add(new object[]
                                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,strUOMPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),strUOMCount,newpretaxamt.ToString(),strUOMDesc,"","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    strUOMPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(strUOMPrice)),refUOM,"","","","","N"});
                                                    }
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", strUOMPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }

                                            else if (refType == "E")
                                            {
                                                if (refPrompt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));

                                                    if (promptPrice == -99999) return;

                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                    {
                                                        dtblPOS.Rows.Add(new object[]
                                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strSLID,"0","0","","","","",
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0
                                    ,MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                                    }
                                                    else
                                                    {
                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }

                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                        dtblPOS.Rows.Add(new object[]
                                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),strSLID,"0","0","","","","",
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0
                                    ,MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                    promptPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),refUOM,"","","","","N"});

                                                        /*
                                                        line1 = "";
                                                        line2 = "";

                                                        RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                                        DisplayPoleText(2, "N", "N", line1, line2);*/
                                                    }
                                                }

                                                else
                                                {
                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                    {
                                                        dtblPOS.Rows.Add(new object[]
                                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),strSLID,"0","0","","","","",GetUniqueString(),
                                    refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                                    }
                                                    else
                                                    {
                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }

                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                        dtblPOS.Rows.Add(new object[]
                                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    linetxt,
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),strSLID,"0","0","","","","",GetUniqueString(),
                                    refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                    "1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty*newpretaxamt).ToString(),refUOM,"","","","","N"});
                                                    }

                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }
                                            else if (refType == "M")
                                            {
                                                if (refPrompt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));

                                                    if (promptPrice == -99999) return;

                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                    {
                                                        dtblPOS.Rows.Add(new object[]
                                                {
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * promptPrice),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,
                                strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                promptPrice,Convert.ToDecimal(intPressQty * promptPrice),refUOM,"","","","","N"});
                                                    }
                                                    else
                                                    {

                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }

                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                        dtblPOS.Rows.Add(new object[]
                                                {
                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                linetxt,
                                refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * newpretaxamt),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,
                                strMatxOV3,GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                promptPrice,Convert.ToDecimal(intPressQty * newpretaxamt),"","","","","N"});
                                                    }
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                                else
                                                {
                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                    {
                                                        dtblPOS.Rows.Add(new object[]
                                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                    GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                    "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                                    }
                                                    else
                                                    {
                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }

                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                        dtblPOS.Rows.Add(new object[]
                                                {
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                    refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                                    GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                    strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                    dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                    MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                    "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                    refPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                                    }
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                                    PgridView1, colIMDesc), "1", refPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }
                                            else if (refType == "W")
                                            {
                                                if (CheckForFixedWeight(intRowID))
                                                {
                                                    weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                                    weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                                    //weightitemid = intRowID;
                                                    //weightitemname = (sender as POSControls.POSItem).ItemName;
                                                    await AddFixedWeightedItem();
                                                }
                                                else
                                                {
                                                    if ((Settings.ScaleDevice == "Datalogic Scale") && (m_posScale != null))
                                                    {
                                                        try
                                                        {
                                                            weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                                            weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                                            //weightitemid = intRowID;
                                                            //weightitemname = (sender as POSControls.POSItem).ItemName;
                                                            weightstring = m_posScale.ReadWeight(20000).ToString();

                                                            double Tare = 0;

                                                            double Tr1 = 0;
                                                            double Tr2 = 0;
                                                            FetchTare(weightitemid, ref Tr1, ref Tr2);

                                                            Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);


                                                            if (blTareEntry)
                                                            {
                                                                Tare = dblTareEntryValue;
                                                            }

                                                            if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                            {
                                                                SecondMonitor.AddWeightInfo(GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()) + " " + m_posScale.WeightUnit.ToString(), Tare);
                                                            }

                                                            if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                            {
                                                                /*if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                                {
                                                                    SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + m_posScale.WeightUnit.ToString());
                                                                }*/
                                                                await AddWeightedItem();

                                                            }
                                                            else
                                                            {
                                                                DocMessage.MsgInformation(Properties.Resources.Invalid_scale_weight);
                                                                return;
                                                            }
                                                        }
                                                        catch
                                                        {
                                                            DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                            return;
                                                        }

                                                    }
                                                    else if ((Settings.ScaleDevice == "Kilotech") && (Settings.COMPort != "(None)"))
                                                    {
                                                        try
                                                        {
                                                            string wt = "";
                                                            blGetWeight = false;
                                                            if (IsActiveScale1())
                                                            {
                                                                if (s_wght != 0) wt = s_wght.ToString();
                                                                if (wt != "")
                                                                {
                                                                    weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                                                    weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                                                    //weightitemid = intRowID;
                                                                    //weightitemname = (sender as POSControls.POSItem).ItemName;
                                                                    weightstring = wt;
                                                                    weightuom = s_wght_u;
                                                                    double Tare = 0;
                                                                    double Tr1 = 0;
                                                                    double Tr2 = 0;
                                                                    FetchTare(weightitemid, ref Tr1, ref Tr2);

                                                                    Tare = GetTareOnWeight(GeneralFunctions.fnDouble(weightstring), Tr1, Tr2);

                                                                    if (blTareEntry)
                                                                    {
                                                                        Tare = dblTareEntryValue;
                                                                    }

                                                                    if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                                    {
                                                                        if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                                        {
                                                                            SecondMonitor.AddWeightInfo(GeneralFunctions.SetWeightAccuracy((GeneralFunctions.fnDouble(weightstring) - Tare).ToString()) + " " + s_wght_u, Tare);
                                                                        }

                                                                        await AddWeightedItem();


                                                                    }
                                                                    else
                                                                    {
                                                                        DocMessage.MsgInformation(Properties.Resources.No_scale_weight);
                                                                        return;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    blGetWeight = false;
                                                                    DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                                    return;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                                return;
                                                            }
                                                        }
                                                        catch
                                                        {
                                                            DocMessage.MsgInformation(Properties.Resources.Cannot_read_from_scale_device);
                                                            return;
                                                        }

                                                    }
                                                    else if ((Settings.ScaleDevice == "Live Weight") && (Settings.COMPort != "(None)"))
                                                    {
                                                        weightitemid = GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID));
                                                        weightitemname = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc);
                                                        await AddWeightedItem();
                                                        /*try
                                                        {
                                                            string wt = "";
                                                            blGetWeight = false;
                                                            if (s_wght != 0) wt = s_wght.ToString();
                                                            if (wt != "")
                                                            {
                                                                weightitemid = intRowID;
                                                                weightitemname = (sender as POSControls.POSItem).ItemName;
                                                                weightstring = wt;

                                                                double Tare = 0;
                                                                FetchTare(weightitemid, ref Tare);
                                                                if (GeneralFunctions.fnDouble(weightstring) - Tare > 0)
                                                                {
                                                                    if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                                    {
                                                                        SecondMonitor.AddWeightInfo((GeneralFunctions.fnDouble(weightstring) - Tare).ToString() + " " + s_wght_u);
                                                                    }

                                                                    AddWeightedItem();

                                                                }
                                                                else
                                                                {
                                                                    DocMessage.MsgInformation(Properties.Resources."No scale weight");
                                                                    return;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                blGetWeight = false;
                                                                DocMessage.MsgInformation(Properties.Resources."Cannot read from scale device");
                                                                return;
                                                            }
                                                        }
                                                        catch
                                                        {
                                                            DocMessage.MsgInformation(Properties.Resources."Cannot read from scale device");
                                                            return;
                                                        }*/

                                                    }
                                                    else if (Settings.ScaleDevice == "XEPOS")
                                                    {
                                                        string strfilename = "";
                                                        strfilename = System.AppDomain.CurrentDomain.BaseDirectory;
                                                        if (strfilename.EndsWith("\\"))
                                                        {
                                                            strfilename = strfilename + "Weight.exe";
                                                        }
                                                        else
                                                        {
                                                            strfilename = strfilename + "\\Weight.exe";
                                                        }
                                                        if (!System.IO.File.Exists(strfilename)) return;

                                                        blopenweight = true;
                                                        weightcallfrom = "POSItem";

                                                        weightitemid = intRowID;
                                                        weightitemname = (sender as POSControls.POSItem).ItemName;

                                                        Process p = new Process();
                                                        p.StartInfo.FileName = strfilename;
                                                        p.Start();
                                                    }
                                                    else
                                                    {
                                                        bool proceedflag = false;
                                                        double wqty = 0;
                                                        double wdisc = 0;
                                                        string val1 = "";
                                                        string val2 = "0";
                                                        string val3 = "0";
                                                        string val4 = "";
                                                        string val5 = "";

                                                        frmPOSItemDlg frm_POSItemDlg = new frmPOSItemDlg();
                                                        try
                                                        {

                                                            frm_POSItemDlg.BlankLine = false;
                                                            //Todo: frm_POSItemDlg.ParentForm = this;
                                                            frm_POSItemDlg.IsEdit = false;
                                                            frm_POSItemDlg.ServiceType = strCurrentServiceType;
                                                            frm_POSItemDlg.ProductDesc = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc); ;
                                                            frm_POSItemDlg.Qty = intPressQty;
                                                            frm_POSItemDlg.Price = GeneralFunctions.fnDouble(refPrice);
                                                            frm_POSItemDlg.Weighted = true;
                                                            frm_POSItemDlg.WeightedUOM = refUOM;
                                                            blurGrid.Visibility = Visibility.Visible;
                                                            frm_POSItemDlg.ShowDialog();
                                                            blurGrid.Visibility = Visibility.Collapsed;
                                                            if (frm_POSItemDlg.DialogResult == true)
                                                            {
                                                                proceedflag = true;
                                                                wqty = frm_POSItemDlg.Qty;
                                                                wdisc = frm_POSItemDlg.Discount;
                                                                if (!GeneralFunctions.IsValidScaleWeight_POS(wqty.ToString(), true)) return;
                                                                if (blTareEntry)
                                                                {
                                                                    wqty = wqty - dblTareEntryValue;
                                                                    if (wqty <= 0)
                                                                    {
                                                                        new MessageBoxWindow().Show(Properties.Resources.Enter_valid_weight, Properties.Resources.Weight_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        finally
                                                        {
                                                        }
                                                        if (!proceedflag) return;

                                                        if ((Settings.CheckSecondMonitor == "Y") && (System.Windows.Forms.Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                                        {
                                                            SecondMonitor.AddWeightInfo(GeneralFunctions.fnDouble(wqty).ToString(), 0);
                                                        }

                                                        if (wdisc > 0)
                                                        {
                                                            val1 = "A";
                                                            val2 = wdisc.ToString();
                                                            val3 = wdisc.ToString();
                                                            val4 = "9988";
                                                            val5 = Properties.Resources.Discount__.Replace("$", SystemVariables.CurrencySymbol) + wdisc.ToString("f");
                                                        }

                                                        if (refPrompt == "Y")
                                                        {
                                                            double promptPrice = GetPromptPrice((sender as POSControls.POSItem).ItemName, GeneralFunctions.fnDouble(refPrice));
                                                            if (promptPrice == -99999) return;

                                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable 
                                                            {
                                                                dtblPOS.Rows.Add(new object[]
                                                            {
                                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        wdisc == 0 ? await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) :
                                        await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n",
                                              refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * promptPrice - wdisc).ToString(),refUOM,"","","","","N"});
                                                            }
                                                            else
                                                            {
                                                                double discntamt = 0;
                                                                string damt = "0";
                                                                double newpretaxamt = 0;
                                                                string amtstr = "";
                                                                if (MixMatchCat == "N")  // Normal Pricing
                                                                {
                                                                    discntamt = 0;
                                                                    discntamt = calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                                                    damt = "0";
                                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                                    newpretaxamt = 0;
                                                                    newpretaxamt = promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                                                    amtstr = "";
                                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                                }

                                                                if (MixMatchCat == "P")  // Plus Pricing
                                                                {
                                                                    discntamt = 0;
                                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice * wqty, MixMatchType, MixMatchVal);
                                                                    damt = "0";
                                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                                    newpretaxamt = 0;
                                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice * wqty - GeneralFunctions.fnDouble(damt);

                                                                    amtstr = "";
                                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                                    damt = (promptPrice * wqty - newpretaxamt).ToString("f");
                                                                }

                                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                                {
                                                                    discntamt = 0;
                                                                    discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                                                    damt = "0";
                                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                                    newpretaxamt = 0;
                                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                                    damt = (promptPrice * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                                    amtstr = "";
                                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                                }


                                                                string linetxt = "";
                                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                                dtblPOS.Rows.Add(new object[]
                                                            {
                                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                       linetxt,refType,refOHQty,refNQty,refCost,
                                              wqty.ToString(),promptPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                              "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                              0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),refUOM,"","","","","N"});
                                                            }

                                                            line1 = "";
                                                            line2 = "";
                                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), wqty.ToString(), promptPrice.ToString(),
                                                            ref line1, ref line2);
                                                            DisplayPoleText(2, "N", "N", line1, line2);

                                                        }
                                                        else
                                                        {
                                                            if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                            {
                                                                dtblPOS.Rows.Add(new object[]
                                                            {
                                                    await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        wdisc == 0 ? await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) :
                                        await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n",
                                                    refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",val1,val2,val3,val4,val5,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,MixMatchFlag,
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * GeneralFunctions.fnDouble(refPrice) - wdisc).ToString(),refUOM,"","","","","N"});
                                                            }
                                                            else
                                                            {
                                                                double discntamt = 0;
                                                                string damt = "0";
                                                                double newpretaxamt = 0;
                                                                string amtstr = "";
                                                                if (MixMatchCat == "N")  // Normal Pricing
                                                                {
                                                                    discntamt = 0;
                                                                    discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                                                    damt = "0";
                                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                                    newpretaxamt = 0;
                                                                    newpretaxamt = GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                                                    amtstr = "";
                                                                    if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                                    else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                                }

                                                                if (MixMatchCat == "P")  // Plus Pricing
                                                                {
                                                                    discntamt = 0;
                                                                    discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice * wqty, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice) * wqty, MixMatchType, MixMatchVal);
                                                                    damt = "0";
                                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                                    newpretaxamt = 0;
                                                                    newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt);

                                                                    amtstr = "";
                                                                    if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                                    else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                                    damt = (GeneralFunctions.fnDouble(refPrice) * wqty - newpretaxamt).ToString("f");
                                                                }

                                                                if (MixMatchCat == "A")  // Absolute Pricing
                                                                {
                                                                    discntamt = 0;
                                                                    discntamt = MixMatchVal - MixMatchPartPrice * wqty;
                                                                    damt = "0";
                                                                    if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                                    if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                                    newpretaxamt = 0;
                                                                    newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                                    damt = (GeneralFunctions.fnDouble(refPrice) * wqty - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                                    amtstr = "";
                                                                    amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                                }

                                                                string linetxt = "";
                                                                linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";

                                                                dtblPOS.Rows.Add(new object[]
                                                            {
                                                await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),linetxt,refType,refOHQty,refNQty,refCost,
                                                wqty.ToString(),refPrice,refNPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"0","0","0","","","","",GetUniqueString(),refDP,
                                                "",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + Properties.Resources.Mix_n_Match + amtstr,"1","0","0","0","","","","0","0","0","N","N","N",
                                                strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,
                                                0,0,0,0,0,0,0,0,0,
                                                MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique.ToString(),"Y",
                                                "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                refPrice,Convert.ToDecimal(wqty * newpretaxamt).ToString(),"","","","","N"});
                                                            }

                                                            line1 = "";
                                                            line2 = "";

                                                            RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), wqty.ToString(), refPrice, ref line1, ref line2);

                                                            DisplayPoleText(2, "N", "N", line1, line2);
                                                        }

                                                        blTareEntry = false;
                                                        dblTareEntryValue = 0;
                                                    }
                                                }
                                            }
                                            else if ((refType == "F") && (Settings.AddGallon == "Y"))
                                            {
                                                /*
                                                double gl = 0;
                                                bool pf = false;
                                                frmPOSGallonEntryDlg fgaldlg = new frmPOSGallonEntryDlg();
                                                try
                                                {
                                                    fgaldlg.ShowDialog();
                                                    if (fgaldlg.DialogResult == DialogResult.OK)
                                                    {
                                                        pf = true;
                                                        gl = fgaldlg.Gallon;
                                                    }
                                                }
                                                finally
                                                {
                                                    fgaldlg.Dispose();
                                                }
                                                if (!pf) return;

                                                if (refPrompt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                                    if (promptPrice == -99999) return;

                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                    {
                                                        dtblPOS.Rows.Add(new object[] 
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                              refType,refOHQty,refNQty,refCost,gl,promptPrice,refNPrice,gl*promptPrice,"0","0","0","","","","",
                                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                              "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                             promptPrice,gl*promptPrice});
                                                    }
                                                    else
                                                    {
                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }

                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";


                                                        dtblPOS.Rows.Add(new object[] 
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                              linetxt,
                                              refType,refOHQty,refNQty,refCost,gl,promptPrice,refNPrice,gl*newpretaxamt,"0","0","0","","","","",
                                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                              "1","0","0","0","","","","0","0","0","N","N","N",
                                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                              "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                                              promptPrice,gl*newpretaxamt});

                                                    }

                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                                    PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);
                                                }
                                                else
                                                {
                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                    {
                                                        dtblPOS.Rows.Add(new object[] 
                                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                                      await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                                      refType,refOHQty,refNQty,refCost,gl,refPrice,refNPrice,gl*GeneralFunctions.fnDouble(refPrice),"0","0","0","","","","",GetUniqueString(),refDP,
                                                      "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                                      "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                      refPrice,gl*GeneralFunctions.fnDouble(refPrice)});
                                                    }
                                                    else
                                                    {
                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }

                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";




                                                        dtblPOS.Rows.Add(new object[] 
                                                    {  await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                                        linetxt,
                                                      refType,refOHQty,refNQty,refCost,gl,refPrice,refNPrice,gl*newpretaxamt,"0","0","0","","","","",GetUniqueString(),refDP,
                                                      "", MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                                      "1","0","0","0","","","","0","0","0","N","N","N",
                                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                                      "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                                      refPrice,gl*newpretaxamt});

                                                    }



                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);
                                                }*/
                                            }
                                            else
                                            {
                                                if (refPrompt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                                    if (promptPrice == -99999) return;

                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                    {
                                                        dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * promptPrice),"0","0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                              "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * promptPrice),refUOM,"","","","","N"});
                                                    }
                                                    else
                                                    {
                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = promptPrice - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(promptPrice, MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : promptPrice - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (promptPrice - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (promptPrice - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }

                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";


                                                        dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              linetxt,
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty * newpretaxamt),"0","0","0","","","","",
                              GetUniqueString(),refDP,"",MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                              "1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                              "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * newpretaxamt),refUOM,"","","","","N"});

                                                    }
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                                    PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                                else
                                                {
                                                    if ((MixMatchFlag == "N") || (MixMatchFlag == "X"))  // Mix n Match not applicable
                                                    {
                                                        dtblPOS.Rows.Add(new object[]
                                                    { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                      await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                                      refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                                      "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,0,
                                      "N","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      refPrice,Convert.ToDecimal(intPressQty * GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                                    }
                                                    else
                                                    {
                                                        double discntamt = 0;
                                                        string damt = "0";
                                                        double newpretaxamt = 0;
                                                        string amtstr = "";
                                                        if (MixMatchCat == "N")  // Normal Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " @" + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " - " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");
                                                        }

                                                        if (MixMatchCat == "P")  // Plus Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchApplicableLast ? calculatemixnmatchpdiscount(MixMatchPartPrice, MixMatchType, MixMatchVal, MixMatchPlus) : calculateitemdiscount(GeneralFunctions.fnDouble(refPrice), MixMatchType, MixMatchVal);
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = MixMatchType == "A" ? GeneralFunctions.fnDouble(damt) : GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt);

                                                            amtstr = "";
                                                            if (MixMatchType == "P") amtstr = " +/ " + MixMatchVal.ToString("f") + "%";
                                                            else amtstr = " +/ " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                            damt = (GeneralFunctions.fnDouble(refPrice) - newpretaxamt).ToString("f");
                                                        }

                                                        if (MixMatchCat == "A")  // Absolute Pricing
                                                        {
                                                            discntamt = 0;
                                                            discntamt = MixMatchVal - MixMatchPartPrice;
                                                            damt = "0";
                                                            if (Settings.DecimalPlace == 2) damt = discntamt.ToString("f");
                                                            if (Settings.DecimalPlace == 3) damt = discntamt.ToString("f3");

                                                            newpretaxamt = 0;
                                                            newpretaxamt = GeneralFunctions.fnDouble(damt);

                                                            damt = (GeneralFunctions.fnDouble(refPrice) - GeneralFunctions.fnDouble(damt)).ToString("f");

                                                            amtstr = "";
                                                            amtstr = " - " + MixMatchPlus.ToString() + " for " + SystemVariables.CurrencySymbol + MixMatchVal.ToString("f");

                                                        }

                                                        string linetxt = "";
                                                        linetxt = await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + "\n";




                                                        dtblPOS.Rows.Add(new object[]
                                                    {  await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                                        linetxt,
                                      refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*newpretaxamt),"0","0","0","","","","",GetUniqueString(),refDP,
                                      "", MixMatchCat,MixMatchVal.ToString(),damt,MixMatchID.ToString(),"  " + "Mix n Match" +amtstr,
                                      "1","0","0","0","","","","0","0","0","N","N","N",
                                      strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                                      dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                                      MixMatchID.ToString(),MixMatchFlag,MixMatchType,MixMatchVal,MixMatchPlus,MixMatchUnique,
                                      "Y","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                                      refPrice,Convert.ToDecimal(intPressQty*newpretaxamt),refUOM,"","","","","N"});

                                                    }


                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }
                                            SetCartDisplay();
                                            gridControl1.ItemsSource = dtblPOS;
                                            ToggleWithEmptyCart();
                                            gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;

                                            if (Settings.PriceLevelForOneTime == "Y")
                                            {
                                                Settings.PriceLevelForOneTime = "N";
                                                intUsePriceLevel = Settings.UsePriceLevel;
                                            }
                                        }
                                        else
                                        {
                                            SetCartDisplay();
                                            gridControl1.ItemsSource = dtblPOS;
                                            ToggleWithEmptyCart();
                                            gridView1.FocusedRowHandle = intfocusrow;
                                        }
                                    }


                                    if (strCurrentServiceType == "Rent")
                                    {
                                        if (!blfinddata)
                                        {
                                            if (refType == "U")
                                            {
                                                if (refRentPrompt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)
                                                        + " * " + strUOMDesc, dblRentValue);
                                                    if (promptPrice == -99999) return;

                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                            await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                            refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),strUOMCount,
                            strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0",
                            "N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                            0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                            promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", promptPrice.ToString(), ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                                else
                                                {
                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),strUOMCount,
                              strUOMPrice,strUOMDesc,"","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0",
                              "N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", strUOMPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }

                                            else if (refType == "E")
                                            {
                                                if (refRentPrompt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), dblRentValue);
                                                    if (promptPrice == -99999) return;

                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),strSLID,
                              "0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              "0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                                else
                                                {
                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),strSLID,
                              "0","0","","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }

                                            else if (refType == "M")
                                            {
                                                if (refRentPrompt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), dblRentValue);
                                                    if (promptPrice == -99999) return;
                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),"0","0","0",
                              strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","",
                              "0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                                else
                                                {
                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),
                              "0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0",
                              "","","","0","0","0","N","N","N",strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                                    PgridView1, colIMDesc), "1", refPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }
                                            else
                                            {
                                                if (refRentPrompt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), dblRentValue);
                                                    if (promptPrice == -99999) return;

                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),"0","0","0",
                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty * dblRentDuration*promptPrice),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                                    PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                                else
                                                {
                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,dblRentValue,dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),"0","0","0",
                              "","","","",GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              dblRentValue,Convert.ToDecimal(intPressQty * dblRentDuration*dblRentValue),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }
                                            SetCartDisplay();
                                            gridControl1.ItemsSource = dtblPOS;
                                            ToggleWithEmptyCart();
                                            gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;

                                            if (Settings.PriceLevelForOneTime == "Y")
                                            {
                                                Settings.PriceLevelForOneTime = "N";
                                                intUsePriceLevel = Settings.UsePriceLevel;
                                            }
                                        }
                                        else
                                        {
                                            SetCartDisplay();
                                            gridControl1.ItemsSource = dtblPOS;
                                            ToggleWithEmptyCart();
                                            gridView1.FocusedRowHandle = intfocusrow;
                                        }

                                        int rwindx = -1;
                                        foreach (DataRowView drv in dtblPOS.DefaultView)
                                        {
                                            rwindx++;
                                            if ((drv["ITEMINDEX"].ToString() == "1") && (drv["SERVICE"].ToString() == "Rent"))
                                            {
                                                gridControl1.SetCellValue(rwindx, colProduct, drv["PRODUCT"].ToString().Replace("\n", "") + "\n");
                                            }
                                        }
                                    }


                                    if (strCurrentServiceType == "Repair")
                                    {
                                        if (!blfinddata)
                                        {
                                            if (refRepairPromptTag == "Y")
                                            {
                                                //Block
                                                /*
                                                frmPOSRepairItemInfoDlg frm_POSRepairItemInfoDlg = new frmPOSRepairItemInfoDlg();
                                                try
                                                {
                                                    frm_POSRepairItemInfoDlg.ShowDialog();
                                                    if (frm_POSRepairItemInfoDlg.DialogResult == DialogResult.OK)
                                                    {
                                                        strRepairItemTag = frm_POSRepairItemInfoDlg.RepairItemTag;
                                                        strRepairItemSlNo = frm_POSRepairItemInfoDlg.RepairItemSlNo;
                                                        if (frm_POSRepairItemInfoDlg.RepairItemPurchaseDate == Convert.ToDateTime(null)) strRepairItemPurchaseDate = "";
                                                        else strRepairItemPurchaseDate = frm_POSRepairItemInfoDlg.RepairItemPurchaseDate.ToString("d");
                                                    }
                                                    else return;
                                                }
                                                finally
                                                {
                                                    frm_POSRepairItemInfoDlg.Dispose();
                                                }*/
                                            }



                                            if (refType == "U")
                                            {
                                                if (refRepairPromptAmt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, GeneralFunctions.fnDouble(refPrice));
                                                    if (promptPrice == -99999) return;

                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                            await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                            refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                            GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                            strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                            dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                            0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                            promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", promptPrice.ToString(), ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                                else
                                                {
                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc)+ " * "+ strUOMDesc,
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),strUOMCount,strUOMPrice,strUOMDesc,"","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc) + " * " + strUOMDesc, "1", strUOMPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }

                                            else if (refType == "E")
                                            {
                                                if (refRepairPromptAmt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                                    if (promptPrice == -99999) return;

                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),strSLID,"0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                                else
                                                {
                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),strSLID,"0","0","","","","",GetUniqueString(),
                              refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty*GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }

                                            else if (refType == "M")
                                            {
                                                if (refRepairPromptAmt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                                    if (promptPrice == -99999) return;
                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,refPrice,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,
                              strMatxOV3,GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                                else
                                                {
                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),"0","0","0",strMatxOID,strMatxOV1,strMatxOV2,strMatxOV3,
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                                    PgridView1, colIMDesc), "1", refPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }
                                            else
                                            {
                                                if (refRepairPromptAmt == "Y")
                                                {
                                                    double promptPrice = GetPromptPrice(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), GeneralFunctions.fnDouble(refPrice));
                                                    if (promptPrice == -99999) return;

                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,promptPrice,refNPrice,Convert.ToDecimal(intPressQty*promptPrice),"0","0","0","","","","",
                              GetUniqueString(),refDP,"","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","Y","0","X",++CartSL,"",iAge,
                              promptPrice,Convert.ToDecimal(intPressQty*promptPrice),refUOM,"","","","","N"});

                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle,
                                                    PgridView1, colIMDesc), "1", promptPrice.ToString(), ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                                else
                                                {
                                                    dtblPOS.Rows.Add(new object[]
                                            { await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID),
                              await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc),
                              refType,refOHQty,refNQty,refCost,intPressQty,refPrice,refNPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),"0","0","0","","","","",GetUniqueString(),refDP,
                              "","","0","0","0","","1","0","0","0","","","","0","0","0","N","N","N",
                              strCurrentServiceType,strRentType,dblRentDuration.ToString(),dblRentValue.ToString(),
                              dblRentDeposit.ToString(),strRepairItemTag,strRepairItemSlNo,strRepairItemPurchaseDate,0,0,0,0,0,0,0,0,0,
                              0,"","",0,0,0,"","0","","0","0","0","0","","N",SaleID,0,0,0,0,"N","N","0","X",++CartSL,"",iAge,
                              refPrice,Convert.ToDecimal(intPressQty* GeneralFunctions.fnDouble(refPrice)),refUOM,"","","","","N"});
                                                    /*
                                                    line1 = "";
                                                    line2 = "";
                                                    RearrangeCartItemTextBeforePoleDisplay(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMDesc), "1", refPrice, ref line1, ref line2);
                                                    DisplayPoleText(2, "N", "N", line1, line2);*/
                                                }
                                            }
                                            SetCartDisplay();
                                            gridControl1.ItemsSource = dtblPOS;
                                            ToggleWithEmptyCart();
                                            gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                                            await SetCurrentRow1(dtblPOS.Rows.Count - 1);

                                            if (Settings.PriceLevelForOneTime == "Y")
                                            {
                                                Settings.PriceLevelForOneTime = "N";
                                                intUsePriceLevel = Settings.UsePriceLevel;
                                            }
                                        }
                                        else
                                        {
                                            SetCartDisplay();
                                            gridControl1.ItemsSource = dtblPOS;
                                            ToggleWithEmptyCart();
                                            await SetCurrentRow1(intfocusrow);
                                            //gridView1.FocusedRowHandle = intfocusrow;
                                        }
                                    }
                                }
                            }


                            /// Set UP/Down Button to move cursor through Cart Item

                            EnableDisableButton(btnUP, btnDown, gridControl1);

                            /// Automatic Discount Add in Cart

                            if (strCurrentServiceType == "Sales")
                                await AddAutoDiscountInCart(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)), SaleID > 0 ? false : true);

                            /// Automatic Fees and Charge Add in Cart

                            await AddAutoFeesInCart(GeneralFunctions.fnInt32(await GeneralFunctions.GetCellValue1(PgridView1.FocusedRowHandle, grdProduct, colIMID)));

                            /// Automatic Mix n Match in Cart

                            if ((strCurrentServiceType == "Sales") && (SaleID == 0)) AddAutoMixNMatch();

                            SetCartDisplay();
                            gridControl1.ItemsSource = dtblPOS;
                            ToggleWithEmptyCart();
                            GetTotal(); /// Calculate and Display Cart Total
                            ShowTax();  /// Calculate and Display Taxes of Cart Items
                            ResetQty(); /// Reset Item Quantity
                            //gridControl1.RefreshData();

                            //tcPOS.SelectedIndex = 0;

                            //gridControl1.Focus();
                            gridView1.FocusedRowHandle = dtblPOS.Rows.Count - 1;
                        }
                    }

                }
                clickTimer1.Stop();
            }
        }

        private void Posscroll_ManipulationBoundaryFeedback(object sender, ManipulationBoundaryFeedbackEventArgs e)
        {
            e.Handled = true;
        }

        private void dummyDockPanel_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            menuGrid.Visibility = Visibility.Collapsed;
        }


        private bool ValidCartForEntryTicket()
        {
            int otherentrycnt = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "Q") || (dr["PRODUCTTYPE"].ToString() == "C")) continue;
                else otherentrycnt++;

            }
            return otherentrycnt == 0;
        }

        private bool ValidCartMixedWithEntryTicket()
        {
            int tktentrycnt = 0;
            int cpnentrycnt = 0;
            int otherentrycnt = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() == "Q") tktentrycnt++;
                else if (dr["PRODUCTTYPE"].ToString() == "C") cpnentrycnt++;
                else otherentrycnt++;
            }
            if (tktentrycnt == 0) return true;
            else
            {
                if (otherentrycnt == 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
           
        }


        private void CheckAndExecuteReorderStockAlert(int ProductID)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;

            string ptype = objp.GetReorderLevelCheckProductType(ProductID);

            if ((ptype == "Q") || (ptype == "C") || (ptype == "S"))
            {

            }
            else
            {
                int linksku = objp.GetReorderLevelCheckLinkID(ProductID);
                double currentstk = 0;
                double reorderstk = 0;
                if (linksku == 0)
                {
                    currentstk = objp.GetReorderLevelCheckOnHandQty(ProductID);
                    reorderstk = objp.GetReorderLevelCheckReorderQty(ProductID);
                }
                else
                {
                    double breckpackr = objp.GetReorderLevelCheckBreakpackRatio(ProductID);
                    if (breckpackr == 1)
                    {
                        currentstk = objp.GetReorderLevelCheckOnHandQty(linksku);
                        reorderstk = objp.GetReorderLevelCheckReorderQty(linksku);
                    }
                    else
                    {
                        currentstk = 0;
                    }
                }

                double cartqty = 0;

               

                    foreach (DataRow dr in dtblPOS.Rows)
                {
                    if ((dr["PRODUCTTYPE"].ToString() == "Q") || (dr["PRODUCTTYPE"].ToString() == "G")
                        || (dr["PRODUCTTYPE"].ToString() == "D")
                        || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "Z")
                        || (dr["PRODUCTTYPE"].ToString() == "S") || (dr["PRODUCTTYPE"].ToString() == "A")
                        || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")
                        || (dr["PRODUCTTYPE"].ToString() == "H") || (dr["PRODUCTTYPE"].ToString() == "Z")) continue;

                    if (GeneralFunctions.fnInt32(dr["ID"].ToString()) == ProductID)
                    {
                        cartqty = cartqty + GeneralFunctions.fnDouble(dr["QTY"].ToString());
                    }
                    
                }

                if (currentstk - cartqty > reorderstk)
                {
                    
                }
                else
                {
                    if (reorderstk != 0)
                    {
                        string pname = objp.GetReorderLevelProductName(ProductID);
                        if (currentstk - cartqty == reorderstk)
                        {
                            ExecuteRedAlertTopCenter("Stock has reached Reorder level for " + pname);
                        }
                        if (currentstk - cartqty < reorderstk)
                        {
                            ExecuteRedAlertTopCenter("Stock is below Reorder level for " + pname);
                        }
                    }
                }
            }
        }


        private bool IsDonationRecordExistsInCart()
        {
            if (dtblPOS.Rows.Count == 0) return false;
            else
            {
                bool boolfind = false;
                foreach (DataRow dr in dtblPOS.Rows)
                {
                    if (dr["PRODUCTTYPE"].ToString() == "I")
                    {
                        boolfind = true;
                        break;
                    }
                }
                return boolfind;
            }
        }

        private void ExecuteRedAlertTopCenter(string msg)
        {

            Alert.RedAlert alertWindow = new Alert.RedAlert(msg, "TM");

        }



        private void ProcessDataForReceiptPrint(ref DataTable dtblHeader, ref DataTable dtblDetail, ref DataTable dtblPTax)
        {
            
           

            if (dtblPOS.Rows.Count == 0)
            {

            }
            else
            {
               
            }

            
            if (dtblPOS.Rows.Count == 0)
            {
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            

            int ccnt = 0;
            foreach (DataRow dr in dtblPOS.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() == "C") ccnt++;
            }
            if (ccnt == dtblPOS.Rows.Count)
            {
                new MessageBoxWindow().Show("No item in Cart", Properties.Resources.Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetFocus(txtSKU);
                return;
            }

            



           

            dblRentSecurityDeposit = 0;

            

            if (blRepairIssued)
            {
                if (intCustID == 0)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Please_Select_Customer, Properties.Resources.Repair_Info_, MessageBoxButton.OK, MessageBoxImage.Information);
                    tcPOS.SelectedIndex = 1;
                    return;
                }
                if (intCustID > 0)
                {
                    blurGrid.Visibility = Visibility.Visible;
                    frmPOSRepairInfoDlg frm_POSRepairInfoDlg = new frmPOSRepairInfoDlg();
                    try
                    {
                        frm_POSRepairInfoDlg.CalledFor = "Issue";
                        frm_POSRepairInfoDlg.CustomerID = intCustID;
                        frm_POSRepairInfoDlg.RepairAmount = Convert.ToDouble(numTotal.Text);
                        frm_POSRepairInfoDlg.ID = 0;
                        frm_POSRepairInfoDlg.ShowDialog();
                        if (frm_POSRepairInfoDlg.DialogResult == true)
                        {
                            dtblRepairInfo.Rows.Clear();
                            dtblRepairInfo = frm_POSRepairInfoDlg.pdtbl;
                            //if (frm_POSRepairInfoDlg.changebrwfield) blChangeCustomerOnDelivery = true;
                        }
                        else
                        {
                            return;
                        }
                    }
                    finally
                    {
                        blurGrid.Visibility = Visibility.Collapsed;
                    }


                    /*foreach (DataRow drrp in dtblRepairInfo.Rows)
                    {
                        repairadv = GeneralFunctions.fnDouble(drrp["AdvanceAmount"].ToString());
                    }

                    if (repairadv == 0)
                    {
                        IssueRepairTransaction();
                        return;
                    }*/
                }
            }

            /*if (blRepairRecall)
            {
                //if (GetRepairItemNotDeliverCount(repairparentinv) == dtblPOS.Rows.Count) // last item delivered
                //{
                    //repairtender = repairdue;
                //}
                //else
                //{
                    frmPOSRepairTenderAmtDlg frm_POSRepairTenderAmtDlg = new frmPOSRepairTenderAmtDlg();
                    try
                    {
                        frm_POSRepairTenderAmtDlg.Inv = repairparentinv.ToString();
                        frm_POSRepairTenderAmtDlg.DueAmt = repairdue;
                        frm_POSRepairTenderAmtDlg.ShowDialog();
                        if (frm_POSRepairTenderAmtDlg.DialogResult == true) repairtender = frm_POSRepairTenderAmtDlg.TenderAmt;
                        else return;
                    }
                    finally
                    {
                        frm_POSRepairTenderAmtDlg.Dispose();
                    }
                //}

            }*/

            
            bool blclearflg = false;
            








            blResumeTransactionQT = blResumeTransaction;
            blWorkOrderTransactionQT = blWorkOrder;
            if (blWorkOrder)
            {
                dtblWODatatblQT = FinalDataTable();
            }
            dtblApptDatatblQT = dtblAppt;

            intSuspendInvoiceNoQT = intSuspendInvNo;
            blReturnItemQT = blReturnItem;
            blExistCouponQT = blExistCoupon;
            if (strCurrentServiceType == "Sales") blSaleQT = true; else blSaleQT = false;
            strServiceTypeQT = strCurrentServiceType;
            blRentIssuedQT = blRentIssued;
            blRentRecallQT = blRentRecall;
            blRepairIssuedQT = blRepairIssued;
            blRepairRecallQT = blRepairRecall;
            dblRepairAdvanceQT = repairadv;
            dblRepairDueQT = repairdue;
            dblRepairTenderQT = repairtender;
            intIssueRepairInvNoQT = repairparentinv;

            blCustomerOrderingQT = blOpenCustomerOrder;
            intCustomerOrderNoQT = CurrentCustomerOrderID;

            dblRepairAmountQT = Convert.ToDouble(numTotal.Text);
            dtblRepairItemInfoQT = dtblRepairInfo;

            dblRentSecurityDepositQT = dblRentSecurityDeposit;
            intIssueRentInvNoQT = RentReturnInv;
            sRentCalcFlagQT = RentCalcFlag;
            blFinalFlag = false;
            intCustIDQT = intCustID;
            strTaxExemptQT = strTaxExempt;
            dblStoreCrQT = dblStoreCr;
            dblCustAcctLimitQT = dblCustAcctLimit;
            dblCustAcctBalanceQT = dblCustAcctBalance;
            dtblPOSDatatblQT = dtblPOS;
            intMaxInvNoQT = intMaxInvNo;
            intSuperUserIDQT = intSuperUserID;
            blFunctionBtnAccessQT = blFunctionBtnAccess;

            CustDTaxIDQT = CustDTaxID;
            CustDTaxNameQT = CustDTaxName;
            CustDTaxTypeQT = CustDTaxType;
            CustDTaxRateQT = CustDTaxRate;
            CustDTaxValueQT = CustDTaxValue;

            if (blRepairIssued)
            {
                double ddeposit = 0;
                foreach (DataRow dr in dtblRepairInfo.Rows)
                {
                    ddeposit = GeneralFunctions.fnDouble(dr["AdvanceAmount"].ToString());
                }
                if (ddeposit > 0)
                {
                    blRepairDepositQT = true;
                    intRepairInvoiceForDepositQT = 0;
                    dblRepairAdvanceQT = ddeposit;
                }
            }

            dtCustomerDOBQT = dtCustomerDOB;




            if ((!blNewLayawayQT) && (!blLayawayQT) && (!blLayawayRefundQT) && ((!blRentRecallQT) || (blRentRecallQT && (sRentCalcFlagQT == "Y")))) GetValue();

            if ((blNewLayawayQT) || (blLayawayQT) || (blLayawayRefundQT)) dblTotalsaleQT = GeneralFunctions.FormatDouble(dblLayawayAmtQT);


            ArrangeSettings();



            
            if (Settings.ShowFoodStampTotal == "Y")
            {
                double val = 0;
                double tx = 0;
                try
                {
                    val = GetFoodStampAmount(ref tx);
                    dblFoodStampTotalQT = val;
                }
                catch
                {
                }
            }


            




            blFinalFlag = false;

            



            /******************* Transaction **********************/





            string srterrmsg = "";
            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            objpos.EmployeeID = SystemVariables.CurrentUserID;
            objpos.LoginUserID = SystemVariables.CurrentUserID;
            objpos.CustomerID = intCustIDQT;
            objpos.Return = blReturnItemQT;
            objpos.NewLayaway = blNewLayawayQT;
            objpos.Layaway = blLayawayQT;
            objpos.LayawayRefund = blLayawayRefundQT;
            objpos.RentReturn = blRentRecallQT;
            objpos.ServiceType = strServiceTypeQT;
            objpos.MGCIssue = blMercuryGiftCardIssueQT;
            objpos.MercuryGCIssueCardID = tempMercuryGCCardIDQT;
            objpos.CustomerOrdering = blCustomerOrderingQT;
            objpos.CustomerOrderNo = intCustomerOrderNoQT;
            if (blSaleQT)
            {
                objpos.TransType = 1; // sale
                objpos.Status = 3;
            }

            if (blWorkOrderTransactionQT)
            {
                objpos.TransType = 12; // WorkOrder Payment
                objpos.Status = 3;
                objpos.SuspendInvoiceNo = intSuspendInvoiceNoQT;
            }

            if (blResumeTransactionQT)
            {
                objpos.TransType = 3; // Resume Transaction
                objpos.Status = 3;
                objpos.SuspendInvoiceNo = intSuspendInvoiceNoQT;
            }

            if (blNewLayawayQT)
            {
                objpos.TransType = 2; // Layaway deposit
                objpos.Status = 1;
            }

            if (blLayawayQT)
            {
                objpos.TransType = 2; // Layaway Payment
                objpos.Status = 3;
            }

            if (blLayawayRefundQT)
            {
                objpos.TransType = 2; // Layaway Payment
                objpos.Status = 5;
            }

            if (blRentIssuedQT)
            {
                objpos.TransType = 15; // Rent Issue
                objpos.Status = 15;
            }

            if (blRentRecallQT)
            {
                objpos.TransType = 16; // Rent Issue
                objpos.Status = 16;
            }


            if (blRepairIssuedQT)
            {
                objpos.TransType = 17; // Repair Issue
                objpos.Status = 17;
                if (!blRepairDepositQT) objpos.RepairIssueNClosed = true;
                else objpos.RepairIssueNClosed = false;
            }

            if (blRepairRecallQT)
            {
                objpos.TransType = 18; // Repair Delivered
                objpos.Status = 18;
            }

            objpos.RentalSecurityDeposit = dblRentSecurityDepositQT;
            objpos.IssueRentInvNo = intIssueRentInvNoQT;
            objpos.IsRentCalculated = Settings.CalculateRentLater;

            DateTime rpin = Convert.ToDateTime(null);
            DateTime rpdelvy = Convert.ToDateTime(null);
            DateTime rpnotf = Convert.ToDateTime(null);
            string strrpnotes1 = "";
            string strrpnotes2 = "";
            string strrpnotes3 = "";
            string strrpritm = "";
            string strrprsl = "";
            string strrpfind = "";

            if (strServiceTypeQT == "Repair")
            {
                foreach (DataRow drrp in dtblRepairItemInfoQT.Rows)
                {
                    strrpnotes1 = drrp["ProblemDesc"].ToString();
                    strrpnotes2 = drrp["RepairDesc"].ToString();
                    strrpnotes3 = drrp["Remarks"].ToString();
                    strrpritm = drrp["ItemTag"].ToString();
                    strrprsl = drrp["ItemSL"].ToString();
                    rpin = GeneralFunctions.fnDate(drrp["DateIn"].ToString());
                    if (drrp["ExpectedDeliveryDate"].ToString() != "") rpdelvy = GeneralFunctions.fnDate(drrp["ExpectedDeliveryDate"].ToString());
                    if (drrp["NotifiedDate"].ToString() != "") rpnotf = GeneralFunctions.fnDate(drrp["NotifiedDate"].ToString());
                    strrpfind = drrp["RepairFindUs"].ToString();
                }
                objpos.RepairDepositTransaction = blRepairDepositQT;
                objpos.RepairDepositLinkID = intRepairInvoiceForDepositQT;
            }

            objpos.RepairFindUs = strrpfind;
            objpos.RepairItemName = strrpritm;
            objpos.RepairItemSL = strrprsl;
            objpos.RepairDateIn = rpin;
            objpos.RepairDeliveryDate = rpdelvy;
            objpos.RepairNotifiedDate = rpnotf;
            objpos.RepairProblem = strrpnotes1;
            objpos.RepairNotes = strrpnotes2;
            objpos.RepairRemarks = strrpnotes3;

            objpos.RepairAmount = dblRepairAmountQT;
            objpos.RepairAdvanceAmount = dblRepairAdvanceQT;

            objpos.RepairTenderAmount = dblRepairTenderQT;
            objpos.IssueRepairInvNo = intIssueRepairInvNoQT;

            objpos.ReceiptCnt = 1;

            if (!blNewLayawayQT)
            {
                if (!blRentIssuedQT) objpos.TotalSale = GeneralFunctions.FormatDouble(numTotalsaleQT);
                if (blRentIssuedQT) objpos.TotalSale = GeneralFunctions.FormatDouble(numTotalsaleQT - numRentDepositQT);
                if (blRepairRecallQT) objpos.TotalSale = GeneralFunctions.FormatDouble(numTotalsaleQT + numRepairAdvanceQT);
                objpos.Tax = GeneralFunctions.FormatDouble(numTaxQT);
                //if (blRepairIssued || blRepairRecall) objpos.Tax = GetTaxForRepair();
            }

            if (blNewLayawayQT)
            {
                objpos.Tax = 0;
                objpos.TotalSale = 0;
                objpos.LayawayDateDue = dtLayawayDateDueQT;
            }

            objpos.Discount = GeneralFunctions.FormatDouble(numDiscountQT);
            objpos.Coupon = GeneralFunctions.FormatDouble(numCouponQT);
            objpos.CouponPerc = dblCouponPercQT;
            objpos.DiscountReason = strDiscountReasonQT;

            objpos.TotalFees = dblFeesQT;
            objpos.TotalFeesTax = dblFeesTaxQT;
            objpos.TotalFeesCoupon = dblFeesCouponAmountQT;
            objpos.TotalFeesCouponTax = dblFeesCouponTaxAmountQT;

            objpos.DTaxID = CustDTaxIDQT;
            objpos.DTax = blNewLayawayQT ? CustDTaxValueQT : dblDTxQT;


            if ((blResumeTransactionQT) || (blSaleQT) || (blWorkOrderTransactionQT))
            {
                pdtblForStockUpdateQT = FinalDataTableQT();
                objpos.ItemDataTable = pdtblForStockUpdateQT;
            }
            if (blWorkOrderTransactionQT) objpos.WorkOrder1 = dtblWODatatblQT;
            if ((blLayawayQT) || (blLayawayRefundQT)) objpos.ItemDataTable = dtblLayawayPaymentQT;
            if (blLayawayQT) pdtblForStockUpdateQT = dtblLayawayPaymentQT;
            if (blNewLayawayQT)
            {
                pdtblForStockUpdateQT = FinalDataTableQT();
                objpos.ItemDataTable = GetLayawayInvoiceTableQT();
            }

            if ((blRentIssuedQT) || (blRentRecallQT))
            {
                pdtblForStockUpdateQT = FinalDataTableForRentQT();
                objpos.ItemDataTable = pdtblForStockUpdateQT;
            }

            if ((blRepairIssuedQT) || (blRepairRecallQT))
            {
                pdtblForStockUpdateQT = FinalDataTableForRepairQT();
                objpos.ItemDataTable = pdtblForStockUpdateQT;
            }

            
            objpos.TenderDataTable = dtblTenderQT;
            objpos.TaxID1 = intTaxID1QT;
            objpos.TaxID2 = intTaxID2QT;
            objpos.TaxID3 = intTaxID3QT;
            objpos.Tax1 = GeneralFunctions.FormatDouble(dblTax1QT);
            objpos.Tax2 = GeneralFunctions.FormatDouble(dblTax2QT);
            objpos.Tax3 = GeneralFunctions.FormatDouble(dblTax3QT);

            objpos.ChangeAmount = dblChangeQT;
            objpos.ApptDataTable = dtblApptDatatblQT;
            objpos.ErrorMsg = "";

            // static value
            objpos.StoreID = 1;
            objpos.RegisterID = 1;
            objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
            objpos.TransNoteNo = 0;
            objpos.LayawayNo = 0;
            objpos.TransMSeconds = 0;
            // static value

            objpos.TerminalName = Settings.TerminalName;

            objpos.CardTranID = intCardTranIDQT;

            objpos.ChangedByAdmin = intSuperUserIDQT;
            objpos.FunctionButtonAccess = blFunctionBtnAccessQT;

            if (Settings.AcceptTips == "Y")
            {
                objpos.AuthorisedTranNo = AuthCode;
                objpos.SaleTranNo = "";
            }
            else
            {
                objpos.AuthorisedTranNo = "";
                objpos.SaleTranNo = AuthCode;
            }

            objpos.tblCardID = cardidentityQT;
            objpos.MercuryGiftCardDataTable = mgccardidentityQT;

            objpos.GCCentralFlag = Settings.CentralExportImport;
            objpos.GCOPStore = GCOPSTORE;

            objpos.OperateStore = Settings.StoreCode;

            objpos.CustomerDOB = dtCustomerDOBQT;


            dtblHeader = GetPreviewInvoiceHeader(strServiceTypeQT,
                objpos.Tax, objpos.Discount, objpos.TotalSale, objpos.Coupon, objpos.DiscountReason,
                 objpos.TotalFees,
            objpos.TotalFeesTax);

            dtblDetail = GetPreviewInvoiceDetails(objpos.ItemDataTable);

            dtblPTax = grdTaxQT.ItemsSource as DataTable;

        }


        private DataTable GetPreviewInvoiceHeader(string strServiceType,
                double Tax, double Discount, double TotalSale, double Coupon, string DiscountReason, double TotalFees, double TotalFeesTax)
        {
            DataTable dtbl = new DataTable();

            dtbl.Columns.Add("StoreID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("EmpID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Terminal", System.Type.GetType("System.String"));
            dtbl.Columns.Add("InvoiceNo", System.Type.GetType("System.String"));
            dtbl.Columns.Add("ServiceType", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustName", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustCompany", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustDetails", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustStore", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustMobile", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustomerShortAddress", System.Type.GetType("System.String"));

            dtbl.Columns.Add("Tax", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Discount", System.Type.GetType("System.String"));
            dtbl.Columns.Add("TotalSale", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DiscountReason", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Coupon", System.Type.GetType("System.String"));
            dtbl.Columns.Add("RentDeposit", System.Type.GetType("System.String"));
            dtbl.Columns.Add("RentReturnDeposit", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RentReturnFlag", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairDeliveryDate", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairNotifiedDate", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairProblem", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairNotes", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairRemarks", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairAdvanceAmount", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairAmount", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairDueAmount", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairStatus", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RentParentID", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairParentID", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("IsRentCalculated", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Fees", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesTax", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesCoupon", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesCouponTax", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DTaxName", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DTax", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Logo", typeof(byte[]));
            //dtbl.Columns.Add("RepairItemName", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairItemSlNo", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairDateIn", System.Type.GetType("System.String"));

            //dtbl.Columns.Add("CustomerOrderRef", System.Type.GetType("System.String"));

            //dtbl.Columns.Add("CustomerDOB", System.Type.GetType("System.String"));




            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            DataTable dtblC = objpos.FetchCustomerInfoForPreviewInvoice(intCustID, Settings.StoreCode);

            string cval_1 = "0";
            string cval_2 = "";
            string cval_3 = "";
            string cval_4 = "";
            string cval_5 = "";
            string cval_6 = "";
            string cval_7 = "";
            string cval_8 = "";


            foreach (DataRow dr in dtblC.Rows)
            {
                cval_1 = dr["CID"].ToString();
                cval_2 = dr["CustID"].ToString();
                cval_3 = dr["CustName"].ToString();
                cval_4 = dr["CustCompany"].ToString();
                cval_5 = dr["CustDetails"].ToString();
                cval_6 = dr["CustStore"].ToString();
                cval_7 = dr["CustMobile"].ToString();
                cval_8 = dr["CustomerShortAddress"].ToString();
            }

            dtbl.Rows.Add(new object[] {
                "1",
                SystemVariables.CurrentUserID.ToString(),
                Settings.TerminalName,
                intMaxInvNo.ToString(),
                strServiceType,
                cval_1,cval_2,cval_3,cval_4,cval_5,cval_6,cval_7,cval_8,
                Tax,
                Discount,
                TotalSale,
                "",
                Coupon,
                0,
                0,
                TotalFees,
               TotalFeesTax,
                0,0,"",0,null
            });

            dtblC.Dispose();

            return dtbl;
        }

        private DataTable GetPreviewInvoiceDetails(DataTable ItemDataTable)
        {
            DataTable dtbl = new DataTable();

            dtbl.Columns.Add("ProductType", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Description", System.Type.GetType("System.String"));
            dtbl.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Price", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Qty", System.Type.GetType("System.String"));
            dtbl.Columns.Add("TotalPrice", System.Type.GetType("System.String"));
            dtbl.Columns.Add("MOP1", System.Type.GetType("System.String"));
            dtbl.Columns.Add("MOP2", System.Type.GetType("System.String"));
            dtbl.Columns.Add("MOP3", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DP", System.Type.GetType("System.String"));
            dtbl.Columns.Add("NormalPrice", System.Type.GetType("System.String"));
            dtbl.Columns.Add("UOMPrice", System.Type.GetType("System.String"));
            dtbl.Columns.Add("UOMCount", System.Type.GetType("System.String"));
            dtbl.Columns.Add("UOMDesc", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Notes", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaggedInInvoice", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Discount", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DiscountText", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DiscountID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DiscLogic", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DiscValue", System.Type.GetType("System.String"));
            dtbl.Columns.Add("ItemIndex", System.Type.GetType("System.String"));

            dtbl.Columns.Add("ServiceType", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RentType", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RentEffectFrom", System.Type.GetType("System.String"));
            dtbl.Columns.Add("RentDuration", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RentReturnFlag", System.Type.GetType("System.String"));

            dtbl.Columns.Add("RepairItemTag", System.Type.GetType("System.String"));
            dtbl.Columns.Add("RepairItemSLNO", System.Type.GetType("System.String"));
            dtbl.Columns.Add("RepairItemPurchaseDate", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairItemDeliveryDate", System.Type.GetType("System.String"));

            //dtbl.Columns.Add("Taxable1", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("Taxable2", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("Taxable3", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxRate1", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxRate2", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxRate3", System.Type.GetType("System.String"));

            //dtbl.Columns.Add("TaxType1", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxType2", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxType3", System.Type.GetType("System.String"));

            //dtbl.Columns.Add("TaxTotal1", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxTotal2", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxTotal3", System.Type.GetType("System.String"));

            dtbl.Columns.Add("FeesID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesText", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Fees", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesTax", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesValue", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesQty", System.Type.GetType("System.String"));

            dtbl.Columns.Add("SalePriceID", System.Type.GetType("System.String"));

            dtbl.Columns.Add("DTaxID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DTax", System.Type.GetType("System.String"));
            dtbl.Columns.Add("EditFlag", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("QtyDecimal", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("PromptPrice", System.Type.GetType("System.String"));

            dtbl.Columns.Add("BuyNGetFreeHeaderID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("BuyNGetFreeCategory", System.Type.GetType("System.String"));
            dtbl.Columns.Add("BuyNGetFreeName", System.Type.GetType("System.String"));

            dtbl.Columns.Add("GRate", System.Type.GetType("System.String"));
            dtbl.Columns.Add("GPrice", System.Type.GetType("System.String"));
            dtbl.Columns.Add("UOM", System.Type.GetType("System.String"));


            foreach (DataRow dr in dtblPOSDatatblQT.Rows)
            {
                double TP = 0;
                string sM1 = "";
                string sM2 = "";
                string sM3 = "";
                double renttime = 0;
                string sSKU = "";
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                PosDataObject.Product objP = new PosDataObject.Product();
                objP.Connection = SystemVariables.Conn;
                sSKU = objP.GetSKUFromID(GeneralFunctions.fnInt32(dr["ID"].ToString()));

                if (dr["PRODUCTTYPE"].ToString() == "B")
                {
                    sSKU = "Blank";
                }

                if (dr["PRODUCTTYPE"].ToString() == "A")
                {
                    sSKU = "AR";
                }

                if (dr["PRODUCTTYPE"].ToString() == "G")
                {
                    sSKU = "GC";
                }

                if (dr["PRODUCTTYPE"].ToString() == "M")
                {
                    DataTable dtblMx = new DataTable();
                    dtblMx = objP.FetchMatrixOptionForInvoice(GeneralFunctions.fnInt32(dr["MATRIXOID"].ToString()));
                    string MO1 = "";
                    string MO2 = "";
                    string MO3 = "";
                    foreach (DataRow drM in dtblMx.Rows)
                    {
                        MO1 = drM["Option1Name"].ToString();
                        MO2 = drM["Option2Name"].ToString();
                        MO3 = drM["Option3Name"].ToString();
                    }
                    dtblMx.Dispose();
                    if ((MO1 != "") || (dr["MATRIXOV1"].ToString() != ""))
                        sM1 = MO1 + ": " + dr["MATRIXOV1"].ToString();
                    if ((MO2 != "") || (dr["MATRIXOV2"].ToString() != ""))
                        sM2 = MO2 + ": " + dr["MATRIXOV2"].ToString();
                    if ((MO3 != "") || (dr["MATRIXOV3"].ToString() != ""))
                        sM3 = MO3 + ": " + dr["MATRIXOV3"].ToString();
                }
                if (dr["SERVICE"].ToString() == "Rent")
                    renttime = GeneralFunctions.fnDouble(dr["RENTDURATION"].ToString());
                else
                    renttime = 1;

                TP = 0;
                TP = GeneralFunctions.fnDouble(dr["QTY"].ToString()) * GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? dr["RATE"].ToString() : dr["GRATE"].ToString()) * renttime - (Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["DISCOUNT"].ToString()) : 0);
                dtbl.Rows.Add(new object[] {
                                                    dr["PRODUCTTYPE"].ToString(),
                                                    dr["PRODUCT"].ToString(),
                                                    sSKU,
                                                    Settings.TaxInclusive == "N" ? dr["RATE"].ToString() : dr["GRATE"].ToString(),
                                                    dr["Qty"].ToString(),
                                                    TP.ToString(),sM1,sM2,sM3,dr["DP"].ToString(),
                                                    dr["NRATE"].ToString(),
                                                    dr["UOMPRICE"].ToString(),
                                                    dr["UOMCOUNT"].ToString(),
                                                    dr["UOMDESC"].ToString(),
                                                    dr["NOTES"].ToString(),
                                                    //
                                                    dr["DISCOUNT"].ToString(),
                                                    dr["DISCOUNTTEXT"].ToString(),
                                                    dr["DISCOUNTID"].ToString(),
                                                    dr["DISCLOGIC"].ToString(),
                                                    dr["DISCVALUE"].ToString(),
                                                    dr["ITEMINDEX"].ToString(),
                                                    dr["SERVICE"].ToString(),
                                                    //dr["RentApplicable"].ToString(),
                                                    //dr["RentEffectiveFrom"].ToString(),
                                                    dr["RENTDURATION"].ToString(),
                                                    //dr["RentReturnFlag"].ToString(),
                                                    dr["REPAIRITEMTAG"].ToString(),
                                                    dr["REPAIRITEMSLNO"].ToString(),
                                                    dr["REPAIRITEMPURCHASEDATE"].ToString(),
                                                    //dr["RepairItemDeliveryDate"].ToString(),
                                                    //dr["Taxable1"].ToString(),
                                                    //dr["Taxable2"].ToString(),
                                                    //dr["Taxable3"].ToString(),
                                                    //dr["TaxRate1"].ToString(),
                                                    //dr["TaxRate2"].ToString(),
                                                    //dr["TaxRate3"].ToString(),
                                                    //dr["TaxType1"].ToString(),
                                                    //dr["TaxType2"].ToString(),
                                                    //dr["TaxType3"].ToString(),
                                                    //dr["TaxTotal1"].ToString(),
                                                    //dr["TaxTotal2"].ToString(),
                                                    //dr["TaxTotal3"].ToString(),
                                                    dr["FeesID"].ToString(),
                                                    dr["FeesText"].ToString(),
                                                    dr["Fees"].ToString(),
                                                    dr["FeesTax"].ToString(),
                                                    dr["FeesValue"].ToString(),
                                                    dr["FeesQty"].ToString(),
                                                    dr["SalePriceID"].ToString(),
                                                    dr["DTXID"].ToString(),
                                                    dr["DTX"].ToString(),
                                                    dr["EDITF"].ToString(),
                                                    //dr["QtyDecimal"].ToString(),
                                                    //dr["PromptPrice"].ToString(),
                                                    dr["BuyNGetFreeHeaderID"].ToString(),
                                                    dr["BuyNGetFreeCategory"].ToString(),
                                                    dr["BuyNGetFreeName"].ToString(),
                                                    dr["GRATE"].ToString(),
                                                    dr["GPRICE"].ToString(),
                                                    dr["UOM"].ToString()
                                                     });


            }


            return dtbl;
        }

        private void MnuRCT_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            dtblApptDatatblQT = dtblPOS;

            DataTable dtblHeader = new DataTable();
            DataTable dtblDetail = new DataTable();
            DataTable dtblPTax = new DataTable();

            ProcessDataForReceiptPrint(ref dtblHeader, ref dtblDetail, ref dtblPTax);

            if ((dtblHeader.Rows.Count == 0) || (dtblDetail.Rows.Count == 0)) return;

            try
            {
                string GiftAidFlag = "N";

                try
                {
                    foreach (DataRow dr in dtblPOS.Rows)
                    {
                        if (dr["PRODUCTTYPE"].ToString() == "I")
                        {
                            GiftAidFlag = "Y";
                            break;
                        }
                    }
                }
                catch
                {

                }

                if (Settings.GeneralReceiptPrint == "N")  // Receipt Printer
                {
                    

                    blurGrid.Visibility = Visibility.Visible;
                    frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                    try
                    {
                        frm_POSInvoicePrintDlg.PrintType = "Preview Invoice";
                        if (GiftAidFlag == "Y") frm_POSInvoicePrintDlg.PrintType = "Preview Gift Aid Receipt";
                        /*if (blRentIssued) frm_POSInvoicePrintDlg.PrintType = "Preview Rent Issue";
                        if (blRentRecall) frm_POSInvoicePrintDlg.PrintType = "Preview Return Rent Item";
                        if (blRepairIssued)
                        {
                            if (!blRepairDepositQT) frm_POSInvoicePrintDlg.PrintType = "Preview Repair Deliver";
                            else frm_POSInvoicePrintDlg.PrintType = "Preview Repair In";
                        }
                        if (blRepairRecall) frm_POSInvoicePrintDlg.PrintType = "Preview Repair Deliver";*/
                        frm_POSInvoicePrintDlg.InvNo = intMaxInvNo;
                        frm_POSInvoicePrintDlg.IsRentIssued = blRentIssued;
                        frm_POSInvoicePrintDlg.IsRentReturned = blRentRecall;

                        frm_POSInvoicePrintDlg.PreviewInvoiceHeader = dtblHeader;
                        frm_POSInvoicePrintDlg.PreviewInvoiceDetails = dtblDetail;
                        frm_POSInvoicePrintDlg.PreviewTaxDetails = dtblPTax;
                        frm_POSInvoicePrintDlg.Visibility = Visibility.Hidden;
                        frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                        frm_POSInvoicePrintDlg.ShowDialog();
                    }
                    finally
                    {
                        frm_POSInvoicePrintDlg.Close();
                        blurGrid.Visibility = Visibility.Collapsed;
                    }
                   
                }
                else  // A4 printing
                {
                    if (GiftAidFlag == "Y")
                    {
                        DataTable dtbl = new DataTable();
                        PosDataObject.POS objPOS1 = new PosDataObject.POS();
                        objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dtbl = dtblHeader;

                        DataTable dlogo = new DataTable();
                        objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dlogo = objPOS1.FetchStoreLogo();
                        bool boolnulllogo = false;
                        foreach (DataRow drl1 in dtbl.Rows)
                        {
                            foreach (DataRow drl2 in dlogo.Rows)
                            {
                                if (drl2["logo"] == null) boolnulllogo = true;
                                drl1["Logo"] = drl2["logo"];
                            }
                        }

                        int intTranNo = 0;
                        double dblOrderTotal = 0;
                        double dblOrderSubtotal = 0;
                        double dblDiscount = 0;
                        double dblCoupon = 0;
                        double dblTax = 0;
                        double dblSurcharge = 0;
                        int intCID = 0;
                        string strDiscountReason = "";
                        double dblTax1 = 0;
                        double dblTax2 = 0;
                        double dblTax3 = 0;
                        string strTaxNM1 = "";
                        string strTaxNM2 = "";
                        string strTaxNM3 = "";
                        string strservice = "";
                        int intHeaderStatus = 0;
                        double dblRentDeposit = 0;
                        double dblRentReturnDeposit = 0;
                        double dblRepairAmount = 0;
                        double dblRepairAdvanceAmount = 0;
                        string strRepairDeliveryDate = "";
                        string calcrent = "N";

                        double dblFees = 0;
                        double dblFeesTax = 0;

                        double dblFeesCoupon = 0;
                        double dblFeesCouponTax = 0;

                        string strDTaxNM = "";
                        double dblDTax = 0;

                        string strCustomerDOB = "";

                        foreach (DataRow dr in dtbl.Rows)
                        {
                            //intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                            intCID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                            dblOrderTotal = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                            dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                            dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                            dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                            //dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                            //dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                            ///dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                            //strTaxNM1 = dr["TaxNM1"].ToString();
                            //strTaxNM2 = dr["TaxNM2"].ToString();
                            //strTaxNM3 = dr["TaxNM3"].ToString();

                            dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                            dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                            dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                            dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                            strDiscountReason = dr["DiscountReason"].ToString();
                            strservice = dr["ServiceType"].ToString();
                            //intHeaderStatus = GeneralFunctions.fnInt32(dr["Status"].ToString());
                            //dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                            //dblRepairAmount = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                            //dblRepairAdvanceAmount = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                            //if (dr["RepairDeliveryDate"].ToString() != "") strRepairDeliveryDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToShortDateString();
                            //calcrent = dr["IsRentCalculated"].ToString();

                            strDTaxNM = dr["DTaxName"].ToString();
                            dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                            //if (Settings.POSIDRequired == "Y") strCustomerDOB = dr["CustomerDOB"].ToString();
                        }
                       

                       

                        DataTable dtbl1 = new DataTable();
                        DataTable dtbl2 = new DataTable();
                        DataTable dtbl3 = new DataTable();
                        DataTable dtbl4 = new DataTable();
                        DataTable dtbl5 = new DataTable();

                        OfflineRetailV2.Report.Sales.repInvMain rep_InvMain = new OfflineRetailV2.Report.Sales.repInvMain();
                        OfflineRetailV2.Report.Sales.repInvHeader1 rep_InvHeader1 = new OfflineRetailV2.Report.Sales.repInvHeader1();
                        OfflineRetailV2.Report.Sales.repInvHeader2 rep_InvHeader2 = new OfflineRetailV2.Report.Sales.repInvHeader2();
                        OfflineRetailV2.Report.Sales.repInvGALine rep_InvLine = new OfflineRetailV2.Report.Sales.repInvGALine();
                        OfflineRetailV2.Report.Sales.repInvSubtotal rep_InvSubtotal = new OfflineRetailV2.Report.Sales.repInvSubtotal();
                        OfflineRetailV2.Report.Sales.repInvRentLine rep_InvRentLine = new OfflineRetailV2.Report.Sales.repInvRentLine();
                        OfflineRetailV2.Report.Sales.repInvRentSubTotal rep_InvRentSubTotal = new OfflineRetailV2.Report.Sales.repInvRentSubTotal();
                        OfflineRetailV2.Report.Sales.repInvRentReturnLine rep_InvRentReturnLine = new OfflineRetailV2.Report.Sales.repInvRentReturnLine();
                        OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal rep_InvRentReturnSubTotal = new OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal();
                        OfflineRetailV2.Report.Sales.repInvTax rep_InvTax = new OfflineRetailV2.Report.Sales.repInvTax();
                        OfflineRetailV2.Report.Sales.repPPInvTendering rep_InvTendering = new OfflineRetailV2.Report.Sales.repPPInvTendering();
                        OfflineRetailV2.Report.Sales.repInvGC rep_InvGC = new OfflineRetailV2.Report.Sales.repInvGC();
                        OfflineRetailV2.Report.Sales.repInvMGC rep_InvMGC = new OfflineRetailV2.Report.Sales.repInvMGC();
                        OfflineRetailV2.Report.Sales.repInvCC rep_InvCC = new OfflineRetailV2.Report.Sales.repInvCC();
                        OfflineRetailV2.Report.Sales.repInvHA rep_InvHA = new OfflineRetailV2.Report.Sales.repInvHA();
                        OfflineRetailV2.Report.Sales.repInvSC rep_InvSC = new OfflineRetailV2.Report.Sales.repInvSC();

                        OfflineRetailV2.Report.Sales.repInvSign rep_InvSign = new OfflineRetailV2.Report.Sales.repInvSign();
                        OfflineRetailV2.Report.Sales.repInvCoupon rep_InvCoupon = new OfflineRetailV2.Report.Sales.repInvCoupon();
                        rep_InvMain.rReprint.Text = "";

                        /*if (Settings.ReceiptFooter == "")
                        {
                            rep_InvMain.rReportFooter.HeightF = 1.0f;
                            rep_InvMain.rReportFooter.LocationF = new PointF(8, 2);
                            rep_InvMain.xrBarCode.LocationF = new PointF(8, 5);
                            rep_InvMain.rCopy.LocationF = new PointF(567, 5);

                            rep_InvMain.xrShape1.LocationF = new PointF(581, 25);
                            rep_InvMain.xrPageInfo2.LocationF = new PointF(594, 25);
                            rep_InvMain.xrPageInfo1.LocationF = new PointF(681, 25);
                            rep_InvMain.xrShape2.LocationF = new PointF(725, 25);

                            rep_InvMain.ReportFooter.Height = 60;
                            rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                        }
                        else
                        {
                            rep_InvMain.ReportFooter.Height = 91;
                            rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;

                        }*/

                        
                        rep_InvMain.subrepH1.ReportSource = rep_InvHeader1;
                        rep_InvHeader1.Report.DataSource = dtbl;
                        rep_InvHeader1.rReprint.Text = "";
                        GeneralFunctions.MakeReportWatermark(rep_InvMain);
                        rep_InvHeader1.rReportHeaderCompany.Text = Settings.ReceiptHeader_Company;
                        rep_InvHeader1.rReportHeader.Text = Settings.ReceiptHeader_Address;
                        rep_InvHeader1.rTraining.Visible = Settings.PrintTrainingMode == "Y";
                        if (strservice == "Sales") rep_InvHeader1.rRefundCaption.Visible = dblOrderTotal < 0;
                        

                        rep_InvHeader1.rType.Text = "Preview Gift Aid Receipt";



                        rep_InvHeader1.xrTableCell2.Text = "Payment Ref ID";
                        rep_InvHeader1.xrTableCell4.Text = "Date";
                        rep_InvHeader1.rOrderNo.Text = intMaxInvNo.ToString();
                        if (Settings.PrintLogoInReceipt == "Y")
                        {
                            if (!boolnulllogo) rep_InvHeader1.rPic.DataBindings.Add("Image", dtbl, "Logo");
                        }
                        rep_InvHeader1.rOrderDate.Text = GeneralFunctions.fnDate(DateTime.Now).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");

                        rep_InvMain.xrBarCode.Text = intMaxInvNo.ToString();


                       
                        dtbl1 = dtblDetail;

                        string c_name = "";
                        string c_address = "";
                        string c_total = "";


                        foreach (DataRow dr in dtbl1.Rows)
                        {
                            c_name = dr["DiscountText"].ToString();
                            c_address = dr["Notes"].ToString();
                            c_total = dr["TotalPrice"].ToString();
                        }

                        rep_InvMain.subrepH2.ReportSource = rep_InvHeader2;
                        rep_InvHeader2.rlCustName.Text = "Name";
                        rep_InvHeader2.rCustName.Text = c_name;
                        if (c_address.Trim() != "")
                        {
                            rep_InvHeader2.rlCustID.Text = "Address";
                            rep_InvHeader2.rCustID.Text = c_address;
                        }
                        else
                        {
                            rep_InvHeader2.rlCustID.Text = "";
                        }

                        rep_InvHeader2.rlCompany.Text = "";

                        rep_InvMain.subrepLine.ReportSource = rep_InvLine;
                        rep_InvLine.DecimalPlace = Settings.DecimalPlace;
                        rep_InvLine.rlIem.Text = "Gift Aid";
                        rep_InvLine.rlTotal.Text = c_total;








                        

                      rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                      
                       

                        if (Settings.POSPrintInvoice == 0)
                        {
                            //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
                            try
                            {
                                if (Settings.ReportPrinterName != "") rep_InvMain.PrinterName = Settings.ReportPrinterName;
                                rep_InvMain.CreateDocument();
                                rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                                rep_InvMain.PrintingSystem.ShowPrintStatusDialog = false;

                                //rep_InvMain.ShowPreviewDialog();

                                DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                                window.PreviewControl.DocumentSource = rep_InvMain;
                                window.ShowDialog();

                            }
                            finally
                            {
                                rep_InvMain.Dispose();
                                rep_InvHeader1.Dispose();
                                rep_InvHeader2.Dispose();
                                rep_InvLine.Dispose();
                                rep_InvSubtotal.Dispose();
                                rep_InvTax.Dispose();
                                rep_InvTendering.Dispose();
                                rep_InvGC.Dispose();
                                rep_InvHA.Dispose();
                                rep_InvSign.Dispose();
                                rep_InvCoupon.Dispose();

                                dtbl.Dispose();
                                dtbl1.Dispose();
                                dtbl2.Dispose();
                                dtbl3.Dispose();
                                dtbl4.Dispose();
                                dtbl5.Dispose();
                               
                            }
                        }

                      


                    }
                    else
                    {
                        
                        if (Settings.PreprintedReceipt == "N") // Not Preprinted format
                        {

                            DataTable dtbl = new DataTable();
                            PosDataObject.POS objPOS1 = new PosDataObject.POS();
                            objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            dtbl = dtblHeader;

                            DataTable dlogo = new DataTable();
                            objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            dlogo = objPOS1.FetchStoreLogo();
                            bool boolnulllogo = false;
                            foreach (DataRow drl1 in dtbl.Rows)
                            {
                                foreach (DataRow drl2 in dlogo.Rows)
                                {
                                    if (drl2["logo"] == null) boolnulllogo = true;
                                    drl1["Logo"] = drl2["logo"];
                                }
                            }

                            int intTranNo = 0;
                            double dblOrderTotal = 0;
                            double dblOrderSubtotal = 0;
                            double dblDiscount = 0;
                            double dblCoupon = 0;
                            double dblTax = 0;
                            double dblSurcharge = 0;
                            int intCID = 0;
                            string strDiscountReason = "";
                            double dblTax1 = 0;
                            double dblTax2 = 0;
                            double dblTax3 = 0;
                            string strTaxNM1 = "";
                            string strTaxNM2 = "";
                            string strTaxNM3 = "";
                            string strservice = "";
                            int intHeaderStatus = 0;
                            double dblRentDeposit = 0;
                            double dblRentReturnDeposit = 0;
                            double dblRepairAmount = 0;
                            double dblRepairAdvanceAmount = 0;
                            string strRepairDeliveryDate = "";
                            string calcrent = "N";

                            double dblFees = 0;
                            double dblFeesTax = 0;

                            double dblFeesCoupon = 0;
                            double dblFeesCouponTax = 0;

                            string strDTaxNM = "";
                            double dblDTax = 0;

                            string strCustomerDOB = "";

                            foreach (DataRow dr in dtbl.Rows)
                            {
                                //intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                                intCID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                                dblOrderTotal = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                                dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                                dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                                dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                                //dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                                //dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                                //dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                                //strTaxNM1 = dr["TaxNM1"].ToString();
                                //strTaxNM2 = dr["TaxNM2"].ToString();
                                //strTaxNM3 = dr["TaxNM3"].ToString();

                                dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                                dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                                dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                                dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                                strDiscountReason = dr["DiscountReason"].ToString();
                                strservice = dr["ServiceType"].ToString();
                                //intHeaderStatus = GeneralFunctions.fnInt32(dr["Status"].ToString());
                                //dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                                //dblRepairAmount = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                                //dblRepairAdvanceAmount = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                                //if (dr["RepairDeliveryDate"].ToString() != "") strRepairDeliveryDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToShortDateString();
                                //calcrent = dr["IsRentCalculated"].ToString();

                                //strDTaxNM = dr["DTaxName"].ToString();
                                //dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                               // if (Settings.POSIDRequired == "Y") strCustomerDOB = dr["CustomerDOB"].ToString();
                            }
                            if (intHeaderStatus == 17) dblOrderTotal = dblRepairAmount;
                            


                           

                            DataTable dtbl1 = new DataTable();
                            DataTable dtbl2 = new DataTable();
                            DataTable dtbl3 = new DataTable();
                            DataTable dtbl4 = new DataTable();
                            DataTable dtbl5 = new DataTable();

                            OfflineRetailV2.Report.Sales.repInvMain rep_InvMain = new OfflineRetailV2.Report.Sales.repInvMain();
                            OfflineRetailV2.Report.Sales.repInvHeader1 rep_InvHeader1 = new OfflineRetailV2.Report.Sales.repInvHeader1();
                            OfflineRetailV2.Report.Sales.repInvHeader2 rep_InvHeader2 = new OfflineRetailV2.Report.Sales.repInvHeader2();
                            OfflineRetailV2.Report.Sales.repInvLine rep_InvLine = new OfflineRetailV2.Report.Sales.repInvLine();
                            OfflineRetailV2.Report.Sales.repInvSubtotal rep_InvSubtotal = new OfflineRetailV2.Report.Sales.repInvSubtotal();
                            OfflineRetailV2.Report.Sales.repInvRentLine rep_InvRentLine = new OfflineRetailV2.Report.Sales.repInvRentLine();
                            OfflineRetailV2.Report.Sales.repInvRentSubTotal rep_InvRentSubTotal = new OfflineRetailV2.Report.Sales.repInvRentSubTotal();
                            OfflineRetailV2.Report.Sales.repInvRentReturnLine rep_InvRentReturnLine = new OfflineRetailV2.Report.Sales.repInvRentReturnLine();
                            OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal rep_InvRentReturnSubTotal = new OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal();
                            OfflineRetailV2.Report.Sales.repInvTax rep_InvTax = new OfflineRetailV2.Report.Sales.repInvTax();
                            OfflineRetailV2.Report.Sales.repPPInvTendering rep_InvTendering = new OfflineRetailV2.Report.Sales.repPPInvTendering();
                            OfflineRetailV2.Report.Sales.repInvGC rep_InvGC = new OfflineRetailV2.Report.Sales.repInvGC();
                            OfflineRetailV2.Report.Sales.repInvMGC rep_InvMGC = new OfflineRetailV2.Report.Sales.repInvMGC();
                            OfflineRetailV2.Report.Sales.repInvCC rep_InvCC = new OfflineRetailV2.Report.Sales.repInvCC();
                            OfflineRetailV2.Report.Sales.repInvHA rep_InvHA = new OfflineRetailV2.Report.Sales.repInvHA();
                            OfflineRetailV2.Report.Sales.repInvSC rep_InvSC = new OfflineRetailV2.Report.Sales.repInvSC();

                            OfflineRetailV2.Report.Sales.repInvSign rep_InvSign = new OfflineRetailV2.Report.Sales.repInvSign();
                            OfflineRetailV2.Report.Sales.repInvCoupon rep_InvCoupon = new OfflineRetailV2.Report.Sales.repInvCoupon();
                            rep_InvMain.rReprint.Text = "";
                            if (Settings.ReceiptFooter == "")
                            {
                                rep_InvMain.rReportFooter.HeightF = 1.0f;
                                rep_InvMain.rReportFooter.LocationF = new System.Drawing.PointF(8, 2);
                                rep_InvMain.xrBarCode.LocationF = new System.Drawing.PointF(8, 5);
                                rep_InvMain.rCopy.LocationF = new System.Drawing.PointF(567, 5);

                                rep_InvMain.xrShape1.LocationF = new System.Drawing.PointF(581, 25);
                                rep_InvMain.xrPageInfo2.LocationF = new System.Drawing.PointF(594, 25);
                                rep_InvMain.xrPageInfo1.LocationF = new System.Drawing.PointF(681, 25);
                                rep_InvMain.xrShape2.LocationF = new System.Drawing.PointF(725, 25);

                                rep_InvMain.ReportFooter.Height = 60;
                                rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                            }
                            else
                            {
                                rep_InvMain.ReportFooter.Height = 91;
                                rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;

                            }

                           
                            rep_InvMain.subrepH1.ReportSource = rep_InvHeader1;
                            rep_InvHeader1.Report.DataSource = dtbl;
                            rep_InvHeader1.rReprint.Text = "";
                            GeneralFunctions.MakeReportWatermark(rep_InvMain);
                            rep_InvHeader1.rReportHeaderCompany.Text = Settings.ReceiptHeader_Company;
                            rep_InvHeader1.rReportHeader.Text = Settings.ReceiptHeader_Address;
                            rep_InvHeader1.rTraining.Visible = Settings.PrintTrainingMode == "Y";
                            if (strservice == "Sales") rep_InvHeader1.rRefundCaption.Visible = dblOrderTotal < 0;
                            rep_InvHeader1.rType.Text = "";

                            if (strservice == "Rent")
                            {
                                if (intHeaderStatus == 15) rep_InvHeader1.rType.Text = Properties.Resources.Rent_Issued;
                                if (intHeaderStatus == 16) rep_InvHeader1.rType.Text = Properties.Resources.Rent_Item_Returned;
                            }

                            int RprParent = 0;
                            if (strservice == "Repair")
                            {
                                if (intHeaderStatus == 17)
                                {
                                    if (strRepairDeliveryDate != "") rep_InvHeader1.rType.Text = Properties.Resources.Repair_In + "      " + Properties.Resources.Expected_Delivety_Date__ + " : " + strRepairDeliveryDate;
                                    else rep_InvHeader1.rType.Text = Properties.Resources.Repair_In;
                                }
                                if (intHeaderStatus == 18)
                                {
                                    rep_InvHeader1.rType.Text = Properties.Resources.Repair_Delivered;
                                    RprParent = FetchRepairParentID(intMaxInvNo);
                                }
                            }
                            rep_InvHeader1.rOrderNo.Text = intMaxInvNo.ToString();
                            if (Settings.PrintLogoInReceipt == "Y")
                            {
                                if (!boolnulllogo) rep_InvHeader1.rPic.DataBindings.Add("Image", dtbl, "Logo");
                            }
                            rep_InvHeader1.rOrderDate.Text = GeneralFunctions.fnDate(DateTime.Now).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");

                            rep_InvMain.xrBarCode.Text = intMaxInvNo.ToString();

                            if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                            {
                                rep_InvHeader1.rOrderDate.DataBindings.Add("Text", dtbl, "RepairDateIn");
                            }


                            if (intCID > 0)
                            {
                                rep_InvMain.subrepH2.ReportSource = rep_InvHeader2;
                                rep_InvHeader2.Report.DataSource = dtbl;
                                rep_InvHeader2.rCustID.DataBindings.Add("Text", dtbl, "CustID");
                                rep_InvHeader2.rCustName.DataBindings.Add("Text", dtbl, "CustName");
                                rep_InvHeader2.rCompany.DataBindings.Add("Text", dtbl, "CustCompany");

                                if (intHeaderStatus == 3)
                                {
                                    if (strCustomerDOB != "")
                                    {
                                        rep_InvHeader2.rlCustDOB.Text = Properties.Resources.Date_of_Birth;
                                        rep_InvHeader2.rCustDOB.Text = GeneralFunctions.fnDate(strCustomerDOB).ToString(SystemVariables.DateFormat);
                                    }
                                }

                                if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                                {
                                    rep_InvHeader2.rlCustID.Text = Properties.Resources.Ph_;
                                    rep_InvHeader2.rCustID.DataBindings.Add("Text", dtbl, "CustMobile");

                                    rep_InvHeader2.rlCompany.DataBindings.Add("Text", dtbl, "RepairItemName");
                                    rep_InvHeader2.rCompany.DataBindings.Add("Text", dtbl, "RepairItemSlNo");
                                }
                            }
                            else
                            {
                                if (intHeaderStatus == 3)
                                {
                                    if (strCustomerDOB != "")
                                    {
                                        rep_InvMain.subrepH2.ReportSource = rep_InvHeader2;
                                        rep_InvHeader2.Report.DataSource = dtbl;
                                        rep_InvHeader2.rCustName.Text = "";
                                        rep_InvHeader2.rCustID.Text = "";
                                        rep_InvHeader2.rCompany.Text = "";
                                        rep_InvHeader2.rlCustName.Text = "";
                                        rep_InvHeader2.rlCustID.Text = "";
                                        rep_InvHeader2.rlCompany.Text = "";

                                        if (intHeaderStatus == 3)
                                        {
                                            if (strCustomerDOB != "")
                                            {
                                                rep_InvHeader2.rlCustDOB.Text = Properties.Resources.Date_of_Birth;
                                                rep_InvHeader2.rCustDOB.Text = GeneralFunctions.fnDate(strCustomerDOB).ToString(SystemVariables.DateFormat);
                                            }
                                        }
                                    }
                                }
                            }

                            PosDataObject.POS objPOS2 = new PosDataObject.POS();
                            objPOS2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            if (intHeaderStatus != 18) dtbl1 = dtblDetail;
                            else dtbl1 = dtblDetail;
                            RearrangeForTaggedItemInInvoice(dtbl1);
                            RearrangeForLineDisplay1(dtbl1);
                            if ((intHeaderStatus == 16) && (calcrent == "Y"))
                            {
                                foreach (DataRow d in dtbl1.Rows)
                                {
                                    d["Qty"] = -GeneralFunctions.fnDouble(d["Qty"].ToString());
                                    d["TotalPrice"] = -GeneralFunctions.fnDouble(d["TotalPrice"].ToString());
                                }
                            }
                            if (strservice == "Rent")
                            {
                                if (intHeaderStatus == 15) // issue
                                {
                                    rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                                    rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                    rep_InvRentLine.Report.DataSource = dtbl1;
                                    rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                    rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                    rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                    rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                    rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                    rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                    rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                    rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                                    rep_InvLine.rManualWeight.DataBindings.Add("Text", dtbl1, "ExtraValue1");

                                    if (Settings.ShowFeesInReceipt == "Y")
                                    {
                                        rep_InvRentLine.rFeesTxt.Visible = true;
                                        rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                    }
                                    else
                                    {
                                        rep_InvRentLine.rFeesTxt.Visible = false;
                                    }
                                }
                                if (intHeaderStatus == 16) // return
                                {
                                    if (calcrent == "N")
                                    {
                                        rep_InvMain.subrepLine.ReportSource = rep_InvRentReturnLine;
                                        rep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                                        rep_InvRentReturnLine.Report.DataSource = dtbl1;
                                        rep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                        rep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                        rep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                        rep_InvRentReturnLine.rlAmt.Visible = false;
                                        rep_InvRentReturnLine.xrTableCell2.Visible = false;
                                    }
                                    if (calcrent == "Y")
                                    {
                                        rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                                        rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                        rep_InvRentLine.Report.DataSource = dtbl1;
                                        rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                        rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                        rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                        rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                        rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                        rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                        rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                        rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                                        if (Settings.ShowFeesInReceipt == "Y")
                                        {
                                            rep_InvRentLine.rFeesTxt.Visible = true;
                                            rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                        }
                                        else
                                        {
                                            rep_InvRentLine.rFeesTxt.Visible = false;
                                        }
                                    }
                                }
                            }
                            else if (strservice == "Repair")
                            {
                                if (intHeaderStatus == 17) // issue
                                {
                                    rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                                    rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                    rep_InvRentLine.Report.DataSource = dtbl1;
                                    rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                    rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                    rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                    rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                    rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                    rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                    rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                    rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                                    if (Settings.ShowFeesInReceipt == "Y")
                                    {
                                        rep_InvRentLine.rFeesTxt.Visible = true;
                                        rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                    }
                                    else
                                    {
                                        rep_InvRentLine.rFeesTxt.Visible = false;
                                    }
                                }
                                if (intHeaderStatus == 18) // return
                                {
                                    rep_InvMain.subrepLine.ReportSource = rep_InvRentReturnLine;
                                    rep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                                    rep_InvRentReturnLine.Report.DataSource = dtbl1;
                                    rep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                    rep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                    rep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                    rep_InvRentReturnLine.rlAmt.DataBindings.Add("Text", dtbl1, "TotalPrice");
                                }
                            }
                            else
                            {
                                rep_InvMain.subrepLine.ReportSource = rep_InvLine;
                                rep_InvLine.DecimalPlace = Settings.DecimalPlace;
                                rep_InvLine.Report.DataSource = dtbl1;
                                rep_InvLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                rep_InvLine.rlSKU.DataBindings.Add("Text", dtbl1, "SKU");
                                rep_InvLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                rep_InvLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                rep_InvLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                rep_InvLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                rep_InvLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                rep_InvLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                                rep_InvLine.rManualWeight.DataBindings.Add("Text", dtbl1, "ExtraValue1");
                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    rep_InvLine.rFeesTxt.Visible = true;
                                    rep_InvLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                }
                                else
                                {
                                    rep_InvLine.rFeesTxt.Visible = false;
                                }
                            }

                            foreach (DataRow dr12 in dtbl1.Rows)
                            {
                                dblOrderSubtotal = dblOrderSubtotal + GeneralFunctions.fnDouble(dr12["TotalPrice"].ToString()) + GeneralFunctions.fnDouble(dr12["Discount"].ToString());
                            }

                            //dblOrderSubtotal = Settings.TaxInclusive == "N" ? dblOrderSubtotal : dblOrderSubtotal - dblTax;

                            if (strservice == "Rent")
                            {
                                if (intHeaderStatus == 15) // issue
                                {
                                    rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentSubTotal;
                                    rep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                                    rep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                                    rep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                                    rep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                                    rep_InvRentSubTotal.DR = strDiscountReason;
                                    rep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                                }

                                if (intHeaderStatus == 16) // return
                                {
                                    if (calcrent == "N")
                                    {
                                        if (dblOrderTotal != 0)
                                        {
                                            rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentReturnSubTotal;
                                            rep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                            rep_InvRentReturnSubTotal.rReturnDeposit.Text = dblOrderTotal.ToString();
                                        }
                                    }

                                    if (calcrent == "Y")
                                    {
                                        rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentReturnSubTotal;
                                        rep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                        rep_InvRentReturnSubTotal.rReturnDeposit.Text = (-dblRentDeposit).ToString();
                                    }
                                }
                            }
                            else if (strservice == "Repair")
                            {
                                if (intHeaderStatus == 17) // issue
                                {
                                    rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentSubTotal;
                                    rep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                                    rep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                                    rep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                                    rep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                                    rep_InvRentSubTotal.DR = strDiscountReason;
                                    rep_InvRentSubTotal.rw1.Visible = false;
                                    rep_InvRentSubTotal.rw2.Visible = false;
                                    rep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                                }
                            }
                            else
                            {
                                rep_InvMain.subrepSubtotal.ReportSource = rep_InvSubtotal;
                                rep_InvSubtotal.DecimalPlace = Settings.DecimalPlace;
                                rep_InvSubtotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                                rep_InvSubtotal.rDiscount.Text = dblDiscount.ToString();
                                rep_InvSubtotal.DR = strDiscountReason;
                                rep_InvSubtotal.rTax.Text = dblTax.ToString();


                            }

                            /*if (dblTax != 0)
                            {
                                dtbl2.Columns.Add("Name", System.Type.GetType("System.String"));
                                dtbl2.Columns.Add("Amount", System.Type.GetType("System.String"));

                                if (dblTax1 != 0)
                                {
                                    dtbl2.Rows.Add(new object[] { strTaxNM1, dblTax1.ToString() });
                                }

                                if (dblTax2 != 0)
                                {
                                    dtbl2.Rows.Add(new object[] { strTaxNM2, dblTax2.ToString() });
                                }

                                if (dblTax3 != 0)
                                {
                                    dtbl2.Rows.Add(new object[] { strTaxNM3, dblTax3.ToString() });
                                }

                                if (dblDTax != 0)
                                {
                                    dtbl2.Rows.Add(new object[] { "Dest. Tax: " + strDTaxNM, dblDTax.ToString() });
                                }

                                rep_InvMain.subrepTax.ReportSource = rep_InvTax;
                                rep_InvTax.DecimalPlace = Settings.DecimalPlace;

                                rep_InvTax.Report.DataSource = dtbl2;
                                rep_InvTax.rDTax1.DataBindings.Add("Text", dtbl2, "Name");
                                rep_InvTax.rDTax2.DataBindings.Add("Text", dtbl2, "Amount");
                            }*/

                            PosDataObject.POS objPOS23 = new PosDataObject.POS();
                            objPOS23.Connection = new SqlConnection(SystemVariables.ConnectionString);

                           

                           

                            rep_InvMain.subrepTender.ReportSource = rep_InvTendering;
                            rep_InvTendering.Report.DataSource = dtbl3;
                            rep_InvTendering.DecimalPlace = Settings.DecimalPlace;

                            

                            

                            if ((intHeaderStatus == 15) && (calcrent == "Y")) rep_InvTendering.rTotal.Text = dblRentDeposit.ToString();
                            else if ((intHeaderStatus == 15) && (calcrent == "N")) rep_InvTendering.rTotal.Text = (dblOrderTotal + dblRentDeposit).ToString();
                            else rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                            rep_InvTendering.lbTenderText.Visible = false;



                            if (strservice == "Repair")
                            {
                                string MFooter = "";
                                if ((Settings.ReceiptFooter == "") && (Settings.ReceiptLayawayPolicy == ""))
                                {
                                    rep_InvMain.ReportFooter.Height = 35;
                                    rep_InvMain.rReportFooter.Text = "";
                                }
                                else
                                {
                                    if (Settings.ReceiptFooter != "") MFooter = Properties.Resources.CUSTOMER_AGREEMENT_ + Settings.ReceiptFooter;
                                    if (Settings.ReceiptLayawayPolicy != "")
                                    {
                                        if (Settings.ReceiptFooter == "") MFooter = Properties.Resources.REPAIR_DISCLAIMER_ + Settings.ReceiptLayawayPolicy;
                                        else MFooter = MFooter + " \n " + Properties.Resources.REPAIR_DISCLAIMER_ + Settings.ReceiptLayawayPolicy;
                                    }
                                    rep_InvMain.ReportFooter.Height = 120;
                                    rep_InvMain.rReportFooter.Text = MFooter;

                                }

                                rep_InvMain.subrepRepairSign.ReportSource = rep_InvSign;

                                if (intHeaderStatus == 17)
                                {
                                    rep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                                    rep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                                    rep_InvTendering.rlbDue.Text = Properties.Resources.Balance_Due;
                                    rep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();

                                    rep_InvSign.rTxt.Text = Properties.Resources.I_AGREE_TO_PAY + " " + (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                                }
                                if (intHeaderStatus == 18)
                                {
                                    if (dblRepairAdvanceAmount > 0)
                                    {
                                        rep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                                        rep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                                        rep_InvTendering.rlbDue.Text = Properties.Resources.Balance_Due;
                                        rep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                                    }
                                    else
                                    {
                                        rep_InvTendering.rlbAdvance.Text = "";
                                        rep_InvTendering.rAdvance.Text = "";
                                        rep_InvTendering.rlbDue.Text = "";
                                        rep_InvTendering.rDue.Text = "";
                                        rep_InvTendering.rtr1.HeightF = 1.0f;
                                        rep_InvTendering.rtr2.HeightF = 1.0f;
                                        rep_InvTendering.rtbl.HeightF = 55.0f;
                                        rep_InvTendering.PageHeader.HeightF = 55.0f;
                                    }
                                    rep_InvSign.rTxt.Text = "";
                                }
                            }
                            else
                            {
                                rep_InvTendering.rlbAdvance.Text = "";
                                rep_InvTendering.rAdvance.Text = "";
                                rep_InvTendering.rlbDue.Text = "";
                                rep_InvTendering.rDue.Text = "";

                                rep_InvTendering.rtr1.HeightF = 1.0f;
                                rep_InvTendering.rtr2.HeightF = 1.0f;
                                rep_InvTendering.rtbl.HeightF = 55.0f;
                                rep_InvTendering.PageHeader.HeightF = 55.0f;
                            }

                            double EffectiveTotal = 0;
                            if ((intHeaderStatus == 15) && (calcrent == "Y")) EffectiveTotal = dblRentDeposit;
                            else if ((intHeaderStatus == 15) && (calcrent == "N")) EffectiveTotal = dblOrderTotal + dblRentDeposit;
                            else if (intHeaderStatus == 17) EffectiveTotal = dblRepairAdvanceAmount;
                            else if (intHeaderStatus == 18) EffectiveTotal = dblRepairAmount - dblRepairAdvanceAmount;
                            else EffectiveTotal = dblOrderTotal;

                            rep_InvTendering.ChangeDue = false;
                            rep_InvTendering.ReportFooter.Visible = false;

                            if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                            {
                                //rep_InvTendering.ChangeDue = false;
                                //rep_InvTendering.ReportFooter.Visibility=Visibility.Collapsed;
                            }





                            try
                            {
                                if (Settings.ReportPrinterName != "") rep_InvMain.PrinterName = Settings.ReportPrinterName;
                                rep_InvMain.CreateDocument();
                                rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                                rep_InvMain.PrintingSystem.ShowPrintStatusDialog = false;

                                //rep_InvMain.ShowPreviewDialog();

                                DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                                window.PreviewControl.DocumentSource = rep_InvMain;
                                window.ShowDialog();

                            }
                            finally
                            {
                                rep_InvMain.Dispose();
                                rep_InvHeader1.Dispose();
                                rep_InvHeader2.Dispose();
                                rep_InvLine.Dispose();
                                rep_InvSubtotal.Dispose();
                                rep_InvTax.Dispose();
                                rep_InvTendering.Dispose();
                                rep_InvGC.Dispose();
                                rep_InvHA.Dispose();
                                rep_InvSign.Dispose();
                                rep_InvCoupon.Dispose();

                                dtbl.Dispose();
                                dtbl1.Dispose();
                                dtbl2.Dispose();
                                dtbl3.Dispose();
                                dtbl4.Dispose();
                                dtbl5.Dispose();
                                
                            }


                            



                           

                        }
                        

                        
                    }
                }
                ExecuteGreenAlert("RCT Printed successfully");
            }
            catch
            {
                ExecuteRedAlert("RCT failed to print");
            }
        }

        private void ExecuteGreenAlert(string msg)
        {
            Alert.GreenAlert alertWindow = new Alert.GreenAlert(msg);

        }

        private void ExecuteRedAlert(string msg)
        {
            Alert.RedAlert alertWindow = new Alert.RedAlert(msg, "BL");

        }

        private void ScrlViewer_ManipulationBoundaryFeedback(object sender, ManipulationBoundaryFeedbackEventArgs e)
        {
            e.Handled = true;
        }

        private void DisplayItemExpiryAlert(string ExpiryDate)
        {
            if (GeneralFunctions.fnDate(ExpiryDate).Date < DateTime.Today.Date)
            {
                new MessageBoxWindow().Show("This product has expired on \r\n" + GeneralFunctions.fnDate(ExpiryDate).ToString("MMMM d, yyyy"), "Alert", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
            else
            {
                int dayBetween = (int)(GeneralFunctions.fnDate(ExpiryDate).Date - DateTime.Today.Date).TotalDays;
                if (dayBetween <= Settings.ItemExpiryAlertDay)
                {
                    if (dayBetween == 0)
                    {
                        new MessageBoxWindow().Show("This product will be expire on Today", "Alert", MessageBoxButton.OK, MessageBoxImage.Warning);
                    }
                    else if (dayBetween == 1)
                    {
                        new MessageBoxWindow().Show("This product will be expire on Tommorrow", "Alert", MessageBoxButton.OK, MessageBoxImage.Warning);
                    }
                    else
                    {
                        new MessageBoxWindow().Show("This product will be expire on \r\n" + GeneralFunctions.fnDate(ExpiryDate).ToString("MMMM d, yyyy"), "Alert", MessageBoxButton.OK, MessageBoxImage.Warning);
                    }
                }
            }
            
        }
    }



    public static class VisualTreeHelperExt
    {
        public static T TryFindParent<T>(this DependencyObject child)
    where T : DependencyObject
        {
            DependencyObject parentObject = GetParentObject(child);
            if (parentObject == null) return null;
            T parent = parentObject as T;
            if (parent != null)
            {
                return parent;
            }
            else
            {
                return TryFindParent<T>(parentObject);
            }
        }

        public static DependencyObject GetParentObject(this DependencyObject child)
        {
            if (child == null) return null;
            ContentElement contentElement = child as ContentElement;
            if (contentElement != null)
            {
                DependencyObject parent = ContentOperations.GetParent(contentElement);
                if (parent != null) return parent;
                FrameworkContentElement fce = contentElement as FrameworkContentElement;
                return fce != null ? fce.Parent : null;
            }
            FrameworkElement frameworkElement = child as FrameworkElement;
            if (frameworkElement != null)
            {
                DependencyObject parent = frameworkElement.Parent;
                if (parent != null) return parent;
            }
            return VisualTreeHelper.GetParent(child);
        }
    }

    public class TouchScrolling : DependencyObject
    {
        public static bool GetIsEnabled(DependencyObject obj)
        {
            return (bool)obj.GetValue(IsEnabledProperty);
        }

        public static void SetIsEnabled(DependencyObject obj, bool value)
        {
            obj.SetValue(IsEnabledProperty, value);
        }

        public bool IsEnabled
        {
            get { return (bool)GetValue(IsEnabledProperty); }
            set { SetValue(IsEnabledProperty, value); }
        }

        public static readonly DependencyProperty IsEnabledProperty =
            DependencyProperty.RegisterAttached("IsEnabled", typeof(bool), typeof(TouchScrolling), new UIPropertyMetadata(false, IsEnabledChanged));

        static Dictionary<object, MouseCapture> _captures = new Dictionary<object, MouseCapture>();

        static void IsEnabledChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var target = d as ScrollViewer;
            if (target == null) return;

            if ((bool)e.NewValue)
            {
                target.Loaded += target_Loaded;
            }
            else
            {
                target_Unloaded(target, new RoutedEventArgs());
            }
        }

        static void target_Unloaded(object sender, RoutedEventArgs e)
        {
            System.Diagnostics.Debug.WriteLine("Target Unloaded");

            var target = sender as ScrollViewer;
            if (target == null) return;

            _captures.Remove(sender);

            target.Loaded -= target_Loaded;
            target.Unloaded -= target_Unloaded;
            target.PreviewMouseLeftButtonDown -= target_PreviewMouseLeftButtonDown;
            target.PreviewMouseMove -= target_PreviewMouseMove;

            target.PreviewMouseLeftButtonUp -= target_PreviewMouseLeftButtonUp;
        }

        static void target_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            var target = sender as ScrollViewer;
            if (target == null) return;

            _captures[sender] = new MouseCapture
            {
                VerticalOffset = target.VerticalOffset,
                Point = e.GetPosition(target),
            };
        }

        static void target_Loaded(object sender, RoutedEventArgs e)
        {
            var target = sender as ScrollViewer;
            if (target == null) return;

            System.Diagnostics.Debug.WriteLine("Target Loaded");

            target.Unloaded += target_Unloaded;
            target.PreviewMouseLeftButtonDown += target_PreviewMouseLeftButtonDown;
            target.PreviewMouseMove += target_PreviewMouseMove;

            target.PreviewMouseLeftButtonUp += target_PreviewMouseLeftButtonUp;
        }

        static void target_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            var target = sender as ScrollViewer;
            if (target == null) return;

            target.ReleaseMouseCapture();
        }

        static void target_PreviewMouseMove(object sender, System.Windows.Input.MouseEventArgs e)
        {
            if (!_captures.ContainsKey(sender)) return;

            if (e.LeftButton != MouseButtonState.Pressed)
            {
                _captures.Remove(sender);
                return;
            }

            var target = sender as ScrollViewer;
            if (target == null) return;

            var capture = _captures[sender];

            var point = e.GetPosition(target);

            var dy = point.Y - capture.Point.Y;
            if (Math.Abs(dy) > 5)
            {
                target.CaptureMouse();
            }

            target.ScrollToVerticalOffset(capture.VerticalOffset - dy);
        }

        internal class MouseCapture
        {
            public Double VerticalOffset { get; set; }
            public Point Point { get; set; }
        }


    }

}
