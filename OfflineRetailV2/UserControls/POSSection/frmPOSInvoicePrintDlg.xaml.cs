using OfflineRetailV2.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;
using System.Text.RegularExpressions;
using System.Printing;
using System.Windows.Markup;
using System.Xml;
using System.IO;
using System.Collections;
using PosDataObject;
using System.Drawing;


namespace OfflineRetailV2.UserControls.POSSection
{
    public partial class frmPOSInvoicePrintDlg : Window
    {
        #region Variables

        private bool PrintDuplicateGCSaleReceipt = false;
        private int NewPrintCopy = 1;
        private string NewPrinterName = "";
        private int NewTemplateID = 0;
        private string NewTemplateSize = "";
        private bool FindNewTemplate = false;
        private int T_Width = 270;
        private DataTable NewTemplateLinkData = null;
        private int chrperline = 55;

        private FlowDocumentScrollViewer FVPrint1;
        private FlowDocumentScrollViewer FVPrint2;

        private System.Windows.Controls.Image imglogoD;
        private System.Windows.Controls.Image imglogo;
        private System.Windows.Controls.Image imglogo1;
        private System.Windows.Controls.Image imglogo2;
        private System.Windows.Controls.Image imglogo3;

        private string documentContents;
        private string stringToPrint = "";

        private string strExportDir = "";
        private string strExportPath = "";
        private string strExportFile = "";
        private bool blViewPrevFile = false;

        private int lineptr = 0;
        private int linecnt = 0;
        private int lineptr1 = 0;
        private int linecnt1 = 0;
        private int lineptr2 = 0;
        private int linecnt2 = 0;

        private int lineptremv1 = 0;
        private int lineptremv2 = 0;
        private int linecntemv1 = 0;
        private int linecntemv2 = 0;

        private bool blprintclick = false;
        private bool blexecuteexport = false;
        private bool blexecutecentralexport = false;
        //private Font printFont;
        private StreamReader streamToPrint;
        private ArrayList prstrm;
        private DataTable dtblstrm = null;
        private DataTable dtblstrm1 = null;
        private DataTable dtblstrm2 = null;


        private DataTable dtblstrmEMV1 = null;
        private DataTable dtblstrmEMV2 = null;

        private DataTable dtblPreviewTaxDetails;
        private DataTable dtblPreviewInvoiceDetails;
        private DataTable dtblPreviewInvoiceHeader;

        private int intInvNo;
        private int intTrnNo;
        private int intLayNo;
        private int intLayTran;
        /*private Font f_title;
        private Font f_body;
        private Font f_bodybold;
        private Font f_body1;
        private Font f_body2;
        private Font f_footer;*/
        private int intPageCounter;
        private string strPrintType;

        private string strPaidOutDesc;
        private double dblPaidOutAmount;
        private int intPaidOutTranNo;

        private int intReprintCnt;
        private bool blIsLayawayRefund;
        private DataTable dtblLayawayDtbl;
        private bool blIsVoid;
        private int intCloseoutID;
        private string strCloseoutType;
        private bool blCloseoutSaleDept;
        private bool blCloseoutSaleHour;
        private bool blIsCloseout;
        private bool blIsWorkOrderPayment;
        private string strCloseoutExportLocation;
        private int Expr;
        private int intWO = 0;
        private string strWOdt = "";
        private bool blDatacapManualTendering = false;
        private bool blCardPayment = false;
        private bool blHouseAccountPayment = false;
        private bool blFSTender = false;
        /*private Font f_labeltxt1;
        private Font f_labeltxt2;
        private Font f_labelbarcodetxt;*/

        private bool isNewPage = false;

        private string strLabelSKU;
        private string strLabelName;
        private string strLabelPrice;
        private int intLabelQty;
        private int intLabelColumn;
        private int intGCID;

        private string strTranID;
        private string strApprovalNum;
        private string strCardNum;
        private string strCardExMM;
        private string strCardExYY;
        private string strCardLogo;
        private string strCardType;
        private string strApprovedAmt;
        private string strRefNo;
        private string strCardEntry;
        private string strMercuryMerchantID;
        private string strServiceType;
        private double dblRentalSecurityDeposit;
        private bool blIsRentIssued = false;
        private bool blIsRentReturned = false;

        private bool blPrinting = false;

        private bool blCashdrawerOpenFlag;

        private bool blPrintCloseout;

        private bool MercuryCardPaymentCheck = false;
        private bool EMVTransaction = false;
        private bool blForced2ReceiptsOnPrecidiaSignatureFailure;

        public bool boolPrintCloseout
        {
            get { return blPrintCloseout; }
            set { blPrintCloseout = value; }
        }

        public DataTable PreviewInvoiceHeader
        {
            get { return dtblPreviewInvoiceHeader; }
            set { dtblPreviewInvoiceHeader = value; }
        }

        public DataTable PreviewInvoiceDetails
        {
            get { return dtblPreviewInvoiceDetails; }
            set { dtblPreviewInvoiceDetails = value; }
        }

        public DataTable PreviewTaxDetails
        {
            get { return dtblPreviewTaxDetails; }
            set { dtblPreviewTaxDetails = value; }
        }

        public bool Forced2ReceiptsOnPrecidiaSignatureFailure
        {
            get { return blForced2ReceiptsOnPrecidiaSignatureFailure; }
            set { blForced2ReceiptsOnPrecidiaSignatureFailure = value; }
        }

        public bool CashdrawerOpenFlag
        {
            get { return blCashdrawerOpenFlag; }
            set { blCashdrawerOpenFlag = value; }
        }

        public bool IsRentReturned
        {
            get { return blIsRentReturned; }
            set { blIsRentReturned = value; }
        }

        public bool IsRentIssued
        {
            get { return blIsRentIssued; }
            set { blIsRentIssued = value; }
        }

        public string ServiceType
        {
            get { return strServiceType; }
            set { strServiceType = value; }
        }

        public double RentalSecurityDeposit
        {
            get { return dblRentalSecurityDeposit; }
            set { dblRentalSecurityDeposit = value; }
        }

        public int GCID
        {
            get { return intGCID; }
            set { intGCID = value; }
        }

        public string MercuryMerchantID
        {
            get { return strMercuryMerchantID; }
            set { strMercuryMerchantID = value; }
        }

        public string TranID
        {
            get { return strTranID; }
            set { strTranID = value; }
        }

        public string ApprovalNumber
        {
            get { return strApprovalNum; }
            set { strApprovalNum = value; }
        }

        public string CardNumber
        {
            get { return strCardNum; }
            set { strCardNum = value; }
        }

        public string CardExMM
        {
            get { return strCardExMM; }
            set { strCardExMM = value; }
        }

        public string CardExYY
        {
            get { return strCardExYY; }
            set { strCardExYY = value; }
        }

        public string CardLogo
        {
            get { return strCardLogo; }
            set { strCardLogo = value; }
        }

        public string CardType
        {
            get { return strCardType; }
            set { strCardType = value; }
        }

        public string CardEntry
        {
            get { return strCardEntry; }
            set { strCardEntry = value; }
        }

        public string ApprovedAmt
        {
            get { return strApprovedAmt; }
            set { strApprovedAmt = value; }
        }

        public string RefNo
        {
            get { return strRefNo; }
            set { strRefNo = value; }
        }

        public string LabelSKU
        {
            get { return strLabelSKU; }
            set { strLabelSKU = value; }
        }

        public string LabelName
        {
            get { return strLabelName; }
            set { strLabelName = value; }
        }

        public string LabelPrice
        {
            get { return strLabelPrice; }
            set { strLabelPrice = value; }
        }

        public int LabelColumn
        {
            get { return intLabelColumn; }
            set { intLabelColumn = value; }
        }

        public int LabelQty
        {
            get { return intLabelQty; }
            set { intLabelQty = value; }
        }

        public DataTable LayawayDtbl
        {
            get { return dtblLayawayDtbl; }
            set { dtblLayawayDtbl = value; }
        }

        public bool IsVoid
        {
            get { return blIsVoid; }
            set { blIsVoid = value; }
        }

        public bool IsLayawayRefund
        {
            get { return blIsLayawayRefund; }
            set { blIsLayawayRefund = value; }
        }

        public string PaidOutDesc
        {
            get { return strPaidOutDesc; }
            set { strPaidOutDesc = value; }
        }

        public double PaidOutAmount
        {
            get { return dblPaidOutAmount; }
            set { dblPaidOutAmount = value; }
        }

        public int PaidOutTranNo
        {
            get { return intPaidOutTranNo; }
            set { intPaidOutTranNo = value; }
        }

        public int InvNo
        {
            get { return intInvNo; }
            set { intInvNo = value; }
        }

        public int LayNo
        {
            get { return intLayNo; }
            set { intLayNo = value; }
        }

        public int LayTran
        {
            get { return intLayTran; }
            set { intLayTran = value; }
        }

        public string PrintType
        {
            get { return strPrintType; }
            set { strPrintType = value; }
        }

        public int ReprintCnt
        {
            get { return intReprintCnt; }
            set { intReprintCnt = value; }
        }

        public int CloseoutID
        {
            get { return intCloseoutID; }
            set { intCloseoutID = value; }
        }

        public string CloseoutType
        {
            get { return strCloseoutType; }
            set { strCloseoutType = value; }
        }

        public bool CloseoutSaleDept
        {
            get { return blCloseoutSaleDept; }
            set { blCloseoutSaleDept = value; }
        }

        public bool CloseoutSaleHour
        {
            get { return blCloseoutSaleHour; }
            set { blCloseoutSaleHour = value; }
        }

        public bool IsCloseout
        {
            get { return blIsCloseout; }
            set { blIsCloseout = value; }
        }

        public bool IsWorkOrderPayment
        {
            get { return blIsWorkOrderPayment; }
            set { blIsWorkOrderPayment = value; }
        }

        #endregion

        private FlowDocumentScrollViewer FVPrint;

        DevExpress.Xpf.Editors.BarCodeEdit barcd_run;
        DevExpress.Xpf.Editors.BarCodeEdit barcd_run_p;
        DevExpress.Xpf.Editors.BarCodeEdit barcd_run_p1;
        DevExpress.Xpf.Editors.BarCodeEdit barcd_run_p2;


        System.Drawing.Printing.PrintDocument printDoc;
        System.Drawing.Printing.PrintDocument printDoc1;
        System.Drawing.Printing.PrintDocument testdoc;
        System.Drawing.Printing.PrintDocument printDoc2;
        System.Drawing.Printing.PrintDocument printDocEMV1;
        System.Drawing.Printing.PrintDocument printDocEMV2;

        public frmPOSInvoicePrintDlg()
        {
            InitializeComponent();
            Loaded += Window_Loaded;
            ModalWindow.CloseCommand = new CommandBase(OnClose);
        }

        private void OnClose(object obj)
        {
            DialogResult = false;
            Close();
        }

        /*
        private void printDocEMV1_BeginPrint(object sender, PrintEventArgs e)
        {
            f_title = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Regular);
            f_body = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Regular);
            f_body1 = new System.Drawing.Font("Lucida Console", 8, System.Drawing.FontStyle.Regular | System.Drawing.FontStyle.Italic);
            f_body2 = new System.Drawing.Font("Lucida Console", 9, System.Drawing.FontStyle.Regular);
            f_bodybold = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Bold);
            f_footer = new System.Drawing.Font("Lucida Console", 8, System.Drawing.FontStyle.Regular);
            f_labeltxt1 = new System.Drawing.Font("Tahoma", 7, System.Drawing.FontStyle.Italic);
        }

        private void printDocEMV1_EndPrint(object sender, PrintEventArgs e)
        {
            f_title = null;
            f_body = null;
            f_body1 = null;
            f_body2 = null;
            f_footer = null;
        }

        private void printDocEMV1_PrintPage(object sender, PrintPageEventArgs e)
        {
            int Ypos = e.MarginBounds.Top;
            float lnht_title = f_title.GetHeight(e.Graphics);
            float lnht_body = f_body.GetHeight(e.Graphics);
            float lnht_footer = f_footer.GetHeight(e.Graphics);

            if (linecntemv1 == 0)
            {
                linecntemv1 = dtblstrmEMV1.Rows.Count;
                lineptremv1 = 1;
            }
            printFont = new System.Drawing.Font("Arial", 8);
            float linesPerPage = 0;
            float yPos = 0;
            int count = 0;
            float leftMargin = 0;
            float topMargin = 0;
            
            int W = 0;

            if (Data.Settings.GeneralReceiptPrint == "Y") W = 450; else W = 300;

            int H = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(printFont.GetHeight(e.Graphics)))) + 1;
            // Calculate the number of lines per page.
            linesPerPage = e.PageBounds.Height / H;

            // Print each line of the file.
            System.Drawing.Rectangle border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
            StringFormat f = new StringFormat();
            while ((count < linesPerPage))
            {
                foreach (DataRow dr in dtblstrmEMV1.Rows)
                {
                    if (GeneralFunctions.fnInt32(dr["SL"].ToString()) != lineptremv1) continue;
                    yPos = topMargin + (count * H);

                    if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                    {
                        Pen pn1 = new Pen(Color.Black);
                        pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid;
                        if (Data.Settings.GeneralReceiptPrint == "Y")
                        {

                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("-----------------------------");
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("-----------------------------");
                        }
                        pn1.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                    {
                        Pen pn1 = new Pen(Color.Black);
                        pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Data.Settings.GeneralReceiptPrint == "Y")
                        {

                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("-----------------------------");
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("-----------------------------");
                        }
                        pn1.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                    {
                        Pen pn2 = new Pen(Color.Black);
                        pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Data.Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn2, 265 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("               ----------------");
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn2, 60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("               ----------------");
                        }
                        pn2.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                    {
                        Pen pn2 = new Pen(Color.Black);
                        pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Data.Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn2, 350 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("                    -----------");
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn2, 120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("                     -----------");
                        }
                        pn2.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                    {
                        Pen pn3 = new Pen(Color.Black);
                        pn3.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Data.Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn3, 20 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("      -----------------------------");
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn3, -70 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("      -----------------------------");
                        }
                        pn3.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                    {
                        Bitmap bitmp = new Bitmap((int)barcd.Width, (int)barcd.Height);
                        //Todo: barcd.DrawToBitmap(bitmp, barcd.ClientSystem.Drawing.Rectangle);
                        e.Graphics.DrawImage(bitmp, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                    }
                    else
                    {
                        if (dr["param"].ToString() == "")
                        {
                            border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                            f.Alignment = StringAlignment.Near;
                            f.LineAlignment = StringAlignment.Near;
                            e.Graphics.DrawString(dr["Npos"].ToString(), printFont, Brushes.Black, border, f);
                            f.Alignment = StringAlignment.Center;
                            f.LineAlignment = StringAlignment.Center;
                            e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, Brushes.Black, border, f);
                            f.Alignment = StringAlignment.Far;
                            f.LineAlignment = StringAlignment.Far;
                            e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, Brushes.Black, border, f);

                            //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                        }
                        else
                        {
                            if (dr["param"].ToString() == "B")
                            {
                                Font fnt = new System.Drawing.Font("Arial", 10, System.Drawing.FontStyle.Bold);

                                int H1 = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(fnt.GetHeight(e.Graphics)))) + 2;
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H1);
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                            }
                            else if (dr["param"].ToString() == "s")
                            {
                                Font fnt = new System.Drawing.Font("Arial", 6.75f);
                                int H1 = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(fnt.GetHeight(e.Graphics)))) + 1;
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H1 * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                                //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                            }
                            else
                            {
                                Font fnt = new System.Drawing.Font("Arial", 8);
                                int H1 = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(fnt.GetHeight(e.Graphics)))) + 1;
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H1 * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                                //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                            }
                            //count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - modifylineno(GeneralFunctions.fnInt32(dr["param"].ToString()));
                        }
                    }
                }

                count++;
                lineptremv1++;
            }

            if (lineptremv1 <= linecntemv1) e.HasMorePages = true; else e.HasMorePages = false;
        }

        private void printDocEMV2_BeginPrint(object sender, PrintEventArgs e)
        {
            f_title = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Regular);
            f_body = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Regular);
            f_body1 = new System.Drawing.Font("Lucida Console", 8, System.Drawing.FontStyle.Regular | System.Drawing.FontStyle.Italic);
            f_body2 = new System.Drawing.Font("Lucida Console", 9, System.Drawing.FontStyle.Regular);
            f_bodybold = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Bold);
            f_footer = new System.Drawing.Font("Lucida Console", 8, System.Drawing.FontStyle.Regular);
            f_labeltxt1 = new System.Drawing.Font("Tahoma", 7, System.Drawing.FontStyle.Italic);
        }

        private void printDocEMV2_EndPrint(object sender, PrintEventArgs e)
        {
            f_title = null;
            f_body = null;
            f_body1 = null;
            f_body2 = null;
            f_footer = null;
        }

        private void printDocEMV2_PrintPage(object sender, PrintPageEventArgs e)
        {
            int Ypos = e.MarginBounds.Top;
            float lnht_title = f_title.GetHeight(e.Graphics);
            float lnht_body = f_body.GetHeight(e.Graphics);
            float lnht_footer = f_footer.GetHeight(e.Graphics);

            if (linecntemv2 == 0)
            {
                linecntemv2 = dtblstrmEMV2.Rows.Count;
                lineptremv2 = 1;
            }
            printFont = new System.Drawing.Font("Arial", 8);
            float linesPerPage = 0;
            float yPos = 0;
            int count = 0;
            float leftMargin = 0;
            float topMargin = 0;
            
            int W = 0;

            if (Data.Settings.GeneralReceiptPrint == "Y") W = 450; else W = 300;

            int H = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(printFont.GetHeight(e.Graphics)))) + 1;
            // Calculate the number of lines per page.
            linesPerPage = e.PageBounds.Height / H;

            // Print each line of the file.
            System.Drawing.Rectangle border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
            StringFormat f = new StringFormat();
            while ((count < linesPerPage))
            {
                foreach (DataRow dr in dtblstrmEMV2.Rows)
                {
                    if (GeneralFunctions.fnInt32(dr["SL"].ToString()) != lineptremv2) continue;
                    yPos = topMargin + (count * H);

                    if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                    {
                        Pen pn1 = new Pen(Color.Black);
                        pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid;
                        if (Data.Settings.GeneralReceiptPrint == "Y")
                        {

                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("-----------------------------");
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("-----------------------------");
                        }
                        pn1.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                    {
                        Pen pn1 = new Pen(Color.Black);
                        pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Data.Settings.GeneralReceiptPrint == "Y")
                        {

                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("-----------------------------");
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("-----------------------------");
                        }
                        pn1.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                    {
                        Pen pn2 = new Pen(Color.Black);
                        pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Data.Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn2, 265 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("               ----------------");
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn2, 60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("               ----------------");
                        }
                        pn2.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                    {
                        Pen pn2 = new Pen(Color.Black);
                        pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Data.Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn2, 350 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("                    -----------");
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn2, 120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("                     -----------");
                        }
                        pn2.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                    {
                        Pen pn3 = new Pen(Color.Black);
                        pn3.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Data.Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn3, 20 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("      -----------------------------");
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn3, -70 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            //fw.WriteLine("      -----------------------------");
                        }
                        pn3.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                    {
                        Bitmap bitmp = new Bitmap((int)barcd.Width, (int)barcd.Height);
                        //Todo: barcd.DrawToBitmap(bitmp, barcd.ClientSystem.Drawing.Rectangle);
                        e.Graphics.DrawImage(bitmp, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                    }
                    else
                    {
                        if (dr["param"].ToString() == "")
                        {
                            border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                            f.Alignment = StringAlignment.Near;
                            f.LineAlignment = StringAlignment.Near;
                            e.Graphics.DrawString(dr["Npos"].ToString(), printFont, Brushes.Black, border, f);
                            f.Alignment = StringAlignment.Center;
                            f.LineAlignment = StringAlignment.Center;
                            e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, Brushes.Black, border, f);
                            f.Alignment = StringAlignment.Far;
                            f.LineAlignment = StringAlignment.Far;
                            e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, Brushes.Black, border, f);

                            //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                        }
                        else
                        {
                            if (dr["param"].ToString() == "B")
                            {
                                Font fnt = new System.Drawing.Font("Arial", 10, System.Drawing.FontStyle.Bold);

                                int H1 = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(fnt.GetHeight(e.Graphics)))) + 2;
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H1);
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                            }
                            else if (dr["param"].ToString() == "s")
                            {
                                Font fnt = new System.Drawing.Font("Arial", 6.75f);
                                int H1 = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(fnt.GetHeight(e.Graphics)))) + 1;
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H1 * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                                //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                            }
                            else
                            {
                                Font fnt = new System.Drawing.Font("Arial", 8);
                                int H1 = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(fnt.GetHeight(e.Graphics)))) + 1;
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H1 * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                                //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                            }
                            //count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - modifylineno(GeneralFunctions.fnInt32(dr["param"].ToString()));
                        }
                    }
                }

                count++;
                lineptremv2++;
            }

            if (lineptremv2 <= linecntemv2) e.HasMorePages = true; else e.HasMorePages = false;
        }

        private void printDoc2_EndPrint(object sender, PrintEventArgs e)
        {
            f_title = null;
            f_body = null;
            f_footer = null;
        }

        private void printDoc2_PrintPage(object sender, PrintPageEventArgs e)
        {
            if (strPrintType == "Invoice")
            {
                if (linecnt2 == 0)
                {
                    linecnt2 = dtblstrm2.Rows.Count;
                    lineptr2 = 1;
                }
                printFont = new System.Drawing.Font("Arial", 9);
                float linesPerPage = 0;
                float yPos = 0;
                int count = 0;

                float leftMargin = 0;
                float topMargin = 0;
                int W = 0;
                if (Data.Settings.GeneralReceiptPrint == "Y")
                {
                    W = 450;
                }
                else
                {
                    W = 245 + SystemVariables.PageAdjustmentForPrint;
                }
                int H = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Floor(printFont.GetHeight(e.Graphics)))) + 1;
                // Calculate the number of lines per page.
                linesPerPage = e.PageBounds.Height / H;

                // Print each line of the file.
                System.Drawing.Rectangle border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                StringFormat f = new StringFormat();
                while ((count < linesPerPage))
                {
                    foreach (DataRow dr in dtblstrm2.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["SL"].ToString()) != lineptr2) continue;
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Pen pn1 = new Pen(Color.Black);
                            pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn1.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Pen pn2 = new Pen(Color.Black);
                            pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn2, 265 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn2, 60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn2.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                        {
                            Pen pn2 = new Pen(Color.Black);
                            pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn2, 350 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn2, 120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn2.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Pen pn3 = new Pen(Color.Black);
                            pn3.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn3, 20 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn3, -70 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn3.Dispose();
                        }
                        else
                        {
                            if (dr["param"].ToString() == "")
                            {
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, Brushes.Black, border, f);
                            }
                            else
                            {
                                Font fnt = new System.Drawing.Font("Arial", 8);
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                            }
                        }
                    }
                    count++;
                    lineptr2++;
                }

                // If more lines exist, print another page.
                if (lineptr2 <= linecnt2)
                    e.HasMorePages = true;
                else
                    e.HasMorePages = false;
            }

            if (strPrintType == "Reprint Receipt")
            {
                if (linecnt2 == 0)
                {
                    linecnt2 = dtblstrm2.Rows.Count;
                    lineptr2 = 2;
                }
                printFont = new System.Drawing.Font("Arial", 9);
                float linesPerPage = 0;
                float yPos = 0;
                int count = 0;


                float leftMargin = 0;
                float topMargin = 0;

                int W = 0;
                if (Data.Settings.GeneralReceiptPrint == "Y")
                {
                    W = 450;
                }
                else
                {
                    W = 245 + SystemVariables.PageAdjustmentForPrint;
                }
                int H = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Floor(printFont.GetHeight(e.Graphics)))) + 1;
               linesPerPage = e.PageBounds.Height / H;

                System.Drawing.Rectangle border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                StringFormat f = new StringFormat();
                while ((count < linesPerPage))
                {
                    foreach (DataRow dr in dtblstrm2.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["SL"].ToString()) != lineptr2) continue;
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Pen pn1 = new Pen(Color.Black);
                            pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn1.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Pen pn2 = new Pen(Color.Black);
                            pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn2, 265 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn2, 60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn2.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Pen pn3 = new Pen(Color.Black);
                            pn3.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn3, 20 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn3, -70 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn3.Dispose();
                        }
                        else
                        {
                            if (dr["param"].ToString() == "")
                            {
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, Brushes.Black, border, f);
                            }
                            else
                            {
                                if (dr["param"].ToString() == "B")
                                {
                                    Font fnt = new System.Drawing.Font("Arial", 10, System.Drawing.FontStyle.Bold);
                                    int H1 = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Floor(fnt.GetHeight(e.Graphics)))) + 2;
                                    border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H1);
                                    f.Alignment = StringAlignment.Near;
                                    f.LineAlignment = StringAlignment.Near;
                                    e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Center;
                                    f.LineAlignment = StringAlignment.Center;
                                    e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Far;
                                    f.LineAlignment = StringAlignment.Far;
                                    e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                    count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                                }
                                else
                                {
                                    Font fnt = new System.Drawing.Font("Arial", 8);
                                    border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                    f.Alignment = StringAlignment.Near;
                                    f.LineAlignment = StringAlignment.Near;
                                    e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Center;
                                    f.LineAlignment = StringAlignment.Center;
                                    e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Far;
                                    f.LineAlignment = StringAlignment.Far;
                                    e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                    count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                                }
                            }
                        }
                    }

                    count++;
                    lineptr2++;
                }

                if (lineptr2 <= linecnt2)
                    e.HasMorePages = true;
                else
                    e.HasMorePages = false;

            }
        }

        private void printDoc2_BeginPrint(object sender, PrintEventArgs e)
        {
            f_title = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Regular);
            f_body = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Regular);
            f_footer = new System.Drawing.Font("Lucida Console", 8, System.Drawing.FontStyle.Regular);
        }

        private void printDoc1_PrintPage(object sender, PrintPageEventArgs e)
        {
            if (strPrintType == "Invoice")
            {
                if (linecnt1 == 0)
                {
                    linecnt1 = dtblstrm1.Rows.Count;
                    lineptr1 = 1;
                }
                printFont = new System.Drawing.Font("Arial", 9);
                float linesPerPage = 0;
                float yPos = 0;
                int count = 0;

                float leftMargin = 0;
                float topMargin = 0;
                int W = 0;
                if (Data.Settings.GeneralReceiptPrint == "Y")
                {
                    W = 450;
                }
                else
                {
                    W = 245 + SystemVariables.PageAdjustmentForPrint;
                }
                int H = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Floor(printFont.GetHeight(e.Graphics)))) + 1;
                // Calculate the number of lines per page.
                linesPerPage = e.PageBounds.Height / H;

                // Print each line of the file.
                System.Drawing.Rectangle border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                StringFormat f = new StringFormat();
                while ((count < linesPerPage))
                {
                    foreach (DataRow dr in dtblstrm1.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["SL"].ToString()) != lineptr1) continue;
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Pen pn1 = new Pen(Color.Black);
                            pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn1.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Pen pn2 = new Pen(Color.Black);
                            pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn2, 265 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn2, 60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn2.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                        {
                            Pen pn2 = new Pen(Color.Black);
                            pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn2, 350 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn2, 120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn2.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Pen pn3 = new Pen(Color.Black);
                            pn3.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn3, 20 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn3, -70 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn3.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                        {
                            Bitmap bitmp = new Bitmap((int)barcd.Width, (int)barcd.Height);
                           //Todo: barcd.DrawToBitmap(bitmp, barcd.ClientSystem.Drawing.Rectangle);
                            e.Graphics.DrawImage(bitmp, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            if (dr["param"].ToString() == "")
                            {
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, Brushes.Black, border, f);
                            }
                            else
                            {
                                Font fnt = new System.Drawing.Font("Arial", 8);
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                            }
                        }
                    }
                    count++;
                    lineptr1++;
                }

                // If more lines exist, print another page.
                if (lineptr1 <= linecnt1)
                    e.HasMorePages = true;
                else
                    e.HasMorePages = false;
            }

            if (strPrintType == "Reprint Receipt")
            {
                if (linecnt1 == 0)
                {
                    linecnt1 = dtblstrm1.Rows.Count;
                    lineptr1 = 1;
                }
                printFont = new System.Drawing.Font("Arial", 9);
                float linesPerPage = 0;
                float yPos = 0;
                int count = 0;


                float leftMargin = 0;
                float topMargin = 0;

                int W = 0;
                if (Data.Settings.GeneralReceiptPrint == "Y")
                {
                    W = 450;
                }
                else
                {
                    W = 245 + SystemVariables.PageAdjustmentForPrint;
                }
                int H = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Floor(printFont.GetHeight(e.Graphics)))) + 1;
                // Calculate the number of lines per page.
                linesPerPage = e.PageBounds.Height / H;

                // Print each line of the file.
                System.Drawing.Rectangle border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                StringFormat f = new StringFormat();
                while ((count < linesPerPage))
                {
                    foreach (DataRow dr in dtblstrm1.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["SL"].ToString()) != lineptr1) continue;
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Pen pn1 = new Pen(Color.Black);
                            pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn1.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Pen pn2 = new Pen(Color.Black);
                            pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn2, 265 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn2, 60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn2.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Pen pn3 = new Pen(Color.Black);
                            pn3.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn3, 20 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn3, -70 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn3.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                        {
                            Bitmap bitmp = new Bitmap((int)barcd.Width, (int)barcd.Height);
                            //Todo: barcd.DrawToBitmap(bitmp, barcd.ClientSystem.Drawing.Rectangle);
                            e.Graphics.DrawImage(bitmp, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            if (dr["param"].ToString() == "")
                            {
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, Brushes.Black, border, f);
                            }
                            else
                            {
                                if (dr["param"].ToString() == "B")
                                {
                                    Font fnt = new System.Drawing.Font("Arial", 10, System.Drawing.FontStyle.Bold);
                                    int H1 = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Floor(fnt.GetHeight(e.Graphics)))) + 2;
                                    border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H1);
                                    f.Alignment = StringAlignment.Near;
                                    f.LineAlignment = StringAlignment.Near;
                                    e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Center;
                                    f.LineAlignment = StringAlignment.Center;
                                    e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Far;
                                    f.LineAlignment = StringAlignment.Far;
                                    e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                    count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                                }
                                else
                                {
                                    Font fnt = new System.Drawing.Font("Arial", 8);
                                    border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                    f.Alignment = StringAlignment.Near;
                                    f.LineAlignment = StringAlignment.Near;
                                    e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Center;
                                    f.LineAlignment = StringAlignment.Center;
                                    e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Far;
                                    f.LineAlignment = StringAlignment.Far;
                                    e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                    count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                                }
                            }
                        }
                    }
                    count++;
                    lineptr1++;
                }
                if (lineptr1 <= linecnt1) e.HasMorePages = true; else e.HasMorePages = false;
            }

            if ((strPrintType == "Layaway") || (strPrintType == "Reprint Layaway"))
            {
                if (linecnt1 == 0)
                {
                    linecnt1 = dtblstrm1.Rows.Count;
                    lineptr1 = 1;
                }
                printFont = new System.Drawing.Font("Arial", 9);
                float linesPerPage = 0;
                float yPos = 0;
                int count = 0;
                //float leftMargin = e.MarginBounds.Left;
                //float topMargin = e.MarginBounds.Top;
                float leftMargin = 0;
                float topMargin = 0;
                int W = 0;
                if (Data.Settings.GeneralReceiptPrint == "Y")
                {
                    W = 450;
                }
                else
                {
                    W = 245 + SystemVariables.PageAdjustmentForPrint;
                }
                int H = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Floor(printFont.GetHeight(e.Graphics)))) + 1;
                // Calculate the number of lines per page.
                linesPerPage = e.PageBounds.Height / H;

                // Print each line of the file.
                System.Drawing.Rectangle border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                StringFormat f = new StringFormat();
                while ((count < linesPerPage))
                {
                    foreach (DataRow dr in dtblstrm1.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["SL"].ToString()) != lineptr1) continue;
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Pen pn1 = new Pen(Color.Black);
                            pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn1.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Pen pn2 = new Pen(Color.Black);
                            pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn2, 265 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn2, 60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn2.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Pen pn3 = new Pen(Color.Black);
                            pn3.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn3, 20 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn3, -70 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn3.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                        {
                            Bitmap bitmp = new Bitmap((int)barcd.Width, (int)barcd.Height);
                            //Todo: barcd.DrawToBitmap(bitmp, barcd.ClientSystem.Drawing.Rectangle);
                            e.Graphics.DrawImage(bitmp, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            if (dr["param"].ToString() == "")
                            {
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, Brushes.Black, border, f);
                            }
                            else
                            {
                                Font fnt = new System.Drawing.Font("Arial", 8);
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                            }
                        }
                    }
                    count++;
                    lineptr1++;
                }

                // If more lines exist, print another page.
                if (lineptr1 <= linecnt1)
                    e.HasMorePages = true;
                else
                    e.HasMorePages = false;
            }


            if (strPrintType == "Repair In")
            {
                if (linecnt1 == 0)
                {
                    linecnt1 = dtblstrm1.Rows.Count;
                    lineptr1 = 1;
                }
                printFont = new System.Drawing.Font("Arial", 9);
                float linesPerPage = 0;
                float yPos = 0;
                int count = 0;

                float leftMargin = 0;
                float topMargin = 0;
                int W = 0;
                if (Data.Settings.GeneralReceiptPrint == "Y")
                {
                    W = 450;
                }
                else
                {
                    W = 245 + SystemVariables.PageAdjustmentForPrint;
                }
                int H = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Floor(printFont.GetHeight(e.Graphics)))) + 1;
                //Todo: Calculate the number of lines per page.
                linesPerPage = e.PageBounds.Height / H;

                //Todo:  Print each line of the file.
                System.Drawing.Rectangle border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                StringFormat f = new StringFormat();
                while ((count < linesPerPage))
                {
                    foreach (DataRow dr in dtblstrm1.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["SL"].ToString()) != lineptr1) continue;
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Pen pn1 = new Pen(Color.Black);
                            pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn1.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Pen pn2 = new Pen(Color.Black);
                            pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn2, 265 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn2, 60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn2.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                        {
                            Pen pn2 = new Pen(Color.Black);
                            pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn2, 350 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn2, 120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn2.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Pen pn3 = new Pen(Color.Black);
                            pn3.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn3, 20 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn3, -70 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                            }
                            pn3.Dispose();
                        }
                        else
                        {
                            if (dr["param"].ToString() == "")
                            {
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, Brushes.Black, border, f);
                            }
                            else
                            {
                                Font fnt = new System.Drawing.Font("Arial", 8);
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                            }
                        }
                    }
                    count++;
                    lineptr1++;
                }

                if (lineptr1 <= linecnt1)
                    e.HasMorePages = true;
                else
                    e.HasMorePages = false;
            }
        }

        private void printDoc1_EndPrint(object sender, PrintEventArgs e)
        {
            f_title = null;
            f_body = null;
            f_footer = null;
        }

        private void printDoc1_BeginPrint(object sender, PrintEventArgs e)
        {
            f_title = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Regular);
            f_body = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Regular);
            f_footer = new System.Drawing.Font("Lucida Console", 8, System.Drawing.FontStyle.Regular);
        }

        private void PrintDoc_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            int Ypos = e.MarginBounds.Top;
            float lnht_title = f_title.GetHeight(e.Graphics);
            float lnht_body = f_body.GetHeight(e.Graphics);
            float lnht_footer = f_footer.GetHeight(e.Graphics);

           

            if (strPrintType == "2up Label Print")
            {
                int cnt = 0;
                int Y = 13;
                int W = 100;
                int X = 55;
                int H = 8;
                int start = 1;
                bool newrow = false;
                System.Drawing.Rectangle border = new System.Drawing.Rectangle(X, Y, W, H);
                StringFormat f = new StringFormat();
                while (cnt < intLabelQty)
                {
                    cnt++;
                    if (cnt == 1)
                    {
                        if (intLabelColumn == 1) start = 1;
                        if (intLabelColumn == 2) start = 2;
                    }

                    if (start == 1)
                    {
                        // print in coloum 1
                        int PrevY = Y;
                        X = 52;
                        H = 12;
                        border = new System.Drawing.Rectangle(X, Y, W, H);
                        f.Alignment = StringAlignment.Near;
                        f.LineAlignment = StringAlignment.Near;
                        e.Graphics.DrawString(strLabelSKU, f_labeltxt1, Brushes.Black, border, f);
                        f.Alignment = StringAlignment.Far;
                        f.LineAlignment = StringAlignment.Far;
                        e.Graphics.DrawString("", f_body, Brushes.Black, border, f);
                        Y = Y + H + 1;
                        H = 13;
                        border = new System.Drawing.Rectangle(X, Y, W, H);
                        f.Alignment = StringAlignment.Near;
                        f.LineAlignment = StringAlignment.Near;
                        e.Graphics.DrawString(strLabelName, f_labeltxt1, Brushes.Black, border, f);
                        f.Alignment = StringAlignment.Far;
                        f.LineAlignment = StringAlignment.Far;
                        e.Graphics.DrawString("", f_body, Brushes.Black, border, f);
                        Y = Y + H + 1;
                        H = 40;
                        border = new System.Drawing.Rectangle(X, Y, W, H);
                        f.Alignment = StringAlignment.Near;
                        f.LineAlignment = StringAlignment.Near;
                        e.Graphics.DrawString(strLabelSKU, f_labelbarcodetxt, Brushes.Black, border, f);
                        f.Alignment = StringAlignment.Far;
                        f.LineAlignment = StringAlignment.Far;
                        e.Graphics.DrawString("", f_body, Brushes.Black, border, f);
                        if (strLabelPrice != "")
                        {
                            Y = Y + H + 1;
                            H = 14;
                            border = new System.Drawing.Rectangle(X, Y, W, H);
                            f.Alignment = StringAlignment.Near;
                            f.LineAlignment = StringAlignment.Near;
                            e.Graphics.DrawString("", f_body, Brushes.Black, border, f);
                            f.Alignment = StringAlignment.Far;
                            f.LineAlignment = StringAlignment.Far;
                            e.Graphics.DrawString(strLabelPrice, f_labeltxt1, Brushes.Black, border, f);
                        }

                        Y = PrevY;

                        start = 2;
                        newrow = false;
                        continue;
                    }

                    if (start == 2)
                    {
                        // print in coloum 2

                        X = 165;
                        H = 12;
                        border = new System.Drawing.Rectangle(X, Y, W, H);
                        f.Alignment = StringAlignment.Near;
                        f.LineAlignment = StringAlignment.Near;
                        e.Graphics.DrawString(strLabelSKU, f_labeltxt1, Brushes.Black, border, f);
                        f.Alignment = StringAlignment.Far;
                        f.LineAlignment = StringAlignment.Far;
                        e.Graphics.DrawString("", f_body, Brushes.Black, border, f);
                        Y = Y + H + 1;
                        H = 13;
                        border = new System.Drawing.Rectangle(X, Y, W, H);
                        f.Alignment = StringAlignment.Near;
                        f.LineAlignment = StringAlignment.Near;
                        e.Graphics.DrawString(strLabelName, f_labeltxt1, Brushes.Black, border, f);
                        f.Alignment = StringAlignment.Far;
                        f.LineAlignment = StringAlignment.Far;
                        e.Graphics.DrawString("", f_body, Brushes.Black, border, f);
                        Y = Y + H + 1;
                        H = 40;
                        border = new System.Drawing.Rectangle(X, Y, W, H);
                        f.Alignment = StringAlignment.Near;
                        f.LineAlignment = StringAlignment.Near;
                        e.Graphics.DrawString(strLabelSKU, f_labelbarcodetxt, Brushes.Black, border, f);
                        f.Alignment = StringAlignment.Far;
                        f.LineAlignment = StringAlignment.Far;
                        e.Graphics.DrawString("", f_body, Brushes.Black, border, f);
                        if (strLabelPrice != "")
                        {
                            Y = Y + H + 1;
                            H = 14;
                            border = new System.Drawing.Rectangle(X, Y, W, H);
                            f.Alignment = StringAlignment.Near;
                            f.LineAlignment = StringAlignment.Near;
                            e.Graphics.DrawString("", f_body, Brushes.Black, border, f);
                            f.Alignment = StringAlignment.Far;
                            f.LineAlignment = StringAlignment.Far;
                            e.Graphics.DrawString(strLabelPrice, f_labeltxt1, Brushes.Black, border, f);
                        }
                        Y = Y + H + 41;
                        start = 1;
                        newrow = true;
                        continue;
                    }
                }
            }

            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt") || (strPrintType == "Customer Label")
               || (strPrintType == "No Sale") || (strPrintType == "Paid Out") || (strPrintType == "Layaway")
               || (strPrintType == "Reprint Layaway") || (strPrintType == "Closeout") || (strPrintType == "WorkOrder")
               || (strPrintType == "Suspend Receipt") || (strPrintType == "Gift Receipt")
               || (strPrintType == "Rent Issue") || (strPrintType == "Return Rent Item")
               || (strPrintType == "Repair In") || (strPrintType == "Repair Deliver") || (strPrintType == "Lotto Payout")
               || (strPrintType == "Preview Invoice"))
            {
                //if (!blPrinting)
                //{
                //StreamWriter fw = File.CreateText("C:\\document.txt");

                if (linecnt == 0)
                {
                    linecnt = dtblstrm.Rows.Count;
                    lineptr = 1;
                }
                printFont = new System.Drawing.Font("Arial", 9);
                float linesPerPage = 0;
                float yPos = 0;
                int count = 0;
                float leftMargin = 0;
                float topMargin = 0;
                
                int W = 0;

                if (Data.Settings.GeneralReceiptPrint == "Y") W = 450; else W = 245 + SystemVariables.PageAdjustmentForPrint;

                int H = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(printFont.GetHeight(e.Graphics)))) + 1;
                // Calculate the number of lines per page.
                linesPerPage = e.PageBounds.Height / H;

                // Print each line of the file.
                System.Drawing.Rectangle border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                StringFormat f = new StringFormat();
                while ((count < linesPerPage))
                {
                    foreach (DataRow dr in dtblstrm.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["SL"].ToString()) != lineptr) continue;
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                        {
                            Pen pn1 = new Pen(Color.Black);
                            pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Solid;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {

                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                                //fw.WriteLine("-----------------------------");
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                                //fw.WriteLine("-----------------------------");
                            }
                            pn1.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Pen pn1 = new Pen(Color.Black);
                            pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {

                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                                //fw.WriteLine("-----------------------------");
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                                //fw.WriteLine("-----------------------------");
                            }
                            pn1.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Pen pn2 = new Pen(Color.Black);
                            pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn2, 265 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                                //fw.WriteLine("               ----------------");
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn2, 60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                                //fw.WriteLine("               ----------------");
                            }
                            pn2.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                        {
                            Pen pn2 = new Pen(Color.Black);
                            pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn2, 350 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                                //fw.WriteLine("                    -----------");
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn2, 120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                                //fw.WriteLine("                     -----------");
                            }
                            pn2.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Pen pn3 = new Pen(Color.Black);
                            pn3.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                            if (Data.Settings.GeneralReceiptPrint == "Y")
                            {
                                e.Graphics.DrawLine(pn3, 20 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                                //fw.WriteLine("      -----------------------------");
                            }
                            else
                            {
                                e.Graphics.DrawLine(pn3, -70 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                                //fw.WriteLine("      -----------------------------");
                            }
                            pn3.Dispose();
                        }
                        else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                        {
                            Bitmap bitmp = new Bitmap((int)barcd.Width, (int)barcd.Height);
                           //Todo:  barcd.DrawToBitmap(bitmp, barcd.ClientSystem.Drawing.Rectangle);
                            e.Graphics.DrawImage(bitmp, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            if (dr["param"].ToString() == "")
                            {
                                border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                                f.Alignment = StringAlignment.Near;
                                f.LineAlignment = StringAlignment.Near;
                                e.Graphics.DrawString(dr["Npos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Center;
                                f.LineAlignment = StringAlignment.Center;
                                e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, Brushes.Black, border, f);
                                f.Alignment = StringAlignment.Far;
                                f.LineAlignment = StringAlignment.Far;
                                e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, Brushes.Black, border, f);

                                //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                            }
                            else
                            {
                                if (dr["param"].ToString() == "B")
                                {
                                    Font fnt = new System.Drawing.Font("Arial", 10, System.Drawing.FontStyle.Bold);

                                    int H1 = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(fnt.GetHeight(e.Graphics)))) + 2;
                                    border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H1);
                                    f.Alignment = StringAlignment.Near;
                                    f.LineAlignment = StringAlignment.Near;
                                    e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Center;
                                    f.LineAlignment = StringAlignment.Center;
                                    e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Far;
                                    f.LineAlignment = StringAlignment.Far;
                                    e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                    //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                                }
                                else if (dr["param"].ToString() == "s")
                                {
                                    Font fnt = new System.Drawing.Font("Arial", 6.75f);
                                    int H1 = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(fnt.GetHeight(e.Graphics)))) + 1;
                                    border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H1 * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                    f.Alignment = StringAlignment.Near;
                                    f.LineAlignment = StringAlignment.Near;
                                    e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Center;
                                    f.LineAlignment = StringAlignment.Center;
                                    e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Far;
                                    f.LineAlignment = StringAlignment.Far;
                                    e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                    count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                                    //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                                }
                                else
                                {
                                    Font fnt = new System.Drawing.Font("Arial", 8);
                                    int H1 = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(fnt.GetHeight(e.Graphics)))) + 1;
                                    border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H1 * GeneralFunctions.fnInt32(dr["param"].ToString()));
                                    f.Alignment = StringAlignment.Near;
                                    f.LineAlignment = StringAlignment.Near;
                                    e.Graphics.DrawString(dr["Npos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Center;
                                    f.LineAlignment = StringAlignment.Center;
                                    e.Graphics.DrawString(dr["Cpos"].ToString(), fnt, Brushes.Black, border, f);
                                    f.Alignment = StringAlignment.Far;
                                    f.LineAlignment = StringAlignment.Far;
                                    e.Graphics.DrawString(dr["Fpos"].ToString(), fnt, Brushes.Black, border, f);
                                    count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - GeneralFunctions.fnInt32(Math.Ceiling(GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(dr["param"].ToString()) / 4)));
                                    //fw.WriteLine(dr["Npos"].ToString() + "\t" + dr["Cpos"].ToString() + "\t" + dr["Fpos"].ToString());
                                }
                                //count = count + GeneralFunctions.fnInt32(dr["param"].ToString()) - modifylineno(GeneralFunctions.fnInt32(dr["param"].ToString()));
                            }
                        }
                    }

                    count++;
                    lineptr++;
                }

                if (lineptr <= linecnt) e.HasMorePages = true; else e.HasMorePages = false;

                //fw.Flush();
                //fw.Close();
                
            }
        }
   
        private void PrintDoc_EndPrint(object sender, System.Drawing.Printing.PrintEventArgs e)
        {
            f_title = null;
            f_body = null;
            f_body1 = null;
            f_body2 = null;
            f_footer = null;
        }

        private void PrintDoc_BeginPrint(object sender, System.Drawing.Printing.PrintEventArgs e)
        {
            f_title = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Regular);
            f_body = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Regular);
            f_body1 = new System.Drawing.Font("Lucida Console", 8, System.Drawing.FontStyle.Regular | System.Drawing.FontStyle.Italic);
            f_body2 = new System.Drawing.Font("Lucida Console", 9, System.Drawing.FontStyle.Regular);
            f_bodybold = new System.Drawing.Font("Lucida Console", 10, System.Drawing.FontStyle.Bold);
            f_footer = new System.Drawing.Font("Lucida Console", 8, System.Drawing.FontStyle.Regular);
            f_labeltxt1 = new System.Drawing.Font("Tahoma", 7, System.Drawing.FontStyle.Italic);
            f_labelbarcodetxt = new System.Drawing.Font("IDAutomationSC128M DEMO", 8, System.Drawing.FontStyle.Regular);
        }
         */
        private void btnHelp_Click(object sender, RoutedEventArgs e)
        {
            
        }

        public void btnPrintClick(object sender, EventArgs e)
        {

            blPrinting = true;

            blprintclick = true;

            try
            {
                bool bproceed = true;
                if (FindNewTemplate)
                {
                    if (NewPrinterName == "(None)")
                    {
                        bproceed = false;
                    }
                }

                if (bproceed)
                {
                    int icopy = 1;
                    if (FindNewTemplate) icopy = NewPrintCopy;

                    for (int pcpy = 0; pcpy < icopy; pcpy++)
                    {
                        var pd = new PrintDialog();

                        if ((strPrintType == "2up Label Print") || (strPrintType == "Customer Label"))
                        {
                            pd.PrintQueue = new PrintQueue(new PrintServer(), (!FindNewTemplate) ? Settings.LabelPrinterName : NewPrinterName);
                        }
                        else
                        {
                            pd.PrintQueue = new PrintQueue(new PrintServer(), (!FindNewTemplate) ? Settings.ReceiptPrinterName : NewPrinterName);
                        }

                        printPCtrl.Document = FVPrint.Document;
                        printPCtrl.UpdateLayout();
                        printPCtrl.Refresh();
                        IDocumentPaginatorSource idocument = printPCtrl.Document as IDocumentPaginatorSource; //CloneDoc as IDocumentPaginatorSource;
                        pd.PrintDocument(idocument.DocumentPaginator, "Printing FlowDocument");
                    }

                    bool bAdditionalPrint1 = false;
                    bool bAdditionalPrint2 = false;
                    if (((Settings.LayawayReceipts > 1) || (blForced2ReceiptsOnPrecidiaSignatureFailure) || (blDatacapManualTendering)) && ((strPrintType == "Layaway") || (strPrintType == "Reprint Layaway")))
                    {
                        bAdditionalPrint1 = true;
                    }

                    if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt"))
                    {
                        if (((blCardPayment) && (Settings.IsDuplicateInvoice == "Y") && (!MercuryCardPaymentCheck) && (!blFSTender)) || (blForced2ReceiptsOnPrecidiaSignatureFailure) || (blDatacapManualTendering) || (EMVTransaction))
                        {
                            bAdditionalPrint1 = true;
                        }

                        if (PrintDuplicateGCSaleReceipt)
                        {
                            bAdditionalPrint1 = true;
                        }
                    }

                    if ((strPrintType == "Repair In") || (strPrintType == "Repair Deliver"))
                    {
                        bAdditionalPrint1 = true;
                    }

                    if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt"))
                    {
                        if (blHouseAccountPayment)
                        {
                            bAdditionalPrint2 = true;
                        }
                    }

                    if (bAdditionalPrint1)
                    {
                        var pd1 = new PrintDialog();

                        pd1.PrintQueue = new PrintQueue(new PrintServer(), (!FindNewTemplate) ? Settings.ReceiptPrinterName: NewPrinterName);

                        printPCtrl.Document = FVPrint1.Document;
                        printPCtrl.UpdateLayout();
                        printPCtrl.Refresh();
                        IDocumentPaginatorSource idocument1 = printPCtrl.Document as IDocumentPaginatorSource; //CloneDoc as IDocumentPaginatorSource;
                        pd1.PrintDocument(idocument1.DocumentPaginator, "Printing FlowDocument");
                    }

                    if (bAdditionalPrint2)
                    {
                        var pd2 = new PrintDialog();

                        pd2.PrintQueue = new PrintQueue(new PrintServer(), (!FindNewTemplate) ? Settings.ReceiptPrinterName: NewPrinterName);

                        printPCtrl.Document = FVPrint2.Document;
                        printPCtrl.UpdateLayout();
                        printPCtrl.Refresh();
                        IDocumentPaginatorSource idocument2 = printPCtrl.Document as IDocumentPaginatorSource; //CloneDoc as IDocumentPaginatorSource;
                        pd2.PrintDocument(idocument2.DocumentPaginator, "Printing FlowDocument");
                    }

                }
            }
            catch (Exception ex)
            {

            }


        
            
            /*

            
            if (EMVTransaction)
            {
                PrinterSettings psemv1 = new PrinterSettings();
                psemv1.PrinterName = Settings.ReceiptPrinterName;
                printDocEMV1.PrinterSettings = psemv1;
                if (!printDocEMV1.PrinterSettings.IsValid)
                {
                    string msg = String.Format("Can't find printer \"{0}\".", Settings.ReceiptPrinterName);
                    DocMessage.MsgInformation(Properties.Resources.Print_Error__ + msg);
                    return;
                }
                lineptremv1 = 1;
                printDocEMV1.Print();
            }

            if ((strPrintType == "Repair In") || (strPrintType == "Repair Deliver"))
            {
                PrinterSettings ps1 = new PrinterSettings();
                ps1.PrinterName = Settings.ReceiptPrinterName;
                printDoc1.PrinterSettings = ps1;
                if (!printDoc1.PrinterSettings.IsValid)
                {
                    string msg = String.Format("Can't find printer \"{0}\".", Settings.ReceiptPrinterName);
                    DocMessage.MsgInformation(Properties.Resources.Print_Error__ + msg);
                    return;
                }
                lineptr1 = 1;
                printDoc1.Print();
            }

            if ((strPrintType == "Layaway") || (strPrintType == "Reprint Layaway"))
            {
                if ((Settings.LayawayReceipts > 1) || (blForced2ReceiptsOnPrecidiaSignatureFailure) || (blDatacapManualTendering))
                {
                    for (int i = 0; i < Settings.LayawayReceipts - 1; i++)
                    {
                        PrinterSettings ps1 = new PrinterSettings();
                        ps1.PrinterName = Settings.ReceiptPrinterName;
                        printDoc1.PrinterSettings = ps1;
                        if (!printDoc1.PrinterSettings.IsValid)
                        {
                            string msg = String.Format("Can't find printer \"{0}\".", Settings.ReceiptPrinterName);
                            DocMessage.MsgInformation(Properties.Resources.Print_Error__ + msg);
                            return;
                        }
                        lineptr1 = 1;
                        printDoc1.Print();
                    }
                }
            }

            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt"))
            {
                if (((blCardPayment) && (Settings.IsDuplicateInvoice == "Y") && (!MercuryCardPaymentCheck)) || (blForced2ReceiptsOnPrecidiaSignatureFailure) || (blDatacapManualTendering) || (EMVTransaction))
                {
                    PrinterSettings ps2 = new PrinterSettings();
                    ps2.PrinterName = Settings.ReceiptPrinterName;
                    printDoc1.PrinterSettings = ps2;
                    if (!printDoc1.PrinterSettings.IsValid)
                    {
                        string msg = String.Format("Can't find printer \"{0}\".", Settings.ReceiptPrinterName);
                        DocMessage.MsgInformation(Properties.Resources.Print_Error__ + msg);
                        return;
                    }
                    lineptr1 = 1;
                    printDoc1.Print();
                }

                if (blHouseAccountPayment)
                {
                    PrinterSettings ps3 = new PrinterSettings();
                    ps3.PrinterName = Settings.ReceiptPrinterName;
                    printDoc2.PrinterSettings = ps3;
                    if (!printDoc2.PrinterSettings.IsValid)
                    {
                        string msg = String.Format("Can't find printer \"{0}\".", Settings.ReceiptPrinterName);
                        DocMessage.MsgInformation(Properties.Resources.Print_Error__ + msg);
                        return;
                    }
                    lineptr2 = 1;
                    printDoc2.Print();
                }
            }

            if (EMVTransaction)
            {
                PrinterSettings psemv2 = new PrinterSettings();
                psemv2.PrinterName = Settings.ReceiptPrinterName;
                printDocEMV2.PrinterSettings = psemv2;
                if (!printDocEMV2.PrinterSettings.IsValid)
                {
                    string msg = String.Format("Can't find printer \"{0}\".", Settings.ReceiptPrinterName);
                    DocMessage.MsgInformation(Properties.Resources.Print_Error__ + msg);
                    return;
                }
                lineptremv2 = 1;
                printDocEMV2.Print();
            }*/

            this.Close();
        }

        private void btnPrint_Click(object sender, RoutedEventArgs e)
        {
            Cursor = Cursors.Wait;
            try
            {
                btnPrintClick(sender, e);
            }
            finally
            {
                Cursor = Cursors.Arrow;
            }
        }

        private void btnCancel_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
            
         //  poscon     boolLoadAllItem = false;
             

        }


        

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

            CheckForNewTemplate();


            imglogoD = new System.Windows.Controls.Image();
            imglogo = new System.Windows.Controls.Image();
            imglogo1 = new System.Windows.Controls.Image();
            imglogo2 = new System.Windows.Controls.Image();
            imglogo3 = new System.Windows.Controls.Image();

            GeneralFunctions.LoadPhotofromDB("Logo", 0, imglogoD);
            GeneralFunctions.LoadPhotofromDB("Logo", 0, imglogo);
            GeneralFunctions.LoadPhotofromDB("Logo", 0, imglogo1);
            GeneralFunctions.LoadPhotofromDB("Logo", 0, imglogo2);
            GeneralFunctions.LoadPhotofromDB("Logo", 0, imglogo3);

            FVPrint = new FlowDocumentScrollViewer();
            FVPrint1 = new FlowDocumentScrollViewer();
            FVPrint2 = new FlowDocumentScrollViewer();

            barcd_run = new DevExpress.Xpf.Editors.BarCodeEdit();
            barcd_run.Width = 180;
            barcd_run.Height = 48;
            barcd_run.Module = 2;
            barcd_run.ShowText = false;
            DevExpress.Xpf.Editors.Code128StyleSettings code128 = new DevExpress.Xpf.Editors.Code128StyleSettings();
            barcd_run.StyleSettings = code128;

            barcd_run_p = new DevExpress.Xpf.Editors.BarCodeEdit();
            barcd_run_p.Width = 180;
            barcd_run_p.Height = 48;
            barcd_run_p.Module = 2;
            barcd_run_p.ShowText = false;
            DevExpress.Xpf.Editors.Code128StyleSettings code128p = new DevExpress.Xpf.Editors.Code128StyleSettings();
            barcd_run_p.StyleSettings = code128p;


            barcd_run_p1 = new DevExpress.Xpf.Editors.BarCodeEdit();
            barcd_run_p1.Width = 180;
            barcd_run_p1.Height = 48;
            barcd_run_p1.Module = 2;
            barcd_run_p1.ShowText = false;
            DevExpress.Xpf.Editors.Code128StyleSettings code128p1 = new DevExpress.Xpf.Editors.Code128StyleSettings();
            barcd_run_p1.StyleSettings = code128p1;

            barcd_run_p2 = new DevExpress.Xpf.Editors.BarCodeEdit();
            barcd_run_p2.Width = 180;
            barcd_run_p2.Height = 48;
            barcd_run_p2.Module = 2;
            barcd_run_p2.ShowText = false;
            DevExpress.Xpf.Editors.Code128StyleSettings code128p2 = new DevExpress.Xpf.Editors.Code128StyleSettings();
            barcd_run_p2.StyleSettings = code128p2;

            if (!FindNewTemplate)
            {
                if ((strPrintType == "2up Label Print") || (strPrintType == "Customer Label"))
                {
                    if (Settings.LabelPrinterName == "")
                    {
                        lbNoPrinter.Text = Properties.Resources.Please_Define_Label_Printer_in_Setup;
                        lbNoPrinter.Visibility = Visibility.Visible;
                        btnPrint.IsEnabled = false;
                    }
                }
                else
                {

                    if (Settings.ReceiptPrinterName == "")
                    {
                        lbNoPrinter.Text = Properties.Resources.Please_Define_Receipt_Printer_in_Setup;
                        lbNoPrinter.Visibility = Visibility.Visible;
                        btnPrint.IsEnabled = false;
                    }
                }
            }
            else
            {
                if (NewPrinterName == "(None)")
                {
                    lbNoPrinter.Text = "Printer not defined";
                    lbNoPrinter.Visibility = Visibility.Visible;
                    btnPrint.IsEnabled = false;
                }
            }

            dtblstrm = new DataTable();

            dtblstrm.Columns.Add("Npos", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("Cpos", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("Fpos", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("param", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("paramnew", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("paramvalue", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("SL", System.Type.GetType("System.String"));

            dtblstrm1 = new DataTable();

            dtblstrm1.Columns.Add("Npos", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("Cpos", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("Fpos", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("param", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("paramnew", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("paramvalue", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("SL", System.Type.GetType("System.String"));

            dtblstrm2 = new DataTable();

            dtblstrm2.Columns.Add("Npos", System.Type.GetType("System.String"));
            dtblstrm2.Columns.Add("Cpos", System.Type.GetType("System.String"));
            dtblstrm2.Columns.Add("Fpos", System.Type.GetType("System.String"));
            dtblstrm2.Columns.Add("param", System.Type.GetType("System.String"));
            dtblstrm2.Columns.Add("SL", System.Type.GetType("System.String"));

            dtblstrmEMV1 = new DataTable();

            dtblstrmEMV1.Columns.Add("Npos", System.Type.GetType("System.String"));
            dtblstrmEMV1.Columns.Add("Cpos", System.Type.GetType("System.String"));
            dtblstrmEMV1.Columns.Add("Fpos", System.Type.GetType("System.String"));
            dtblstrmEMV1.Columns.Add("param", System.Type.GetType("System.String"));
            dtblstrmEMV1.Columns.Add("SL", System.Type.GetType("System.String"));

            dtblstrmEMV2 = new DataTable();

            dtblstrmEMV2.Columns.Add("Npos", System.Type.GetType("System.String"));
            dtblstrmEMV2.Columns.Add("Cpos", System.Type.GetType("System.String"));
            dtblstrmEMV2.Columns.Add("Fpos", System.Type.GetType("System.String"));
            dtblstrmEMV2.Columns.Add("param", System.Type.GetType("System.String"));
            dtblstrmEMV2.Columns.Add("SL", System.Type.GetType("System.String"));

            blprintclick = false;

            if (Settings.GeneralReceiptPrint == "Y")
            {
                this.Width = 550;
            }
            if (strPrintType == "Customer Label")
            {
              Title.Text = Properties.Resources.Customer_Label;
            }
            else if (strPrintType == "2up Label Print")
            {
                Title.Text  = Properties.Resources._2up_Label_Print;
            }
            else
            {
                Title.Text  = Properties.Resources.Receipt;
            }

            /*
            PrinterSettings ps = new PrinterSettings();
            PrinterSettings ps1 = new PrinterSettings();
            PrinterSettings ps2 = new PrinterSettings();

            if ((strPrintType == "Customer Label") || (strPrintType == "2up Label Print"))
            {
                ps.PrinterName = Settings.LabelPrinterName;
                ps1.PrinterName = Settings.LabelPrinterName;
            }
            else
            {
                ps.PrinterName = Settings.ReceiptPrinterName;
                ps1.PrinterName = Settings.ReceiptPrinterName;
                ps2.PrinterName = Settings.ReceiptPrinterName;
            }
            
            try
            {
                printDoc.DefaultPageSettings.PaperSize = ps.DefaultPageSettings.PaperSize;
            }
            catch
            {
            }*/

            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt"))
            {
                DataTable prndtblINV = new DataTable();
                prndtblINV = FetchInvHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTrnNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                }
                blDatacapManualTendering = IsDatacapManualTendering();
                blCardPayment = IsCardPayment();
                blHouseAccountPayment = IsHouseAccountPayment();
                blFSTender = IsFSTendering();

                PrintDuplicateGCSaleReceipt = IsGCSales();

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2) && (blCardPayment))
                {
                    bool b1 = IsMercuryCardPayment();
                    if (b1)
                    {
                        double amt = GetMercuryCardPaymentAmount();
                        if (amt < Settings.MercurySignAmount) MercuryCardPaymentCheck = true;
                    }
                }

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 6) && (blCardPayment))
                {
                    EMVTransaction = true;
                }
            }

            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt")
                || (strPrintType == "Reprint Layaway") || (strPrintType == "Repair In")
                || (strPrintType == "Repair Deliver") || (strPrintType == "Rent Issue")
                || (strPrintType == "Return Rent Item") || (strPrintType == "Suspend Receipt")
                || (strPrintType == "WorkOrder"))
            {
                barcd.EditValue = intInvNo.ToString();
                barcd_run.EditValue = intInvNo.ToString();
                barcd_run_p.EditValue = intInvNo.ToString();
                barcd_run_p1.EditValue = intInvNo.ToString();
                barcd_run_p2.EditValue = intInvNo.ToString();
            }

            if (strPrintType == "Layaway")
            {
                string lno = "0";
                foreach (DataRow drlay in dtblLayawayDtbl.Rows)
                {
                    lno = drlay["LAYAWAYNO"].ToString();
                    break;
                }
                barcd.EditValue = lno;
                barcd_run.EditValue = lno;
                barcd_run_p.EditValue = lno;
                barcd_run_p1.EditValue = lno;
                barcd_run_p2.EditValue = lno;
                blCardPayment = IsCardPayment_Layaway();

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2) && (blCardPayment))
                {
                    bool b1 = IsMercuryCardPayment_Layaway();
                    if (b1)
                    {
                        double amt = GetMercuryCardPaymentAmount_Layaway();
                        if (amt < Settings.MercurySignAmount) MercuryCardPaymentCheck = true;
                    }
                }

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 6) && (blCardPayment))
                {
                    EMVTransaction = true;
                }
            }

            GetPrintStream(); //  *********************  //

            int i = 1;
            foreach (DataRow dr in dtblstrm.Rows)
            {
                dr["SL"] = i.ToString();
                i++;
            }

            if (((Settings.LayawayReceipts > 1) || (blForced2ReceiptsOnPrecidiaSignatureFailure) || (blDatacapManualTendering)) && ((strPrintType == "Layaway") || (strPrintType == "Reprint Layaway")))
            {
                GetPrintStream1();
                int j = 1;
                foreach (DataRow dr in dtblstrm1.Rows)
                {
                    dr["SL"] = j.ToString();
                    j++;
                }

                CreateFlowControl1();
                /*try
                {
                    printDoc1.DefaultPageSettings.PaperSize = ps1.DefaultPageSettings.PaperSize;
                }
                catch
                {
                }*/
            }

            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt"))
            {
                if (((blCardPayment) && (Settings.IsDuplicateInvoice == "Y") && (!MercuryCardPaymentCheck) && (!blFSTender)) || (PrintDuplicateGCSaleReceipt) || (blForced2ReceiptsOnPrecidiaSignatureFailure) || (blDatacapManualTendering) || (EMVTransaction))
                {
                    GetPrintStream1();
                    int j = 1;
                    foreach (DataRow dr in dtblstrm1.Rows)
                    {
                        dr["SL"] = j.ToString();
                        j++;
                    }

                   

                    CreateFlowControl1();
                }
            }

            if ((strPrintType == "Repair In") || (strPrintType == "Repair Deliver"))
            {
                GetPrintStream1();
                int j = 1;
                foreach (DataRow dr in dtblstrm1.Rows)
                {
                    dr["SL"] = j.ToString();
                    j++;
                }

                /*try
                {
                    printDoc1.DefaultPageSettings.PaperSize = ps1.DefaultPageSettings.PaperSize;
                }
                catch
                {
                }*/

                CreateFlowControl1();
            }

            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt"))
            {
                if (blHouseAccountPayment)
                {
                    GetPrintStream2();
                    int j = 1;
                    foreach (DataRow dr in dtblstrm2.Rows)
                    {
                        dr["SL"] = j.ToString();
                        j++;
                    }
                    /*try
                    {
                        printDoc2.DefaultPageSettings.PaperSize = ps2.DefaultPageSettings.PaperSize;
                    }
                    catch
                    {
                    }*/

                    CreateFlowControl2();
                }
            }

            

            if (EMVTransaction)
            {
                GetPrintStreamEMV1();
                int ii = 1;
                foreach (DataRow dr in dtblstrmEMV1.Rows)
                {
                    dr["SL"] = ii.ToString();
                    ii++;
                }
                GetPrintStreamEMV2();

                int jj = 1;
                foreach (DataRow dr in dtblstrmEMV2.Rows)
                {
                    dr["SL"] = jj.ToString();
                    jj++;
                }
            }


            /*printDoc = new System.Drawing.Printing.PrintDocument();
            printDoc1 = new System.Drawing.Printing.PrintDocument();
            testdoc = new System.Drawing.Printing.PrintDocument();
            printDoc2 = new System.Drawing.Printing.PrintDocument();
            printDocEMV1 = new System.Drawing.Printing.PrintDocument();
            printDocEMV2 = new System.Drawing.Printing.PrintDocument();



            printDoc1.BeginPrint += new PrintEventHandler(this.printDoc1_BeginPrint);
            printDoc1.EndPrint += new PrintEventHandler(this.printDoc1_EndPrint);
            printDoc1.PrintPage += new PrintPageEventHandler(this.printDoc1_PrintPage);

            printDoc2.BeginPrint += printDoc2_BeginPrint;
            printDoc2.EndPrint += printDoc2_EndPrint;
            printDoc2.PrintPage += printDoc2_PrintPage;

            printDocEMV1.BeginPrint += printDocEMV1_BeginPrint;
            printDocEMV1.EndPrint += printDocEMV1_EndPrint;
            printDocEMV1.PrintPage += printDocEMV1_PrintPage;

            printDocEMV2.BeginPrint += printDocEMV2_BeginPrint;
            printDocEMV2.EndPrint += printDocEMV2_EndPrint;
            printDocEMV2.PrintPage += printDocEMV2_PrintPage;

            printDoc.BeginPrint += PrintDoc_BeginPrint;
            printDoc.PrintPage += PrintDoc_PrintPage;
            printDoc.EndPrint += PrintDoc_EndPrint;

            printPreviewControl1.Document = printDocEMV1;
            printPreviewControl2.Document = printDocEMV2;
            printPCtrl1.Document = printDoc1;

            printPCtrl.Document = printDoc;*/

            CreateFlowControl();

            if (((strPrintType == "Invoice") || (strPrintType == "Layaway")) && (Settings.POSPrintInvoice == 1))
            {
                if (Settings.ReceiptPrinterName != "") btnPrintClick(sender, e);
            }

            if ((strPrintType == "Closeout") && (blPrintCloseout))
            {
                btnPrintClick(sender, e);
            }

            if ((strPrintType == "Preview Invoice") || (strPrintType == "Preview Gift Aid Receipt")) btnPrintClick(sender, e);
        }

        private void Window_Loaded__(object sender, RoutedEventArgs e)
        {
            bool flag;
            this.FVPrint = new FlowDocumentScrollViewer();
            this.barcd_run = new   DevExpress.Xpf.Editors.BarCodeEdit()
            {
                Width = 232,
                Height = 48,
                Module = 2,
                ShowText = false
            };
            var code128 = new   DevExpress.Xpf.Editors.Code128StyleSettings();
            this.barcd_run.StyleSettings = code128;
            this.barcd_run_p = new   DevExpress.Xpf.Editors.BarCodeEdit()
            {
                Width = 232,
                Height = 48,
                Module = 2,
                ShowText = false
            };
            DevExpress.Xpf.Editors.Code128StyleSettings code128p = new DevExpress.Xpf.Editors.Code128StyleSettings();
            this.barcd_run_p.StyleSettings = code128p;
            if ((this.strPrintType == "2up Label Print" ? true : this.strPrintType == "Customer Label"))
            {
                if (OfflineRetailV2.Data.Settings.LabelPrinterName == "")
                {
                    this.lbNoPrinter.Text = OfflineRetailV2.Properties.Resources.Please_Define_Label_Printer_in_Setup;
                    this.lbNoPrinter.Visibility = System.Windows.Visibility.Visible;
                    this.btnPrint.IsEnabled = false;
                }
            }
            else if (OfflineRetailV2.Data.Settings.ReceiptPrinterName == "")
            {
                this.lbNoPrinter.Text = OfflineRetailV2.Properties.Resources.Please_Define_Label_Printer_in_Setup;
                this.lbNoPrinter.Visibility = System.Windows.Visibility.Visible;
                this.btnPrint.IsEnabled = false;
            }
            this.dtblstrm = new DataTable();
            this.dtblstrm.Columns.Add("Npos", Type.GetType("System.String"));
            this.dtblstrm.Columns.Add("Cpos", Type.GetType("System.String"));
            this.dtblstrm.Columns.Add("Fpos", Type.GetType("System.String"));
            this.dtblstrm.Columns.Add("param", Type.GetType("System.String"));
            this.dtblstrm.Columns.Add("SL", Type.GetType("System.String"));
            this.dtblstrm1 = new DataTable();
            this.dtblstrm1.Columns.Add("Npos", Type.GetType("System.String"));
            this.dtblstrm1.Columns.Add("Cpos", Type.GetType("System.String"));
            this.dtblstrm1.Columns.Add("Fpos", Type.GetType("System.String"));
            this.dtblstrm1.Columns.Add("param", Type.GetType("System.String"));
            this.dtblstrm1.Columns.Add("SL", Type.GetType("System.String"));
            this.dtblstrm2 = new DataTable();
            this.dtblstrm2.Columns.Add("Npos", Type.GetType("System.String"));
            this.dtblstrm2.Columns.Add("Cpos", Type.GetType("System.String"));
            this.dtblstrm2.Columns.Add("Fpos", Type.GetType("System.String"));
            this.dtblstrm2.Columns.Add("param", Type.GetType("System.String"));
            this.dtblstrm2.Columns.Add("SL", Type.GetType("System.String"));
            this.dtblstrmEMV1 = new DataTable();
            this.dtblstrmEMV1.Columns.Add("Npos", Type.GetType("System.String"));
            this.dtblstrmEMV1.Columns.Add("Cpos", Type.GetType("System.String"));
            this.dtblstrmEMV1.Columns.Add("Fpos", Type.GetType("System.String"));
            this.dtblstrmEMV1.Columns.Add("param", Type.GetType("System.String"));
            this.dtblstrmEMV1.Columns.Add("SL", Type.GetType("System.String"));
            this.dtblstrmEMV2 = new DataTable();
            this.dtblstrmEMV2.Columns.Add("Npos", Type.GetType("System.String"));
            this.dtblstrmEMV2.Columns.Add("Cpos", Type.GetType("System.String"));
            this.dtblstrmEMV2.Columns.Add("Fpos", Type.GetType("System.String"));
            this.dtblstrmEMV2.Columns.Add("param", Type.GetType("System.String"));
            this.dtblstrmEMV2.Columns.Add("SL", Type.GetType("System.String"));
            this.blprintclick = false;
            if (OfflineRetailV2.Data.Settings.GeneralReceiptPrint == "Y")
            {
                base.Width = 550;
            }
            if (this.strPrintType == "Customer Label")
            {
                this.Title.Text = OfflineRetailV2.Properties.Resources.Customer_Label;
            }
            else if (this.strPrintType != "2up Label Print")
            {
                this.Title.Text = OfflineRetailV2.Properties.Resources.Receipt;
            }
            else
            {
                this.Title.Text = OfflineRetailV2.Properties.Resources._2up_Label_Print;
            }
            if ((this.strPrintType == "Invoice" ? true : this.strPrintType == "Reprint Receipt"))
            {
                DataTable prndtblINV = new DataTable();
                foreach (DataRow dr in this.FetchInvHeader().Rows)
                {
                    this.intTrnNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                }
                this.blDatacapManualTendering = this.IsDatacapManualTendering();
                this.blCardPayment = this.IsCardPayment();
                this.blHouseAccountPayment = this.IsHouseAccountPayment();
                this.blFSTender = this.IsFSTendering();
                if ((!(OfflineRetailV2.Data.Settings.POSCardPayment == "Y") || OfflineRetailV2.Data.Settings.PaymentGateway != 2 ? false : this.blCardPayment))
                {
                    if (this.IsMercuryCardPayment())
                    {
                        if (this.GetMercuryCardPaymentAmount() < OfflineRetailV2.Data.Settings.MercurySignAmount)
                        {
                            this.MercuryCardPaymentCheck = true;
                        }
                    }
                }
                if ((!(OfflineRetailV2.Data.Settings.POSCardPayment == "Y") || OfflineRetailV2.Data.Settings.PaymentGateway != 6 ? false : this.blCardPayment))
                {
                    this.EMVTransaction = true;
                }
            }
            if ((this.strPrintType == "Invoice" || this.strPrintType == "Reprint Receipt" || this.strPrintType == "Reprint Layaway" || this.strPrintType == "Repair In" || this.strPrintType == "Repair Deliver" || this.strPrintType == "Rent Issue" || this.strPrintType == "Return Rent Item" || this.strPrintType == "Suspend Receipt" ? true : this.strPrintType == "WorkOrder"))
            {
                this.barcd.EditValue = this.intInvNo.ToString();
                this.barcd_run.EditValue = this.intInvNo.ToString();
                this.barcd_run_p.EditValue = this.intInvNo.ToString();
            }
            if (this.strPrintType == "Layaway")
            {
                string lno = "0";
                IEnumerator enumerator = this.dtblLayawayDtbl.Rows.GetEnumerator();
                try
                {
                    if (enumerator.MoveNext())
                    {
                        lno = ((DataRow)enumerator.Current)["LAYAWAYNO"].ToString();
                    }
                }
                finally
                {
                    IDisposable disposable = enumerator as IDisposable;
                    if (disposable != null)
                    {
                        disposable.Dispose();
                    }
                }
                this.barcd.EditValue = lno;
                this.barcd_run.EditValue = lno;
                this.barcd_run_p.EditValue = lno;
                this.blCardPayment = this.IsCardPayment_Layaway();
                if ((!(OfflineRetailV2.Data.Settings.POSCardPayment == "Y") || OfflineRetailV2.Data.Settings.PaymentGateway != 2 ? false : this.blCardPayment))
                {
                    if (this.IsMercuryCardPayment_Layaway())
                    {
                        if (this.GetMercuryCardPaymentAmount_Layaway() < OfflineRetailV2.Data.Settings.MercurySignAmount)
                        {
                            this.MercuryCardPaymentCheck = true;
                        }
                    }
                }
                if ((!(OfflineRetailV2.Data.Settings.POSCardPayment == "Y") || OfflineRetailV2.Data.Settings.PaymentGateway != 6 ? false : this.blCardPayment))
                {
                    this.EMVTransaction = true;
                }
            }
            this.GetPrintStream();
            int i = 1;
            foreach (DataRow dr in this.dtblstrm.Rows)
            {
                dr["SL"] = i.ToString();
                i++;
            }
            if (OfflineRetailV2.Data.Settings.LayawayReceipts > 1 || this.blForced2ReceiptsOnPrecidiaSignatureFailure || this.blDatacapManualTendering)
            {
                flag = (this.strPrintType == "Layaway" ? true : this.strPrintType == "Reprint Layaway");
            }
            else
            {
                flag = false;
            }
            if (flag)
            {
                this.GetPrintStream1();
                int j = 1;
                foreach (DataRow dr in this.dtblstrm1.Rows)
                {
                    dr["SL"] = j.ToString();
                    j++;
                }
            }
            if ((this.strPrintType == "Invoice" ? true : this.strPrintType == "Reprint Receipt"))
            {
                if (((!this.blCardPayment || !(OfflineRetailV2.Data.Settings.IsDuplicateInvoice == "Y") || this.MercuryCardPaymentCheck || this.blFSTender) && !this.blForced2ReceiptsOnPrecidiaSignatureFailure && !this.blDatacapManualTendering ? this.EMVTransaction : true))
                {
                    this.GetPrintStream1();
                    int j = 1;
                    foreach (DataRow dr in this.dtblstrm1.Rows)
                    {
                        dr["SL"] = j.ToString();
                        j++;
                    }
                }
            }
            if ((this.strPrintType == "Repair In" ? true : this.strPrintType == "Repair Deliver"))
            {
                this.GetPrintStream1();
                int j = 1;
                foreach (DataRow dr in this.dtblstrm1.Rows)
                {
                    dr["SL"] = j.ToString();
                    j++;
                }
            }
            if ((this.strPrintType == "Invoice" ? true : this.strPrintType == "Reprint Receipt"))
            {
                if (this.blHouseAccountPayment)
                {
                    this.GetPrintStream2();
                    int j = 1;
                    foreach (DataRow dr in this.dtblstrm2.Rows)
                    {
                        dr["SL"] = j.ToString();
                        j++;
                    }
                }
            }
            if (this.EMVTransaction)
            {
                this.GetPrintStreamEMV1();
                int ii = 1;
                foreach (DataRow dr in this.dtblstrmEMV1.Rows)
                {
                    dr["SL"] = ii.ToString();
                    ii++;
                }
                this.GetPrintStreamEMV2();
                int jj = 1;
                foreach (DataRow dr in this.dtblstrmEMV2.Rows)
                {
                    dr["SL"] = jj.ToString();
                    jj++;
                }
            }
            this.CreateFlowControl();
            if ((this.strPrintType == "Invoice" || this.strPrintType == "Layaway" ? OfflineRetailV2.Data.Settings.POSPrintInvoice == 1 : false))
            {
                if (OfflineRetailV2.Data.Settings.ReceiptPrinterName != "")
                {
                    this.btnPrintClick(sender, e);
                }
            }
            if ((this.strPrintType != "Closeout" ? false : this.blPrintCloseout))
            {
                this.btnPrintClick(sender, e);
            }
        }

        #region SQL functions
        private void GetCustomerOrderRef(int RefID, ref string dtOrder, ref string dtPickup)
        {
            PosDataObject.PO objpos1 = new PosDataObject.PO();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            DataTable dtbl = objpos1.ShowOrderingHeaderRecord(RefID);
            foreach (DataRow dr in dtbl.Rows)
            {
                string strODateTime = "";
                string strPDateTime = "";

                if (dr["OrderDate"].ToString() != "")
                {
                    strODateTime = dr["OrderDate"].ToString();
                    int inIndex = strODateTime.IndexOf(" ");
                    if (inIndex > 0)
                    {
                        strODateTime = strODateTime.Substring(0, inIndex).Trim();
                    }
                }
                else
                {
                    strODateTime = dr["OrderDate"].ToString();
                }

                if (dr["PickupDate"].ToString() != "")
                {
                    strPDateTime = dr["PickupDate"].ToString();
                    int inIndex = strPDateTime.IndexOf(" ");
                    if (inIndex > 0)
                    {
                        strPDateTime = strPDateTime.Substring(0, inIndex).Trim();
                    }
                }
                else
                {
                    strPDateTime = dr["PickupDate"].ToString();
                }

                dtOrder = strODateTime;
                dtPickup = strPDateTime;
            }
        }

        private DataTable FetchInvFees()
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchFeesInInvoice(intInvNo);
        }

        private DataTable FetchInvHeader()
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchInvoiceHeader(intInvNo, Settings.StoreCode);
        }

        private DataTable FetchRepairParentHeader(int pID)
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchRepairParentHeaderData(pID);
        }

        private DataTable FetchRentParentHeader(int pID)
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchRentParentHeaderData(pID);
        }

        private DataTable FetchPaidOut(int PaidOutID)
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchPaidOut(PaidOutID);
        }

        private DataTable FetchCustInfo(int prm)
        {
            PosDataObject.Customer objpos1 = new PosDataObject.Customer();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchCustomerInfo(prm);
        }

        private DataTable FetchGADetails()
        {
            PosDataObject.POS objpos2 = new PosDataObject.POS();
            objpos2.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos2.FetchGiftAidDetails(intInvNo, Settings.TaxInclusive, false);
        }

        private DataTable FetchInvDetails(double total)
        {
            PosDataObject.POS objpos2 = new PosDataObject.POS();
            objpos2.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos2.FetchInvoiceDetails(intInvNo, Settings.TaxInclusive, total < 0 ? true : false);
        }

        private DataTable FetchRPInvDetails(int pID)
        {
            PosDataObject.POS objpos2 = new PosDataObject.POS();
            objpos2.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos2.FetchInvoiceDetails(pID, Settings.TaxInclusive, false);
        }

        private DataTable FetchGCReceipts()
        {
            PosDataObject.POS objpos2 = new PosDataObject.POS();
            objpos2.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos2.FetchGCReceiptData(intGCID);
        }

        private DataTable FetchInvTender()
        {
            PosDataObject.POS objpos3 = new PosDataObject.POS();
            objpos3.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos3.FetchInvoiceTender(intTrnNo);
        }

        private double FetchCashBack(double Amt)
        {
            PosDataObject.POS objpos3 = new PosDataObject.POS();
            objpos3.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos3.GetCashBackAmountFromCardTransaction1(intTrnNo, Amt);
        }

        private bool IsCardPayment()
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsCardPayment(intTrnNo);
        }

        private bool IsGCSales()
        {
            if (Settings.PrintDuplicateGiftCertSaleReceipt == "N")
            {
                return false;
            }
            else
            {
                PosDataObject.POS objposTT = new PosDataObject.POS();
                objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
                return objposTT.CheckIfGiftCertSaleReceipt(intInvNo);

            }
        }

        private bool IsDatacapManualTendering()
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsDatacapManualTendering(intTrnNo);
        }

        private bool IsFSTendering()
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsFSTender(intTrnNo);
        }

        private bool IsCardPayment_Layaway()
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsCardPayment(intLayTran);
        }

        private bool IsHouseAccountPayment()
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsHouseAccountPayment(intTrnNo);
        }

        private DataTable FetchLayawayHeader(bool blReprint)
        {
            PosDataObject.POS objposL = new PosDataObject.POS();
            objposL.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposL.FetchLayawayInvoiceHeader(dtblLayawayDtbl, intLayTran, blReprint, Settings.StoreCode);
        }

        private DataTable FetchLayawayPayment()
        {
            PosDataObject.POS objposL1 = new PosDataObject.POS();
            objposL1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposL1.FetchLayawayInvoicePayment(intLayNo, intInvNo);
        }

        private int FetchMaxTranNo()
        {
            PosDataObject.POS objposL2 = new PosDataObject.POS();
            objposL2.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposL2.FetchLayawayMaxTranNo(intLayNo);
        }

        private double GetTotalLayawaySale(int pLayNo)
        {
            PosDataObject.POS objposL3 = new PosDataObject.POS();
            objposL3.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposL3.FetchLayawayTotalSale(pLayNo);
        }

        private double GetTotalLayawayPayment(int pLayNo)
        {
            PosDataObject.POS objposL4 = new PosDataObject.POS();
            objposL4.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposL4.FetchLayawayTotalPayment(pLayNo);
        }

        private DataTable FetchActiveGC(int pCID)
        {
            PosDataObject.POS objposGC = new PosDataObject.POS();
            objposGC.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposGC.ActiveGiftCert(pCID, Settings.CentralExportImport, Settings.StoreCode);
        }

        private DataTable FetchEBTBalance(int pCID)
        {
            PosDataObject.POS objposGC = new PosDataObject.POS();
            objposGC.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposGC.FetchEBTBalanceFromReceipt(pCID);
        }

        private void FetchSuspendRecord(ref DataTable Hdtbl, ref DataTable Ddtbl)
        {
            DataTable dtbl = new DataTable();
            DataTable dtbl1 = new DataTable();
            DataTable dtbl2 = new DataTable();
            PosDataObject.POS objposS = new PosDataObject.POS();
            objposS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtbl = objposS.FetchSuspendedRecordForPrint(intInvNo);

            dtbl1.Columns.Add("StoreID", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("RegisterID", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("TransDate", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("CID", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("CustID", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("CustName", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("CustCompany", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("EmpID", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("Tax", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("Tax1", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("Tax2", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("Tax3", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("TotalSale", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("TaxNM1", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("TaxNM2", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("TaxNM3", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("Discount", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("Coupon", System.Type.GetType("System.String"));
            dtbl1.Columns.Add("CustomerDOB", System.Type.GetType("System.String"));

            dtbl2.Columns.Add("ProductType", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("Description", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("Price", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("Qty", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("TotalPrice", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("MOP1", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("MOP2", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("MOP3", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("DP", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("NormalPrice", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("UOMPrice", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("DiscountID", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("DiscountText", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("Discount", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("ItemIndex", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("Fees", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("FeesTax", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("FeesText", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("Notes", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("BuyNGetFreeHeaderID", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("BuyNGetFreeCategory", System.Type.GetType("System.String"));
            dtbl2.Columns.Add("BuyNGetFreeName", System.Type.GetType("System.String"));

            string dts = "";
            double tx = 0;
            double tx1 = 0;
            double tx2 = 0;
            double tx3 = 0;
            double ts = 0;
            int CID = 0;
            string CUSTID = "";
            string CNAME = "";
            string CCOM = "";
            string EMP = "";
            int i = 0;
            string txnm1 = "";
            string txnm2 = "";
            string txnm3 = "";
            double discnt = 0;
            double cpn = 0;
            double cpnperc = 0;
            string custdob = "";
            foreach (DataRow dr in dtbl.Rows)
            {
                if (i == 0)
                {
                    if (dr["CID"].ToString() != "0")
                    {
                        CID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                        CUSTID = dr["CustID"].ToString();
                        CNAME = dr["CustName"].ToString();
                        CCOM = dr["CustCompany"].ToString();
                    }
                    EMP = dr["EmpID"].ToString();
                    txnm1 = dr["TaxNM1"].ToString();
                    txnm2 = dr["TaxNM2"].ToString();
                    txnm3 = dr["TaxNM3"].ToString();
                    dts = dr["SDateTime"].ToString();
                    custdob = dr["CustomerDOB"].ToString();
                }

                //calculate tax & total


                if ((dr["ProductType"].ToString() != "G") && (dr["ProductType"].ToString() != "A") && (dr["ProductType"].ToString() != "C")
                    && (dr["ProductType"].ToString() != "X") && (dr["ProductType"].ToString() != "Z") && (dr["ProductType"].ToString() != "H"))
                {
                    cpnperc = GeneralFunctions.fnDouble(dr["CouponPerc"].ToString());
                    if (dr["Taxable1"].ToString() == "Y")
                    {
                        tx1 = tx1 + ((GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString()) - GeneralFunctions.fnDouble(dr["Discount"].ToString())) * GeneralFunctions.fnDouble(dr["TaxRate1"].ToString()) / 100) * (100 - cpnperc) / 100;
                    }

                    if (dr["Taxable2"].ToString() == "Y")
                    {
                        tx2 = tx2 + ((GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString()) - GeneralFunctions.fnDouble(dr["Discount"].ToString())) * GeneralFunctions.fnDouble(dr["TaxRate2"].ToString()) / 100) * (100 - cpnperc) / 100;
                    }

                    if (dr["Taxable3"].ToString() == "Y")
                    {
                        tx3 = tx3 + ((GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString()) - GeneralFunctions.fnDouble(dr["Discount"].ToString())) * GeneralFunctions.fnDouble(dr["TaxRate3"].ToString()) / 100) * (100 - cpnperc) / 100;
                    }
                }

                if ((dr["ProductType"].ToString() != "G") && (dr["ProductType"].ToString() != "A") && (dr["ProductType"].ToString() != "C")
                    && (dr["ProductType"].ToString() != "X") && (dr["ProductType"].ToString() != "O") && (dr["ProductType"].ToString() != "Z") && (dr["ProductType"].ToString() != "H"))
                {
                    if (dr["CID"].ToString() == "0")
                    {
                        dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["NewPrice"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      Convert.ToString((GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString())) - GeneralFunctions.fnDouble(dr["Discount"].ToString())),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});

                        ts = ts + GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    }
                    else
                    {
                        if (dr["DiscountLevel"].ToString() == "A")
                        {
                            dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["NewPrice"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      Convert.ToString((GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString())) - GeneralFunctions.fnDouble(dr["Discount"].ToString())),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});
                        }
                        if (dr["DiscountLevel"].ToString() == "B")
                        {
                            dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["NewPrice"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      Convert.ToString((GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString())) - GeneralFunctions.fnDouble(dr["Discount"].ToString())),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceB"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});
                        }
                        if (dr["DiscountLevel"].ToString() == "C")
                        {
                            dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["NewPrice"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      Convert.ToString((GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString())) - GeneralFunctions.fnDouble(dr["Discount"].ToString())),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceC"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});

                        }

                        if (dr["DiscountLevel"].ToString() == "H")
                        {
                            dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["NewPrice"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      Convert.ToString((GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString())) - GeneralFunctions.fnDouble(dr["Discount"].ToString())),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceC"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});

                        }


                        ts = ts + GeneralFunctions.fnDouble(dr["NewPrice"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    }

                    discnt = discnt + GeneralFunctions.fnDouble(dr["Discount"].ToString());
                }
                else
                {
                    if (dr["ProductType"].ToString() == "G")
                    {
                        dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["PriceOverride"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      dr["PriceOverride"].ToString(),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceOverride"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});

                        ts = ts + GeneralFunctions.fnDouble(dr["PriceOverride"].ToString());
                    }

                    if (dr["ProductType"].ToString() == "O")
                    {
                        dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["PriceOverride"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      (-(GeneralFunctions.fnDouble(dr["PriceOverride"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString()))).ToString(),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceOverride"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});

                        ts = ts + -(GeneralFunctions.fnDouble(dr["PriceOverride"].ToString()) * GeneralFunctions.fnDouble(dr["Qty"].ToString()));
                    }



                    if (dr["ProductType"].ToString() == "X")
                    {
                        dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["PriceOverride"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      dr["PriceOverride"].ToString(),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceOverride"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});

                        ts = ts + GeneralFunctions.fnDouble(dr["PriceOverride"].ToString());
                    }


                    if (dr["ProductType"].ToString() == "A")
                    {
                        dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});

                        ts = ts + GeneralFunctions.fnDouble(dr["PriceA"].ToString());
                    }

                    if (dr["ProductType"].ToString() == "C")
                    {
                        dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});

                        cpn = cpn + GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    }

                    if (dr["ProductType"].ToString() == "H")
                    {
                        dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});

                    }


                    if (dr["ProductType"].ToString() == "Z")
                    {
                        dtbl2.Rows.Add(new object[] { dr["ProductType"].ToString(),
                                                      dr["Description"].ToString(),
                                                      dr["SKU"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["Qty"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["OptionValue1"].ToString(),
                                                      dr["OptionValue2"].ToString(),
                                                      dr["OptionValue3"].ToString(),
                                                      dr["DP"].ToString(),
                                                      dr["PriceA"].ToString(),
                                                      dr["UOMPrice"].ToString(),
                                                      dr["DiscountID"].ToString(),
                                                      dr["DiscountText"].ToString(),
                                                      dr["Discount"].ToString(),
                                                      dr["ItemIndex"].ToString(),
                                                      dr["Fees"].ToString(),
                                                      dr["FeesTax"].ToString(),
                                                      dr["FeesText"].ToString(),
                                                      dr["Notes"].ToString(),
                                                      dr["BuyNGetFreeHeaderID"].ToString(),
                                                      dr["BuyNGetFreeCategory"].ToString(),
                                                      dr["BuyNGetFreeName"].ToString()});

                        cpn = cpn + GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    }
                }
                i++;
            }

            tx = tx1 + tx2 + tx3;
            ts = ts - discnt + tx - cpn;

            dtbl1.Rows.Add(new object[] { "1","1",dts,CID.ToString(),CUSTID,CNAME,CCOM,EMP.ToString(),
                                          tx.ToString(),tx1.ToString(),tx2.ToString(),tx3.ToString(),
                                          ts.ToString(),txnm1,txnm2,txnm3,discnt.ToString(),cpn.ToString(),custdob});
            Hdtbl = dtbl1;
            Ddtbl = dtbl2;
        }

        private DataTable FetchCOTender()
        {
            PosDataObject.Closeout objCloseout = new PosDataObject.Closeout();
            objCloseout.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objCloseout.ShowTenderRecord("T", intCloseoutID, Settings.TerminalName);
        }

        private DataTable FetchCOTenderCount()
        {
            PosDataObject.Closeout objCloseout1 = new PosDataObject.Closeout();
            objCloseout1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objCloseout1.ShowTenderRecord("C", intCloseoutID, Settings.TerminalName);
        }

        private DataTable FetchCOTenderOverShort()
        {
            PosDataObject.Closeout objCloseout2 = new PosDataObject.Closeout();
            objCloseout2.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objCloseout2.ShowTenderRecord("R", intCloseoutID, Settings.TerminalName);
        }

        private DataTable FetchCOHeader()
        {
            PosDataObject.Closeout objCloseout3 = new PosDataObject.Closeout();
            objCloseout3.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objCloseout3.ShowHeaderRecord(Settings.TerminalName, SystemVariables.DateFormat);
        }

        private DataTable FetchCOReturn()
        {
            PosDataObject.Closeout objCloseout6 = new PosDataObject.Closeout();
            objCloseout6.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objCloseout6.ShowReturnedRecord(Settings.TerminalName);
        }

        private DataTable FetchCOSH()
        {
            PosDataObject.Closeout objCloseout7 = new PosDataObject.Closeout();
            objCloseout7.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objCloseout7.ShowSalesByHourRecord(Settings.TerminalName, SystemVariables.DateFormat);
        }

        private DataTable FetchCOSD()
        {
            PosDataObject.Closeout objCloseout8 = new PosDataObject.Closeout();
            objCloseout8.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objCloseout8.ShowSalesByDeptRecord(Settings.TerminalName, SystemVariables.DateFormat);
        }

        private int FetchWorkorderNo()
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objPOS.FetchWorkOrderNo(intInvNo);
        }

        private string FetchWorkorderDate()
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objPOS.FetchWorkOrderDate(intInvNo);
        }

        private DataTable FetchWOHeader()
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchWorkOrderHeader(intInvNo);
        }

        private DataTable FetchWODetails()
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchWorkOrderDetails(intInvNo);
        }

        private void UpdateSalesExportFlag()
        {
            PosDataObject.Closeout objclsout = new PosDataObject.Closeout();
            objclsout.Connection = new SqlConnection(SystemVariables.ConnectionString);
            string retrn = objclsout.UpdateSalesExportTag();
        }

        private void UpdateEmployeeAttnExportFlag()
        {
            PosDataObject.Closeout objclsout = new PosDataObject.Closeout();
            objclsout.Connection = new SqlConnection(SystemVariables.ConnectionString);
            string retrn = objclsout.UpdateEmpAttnExportTag();
        }

        private void InsertExpImpLog(string ftype, string fname, string fpath)
        {
            PosDataObject.Closeout objclsout = new PosDataObject.Closeout();
            objclsout.Connection = new SqlConnection(SystemVariables.ConnectionString);
            objclsout.FileType = ftype;
            objclsout.FilePath = fpath;
            objclsout.FileName = fname;
            objclsout.LoginUserID = SystemVariables.CurrentUserID;
            string retrn = objclsout.InsertExpImpLog();
        }

        private DataTable FetchInvCoupon()
        {
            PosDataObject.POS objpos34 = new PosDataObject.POS();
            objpos34.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos34.FetchInvoiceCoupons(intInvNo);
        }

        private bool IsMercuryCardPayment()
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsMercuryCreditCardPayment(intTrnNo);
        }


        private bool IsMercuryCardPayment_Layaway()
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsMercuryCreditCardPayment(intLayTran);
        }


        private double GetMercuryCardPaymentAmount()
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.GetMercuryCreditCardPayment(intTrnNo);
        }

        private double GetMercuryCardPaymentAmount_Layaway()
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.GetMercuryCreditCardPayment(intLayTran);
        }

        private string FetchCustomerAddress(int CID)
        {
            PosDataObject.Customer objPOS = new PosDataObject.Customer();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objPOS.FetchCustomerAddress(CID);
        }
        #endregion



        #region Assign Stream to Print

        private void GetPrintStream()
        {
            var dummyTest = "";
            if (!FindNewTemplate)
            {
                if (strPrintType == "Gift Aid Receipt")
                {
                    dummyTest = "";
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.Training + " ", "", "B" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "*** Gift Aid Receipt ***", "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });



                    if ((Settings.PrintLogoInReceipt == "Y") && (!FindNewTemplate))
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }



                    // -----------------  Receipt Header ---------------

                    GetRecieptHeader();

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";

                    string strDTaxName = "";
                    double dblDTax = 0;
                    int CustomerOrderRef = 0;

                    string strCustDOB = "";

                    string strCustAddress = "";

                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        serviceT = dr["ServiceType"].ToString();

                        strDTaxName = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();
                    }

                    prndtblINV.Dispose();

                    
                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    dtblstrm.Rows.Add(new object[] { "Payment Ref ID", "", intInvNo.ToString(), "" });


                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 =  FetchGADetails();

                    string strDescription = "";
                    string strDiscText = "";

                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    string strInvNotes = "";

                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        strDescription = dr["Description"].ToString();
                        strDiscText = dr["DiscountText"].ToString().Trim();
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString().Trim();
                    }


                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    dtblstrm.Rows.Add(new object[] { strDiscText, "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    if (strInvNotes != "")
                    {

                        string OrginalH = "";

                        ArrangeText(strInvNotes, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }


                    }

                   

                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });

                    dtblstrm.Rows.Add(new object[] { "Amount", "", GetFotmatDoubleValue(dblTotalPrice), "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });


                    prndtblINV1.Dispose();

                    
                   

                    bool bnewtendertemplate = false;
                    string tenderpval = "";
                    if (!FindNewTemplate)
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });
                    }


                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                        if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });


                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }
                    prndtblINV2.Dispose();


                    if (dblTotalSale - dblTempTender != 0)
                    {
                        if (!FindNewTemplate)
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Change + " ", "", "(" + GetFotmatDoubleValue(dblTempTender - dblTotalSale) + ")", "" });
                        }

                    }
                    else dtblstrm.Rows.Add(new object[] { "", "", "", "" });


                    if (!FindNewTemplate)
                    {
                        if (Settings.POSShowGiftCertBalance == "Y")
                        {
                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "" });

                                dtblstrm.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "", "" });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow dr in dtblGC.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                                }
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                            }
                            dtblGC.Dispose();
                        }

                    }



                    if (!FindNewTemplate)
                    {
                        DataTable dtblEBT = new DataTable();
                        dtblEBT = FetchEBTBalance(intInvNo);
                        if (dtblEBT.Rows.Count > 0)
                        {

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "" });

                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                            foreach (DataRow dr in dtblEBT.Rows)
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                            }
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                        dtblEBT.Dispose();

                    }








                    if (!FindNewTemplate)
                    {

                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        bool mgc = false;
                        int mgcnt = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                        {
                            if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                            {
                                mgcnt++;
                                if (mgcnt == 1)
                                {
                                    mgc = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }






                        int prmebt = 0;
                        PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                        obcc01mgc33.Connection = SystemVariables.Conn;
                        prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc3 = new DataTable();
                        PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                        obcc11mgc55.Connection = SystemVariables.Conn;
                        ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                        bool mgc4 = false;
                        int mgcnt4 = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                        {
                            if (drmgc["CardType"].ToString() == "Food Stamps")
                            {
                                mgcnt4++;
                                if (mgcnt4 == 1)
                                {
                                    mgc4 = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc4)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                    }









                    if (boolHATender)
                    {
                        if (!FindNewTemplate)
                        {
                            if ((Settings.HouseAccountBalanceInReceipt == "Y"))
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                        }

                    }



                    if (boolSCrdtTender) // Print Store Credit Balance
                    {
                        if (!FindNewTemplate)
                        {
                            PosDataObject.POS objscrtbal = new PosDataObject.POS();
                            objscrtbal.Connection = SystemVariables.Conn;
                            double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                    }










                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        int prm = 0;
                        PosDataObject.POS obcc01 = new PosDataObject.POS();
                        obcc01.Connection = SystemVariables.Conn;
                        prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11 = new DataTable();
                        PosDataObject.POS obcc11 = new PosDataObject.POS();
                        obcc11.Connection = SystemVariables.Conn;
                        ccdtbl11 = obcc11.FetchCardData(prm);


                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                            if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                            if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                            if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                            strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            strCardNum = drcc["RefCardAct"].ToString();
                            strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                            strCardLogo = drcc["RefCardLogo"].ToString();
                            strCardEntry = drcc["RefCardEntry"].ToString();
                            strApprovalNum = drcc["RefCardAuthID"].ToString();
                            strTranID = drcc["RefCardTranID"].ToString();
                            strApprovedAmt = drcc["RefCardAuthAmount"].ToString();

                            if (!FindNewTemplate)
                            {
                                if (Settings.POSCardPayment == "Y")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "Credit")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }
                                if (strCardType == "Debit")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                                }

                                if (strCardType == "Mercury")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "Precidia")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "EBT")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }
                            }

                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ShowTipsInReceipt == "Y")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                }
                            }


                            if (strCardType == "Credit")
                            {
                                if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                    || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                    ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                     || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                    || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                {
                                    if (!FindNewTemplate)
                                    {
                                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    }


                                    if (!FindNewTemplate)
                                    {

                                        dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                        dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                                    }

                                }
                            }

                            if (strCardType == "Debit")
                            {
                                if (!FindNewTemplate)
                                {
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                                }

                                if (!FindNewTemplate)
                                {
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                                }

                            }
                        }
                    }
                    // --------------- Sign --------------

                    // --------------- Receipt Footer --------------
                    if (!FindNewTemplate)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        if (!FindNewTemplate)
                        {
                            string OrginalF = "";
                            ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                            char FindF = '\n';
                            int NumberOfOccurancesF = 0;


                            string CopyOrginalF = string.Copy(OrginalF);
                            int PlaceF = 0;
                            NumberOfOccurancesF = 0;
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            while (PlaceF != -1)
                            {
                                string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                }

                                CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                NumberOfOccurancesF++;
                            }

                            if (CopyOrginalF.Length > 30)
                            {
                                int len = CopyOrginalF.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (CopyOrginalF != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                        CopyOrginalF = CopyOrginalF.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                            }



                            if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                            else
                            {
                                if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                            }

                            dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                        }

                    }

                    if (blCardPayment)
                    {
                        if (!FindNewTemplate)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                            dtblstrm.Rows.Add(new object[] { "", Properties.Resources.CARDHOLDER_COPY, "" });
                        }

                    }

                    if (!FindNewTemplate)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                    }





                    this.intPageCounter++;




                }


                if (strPrintType == "Preview Gift Aid Receipt")
                {
                    dummyTest = "";
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.Training + " ", "", "B" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "*** Preview Gift Aid ***", "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });



                    if ((Settings.PrintLogoInReceipt == "Y") && (!FindNewTemplate))
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }



                    // -----------------  Receipt Header ---------------

                    GetRecieptHeader();

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";

                    string strDTaxName = "";
                    double dblDTax = 0;
                    int CustomerOrderRef = 0;

                    string strCustDOB = "";

                    string strCustAddress = "";

                    prndtblINV = dtblPreviewInvoiceHeader;

                    strTransDate = GeneralFunctions.fnDate(DateTime.Now).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");

                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        //intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        //intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        //intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        //strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        //strTaxName1 = dr["TaxNM1"].ToString();
                        //strTaxName2 = dr["TaxNM2"].ToString();
                        //strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        //dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        //dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        //dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        serviceT = dr["ServiceType"].ToString();

                        //strDTaxName = dr["DTaxName"].ToString();
                        //dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        //CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        //strCustDOB = dr["CustomerDOB"].ToString();
                    }

                    prndtblINV.Dispose();


                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    dtblstrm.Rows.Add(new object[] { "Payment Ref ID", "", intInvNo.ToString(), "" });


                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = dtblPreviewInvoiceDetails;

                    string strDescription = "";
                    string strDiscText = "";

                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    string strInvNotes = "";

                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        strDescription = dr["Description"].ToString();
                        strDiscText = dr["DiscountText"].ToString().Trim();
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString().Trim();
                    }


                    
                    dtblstrm.Rows.Add(new object[] { strDiscText, "", "", "" });
                    
                    if (strInvNotes != "")
                    {

                        string OrginalH = "";

                        ArrangeText(strInvNotes, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }


                    }



                    

                    dtblstrm.Rows.Add(new object[] { "Amount: " + SystemVariables.CurrencySymbol + GetFotmatDoubleValue(dblTotalPrice), "",  "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });


                    prndtblINV1.Dispose();




                    



                   

                    // --------------- Receipt Footer --------------
                    if (!FindNewTemplate)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        if (!FindNewTemplate)
                        {
                            string OrginalF = "";
                            ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                            char FindF = '\n';
                            int NumberOfOccurancesF = 0;


                            string CopyOrginalF = string.Copy(OrginalF);
                            int PlaceF = 0;
                            NumberOfOccurancesF = 0;
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            while (PlaceF != -1)
                            {
                                string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                }

                                CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                NumberOfOccurancesF++;
                            }

                            if (CopyOrginalF.Length > 30)
                            {
                                int len = CopyOrginalF.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (CopyOrginalF != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                        CopyOrginalF = CopyOrginalF.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                            }



                            if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                            else
                            {
                                if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                            }

                            dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                        }

                    }

                    

                    if (!FindNewTemplate)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                    }





                    this.intPageCounter++;




                }

                if (strPrintType == "Gift Receipt")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "*** Gift Receipt ***", "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }

                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }
                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    }
                    prndtblINV.Dispose();

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString(), "" });

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    if (strCustCompany != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany, "" });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName, "" });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID, "" });
                    }

                    if (strCustAddress != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchGCReceipts();
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strSKU = "";
                        double dblQty = 0;
                        string strInvNotes = "";
                        strSKU = dr["SKU"].ToString();
                        strDescription = dr["Description"].ToString();
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        strInvNotes = dr["Notes"].ToString();
                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";
                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        dtblstrm.Rows.Add(new object[] { sPD1, "", "", "" });

                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD2, "", "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {

                            dtblstrm.Rows.Add(new object[] { sPD3, "", "", "" });
                        }

                        dtblstrm.Rows.Add(new object[] { "", GetFotmatDoubleValue(dblQty), "", "" });

                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;
                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }

                    }
                    prndtblINV1.Dispose();

                    // --------------- Receipt Footer --------------
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] {  Properties.Resources.store_ + intStoreID.ToString(), "",
                    Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });

                    }
                    this.intPageCounter++;
                }

                if (strPrintType == "Rent Issue")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; //Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);
                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }
                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";

                    string calcflag = "";


                    double dblFees = 0;
                    double dblFeesTax = 0;


                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();

                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                        serviceT = dr["ServiceType"].ToString();
                        calcflag = dr["IsRentCalculated"].ToString();

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());
                    }

                    prndtblINV.Dispose();

                    dtblstrm.Rows.Add(new object[] { "", "", Properties.Resources.Rent___Issue, "" });

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString(), "" });

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    if (strCustCompany != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany, "" });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName, "" });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID, "" });
                    }

                    if (strCustAddress != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";
                        string strRentType = "";
                        double dblRentDuration = 1;
                        string dtRentEffectiveFrom = "";

                        string strFeesText = "";
                        string strFeesID = "0";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();

                        TService1 = dr["ServiceType"].ToString();
                        strRentType = dr["RentType"].ToString();
                        dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());


                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();

                        string rentdisplay = "";

                        int rnt = 0;
                        string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);

                        if (strRentType == "MI") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.on_minute_basis : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.min_;
                        if (strRentType == "HR") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.hourly : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.hr_;
                        if (strRentType == "HD") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.half_day : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.half_day_s_;
                        if (strRentType == "DY") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.daily : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.day_s_;
                        if (strRentType == "WK") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.weekly : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.week_s_;
                        if (strRentType == "MN") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.monthly : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.month_s_;

                        dtRentEffectiveFrom = GeneralFunctions.fnDate(dr["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        dtblstrm.Rows.Add(new object[] { sPD1, "", "", "" });

                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD2, "", "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {

                            dtblstrm.Rows.Add(new object[] { sPD3, "", "", "" });
                        }

                        if (strPType == "M")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "" });

                            if (strMV2 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "" });
                            }
                            if (strMV3 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "" });
                            }
                        }

                        if (strDiscText != "")
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "" });
                        }

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                            }
                        }

                        int val = 0;
                        string qval = int.TryParse(dblQty.ToString(), out val) ? val.ToString() : GetFotmatDoubleValue(dblQty);
                        if (calcflag == "N")
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + rentdisplay, "", "", "" });
                            dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), qval, GetFotmatDoubleValue(dblTotalPrice), "" });
                        }
                        else
                            dtblstrm.Rows.Add(new object[] { SP1 + rentdisplay, "", qval, "" });

                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }
                    }
                    prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                    if ((!blIsRentReturned) && (calcflag == "N"))
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "" });

                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });

                        if (dblDiscount != 0) // -------------- Discount ----------------
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                            string strDiscountCaption = Properties.Resources.Discount;
                            dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount), "" });
                        }

                        // -------------- Tax ----------------
                        if (dblTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                            if (dblTax1 != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1), "" });

                            }
                            if (dblTax2 != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2), "" });
                            }
                            if (dblTax3 != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3), "" });
                            }

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        }

                        if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                        {
                            DataTable dFees = FetchInvFees();
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                            if (dblFees + dblFeesCoupon != 0)
                            {
                                if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString(), "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                                if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            }
                            if (dblFeesTax + dblFeesCouponTax != 0)
                            {
                                if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                                if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            }
                        }

                        if (dblCoupon != 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket, "", GetFotmatDoubleValue(dblCoupon), "" });

                        DataTable dtblCpn = new DataTable();
                        dtblCpn = FetchInvCoupon();
                        if (dtblCpn.Rows.Count > 0)
                        {
                            //dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });

                            foreach (DataRow dr in dtblCpn.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr["Name"].ToString();

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm.Rows.Add(new object[] { SP1 + sPD1, "", "", "" });

                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + sPD2, "", "", "" });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm.Rows.Add(new object[] { SP1 + sPD3, "", "", "" });
                                }


                                dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                                dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblAmount), "" });
                            }
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        }

                    }

                    if (dblRentalSecurityDeposit > 0)
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit, "", GetFotmatDoubleValue(dblRentalSecurityDeposit), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    // -------------- Total ----------------

                    if (calcflag == "N")
                    {
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale + dblRentalSecurityDeposit), "B" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    // --------------- Tender --------------


                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;


                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                        dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;

                        if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }
                    prndtblINV2.Dispose();

                    if (dblTotalSale + dblRentalSecurityDeposit - dblTempTender != 0) // --------------- Change Due --------------
                    {
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Change + " ", "", "(" + GetFotmatDoubleValue(dblTempTender + dblRentalSecurityDeposit - dblTotalSale) + ")", "" });
                    }
                    else dtblstrm.Rows.Add(new object[] { "", "", "", "" });

                    //if (strCID != "0")   // -------------- gift certificate balance
                    //{
                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        DataTable dtblGC = new DataTable();
                        dtblGC = FetchActiveGC(intInvNo);
                        if (dtblGC.Rows.Count > 0)
                        {

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "" });

                            dtblstrm.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "", "" });

                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                            foreach (DataRow dr in dtblGC.Rows)
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                            }
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                        dtblGC.Dispose();
                    }
                    //}


                    DataTable dtblEBT = new DataTable();
                    dtblEBT = FetchEBTBalance(intInvNo);
                    if (dtblEBT.Rows.Count > 0)
                    {

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "" });

                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                        foreach (DataRow dr in dtblEBT.Rows)
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                        }
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }
                    dtblEBT.Dispose();

                    int prmmgc = 0;
                    PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                    obcc01mgc.Connection = SystemVariables.Conn;
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                    DataTable ccdtbl11mgc = new DataTable();
                    PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                    obcc11mgc.Connection = SystemVariables.Conn;
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                    bool mgc = false;
                    int mgcnt = 0;
                    foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                    {
                        if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                            || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                        {
                            mgcnt++;
                            if (mgcnt == 1)
                            {
                                mgc = true;
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                            dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                        }
                    }
                    if (mgc)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }



                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if (boolSCrdtTender) // Print Store Credit Balance
                    {
                        PosDataObject.POS objscrtbal = new PosDataObject.POS();
                        objscrtbal.Connection = SystemVariables.Conn;
                        double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        int prm = 0;
                        PosDataObject.POS obcc01 = new PosDataObject.POS();
                        obcc01.Connection = SystemVariables.Conn;
                        prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11 = new DataTable();
                        PosDataObject.POS obcc11 = new PosDataObject.POS();
                        obcc11.Connection = SystemVariables.Conn;
                        ccdtbl11 = obcc11.FetchCardData(prm);

                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                            if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                            if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                            if (drcc["CardType"].ToString() == "Precidia Gift Card") strCardType = "Precidia";
                            if (drcc["CardType"].ToString() == "Datacap Gift Card") strCardType = "Datacap";
                            if (drcc["CardType"].ToString() == "POSLink Gift Card") strCardType = "POSLink";
                            if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                            strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            strCardNum = drcc["RefCardAct"].ToString();
                            strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                            strCardLogo = drcc["RefCardLogo"].ToString();
                            strCardEntry = drcc["RefCardEntry"].ToString();
                            strApprovalNum = drcc["RefCardAuthID"].ToString();
                            strTranID = drcc["RefCardTranID"].ToString();
                            strApprovedAmt = drcc["RefCardAuthAmount"].ToString();

                            if (Settings.POSCardPayment == "Y")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });


                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Credit")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                            if (strCardType == "Debit")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Mercury")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Precidia")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "EBT")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }


                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ShowTipsInReceipt == "Y")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                }
                            }



                            if (strCardType == "Credit")
                            {
                                if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                    || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                    ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                    || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                    || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))
                                {
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                                    dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                    dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                                }
                            }

                            if (strCardType == "Debit")
                            {
                                dtblstrm.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                                dtblstrm.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                            }
                        }
                    }
                    // --------------- Sign --------------

                    // --------------- Receipt Footer --------------
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });

                    }

                    if (blCardPayment)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.CARDHOLDER_COPY, "" });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });

                    this.intPageCounter++;
                }

                if (strPrintType == "Return Rent Item")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);
                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }

                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }
                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblRentalSecurityDeposit = 0;
                    int intRentParent = 0;
                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";
                    string calcflag = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    double Tot = 0;
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        intRentParent = GeneralFunctions.fnInt32(dr["RentParentID"].ToString());
                        serviceT = dr["ServiceType"].ToString();

                        calcflag = dr["IsRentCalculated"].ToString();
                        Tot = Tot + dblTotalSale;
                    }
                    prndtblINV.Dispose();

                    dtblstrm.Rows.Add(new object[] { "", "", Properties.Resources.Rent___Return, "" });
                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString(), "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "Ref. Invoice # ", "", intRentParent.ToString(), "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    if (strCustCompany != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany, "" });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName, "" });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID, "" });
                    }

                    if (strCustAddress != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";
                        string strRentType = "";
                        double dblRentDuration = 1;
                        string dtRentEffectiveFrom = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();

                        TService1 = dr["ServiceType"].ToString();
                        strRentType = dr["RentType"].ToString();
                        dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());

                        string rentdisplay = "";

                        int rnt = 0;
                        string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);

                        if (TService1 == "Rent")
                        {
                            if (strRentType == "MI") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.min_;
                            if (strRentType == "HR") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.hr_;
                            if (strRentType == "HD") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.half_day_s_;
                            if (strRentType == "DY") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.day_s_;
                            if (strRentType == "WK") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.week_s_;
                            if (strRentType == "MN") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.month_s_;
                            dtRentEffectiveFrom = GeneralFunctions.fnDate(dr["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        }

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        dtblstrm.Rows.Add(new object[] { sPD1, "", "", "" });

                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD2, "", "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD3, "", "", "" });
                        }

                        if (strPType == "M")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "" });

                            if (strMV2 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "" });
                            }
                            if (strMV3 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "" });
                            }
                        }

                        int qval = 0;
                        string val = int.TryParse((-dblQty).ToString(), out qval) ? qval.ToString() : GetFotmatDoubleValue(-dblQty);

                        if (calcflag == "N")
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + rentdisplay, "", "", "" });
                            dtblstrm.Rows.Add(new object[] { "", "", val, "" });
                        }

                        if (calcflag == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + rentdisplay, "", "", "" });
                            dtblstrm.Rows.Add(new object[] { GetFotmatDoubleValue(dblPrice), val, GetFotmatDoubleValue(dblPrice * -dblQty * dblRentDuration), "" });
                        }

                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }
                    }
                    prndtblINV1.Dispose();

                    if (dblTax != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblTax1 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1), "" });

                        }
                        if (dblTax2 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2), "" });
                        }
                        if (dblTax3 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3), "" });
                        }

                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    }

                    DataTable dtblR = new DataTable();
                    dtblR = FetchRentParentHeader(intRentParent);
                    double val1 = 0;
                    double val2 = 0;
                    foreach (DataRow drr in dtblR.Rows)
                    {
                        val1 = GeneralFunctions.fnDouble(drr["RentDeposit"].ToString());
                        val2 = GeneralFunctions.fnDouble(drr["DueAmount"].ToString());
                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    if (val1 > 0)
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit, "", GetFotmatDoubleValue(val1), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    if (dblRentalSecurityDeposit != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Return_Deposit, "", GetFotmatDoubleValue(dblRentalSecurityDeposit), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if ((val1 > 0) && (val2 > 0))
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Due + " ", "", GetFotmatDoubleValue(val2), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    if ((dblRentalSecurityDeposit != 0) || ((calcflag == "Y") && (Tot != 0)))
                    {
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(Tot), "B" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                        DataTable prndtblINV2 = new DataTable();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                        }
                        prndtblINV2.Dispose();

                        if (Tot - dblTempTender != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Change + " ", "", "(" + GetFotmatDoubleValue(dblTempTender - Tot) + ")", "" });
                        }
                        else dtblstrm.Rows.Add(new object[] { "", "", "", "" });




                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        bool mgc = false;
                        int mgcnt = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                        {
                            if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                            {
                                mgcnt++;
                                if (mgcnt == 1)
                                {
                                    mgc = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }


                    }
                    // --------------- Receipt Footer --------------
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });

                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });


                    this.intPageCounter++;
                }

                if (strPrintType == "Repair In")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    GetRecieptHeader();

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strCustPhone = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string serviceT = "";

                    double rpTotal = 0;
                    double rpAdvance = 0;
                    double rpDue = 0;

                    string rpDesc = "";

                    string rpStatus = "";
                    string rpInDate = "";
                    string rpDelDate = "";
                    string rpNotfDate = "";

                    string rpItem = "";
                    string rpSL = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strCustPhone = dr["CustMobile"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                        rpTotal = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr["RepairDueAmount"].ToString());
                        rpDesc = dr["RepairProblem"].ToString();

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        rpInDate = GeneralFunctions.fnDate(dr["RepairDateIn"].ToString()).ToString("d");

                        if (dr["RepairDeliveryDate"].ToString() != "")
                            rpDelDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToString("d");
                        if (dr["RepairNotifiedDate"].ToString() != "")
                            rpNotfDate = GeneralFunctions.fnDate(dr["RepairNotifiedDate"].ToString()).ToString("d");

                        serviceT = dr["ServiceType"].ToString();

                        rpItem = dr["RepairItemName"].ToString();

                        rpSL = dr["RepairItemSlNo"].ToString();
                    }
                    prndtblINV.Dispose();

                    intWO = FetchWorkorderNo();

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Repair, "", Properties.Resources.Issue, "" });

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString(), "" });

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    if (rpInDate != "") dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_In, "", rpInDate, "" });

                    if (rpDelDate != "") dtblstrm.Rows.Add(new object[] { Properties.Resources.Delivery_Date, "", rpDelDate, "" });

                    if (rpNotfDate != "") dtblstrm.Rows.Add(new object[] { Properties.Resources.Notified_Date, "", rpNotfDate, "" });

                    if ((rpInDate != "") || (rpDelDate != "") || (rpNotfDate != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    if (strCustCompany != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany, "" });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName, "" });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID, "" });
                    }


                    if (strCustAddress != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    if (strCustPhone != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Ph_, "", strCustPhone, "" });
                    }


                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    if (rpItem != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Repair_Item + " : " + rpItem, "", "", "" });
                    }
                    if (rpSL != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Serial + " # : " + rpSL, "", "", "" });
                    }

                    if ((rpItem != "") || (rpSL != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }


                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";

                        string strFeesID = "0";
                        string strFeesText = "";


                        string strrpItemTag = "";
                        string strrpItemSLNO = "";
                        string dtrpPurchaseDate = "";
                        string dtrpDeliveryDate = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();
                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        TService1 = dr["ServiceType"].ToString();
                        strrpItemTag = dr["RepairItemTag"].ToString();
                        strrpItemSLNO = dr["RepairItemSLNO"].ToString();

                        if (dr["RepairItemPurchaseDate"].ToString() != "")
                            dtrpPurchaseDate = GeneralFunctions.fnDate(dr["RepairItemPurchaseDate"].ToString()).ToString("d");

                        if (dr["RepairItemDeliveryDate"].ToString() != "")
                            dtrpDeliveryDate = GeneralFunctions.fnDate(dr["RepairItemDeliveryDate"].ToString()).ToString("d");

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        dtblstrm.Rows.Add(new object[] { sPD1, "", "", "" });

                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD2, "", "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {

                            dtblstrm.Rows.Add(new object[] { sPD3, "", "", "" });
                        }

                        if (strPType == "M")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "" });

                            if (strMV2 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "" });
                            }
                            if (strMV3 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "" });
                            }
                        }

                        if (strrpItemSLNO != "")
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.SL + " # " + strrpItemSLNO, "", "", "" });
                        }

                        if (strrpItemTag != "")
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tag + " # " + strrpItemTag, "", "", "" });
                        }

                        if (strDiscText != "")
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "", "" }); if (strPrintType == "Invoice")
                                dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "" });
                        }

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                            }
                        }

                        //dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblTotalPrice), "" });
                        dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(dblTotalPrice), "" });

                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                    dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "" });

                    if (dblDiscount != 0) // -------------- Discount ----------------
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        string strDiscountCaption = Properties.Resources.Discount;
                        dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount), "" });
                    }

                    // -------------- Tax ----------------
                    if (dblTax != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":", "", GetFotmatDoubleValue(dblTax), "" });

                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    }


                    if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                    {
                        DataTable dFees = FetchInvFees();
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblFees + dblFeesCoupon != 0)
                        {
                            if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString(), "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                        if (dblFeesTax + dblFeesCouponTax != 0)
                        {
                            if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", GetFotmatDoubleValue(rpTotal), "B" });


                    if (rpDesc != "")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Problem + " :", "", "" });
                        string OrginalD = "";
                        ArrangeText(rpDesc, 30, ref OrginalD);
                        char FindD = '\n';
                        int NumberOfOccurancesD = 0;


                        string CopyOrginalD = string.Copy(OrginalD);
                        int PlaceD = 0;
                        NumberOfOccurancesD = 0;
                        PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                        while (PlaceD != -1)
                        {
                            string cutstr = CopyOrginalD.Substring(0, PlaceD);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesD++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                            PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                            NumberOfOccurancesD++;
                        }

                        if (CopyOrginalD.Length > 30)
                        {
                            int len = CopyOrginalD.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesD++;
                                len = len - 30;
                                if (CopyOrginalD != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalD = CopyOrginalD.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesD == 0) NumberOfOccurancesD = 1;
                        else
                        {
                            if ((OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())) NumberOfOccurancesD = NumberOfOccurancesD + 1;
                        }

                        dtblstrm.Rows.Add(new object[] { rpDesc, "", "", NumberOfOccurancesD.ToString() });

                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit, "", GetFotmatDoubleValue(rpAdvance), "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Due, "", GetFotmatDoubleValue(rpDue), "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });


                    // -------------- Total ----------------

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    if (rpAdvance > 0)
                    {
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Tran_Amt_, "", GetFotmatDoubleValue(rpAdvance), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        // --------------- Tender --------------

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });



                        DataTable prndtblINV2 = new DataTable();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                            if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                        }
                        prndtblINV2.Dispose();

                        if (rpAdvance - dblTempTender != 0) // --------------- Change Due --------------
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Change + " ", "", "(" + GetFotmatDoubleValue(dblTempTender - rpAdvance) + ")", "" });
                        }
                        else dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    //if (strCID != "0")   // -------------- gift certificate balance
                    //{
                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        DataTable dtblGC = new DataTable();
                        dtblGC = FetchActiveGC(intInvNo);
                        if (dtblGC.Rows.Count > 0)
                        {

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "" });

                            dtblstrm.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "", "" });

                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                            foreach (DataRow dr in dtblGC.Rows)
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                            }
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                        dtblGC.Dispose();
                    }
                    //}

                    DataTable dtblEBT = new DataTable();
                    dtblEBT = FetchEBTBalance(intInvNo);
                    if (dtblEBT.Rows.Count > 0)
                    {

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "" });

                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                        foreach (DataRow dr in dtblEBT.Rows)
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                        }
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }
                    dtblEBT.Dispose();

                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    if (boolSCrdtTender) // Print Store Credit Balance
                    {
                        PosDataObject.POS objscrtbal = new PosDataObject.POS();
                        objscrtbal.Connection = SystemVariables.Conn;
                        double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        if (Settings.POSCardPayment == "Y")
                        {
                            if (Settings.PaymentGateway == 2) // Mercury Payment
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCH_ID + " :", "", strMercuryMerchantID });
                            }
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.ENTRY + "  :", "", strCardEntry });

                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                        if (strCardType == "Credit")
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (strCardType == "Debit")
                        {

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", "APPROVED" });
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });

                        }
                        if (strCardType == "Credit")
                        {
                            dtblstrm.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                            dtblstrm.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                            dtblstrm.Rows.Add(new object[] { "X", "", "" });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });

                            dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                            dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                        }

                        if (strCardType == "Debit")
                        {
                            dtblstrm.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                            dtblstrm.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                        }
                    }

                    // --------------- Sign --------------

                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY + " " + GetFotmatDoubleValue(rpDue), "" });

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "X", "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                    dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });

                    // --------------- Sign --------------

                    // --------------- Receipt Footer --------------
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if (((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                         || ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null)))
                    {
                        string MText = "";

                        if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                            MText = Properties.Resources.CUSTOMER_AGREEMENT_ + "\n" + Settings.ReceiptFooter.Trim();

                        if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                        {
                            if (MText == "") MText = Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                            else MText = MText + "\n\n" + Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                        }

                        string OrginalF = "";
                        ArrangeText(MText, 40, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 40)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesF++;
                                len = len - 40;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }
                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm.Rows.Add(new object[] { MText, "", "", NumberOfOccurancesF.ToString() });

                    }


                    if (blCardPayment)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.CARDHOLDER_COPY, "" });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });

                    this.intPageCounter++;
                }

                if (strPrintType == "Repair Deliver")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    GetRecieptHeader();

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strCustPhone = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblRentalSecurityDeposit = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string serviceT = "";

                    double rpTotal = 0;
                    double rpAdvance = 0;
                    double rpDue = 0;

                    string rpProb = "";
                    string rpDesc = "";

                    string rpStatus = "";
                    string rpDelDate = "";
                    string rpNotfDate = "";

                    string rpInDate = "";
                    string rpItem = "";
                    string rpSL = "";

                    int ParentID = 0;
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strCustPhone = dr["CustMobile"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        ParentID = GeneralFunctions.fnInt32(dr["RepairParentID"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());


                        rpTotal = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr["RepairDueAmount"].ToString());

                        if (dr["RepairDeliveryDate"].ToString() != "")
                            rpDelDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToString("d");
                        if (dr["RepairNotifiedDate"].ToString() != "")
                            rpNotfDate = GeneralFunctions.fnDate(dr["RepairNotifiedDate"].ToString()).ToString("d");

                        rpInDate = GeneralFunctions.fnDate(dr["RepairDateIn"].ToString()).ToString("d");

                        rpItem = dr["RepairItemName"].ToString();

                        rpSL = dr["RepairItemSlNo"].ToString();

                        serviceT = dr["ServiceType"].ToString();
                    }
                    prndtblINV.Dispose();

                    intWO = FetchWorkorderNo();

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Repair, "", Properties.Resources.Deliver, "" });

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString(), "" });

                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });

                    dtblstrm.Rows.Add(new object[] { "Ref. Invoice #", "", ParentID.ToString(), "" });

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    //if (rpDelDate != "") dtblstrm.Rows.Add(new object[] { Properties.Resources.Delivery_Date, "", rpDelDate, "" });
                    //if (rpNotfDate != "") dtblstrm.Rows.Add(new object[] { Properties.Resources.Notified_Date, "", rpDelDate, "" });

                    if (strCustCompany != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany, "" });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName, "" });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID, "" });
                    }

                    if (strCustAddress != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    if (strCustPhone != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Ph_, "", strCustPhone, "" });
                    }



                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    if (rpItem != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Repair_Item + " : " + rpItem, "", "", "" });
                    }
                    if (rpSL != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Serial + " # : " + rpSL, "", "", "" });
                    }

                    if ((rpItem != "") || (rpSL != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchRPInvDetails(ParentID);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;
                        string strFeesID = "0";
                        string strFeesText = "";

                        string TService1 = "";

                        string strrpItemTag = "";
                        string strrpItemSLNO = "";
                        string dtrpPurchaseDate = "";
                        string dtrpDeliveryDate = "";

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();
                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        TService1 = dr["ServiceType"].ToString();
                        strrpItemTag = dr["RepairItemTag"].ToString();
                        strrpItemSLNO = dr["RepairItemSLNO"].ToString();
                        if (dr["RepairItemPurchaseDate"].ToString() != "")
                            dtrpPurchaseDate = GeneralFunctions.fnDate(dr["RepairItemPurchaseDate"].ToString()).ToString("d");

                        if (dr["RepairItemDeliveryDate"].ToString() != "")
                            dtrpDeliveryDate = GeneralFunctions.fnDate(dr["RepairItemDeliveryDate"].ToString()).ToString("d");

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        dtblstrm.Rows.Add(new object[] { sPD1, "", "", "OneColumn" });

                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD2, "", "", "OneColumn" });
                        }

                        if (sPD3.Trim() != "")
                        {

                            dtblstrm.Rows.Add(new object[] { sPD3, "", "", "OneColumn" });
                        }

                        if (strPType == "M")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "" });

                            if (strMV2 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "" });
                            }
                            if (strMV3 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "" });
                            }
                        }



                        if (strrpItemSLNO != "")
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.SL + " # " + strrpItemSLNO, "", "", "" });
                        }

                        if (strrpItemTag != "")
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tag + " # " + strrpItemTag, "", "", "" });
                        }

                        if (strDiscText != "")
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                            dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "" });
                        }

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                            }
                        }

                        //dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblTotalPrice), "" });

                        dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(dblTotalPrice), "" });

                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                    dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });

                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "" });

                    if (dblDiscount != 0) // -------------- Discount ----------------
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        string strDiscountCaption = Properties.Resources.Discount;
                        dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount), "" });
                    }

                    // -------------- Tax ----------------
                    if (dblTax != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblTax1 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1), "" });

                        }
                        if (dblTax2 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2), "" });
                        }
                        if (dblTax3 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3), "" });
                        }
                    }

                    if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                    {
                        DataTable dFees = FetchInvFees();
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblFees + dblFeesCoupon != 0)
                        {
                            if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString(), "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                        if (dblFeesTax + dblFeesCouponTax != 0)
                        {
                            if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                    }


                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", GetFotmatDoubleValue(rpTotal), "B" });

                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });

                    DataTable dtbl2 = new DataTable();
                    dtbl2 = FetchRepairParentHeader(ParentID);
                    foreach (DataRow dr4 in dtbl2.Rows)
                    {
                        rpTotal = GeneralFunctions.fnDouble(dr4["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr4["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr4["RepairDueAmount"].ToString());
                        rpProb = dr4["RepairProblem"].ToString();
                        rpDesc = dr4["RepairNotes"].ToString();
                    }
                    if (rpAdvance > 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit, "", GetFotmatDoubleValue(rpAdvance), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Due, "", GetFotmatDoubleValue(rpDue), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }



                    // -------------- Total ----------------

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    if (dblTotalSale > 0)
                    {
                        //dtblstrm.Rows.Add(new object[] { SP1 + Translation.Properties.Resources.Tran_Amt_, "", GetFotmatDoubleValue(dblTotalSale), "" });
                        //dtblstrm.Rows.Add(new object[] { "", "", "", "" });

                        // --------------- Tender --------------

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });



                        DataTable prndtblINV2 = new DataTable();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                            if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                        }
                        prndtblINV2.Dispose();

                        if (rpDue - dblTempTender != 0) // --------------- Change Due --------------
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Change + " ", "", "(" + GetFotmatDoubleValue(dblTempTender - rpDue) + ")", "" });
                        }
                        else dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    //if (strCID != "0")   // -------------- gift certificate balance
                    //{
                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        DataTable dtblGC = new DataTable();
                        dtblGC = FetchActiveGC(intInvNo);
                        if (dtblGC.Rows.Count > 0)
                        {

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "" });

                            dtblstrm.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "", "" });

                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                            foreach (DataRow dr in dtblGC.Rows)
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                            }
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                        dtblGC.Dispose();
                    }
                    //}

                    DataTable dtblEBT = new DataTable();
                    dtblEBT = FetchEBTBalance(intInvNo);
                    if (dtblEBT.Rows.Count > 0)
                    {

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "" });

                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                        foreach (DataRow dr in dtblEBT.Rows)
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                        }
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }
                    dtblEBT.Dispose();

                    int prmmgc = 0;
                    PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                    obcc01mgc.Connection = SystemVariables.Conn;
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                    DataTable ccdtbl11mgc = new DataTable();
                    PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                    obcc11mgc.Connection = SystemVariables.Conn;
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                    bool mgc = false;
                    int mgcnt = 0;
                    foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                    {
                        if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                            || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                        {
                            mgcnt++;
                            if (mgcnt == 1)
                            {
                                mgc = true;
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                            dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                        }
                    }
                    if (mgc)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if (boolSCrdtTender) // Print Store Credit Balance
                    {
                        PosDataObject.POS objscrtbal = new PosDataObject.POS();
                        objscrtbal.Connection = SystemVariables.Conn;
                        double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        int prm = 0;
                        PosDataObject.POS obcc01 = new PosDataObject.POS();
                        obcc01.Connection = SystemVariables.Conn;
                        prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11 = new DataTable();
                        PosDataObject.POS obcc11 = new PosDataObject.POS();
                        obcc11.Connection = SystemVariables.Conn;
                        ccdtbl11 = obcc11.FetchCardData(prm);

                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                            if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                            if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                            if (drcc["CardType"].ToString() == "Precidia Gift Card") strCardType = "Precidia";
                            if (drcc["CardType"].ToString() == "Datacap Gift Card") strCardType = "Datacap";
                            if (drcc["CardType"].ToString() == "POSLink Gift Card") strCardType = "POSLink";
                            if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                            strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            strCardNum = drcc["RefCardAct"].ToString();
                            strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                            strCardLogo = drcc["RefCardLogo"].ToString();
                            strCardEntry = drcc["RefCardEntry"].ToString();
                            strApprovalNum = drcc["RefCardAuthID"].ToString();
                            strTranID = drcc["RefCardTranID"].ToString();
                            strApprovedAmt = drcc["RefCardAuthAmount"].ToString();

                            if (Settings.POSCardPayment == "Y")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Credit")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                            if (strCardType == "Debit")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });

                            }

                            if (strCardType == "Mercury")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Precidia")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "EBT")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }


                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ShowTipsInReceipt == "Y")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                }
                            }


                            if (strCardType == "Credit")
                            {
                                dtblstrm.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                dtblstrm.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });

                                dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                            }

                            if (strCardType == "Debit")
                            {
                                dtblstrm.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                                dtblstrm.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                            }
                        }
                    }
                    // --------------- Sign --------------


                    if (rpProb != "")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Problem + " :", "", "" });

                        string OrginalD = "";
                        ArrangeText(rpProb, 30, ref OrginalD);
                        char FindD = '\n';
                        int NumberOfOccurancesD = 0;


                        string CopyOrginalD = string.Copy(OrginalD);
                        int PlaceD = 0;
                        NumberOfOccurancesD = 0;
                        PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                        while (PlaceD != -1)
                        {
                            string cutstr = CopyOrginalD.Substring(0, PlaceD);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesD++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                            PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                            NumberOfOccurancesD++;
                        }

                        if (CopyOrginalD.Length > 30)
                        {
                            int len = CopyOrginalD.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesD++;
                                len = len - 30;
                                if (CopyOrginalD != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalD = CopyOrginalD.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesD == 0) NumberOfOccurancesD = 1;
                        else
                        {
                            if ((OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())) NumberOfOccurancesD = NumberOfOccurancesD + 1;

                        }

                        dtblstrm.Rows.Add(new object[] { rpProb, "", "", NumberOfOccurancesD.ToString() });

                    }

                    if (rpDesc != "")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "Repair :", "", "", "" });

                        string OrginalR = "";
                        ArrangeText(rpDesc, 30, ref OrginalR);
                        char FindR = '\n';
                        int NumberOfOccurancesR = 0;


                        string CopyOrginalR = string.Copy(OrginalR);
                        int PlaceR = 0;
                        NumberOfOccurancesR = 0;
                        PlaceR = CopyOrginalR.IndexOf(FindR.ToString());
                        while (PlaceR != -1)
                        {
                            string cutstr = CopyOrginalR.Substring(0, PlaceR);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesR++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalR = CopyOrginalR.Substring(PlaceR + 1);
                            PlaceR = CopyOrginalR.IndexOf(FindR.ToString());
                            NumberOfOccurancesR++;
                        }

                        if (CopyOrginalR.Length > 30)
                        {
                            int len = CopyOrginalR.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesR++;
                                len = len - 30;
                                if (CopyOrginalR != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalR = CopyOrginalR.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesR == 0) NumberOfOccurancesR = 1;
                        else
                        {
                            if ((OrginalR.Substring(0, OrginalR.Length - 2) != FindR.ToString())) NumberOfOccurancesR = NumberOfOccurancesR + 1;
                        }

                        dtblstrm.Rows.Add(new object[] { rpDesc, "", "", NumberOfOccurancesR.ToString() });
                    }

                    // --------------- Sign --------------


                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "X", "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                    dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });

                    // --------------- Sign --------------


                    // --------------- Receipt Footer --------------
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if (((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                        || ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null)))
                    {
                        string MText = "";

                        if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                            MText = Properties.Resources.CUSTOMER_AGREEMENT_ + "\n" + Settings.ReceiptFooter.Trim();

                        if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                        {
                            if (MText == "") MText = Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                            else MText = MText + "\n\n" + Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                        }

                        string OrginalF = "";
                        ArrangeText(MText, 40, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;

                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 40)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesF++;
                                len = len - 40;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm.Rows.Add(new object[] { MText, "", "", NumberOfOccurancesF.ToString() });

                    }

                    if (blCardPayment)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.CARDHOLDER_COPY, "" });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });


                    this.intPageCounter++;
                }

                if (strPrintType == "Invoice")
                {
                    dummyTest = "";
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.Training + " ", "", "B" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }



                    if ((Settings.PrintLogoInReceipt == "Y") && (!FindNewTemplate))
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }



                    // -----------------  Receipt Header ---------------

                    GetRecieptHeader();

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";

                    string strDTaxName = "";
                    double dblDTax = 0;
                    int CustomerOrderRef = 0;

                    string strCustDOB = "";

                    string strCustAddress = "";

                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        serviceT = dr["ServiceType"].ToString();

                        strDTaxName = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();
                    }

                    prndtblINV.Dispose();

                    if (CustomerOrderRef > 0)
                    {
                        string dt1 = "";
                        string dt2 = "";

                        GetCustomerOrderRef(CustomerOrderRef, ref dt1, ref dt2);

                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                        dtblstrm.Rows.Add(new object[] { dummyTest + Properties.Resources.Ref__Order + "  : ", "", CustomerOrderRef.ToString(), "" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Order_Date, "", dt1, "" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Pickup_Date, "", dt2, "" });
                    }

                    intWO = FetchWorkorderNo();
                    if (intWO > 0) // work order payment
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Work_Order_Number, "", intWO.ToString(), "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date, "", GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt"), "" });
                    }

                    if (serviceT == "Rent")
                    {
                        if (blIsRentIssued)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", Properties.Resources.Rent___Issue, "" });
                        }
                        if (blIsRentReturned)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", Properties.Resources.Rent___Return, "" });
                        }
                    }

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString(), "" });


                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    bool custinfoseparator = false;
                    if (strCustCompany != "")
                    {
                        dtblstrm.Rows.Add(new object[] { dummyTest + Properties.Resources.Company, "", strCustCompany, "" });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName, "" });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID, "" });
                    }

                    if (strCustAddress != "")
                    {
                        
                            string OrginalH = "";// Settings.TotalReceiptHeader;

                            ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                            char FindH = '\n';
                            int NumberOfOccurancesH = 0;

                            string CopyOrginalH = string.Copy(OrginalH);
                            int PlaceH = 0;

                            NumberOfOccurancesH = 0;
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            while (PlaceH != -1)
                            {
                                string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                if (cutstr.Length > 40)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 40)
                                    {
                                        NumberOfOccurancesH++;
                                        len = len - 40;
                                        if (cutstr != "")
                                        {
                                            dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                            cutstr = cutstr.Substring(40, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                    }
                                }
                                else
                                {
                                    if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                                }

                                CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                NumberOfOccurancesH++;
                            }

                            if (CopyOrginalH.Length > 40)
                            {
                                int len = CopyOrginalH.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (CopyOrginalH != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                        CopyOrginalH = CopyOrginalH.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                            }


                            if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                            else
                            {
                                if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                            }
                       
                        
                    }

                    if (strCustDOB != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth, "", GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "" });
                    }

                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != "") || (strCustDOB != ""))
                    {
                        if (!FindNewTemplate)
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        else
                        {
                            if (custinfoseparator) dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                    }


                    // Detail Header
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Unit_Price, Properties.Resources.Net_Wt_Ct, Properties.Resources.Total_Price, "" });
                    dtblstrm.Rows.Add(new object[] { "xxxx", "xxxx", "xxxx", "" });

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);

                    double dblTempTotal = 0;
                    int i = 0;

                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strFeesText = "";
                        string strFeesID = "0";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";
                        string strRentType = "";
                        double dblRentDuration = 1;
                        string dtRentEffectiveFrom = "";

                        string iQtyDecimals = "";

                        int SalePriceID = 0;
                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();

                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();

                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());

                        iQtyDecimals = dr["QtyDecimal"].ToString();

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        if (strPType == "O") dblTotalPrice = -dblTotalPrice;


                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();



                        TService1 = dr["ServiceType"].ToString();
                        strRentType = dr["RentType"].ToString();
                        dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());
                        SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                        int rnt = 0;
                        string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);



                        string rentdisplay = "";
                        if (TService1 == "Rent")
                        {
                            if (strRentType == "MI") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.min_;
                            if (strRentType == "HR") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.hr_;
                            if (strRentType == "HD") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.half_day_s_;
                            if (strRentType == "DY") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.day_s_;
                            if (strRentType == "WK") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.week_s_;
                            if (strRentType == "MN") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.month_s_;
                            dtRentEffectiveFrom = GeneralFunctions.fnDate(dr["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        }

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        if (BuyNGetFreeCategory == "B")
                        {
                            dtblstrm.Rows.Add(new object[] { "", "** " + BuyNGetFreeCaption + " **", "", "" });
                        }

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        dtblstrm.Rows.Add(new object[] { sPD1, "", "", "" });



                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD2, "", "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {

                            dtblstrm.Rows.Add(new object[] { sPD3, "", "", "" });
                        }

                        if (strPType == "M")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "" });

                            if (strMV2 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "" });
                            }
                            if (strMV3 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "" });
                            }
                        }


                        if (TService1 == "Sales")
                        {
                            if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                                || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                            {
                                if (SalePriceID == 0)
                                {
                                    if (strPType != "U")
                                    {
                                        if (dblNormalPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                    if (strPType == "U")
                                    {
                                        if (dblUOMPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                }


                                if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                                {
                                    if (strPType != "U")
                                    {
                                        if (dblNormalPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                    if (strPType == "U")
                                    {
                                        if (dblUOMPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                }

                                if (strPType == "T")
                                {
                                    if (tgininv == "Y")
                                    {
                                        PosDataObject.Product opdt = new PosDataObject.Product();
                                        opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                        DataTable dtemp = opdt.FetchTaggedData(ipid);
                                        foreach (DataRow tgdr in dtemp.Rows)
                                        {
                                            double tgQty = 0;
                                            string tgName = "";
                                            tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                            tgName = tgdr["ItemName"].ToString();
                                            tgQty = tgQty * dblQty;

                                            dtblstrm.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "", "" });
                                        }
                                        dtemp.Dispose();
                                    }
                                }
                            }
                        }

                        if (!blIsRentReturned)
                        {
                            if (strDiscText != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "" });
                            }

                            if (Settings.ShowFeesInReceipt == "Y")
                            {
                                if (strFeesText != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                                }
                            }
                        }

                        if ((TService1 == "Rent") && (blIsRentIssued))
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + rentdisplay, "", "", "" });
                            dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        }
                        if (!blIsRentReturned)
                        {
                            // For Weighted Item
                            if (strPType == "W")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()) + "/" + PUOM, GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "" });
                            }
                            else
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "" });
                                //dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice), "" });
                            }

                            if ((Settings.ScaleDevice == "(None)") && (strPType == "W"))
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Manual_Weight, "", "", "s" });
                            }
                        }
                        else
                            dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblQty), "" });


                        if (strInvNotes != "")
                        {

                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });


                        }
                    }
                    prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                    if (!blIsRentReturned)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "" });

                        if (dblDiscount != 0) // -------------- Discount ----------------
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                            string strDiscountCaption = Properties.Resources.Discount;

                            dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount), "" });
                        }

                        // -------------- Tax ----------------
                        if (dblTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                            if (!FindNewTemplate)
                            {
                                if (dblTax1 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1), "" });

                                }
                                if (dblTax2 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2), "" });
                                }
                                if (dblTax3 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3), "" });
                                }
                            }
                           
                        }

                        if (dblDTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                            if (!FindNewTemplate)
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Dest__Tax + ": " + strDTaxName, "", GetFotmatDoubleValue(dblDTax), "" });
                            }
                            
                        }


                        if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                        {
                            DataTable dFees = FetchInvFees();

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                            if (!FindNewTemplate)
                            {
                                if (dblFees + dblFeesCoupon != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString(), "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                                    if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                                }
                                if (dblFeesTax + dblFeesCouponTax != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                                    if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax + ":", "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                                }
                            }
                           
                        }

                        DataTable dtblCpn = new DataTable();
                        dtblCpn = FetchInvCoupon();

                        if (dblCoupon != 0)
                        {
                            if (!FindNewTemplate)
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket, "", GetFotmatDoubleValue(dblCoupon), "" });
                            }
                            
                        }

                        if (dtblCpn.Rows.Count > 0)
                        {
                            //dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });

                            if (!FindNewTemplate)
                            {
                                foreach (DataRow dr in dtblCpn.Rows)
                                {
                                    string strTender = "";
                                    double dblAmount = 0;

                                    strTender = dr["Name"].ToString();

                                    string sPD1 = "";
                                    string sPD2 = "";
                                    string sPD3 = "";

                                    SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);


                                    dtblstrm.Rows.Add(new object[] { SP1 + sPD1, "", "", "" });

                                    if (sPD2.Trim() != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + sPD2, "", "", "" });
                                    }

                                    if (sPD3.Trim() != "")
                                    {

                                        dtblstrm.Rows.Add(new object[] { SP1 + sPD3, "", "", "" });
                                    }


                                    dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                                    dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblAmount), "" });
                                }
                            }
                            
                        }

                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    }

                    if (serviceT == "Rent")
                    {
                        if (dblRentalSecurityDeposit > 0)
                        {
                            if (!FindNewTemplate)
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit, "", GetFotmatDoubleValue(dblRentalSecurityDeposit), "" });
                                dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                            }
                            
                        }
                    }

                    // -------------- Total ----------------


                    if (!FindNewTemplate)
                    {
                        if (serviceT != "Rent")
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale), "B" });
                        else
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale + dblRentalSecurityDeposit), "B" });
                    }
                   
                    // --------------- Tender --------------

                    bool bnewtendertemplate = false;
                    string tenderpval = "";
                    if (!FindNewTemplate)
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });
                    }
                    

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                        if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });
                        
                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });

                                
                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }
                    prndtblINV2.Dispose();


                    if (!blIsRentIssued)
                    {
                        if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                        {
                            if (!FindNewTemplate)
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Change + " ", "", "(" + GetFotmatDoubleValue(dblTempTender - dblTotalSale) + ")", "" });
                            }
                            
                        }
                        else dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    else
                    {
                        if (dblTotalSale + dblRentalSecurityDeposit - dblTempTender != 0) // --------------- Change Due --------------
                        {
                            if (!FindNewTemplate)
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Change + " ", "", "(" + GetFotmatDoubleValue(dblTempTender + dblRentalSecurityDeposit - dblTotalSale) + ")", "" });
                            }
                            
                        }
                        else dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }


                    if (!FindNewTemplate)
                    {
                        if (Settings.POSShowGiftCertBalance == "Y")
                        {
                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "" });

                                dtblstrm.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "", "" });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow dr in dtblGC.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                                }
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                            }
                            dtblGC.Dispose();
                        }

                    }
                   


                    if (!FindNewTemplate)
                    {
                        DataTable dtblEBT = new DataTable();
                        dtblEBT = FetchEBTBalance(intInvNo);
                        if (dtblEBT.Rows.Count > 0)
                        {

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "" });

                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                            foreach (DataRow dr in dtblEBT.Rows)
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                            }
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                        dtblEBT.Dispose();

                    }
                    







                    if (!FindNewTemplate)
                    {

                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        bool mgc = false;
                        int mgcnt = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                        {
                            if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                            {
                                mgcnt++;
                                if (mgcnt == 1)
                                {
                                    mgc = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }






                        int prmebt = 0;
                        PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                        obcc01mgc33.Connection = SystemVariables.Conn;
                        prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc3 = new DataTable();
                        PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                        obcc11mgc55.Connection = SystemVariables.Conn;
                        ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                        bool mgc4 = false;
                        int mgcnt4 = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                        {
                            if (drmgc["CardType"].ToString() == "Food Stamps")
                            {
                                mgcnt4++;
                                if (mgcnt4 == 1)
                                {
                                    mgc4 = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc4)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                    }
                   








                    if (boolHATender)
                    {
                        if (!FindNewTemplate)
                        {
                            if ((Settings.HouseAccountBalanceInReceipt == "Y"))
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                        }
                        
                    }



                    if (boolSCrdtTender) // Print Store Credit Balance
                    {
                        if (!FindNewTemplate)
                        {
                            PosDataObject.POS objscrtbal = new PosDataObject.POS();
                            objscrtbal.Connection = SystemVariables.Conn;
                            double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        
                    }










                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        int prm = 0;
                        PosDataObject.POS obcc01 = new PosDataObject.POS();
                        obcc01.Connection = SystemVariables.Conn;
                        prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11 = new DataTable();
                        PosDataObject.POS obcc11 = new PosDataObject.POS();
                        obcc11.Connection = SystemVariables.Conn;
                        ccdtbl11 = obcc11.FetchCardData(prm);


                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                            if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                            if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                            if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                            strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            strCardNum = drcc["RefCardAct"].ToString();
                            strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                            strCardLogo = drcc["RefCardLogo"].ToString();
                            strCardEntry = drcc["RefCardEntry"].ToString();
                            strApprovalNum = drcc["RefCardAuthID"].ToString();
                            strTranID = drcc["RefCardTranID"].ToString();
                            strApprovedAmt = drcc["RefCardAuthAmount"].ToString();

                            if (!FindNewTemplate)
                            {
                                if (Settings.POSCardPayment == "Y")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "Credit")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }
                                if (strCardType == "Debit")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                                }

                                if (strCardType == "Mercury")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "Precidia")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "EBT")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }
                            }
                            
                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ShowTipsInReceipt == "Y")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                }
                            }


                            if (strCardType == "Credit")
                            {
                                if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                    || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                    ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                     || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                    || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                {
                                    if (!FindNewTemplate)
                                    {
                                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    }
                                    

                                    if (!FindNewTemplate)
                                    {

                                        dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                        dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                                    }
                                    
                                }
                            }

                            if (strCardType == "Debit")
                            {
                                if (!FindNewTemplate)
                                {
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                                }
                                
                                if (!FindNewTemplate)
                                {
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                                }
                                
                            }
                        }
                    }
                    // --------------- Sign --------------

                    // --------------- Receipt Footer --------------
                    if (!FindNewTemplate)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    

                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        if (!FindNewTemplate)
                        {
                            string OrginalF = "";
                            ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                            char FindF = '\n';
                            int NumberOfOccurancesF = 0;


                            string CopyOrginalF = string.Copy(OrginalF);
                            int PlaceF = 0;
                            NumberOfOccurancesF = 0;
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            while (PlaceF != -1)
                            {
                                string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                }

                                CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                NumberOfOccurancesF++;
                            }

                            if (CopyOrginalF.Length > 30)
                            {
                                int len = CopyOrginalF.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (CopyOrginalF != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                        CopyOrginalF = CopyOrginalF.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                            }



                            if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                            else
                            {
                                if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                            }

                            dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                        }
                        
                    }

                    if (blCardPayment)
                    {
                        if (!FindNewTemplate)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                            dtblstrm.Rows.Add(new object[] { "", Properties.Resources.CARDHOLDER_COPY, "" });
                        }
                        
                    }

                    if (!FindNewTemplate)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                    }
                    


                    

                    this.intPageCounter++;




                }


                if (strPrintType == "Preview Invoice_Orig_Before_Change")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.Training + " ", "", "B" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    DataTable prndtblINV = new DataTable();

                    string invNumber = "";
                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";

                    string strDTaxName = "";
                    double dblDTax = 0;
                    int CustomerOrderRef = 0;

                    string strCustDOB = "";

                    string strCustAddress = "";

                    prndtblINV = dtblPreviewInvoiceHeader;

                    strTransDate = GeneralFunctions.fnDate(DateTime.Now).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");

                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        invNumber = dr["InvoiceNo"].ToString();
                        //intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                        stermnl = dr["Terminal"].ToString();
                        //intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        //strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt"); ****
                        strDiscountReason = dr["DiscountReason"].ToString();
                        //strTaxName1 = dr["TaxNM1"].ToString();
                        //strTaxName2 = dr["TaxNM2"].ToString();
                        //strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        //dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        //dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        //dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        serviceT = dr["ServiceType"].ToString();

                        //strDTaxName = dr["DTaxName"].ToString();
                        //dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        //CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        //strCustDOB = dr["CustomerDOB"].ToString();
                    }

                    prndtblINV.Dispose();

                    /*
                    if (CustomerOrderRef > 0)
                    {
                        string dt1 = "";
                        string dt2 = "";

                        GetCustomerOrderRef(CustomerOrderRef, ref dt1, ref dt2);

                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Ref__Order + "  : ", "", CustomerOrderRef.ToString(), "" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Order_Date, "", dt1, "" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Pickup_Date, "", dt2, "" });
                    }*/

                    /*
                    intWO = FetchWorkorderNo();
                    if (intWO > 0) // work order payment
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Work_Order_Number, "", intWO.ToString(), "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date, "", GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt"), "" });
                    }*/

                    if (serviceT == "Rent")
                    {
                        if (blIsRentIssued) dtblstrm.Rows.Add(new object[] { "", "", Properties.Resources.Rent___Issue, "" });
                        if (blIsRentReturned) dtblstrm.Rows.Add(new object[] { "", "", Properties.Resources.Rent___Return, "" });
                    }

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", invNumber.ToString(), "" });


                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    if (strCustCompany != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany, "" });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName, "" });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID, "" });
                    }

                    if (strCustAddress != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    /*
                    if (strCustDOB != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth, "", GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "" });
                    }
                    */
                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != "") || (strCustDOB != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }



                    // Detail Header
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Unit_Price, Properties.Resources.Net_Wt_Ct, Properties.Resources.Total_Price, "" });
                    dtblstrm.Rows.Add(new object[] { "xxxx", "xxxx", "xxxx", "" });

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = dtblPreviewInvoiceDetails;

                    double dblTempTotal = 0;
                    int i = 0;

                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strFeesText = "";
                        string strFeesID = "0";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";
                        string strRentType = "";
                        double dblRentDuration = 1;
                        string dtRentEffectiveFrom = "";

                        string iQtyDecimals = "";

                        int SalePriceID = 0;
                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();

                        //ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString()); ****
                        //tgininv = dr["TaggedInInvoice"].ToString(); ****
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();

                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();

                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());

                        //iQtyDecimals = dr["QtyDecimal"].ToString(); ****

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        if (strPType == "O") dblTotalPrice = -dblTotalPrice;


                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();



                        TService1 = dr["ServiceType"].ToString();

                        //strRentType = dr["RentType"].ToString();  ****

                        dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());
                        SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                        int rnt = 0;
                        string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);



                        string rentdisplay = "";
                        if (TService1 == "Rent")
                        {
                            if (strRentType == "MI") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.min_;
                            if (strRentType == "HR") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.hr_;
                            if (strRentType == "HD") rentdisplay = Properties.Resources._for + " " + rntvl + " " +
     Properties.Resources.half_day_s_;
                            if (strRentType == "DY") rentdisplay = Properties.Resources._for + " " + rntvl + " " +
     Properties.Resources.day_s_;
                            if (strRentType == "WK") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.week_s_;
                            if (strRentType == "MN") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.month_s_;
                            dtRentEffectiveFrom = GeneralFunctions.fnDate(dr["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        }

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        if (BuyNGetFreeCategory == "B")
                        {
                            dtblstrm.Rows.Add(new object[] { "", "** " + BuyNGetFreeCaption + " **", "", "" });
                        }

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        dtblstrm.Rows.Add(new object[] { sPD1, "", "", "" });



                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD2, "", "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {

                            dtblstrm.Rows.Add(new object[] { sPD3, "", "", "" });
                        }

                        if (strPType == "M")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "" });

                            if (strMV2 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "" });
                            }
                            if (strMV3 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "" });
                            }
                        }


                        if (TService1 == "Sales")
                        {
                            if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                                || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                            {
                                if (SalePriceID == 0)
                                {
                                    if (strPType != "U")
                                    {
                                        if (dblNormalPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                    if (strPType == "U")
                                    {
                                        if (dblUOMPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                }


                                if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                                {
                                    if (strPType != "U")
                                    {
                                        if (dblNormalPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                    if (strPType == "U")
                                    {
                                        if (dblUOMPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                }

                                /*                          *******
                                if (strPType == "T")
                                {
                                    if (tgininv == "Y")
                                    {
                                        PosDataObject.Product opdt = new PosDataObject.Product();
                                        opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                        DataTable dtemp = opdt.FetchTaggedData(ipid);
                                        foreach (DataRow tgdr in dtemp.Rows)
                                        {
                                            double tgQty = 0;
                                            string tgName = "";
                                            tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                            tgName = tgdr["ItemName"].ToString();
                                            tgQty = tgQty * dblQty;

                                            dtblstrm.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "", "" });
                                        }
                                        dtemp.Dispose();
                                    }
                                }*/
                            }
                        }

                        if (!blIsRentReturned)
                        {
                            if (strDiscText != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "" });
                            }

                            if (Settings.ShowFeesInReceipt == "Y")
                            {
                                if (strFeesText != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                                }
                            }
                        }

                        if ((TService1 == "Rent") && (blIsRentIssued))
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + rentdisplay, "", "", "" });
                            dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        }
                        if (!blIsRentReturned)
                        {
                            // For Weighted Item
                            if (strPType == "W")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()) + "/" + PUOM, GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "" });
                            }
                            else
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "" });
                                //dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice), "" });
                            }

                            if ((Settings.ScaleDevice == "(None)") && (strPType == "W"))
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Manual_Weight, "", "", "s" });
                            }
                        }
                        else
                            dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblQty), "" });


                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }
                    }
                    prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                    if (!blIsRentReturned)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "" });

                        if (dblDiscount != 0) // -------------- Discount ----------------
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                            string strDiscountCaption = Properties.Resources.Discount;
                            dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount), "" });
                        }

                        // -------------- Tax ----------------
                        if (dblTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                            foreach (DataRow drTx in dtblPreviewTaxDetails.Rows)
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + drTx["Tax"].ToString().Substring(0, drTx["Tax"].ToString().LastIndexOf("(")), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drTx["Amount"].ToString())), "" });
                            }

                        }

                        if (dblDTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Dest__Tax + ": " + strDTaxName, "", GetFotmatDoubleValue(dblDTax), "" });
                        }


                        if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                        {
                            DataTable dFees = FetchInvFees();

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                            if (dblFees + dblFeesCoupon != 0)
                            {
                                if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString(), "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                                if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            }
                            if (dblFeesTax + dblFeesCouponTax != 0)
                            {
                                if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                                if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax + ":", "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            }
                        }

                        DataTable dtblCpn = new DataTable();
                        //dtblCpn = FetchInvCoupon();          *******

                        if (dblCoupon != 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket, "", GetFotmatDoubleValue(dblCoupon), "" });

                        if (dtblCpn.Rows.Count > 0)
                        {
                            //dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });

                            foreach (DataRow dr in dtblCpn.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr["Name"].ToString();

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm.Rows.Add(new object[] { SP1 + sPD1, "", "", "" });

                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + sPD2, "", "", "" });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm.Rows.Add(new object[] { SP1 + sPD3, "", "", "" });
                                }


                                dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                                dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblAmount), "" });
                            }
                        }

                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    }

                    if (serviceT == "Rent")
                    {
                        if (dblRentalSecurityDeposit > 0)
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit, "", GetFotmatDoubleValue(dblRentalSecurityDeposit), "" });
                            dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        }
                    }

                    // -------------- Total ----------------

                    if (serviceT != "Rent")
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale), "B" });
                    else
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale + dblRentalSecurityDeposit), "B" });




                    // --------------- Receipt Footer --------------


                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });

                    }

                    /*
                    if (blCardPayment)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.CARDHOLDER_COPY, "" });
                    }*/

                    //dtblstrm.Rows.Add(new object[] { "", "", "" });
                    //dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });

                    this.intPageCounter++;




                }

                if (strPrintType == "Preview Invoice")
                {
                    dummyTest = "";
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.Training + " ", "", "B" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    GetRecieptHeader();

                    DataTable prndtblINV = new DataTable();

                    string invNumber = "";
                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";

                    string strDTaxName = "";
                    double dblDTax = 0;
                    int CustomerOrderRef = 0;

                    string strCustDOB = "";

                    string strCustAddress = "";

                    prndtblINV = dtblPreviewInvoiceHeader;

                    strTransDate = GeneralFunctions.fnDate(DateTime.Now).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");

                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        invNumber = dr["InvoiceNo"].ToString();
                        //intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                        stermnl = dr["Terminal"].ToString();
                        //intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        //strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt"); ****
                        strDiscountReason = dr["DiscountReason"].ToString();
                        //strTaxName1 = dr["TaxNM1"].ToString();
                        //strTaxName2 = dr["TaxNM2"].ToString();
                        //strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        //dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        //dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        //dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        serviceT = dr["ServiceType"].ToString();

                        //strDTaxName = dr["DTaxName"].ToString();
                        //dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        //CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        //strCustDOB = dr["CustomerDOB"].ToString();
                    }

                    prndtblINV.Dispose();

                    /*
                    if (CustomerOrderRef > 0)
                    {
                        string dt1 = "";
                        string dt2 = "";

                        GetCustomerOrderRef(CustomerOrderRef, ref dt1, ref dt2);

                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Ref__Order + "  : ", "", CustomerOrderRef.ToString(), "" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Order_Date, "", dt1, "" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Pickup_Date, "", dt2, "" });
                    }*/

                    /*
                    intWO = FetchWorkorderNo();
                    if (intWO > 0) // work order payment
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Work_Order_Number, "", intWO.ToString(), "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date, "", GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt"), "" });
                    }*/

                    if (serviceT == "Rent")
                    {
                        if (blIsRentIssued) dtblstrm.Rows.Add(new object[] { "", "", Properties.Resources.Rent___Issue, "" });
                        if (blIsRentReturned) dtblstrm.Rows.Add(new object[] { "", "", Properties.Resources.Rent___Return, "" });
                    }

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    dtblstrm.Rows.Add(new object[] { dummyTest + Properties.Resources.Receipt_Number, "", invNumber.ToString(), "" });


                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    if (strCustCompany != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany, "" });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName, "" });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID, "" });
                    }

                    if (strCustAddress != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText(dummyTest + "Address: " + strCustAddress, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    /*
                    if (strCustDOB != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth, "", GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "" });
                    }
                    */
                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != "") || (strCustDOB != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }



                    // Detail Header
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Unit_Price, Properties.Resources.Net_Wt_Ct, Properties.Resources.Total_Price, "" });
                    dtblstrm.Rows.Add(new object[] { "xxxx", "xxxx", "xxxx", "" });

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = dtblPreviewInvoiceDetails;

                    double dblTempTotal = 0;
                    int i = 0;

                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strFeesText = "";
                        string strFeesID = "0";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";
                        string strRentType = "";
                        double dblRentDuration = 1;
                        string dtRentEffectiveFrom = "";

                        string iQtyDecimals = "";

                        int SalePriceID = 0;
                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();

                        //ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString()); ****
                        //tgininv = dr["TaggedInInvoice"].ToString(); ****
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();

                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();

                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());

                        //iQtyDecimals = dr["QtyDecimal"].ToString(); ****

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        if (strPType == "O") dblTotalPrice = -dblTotalPrice;


                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();



                        TService1 = dr["ServiceType"].ToString();

                        //strRentType = dr["RentType"].ToString();  ****

                        dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());
                        SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                        int rnt = 0;
                        string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);



                        string rentdisplay = "";
                        if (TService1 == "Rent")
                        {
                            if (strRentType == "MI") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.min_;
                            if (strRentType == "HR") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.hr_;
                            if (strRentType == "HD") rentdisplay = Properties.Resources._for + " " + rntvl + " " +
     Properties.Resources.half_day_s_;
                            if (strRentType == "DY") rentdisplay = Properties.Resources._for + " " + rntvl + " " +
     Properties.Resources.day_s_;
                            if (strRentType == "WK") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.week_s_;
                            if (strRentType == "MN") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.month_s_;
                            dtRentEffectiveFrom = GeneralFunctions.fnDate(dr["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        }

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        if (BuyNGetFreeCategory == "B")
                        {
                            dtblstrm.Rows.Add(new object[] { "", "** " + BuyNGetFreeCaption + " **", "", "" });
                        }

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        dtblstrm.Rows.Add(new object[] { sPD1, "", "", "" });



                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD2, "", "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {

                            dtblstrm.Rows.Add(new object[] { sPD3, "", "", "" });
                        }

                        if (strPType == "M")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "" });

                            if (strMV2 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "" });
                            }
                            if (strMV3 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "" });
                            }
                        }


                        if (TService1 == "Sales")
                        {
                            if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                                || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                            {
                                if (SalePriceID == 0)
                                {
                                    if (strPType != "U")
                                    {
                                        if (dblNormalPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                    if (strPType == "U")
                                    {
                                        if (dblUOMPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                }


                                if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                                {
                                    if (strPType != "U")
                                    {
                                        if (dblNormalPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                    if (strPType == "U")
                                    {
                                        if (dblUOMPrice - dblPrice > 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "" });
                                        }
                                    }
                                }

                                /*                          *******
                                if (strPType == "T")
                                {
                                    if (tgininv == "Y")
                                    {
                                        PosDataObject.Product opdt = new PosDataObject.Product();
                                        opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                        DataTable dtemp = opdt.FetchTaggedData(ipid);
                                        foreach (DataRow tgdr in dtemp.Rows)
                                        {
                                            double tgQty = 0;
                                            string tgName = "";
                                            tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                            tgName = tgdr["ItemName"].ToString();
                                            tgQty = tgQty * dblQty;

                                            dtblstrm.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "", "" });
                                        }
                                        dtemp.Dispose();
                                    }
                                }*/
                            }
                        }

                        if (!blIsRentReturned)
                        {
                            if (strDiscText != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "" });
                            }

                            if (Settings.ShowFeesInReceipt == "Y")
                            {
                                if (strFeesText != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                                }
                            }
                        }

                        if ((TService1 == "Rent") && (blIsRentIssued))
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + rentdisplay, "", "", "" });
                            dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        }
                        if (!blIsRentReturned)
                        {
                            // For Weighted Item
                            if (strPType == "W")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()) + "/" + PUOM, GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "" });
                            }
                            else
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "" });
                                //dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice), "" });
                            }

                            if ((Settings.ScaleDevice == "(None)") && (strPType == "W"))
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Manual_Weight, "", "", "s" });
                            }
                        }
                        else
                            dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblQty), "" });


                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }
                    }
                    prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                    if (!blIsRentReturned)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "" });

                        if (dblDiscount != 0) // -------------- Discount ----------------
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                            string strDiscountCaption = Properties.Resources.Discount;
                            dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount), "" });
                        }

                        // -------------- Tax ----------------
                        if (dblTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                            foreach (DataRow drTx in dtblPreviewTaxDetails.Rows)
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + drTx["Tax"].ToString().Substring(0, drTx["Tax"].ToString().LastIndexOf("(")), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drTx["Amount"].ToString())), "" });
                            }

                        }

                        if (dblDTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Dest__Tax + ": " + strDTaxName, "", GetFotmatDoubleValue(dblDTax), "" });
                        }


                        if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                        {
                            DataTable dFees = FetchInvFees();

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                            if (dblFees + dblFeesCoupon != 0)
                            {
                                if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString(), "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                                if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            }
                            if (dblFeesTax + dblFeesCouponTax != 0)
                            {
                                if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                                if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax + ":", "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            }
                        }

                        DataTable dtblCpn = new DataTable();
                        //dtblCpn = FetchInvCoupon();          *******

                        if (dblCoupon != 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket, "", GetFotmatDoubleValue(dblCoupon), "" });

                        if (dtblCpn.Rows.Count > 0)
                        {
                            //dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });

                            foreach (DataRow dr in dtblCpn.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr["Name"].ToString();

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm.Rows.Add(new object[] { SP1 + sPD1, "", "", "" });

                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + sPD2, "", "", "" });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm.Rows.Add(new object[] { SP1 + sPD3, "", "", "" });
                                }


                                dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                                dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblAmount), "" });
                            }
                        }

                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    }

                    if (serviceT == "Rent")
                    {
                        if (dblRentalSecurityDeposit > 0)
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit, "", GetFotmatDoubleValue(dblRentalSecurityDeposit), "" });
                            dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        }
                    }

                    // -------------- Total ----------------

                    if (serviceT != "Rent")
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale), "B" });
                    else
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale + dblRentalSecurityDeposit), "B" });




                    // --------------- Receipt Footer --------------


                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });

                    }

                    /*
                    if (blCardPayment)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.CARDHOLDER_COPY, "" });
                    }*/

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });

                    this.intPageCounter++;




                }


                if (strPrintType == "Reprint Receipt")
                {
                    dummyTest = "";
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace3);


                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.Training + " ", "", "B" });
                        dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if (!blIsVoid)
                        dtblstrm.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Receipt + ": " + intReprintCnt.ToString() + " *", "" });
                    else
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.VOIDED, "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    GetRecieptHeader();

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCustID = "";
                    string strCID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;
                    double dblCoupon = 0;
                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    string strDTaxName = "";
                    double dblDTax = 0;

                    int CustomerOrderRef = 0;

                    string strCustDOB = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        strDTaxName = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();
                    }
                    prndtblINV.Dispose();


                    if (CustomerOrderRef > 0)
                    {
                        string dt1 = "";
                        string dt2 = "";

                        GetCustomerOrderRef(CustomerOrderRef, ref dt1, ref dt2);
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Ref__Order + "  : ", "", CustomerOrderRef.ToString(), "" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Order_Date, "", dt1, "" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Pickup_Date, "", dt2, "" });
                    }

                    intWO = FetchWorkorderNo();
                    if (intWO > 0) // work order payment
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Work_Order_Number, "", intWO.ToString() });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date, "", GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt") });
                    }

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString() });

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    if (strCustCompany != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                    }

                    if (strCustAddress != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText("Address:" + strCustAddress, 40, ref OrginalH);
                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    if (strCustDOB != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth, "", GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "" });
                    }

                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != "") || (strCustDOB != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    }


                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;

                    // Detail Header
                    dtblstrm.Rows.Add(new object[] {
                     Properties.Resources.Unit_Price,
                     Properties.Resources.Net_Wt_Ct,
                     Properties.Resources.Total_Price, "" });
                    dtblstrm.Rows.Add(new object[] { "xxxx", "xxxx", "xxxx", "" });

                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        string strDiscText = "";
                        double dblDisc = 0;
                        string strDescription = "";
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";

                        string strFeesID = "0";
                        string strFeesText = "";
                        int SalePriceID = 0;
                        string iQtyDecimals = "";
                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        int ipid = 0;
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();

                        strSKU = dr["SKU"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();

                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        iQtyDecimals = dr["QtyDecimal"].ToString();

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        if (strPType == "O") dblTotalPrice = -dblTotalPrice;

                        strDiscText = dr["DiscountText"].ToString();
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";
                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                        if (BuyNGetFreeCategory == "B")
                        {
                            dtblstrm.Rows.Add(new object[] { "", "** " + BuyNGetFreeCaption + " **", "" });
                        }
                        dtblstrm.Rows.Add(new object[] { sPD1, "", "" });

                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD2, "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD3, "", "" });
                        }


                        if (strPType == "M")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "" });
                            if (strMV2 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                            }
                            if (strMV3 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                            }
                        }

                        if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                            || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                        {
                            if (SalePriceID == 0)
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                    }
                                }
                            }

                            if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                    }
                                }
                            }

                            if (strPType == "T")
                            {
                                if (tgininv == "Y")
                                {
                                    PosDataObject.Product opdt = new PosDataObject.Product();
                                    opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                    DataTable dtemp = opdt.FetchTaggedData(ipid);
                                    foreach (DataRow tgdr in dtemp.Rows)
                                    {
                                        double tgQty = 0;
                                        string tgName = "";
                                        tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                        tgName = tgdr["ItemName"].ToString();
                                        tgQty = tgQty * dblQty;

                                        dtblstrm.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "" });
                                    }
                                    dtemp.Dispose();
                                }
                            }
                        }

                        if (strDiscText != "")
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "" });
                        }

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                            }
                        }

                        if (strPType == "W")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()) + "/" + PUOM, GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "" });
                        }
                        else
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "" });
                        }

                        if ((Settings.ScaleDevice == "(None)") && (strPType == "W"))
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Manual_Weight, "", "", "s" });
                        }

                        //dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP),  GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice) });

                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }
                    }

                    prndtblINV1.Dispose();



                    // -------------- Sub Total ----------------

                    dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax) });

                    if (dblDiscount != 0) // -------------- Discount ----------------
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        string strDiscountCaption = Properties.Resources.Discount;
                        dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount) });
                    }

                    // -------------- Tax ----------------
                    if (dblTax != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        if (dblTax1 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1) });
                        }
                        if (dblTax2 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2) });
                        }
                        if (dblTax3 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3) });
                        }
                    }

                    if (dblDTax != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Dest__Tax + ": " + strDTaxName, "", GetFotmatDoubleValue(dblDTax), "" });
                    }




                    if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                    {
                        DataTable dFees = FetchInvFees();
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblFees + dblFeesCoupon != 0)
                        {
                            if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString(), "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                        if (dblFeesTax + dblFeesCouponTax != 0)
                        {
                            if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                    }

                    if (dblCoupon != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket, "", GetFotmatDoubleValue(dblCoupon), "" });
                    }
                    DataTable dtblCpn = new DataTable();
                    dtblCpn = FetchInvCoupon();
                    if (dtblCpn.Rows.Count > 0)
                    {
                        //dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        //dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });

                        foreach (DataRow dr in dtblCpn.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["Name"].ToString();

                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";

                            SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);

                            dtblstrm.Rows.Add(new object[] { SP1 + sPD1, "", "", "" });

                            if (sPD2.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + sPD2, "", "", "" });
                            }

                            if (sPD3.Trim() != "")
                            {

                                dtblstrm.Rows.Add(new object[] { SP1 + sPD3, "", "", "" });
                            }


                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblAmount), "" });
                        }
                    }

                    dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });

                    // -------------- Total ----------------

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale), "B" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // --------------- Tender --------------

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });
                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + dblAmount);
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;
                        dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }
                    prndtblINV2.Dispose();

                    if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                    {
                        dtblstrm.Rows.Add(new object[] { SP1 + "Change", "", "(" + GetFotmatDoubleValue(dblTempTender - dblTotalSale) + ")" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    else
                        dtblstrm.Rows.Add(new object[] { "", "", "" });

                    //if (strCID != "0")  // -------------- gift certificate balance
                    //{
                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        DataTable dtblGC = new DataTable();
                        dtblGC = FetchActiveGC(intInvNo);
                        if (dtblGC.Rows.Count > 0)
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "" });

                            dtblstrm.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "" });

                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                            foreach (DataRow dr in dtblGC.Rows)
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "xxx", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())) });
                            }
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                        dtblGC.Dispose();
                    }
                    //}

                    DataTable dtblEBT = new DataTable();
                    dtblEBT = FetchEBTBalance(intInvNo);
                    if (dtblEBT.Rows.Count > 0)
                    {

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "" });

                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                        foreach (DataRow dr in dtblEBT.Rows)
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                        }
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }
                    dtblEBT.Dispose();

                    int prmmgc = 0;
                    PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                    obcc01mgc.Connection = SystemVariables.Conn;
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                    DataTable ccdtbl11mgc = new DataTable();
                    PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                    obcc11mgc.Connection = SystemVariables.Conn;
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                    bool mgc = false;
                    int mgcnt = 0;
                    foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                    {
                        if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                            || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                        {
                            mgcnt++;
                            if (mgcnt == 1)
                            {
                                mgc = true;
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                            dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                        }
                    }
                    if (mgc)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if (boolSCrdtTender) // Print Store Credit Balance
                    {
                        PosDataObject.POS objscrtbal = new PosDataObject.POS();
                        objscrtbal.Connection = SystemVariables.Conn;
                        double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if (blIsVoid)
                    {
                        if (blCardPayment)
                        {
                            DataTable ccdtbl11 = new DataTable();
                            PosDataObject.POS obcc11 = new PosDataObject.POS();
                            obcc11.Connection = SystemVariables.Conn;
                            ccdtbl11 = obcc11.FetchVoidCardData(intInvNo);


                            foreach (DataRow drcc in ccdtbl11.Rows)
                            {
                                if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                strCardNum = drcc["RefCardAct"].ToString();
                                strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                strCardLogo = drcc["RefCardLogo"].ToString();
                                strCardEntry = drcc["RefCardEntry"].ToString();
                                strApprovalNum = drcc["RefCardAuthID"].ToString();
                                strTranID = drcc["RefCardTranID"].ToString();
                                strApprovedAmt = drcc["RefCardAuthAmount"].ToString();
                                string voidRef = drcc["Reference"].ToString();
                                if (Settings.POSCardPayment == "Y")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.VOID_AMOUNT, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.REFERENCE + " : ", "", voidRef });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                        }
                    }

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        dtblstrm.Rows.Add(new object[] { "", "", "  " + Properties.Resources.S_I_G_N_A_T_U_R_E + "     " });
                    }
                    // --------------- Sign --------------
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                        }

                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                    }
                    else dtblstrm.Rows.Add(new object[] { "", "", "" });

                    if (!blIsVoid)
                        dtblstrm.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Receipt + ": " + intReprintCnt.ToString() + " *", "" });
                    //else
                    //dtblstrm.Rows.Add(new object[] { "","* " + Properties.Resources.Reprinted_Void_Receipt + " " + intReprintCnt.ToString() + " *", "" });

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });

                    //this.intPageCounter++;
                }


                if (strPrintType == "Layaway")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace2);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    GetRecieptHeader();

                    if (blIsLayawayRefund)
                    {
                        dtblstrm.Rows.Add(new object[] { "Layaway Cancellation", "", "" });
                    }



                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";
                    string strLayawayDueDate = "";
                    int intLayInvNo = 0;

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string strLayawayStatus = "";

                    prndtblINV = FetchLayawayHeader(false);
                    int invcount = 0;
                    double dblTotalLayawaySale = 0;
                    double dblTotalLayawayPayment = 0;
                    double dblTotalLayawayBalance = 0;
                    int intPrevLayNo = 0;
                    int distinctlayway = 1;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblDTax = 0;
                    string custAddr = "";

                    foreach (DataRow dr in prndtblINV.Rows)
                    {


                        invcount++;

                        intLayNo = GeneralFunctions.fnInt32(dr["LayawayNo"].ToString());
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        intLayInvNo = GeneralFunctions.fnInt32(dr["InvoiceNo"].ToString());
                        strLayawayDueDate = GeneralFunctions.fnDate(dr["DateDue"].ToString()).ToString("d");
                        strLayawayStatus = dr["LayawayStatus"].ToString();

                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        intInvNo = intLayInvNo;

                        custAddr = FetchCustomerAddress(GeneralFunctions.fnInt32(strCID));

                        if (strLayawayStatus == "3")
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intLayInvNo.ToString() });
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }
                        else
                        {
                            if ((intPrevLayNo == 0) || (intPrevLayNo != intLayNo))
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Layaway_Number, "", intLayNo.ToString() });
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                        }

                        if (invcount == 1)
                        {



                            if (strCustName != "")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                            }

                            if (strCustID != "")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                            }

                            if (custAddr != "")
                            {
                                string OrginalH = ""; // Settings.TotalReceiptHeader;
                                ArrangeText(custAddr, 26, ref OrginalH);

                                char FindH = '\n';
                                int NumberOfOccurancesH = 0;

                                string CopyOrginalH = string.Copy(OrginalH);
                                int PlaceH = 0;

                                NumberOfOccurancesH = 0;
                                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                while (PlaceH != -1)
                                {
                                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                    if (cutstr.Length > 26)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 26)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 26;
                                            if (cutstr != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(26, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    NumberOfOccurancesH++;
                                }

                                if (CopyOrginalH.Length > 26)
                                {
                                    int len = CopyOrginalH.Length;
                                    while (len >= 26)
                                    {
                                        NumberOfOccurancesH++;
                                        len = len - 26;
                                        if (CopyOrginalH != "")
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                            CopyOrginalH = CopyOrginalH.Substring(26, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                                }


                                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                else
                                {
                                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                }
                            }

                            if ((custAddr != "") || (strCustName != "") || (strCustID != ""))
                            {
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                        }


                        DataTable prndtblINV1 = new DataTable();
                        prndtblINV1 = FetchInvDetails(dblTotalSale);
                        double dblTempTotal = 0;
                        foreach (DataRow drL in prndtblINV1.Rows)
                        {
                            string strDescription = "";
                            string strPType = "";
                            string strMV1 = "";
                            string strMV2 = "";
                            string strMV3 = "";
                            string strSKU = "";
                            double dblPrice = 0;
                            double dblQty = 0;
                            double dblTotalPrice = 0;
                            string strDP = "";
                            double dblNormalPrice = 0;
                            double dblUOMPrice = 0;
                            string tgininv = "";
                            string strDiscText = "";
                            double dblDisc = 0;
                            int ipid = 0;
                            string txapp1 = "N";
                            string txapp2 = "N";
                            string txapp3 = "N";
                            double tx1 = 0;
                            double tx2 = 0;
                            double tx3 = 0;
                            double linetx = 0;
                            double lineprice = 0;
                            int tx1ty = 0;
                            int tx2ty = 0;
                            int tx3ty = 0;
                            double tDTax = 0;
                            double tFees = 0;
                            double tFeesTax = 0;
                            tDTax = GeneralFunctions.fnDouble(drL["DTax"].ToString());
                            tFees = GeneralFunctions.fnDouble(drL["Fees"].ToString());
                            tFeesTax = GeneralFunctions.fnDouble(drL["FeesTax"].ToString());
                            dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                            lineprice = dblTotalPrice;

                            txapp1 = drL["Taxable1"].ToString();
                            txapp2 = drL["Taxable2"].ToString();
                            txapp3 = drL["Taxable3"].ToString();
                            tx1 = GeneralFunctions.fnDouble(drL["TaxRate1"].ToString());
                            tx2 = GeneralFunctions.fnDouble(drL["TaxRate2"].ToString());
                            tx3 = GeneralFunctions.fnDouble(drL["TaxRate3"].ToString());

                            tx1ty = GeneralFunctions.fnInt32(drL["TaxType1"].ToString());
                            tx2ty = GeneralFunctions.fnInt32(drL["TaxType2"].ToString());
                            tx3ty = GeneralFunctions.fnInt32(drL["TaxType3"].ToString());

                            if ((txapp1 == "Y") || (txapp2 == "Y") || (txapp3 == "Y"))
                            {
                                if (txapp1 == "Y")
                                {
                                    linetx = (tx1ty == 0) ? GeneralFunctions.FormatDouble(lineprice * tx1 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal1"].ToString()));
                                }

                                if (txapp2 == "Y")
                                {
                                    linetx = (tx2ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx2 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal2"].ToString()));
                                }

                                if (txapp3 == "Y")
                                {
                                    linetx = (tx3ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx3 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal3"].ToString()));
                                }
                            }

                            ipid = GeneralFunctions.fnInt32(drL["ProductID"].ToString());
                            tgininv = drL["TaggedInInvoice"].ToString();
                            strDescription = drL["Description"].ToString();
                            strPType = drL["ProductType"].ToString();
                            strMV1 = drL["MOP1"].ToString();
                            strMV2 = drL["MOP2"].ToString();
                            strMV3 = drL["MOP3"].ToString();

                            strSKU = drL["SKU"].ToString();
                            dblPrice = GeneralFunctions.fnDouble(drL["Price"].ToString());
                            dblQty = GeneralFunctions.fnDouble(drL["Qty"].ToString());

                            dblNormalPrice = GeneralFunctions.fnDouble(drL["NormalPrice"].ToString());
                            dblUOMPrice = GeneralFunctions.fnDouble(drL["UOMPrice"].ToString());
                            strDiscText = drL["DiscountText"].ToString();
                            dblDisc = GeneralFunctions.fnDouble(drL["Discount"].ToString());
                            dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                            strDP = drL["DP"].ToString();

                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                            dtblstrm.Rows.Add(new object[] { sPD1, "", "", "OneColumn" });

                            if (sPD2.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { sPD2, "", "", "OneColumn" });
                            }

                            if (sPD3.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { sPD3, "", "", "OneColumn" });
                            }

                            if (strPType == "M")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "" });

                                if (strMV2 != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                                }
                                if (strMV3 != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                                }
                            }

                            if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                            || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                    }
                                }

                                if (strPType == "T")
                                {
                                    if (tgininv == "Y")
                                    {
                                        PosDataObject.Product opdt = new PosDataObject.Product();
                                        opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                        DataTable dtemp = opdt.FetchTaggedData(ipid);
                                        foreach (DataRow tgdr in dtemp.Rows)
                                        {
                                            double tgQty = 0;
                                            string tgName = "";
                                            tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                            tgName = tgdr["ItemName"].ToString();
                                            tgQty = tgQty * dblQty;
                                            dtblstrm.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "" });
                                        }
                                        dtemp.Dispose();
                                    }
                                }
                            }

                            if (strDiscText != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "" });
                            }
                            dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(lineprice + linetx + tFees + tFeesTax + tDTax) });

                        }

                        prndtblINV1.Dispose();

                        if (strLayawayStatus == "3")
                        {


                            // -------------- Sub Total ----------------

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });

                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax) });

                            if (dblDiscount != 0) // -------------- Discount ----------------
                            {
                                dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                                dtblstrm.Rows.Add(new object[] { SP1 + "Discount", "", GetFotmatDoubleValue(dblDiscount) });
                            }
                            // -------------- Tax ----------------
                            if (dblTax != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                                if (dblTax1 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1) });
                                }
                                if (dblTax2 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2) });
                                }
                                if (dblTax3 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3) });
                                }
                            }

                            if (dblTax != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                                dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Dest__Tax + ": " + strTaxName1, "", GetFotmatDoubleValue(dblDTax) });
                            }

                            // -------------- Total ----------------

                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale), "B" });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                        // ---------------- Layaway Payment -------------

                        DataTable prndtblLAYPMT = new DataTable();
                        prndtblLAYPMT = FetchLayawayPayment();


                        foreach (DataRow drL1 in prndtblLAYPMT.Rows)
                        {
                            double dblLayPayment = 0;
                            string strLayPmtType = "";
                            string strLayPmtDate = "";

                            strLayPmtType = drL1["PaymentType"].ToString();
                            strLayPmtDate = drL1["PaymentDate"].ToString();
                            dblLayPayment = GeneralFunctions.fnDouble(drL1["PaymentAmt"].ToString());

                            dtblstrm.Rows.Add(new object[] { SP1 + strLayPmtType + " " + strLayPmtDate, "", GetFotmatDoubleValue(dblLayPayment) });
                        }
                        prndtblLAYPMT.Dispose();


                        if ((intPrevLayNo != 0) && (intPrevLayNo != intLayNo))
                        {
                            // Layaway Balance Due, Due Date
                            distinctlayway++;
                            dblTotalLayawaySale = GetTotalLayawaySale(intPrevLayNo);
                            dblTotalLayawayPayment = GetTotalLayawayPayment(intPrevLayNo);
                            dblTotalLayawayBalance = dblTotalLayawaySale - dblTotalLayawayPayment;

                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Balance_Due + " ", "", GetFotmatDoubleValue(dblTotalLayawayBalance), "TwoOneColumn" });
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Due + " ", "", strLayawayDueDate, "TwoOneColumn" });
                        }

                        intPrevLayNo = intLayNo;
                    }
                    prndtblINV.Dispose();

                    if ((invcount == 1) || (distinctlayway == 1))
                    {
                        dblTotalLayawaySale = GetTotalLayawaySale(intPrevLayNo);
                        dblTotalLayawayPayment = GetTotalLayawayPayment(intPrevLayNo);
                        dblTotalLayawayBalance = dblTotalLayawaySale - dblTotalLayawayPayment;
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Balance_Due + " ", "", GetFotmatDoubleValue(dblTotalLayawayBalance), "TwoOneColumn" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Due + " ", "", strLayawayDueDate, "TwoOneColumn" });
                    }

                    // --------------- Tender --------------

                    bool boolHATender = false;

                    if (!blIsLayawayRefund)
                    {

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                        DataTable prndtblINV2 = new DataTable();
                        intTrnNo = FetchMaxTranNo();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        }
                        prndtblINV2.Dispose();



                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        bool mgc = false;
                        int mgcnt = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                        {
                            if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                            {
                                mgcnt++;
                                if (mgcnt == 1)
                                {
                                    mgc = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }


                    }


                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    string strSign = new string('_', Settings.NoOfPrintSign);
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.sign_, "", strSign });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {

                        DataTable ccdtbl11 = new DataTable();
                        PosDataObject.POS obcc11 = new PosDataObject.POS();
                        obcc11.Connection = SystemVariables.Conn;
                        ccdtbl11 = obcc11.FetchCardData(intLayTran);


                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                            if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                            if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                            if (drcc["CardType"].ToString() == "Precidia Gift Card") strCardType = "Precidia";
                            if (drcc["CardType"].ToString() == "Datacap Gift Card") strCardType = "Datacap";
                            if (drcc["CardType"].ToString() == "POSLink Gift Card") strCardType = "POSLink";
                            if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                            strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            strCardNum = drcc["RefCardAct"].ToString();
                            strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                            strCardLogo = drcc["RefCardLogo"].ToString();
                            strCardEntry = drcc["RefCardEntry"].ToString();
                            strApprovalNum = drcc["RefCardAuthID"].ToString();
                            strTranID = drcc["RefCardTranID"].ToString();
                            strApprovedAmt = drcc["RefCardAuthAmount"].ToString();

                            if (Settings.POSCardPayment == "Y")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Credit")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                            if (strCardType == "Debit")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });

                            }

                            if (strCardType == "Mercury")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Precidia")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "EBT")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }

                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ShowTipsInReceipt == "Y")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                }
                            }


                            if (strCardType == "Credit")
                            {
                                if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                    || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                    ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                     || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                    || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                {
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                                    dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                    dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                                }
                            }

                            if (strCardType == "Debit")
                            {
                                dtblstrm.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                                dtblstrm.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                            }
                        }
                    }
                    // --------------- Sign --------------



                    // --------------- Receipt Footer --------------


                    if (blCardPayment)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.CARDHOLDER_COPY, "" });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------


                    if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptLayawayPolicy, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptLayawayPolicy.Trim(), "", "", NumberOfOccurancesF.ToString() });

                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                }



                if (strPrintType == "Reprint Layaway")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace2);
                                     //StringFormat f = new StringFormat();

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Receipt + " *", "" });

                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }
                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strCID = "";
                    string strEmpID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";
                    string strLayawayDueDate = "";
                    int intLayInvNo = 0;

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string strLayawayStatus = "";

                    prndtblINV = FetchLayawayHeader(true);
                    int invcount = 0;
                    double dblTotalLayawaySale = 0;
                    double dblTotalLayawayPayment = 0;
                    double dblTotalLayawayBalance = 0;
                    int intPrevLayNo = 0;
                    double dblDTax = 0;
                    string custAddr = "";

                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        invcount++;

                        intLayNo = GeneralFunctions.fnInt32(dr["LayawayNo"].ToString());
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strCID = dr["CID"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        intLayInvNo = GeneralFunctions.fnInt32(dr["InvoiceNo"].ToString());
                        strLayawayDueDate = GeneralFunctions.fnDate(dr["DateDue"].ToString()).ToString("d");
                        strLayawayStatus = dr["LayawayStatus"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        intInvNo = intLayInvNo;

                        custAddr = FetchCustomerAddress(GeneralFunctions.fnInt32(strCID));

                        if ((intPrevLayNo == 0) || (intPrevLayNo != intLayNo))
                        {
                            intPrevLayNo = intLayNo;
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Layaway_Number, "", intLayNo.ToString() });
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }

                        if (invcount == 1)
                        {


                            if (strCustName != "")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                            }

                            if (strCustID != "")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                            }

                            if (custAddr != "")
                            {
                                string OrginalH = ""; // Settings.TotalReceiptHeader;
                                ArrangeText(custAddr, 26, ref OrginalH);

                                char FindH = '\n';
                                int NumberOfOccurancesH = 0;

                                string CopyOrginalH = string.Copy(OrginalH);
                                int PlaceH = 0;

                                NumberOfOccurancesH = 0;
                                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                while (PlaceH != -1)
                                {
                                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                    if (cutstr.Length > 26)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 26)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 26;
                                            if (cutstr != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(26, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    NumberOfOccurancesH++;
                                }

                                if (CopyOrginalH.Length > 26)
                                {
                                    int len = CopyOrginalH.Length;
                                    while (len >= 26)
                                    {
                                        NumberOfOccurancesH++;
                                        len = len - 26;
                                        if (CopyOrginalH != "")
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                            CopyOrginalH = CopyOrginalH.Substring(26, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                                }


                                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                else
                                {
                                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                }
                            }

                            if ((custAddr != "") || (strCustName != "") || (strCustID != ""))
                            {
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                        }

                        DataTable prndtblINV1 = new DataTable();
                        prndtblINV1 = FetchInvDetails(dblTotalSale);
                        double dblTempTotal = 0;
                        foreach (DataRow drL in prndtblINV1.Rows)
                        {
                            string strDescription = "";
                            string strPType = "";
                            string strMV1 = "";
                            string strMV2 = "";
                            string strMV3 = "";
                            string strSKU = "";
                            double dblPrice = 0;
                            double dblNormalPrice = 0;
                            double dblUOMPrice = 0;
                            double dblQty = 0;
                            double dblTotalPrice = 0;
                            string strDP = "";
                            string tgininv = "";
                            string strDiscText = "";
                            double dblDisc = 0;
                            int ipid = 0;

                            string txapp1 = "N";
                            string txapp2 = "N";
                            string txapp3 = "N";
                            double tx1 = 0;
                            double tx2 = 0;
                            double tx3 = 0;
                            double linetx = 0;
                            double lineprice = 0;

                            int tx1ty = 0;
                            int tx2ty = 0;
                            int tx3ty = 0;

                            double tDTax = 0;
                            double tFees = 0;
                            double tFeesTax = 0;
                            tDTax = GeneralFunctions.fnDouble(drL["DTax"].ToString());
                            tFees = GeneralFunctions.fnDouble(drL["Fees"].ToString());
                            tFeesTax = GeneralFunctions.fnDouble(drL["FeesTax"].ToString());

                            dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                            lineprice = dblTotalPrice;

                            txapp1 = drL["Taxable1"].ToString();
                            txapp2 = drL["Taxable2"].ToString();
                            txapp3 = drL["Taxable3"].ToString();
                            tx1 = GeneralFunctions.fnDouble(drL["TaxRate1"].ToString());
                            tx2 = GeneralFunctions.fnDouble(drL["TaxRate2"].ToString());
                            tx3 = GeneralFunctions.fnDouble(drL["TaxRate3"].ToString());

                            tx1ty = GeneralFunctions.fnInt32(drL["TaxType1"].ToString());
                            tx2ty = GeneralFunctions.fnInt32(drL["TaxType2"].ToString());
                            tx3ty = GeneralFunctions.fnInt32(drL["TaxType3"].ToString());

                            if ((txapp1 == "Y") || (txapp2 == "Y") || (txapp3 == "Y"))
                            {
                                if (txapp1 == "Y")
                                {
                                    linetx = (tx1ty == 0) ? GeneralFunctions.FormatDouble(lineprice * tx1 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal1"].ToString()));
                                }

                                if (txapp2 == "Y")
                                {
                                    linetx = (tx2ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx2 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal2"].ToString()));
                                }

                                if (txapp3 == "Y")
                                {
                                    linetx = (tx3ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx3 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal3"].ToString()));
                                }
                            }



                            ipid = GeneralFunctions.fnInt32(drL["ProductID"].ToString());
                            tgininv = drL["TaggedInInvoice"].ToString();

                            strDescription = drL["Description"].ToString();
                            strPType = drL["ProductType"].ToString();
                            strMV1 = drL["MOP1"].ToString();
                            strMV2 = drL["MOP2"].ToString();
                            strMV3 = drL["MOP3"].ToString();
                            strDiscText = drL["DiscountText"].ToString();

                            strSKU = drL["SKU"].ToString();
                            dblPrice = GeneralFunctions.fnDouble(drL["Price"].ToString());
                            dblQty = GeneralFunctions.fnDouble(drL["Qty"].ToString());
                            //dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                            dblNormalPrice = GeneralFunctions.fnDouble(drL["NormalPrice"].ToString());
                            dblUOMPrice = GeneralFunctions.fnDouble(drL["UOMPrice"].ToString());
                            dblDisc = GeneralFunctions.fnDouble(drL["Discount"].ToString());
                            dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                            strDP = drL["DP"].ToString();

                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                            dtblstrm.Rows.Add(new object[] { sPD1, "", "" });

                            if (sPD2.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { sPD2, "", "" });
                            }

                            if (sPD3.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { sPD3, "", "" });
                            }

                            if (strPType == "M")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "" });

                                if (strMV2 != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                                }
                                if (strMV3 != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                                }
                            }

                            if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                            || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                    }
                                }

                                if (strPType == "T")
                                {
                                    if (tgininv == "Y")
                                    {
                                        PosDataObject.Product opdt = new PosDataObject.Product();
                                        opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                        DataTable dtemp = opdt.FetchTaggedData(ipid);
                                        foreach (DataRow tgdr in dtemp.Rows)
                                        {
                                            double tgQty = 0;
                                            string tgName = "";
                                            tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                            tgName = tgdr["ItemName"].ToString();
                                            tgQty = tgQty * dblQty;

                                            dtblstrm.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "" });
                                        }
                                        dtemp.Dispose();
                                    }
                                }
                            }

                            if (strDiscText.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "" });
                            }
                            dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(lineprice + linetx + tFees + tFeesTax + tDTax) });
                        }
                        prndtblINV1.Dispose();

                        // ---------------- Layaway Payment -------------

                        DataTable prndtblLAYPMT = new DataTable();
                        prndtblLAYPMT = FetchLayawayPayment();


                        foreach (DataRow drL1 in prndtblLAYPMT.Rows)
                        {
                            double dblLayPayment = 0;
                            string strLayPmtType = "";
                            string strLayPmtDate = "";

                            strLayPmtType = drL1["PaymentType"].ToString();
                            strLayPmtDate = drL1["PaymentDate"].ToString();
                            dblLayPayment = GeneralFunctions.fnDouble(drL1["PaymentAmt"].ToString());

                            dtblstrm.Rows.Add(new object[] { SP1 + strLayPmtType + " " + strLayPmtDate, "", GetFotmatDoubleValue(dblLayPayment) });
                        }
                        prndtblLAYPMT.Dispose();
                    }
                    prndtblINV.Dispose();

                    // Layaway Balance Due, Due Date

                    dblTotalLayawaySale = GetTotalLayawaySale(intPrevLayNo);
                    dblTotalLayawayPayment = GetTotalLayawayPayment(intPrevLayNo);

                    dblTotalLayawayBalance = dblTotalLayawaySale - dblTotalLayawayPayment;

                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Balance_Due + " ", "", GetFotmatDoubleValue(dblTotalLayawayBalance) });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Due + " ", "", strLayawayDueDate });

                    // --------------- Tender --------------

                    bool boolHATender = false;

                    if (!blIsLayawayRefund)
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                        DataTable prndtblINV2 = new DataTable();
                        intTrnNo = FetchMaxTranNo();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        }
                        prndtblINV2.Dispose();



                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        bool mgc = false;
                        int mgcnt = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                        {
                            if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                            {
                                mgcnt++;
                                if (mgcnt == 1)
                                {
                                    mgc = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                    }

                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // --------------- Receipt Footer --------------
                    string strSign = new string('_', Settings.NoOfPrintSign);
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.sign_, "", strSign });


                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------


                    if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptLayawayPolicy, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }
                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptLayawayPolicy.Trim(), "", "", NumberOfOccurancesF.ToString() });
                    }
                    else dtblstrm.Rows.Add(new object[] { "", "", "" });

                    dtblstrm.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Receipt + " *", "" });

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });

                }



                if (strPrintType == "WorkOrder")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace3);
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }

                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }
                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblTotalSale = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    prndtblINV = FetchWOHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intStoreID = 1;
                        intRegisterID = 1;
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["WorkOrderDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        dblTotalSale = GeneralFunctions.fnDouble(dr["Total"].ToString());
                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    }
                    prndtblINV.Dispose();


                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Work_Order_Number, "", intInvNo.ToString() });

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    if (strCustCompany != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                    }
                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    }

                    DataTable dtblCpn = new DataTable();
                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchWODetails();
                    dtblCpn = prndtblINV1;
                    double dblDiscount = 0;
                    double dblCoupon = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;




                    double dblTempTotal = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        if ((dr["ProductType"].ToString() == "C") || (dr["ProductType"].ToString() == "Z")) dblCoupon = dblCoupon + GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        if (dr["ProductType"].ToString() == "C") continue;
                        if (dr["ProductType"].ToString() == "H") continue;
                        if (dr["ProductType"].ToString() == "Z") continue;
                        dblDiscount = dblDiscount + GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        string strDescription = "";
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblUOMPrice = 0;
                        double dblDisc = 0;
                        string strDiscText = "";
                        string strFeesText = "";

                        strFeesText = dr["FeesText"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();

                        strSKU = dr["SKU"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        strDiscText = dr["DiscountText"].ToString();
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());

                        double tempFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        double tempFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        dblTempTotal = dblTempTotal + dblTotalPrice + dblDisc + tempFees + tempFeesTax;

                        dblFees = dblFees + tempFees;
                        dblFees = dblFees + tempFeesTax;

                        strDP = dr["DP"].ToString();

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                        if (BuyNGetFreeCategory == "B")
                        {
                            dtblstrm.Rows.Add(new object[] { "", "** " + BuyNGetFreeCaption + " **", "" });
                        }
                        dtblstrm.Rows.Add(new object[] { sPD1, "", "" });
                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD2, "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD3, "", "" });
                        }

                        if (strPType == "M")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "" });
                            if (strMV2 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                            }
                            if (strMV3 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                            }
                        }
                        if (strDiscText.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "" });
                        }

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                            }
                        }

                        dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice) });

                    }
                    prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                    dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax) });

                    if (dblDiscount != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        dtblstrm.Rows.Add(new object[] { SP1 + "Discount", "", GetFotmatDoubleValue(dblDiscount) });
                    }
                    // -------------- Tax ----------------

                    if (dblTax != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":", "", GetFotmatDoubleValue(dblTax) });
                    }

                    if (((dblFees != 0) || (dblFeesTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                    {
                        DataTable dFees = FetchInvFees();
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblFees + dblFeesCoupon != 0)
                        {
                            if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString(), "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                        if (dblFeesTax + dblFeesCouponTax != 0)
                        {
                            if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                    }

                    if (dblCoupon != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket, "", GetFotmatDoubleValue(dblCoupon), "" });
                    }

                    bool flg = false;
                    foreach (DataRow drc in dtblCpn.Rows)
                    {
                        if ((drc["Producttype"].ToString() == "C") || (drc["Producttype"].ToString() == "Z"))
                        {
                            flg = true;
                            break;
                        }
                    }

                    if (flg)
                    {
                        //dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        //dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });

                        foreach (DataRow dr in dtblCpn.Rows)
                        {
                            if (!((dr["Producttype"].ToString() != "C") || (dr["Producttype"].ToString() != "Z"))) continue;
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["Description"].ToString();

                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";

                            SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);

                            dtblstrm.Rows.Add(new object[] { SP1 + sPD1, "", "", "" });

                            if (sPD2.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + sPD2, "", "", "" });
                            }

                            if (sPD3.Trim() != "")
                            {

                                dtblstrm.Rows.Add(new object[] { SP1 + sPD3, "", "", "" });
                            }


                            dblAmount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                            dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblAmount), "" });
                        }
                    }

                    dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });

                    // -------------- Total ----------------

                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale), "B" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // --------------- Tender --------------


                    // --------------- Receipt Footer --------------
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }
                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });


                }



                if (strPrintType == "Suspend Receipt")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace3);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    //dtblstrm.Rows.Add(new object[] { "Suspended Tran # : " + intInvNo.ToString() , "", "" });

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    DataTable prndtblINV = new DataTable();
                    DataTable prndtblINV1 = new DataTable();
                    DataTable dtblCpn = new DataTable();

                    prndtblINV.Columns.Add("StoreID", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("RegisterID", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("TransDate", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("CID", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("CustID", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("CustName", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("CustCompany", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("EmpID", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Tax", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Tax1", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Tax2", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Tax3", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("TotalSale", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("TaxNM1", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("TaxNM2", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("TaxNM3", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Discount", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Coupon", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("CustomerDOB", System.Type.GetType("System.String"));

                    prndtblINV1.Columns.Add("ProductType", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Description", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("SKU", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Price", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Qty", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("TotalPrice", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("MOP1", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("MOP2", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("MOP3", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("DP", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("NormalPrice", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("UOMPrice", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("DiscountID", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("DiscountText", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Discount", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("ItemIndex", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Fees", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("FeesTax", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("FeesText", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Notes", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("BuyNGetFreeHeaderID", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("BuyNGetFreeCategory", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("BuyNGetFreeName", System.Type.GetType("System.String"));

                    FetchSuspendRecord(ref prndtblINV, ref prndtblINV1);
                    dtblCpn = prndtblINV1;
                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCustID = "";
                    string strCID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string strCustDOB = "";

                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); //stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());

                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());

                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();
                    }
                    prndtblINV.Dispose();

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Suspended__, "", intInvNo.ToString() });
                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    if (strCustCompany != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                    }

                    if (strCustDOB != "")
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth, "", GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "" });
                    }

                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != "") || (strCustDOB != ""))
                    {
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    }



                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblTempTotal = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        if (dr["ProductType"].ToString() == "C") continue;
                        if (dr["ProductType"].ToString() == "Z") continue;
                        if (dr["ProductType"].ToString() == "H") continue;
                        string strDiscText = "";
                        string strDescription = "";
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        double dblDisc = 0;
                        string strInvNotes = "";
                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strSKU = dr["SKU"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        string strFeesText = "";
                        strFeesText = dr["FeesText"].ToString();
                        strInvNotes = dr["Notes"].ToString();

                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        double tempFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        double tempFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblTempTotal = dblTempTotal + dblTotalPrice + dblDisc + tempFees + tempFeesTax;
                        dblFees = dblFees + tempFees;
                        dblFeesTax = dblFeesTax + tempFeesTax;

                        strDP = dr["DP"].ToString();

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";
                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        if (BuyNGetFreeCategory == "B")
                        {
                            dtblstrm.Rows.Add(new object[] { "", "** " + BuyNGetFreeCaption + " **", "" });
                        }

                        dtblstrm.Rows.Add(new object[] { sPD1, "", "" });

                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD2, "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { sPD3, "", "" });
                        }

                        if (strPType == "M")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "" });

                            if (strMV2 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                            }
                            if (strMV3 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                            }
                        }

                        if (strDiscText.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "" });
                        }

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                            }
                        }

                        dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice) });

                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }

                    }
                    prndtblINV1.Dispose();




                    // -------------- Sub Total ----------------

                    dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax) });



                    if (dblDiscount > 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        dtblstrm.Rows.Add(new object[] { SP1 + "Discount", "", GetFotmatDoubleValue(dblDiscount) });
                    }
                    // -------------- Tax ----------------
                    if (dblTax != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        if (dblTax1 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1) });
                        }
                        if (dblTax2 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2) });
                        }
                        if (dblTax3 != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3) });
                        }
                    }

                    if (((dblFees != 0) || (dblFeesTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                    {
                        DataTable dFees = FetchInvFees();
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblFees != 0)
                        {
                            if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString(), "", GetFotmatDoubleValue(dblFees), "" });
                            if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblFees), "" });
                        }
                        if (dblFeesTax != 0)
                        {
                            if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax, "", GetFotmatDoubleValue(dblFeesTax), "" });
                            if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblFeesTax), "" });
                        }
                    }


                    if (dblCoupon != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket, "", GetFotmatDoubleValue(dblCoupon), "" });
                    }

                    bool flg = false;
                    foreach (DataRow drc in dtblCpn.Rows)
                    {
                        if ((drc["Producttype"].ToString() == "C") || (drc["Producttype"].ToString() == "Z"))
                        {
                            flg = true;
                            break;
                        }
                    }

                    if (flg)
                    {
                        //dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        //dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });

                        foreach (DataRow dr in dtblCpn.Rows)
                        {
                            if (!((dr["Producttype"].ToString() == "C") || (dr["Producttype"].ToString() == "Z"))) continue;

                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["Description"].ToString();

                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";

                            SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);

                            dtblstrm.Rows.Add(new object[] { SP1 + sPD1, "", "", "" });

                            if (sPD2.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + sPD2, "", "", "" });
                            }

                            if (sPD3.Trim() != "")
                            {

                                dtblstrm.Rows.Add(new object[] { SP1 + sPD3, "", "", "" });
                            }


                            dblAmount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                            dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblAmount), "" });

                        }
                    }

                    dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });

                    // -------------- Total ----------------

                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total_Due, "", GetFotmatDoubleValue(dblTotalSale) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });



                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    //dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                        }
                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });

                    //dtblstrm.Rows.Add(new object[] { "", "", "" });
                    //dtblstrm.Rows.Add(new object[] { "Suspended Tran # : " + intInvNo.ToString(), "", "" });
                }


                if (strPrintType == "Closeout")  // Close Out
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace3);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    // -----------------  Receipt Header ---------------

                    GetRecieptHeader();

                    DataTable dtblH = new DataTable();
                    DataTable dtblT = new DataTable();


                    DataTable prndtblHeader = new DataTable();
                    string strEmpID = "";
                    string strTerminal = "";
                    int intNoOfSale = 0;
                    string strStartDate = "";
                    string strStartTime = "";
                    string strEndDate = "";
                    string strEndTime = "";
                    string strNotes = "";
                    double dblTaxedSales = 0;
                    double dblNonTaxedSales = 0;
                    string strTax1Exist = "N";
                    string strTax1Name = "";
                    double dblTax1Amount = 0;
                    string strTax2Exist = "N";
                    string strTax2Name = "";
                    double dblTax2Amount = 0;
                    string strTax3Exist = "N";
                    string strTax3Name = "";
                    double dblTax3Amount = 0;
                    double dblServiceSales = 0;
                    double dblProductSales = 0;
                    double dblOtherSales = 0;
                    int intDiscountItemNo = 0;
                    double dblDiscountItemAmount = 0;
                    int intDiscountInvoiceNo = 0;
                    double dblDiscountInvoiceAmount = 0;
                    double dblLayawayDeposits = 0;
                    double dblLayawayRefund = 0;
                    double dblLayawayPayment = 0;
                    double dblLayawaySalesPosted = 0;
                    double dblPaidOuts = 0;
                    double dblGCsold = 0;
                    double dblSCissued = 0;
                    double dblSCredeemed = 0;
                    double dblHACharged = 0;
                    double dblHApayments = 0;
                    int intNoSaleCount = 0;
                    double dblTotalSales = 0;

                    double dblRentSales = 0;
                    double dblRentDeposit = 0;
                    double dblRentDepositReturned = 0;
                    double dblRepairSales = 0;

                    double dblSTax1Amount = 0;
                    double dblSTax2Amount = 0;
                    double dblSTax3Amount = 0;

                    double dblBTax1Amount = 0;
                    double dblBTax2Amount = 0;
                    double dblBTax3Amount = 0;

                    double dblRntTax1Amount = 0;
                    double dblRntTax2Amount = 0;
                    double dblRntTax3Amount = 0;

                    double dblRTax1Amount = 0;
                    double dblRTax2Amount = 0;
                    double dblRTax3Amount = 0;

                    double dblSDiscountItemAmount = 0;
                    double dblBDiscountItemAmount = 0;
                    double dblRDiscountItemAmount = 0;
                    double dblRntDiscountInvoiceAmount = 0;
                    double dblRDiscountInvoiceAmount = 0;



                    int intSDiscountItemNo = 0;
                    int intBDiscountItemNo = 0;
                    int intRDiscountItemNo = 0;
                    int intRntDiscountInvoiceNo = 0;
                    int intRDiscountInvoiceNo = 0;



                    int intSalesInvoiceCount = 0;
                    int intRentInvoiceCount = 0;
                    int intRepairInvoiceCount = 0;

                    double dblProductTx = 0;
                    double dblProductNTx = 0;

                    double dblServiceTx = 0;
                    double dblServiceNTx = 0;

                    double dblOtherTx = 0;
                    double dblOtherNTx = 0;

                    double dblCashTip = 0;
                    double dblCCTip = 0;
                    string strTip = "";

                    double dblSalesFees = 0;
                    double dblSalesFeesTax = 0;


                    double dblRentFees = 0;
                    double dblRentFeesTax = 0;

                    double dblRepairFees = 0;
                    double dblRepairFeesTax = 0;

                    double dblDTax = 0;
                    double dblMGC = 0;
                    double dblPGC = 0;
                    double dblDGC = 0;
                    double dblPLGC = 0;
                    double dblBot = 0;

                    double dblRepairDeposit = 0;

                    int intFreeQty = 0;
                    double dblFreeAmount = 0;

                    double dblLottoPayout = 0;

                    double dblGiftAid = 0;

                    prndtblHeader = FetchCOHeader();
                    if ((IsCloseout) && (Settings.CloseoutExport == "Y")) dtblH = prndtblHeader;
                    foreach (DataRow dr in prndtblHeader.Rows)
                    {
                        strEmpID = dr["EmpID"].ToString();
                        intNoOfSale = GeneralFunctions.fnInt32(dr["NoOfSales"].ToString());
                        strStartDate = dr["StartDateTime"].ToString();
                        strStartTime = dr["StartTime"].ToString();
                        strEndDate = dr["EndDateTime"].ToString();
                        strEndTime = dr["EndTime"].ToString();
                        strNotes = dr["Notes"].ToString();
                        strTerminal = dr["TerminalName"].ToString();

                        dblTaxedSales = GeneralFunctions.fnDouble(dr["TaxedSales"].ToString());
                        dblNonTaxedSales = GeneralFunctions.fnDouble(dr["NonTaxedSales"].ToString());
                        strTax1Exist = dr["Tax1Exist"].ToString();
                        strTax1Name = dr["Tax1Name"].ToString();
                        dblTax1Amount = GeneralFunctions.fnDouble(dr["Tax1Amount"].ToString());
                        strTax2Exist = dr["Tax2Exist"].ToString();
                        strTax2Name = dr["Tax2Name"].ToString();
                        dblTax2Amount = GeneralFunctions.fnDouble(dr["Tax2Amount"].ToString());
                        strTax3Exist = dr["Tax3Exist"].ToString();
                        strTax3Name = dr["Tax3Name"].ToString();
                        dblTax3Amount = GeneralFunctions.fnDouble(dr["Tax3Amount"].ToString());
                        dblServiceSales = GeneralFunctions.fnDouble(dr["ServiceSales"].ToString());
                        dblProductSales = GeneralFunctions.fnDouble(dr["ProductSales"].ToString());
                        dblOtherSales = GeneralFunctions.fnDouble(dr["OtherSales"].ToString());
                        intDiscountItemNo = GeneralFunctions.fnInt32(dr["DiscountItemNo"].ToString());
                        dblDiscountItemAmount = GeneralFunctions.fnDouble(dr["DiscountItemAmount"].ToString());
                        intDiscountInvoiceNo = GeneralFunctions.fnInt32(dr["DiscountInvoiceNo"].ToString());
                        dblDiscountInvoiceAmount = GeneralFunctions.fnDouble(dr["DiscountInvoiceAmount"].ToString());
                        dblLayawayDeposits = GeneralFunctions.fnDouble(dr["LayawayDeposits"].ToString());
                        dblLayawayRefund = GeneralFunctions.fnDouble(dr["LayawayRefund"].ToString());
                        dblLayawayPayment = GeneralFunctions.fnDouble(dr["LayawayPayment"].ToString());
                        dblLayawaySalesPosted = GeneralFunctions.fnDouble(dr["LayawaySalesPosted"].ToString());
                        dblPaidOuts = GeneralFunctions.fnDouble(dr["PaidOuts"].ToString());
                        dblGCsold = GeneralFunctions.fnDouble(dr["GCsold"].ToString());
                        dblSCissued = GeneralFunctions.fnDouble(dr["SCissued"].ToString());
                        dblSCredeemed = GeneralFunctions.fnDouble(dr["SCredeemed"].ToString());
                        dblHACharged = GeneralFunctions.fnDouble(dr["HACharged"].ToString());
                        dblHApayments = GeneralFunctions.fnDouble(dr["HApayments"].ToString());

                        intNoSaleCount = GeneralFunctions.fnInt32(dr["NoSaleCount"].ToString());


                        dblRentSales = GeneralFunctions.fnDouble(dr["RentSales"].ToString());
                        dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        dblRentDepositReturned = GeneralFunctions.fnDouble(dr["RentDepositReturned"].ToString());
                        dblRepairSales = GeneralFunctions.fnDouble(dr["RepairSales"].ToString());

                        dblSTax1Amount = GeneralFunctions.fnDouble(dr["STax1Amount"].ToString());
                        dblSTax2Amount = GeneralFunctions.fnDouble(dr["STax2Amount"].ToString());
                        dblSTax3Amount = GeneralFunctions.fnDouble(dr["STax3Amount"].ToString());

                        dblBTax1Amount = GeneralFunctions.fnDouble(dr["BTax1Amount"].ToString());
                        dblBTax2Amount = GeneralFunctions.fnDouble(dr["BTax2Amount"].ToString());
                        dblBTax3Amount = GeneralFunctions.fnDouble(dr["BTax3Amount"].ToString());

                        dblRTax1Amount = GeneralFunctions.fnDouble(dr["RTax1Amount"].ToString());
                        dblRTax2Amount = GeneralFunctions.fnDouble(dr["RTax2Amount"].ToString());
                        dblRTax3Amount = GeneralFunctions.fnDouble(dr["RTax3Amount"].ToString());

                        dblRntTax1Amount = GeneralFunctions.fnDouble(dr["RntTax1Amount"].ToString());
                        dblRntTax2Amount = GeneralFunctions.fnDouble(dr["RntTax2Amount"].ToString());
                        dblRntTax3Amount = GeneralFunctions.fnDouble(dr["RntTax3Amount"].ToString());

                        dblSDiscountItemAmount = GeneralFunctions.fnDouble(dr["SDiscountItemAmount"].ToString());
                        dblBDiscountItemAmount = GeneralFunctions.fnDouble(dr["BDiscountItemAmount"].ToString());
                        dblRDiscountItemAmount = GeneralFunctions.fnDouble(dr["RDiscountItemAmount"].ToString());
                        dblRntDiscountInvoiceAmount = GeneralFunctions.fnDouble(dr["RntDiscountInvoiceAmount"].ToString());
                        dblRDiscountInvoiceAmount = GeneralFunctions.fnDouble(dr["RDiscountInvoiceAmount"].ToString());

                        intSDiscountItemNo = GeneralFunctions.fnInt32(dr["SDiscountItemNo"].ToString());
                        intBDiscountItemNo = GeneralFunctions.fnInt32(dr["BDiscountItemNo"].ToString());
                        intRDiscountItemNo = GeneralFunctions.fnInt32(dr["RDiscountItemNo"].ToString());
                        intRntDiscountInvoiceNo = GeneralFunctions.fnInt32(dr["RntDiscountInvoiceNo"].ToString());
                        intRDiscountInvoiceNo = GeneralFunctions.fnInt32(dr["RDiscountInvoiceNo"].ToString());

                        intSalesInvoiceCount = GeneralFunctions.fnInt32(dr["SalesInvoiceCount"].ToString());
                        intRentInvoiceCount = GeneralFunctions.fnInt32(dr["RentInvoiceCount"].ToString());
                        intRepairInvoiceCount = GeneralFunctions.fnInt32(dr["RepairInvoiceCount"].ToString());

                        dblProductTx = GeneralFunctions.fnDouble(dr["ProductTx"].ToString());
                        dblProductNTx = GeneralFunctions.fnDouble(dr["ProductNTx"].ToString());

                        dblServiceTx = GeneralFunctions.fnDouble(dr["ServiceTx"].ToString());
                        dblServiceNTx = GeneralFunctions.fnDouble(dr["ServiceNTx"].ToString());

                        dblOtherTx = GeneralFunctions.fnDouble(dr["OtherTx"].ToString());
                        dblOtherNTx = GeneralFunctions.fnDouble(dr["OtherNTx"].ToString());


                        dblCashTip = GeneralFunctions.fnDouble(dr["CashTip"].ToString());
                        dblCCTip = GeneralFunctions.fnDouble(dr["CCTip"].ToString());

                        dblSalesFees = GeneralFunctions.fnDouble(dr["SalesFees"].ToString());
                        dblSalesFeesTax = GeneralFunctions.fnDouble(dr["SalesFeesTax"].ToString());

                        dblRentFees = GeneralFunctions.fnDouble(dr["RentFees"].ToString());
                        dblRentFeesTax = GeneralFunctions.fnDouble(dr["RentFeesTax"].ToString());

                        dblRepairFees = GeneralFunctions.fnDouble(dr["RepairFees"].ToString());
                        dblRepairFeesTax = GeneralFunctions.fnDouble(dr["RepairFeesTax"].ToString());

                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        dblMGC = GeneralFunctions.fnDouble(dr["MGCsold"].ToString());
                        dblPGC = GeneralFunctions.fnDouble(dr["PGCsold"].ToString());
                        dblDGC = GeneralFunctions.fnDouble(dr["DGCsold"].ToString());
                        dblPLGC = GeneralFunctions.fnDouble(dr["PLGCsold"].ToString());

                        dblBot = GeneralFunctions.fnDouble(dr["BottleRefund"].ToString());

                        dblRepairDeposit = GeneralFunctions.fnDouble(dr["RepairDeposit"].ToString());

                        intFreeQty = GeneralFunctions.fnInt32(dr["FreeQty"].ToString());
                        dblFreeAmount = GeneralFunctions.fnDouble(dr["FreeAmount"].ToString());
                        strTip = dr["Tip"].ToString();
                        dblLottoPayout = GeneralFunctions.fnDouble(dr["LottoPayout"].ToString());

                        dblGiftAid = GeneralFunctions.fnDouble(dr["GiftAid"].ToString());
                    }

                    dblTotalSales = dblProductSales + dblServiceSales + dblOtherSales
                        + dblSTax1Amount + dblSTax2Amount + dblSTax3Amount + dblBTax1Amount + dblBTax2Amount + dblBTax3Amount
                        - dblDiscountInvoiceAmount + dblSalesFees + dblSalesFeesTax + (Settings.TaxInclusive == "N" ? (dblTax1Amount + dblTax2Amount + dblTax3Amount) : 0);

                    prndtblHeader.Dispose();

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CLOSE_OUT_REPORT, "", "", "OneColumn" });

                    if (strCloseoutType == "C") dtblstrm.Rows.Add(new object[] { Properties.Resources.Consolidated, "", "", "OneColumn" });
                    if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.By_Employee, "", "", "OneColumn" });
                    if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.By_Terminal, "", "", "OneColumn" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRANSACTION_SUMMARY, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Begin_, "", strStartDate + SP1 + strStartTime });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.End_, "", strEndDate + SP1 + strEndTime });

                    if (strCloseoutType == "C")
                    {
                        if (SystemVariables.CurrentUserID <= 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserName, "" });
                        else dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserCode, "" });
                    }
                    if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.Employee + "#:", strEmpID, "" });
                    if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + "#:", strTerminal, "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Close_Out_ + ":", " " + intCloseoutID.ToString(), "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.NOTE + ":", "", "" });

                    if (strNotes != "")
                    {
                        string OrginalF = "";
                        ArrangeText(strNotes, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;
                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 30), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 30), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                        }

                        dtblstrm.Rows.Add(new object[] { strNotes, "", "", NumberOfOccurancesF.ToString() });

                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.SALES, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.No__of_Invoices + ": ", intSalesInvoiceCount.ToString(), "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Product_Sales, "", GetFotmatDoubleValue(dblProductSales) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Taxed, "", GetFotmatDoubleValue(dblProductTx) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Non_Taxed, "", GetFotmatDoubleValue(dblProductNTx) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Service_Sales, "", GetFotmatDoubleValue(dblServiceSales) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Taxed, "", GetFotmatDoubleValue(dblServiceTx) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Non_Taxed, "", GetFotmatDoubleValue(dblServiceNTx) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Other_Sales, "", GetFotmatDoubleValue(dblOtherSales) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Taxed, "", GetFotmatDoubleValue(dblOtherTx) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Non_Taxed, "", GetFotmatDoubleValue(dblOtherNTx) });

                    if (Settings.TaxInclusive == "N")
                    {
                        if (strTax1Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax1Name, "", GetFotmatNonZeroDoubleValue(dblTax1Amount) });
                        }
                        if (strTax2Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax2Name, "", GetFotmatNonZeroDoubleValue(dblTax2Amount) });
                        }
                        if (strTax3Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax3Name, "", GetFotmatNonZeroDoubleValue(dblTax3Amount) });
                        }

                        if (dblDTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Destination_Tax, "", GetFotmatNonZeroDoubleValue(dblDTax) });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        else
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                    }


                    dtblstrm.Rows.Add(new object[] { Properties.Resources.DISCOUNTS, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Item, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Product, GetFotmatNonZeroIntValue(intDiscountItemNo), GetFotmatNonZeroDoubleValue1(dblDiscountItemAmount) });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Service, GetFotmatNonZeroIntValue(intSDiscountItemNo), GetFotmatNonZeroDoubleValue1(dblSDiscountItemAmount) });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.other, GetFotmatNonZeroIntValue(intBDiscountItemNo), GetFotmatNonZeroDoubleValue1(dblBDiscountItemAmount) });

                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Invoice, GetFotmatNonZeroIntValue(intDiscountInvoiceNo), GetFotmatNonZeroDoubleValue1(dblDiscountInvoiceAmount) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Free_Items, GetFotmatNonZeroIntValue(intFreeQty), GetFotmatNonZeroDoubleValue1(dblFreeAmount) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });



                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblSalesFees) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblSalesFeesTax) });


                    dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSales), "B" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    if (Settings.TaxInclusive == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "TAX", "", "" });

                        if (strTax1Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax1Name, "", GetFotmatNonZeroDoubleValue(dblTax1Amount) });
                        }
                        if (strTax2Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax2Name, "", GetFotmatNonZeroDoubleValue(dblTax2Amount) });
                        }
                        if (strTax3Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax3Name, "", GetFotmatNonZeroDoubleValue(dblTax3Amount) });
                        }

                        if (dblDTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Destination_Tax, "", GetFotmatNonZeroDoubleValue(dblDTax) });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        else
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                    }


                    if (intRentInvoiceCount > 0) // Rent 
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.RENTS, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.No__of_Invoices + ": ", intRentInvoiceCount.ToString(), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Net_Issued, "", GetFotmatDoubleValue(dblRentSales) });

                        if (strTax1Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax1Name, "", GetFotmatNonZeroDoubleValue(dblRntTax1Amount) });
                        }
                        if (strTax2Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax2Name, "", GetFotmatNonZeroDoubleValue(dblRntTax2Amount) });
                        }
                        if (strTax3Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax3Name, "", GetFotmatNonZeroDoubleValue(dblRntTax3Amount) });
                        }

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Deposits, "", GetFotmatDoubleValue(dblRentDeposit) });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Deposits_Returned, "", GetFotmatDoubleValue1(dblRentDepositReturned) });


                        dtblstrm.Rows.Add(new object[] { Properties.Resources.DISCOUNTS, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { SP1, GetFotmatNonZeroIntValue(intRntDiscountInvoiceNo), GetFotmatNonZeroDoubleValue1(dblRntDiscountInvoiceAmount) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblRentFees) });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblRentFeesTax) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if ((intRepairInvoiceCount > 0) || (dblRepairDeposit > 0))// Repair
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.REPAIRS, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.No__of_Invoices + ": ", intRepairInvoiceCount.ToString(), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Amount, "", GetFotmatDoubleValue(dblRepairSales) });

                        if (strTax1Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax1Name, "", GetFotmatNonZeroDoubleValue(dblRTax1Amount) });
                        }
                        if (strTax2Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax2Name, "", GetFotmatNonZeroDoubleValue(dblRTax2Amount) });
                        }
                        if (strTax3Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax3Name, "", GetFotmatNonZeroDoubleValue(dblRTax3Amount) });
                        }

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Deposit, "", GetFotmatDoubleValue(dblRepairDeposit) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.DISCOUNTS, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Item, GetFotmatNonZeroIntValue(intRDiscountItemNo), GetFotmatNonZeroDoubleValue1(dblRDiscountItemAmount) });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Invoice, GetFotmatNonZeroIntValue(intRDiscountInvoiceNo), GetFotmatNonZeroDoubleValue1(dblRDiscountInvoiceAmount) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblRepairFees) });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblRepairFeesTax) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    dtblstrm.Rows.Add(new object[] { Properties.Resources.NON_SALES, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Deposits, "", GetFotmatDoubleValue(dblLayawayDeposits), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Refunds, "", GetFotmatDoubleValue(dblLayawayRefund), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Payments, "", GetFotmatDoubleValue(dblLayawayPayment), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Sales_Posted, "", GetFotmatDoubleValue(dblLayawaySalesPosted), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.No_Sale_Count, "", intNoSaleCount, "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Paid_Outs, "", GetFotmatDoubleValue(dblPaidOuts), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Lotto_Payout, "", GetFotmatDoubleValue(dblLottoPayout), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + "Gift Aid", "", GetFotmatDoubleValue(dblGiftAid), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Gift_Cert__Sold, "", GetFotmatDoubleValue(dblGCsold), "TwoOneColumn" });
                    if (Settings.PaymentGateway == 2) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Mercury_Gift_Card_Sold, "", GetFotmatDoubleValue(dblMGC), "TwoOneColumn" });
                    if (Settings.PaymentGateway == 3) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Mercury_Gift_Card_Sold, "", GetFotmatDoubleValue(dblPGC), "TwoOneColumn" });
                    if (Settings.PaymentGateway == 5) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Datacap_Gift_Card_Sold, "", GetFotmatDoubleValue(dblDGC), "TwoOneColumn" });
                    if (Settings.PaymentGateway == 7) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.POSLink_Gift_Card_Sold, "", GetFotmatDoubleValue(dblPLGC), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.House_Account_Payments, "", GetFotmatDoubleValue(dblHApayments), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Bottle_Refund, "", GetFotmatDoubleValue(dblBot), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.STORE_CREDIT, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Issued, "", GetFotmatDoubleValue(dblSCissued) });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Redeemed, "", GetFotmatDoubleValue(dblSCredeemed) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.HOUSE_ACCOUNT, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Charged, "", GetFotmatDoubleValue(dblHACharged) });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Account_Payments, "", GetFotmatDoubleValue(dblHApayments) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    if (Settings.AcceptTips == "Y")
                    {
                        if (strCloseoutType != "T")
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.TIPS, "", strTip });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                    }

                    // Item Returns

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.RETURNS, Properties.Resources.Invoice + "# ", "" });

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchCOReturn();
                    double dblTempTotal = 0;
                    int intC = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        intC++;
                        string strReturnSKU = "";
                        string strReturnInvoiceNo = "";
                        double dblReturnAmount = 0;
                        strReturnSKU = dr["ReturnSKU"].ToString();
                        strReturnInvoiceNo = dr["ReturnInvoiceNo"].ToString();
                        dblReturnAmount = GeneralFunctions.fnDouble(dr["ReturnAmount"].ToString());
                        dblTempTotal = dblTempTotal + dblReturnAmount;

                        dtblstrm.Rows.Add(new object[] { SP1 + strReturnSKU, strReturnInvoiceNo, GetFotmatDoubleValue(dblReturnAmount) });

                    }
                    prndtblINV1.Dispose();

                    if (intC > 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTempTotal), "" });
                    }
                    else
                    {
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.NoReturns, "", "", "OneColumn" });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // Tender Reconciliation

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TENDER_RECONCILIATION, "", "", "OneColumn" });

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    // TENDER

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "OneColumn" });

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchCOTender();
                    if ((IsCloseout) && (Settings.CloseoutExport == "Y")) dtblT = prndtblINV2;
                    double dblTTotal = 0;

                    bool blCashFloat = false;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        if (dr["TenderName"].ToString().Contains("Cash Float"))
                        {
                            blCashFloat = true;
                            break;
                        }
                    }
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTenderName = "";
                        string strTenderCount = "";
                        double dblTenderAmount = 0;
                        strTenderName = dr["TenderName"].ToString();
                        strTenderCount = dr["TenderCount"].ToString();
                        dblTenderAmount = GeneralFunctions.fnDouble(dr["TenderAmount"].ToString());
                        if (strTenderName != "Card Processing Total")
                        {
                            if (dblTenderAmount != -929292)
                            {
                                dblTTotal = dblTTotal + dblTenderAmount;
                                if (strTenderName.StartsWith("Gift Certificate")) strTenderName.Replace("Gift Certificate", Properties.Resources.Gift_Cert);
                                if (strTenderName.StartsWith("American Express")) strTenderName = strTenderName.Replace("American Express", Properties.Resources.American_Exp_);
                                if (strTenderName.StartsWith("Debit Card Cash Back")) strTenderName = strTenderName.Replace("Debit Card Cash Back", Properties.Resources.Cash_Back);

                                if ((blCashFloat) && (strTenderName == "Cash"))
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strTenderName, "", "" });
                                }
                                else
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strTenderName, "", GetFotmatDoubleValue(dblTenderAmount) });
                                }

                            }


                        }
                        else
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Card_Proc_Total, "", GetFotmatDoubleValue(dblTenderAmount) });
                        }

                    }
                    prndtblINV2.Dispose();

                    dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total_Amount, "", GetFotmatDoubleValue(dblTTotal) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // COUNTS

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.COUNTS, "", "", "OneColumn" });

                    DataTable prndtblINV3 = new DataTable();
                    prndtblINV3 = FetchCOTenderCount();
                    double dblCTotal = 0;
                    foreach (DataRow dr in prndtblINV3.Rows)
                    {
                        string strTenderName = "";
                        string strTenderCount = "";
                        double dblTenderAmount = 0;
                        strTenderName = dr["TenderName"].ToString();
                        strTenderCount = dr["TenderCount"].ToString();
                        dblTenderAmount = GeneralFunctions.fnDouble(dr["TenderAmount"].ToString());
                        dblCTotal = dblCTotal + dblTenderAmount;
                        if (strTenderName.StartsWith("Gift Certificate")) strTenderName.Replace("Gift Certificate", Properties.Resources.Gift_Cert);
                        if (strTenderName.StartsWith("American Express")) strTenderName = strTenderName.Replace("American Express", Properties.Resources.American_Exp_);

                        dtblstrm.Rows.Add(new object[] { SP1 + strTenderName, "", GetFotmatDoubleValue(dblTenderAmount) });
                    }
                    prndtblINV3.Dispose();

                    dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total_Counted, "", GetFotmatDoubleValue(dblCTotal) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // OVER/(SHORT)

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.OVER__SHORT_, "", "", "OneColumn" });

                    DataTable prndtblINV4 = new DataTable();
                    prndtblINV4 = FetchCOTenderOverShort();
                    double dblOSTotal = 0;
                    foreach (DataRow dr in prndtblINV4.Rows)
                    {
                        string strTenderName = "";
                        string strTenderCount = "";
                        double dblTenderAmount = 0;
                        strTenderName = dr["TenderName"].ToString();
                        strTenderCount = dr["TenderCount"].ToString();
                        dblTenderAmount = GeneralFunctions.fnDouble(dr["TenderAmount"].ToString());
                        if (strTenderName != "Card Processing Total")
                        {

                            dblOSTotal = dblOSTotal + dblTenderAmount;
                            if (strTenderName.StartsWith("Gift Certificate")) strTenderName.Replace("Gift Certificate", Properties.Resources.Gift_Cert);
                            if (strTenderName.StartsWith("American Express")) strTenderName = strTenderName.Replace("American Express", Properties.Resources.American_Exp_);
                            dtblstrm.Rows.Add(new object[] { SP1 + strTenderName, "", GetFotmatDoubleValue(dblTenderAmount) });
                        }
                        else
                        {
                            //dtblstrm.Rows.Add(new object[] { SP1 + "Card Processing Tot", SP1 + SP2 + strTenderCount, GetFotmatDoubleValue(dblTenderAmount) });
                        }
                    }
                    prndtblINV4.Dispose();

                    double netovershort = 0;
                    netovershort = dblOSTotal + (-dblPaidOuts);
                    if (blIsCloseout)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                        dtblstrm.Rows.Add(new object[] { SP1 + "Gross Over/ (Short)", "", GetFotmatDoubleValue(dblOSTotal) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });

                        dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                        dtblstrm.Rows.Add(new object[] { SP1 + "Net Over/ (Short)", "", GetFotmatDoubleValue(netovershort) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    else
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total_Over__Short_, "", GetFotmatDoubleValue(dblOSTotal) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    

                    if (blCloseoutSaleHour)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.SALES_BY_HOUR, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Begin_, "", strStartDate + SP1 + strStartTime });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.End_, "", strEndDate + SP1 + strEndTime });

                        if (strCloseoutType == "C")
                        {
                            if (SystemVariables.CurrentUserID <= 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserName, "" });
                            else dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserCode, "" });
                        }
                        if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.Employee + "#:", strEmpID, "" });
                        if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + "#:", strTerminal, "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Close_Out_ + ":", " " + intCloseoutID.ToString(), "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.NOTE + ":", "", "", "OneColumn" });

                        if (strNotes != "")
                        {
                            string OrginalF = "";
                            ArrangeText(strNotes, 30, ref OrginalF);
                            char FindF = '\n';
                            int NumberOfOccurancesF = 0;
                            string CopyOrginalF = string.Copy(OrginalF);
                            int PlaceF = 0;
                            NumberOfOccurancesF = 0;
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            while (PlaceF != -1)
                            {
                                string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 30), "", "" });
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                }

                                CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                NumberOfOccurancesF++;
                            }

                            if (CopyOrginalF.Length > 30)
                            {
                                int len = CopyOrginalF.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (CopyOrginalF != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                        CopyOrginalF = CopyOrginalF.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                            }

                            if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                            else
                            {
                                if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strNotes, "", "", NumberOfOccurancesF.ToString() });

                        }

                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });


                        DataTable prndtblINV5 = new DataTable();
                        prndtblINV5 = FetchCOSH();
                        double dblSHTotal = 0;
                        foreach (DataRow dr in prndtblINV5.Rows)
                        {
                            string strTimeinterval = "";
                            double dblSalesAmount = 0;
                            strTimeinterval = dr["Timeinterval"].ToString();
                            dblSalesAmount = GeneralFunctions.fnDouble(dr["SalesAmount"].ToString());
                            dblSHTotal = dblSHTotal + dblSalesAmount;
                            dtblstrm.Rows.Add(new object[] { SP1 + strTimeinterval, "", GetFotmatDoubleValue(dblSalesAmount), "TwoOneColumn" });
                        }
                        prndtblINV5.Dispose();

                        dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total_Sales, "", GetFotmatDoubleValue(dblSHTotal) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if (blCloseoutSaleDept)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.SALES_BY_DEPARTMENT, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Begin_, "", strStartDate + SP1 + strStartTime });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.End_, "", strEndDate + SP1 + strEndTime });

                        if (strCloseoutType == "C")
                        {
                            if (SystemVariables.CurrentUserID <= 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserName, "" });
                            else dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserCode, "" });
                        }
                        if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.Employee + "#:", strEmpID, "" });
                        if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + "#:", strTerminal, "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Close_Out_ + ":", " " + intCloseoutID.ToString(), "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.NOTE + ":", "", "", "OneColumn" });

                        if (strNotes != "")
                        {
                            string OrginalF = "";
                            ArrangeText(strNotes, 30, ref OrginalF);
                            char FindF = '\n';
                            int NumberOfOccurancesF = 0;
                            string CopyOrginalF = string.Copy(OrginalF);
                            int PlaceF = 0;
                            NumberOfOccurancesF = 0;
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            while (PlaceF != -1)
                            {
                                string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 30), "", "" });
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                }

                                CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                NumberOfOccurancesF++;
                            }

                            if (CopyOrginalF.Length > 30)
                            {
                                int len = CopyOrginalF.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (CopyOrginalF != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 30), "", "" });
                                        CopyOrginalF = CopyOrginalF.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                            }

                            if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                            else
                            {
                                if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                            }
                            dtblstrm.Rows.Add(new object[] { strNotes, "", "", NumberOfOccurancesF.ToString() });
                        }

                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });


                        DataTable prndtblINV6 = new DataTable();
                        prndtblINV6 = FetchCOSD();
                        double dblSDTotal = 0;
                        foreach (DataRow dr in prndtblINV6.Rows)
                        {

                            string strDeptID = "";
                            string strDeptDesc = "";
                            double dblSalesAmount = 0;
                            strDeptID = dr["DeptID"].ToString();
                            strDeptDesc = dr["DeptDesc"].ToString();
                            dblSalesAmount = GeneralFunctions.fnDouble(dr["SalesAmount"].ToString());
                            dblSDTotal = dblSDTotal + dblSalesAmount;

                            dtblstrm.Rows.Add(new object[] { SP1 + strDeptID, SP1 + strDeptDesc, GetFotmatDoubleValue(dblSalesAmount) });
                        }
                        prndtblINV6.Dispose();

                        dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total_Sales, "", GetFotmatDoubleValue(dblSDTotal) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    /*if ((IsCloseout) && (Settings.CloseoutExport == "Y"))
                    {
                        if (!blexecuteexport)
                        {
                            Expr = ExecuteExport(dtblH, dtblT);
                            blexecuteexport = true;
                        }

                    }*/
                    dtblH.Dispose();
                    dtblT.Dispose();


                    /*if ((IsCloseout) && (Settings.CentralExportImport == "Y") && (strCloseoutType == "C"))
                    {
                        if (!blexecutecentralexport)
                        {

                            strExportPath = ExpFileName();

                            bool blproceed = true;
                            bool blprev = CheckIfExportedToday();
                            if (blprev)
                            {
                                if (DocMessage.MsgConfirmation(Translation.SetMultilingualTextInCodes("Data has already been exported to central office today." + "\n" + "Do you want to continue agian?") == DialogResult.Yes)
                                {
                                    blproceed = true;
                                }
                                else
                                {
                                    blproceed = false;
                                }
                            }
                            else
                            {
                                if (DocMessage.MsgConfirmation(Translation.SetMultilingualTextInCodes("Do you want to export data to central office?") == DialogResult.Yes)
                                {
                                    blproceed = true;
                                }
                                else
                                {
                                    blproceed = false;
                                }
                            }
                            if (!blproceed) return;
                            blViewPrevFile = false;
                            try
                            {
                                Cursor.Current = Cursors.WaitCursor;
                                int rtn = ExecuteExport();
                                if (rtn == 0)
                                {
                                    UpdateSalesExportFlag();
                                    UpdateEmployeeAttnExportFlag();
                                    InsertExpImpLog("E", strExportFile, strExportPath);

                                    DocMessage.MsgInformation(Translation.SetMultilingualTextInCodes("Data exported to central office successfully." + "\n" + "File saved in " + strExportPath);
                                    System.Diagnostics.Process p = new System.Diagnostics.Process();
                                    p.StartInfo.FileName = strExportPath;
                                    p.Start();
                                }
                                if (rtn == 1)
                                {
                                    DocMessage.MsgInformation(Translation.SetMultilingualTextInCodes("No data found for export to central office.");
                                }
                                if (rtn == 2)
                                {
                                    DocMessage.MsgInformation(Translation.SetMultilingualTextInCodes("Permission error while exporting to central office...");
                                }
                            }
                            finally
                            {
                                Cursor.Current = Cursors.Default;
                            }

                            blexecutecentralexport = true;
                        }
                    }*/
                }

                if (strPrintType == "No Sale")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; //Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }
                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strTransDate = "";


                    prndtblINV = FetchPaidOut(intInvNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    }
                    prndtblINV.Dispose();
                    dtblstrm.Rows.Add(new object[] { "**** " + Properties.Resources.No_Sale + " ****", "", "" });

                    // --------------- Receipt Footer --------------

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                }

                if (strPrintType == "Paid Out")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strTransDate = "";


                    prndtblINV = FetchPaidOut(intPaidOutTranNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    }
                    prndtblINV.Dispose();

                    dtblstrm.Rows.Add(new object[] { "**** " + Properties.Resources.Paid_Out + " ****", "", "" });
                    dtblstrm.Rows.Add(new object[] { strPaidOutDesc, "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Amount + ": " + GetFotmatDoubleValue(dblPaidOutAmount), "", "" });


                   
                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                        if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });


                            }
                        }

                        
                    }
                    prndtblINV2.Dispose();


                   

                    // --------------- Receipt Footer --------------

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                }

                if (strPrintType == "Paid In")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", " *** DEMO VERSION *** ", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strTransDate = "";


                    prndtblINV = FetchPaidOut(intPaidOutTranNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    }
                    prndtblINV.Dispose();

                    dtblstrm.Rows.Add(new object[] { "**** " + "Paid In" + " ****", "", "" });
                    dtblstrm.Rows.Add(new object[] { strPaidOutDesc, "", "" });
                    dtblstrm.Rows.Add(new object[] { "Amount" + ": " + GetFotmatDoubleValue(dblPaidOutAmount), "", "" });


                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                        if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });


                            }
                        }


                    }
                    prndtblINV2.Dispose();


                    // --------------- Receipt Footer --------------

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "Date:", "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { "Store:" + intStoreID.ToString(), "", "Clerk:" + strEmpID });
                    dtblstrm.Rows.Add(new object[] { "Terminal" + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                }



                if (strPrintType == "Safe Drop")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", " *** DEMO VERSION *** ", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strTransDate = "";


                    prndtblINV = FetchPaidOut(intPaidOutTranNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    }
                    prndtblINV.Dispose();

                    dtblstrm.Rows.Add(new object[] { "**** " + "Safe Drop" + " ****", "", "" });
                    dtblstrm.Rows.Add(new object[] { "Amount" + ": " + GetFotmatDoubleValue(dblPaidOutAmount), "", "" });


                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                        if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                if (!FindNewTemplate) dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });


                            }
                        }


                    }
                    prndtblINV2.Dispose();


                    // --------------- Receipt Footer --------------

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "Date:", "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { "Store:" + intStoreID.ToString(), "", "Clerk:" + strEmpID });
                    dtblstrm.Rows.Add(new object[] { "Terminal" + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                }


                if (strPrintType == "Lotto Payout")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strTransDate = "";


                    prndtblINV = FetchPaidOut(intPaidOutTranNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    }
                    prndtblINV.Dispose();

                    dtblstrm.Rows.Add(new object[] { "**** " + Properties.Resources.Lotto_Payout + " ****", "", "" });
                    dtblstrm.Rows.Add(new object[] { strPaidOutDesc, "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Amount + ": " + GetFotmatDoubleValue(dblPaidOutAmount), "", "" });

                    // --------------- Receipt Footer --------------

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                }


                if (strPrintType == "Customer Label")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);

                    DataTable prndtblINV = new DataTable();

                    string strcompany = "";
                    string strcust = "";
                    string stradd = "";

                    prndtblINV = FetchCustInfo(intInvNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        strcompany = dr["Company"].ToString();
                        strcust = dr["CustomerName"].ToString();
                        stradd = dr["MailAddress"].ToString();

                    }
                    prndtblINV.Dispose();


                    dtblstrm.Rows.Add(new object[] { strcompany, "", "" });

                    if (stradd != "")
                    {
                        string OrginalH = stradd;

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Attn + " :", "", "" });
                    dtblstrm.Rows.Add(new object[] { strcust, "", "" });
                }
            }
            else
            {
                if (strPrintType == "Gift Receipt")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    

                    
                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    }
                    prndtblINV.Dispose();





                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }





                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Line")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {
                           
                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            

                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            
                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            
                        }

                        else if (dr["GroupName"].ToString() == "Details")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable prndtblINV1 = new DataTable();
                            prndtblINV1 = FetchGCReceipts();
                            double dblTempTotal = 0;
                            int i = 0;
                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {
                                i++;
                                string strDescription = "";
                                string strSKU = "";
                                double dblQty = 0;
                                string strInvNotes = "";
                                strSKU = dr1["SKU"].ToString();
                                strDescription = dr1["Description"].ToString();
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                strInvNotes = dr1["Notes"].ToString();
                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";
                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm.Rows.Add(new object[] { sPD1, "", "", "","Y", pval });

                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD2, "", "", "", "Y", pval });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm.Rows.Add(new object[] { sPD3, "", "", "", "Y", pval });
                                }

                                dtblstrm.Rows.Add(new object[] { GetFotmatDoubleValue(dblQty), "", "", "", "Y", pval });

                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, 30, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;
                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > 30)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(30, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", "","Y",pval });
                                }





                            }
                            prndtblINV1.Dispose();
                        }

                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Gift Receipt Caption")
                            {
                                dtblstrm.Rows.Add(new object[] { "*** Gift Receipt ***", "", "", "", "Y", pval });
                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {
                                
                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {
                                
                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {
                                
                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {
                                
                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                if (strCustAddress != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText("Address: " + strCustAddress, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Card Holder Copy")
                            {
                               
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    this.intPageCounter++;
                }

                if (strPrintType == "Rent Issue")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                   

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";

                    string calcflag = "";


                    double dblFees = 0;
                    double dblFeesTax = 0;


                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();

                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                        serviceT = dr["ServiceType"].ToString();
                        calcflag = dr["IsRentCalculated"].ToString();

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());
                    }

                    prndtblINV.Dispose();

                    

                    

                    

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";
                        string strRentType = "";
                        double dblRentDuration = 1;
                        string dtRentEffectiveFrom = "";

                        string strFeesText = "";
                        string strFeesID = "0";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();

                        TService1 = dr["ServiceType"].ToString();
                        strRentType = dr["RentType"].ToString();
                        dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());


                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();

                        string rentdisplay = "";

                        int rnt = 0;
                        string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);

                        if (strRentType == "MI") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.on_minute_basis : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.min_;
                        if (strRentType == "HR") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.hourly : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.hr_;
                        if (strRentType == "HD") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.half_day : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.half_day_s_;
                        if (strRentType == "DY") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.daily : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.day_s_;
                        if (strRentType == "WK") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.weekly : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.week_s_;
                        if (strRentType == "MN") rentdisplay = (calcflag == "Y") ? " " +
                                Properties.Resources.monthly : " " +
                                Properties.Resources._for + " " + rntvl + " " +
                                Properties.Resources.month_s_;

                        dtRentEffectiveFrom = GeneralFunctions.fnDate(dr["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        

                        

                        int val = 0;
                        string qval = int.TryParse(dblQty.ToString(), out val) ? val.ToString() : GetFotmatDoubleValue(dblQty);
                        

                    }
                    

                    // -------------- Sub Total ----------------

                    if ((!blIsRentReturned) && (calcflag == "N"))
                    {
                        

                        if (dblDiscount != 0) // -------------- Discount ----------------
                        {
                            
                        }

                        // -------------- Tax ----------------
                        if (dblTax != 0)
                        {
                            
                        }

                        if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                        {
                           
                        }

                        

                    }

                    if (dblRentalSecurityDeposit > 0)
                    {
                        
                    }
                    // -------------- Total ----------------

                    if (calcflag == "N")
                    {
                        
                    }

                    // --------------- Tender --------------


                   // dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;


                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                        //dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                //dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                //dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;

                        if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }
                    prndtblINV2.Dispose();

                    if (dblTotalSale + dblRentalSecurityDeposit - dblTempTender != 0) // --------------- Change Due --------------
                    {
                        //dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Change + " ", "", "(" + GetFotmatDoubleValue(dblTempTender + dblRentalSecurityDeposit - dblTotalSale) + ")", "" });
                    }
                    //else dtblstrm.Rows.Add(new object[] { "", "", "", "" });


                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }

                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Details")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }


                            
                            prndtblINV1 = FetchInvDetails(dblTotalSale);
                            
                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {
                              
                                string strDescription = "";
                                string strDiscText = "";
                                string strDiscID = "0";
                                double dblDisc = 0;
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                string strInvNotes = "";
                                string tgininv = "";
                                int ipid = 0;

                                string TService1 = "";
                                string strRentType = "";
                                double dblRentDuration = 1;
                                string dtRentEffectiveFrom = "";

                                string strFeesText = "";
                                string strFeesID = "0";

                                string PUOM = "";
                                PUOM = dr1["UOM"].ToString();

                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();
                                ipid = GeneralFunctions.fnInt32(dr1["ProductID"].ToString());
                                tgininv = dr1["TaggedInInvoice"].ToString();
                                strSKU = dr1["SKU"].ToString();
                                strDiscText = dr1["DiscountText"].ToString();
                                strDiscID = dr1["DiscountID"].ToString();
                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr1["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());
                                dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                                strDP = dr1["DP"].ToString();
                                strInvNotes = dr1["Notes"].ToString();

                                TService1 = dr1["ServiceType"].ToString();
                                strRentType = dr1["RentType"].ToString();
                                dblRentDuration = GeneralFunctions.fnDouble(dr1["RentDuration"].ToString());


                                strFeesID = dr1["FeesID"].ToString();
                                strFeesText = dr1["FeesText"].ToString();

                                string rentdisplay = "";

                                int rnt = 0;
                                string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);

                                if (strRentType == "MI") rentdisplay = (calcflag == "Y") ? " " +
                                        Properties.Resources.on_minute_basis : " " +
                                        Properties.Resources._for + " " + rntvl + " " +
                                        Properties.Resources.min_;
                                if (strRentType == "HR") rentdisplay = (calcflag == "Y") ? " " +
                                        Properties.Resources.hourly : " " +
                                        Properties.Resources._for + " " + rntvl + " " +
                                        Properties.Resources.hr_;
                                if (strRentType == "HD") rentdisplay = (calcflag == "Y") ? " " +
                                        Properties.Resources.half_day : " " +
                                        Properties.Resources._for + " " + rntvl + " " +
                                        Properties.Resources.half_day_s_;
                                if (strRentType == "DY") rentdisplay = (calcflag == "Y") ? " " +
                                        Properties.Resources.daily : " " +
                                        Properties.Resources._for + " " + rntvl + " " +
                                        Properties.Resources.day_s_;
                                if (strRentType == "WK") rentdisplay = (calcflag == "Y") ? " " +
                                        Properties.Resources.weekly : " " +
                                        Properties.Resources._for + " " + rntvl + " " +
                                        Properties.Resources.week_s_;
                                if (strRentType == "MN") rentdisplay = (calcflag == "Y") ? " " +
                                        Properties.Resources.monthly : " " +
                                        Properties.Resources._for + " " + rntvl + " " +
                                        Properties.Resources.month_s_;

                                dtRentEffectiveFrom = GeneralFunctions.fnDate(dr1["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm.Rows.Add(new object[] { sPD1, "", "", "Item","Y",ptextval });

                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD2, "", "",  "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm.Rows.Add(new object[] { sPD3, "", "",  "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                    if (strMV2 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "",  "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "",  "Item", "Y", ptextval });
                                    }
                                }

                                if (strDiscText != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                                }

                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    if (strFeesText != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "",  "Item", "Y", ptextval });
                                    }
                                }

                                int val = 0;
                                string qval = int.TryParse(dblQty.ToString(), out val) ? val.ToString() : GetFotmatDoubleValue(dblQty);
                                if (calcflag == "N")
                                {
                                    dtblstrm.Rows.Add(new object[] { rentdisplay, "", "", "", "Item", "Y", ptextval });
                                    dtblstrm.Rows.Add(new object[] { GetFotmatProductValue(dblPrice, strDP), qval, GetFotmatDoubleValue(dblTotalPrice), "", "Detail", "Y", pval });
                                }
                                else
                                    dtblstrm.Rows.Add(new object[] { SP1 + rentdisplay + " " + qval, "", "",  "Item", "Y", ptextval });

                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, 30, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;

                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > 30)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(30, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", "Item", "Y", ptextval });
                                }
                            }

                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            if ((!blIsRentReturned) && (calcflag == "N"))
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValueWithCurrency(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "","Y",pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            if ((!blIsRentReturned) && (calcflag == "N"))
                            {
                                if (dblDiscount != 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                    string strDiscountCaption = Properties.Resources.Discount;
                                    dtblstrm.Rows.Add(new object[] { strDiscountCaption + ": " + GetFotmatDoubleValue(dblDiscount), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            if ((!blIsRentReturned) && (calcflag == "N"))
                            {
                                if (dblTax != 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    if (dblTax1 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName1 + " " + GetFotmatDoubleValueWithCurrency(dblTax1), "", "", "", "Y", pval });

                                    }
                                    if (dblTax2 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName2 + " " + GetFotmatDoubleValueWithCurrency(dblTax2), "", "", "", "Y", pval });
                                    }
                                    if (dblTax3 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName3 + " " + GetFotmatDoubleValueWithCurrency(dblTax3), "", "", "", "Y", pval });
                                    }
                                }

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            if ((!blIsRentReturned) && (calcflag == "N"))
                            {
                                if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                                {
                                    DataTable dFees = FetchInvFees();
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    if (dblFees + dblFeesCoupon != 0)
                                    {
                                        if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                        if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValue(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                    }
                                    if (dblFeesTax + dblFeesCouponTax != 0)
                                    {
                                        if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                        if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {
                            if ((!blIsRentReturned) && (calcflag == "N"))
                            {
                                if (dblCoupon != 0)
                                {
                                    DataTable dtblCpn = new DataTable();
                                    dtblCpn = FetchInvCoupon();
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket + ": " + GetFotmatDoubleValueWithCurrency(dblCoupon), "", "", "", "Y", pval });

                                    if (dtblCpn.Rows.Count > 0)
                                    {
                                        foreach (DataRow drc in dtblCpn.Rows)
                                        {
                                            string strTender = "";
                                            double dblAmount = 0;

                                            strTender = drc["Name"].ToString();

                                            string sPD1 = "";
                                            string sPD2 = "";
                                            string sPD3 = "";

                                            SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);


                                            dtblstrm.Rows.Add(new object[] { sPD1, "", "", "", "Y", pval });

                                            if (sPD2.Trim() != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { sPD2, "", "", "", "Y", pval });
                                            }

                                            if (sPD3.Trim() != "")
                                            {

                                                dtblstrm.Rows.Add(new object[] { sPD3, "", "", "", "Y", pval });
                                            }


                                            dblAmount = GeneralFunctions.fnDouble(drc["Amount"].ToString());
                                            dtblstrm.Rows.Add(new object[] { GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });
                                        }
                                    }
                                }

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {
                            if (dblRentalSecurityDeposit > 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit + ": " + GetFotmatDoubleValueWithCurrency(dblRentalSecurityDeposit), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            if (calcflag == "N")
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblTotalSale + dblRentalSecurityDeposit), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                           
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                            DataTable prndtblINV21 = new DataTable();
                            prndtblINV21 = FetchInvTender();

                            foreach (DataRow dr1 in prndtblINV21.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr1["DisplayAs"].ToString();
                                dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                dtblstrm.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                {
                                    double cashbk = 0;
                                    cashbk = FetchCashBack(dblAmount);
                                    if (cashbk != 0)
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                    }
                                }


                            }
                            prndtblINV21.Dispose();

                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (dblTotalSale + dblRentalSecurityDeposit - dblTempTender != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValue(dblTempTender + dblRentalSecurityDeposit - dblTotalSale), "", "", "", "Y", pval });
                            }

                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                           

                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drgc in dtblGC.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GC + "#:" + drgc["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drgc["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }

                            }
                            dtblGC.Dispose();

                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drebt in dtblEBT.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + drebt["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drebt["CardBalance"].ToString())), "", "", "Y", pval });
                                }

                            }
                            dtblEBT.Dispose();




                            int prmmgc = 0;
                            PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                            obcc01mgc.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc = new DataTable();
                            PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                            obcc11mgc.Connection = SystemVariables.Conn;
                            ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                            bool mgc = false;
                            int mgcnt = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                            {
                                if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                    || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                                {
                                    mgcnt++;
                                    if (mgcnt == 1)
                                    {
                                        mgc = true;
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc)
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }






                            int prmebt = 0;
                            PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                            obcc01mgc33.Connection = SystemVariables.Conn;
                            prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc3 = new DataTable();
                            PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                            obcc11mgc55.Connection = SystemVariables.Conn;
                            ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                            bool mgc4 = false;
                            int mgcnt4 = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                            {
                                if (drmgc["CardType"].ToString() == "Food Stamps")
                                {
                                    mgcnt4++;
                                    if (mgcnt4 == 1)
                                    {
                                        mgc4 = true;
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc4)
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }


                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (boolHATender)
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            
                            if (boolSCrdtTender)
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            

                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (blCardPayment)
                            {
                                int prm = 0;
                                PosDataObject.POS obcc01 = new PosDataObject.POS();
                                obcc01.Connection = SystemVariables.Conn;
                                prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                                DataTable ccdtbl11 = new DataTable();
                                PosDataObject.POS obcc11 = new PosDataObject.POS();
                                obcc11.Connection = SystemVariables.Conn;
                                ccdtbl11 = obcc11.FetchCardData(prm);


                                foreach (DataRow drcc in ccdtbl11.Rows)
                                {
                                    if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                    if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                    if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                    if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                    strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                    strCardNum = drcc["RefCardAct"].ToString();
                                    strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                    strCardLogo = drcc["RefCardLogo"].ToString();
                                    strCardEntry = drcc["RefCardEntry"].ToString();
                                    strApprovalNum = drcc["RefCardAuthID"].ToString();
                                    strTranID = drcc["RefCardTranID"].ToString();
                                    strApprovedAmt = drcc["RefCardAuthAmount"].ToString();


                                    if (Settings.POSCardPayment == "Y")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + " :" + strCardLogo, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Credit")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (strCardType == "Debit")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Mercury")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "Precidia")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "EBT")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (Settings.AcceptTips == "Y")
                                    {
                                        if (Settings.ShowTipsInReceipt == "Y")
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                            //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });


                                        }
                                    }


                                    if (strCardType == "Credit")
                                    {
                                        if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                            || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                            ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                             || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                            || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });

                                            dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "", " ", "", "Y", pval });
                                        }
                                    }

                                    if (strCardType == "Debit")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Reprint/Void Caption")
                            {


                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            if (dr["GroupName"].ToString() == "Rent Issue Caption")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Rent___Issue, "", "", "", "Y", pval });
                            }

                            

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                if (strCustAddress != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText("Address: " + strCustAddress, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                //if (strCustDOB != "")
                                //{
                                    //dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                //}

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Card Holder Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARDHOLDER_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    this.intPageCounter++;
                }

                if (strPrintType == "Return Rent Item")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                   

                    // -----------------  Receipt Header ---------------

                    

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblRentalSecurityDeposit = 0;
                    int intRentParent = 0;
                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";
                    string calcflag = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    double Tot = 0;
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        intRentParent = GeneralFunctions.fnInt32(dr["RentParentID"].ToString());
                        serviceT = dr["ServiceType"].ToString();

                        calcflag = dr["IsRentCalculated"].ToString();
                        Tot = Tot + dblTotalSale;
                    }
                    prndtblINV.Dispose();

                    
                   
                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";
                        string strRentType = "";
                        double dblRentDuration = 1;
                        string dtRentEffectiveFrom = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();

                        TService1 = dr["ServiceType"].ToString();
                        strRentType = dr["RentType"].ToString();
                        dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());

                        string rentdisplay = "";

                        int rnt = 0;
                        string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);

                        if (TService1 == "Rent")
                        {
                            if (strRentType == "MI") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.min_;
                            if (strRentType == "HR") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.hr_;
                            if (strRentType == "HD") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.half_day_s_;
                            if (strRentType == "DY") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.day_s_;
                            if (strRentType == "WK") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.week_s_;
                            if (strRentType == "MN") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.month_s_;
                            dtRentEffectiveFrom = GeneralFunctions.fnDate(dr["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        }

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                      

                        int qval = 0;
                        string val = int.TryParse((-dblQty).ToString(), out qval) ? qval.ToString() : GetFotmatDoubleValue(-dblQty);

                        
                        
                    }

                    //prndtblINV1.Dispose();

                   

                    DataTable dtblR = new DataTable();
                    dtblR = FetchRentParentHeader(intRentParent);
                    double val1 = 0;
                    double val2 = 0;
                    foreach (DataRow drr in dtblR.Rows)
                    {
                        val1 = GeneralFunctions.fnDouble(drr["RentDeposit"].ToString());
                        val2 = GeneralFunctions.fnDouble(drr["DueAmount"].ToString());
                    }

                    
                    if (val1 > 0)
                    {
                        //dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit, "", GetFotmatDoubleValue(val1), "" });
                       // dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    if (dblRentalSecurityDeposit != 0)
                    {
                        //dtblstrm.Rows.Add(new object[] { Properties.Resources.Return_Deposit, "", GetFotmatDoubleValue(dblRentalSecurityDeposit), "" });
                       // dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if ((val1 > 0) && (val2 > 0))
                    {
                        //dtblstrm.Rows.Add(new object[] { Properties.Resources.Due + " ", "", GetFotmatDoubleValue(val2), "" });
                        //dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }

                    double dblTempTender = 0;

                    if ((dblRentalSecurityDeposit != 0) || ((calcflag == "Y") && (Tot != 0)))
                    {
                        
                        DataTable prndtblINV2 = new DataTable();
                        prndtblINV2 = FetchInvTender();
                        
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            //dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    //dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                   // dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                        }
                        prndtblINV2.Dispose();

                        




                        

                    }

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Details")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }

                            
                            prndtblINV1 = FetchInvDetails(dblTotalSale);
                            
                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {
                               
                                string strDescription = "";
                                string strDiscText = "";
                                string strDiscID = "0";
                                double dblDisc = 0;
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                string strInvNotes = "";
                                string tgininv = "";
                                int ipid = 0;

                                string TService1 = "";
                                string strRentType = "";
                                double dblRentDuration = 1;
                                string dtRentEffectiveFrom = "";

                                string PUOM = "";
                                PUOM = dr1["UOM"].ToString();

                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();
                                ipid = GeneralFunctions.fnInt32(dr1["ProductID"].ToString());
                                tgininv = dr1["TaggedInInvoice"].ToString();
                                strSKU = dr1["SKU"].ToString();
                                strDiscText = dr1["DiscountText"].ToString();
                                strDiscID = dr1["DiscountID"].ToString();
                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr1["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());
                                dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                                strDP = dr1["DP"].ToString();
                                strInvNotes = dr1["Notes"].ToString();

                                TService1 = dr1["ServiceType"].ToString();
                                strRentType = dr1["RentType"].ToString();
                                dblRentDuration = GeneralFunctions.fnDouble(dr1["RentDuration"].ToString());

                                string rentdisplay = "";

                                int rnt = 0;
                                string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);

                                if (TService1 == "Rent")
                                {
                                    if (strRentType == "MI") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.min_;
                                    if (strRentType == "HR") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.hr_;
                                    if (strRentType == "HD") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.half_day_s_;
                                    if (strRentType == "DY") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.day_s_;
                                    if (strRentType == "WK") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.week_s_;
                                    if (strRentType == "MN") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.month_s_;
                                    dtRentEffectiveFrom = GeneralFunctions.fnDate(dr1["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                                }

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm.Rows.Add(new object[] { sPD1, "", "", "Item", "Y",ptextval });

                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                    if (strMV2 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                    }
                                }

                                int qval = 0;
                                string val = int.TryParse((-dblQty).ToString(), out qval) ? qval.ToString() : GetFotmatDoubleValue(-dblQty);

                                if (calcflag == "N")
                                {
                                    dtblstrm.Rows.Add(new object[] { rentdisplay + " " + val, "", "", "Item", "Y", ptextval });
                                  
                                }

                                if (calcflag == "Y")
                                {
                                    dtblstrm.Rows.Add(new object[] {  rentdisplay, "", "", "Item", "Y", ptextval });
                                    dtblstrm.Rows.Add(new object[] { GetFotmatDoubleValue(dblPrice), val, GetFotmatDoubleValue(dblPrice * -dblQty * dblRentDuration), "Detail", "Y", pval });
                                }

                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, 30, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;

                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > 30)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(30, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", "Item", "Y", ptextval });
                                }
                            }
                            prndtblINV1.Dispose();



                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            if (dblTax != 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                if (dblTax1 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName1 + GetFotmatDoubleValueWithCurrency(dblTax1), "", "", "", "Y", pval });

                                }
                                if (dblTax2 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName2 + GetFotmatDoubleValueWithCurrency(dblTax2), "", "", "", "Y", pval });
                                }
                                if (dblTax3 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName3 + GetFotmatDoubleValueWithCurrency(dblTax3), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {
                            if (val1 > 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit + ": " + GetFotmatDoubleValueWithCurrency(val1), "", "", "","Y",pval });
                                
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Return Deposit Amount")
                        {
                            if (dblRentalSecurityDeposit > 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Return_Deposit + ": " + GetFotmatDoubleValueWithCurrency(dblRentalSecurityDeposit), "", "", "", "Y", pval });

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Due Amount")
                        {
                            if ((val1 > 0) && (val2 > 0))
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Due + ": " + GetFotmatDoubleValueWithCurrency(val2), "", "", "", "Y", pval });

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            if ((dblRentalSecurityDeposit != 0) || ((calcflag == "Y") && (Tot != 0)))
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(Tot), "", "", "", "Y", pval });

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            if ((dblRentalSecurityDeposit != 0) || ((calcflag == "Y") && (Tot != 0)))
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                                DataTable prndtblINV21 = new DataTable();
                                prndtblINV21 = FetchInvTender();

                                foreach (DataRow dr1 in prndtblINV21.Rows)
                                {
                                    string strTender = "";
                                    double dblAmount = 0;

                                    strTender = dr1["DisplayAs"].ToString();
                                    dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                    if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                    if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                    dtblstrm.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                    if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                    {
                                        double cashbk = 0;
                                        cashbk = FetchCashBack(dblAmount);
                                        if (cashbk != 0)
                                        {

                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                        }
                                    }


                                }
                                prndtblINV21.Dispose();
                            }
                                

                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if ((dblRentalSecurityDeposit != 0) || ((calcflag == "Y") && (Tot != 0)))
                            {
                                if (Tot - dblTempTender != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValueWithCurrency(dblTempTender - Tot), "", "", "", "Y", pval });
                                }
                            }

                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Rent Return Caption")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Rent___Return, "", "", "", "Y", pval });

                            }

                            if (dr["GroupName"].ToString() == "Reference Invoice Number")
                            {
                                dtblstrm.Rows.Add(new object[] { "Ref. Invoice # " + intRentParent.ToString(), "", "", "", "Y", pval });

                            }

                            if (dr["GroupName"].ToString() == "Training Mode")
                            {
                                if (Settings.PrintTrainingMode == "Y")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Training, "", "", "", "Y", pval });
                                }
                            }

                            

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                if (strCustAddress != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText("Address: " + strCustAddress, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                //if (strCustDOB != "")
                                //{
                                //dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                //}

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Card Holder Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARDHOLDER_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    this.intPageCounter++;
                }

                if (strPrintType == "Repair In")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strCustPhone = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string serviceT = "";

                    double rpTotal = 0;
                    double rpAdvance = 0;
                    double rpDue = 0;

                    string rpDesc = "";

                    string rpStatus = "";
                    string rpInDate = "";
                    string rpDelDate = "";
                    string rpNotfDate = "";

                    string rpItem = "";
                    string rpSL = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strCustPhone = dr["CustMobile"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                        rpTotal = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr["RepairDueAmount"].ToString());
                        rpDesc = dr["RepairProblem"].ToString();

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        rpInDate = GeneralFunctions.fnDate(dr["RepairDateIn"].ToString()).ToString("d");

                        if (dr["RepairDeliveryDate"].ToString() != "")
                            rpDelDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToString("d");
                        if (dr["RepairNotifiedDate"].ToString() != "")
                            rpNotfDate = GeneralFunctions.fnDate(dr["RepairNotifiedDate"].ToString()).ToString("d");

                        serviceT = dr["ServiceType"].ToString();

                        rpItem = dr["RepairItemName"].ToString();

                        rpSL = dr["RepairItemSlNo"].ToString();
                    }
                    prndtblINV.Dispose();

                    intWO = FetchWorkorderNo();

                    
                    

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";

                        string strFeesID = "0";
                        string strFeesText = "";


                        string strrpItemTag = "";
                        string strrpItemSLNO = "";
                        string dtrpPurchaseDate = "";
                        string dtrpDeliveryDate = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();
                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        TService1 = dr["ServiceType"].ToString();
                        strrpItemTag = dr["RepairItemTag"].ToString();
                        strrpItemSLNO = dr["RepairItemSLNO"].ToString();

                        if (dr["RepairItemPurchaseDate"].ToString() != "")
                            dtrpPurchaseDate = GeneralFunctions.fnDate(dr["RepairItemPurchaseDate"].ToString()).ToString("d");

                        if (dr["RepairItemDeliveryDate"].ToString() != "")
                            dtrpDeliveryDate = GeneralFunctions.fnDate(dr["RepairItemDeliveryDate"].ToString()).ToString("d");

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                       

                        
                        

                       
                    }

                    //prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                  
                    if (dblDiscount != 0) // -------------- Discount ----------------
                    {
                        
                    }

                    // -------------- Tax ----------------
                    if (dblTax != 0)
                    {
                        
                    }


                    if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                    {
                        
                    }

                    

                    


                    // -------------- Total ----------------

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    double dblTempTender = 0;
                    if (rpAdvance > 0)
                    {
                        


                        DataTable prndtblINV2 = new DataTable();
                        prndtblINV2 = FetchInvTender();
                        
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            //dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    //dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    //dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                            if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                        }
                        prndtblINV2.Dispose();

                       
                    }


                    //Block

                    /*
                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY + " " + GetFotmatDoubleValue(rpDue), "" });

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "X", "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                    dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                    */

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Details")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }

                           
                            prndtblINV1 = FetchInvDetails(dblTotalSale);
                            
                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {
                                i++;
                                string strDescription = "";
                                string strDiscText = "";
                                string strDiscID = "0";
                                double dblDisc = 0;
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                string strInvNotes = "";
                                string tgininv = "";
                                int ipid = 0;

                                string TService1 = "";

                                string strFeesID = "0";
                                string strFeesText = "";


                                string strrpItemTag = "";
                                string strrpItemSLNO = "";
                                string dtrpPurchaseDate = "";
                                string dtrpDeliveryDate = "";

                                string PUOM = "";
                                PUOM = dr1["UOM"].ToString();

                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();
                                ipid = GeneralFunctions.fnInt32(dr1["ProductID"].ToString());
                                tgininv = dr1["TaggedInInvoice"].ToString();
                                strSKU = dr1["SKU"].ToString();
                                strDiscText = dr1["DiscountText"].ToString();
                                strDiscID = dr1["DiscountID"].ToString();
                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr1["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());
                                dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                                strDP = dr1["DP"].ToString();
                                strInvNotes = dr1["Notes"].ToString();
                                strFeesID = dr1["FeesID"].ToString();
                                strFeesText = dr1["FeesText"].ToString();
                                TService1 = dr1["ServiceType"].ToString();
                                strrpItemTag = dr1["RepairItemTag"].ToString();
                                strrpItemSLNO = dr1["RepairItemSLNO"].ToString();

                                if (dr1["RepairItemPurchaseDate"].ToString() != "")
                                    dtrpPurchaseDate = GeneralFunctions.fnDate(dr1["RepairItemPurchaseDate"].ToString()).ToString("d");

                                if (dr1["RepairItemDeliveryDate"].ToString() != "")
                                    dtrpDeliveryDate = GeneralFunctions.fnDate(dr1["RepairItemDeliveryDate"].ToString()).ToString("d");

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm.Rows.Add(new object[] { sPD1, "", "", "Item","Y",ptextval });

                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                    if (strMV2 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                    }
                                }

                                if (strrpItemSLNO != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.SL + "# " + strrpItemSLNO, "", "", "Item", "Y", ptextval });
                                }

                                if (strrpItemTag != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tag + "# " + strrpItemTag, "", "", "Item", "Y", ptextval });
                                }

                                if (strDiscText != "")
                                {
                                    
                                        dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                                }

                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    if (strFeesText != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "Item", "Y", ptextval });
                                    }
                                }

                                //dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblTotalPrice), "" });
                                dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });

                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, 30, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;

                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > 30)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(30, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", "", "Y", ptextval });
                                }
                                
                            }



                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValueWithCurrency(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "","Y",pval });
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (dblDiscount != 0) // -------------- Discount ----------------
                            {
                               
                                string strDiscountCaption = Properties.Resources.Discount;
                                dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption + ": " + GetFotmatDoubleValueWithCurrency(dblDiscount), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dblTax != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblTax), "","", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                            {
                                DataTable dFees = FetchInvFees();
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                if (dblFees + dblFeesCoupon != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValue(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                }
                                if (dblFeesTax + dblFeesCouponTax != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Transaction/ Advance Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (rpAdvance > 0)
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Tran_Amt_ + ": " + GetFotmatDoubleValueWithCurrency(rpAdvance), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit + ": " + GetFotmatDoubleValueWithCurrency(rpAdvance), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Due + ": " + GetFotmatDoubleValueWithCurrency(rpDue), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(rpTotal), "", "", "", "Y", pval });

                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (rpAdvance > 0)
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                                DataTable prndtblINV21 = new DataTable();
                                prndtblINV21 = FetchInvTender();

                                foreach (DataRow dr1 in prndtblINV21.Rows)
                                {
                                    string strTender = "";
                                    double dblAmount = 0;

                                    strTender = dr1["DisplayAs"].ToString();
                                    dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                    if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                    if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                    dtblstrm.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                    if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                    {
                                        double cashbk = 0;
                                        cashbk = FetchCashBack(dblAmount);
                                        if (cashbk != 0)
                                        {

                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                        }
                                    }


                                }
                                prndtblINV21.Dispose();

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (rpAdvance - dblTempTender != 0)
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValueWithCurrency(dblTempTender - rpAdvance), "", "", "", "Y", pval });

                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drgc in dtblGC.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GC + "#:" + drgc["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drgc["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }

                            }
                            dtblGC.Dispose();

                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drebt in dtblEBT.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + drebt["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drebt["CardBalance"].ToString())), "", "", "Y", pval });
                                }

                            }
                            dtblEBT.Dispose();
                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolHATender)
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolSCrdtTender)
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (blCardPayment)
                            {
                                int prm = 0;
                                PosDataObject.POS obcc01 = new PosDataObject.POS();
                                obcc01.Connection = SystemVariables.Conn;
                                prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                                DataTable ccdtbl11 = new DataTable();
                                PosDataObject.POS obcc11 = new PosDataObject.POS();
                                obcc11.Connection = SystemVariables.Conn;
                                ccdtbl11 = obcc11.FetchCardData(prm);


                                foreach (DataRow drcc in ccdtbl11.Rows)
                                {
                                    if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                    if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                    if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                    if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                    strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                    strCardNum = drcc["RefCardAct"].ToString();
                                    strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                    strCardLogo = drcc["RefCardLogo"].ToString();
                                    strCardEntry = drcc["RefCardEntry"].ToString();
                                    strApprovalNum = drcc["RefCardAuthID"].ToString();
                                    strTranID = drcc["RefCardTranID"].ToString();
                                    strApprovedAmt = drcc["RefCardAuthAmount"].ToString();


                                    if (Settings.POSCardPayment == "Y")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + " :" + strCardLogo, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Credit")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (strCardType == "Debit")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Mercury")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "Precidia")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "EBT")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (Settings.AcceptTips == "Y")
                                    {
                                        if (Settings.ShowTipsInReceipt == "Y")
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                            //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });


                                        }
                                    }


                                    if (strCardType == "Credit")
                                    {
                                        if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                            || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                            ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                             || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                            || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });

                                            dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "", " ", "", "Y", pval });
                                        }
                                    }

                                    if (strCardType == "Debit")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Repair Item Problem")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (rpDesc != "")
                            {
                                
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Problem + ": ", "", "","Y", pval });
                                string OrginalD = "";
                                ArrangeText(rpDesc, 30, ref OrginalD);
                                char FindD = '\n';
                                int NumberOfOccurancesD = 0;


                                string CopyOrginalD = string.Copy(OrginalD);
                                int PlaceD = 0;
                                NumberOfOccurancesD = 0;
                                PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                while (PlaceD != -1)
                                {
                                    string cutstr = CopyOrginalD.Substring(0, PlaceD);

                                    if (cutstr.Length > 30)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesD++;
                                            len = len - 30;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                                    PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                    NumberOfOccurancesD++;
                                }

                                if (CopyOrginalD.Length > 30)
                                {
                                    int len = CopyOrginalD.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesD++;
                                        len = len - 30;
                                        if (CopyOrginalD != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalD = CopyOrginalD.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }

                                if (NumberOfOccurancesD == 0) NumberOfOccurancesD = 1;
                                else
                                {
                                    if ((OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())) NumberOfOccurancesD = NumberOfOccurancesD + 1;
                                }

                                dtblstrm.Rows.Add(new object[] { rpDesc, "", "", "","Y", pval });

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Receipt Footer/Repair Disclaimer")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                         || ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null)))
                            {
                                string MText = "";

                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                    MText = Properties.Resources.CUSTOMER_AGREEMENT_ + "\n" + Settings.ReceiptFooter.Trim();

                                if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                                {
                                    if (MText == "") MText = Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                                    else MText = MText + "\n\n" + Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                                }

                                string OrginalF = "";
                                ArrangeText(MText, 40, ref OrginalF);
                                char FindF = '\n';
                                int NumberOfOccurancesF = 0;


                                string CopyOrginalF = string.Copy(OrginalF);
                                int PlaceF = 0;
                                NumberOfOccurancesF = 0;
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                while (PlaceF != -1)
                                {
                                    string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                    if (cutstr.Length > 40)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 40;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    NumberOfOccurancesF++;
                                }

                                if (CopyOrginalF.Length > 40)
                                {
                                    int len = CopyOrginalF.Length;
                                    while (len >= 40)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 40;
                                        if (CopyOrginalF != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalF = CopyOrginalF.Substring(40, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }
                                if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                else
                                {
                                    if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                }

                                dtblstrm.Rows.Add(new object[] { MText, "", "", "", "Y", pval });

                            }


                        }
                        
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Repair Issue Caption")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Repair + " " + Properties.Resources.Issue, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Date In")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_In + ": " + rpInDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Delivery Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Delivery_Date + " " + rpDelDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Notified Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Notified_Date + " " + rpNotfDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Repair Item Name")
                            {
                                if (rpItem != "")
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Repair_Item + ": " + rpItem, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Repair Item Serial No")
                            {
                                if (rpSL != "")
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Serial + "#: " + rpSL, "", "", "", "Y", pval });
                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Phone")
                            {
                                if (strCustPhone != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Ph_ + ": " + strCustPhone, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                if (strCustAddress != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText("Address: " + strCustAddress, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                //if (strCustDOB != "")
                                //{
                                //dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                //}

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Card Holder Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARDHOLDER_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    this.intPageCounter++;
                }

                if (strPrintType == "Repair Deliver")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strCustPhone = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblRentalSecurityDeposit = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string serviceT = "";

                    double rpTotal = 0;
                    double rpAdvance = 0;
                    double rpDue = 0;

                    string rpProb = "";
                    string rpDesc = "";

                    string rpStatus = "";
                    string rpDelDate = "";
                    string rpNotfDate = "";

                    string rpInDate = "";
                    string rpItem = "";
                    string rpSL = "";

                    int ParentID = 0;
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strCustPhone = dr["CustMobile"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        ParentID = GeneralFunctions.fnInt32(dr["RepairParentID"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());


                        rpTotal = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr["RepairDueAmount"].ToString());

                        if (dr["RepairDeliveryDate"].ToString() != "")
                            rpDelDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToString("d");
                        if (dr["RepairNotifiedDate"].ToString() != "")
                            rpNotfDate = GeneralFunctions.fnDate(dr["RepairNotifiedDate"].ToString()).ToString("d");

                        rpInDate = GeneralFunctions.fnDate(dr["RepairDateIn"].ToString()).ToString("d");

                        rpItem = dr["RepairItemName"].ToString();

                        rpSL = dr["RepairItemSlNo"].ToString();

                        serviceT = dr["ServiceType"].ToString();
                    }
                    prndtblINV.Dispose();

                    
                    



                    

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchRPInvDetails(ParentID);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;
                        string strFeesID = "0";
                        string strFeesText = "";

                        string TService1 = "";

                        string strrpItemTag = "";
                        string strrpItemSLNO = "";
                        string dtrpPurchaseDate = "";
                        string dtrpDeliveryDate = "";

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();
                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        TService1 = dr["ServiceType"].ToString();
                        strrpItemTag = dr["RepairItemTag"].ToString();
                        strrpItemSLNO = dr["RepairItemSLNO"].ToString();
                        if (dr["RepairItemPurchaseDate"].ToString() != "")
                            dtrpPurchaseDate = GeneralFunctions.fnDate(dr["RepairItemPurchaseDate"].ToString()).ToString("d");

                        if (dr["RepairItemDeliveryDate"].ToString() != "")
                            dtrpDeliveryDate = GeneralFunctions.fnDate(dr["RepairItemDeliveryDate"].ToString()).ToString("d");

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);


                        
                    }
                    //prndtblINV1.Dispose();

                    

                    // -------------- Tax ----------------
                    

                    DataTable dtbl2 = new DataTable();
                    dtbl2 = FetchRepairParentHeader(ParentID);
                    foreach (DataRow dr4 in dtbl2.Rows)
                    {
                        rpTotal = GeneralFunctions.fnDouble(dr4["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr4["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr4["RepairDueAmount"].ToString());
                        rpProb = dr4["RepairProblem"].ToString();
                        rpDesc = dr4["RepairNotes"].ToString();
                    }
                   


                    // -------------- Total ----------------

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;
                    double dblTempTender = 0;
                    if (dblTotalSale > 0)
                    {
                        

                        DataTable prndtblINV2 = new DataTable();
                        prndtblINV2 = FetchInvTender();
                        
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            //dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    //dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    //dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                            if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                        }
                        prndtblINV2.Dispose();

                       
                    }

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Details")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }



                            prndtblINV1 = FetchRPInvDetails(ParentID);

                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {

                                string strDescription = "";
                                string strDiscText = "";
                                string strDiscID = "0";
                                double dblDisc = 0;
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                string strInvNotes = "";
                                string tgininv = "";
                                int ipid = 0;
                                string strFeesID = "0";
                                string strFeesText = "";

                                string TService1 = "";

                                string strrpItemTag = "";
                                string strrpItemSLNO = "";
                                string dtrpPurchaseDate = "";
                                string dtrpDeliveryDate = "";

                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();
                                ipid = GeneralFunctions.fnInt32(dr1["ProductID"].ToString());
                                tgininv = dr1["TaggedInInvoice"].ToString();
                                strSKU = dr1["SKU"].ToString();
                                strDiscText = dr1["DiscountText"].ToString();
                                strDiscID = dr1["DiscountID"].ToString();
                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr1["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());
                                dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                                strDP = dr1["DP"].ToString();
                                strInvNotes = dr1["Notes"].ToString();
                                strFeesID = dr1["FeesID"].ToString();
                                strFeesText = dr1["FeesText"].ToString();
                                TService1 = dr1["ServiceType"].ToString();
                                strrpItemTag = dr1["RepairItemTag"].ToString();
                                strrpItemSLNO = dr1["RepairItemSLNO"].ToString();
                                if (dr1["RepairItemPurchaseDate"].ToString() != "")
                                    dtrpPurchaseDate = GeneralFunctions.fnDate(dr1["RepairItemPurchaseDate"].ToString()).ToString("d");

                                if (dr1["RepairItemDeliveryDate"].ToString() != "")
                                    dtrpDeliveryDate = GeneralFunctions.fnDate(dr1["RepairItemDeliveryDate"].ToString()).ToString("d");

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm.Rows.Add(new object[] { sPD1, "", "", "Item", "Y", ptextval });

                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                    if (strMV2 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                    }
                                }



                                if (strrpItemSLNO != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.SL + " # " + strrpItemSLNO, "", "", "Item", "Y", ptextval });
                                }

                                if (strrpItemTag != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tag + " # " + strrpItemTag, "", "", "Item", "Y", ptextval });
                                }

                                if (strDiscText != "")
                                {

                                    dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                                }

                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    if (strFeesText != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "Item", "Y", ptextval });
                                    }
                                }

                                //dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblTotalPrice), "" });

                                dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });

                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, 30, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;

                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > 30)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(30, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", "Item", "Y", ptextval });
                                }

                            }




                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValueWithCurrency(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (dblDiscount != 0) // -------------- Discount ----------------
                            {

                                string strDiscountCaption = Properties.Resources.Discount;
                                dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption + ": " + GetFotmatDoubleValueWithCurrency(dblDiscount), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            if (dblTax != 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                if (dblTax1 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1 + " " + GetFotmatDoubleValueWithCurrency(dblTax1), "", "", "", "Y", pval });

                                }
                                if (dblTax2 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2 + " " + GetFotmatDoubleValueWithCurrency(dblTax2), "", "", "", "Y", pval });
                                }
                                if (dblTax3 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3 + " " + GetFotmatDoubleValueWithCurrency(dblTax3), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                            {
                                DataTable dFees = FetchInvFees();
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                if (dblFees + dblFeesCoupon != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValue(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                }
                                if (dblFeesTax + dblFeesCouponTax != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (rpAdvance > 0)
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit + ": " + GetFotmatDoubleValueWithCurrency(rpAdvance), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (rpAdvance > 0)
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Due + ": " + GetFotmatDoubleValueWithCurrency(rpDue), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(rpTotal), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (dblTotalSale > 0)
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                                DataTable prndtblINV21 = new DataTable();
                                prndtblINV21 = FetchInvTender();

                                foreach (DataRow dr1 in prndtblINV21.Rows)
                                {
                                    string strTender = "";
                                    double dblAmount = 0;

                                    strTender = dr1["DisplayAs"].ToString();
                                    dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                    if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                    if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                    dtblstrm.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                    if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                    {
                                        double cashbk = 0;
                                        cashbk = FetchCashBack(dblAmount);
                                        if (cashbk != 0)
                                        {

                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                        }
                                    }


                                }
                                prndtblINV21.Dispose();

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (dblTotalSale > 0)
                            {
                                if (rpDue - dblTempTender != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValueWithCurrency(dblTempTender - rpDue), "", "", "", "Y", pval });
                                }
                            }

                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {

                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drgc in dtblGC.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GC + "#:" + drgc["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drgc["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }

                            }
                            dtblGC.Dispose();

                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drebt in dtblEBT.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + drebt["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drebt["CardBalance"].ToString())), "", "", "Y", pval });
                                }

                            }
                            dtblEBT.Dispose();




                            int prmmgc = 0;
                            PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                            obcc01mgc.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc = new DataTable();
                            PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                            obcc11mgc.Connection = SystemVariables.Conn;
                            ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                            bool mgc = false;
                            int mgcnt = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                            {
                                if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                    || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                                {
                                    mgcnt++;
                                    if (mgcnt == 1)
                                    {
                                        mgc = true;
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolHATender)
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolSCrdtTender)
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (blCardPayment)
                            {
                                int prm = 0;
                                PosDataObject.POS obcc01 = new PosDataObject.POS();
                                obcc01.Connection = SystemVariables.Conn;
                                prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                                DataTable ccdtbl11 = new DataTable();
                                PosDataObject.POS obcc11 = new PosDataObject.POS();
                                obcc11.Connection = SystemVariables.Conn;
                                ccdtbl11 = obcc11.FetchCardData(prm);


                                foreach (DataRow drcc in ccdtbl11.Rows)
                                {
                                    if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                    if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                    if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                    if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                    strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                    strCardNum = drcc["RefCardAct"].ToString();
                                    strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                    strCardLogo = drcc["RefCardLogo"].ToString();
                                    strCardEntry = drcc["RefCardEntry"].ToString();
                                    strApprovalNum = drcc["RefCardAuthID"].ToString();
                                    strTranID = drcc["RefCardTranID"].ToString();
                                    strApprovedAmt = drcc["RefCardAuthAmount"].ToString();


                                    if (Settings.POSCardPayment == "Y")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + " :" + strCardLogo, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Credit")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (strCardType == "Debit")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Mercury")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "Precidia")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "EBT")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (Settings.AcceptTips == "Y")
                                    {
                                        if (Settings.ShowTipsInReceipt == "Y")
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                            //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });


                                        }
                                    }


                                    if (strCardType == "Credit")
                                    {
                                        if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                            || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                            ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                             || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                            || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });

                                            dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "", " ", "", "Y", pval });
                                        }
                                    }

                                    if (strCardType == "Debit")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                    }
                                }
                            }

                        }
                        else if (dr["GroupName"].ToString() == "Repair Problem")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (rpProb != "")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Problem + ": ", "", "", "Y", pval });
                                string OrginalD = "";
                                ArrangeText(rpProb, 30, ref OrginalD);
                                char FindD = '\n';
                                int NumberOfOccurancesD = 0;


                                string CopyOrginalD = string.Copy(OrginalD);
                                int PlaceD = 0;
                                NumberOfOccurancesD = 0;
                                PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                while (PlaceD != -1)
                                {
                                    string cutstr = CopyOrginalD.Substring(0, PlaceD);

                                    if (cutstr.Length > 30)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesD++;
                                            len = len - 30;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                                    PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                    NumberOfOccurancesD++;
                                }

                                if (CopyOrginalD.Length > 30)
                                {
                                    int len = CopyOrginalD.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesD++;
                                        len = len - 30;
                                        if (CopyOrginalD != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalD = CopyOrginalD.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }

                                if (NumberOfOccurancesD == 0) NumberOfOccurancesD = 1;
                                else
                                {
                                    if ((OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())) NumberOfOccurancesD = NumberOfOccurancesD + 1;
                                }

                                dtblstrm.Rows.Add(new object[] { rpProb, "", "", "", "Y", pval });

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Repair Notes")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (rpDesc != "")
                            {

                                dtblstrm.Rows.Add(new object[] { "Repair" + ": ", "", "", "Y", pval });
                                string OrginalD = "";
                                ArrangeText(rpDesc, 30, ref OrginalD);
                                char FindD = '\n';
                                int NumberOfOccurancesD = 0;


                                string CopyOrginalD = string.Copy(OrginalD);
                                int PlaceD = 0;
                                NumberOfOccurancesD = 0;
                                PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                while (PlaceD != -1)
                                {
                                    string cutstr = CopyOrginalD.Substring(0, PlaceD);

                                    if (cutstr.Length > 30)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesD++;
                                            len = len - 30;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                                    PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                    NumberOfOccurancesD++;
                                }

                                if (CopyOrginalD.Length > 30)
                                {
                                    int len = CopyOrginalD.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesD++;
                                        len = len - 30;
                                        if (CopyOrginalD != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalD = CopyOrginalD.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }

                                if (NumberOfOccurancesD == 0) NumberOfOccurancesD = 1;
                                else
                                {
                                    if ((OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())) NumberOfOccurancesD = NumberOfOccurancesD + 1;
                                }

                                dtblstrm.Rows.Add(new object[] { rpDesc, "", "", "", "Y", pval });

                            }
                        }

                        else if (dr["GroupName"].ToString() == "Repair Signature Line")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "","", "","Y",pval });
                        }
                        else if (dr["GroupName"].ToString() == "Receipt Footer/Repair Disclaimer")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                         || ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null)))
                            {
                                string MText = "";

                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                    MText = Properties.Resources.CUSTOMER_AGREEMENT_ + "\n" + Settings.ReceiptFooter.Trim();

                                if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                                {
                                    if (MText == "") MText = Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                                    else MText = MText + "\n\n" + Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                                }

                                string OrginalF = "";
                                ArrangeText(MText, 40, ref OrginalF);
                                char FindF = '\n';
                                int NumberOfOccurancesF = 0;


                                string CopyOrginalF = string.Copy(OrginalF);
                                int PlaceF = 0;
                                NumberOfOccurancesF = 0;
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                while (PlaceF != -1)
                                {
                                    string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                    if (cutstr.Length > 40)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 40;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    NumberOfOccurancesF++;
                                }

                                if (CopyOrginalF.Length > 40)
                                {
                                    int len = CopyOrginalF.Length;
                                    while (len >= 40)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 40;
                                        if (CopyOrginalF != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalF = CopyOrginalF.Substring(40, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }
                                if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                else
                                {
                                    if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                }

                                dtblstrm.Rows.Add(new object[] { MText, "", "", "", "Y", pval });

                            }


                        }

                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Repair Deliver Caption")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Repair + " " + Properties.Resources.Deliver, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Reference Invoice Number")
                            {
                                dtblstrm.Rows.Add(new object[] { "Ref. Invoice# " + ParentID.ToString(), "", "", "", "Y", pval });

                            }

                            if (dr["GroupName"].ToString() == "Repair Item Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Repair_Item + " : " + rpItem, "", "", "", "Y", pval });

                            }

                            if (dr["GroupName"].ToString() == "Repair Item Serial No")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Serial + " # : " + rpSL, "", "", "", "Y", pval });

                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Phone")
                            {
                                if (strCustPhone != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Ph_ + ": " + strCustPhone, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                if (strCustAddress != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText("Address: " + strCustAddress, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                //if (strCustDOB != "")
                                //{
                                //dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                //}

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Card Holder Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARDHOLDER_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    this.intPageCounter++;
                }

                if (strPrintType == "Reprint Receipt")
                {
                    dummyTest = "";
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace3);


                    
                   

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCustID = "";
                    string strCID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;
                    double dblCoupon = 0;
                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    string strDTaxName = "";
                    double dblDTax = 0;

                    int CustomerOrderRef = 0;

                    string strCustDOB = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        strDTaxName = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();
                    }
                    prndtblINV.Dispose();


                    

                    intWO = FetchWorkorderNo();
                    if (intWO > 0) // work order payment
                    {
                        
                    }

                    
                    


                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;

                    

                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        string strDiscText = "";
                        double dblDisc = 0;
                        string strDescription = "";
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";

                        string strFeesID = "0";
                        string strFeesText = "";
                        int SalePriceID = 0;
                        string iQtyDecimals = "";
                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        int ipid = 0;
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();

                        strSKU = dr["SKU"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();

                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        iQtyDecimals = dr["QtyDecimal"].ToString();

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        if (strPType == "O") dblTotalPrice = -dblTotalPrice;

                        strDiscText = dr["DiscountText"].ToString();
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";
                        
                        

                        

                        
                    }

                    //prndtblINV1.Dispose();



                    // -------------- Sub Total ----------------

                    




                    

                  

                    // --------------- Tender --------------

                    //dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });
                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + dblAmount);
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;
                        


                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                
                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }
                    prndtblINV2.Dispose();

                    if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                    {
                        
                    }

                    /*
                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        DataTable dtblGC = new DataTable();
                        dtblGC = FetchActiveGC(intInvNo);
                        if (dtblGC.Rows.Count > 0)
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "" });

                            dtblstrm.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "" });

                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                            foreach (DataRow dr in dtblGC.Rows)
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "xxx", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())) });
                            }
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                        dtblGC.Dispose();
                    }
                    //}

                    DataTable dtblEBT = new DataTable();
                    dtblEBT = FetchEBTBalance(intInvNo);
                    if (dtblEBT.Rows.Count > 0)
                    {

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "" });

                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                        foreach (DataRow dr in dtblEBT.Rows)
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                        }
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }
                    dtblEBT.Dispose();

                    int prmmgc = 0;
                    PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                    obcc01mgc.Connection = SystemVariables.Conn;
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                    DataTable ccdtbl11mgc = new DataTable();
                    PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                    obcc11mgc.Connection = SystemVariables.Conn;
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                    bool mgc = false;
                    int mgcnt = 0;
                    foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                    {
                        if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                            || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                        {
                            mgcnt++;
                            if (mgcnt == 1)
                            {
                                mgc = true;
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                            dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                        }
                    }
                    if (mgc)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if (boolSCrdtTender) // Print Store Credit Balance
                    {
                        PosDataObject.POS objscrtbal = new PosDataObject.POS();
                        objscrtbal.Connection = SystemVariables.Conn;
                        double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    */


                    /*
                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        dtblstrm.Rows.Add(new object[] { "", "", "  " + Properties.Resources.S_I_G_N_A_T_U_R_E + "     " });
                    }
                    // --------------- Sign --------------
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    // ------------ Setting Receipt Footer -------------

                    */

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Line")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }



                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {
                                
                                string strDescription = "";
                                string strDiscText = "";
                                string strFeesText = "";
                                string strFeesID = "0";
                                string strDiscID = "0";
                                double dblDisc = 0;
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                string strInvNotes = "";
                                string tgininv = "";
                                int ipid = 0;

                                string TService1 = "";
                                string strRentType = "";
                                double dblRentDuration = 1;
                                string dtRentEffectiveFrom = "";

                                string iQtyDecimals = "";

                                int SalePriceID = 0;
                                int BuyNGetFreeHeader = 0;
                                string BuyNGetFreeCategory = "";
                                string BuyNGetFreeCaption = "";

                                string PUOM = "";
                                PUOM = dr1["UOM"].ToString();

                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();
                                ipid = GeneralFunctions.fnInt32(dr1["ProductID"].ToString());
                                tgininv = dr1["TaggedInInvoice"].ToString();
                                strSKU = dr1["SKU"].ToString();
                                strDiscText = dr1["DiscountText"].ToString();
                                strDiscID = dr1["DiscountID"].ToString();

                                strFeesID = dr1["FeesID"].ToString();
                                strFeesText = dr1["FeesText"].ToString();

                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr1["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());

                                iQtyDecimals = dr1["QtyDecimal"].ToString();

                                BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr1["BuyNGetFreeHeaderID"].ToString());
                                BuyNGetFreeCategory = dr1["BuyNGetFreeCategory"].ToString();
                                BuyNGetFreeCaption = dr1["BuyNGetFreeName"].ToString();

                                //if (strPType == "O") dblTotalPrice = -dblTotalPrice;


                                //dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));

                                strDP = dr1["DP"].ToString();
                                strInvNotes = dr1["Notes"].ToString();



                                TService1 = dr1["ServiceType"].ToString();
                                strRentType = dr1["RentType"].ToString();
                                dblRentDuration = GeneralFunctions.fnDouble(dr1["RentDuration"].ToString());
                                SalePriceID = GeneralFunctions.fnInt32(dr1["SalePriceID"].ToString());
                                int rnt = 0;
                                string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);



                                string rentdisplay = "";
                                if (TService1 == "Rent")
                                {
                                    if (strRentType == "MI") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.min_;
                                    if (strRentType == "HR") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.hr_;
                                    if (strRentType == "HD") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.half_day_s_;
                                    if (strRentType == "DY") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.day_s_;
                                    if (strRentType == "WK") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.week_s_;
                                    if (strRentType == "MN") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.month_s_;
                                    dtRentEffectiveFrom = GeneralFunctions.fnDate(dr1["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                                }

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                if (BuyNGetFreeCategory == "B")
                                {
                                    dtblstrm.Rows.Add(new object[] { "** " + BuyNGetFreeCaption + " **", "", "Item", "Y", ptextval });
                                }

                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm.Rows.Add(new object[] { sPD1, "", "", "Item", "Y", ptextval });



                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                    if (strMV2 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                    }
                                }


                                if (TService1 == "Sales")
                                {
                                    if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                                        || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                                    {
                                        if (SalePriceID == 0)
                                        {
                                            if (strPType != "U")
                                            {
                                                if (dblNormalPrice - dblPrice > 0)
                                                {
                                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP) + " " + Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                            if (strPType == "U")
                                            {
                                                if (dblUOMPrice - dblPrice > 0)
                                                {
                                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP) + " " + Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                        }


                                        if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                                        {
                                            if (strPType != "U")
                                            {
                                                if (dblNormalPrice - dblPrice > 0)
                                                {
                                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP) + " " + Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                            if (strPType == "U")
                                            {
                                                if (dblUOMPrice - dblPrice > 0)
                                                {
                                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP) + " " + Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                        }

                                        if (strPType == "T")
                                        {
                                            if (tgininv == "Y")
                                            {
                                                PosDataObject.Product opdt = new PosDataObject.Product();
                                                opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                DataTable dtemp = opdt.FetchTaggedData(ipid);
                                                foreach (DataRow tgdr in dtemp.Rows)
                                                {
                                                    double tgQty = 0;
                                                    string tgName = "";
                                                    tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                                    tgName = tgdr["ItemName"].ToString();
                                                    tgQty = tgQty * dblQty;

                                                    dtblstrm.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "", "Item", "Y", ptextval });
                                                }
                                                dtemp.Dispose();
                                            }
                                        }
                                    }
                                }

                                if (!blIsRentReturned)
                                {
                                    if (strDiscText != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                                    }

                                    if (Settings.ShowFeesInReceipt == "Y")
                                    {
                                        if (strFeesText != "")
                                        {
                                            dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "Item", "Y", ptextval });
                                        }
                                    }
                                }

                                if ((TService1 == "Rent") && (blIsRentIssued))
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + rentdisplay, "", "", "Item", "Y", ptextval });

                                }
                                if (!blIsRentReturned)
                                {
                                    // For Weighted Item
                                    if (strPType == "W")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()) + "/" + PUOM, GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });
                                    }
                                    else
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });
                                        //dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice), "" });
                                    }

                                    if ((Settings.ScaleDevice == "(None)") && (strPType == "W"))
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Manual_Weight, "", "", "Item", "Y", ptextval });
                                    }
                                }
                                else
                                    dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblQty), "Detail", "Y", pval });


                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, chrperline, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;

                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > chrperline)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= chrperline)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(chrperline, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", "Item", "Y", ptextval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValueWithCurrency(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblDiscount != 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                    string strDiscountCaption = Properties.Resources.Discount;
                                    dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption + ": " + GetFotmatDoubleValueWithCurrency(dblDiscount), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblTax != 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    if (dblTax1 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName1 + GetFotmatDoubleValueWithCurrency(dblTax1), "", "", "", "Y", pval });

                                    }
                                    if (dblTax2 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName2 + GetFotmatDoubleValueWithCurrency(dblTax2), "", "", "", "Y", pval });
                                    }
                                    if (dblTax3 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName3 + GetFotmatDoubleValueWithCurrency(dblTax3), "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                                {
                                    DataTable dFees = FetchInvFees();
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    if (dblFees + dblFeesCoupon != 0)
                                    {
                                        if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                        if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValue(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                    }
                                    if (dblFeesTax + dblFeesCouponTax != 0)
                                    {
                                        if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                        if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblCoupon != 0)
                                {
                                    DataTable dtblCpn = new DataTable();
                                    dtblCpn = FetchInvCoupon();
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket + ": " + GetFotmatDoubleValueWithCurrency(dblCoupon), "", "", "", "Y", pval });

                                    if (dtblCpn.Rows.Count > 0)
                                    {
                                        foreach (DataRow drc in dtblCpn.Rows)
                                        {
                                            string strTender = "";
                                            double dblAmount = 0;

                                            strTender = drc["Name"].ToString();

                                            string sPD1 = "";
                                            string sPD2 = "";
                                            string sPD3 = "";

                                            SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);


                                            dtblstrm.Rows.Add(new object[] { sPD1, "", "", "", "Y", pval });

                                            if (sPD2.Trim() != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { sPD2, "", "", "", "Y", pval });
                                            }

                                            if (sPD3.Trim() != "")
                                            {

                                                dtblstrm.Rows.Add(new object[] { sPD3, "", "", "", "Y", pval });
                                            }


                                            dblAmount = GeneralFunctions.fnDouble(drc["Amount"].ToString());
                                            dtblstrm.Rows.Add(new object[] { GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });
                                        }
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {
                            if (dblRentalSecurityDeposit > 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit + ": " + GetFotmatDoubleValueWithCurrency(dblRentalSecurityDeposit), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblTotalSale), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                            DataTable prndtblINV21 = new DataTable();
                            prndtblINV21 = FetchInvTender();

                            foreach (DataRow dr1 in prndtblINV21.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr1["DisplayAs"].ToString();
                                dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                dtblstrm.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                {
                                    double cashbk = 0;
                                    cashbk = FetchCashBack(dblAmount);
                                    if (cashbk != 0)
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                    }
                                }


                            }
                            prndtblINV21.Dispose();
                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (!blIsRentIssued)
                            {
                                if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValueWithCurrency(dblTempTender - dblTotalSale), "", "", "", "Y", pval });
                                }

                            }
                            else
                            {
                                if (dblTotalSale + dblRentalSecurityDeposit - dblTempTender != 0) // --------------- Change Due --------------
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValue(dblTempTender + dblRentalSecurityDeposit - dblTotalSale), "", "", "", "Y", pval });
                                }

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drgc in dtblGC.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GC + "#:" + drgc["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drgc["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }

                            }
                            dtblGC.Dispose();

                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drebt in dtblEBT.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + drebt["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drebt["CardBalance"].ToString())), "", "", "Y", pval });
                                }

                            }
                            dtblEBT.Dispose();




                            int prmmgc = 0;
                            PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                            obcc01mgc.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc = new DataTable();
                            PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                            obcc11mgc.Connection = SystemVariables.Conn;
                            ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                            bool mgc = false;
                            int mgcnt = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                            {
                                if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                    || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                                {
                                    mgcnt++;
                                    if (mgcnt == 1)
                                    {
                                        mgc = true;
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc)
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }






                            int prmebt = 0;
                            PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                            obcc01mgc33.Connection = SystemVariables.Conn;
                            prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc3 = new DataTable();
                            PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                            obcc11mgc55.Connection = SystemVariables.Conn;
                            ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                            bool mgc4 = false;
                            int mgcnt4 = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                            {
                                if (drmgc["CardType"].ToString() == "Food Stamps")
                                {
                                    mgcnt4++;
                                    if (mgcnt4 == 1)
                                    {
                                        mgc4 = true;
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc4)
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }





                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                            if (boolHATender)
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolSCrdtTender)
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (blIsVoid)
                            {
                                if (blCardPayment)
                                {
                                    DataTable ccdtbl11 = new DataTable();
                                    PosDataObject.POS obcc11 = new PosDataObject.POS();
                                    obcc11.Connection = SystemVariables.Conn;
                                    ccdtbl11 = obcc11.FetchVoidCardData(intInvNo);


                                    foreach (DataRow drcc in ccdtbl11.Rows)
                                    {
                                        if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                        if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                        if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                        if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                        strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                        strCardNum = drcc["RefCardAct"].ToString();
                                        strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                        strCardLogo = drcc["RefCardLogo"].ToString();
                                        strCardEntry = drcc["RefCardEntry"].ToString();
                                        strApprovalNum = drcc["RefCardAuthID"].ToString();
                                        strTranID = drcc["RefCardTranID"].ToString();
                                        strApprovedAmt = drcc["RefCardAuthAmount"].ToString();
                                        string voidRef = drcc["Reference"].ToString();
                                        if (Settings.POSCardPayment == "Y")
                                        {

                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "","","","Y",pval  });

                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + ":"+ strCardLogo, "", "", "", "Y", pval });

                                            
                                        }

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.VOID_AMOUNT + ": " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.REFERENCE + ": " + voidRef, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        
                                    }
                                }
                            }
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Reprint/Void Caption")
                            {
                                if (!blIsVoid)
                                    dtblstrm.Rows.Add(new object[] { "* " + Properties.Resources.Reprinted_Receipt + ": " + intReprintCnt.ToString() + " *", "", "", "", "Y", pval });
                                else
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.VOIDED, "", "", "", "Y", pval });
                                   
                                }
                                
                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {
                                if (intWO > 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Work_Order_Number + ": " + intWO.ToString(), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {
                                if (intWO > 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date + ": " + GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt"), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {
                                if (blIsRentIssued) dtblstrm.Rows.Add(new object[] { Properties.Resources.Rent___Issue, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {
                                if (blIsRentReturned) dtblstrm.Rows.Add(new object[] { Properties.Resources.Rent___Return, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                if (strCustAddress != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText("Address: " + strCustAddress, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                if (strCustDOB != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Card Holder Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARDHOLDER_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    //this.intPageCounter++;
                }


                if (strPrintType == "Layaway")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace2);


                    if(Settings.DemoVersion == "Y")
                    {
                        string pval1 = FindTemplateParameterValueInDatatable("Demo Version");
                        if (pval1 != "")
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.____DEMO_VERSION____,"","","","Y",pval1 });
                        
                    }

                    string pval = FindTemplateParameterValueInDatatable("Logo");
                    if (pval != "")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                    }

                    pval = FindTemplateParameterValueInDatatable("Business Name");
                    if (pval != "")
                    {
                        GetRecieptHeaderCompany(pval);
                    }
                    pval = FindTemplateParameterValueInDatatable("Business Address");
                    if (pval != "")
                    {
                        GetRecieptHeaderAddress(pval);
                    }

                    

                    if (blIsLayawayRefund)
                    {
                        string pval1 = FindTemplateParameterValueInDatatable("Layaway Cancellation Caption");
                        if (pval1 != "")
                            dtblstrm.Rows.Add(new object[] { "Layaway Cancellation", "", "", "", "Y", pval1 });
                    }



                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";
                    string strLayawayDueDate = "";
                    int intLayInvNo = 0;

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string strLayawayStatus = "";

                    prndtblINV = FetchLayawayHeader(false);
                    int invcount = 0;
                    double dblTotalLayawaySale = 0;
                    double dblTotalLayawayPayment = 0;
                    double dblTotalLayawayBalance = 0;
                    int intPrevLayNo = 0;
                    int distinctlayway = 1;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblDTax = 0;
                    string custAddr = "";

                    foreach (DataRow dr in prndtblINV.Rows)
                    {


                        invcount++;

                        intLayNo = GeneralFunctions.fnInt32(dr["LayawayNo"].ToString());
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        intLayInvNo = GeneralFunctions.fnInt32(dr["InvoiceNo"].ToString());
                        strLayawayDueDate = GeneralFunctions.fnDate(dr["DateDue"].ToString()).ToString("d");
                        strLayawayStatus = dr["LayawayStatus"].ToString();

                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        intInvNo = intLayInvNo;

                        custAddr = FetchCustomerAddress(GeneralFunctions.fnInt32(strCID));

                        if (strLayawayStatus == "3")
                        {
                            pval = FindTemplateParameterValueInDatatable("Receipt/Layaway Number");
                            if (pval != "")
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intLayInvNo.ToString(), "", "", "", "Y", pval });
                            
                        }
                        else
                        {
                            if ((intPrevLayNo == 0) || (intPrevLayNo != intLayNo))
                            {
                                pval = FindTemplateParameterValueInDatatable("Receipt/Layaway Number");
                                if (pval != "")
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Layaway_Number + ": " + intLayNo.ToString(), "", "", "", "Y", pval });
                               
                            }
                        }

                        if (invcount == 1)
                        {



                            if (strCustName != "")
                            {
                                pval = FindTemplateParameterValueInDatatable("Customer Name");
                                if (pval != "")
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                            }

                            

                            if (custAddr != "")
                            {
                                pval = FindTemplateParameterValueInDatatable("Customer Address");
                                if (pval != "")
                                {
                                    string OrginalH = ""; // Settings.TotalReceiptHeader;
                                    ArrangeText(custAddr, 26, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > 26)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 26)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - 26;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(26, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > 26)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 26)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 26;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }
                                }
                            }

                           
                        }


                        DataTable prndtblINV1 = new DataTable();
                        prndtblINV1 = FetchInvDetails(dblTotalSale);
                        double dblTempTotal = 0;
                        foreach (DataRow drL in prndtblINV1.Rows)
                        {

                            pval = FindTemplateParameterValueInDatatableOrderDetail1("Item/Price Line");

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }

                            string strDescription = "";
                            string strPType = "";
                            string strMV1 = "";
                            string strMV2 = "";
                            string strMV3 = "";
                            string strSKU = "";
                            double dblPrice = 0;
                            double dblQty = 0;
                            double dblTotalPrice = 0;
                            string strDP = "";
                            double dblNormalPrice = 0;
                            double dblUOMPrice = 0;
                            string tgininv = "";
                            string strDiscText = "";
                            double dblDisc = 0;
                            int ipid = 0;
                            string txapp1 = "N";
                            string txapp2 = "N";
                            string txapp3 = "N";
                            double tx1 = 0;
                            double tx2 = 0;
                            double tx3 = 0;
                            double linetx = 0;
                            double lineprice = 0;
                            int tx1ty = 0;
                            int tx2ty = 0;
                            int tx3ty = 0;
                            double tDTax = 0;
                            double tFees = 0;
                            double tFeesTax = 0;
                            tDTax = GeneralFunctions.fnDouble(drL["DTax"].ToString());
                            tFees = GeneralFunctions.fnDouble(drL["Fees"].ToString());
                            tFeesTax = GeneralFunctions.fnDouble(drL["FeesTax"].ToString());
                            dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                            lineprice = dblTotalPrice;

                            txapp1 = drL["Taxable1"].ToString();
                            txapp2 = drL["Taxable2"].ToString();
                            txapp3 = drL["Taxable3"].ToString();
                            tx1 = GeneralFunctions.fnDouble(drL["TaxRate1"].ToString());
                            tx2 = GeneralFunctions.fnDouble(drL["TaxRate2"].ToString());
                            tx3 = GeneralFunctions.fnDouble(drL["TaxRate3"].ToString());

                            tx1ty = GeneralFunctions.fnInt32(drL["TaxType1"].ToString());
                            tx2ty = GeneralFunctions.fnInt32(drL["TaxType2"].ToString());
                            tx3ty = GeneralFunctions.fnInt32(drL["TaxType3"].ToString());

                            if ((txapp1 == "Y") || (txapp2 == "Y") || (txapp3 == "Y"))
                            {
                                if (txapp1 == "Y")
                                {
                                    linetx = (tx1ty == 0) ? GeneralFunctions.FormatDouble(lineprice * tx1 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal1"].ToString()));
                                }

                                if (txapp2 == "Y")
                                {
                                    linetx = (tx2ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx2 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal2"].ToString()));
                                }

                                if (txapp3 == "Y")
                                {
                                    linetx = (tx3ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx3 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal3"].ToString()));
                                }
                            }

                            ipid = GeneralFunctions.fnInt32(drL["ProductID"].ToString());
                            tgininv = drL["TaggedInInvoice"].ToString();
                            strDescription = drL["Description"].ToString();
                            strPType = drL["ProductType"].ToString();
                            strMV1 = drL["MOP1"].ToString();
                            strMV2 = drL["MOP2"].ToString();
                            strMV3 = drL["MOP3"].ToString();

                            strSKU = drL["SKU"].ToString();
                            dblPrice = GeneralFunctions.fnDouble(drL["Price"].ToString());
                            dblQty = GeneralFunctions.fnDouble(drL["Qty"].ToString());

                            dblNormalPrice = GeneralFunctions.fnDouble(drL["NormalPrice"].ToString());
                            dblUOMPrice = GeneralFunctions.fnDouble(drL["UOMPrice"].ToString());
                            strDiscText = drL["DiscountText"].ToString();
                            dblDisc = GeneralFunctions.fnDouble(drL["Discount"].ToString());
                            dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                            strDP = drL["DP"].ToString();

                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                            pval = FindTemplateParameterValueInDatatable("Customer Address");
                            if (pval != "")

                                dtblstrm.Rows.Add(new object[] { sPD1, "", "", "Item","Y",ptextval });

                            if (sPD2.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                            }

                            if (sPD3.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                            }

                            if (strPType == "M")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                if (strMV2 != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                }
                                if (strMV3 != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                }
                            }

                            if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                            || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP) + " " +  Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP),"","", "Item", "Y", ptextval });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });
                                    }
                                }

                                if (strPType == "T")
                                {
                                    if (tgininv == "Y")
                                    {
                                        PosDataObject.Product opdt = new PosDataObject.Product();
                                        opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                        DataTable dtemp = opdt.FetchTaggedData(ipid);
                                        foreach (DataRow tgdr in dtemp.Rows)
                                        {
                                            double tgQty = 0;
                                            string tgName = "";
                                            tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                            tgName = tgdr["ItemName"].ToString();
                                            tgQty = tgQty * dblQty;
                                            dtblstrm.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "", "Item", "Y", ptextval });
                                        }
                                        dtemp.Dispose();
                                    }
                                }
                            }

                            if (strDiscText != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                            }
                            dtblstrm.Rows.Add(new object[] { GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(lineprice + linetx + tFees + tFeesTax + tDTax), "Detail", "Y", ptextval });

                        }

                        prndtblINV1.Dispose();

                        if (strLayawayStatus == "3")
                        {


                            // -------------- Sub Total ----------------

                            pval = FindTemplateParameterValueInDatatable("Subtotal Amount");   
                            if (pval!= "")
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "", "Y", pval });

                            if (dblDiscount != 0) // -------------- Discount ----------------
                            {
                                pval = FindTemplateParameterValueInDatatable("Discount Amount");
                                dtblstrm.Rows.Add(new object[] { SP1 + "Discount" + ": " + GetFotmatDoubleValue(dblDiscount), "", "", "", "Y", pval });
                            }
                            // -------------- Tax ----------------
                            if (dblTax != 0)
                            {
                                pval = FindTemplateParameterValueInDatatable("Tax Amount");
                                if (pval != "")
                                {
                                    if (dblTax1 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1 + " " + GetFotmatDoubleValue(dblTax1), "", "", "", "Y", pval });
                                    }
                                    if (dblTax2 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2 + " " + GetFotmatDoubleValue(dblTax2), "", "", "", "Y", pval });
                                    }
                                    if (dblTax3 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3 + " " + GetFotmatDoubleValue(dblTax3), "", "", "", "Y", pval });
                                    }
                                }
                            }



                            // -------------- Total ----------------

                            pval = FindTemplateParameterValueInDatatable("Total Amount");
                            if (pval != "")
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total + " " + GetFotmatDoubleValue(dblTotalSale), "", "", "", "Y", pval });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                        // ---------------- Layaway Payment -------------

                        DataTable prndtblLAYPMT = new DataTable();
                        prndtblLAYPMT = FetchLayawayPayment();


                        foreach (DataRow drL1 in prndtblLAYPMT.Rows)
                        {
                            double dblLayPayment = 0;
                            string strLayPmtType = "";
                            string strLayPmtDate = "";

                            strLayPmtType = drL1["PaymentType"].ToString();
                            strLayPmtDate = drL1["PaymentDate"].ToString();
                            dblLayPayment = GeneralFunctions.fnDouble(drL1["PaymentAmt"].ToString());

                            pval = FindTemplateParameterValueInDatatable("Layaway Payment Details");
                            if (pval != "")
                                dtblstrm.Rows.Add(new object[] { SP1 + strLayPmtType + " " + strLayPmtDate + " " + GetFotmatDoubleValue(dblLayPayment), "", "", "", "Y", pval });
                        }
                        prndtblLAYPMT.Dispose();


                        if ((intPrevLayNo != 0) && (intPrevLayNo != intLayNo))
                        {
                            // Layaway Balance Due, Due Date
                            distinctlayway++;
                            dblTotalLayawaySale = GetTotalLayawaySale(intPrevLayNo);
                            dblTotalLayawayPayment = GetTotalLayawayPayment(intPrevLayNo);
                            dblTotalLayawayBalance = dblTotalLayawaySale - dblTotalLayawayPayment;

                            pval = FindTemplateParameterValueInDatatable("Balance Due Amount");
                            if (pval != "")
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Balance_Due + " " + GetFotmatDoubleValue(dblTotalLayawayBalance), "", "", "", "Y", pval });
                            pval = FindTemplateParameterValueInDatatable("Due Date");
                            if (pval != "")
                                dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Due + " " + strLayawayDueDate, "", "", "", "Y", pval });
                        }

                        intPrevLayNo = intLayNo;
                    }
                    prndtblINV.Dispose();

                    if ((invcount == 1) || (distinctlayway == 1))
                    {
                        dblTotalLayawaySale = GetTotalLayawaySale(intPrevLayNo);
                        dblTotalLayawayPayment = GetTotalLayawayPayment(intPrevLayNo);
                        dblTotalLayawayBalance = dblTotalLayawaySale - dblTotalLayawayPayment;
                        pval = FindTemplateParameterValueInDatatable("Balance Due Amount");
                        if (pval != "")
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Balance_Due + " " + GetFotmatDoubleValue(dblTotalLayawayBalance), "", "", "", "Y", pval });
                        pval = FindTemplateParameterValueInDatatable("Due Date");
                        if (pval != "")
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Due + " " + strLayawayDueDate, "", "", "", "Y", pval });
                    }

                    // --------------- Tender --------------

                    bool boolHATender = false;

                    if (!blIsLayawayRefund)
                    {
                        pval = FindTemplateParameterValueInDatatable("Tender Amount");
                        if (pval != "")
                           dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                        DataTable prndtblINV2 = new DataTable();
                        intTrnNo = FetchMaxTranNo();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            if (pval != "")
                                dtblstrm.Rows.Add(new object[] { strTender +": "+ GetFotmatDoubleValue(dblAmount), "", "", "", "Y", pval });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    if (pval != "")
                                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValue(cashbk), "", "", "", "Y", pval });

                                    if (pval != "")
                                        dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValue(dblAmount + cashbk), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;

                        }
                        prndtblINV2.Dispose();



                        

                    }


                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        pval = FindTemplateParameterValueInDatatable("House Account Balance");
                        if (pval != "")
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " +  GetFotmatDoubleValue(dval), "", "", "", "Y", pval });

                        
                    }


                   

                    //string strSign = new string('_', Settings.NoOfPrintSign);
                    //dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.sign_, "", strSign });
                    

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        pval = FindTemplateParameterValueInDatatable("Card Payment Reference");

                        if (pval != "")
                        {
                            DataTable ccdtbl11 = new DataTable();
                            PosDataObject.POS obcc11 = new PosDataObject.POS();
                            obcc11.Connection = SystemVariables.Conn;
                            ccdtbl11 = obcc11.FetchCardData(intLayTran);


                            foreach (DataRow drcc in ccdtbl11.Rows)
                            {
                                if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                if (drcc["CardType"].ToString() == "Precidia Gift Card") strCardType = "Precidia";
                                if (drcc["CardType"].ToString() == "Datacap Gift Card") strCardType = "Datacap";
                                if (drcc["CardType"].ToString() == "POSLink Gift Card") strCardType = "POSLink";
                                if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                strCardNum = drcc["RefCardAct"].ToString();
                                strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                strCardLogo = drcc["RefCardLogo"].ToString();
                                strCardEntry = drcc["RefCardEntry"].ToString();
                                strApprovalNum = drcc["RefCardAuthID"].ToString();
                                strTranID = drcc["RefCardTranID"].ToString();
                                strApprovedAmt = drcc["RefCardAuthAmount"].ToString();

                                if (Settings.POSCardPayment == "Y")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "#  :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "#  :" + strCardNum, "", "", "", "Y", pval });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + " : " + strCardLogo, "", "", "", "Y", pval });

                                  
                                }

                                if (strCardType == "Credit")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + " : " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                    
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : " + strApprovalNum, "", "", "", "Y", pval });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : " + strTranID, "", "", "", "Y", pval });
                                    
                                }
                                if (strCardType == "Debit")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + " : " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                    
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : " + strApprovalNum, "", "", "", "Y", pval });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : " + strTranID, "", "", "", "Y", pval });
                                    

                                }

                                if (strCardType == "Mercury")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + " : " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : " + strApprovalNum, "", "", "", "Y", pval });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : " + strTranID, "", "", "", "Y", pval });

                                }

                                if (strCardType == "Precidia")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + " : " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : " + strApprovalNum, "", "", "", "Y", pval });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : " + strTranID, "", "", "", "Y", pval });

                                }

                                if (strCardType == "EBT")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + " : " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : " + strApprovalNum, "", "", "", "Y", pval });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : " + strTranID, "", "", "", "Y", pval });
                                }

                                
                                if (strCardType == "Credit")
                                {
                                    if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                        || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                        ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                         || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                        || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                    {
                                        dtblstrm.Rows.Add(new object[] {  Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] {  Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });
                                       

                                        dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "", "", "", "Y", pval });
                                    }
                                }

                                if (strCardType == "Debit")
                                {
                                    dtblstrm.Rows.Add(new object[] {  Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                    dtblstrm.Rows.Add(new object[] {  Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                }
                            }
                        }
                    }
                    // --------------- Sign --------------



                    // --------------- Receipt Footer --------------


                    if (blCardPayment)
                    {
                        pval = FindTemplateParameterValueInDatatable("Card Holder Copy");
                        if (pval != "")
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.CARDHOLDER_COPY, "", "", "", "Y", pval });
                    }

                    pval = FindTemplateParameterValueInDatatable("Receipt Date");
                    if (pval != "")
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + " " + strTransDate, "", "", "", "Y", pval });

                    pval = FindTemplateParameterValueInDatatable("User Name");
                    if (pval != "")
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString() + " " +  Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                    pval = FindTemplateParameterValueInDatatable("Till Name");
                    if (pval != "")
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });


                    // ------------ Setting Receipt Footer -------------

                    pval = FindTemplateParameterValueInDatatable("Layaway Policy");
                    if (pval != "")
                        if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptLayawayPolicy, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptLayawayPolicy.Trim(), "", "", NumberOfOccurancesF.ToString() });

                    }

                    


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        
                    }
                }



                if (strPrintType == "Reprint Layaway")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace2);
                                     //StringFormat f = new StringFormat();

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Receipt + " *", "" });

                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }
                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strCID = "";
                    string strEmpID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";
                    string strLayawayDueDate = "";
                    int intLayInvNo = 0;

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string strLayawayStatus = "";

                    prndtblINV = FetchLayawayHeader(true);
                    int invcount = 0;
                    double dblTotalLayawaySale = 0;
                    double dblTotalLayawayPayment = 0;
                    double dblTotalLayawayBalance = 0;
                    int intPrevLayNo = 0;
                    double dblDTax = 0;
                    string custAddr = "";

                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        invcount++;

                        intLayNo = GeneralFunctions.fnInt32(dr["LayawayNo"].ToString());
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strCID = dr["CID"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        intLayInvNo = GeneralFunctions.fnInt32(dr["InvoiceNo"].ToString());
                        strLayawayDueDate = GeneralFunctions.fnDate(dr["DateDue"].ToString()).ToString("d");
                        strLayawayStatus = dr["LayawayStatus"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        intInvNo = intLayInvNo;

                        custAddr = FetchCustomerAddress(GeneralFunctions.fnInt32(strCID));

                        if ((intPrevLayNo == 0) || (intPrevLayNo != intLayNo))
                        {
                            intPrevLayNo = intLayNo;
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Layaway_Number, "", intLayNo.ToString() });
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }

                        if (invcount == 1)
                        {


                            if (strCustName != "")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                            }

                            if (strCustID != "")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                            }

                            if (custAddr != "")
                            {
                                string OrginalH = ""; // Settings.TotalReceiptHeader;
                                ArrangeText(custAddr, 26, ref OrginalH);

                                char FindH = '\n';
                                int NumberOfOccurancesH = 0;

                                string CopyOrginalH = string.Copy(OrginalH);
                                int PlaceH = 0;

                                NumberOfOccurancesH = 0;
                                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                while (PlaceH != -1)
                                {
                                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                    if (cutstr.Length > 26)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 26)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 26;
                                            if (cutstr != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(26, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    NumberOfOccurancesH++;
                                }

                                if (CopyOrginalH.Length > 26)
                                {
                                    int len = CopyOrginalH.Length;
                                    while (len >= 26)
                                    {
                                        NumberOfOccurancesH++;
                                        len = len - 26;
                                        if (CopyOrginalH != "")
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                            CopyOrginalH = CopyOrginalH.Substring(26, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                                }


                                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                else
                                {
                                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                }
                            }

                            if ((custAddr != "") || (strCustName != "") || (strCustID != ""))
                            {
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                        }

                        DataTable prndtblINV1 = new DataTable();
                        prndtblINV1 = FetchInvDetails(dblTotalSale);
                        double dblTempTotal = 0;
                        foreach (DataRow drL in prndtblINV1.Rows)
                        {
                            string strDescription = "";
                            string strPType = "";
                            string strMV1 = "";
                            string strMV2 = "";
                            string strMV3 = "";
                            string strSKU = "";
                            double dblPrice = 0;
                            double dblNormalPrice = 0;
                            double dblUOMPrice = 0;
                            double dblQty = 0;
                            double dblTotalPrice = 0;
                            string strDP = "";
                            string tgininv = "";
                            string strDiscText = "";
                            double dblDisc = 0;
                            int ipid = 0;

                            string txapp1 = "N";
                            string txapp2 = "N";
                            string txapp3 = "N";
                            double tx1 = 0;
                            double tx2 = 0;
                            double tx3 = 0;
                            double linetx = 0;
                            double lineprice = 0;

                            int tx1ty = 0;
                            int tx2ty = 0;
                            int tx3ty = 0;

                            double tDTax = 0;
                            double tFees = 0;
                            double tFeesTax = 0;
                            tDTax = GeneralFunctions.fnDouble(drL["DTax"].ToString());
                            tFees = GeneralFunctions.fnDouble(drL["Fees"].ToString());
                            tFeesTax = GeneralFunctions.fnDouble(drL["FeesTax"].ToString());

                            dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                            lineprice = dblTotalPrice;

                            txapp1 = drL["Taxable1"].ToString();
                            txapp2 = drL["Taxable2"].ToString();
                            txapp3 = drL["Taxable3"].ToString();
                            tx1 = GeneralFunctions.fnDouble(drL["TaxRate1"].ToString());
                            tx2 = GeneralFunctions.fnDouble(drL["TaxRate2"].ToString());
                            tx3 = GeneralFunctions.fnDouble(drL["TaxRate3"].ToString());

                            tx1ty = GeneralFunctions.fnInt32(drL["TaxType1"].ToString());
                            tx2ty = GeneralFunctions.fnInt32(drL["TaxType2"].ToString());
                            tx3ty = GeneralFunctions.fnInt32(drL["TaxType3"].ToString());

                            if ((txapp1 == "Y") || (txapp2 == "Y") || (txapp3 == "Y"))
                            {
                                if (txapp1 == "Y")
                                {
                                    linetx = (tx1ty == 0) ? GeneralFunctions.FormatDouble(lineprice * tx1 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal1"].ToString()));
                                }

                                if (txapp2 == "Y")
                                {
                                    linetx = (tx2ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx2 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal2"].ToString()));
                                }

                                if (txapp3 == "Y")
                                {
                                    linetx = (tx3ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx3 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal3"].ToString()));
                                }
                            }



                            ipid = GeneralFunctions.fnInt32(drL["ProductID"].ToString());
                            tgininv = drL["TaggedInInvoice"].ToString();

                            strDescription = drL["Description"].ToString();
                            strPType = drL["ProductType"].ToString();
                            strMV1 = drL["MOP1"].ToString();
                            strMV2 = drL["MOP2"].ToString();
                            strMV3 = drL["MOP3"].ToString();
                            strDiscText = drL["DiscountText"].ToString();

                            strSKU = drL["SKU"].ToString();
                            dblPrice = GeneralFunctions.fnDouble(drL["Price"].ToString());
                            dblQty = GeneralFunctions.fnDouble(drL["Qty"].ToString());
                            //dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                            dblNormalPrice = GeneralFunctions.fnDouble(drL["NormalPrice"].ToString());
                            dblUOMPrice = GeneralFunctions.fnDouble(drL["UOMPrice"].ToString());
                            dblDisc = GeneralFunctions.fnDouble(drL["Discount"].ToString());
                            dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                            strDP = drL["DP"].ToString();

                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                            dtblstrm.Rows.Add(new object[] { sPD1, "", "" });

                            if (sPD2.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { sPD2, "", "" });
                            }

                            if (sPD3.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { sPD3, "", "" });
                            }

                            if (strPType == "M")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "" });

                                if (strMV2 != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                                }
                                if (strMV3 != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                                }
                            }

                            if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                            || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                    }
                                }

                                if (strPType == "T")
                                {
                                    if (tgininv == "Y")
                                    {
                                        PosDataObject.Product opdt = new PosDataObject.Product();
                                        opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                        DataTable dtemp = opdt.FetchTaggedData(ipid);
                                        foreach (DataRow tgdr in dtemp.Rows)
                                        {
                                            double tgQty = 0;
                                            string tgName = "";
                                            tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                            tgName = tgdr["ItemName"].ToString();
                                            tgQty = tgQty * dblQty;

                                            dtblstrm.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "" });
                                        }
                                        dtemp.Dispose();
                                    }
                                }
                            }

                            if (strDiscText.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "" });
                            }
                            dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(lineprice + linetx + tFees + tFeesTax + tDTax) });
                        }
                        prndtblINV1.Dispose();

                        // ---------------- Layaway Payment -------------

                        DataTable prndtblLAYPMT = new DataTable();
                        prndtblLAYPMT = FetchLayawayPayment();


                        foreach (DataRow drL1 in prndtblLAYPMT.Rows)
                        {
                            double dblLayPayment = 0;
                            string strLayPmtType = "";
                            string strLayPmtDate = "";

                            strLayPmtType = drL1["PaymentType"].ToString();
                            strLayPmtDate = drL1["PaymentDate"].ToString();
                            dblLayPayment = GeneralFunctions.fnDouble(drL1["PaymentAmt"].ToString());

                            dtblstrm.Rows.Add(new object[] { SP1 + strLayPmtType + " " + strLayPmtDate, "", GetFotmatDoubleValue(dblLayPayment) });
                        }
                        prndtblLAYPMT.Dispose();
                    }
                    prndtblINV.Dispose();

                    // Layaway Balance Due, Due Date

                    dblTotalLayawaySale = GetTotalLayawaySale(intPrevLayNo);
                    dblTotalLayawayPayment = GetTotalLayawayPayment(intPrevLayNo);

                    dblTotalLayawayBalance = dblTotalLayawaySale - dblTotalLayawayPayment;

                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Balance_Due + " ", "", GetFotmatDoubleValue(dblTotalLayawayBalance) });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Due + " ", "", strLayawayDueDate });

                    // --------------- Tender --------------

                    bool boolHATender = false;

                    if (!blIsLayawayRefund)
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                        DataTable prndtblINV2 = new DataTable();
                        intTrnNo = FetchMaxTranNo();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            dtblstrm.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    dtblstrm.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        }
                        prndtblINV2.Dispose();



                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        bool mgc = false;
                        int mgcnt = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                        {
                            if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                            {
                                mgcnt++;
                                if (mgcnt == 1)
                                {
                                    mgc = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                    }

                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // --------------- Receipt Footer --------------
                    string strSign = new string('_', Settings.NoOfPrintSign);
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.sign_, "", strSign });


                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------


                    if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptLayawayPolicy, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }
                        dtblstrm.Rows.Add(new object[] { Settings.ReceiptLayawayPolicy.Trim(), "", "", NumberOfOccurancesF.ToString() });
                    }
                    else dtblstrm.Rows.Add(new object[] { "", "", "" });

                    dtblstrm.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Receipt + " *", "" });

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Line")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }




                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Reprint/Void Caption")
                            {


                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                //if (strCustDOB != "")
                                //{
                                //dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                //}

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Card Holder Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARDHOLDER_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }
                }



                if (strPrintType == "WorkOrder")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace3);
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    
                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblTotalSale = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    prndtblINV = FetchWOHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intStoreID = 1;
                        intRegisterID = 1;
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["WorkOrderDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        dblTotalSale = GeneralFunctions.fnDouble(dr["Total"].ToString());
                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    }
                    prndtblINV.Dispose();


                    
                    DataTable dtblCpn = new DataTable();
                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchWODetails();
                    dtblCpn = prndtblINV1;
                    double dblDiscount = 0;
                    double dblCoupon = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;




                    double dblTempTotal = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        if ((dr["ProductType"].ToString() == "C") || (dr["ProductType"].ToString() == "Z")) dblCoupon = dblCoupon + GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        if (dr["ProductType"].ToString() == "C") continue;
                        if (dr["ProductType"].ToString() == "H") continue;
                        if (dr["ProductType"].ToString() == "Z") continue;
                        dblDiscount = dblDiscount + GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        string strDescription = "";
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblUOMPrice = 0;
                        double dblDisc = 0;
                        string strDiscText = "";
                        string strFeesText = "";

                        strFeesText = dr["FeesText"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();

                        strSKU = dr["SKU"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        strDiscText = dr["DiscountText"].ToString();
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());

                        double tempFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        double tempFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        dblTempTotal = dblTempTotal + dblTotalPrice + dblDisc + tempFees + tempFeesTax;

                        dblFees = dblFees + tempFees;
                        dblFees = dblFees + tempFeesTax;

                        strDP = dr["DP"].ToString();

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                        
                        
                    }






                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }



                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Line")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }


                            prndtblINV1 = FetchWODetails();
                            dtblCpn = prndtblINV1;

                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {
                                if ((dr1["ProductType"].ToString() == "C") || (dr1["ProductType"].ToString() == "Z")) dblCoupon = dblCoupon + GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                if (dr1["ProductType"].ToString() == "C") continue;
                                if (dr1["ProductType"].ToString() == "H") continue;
                                if (dr1["ProductType"].ToString() == "Z") continue;
                                // dblDiscount = dblDiscount + GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                string strDescription = "";
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblUOMPrice = 0;
                                double dblDisc = 0;
                                string strDiscText = "";
                                string strFeesText = "";

                                strFeesText = dr1["FeesText"].ToString();

                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();

                                strSKU = dr1["SKU"].ToString();
                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());
                                strDiscText = dr1["DiscountText"].ToString();
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());

                                double tempFees = GeneralFunctions.fnDouble(dr1["Fees"].ToString());
                                double tempFeesTax = GeneralFunctions.fnDouble(dr1["FeesTax"].ToString());

                                int BuyNGetFreeHeader = 0;
                                string BuyNGetFreeCategory = "";
                                string BuyNGetFreeCaption = "";

                                BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr1["BuyNGetFreeHeaderID"].ToString());
                                BuyNGetFreeCategory = dr1["BuyNGetFreeCategory"].ToString();
                                BuyNGetFreeCaption = dr1["BuyNGetFreeName"].ToString();

                                //dblTempTotal = dblTempTotal + dblTotalPrice + dblDisc + tempFees + tempFeesTax;

                                //dblFees = dblFees + tempFees;
                                //dblFees = dblFees + tempFeesTax;

                                strDP = dr1["DP"].ToString();

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                                if (BuyNGetFreeCategory == "B")
                                {
                                    dtblstrm.Rows.Add(new object[] { "** " + BuyNGetFreeCaption + " **", "", "", "Item", "Y", ptextval });
                                }
                                dtblstrm.Rows.Add(new object[] { sPD1, "", "", "Item", "Y", ptextval });
                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });
                                    if (strMV2 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                    }
                                }
                                if (strDiscText.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                                }

                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    if (strFeesText != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "Item", "Y", ptextval });
                                    }
                                }

                                dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });

                            }


                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValueWithCurrency(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            if (dblDiscount != 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                string strDiscountCaption = Properties.Resources.Discount;
                                dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption + ": " + GetFotmatDoubleValueWithCurrency(dblDiscount), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            if (dblTax != 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                dtblstrm.Rows.Add(new object[] { "Tax: " + GetFotmatDoubleValueWithCurrency(dblTax), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                            {
                                DataTable dFees = FetchInvFees();
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                if (dblFees + dblFeesCoupon != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValue(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                }
                                if (dblFeesTax + dblFeesCouponTax != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {
                            if (dblCoupon != 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket + ": " + GetFotmatDoubleValueWithCurrency(dblCoupon), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblTotalSale), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Reprint/Void Caption")
                            {


                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Work_Order_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                //if (strCustDOB != "")
                                //{
                                //dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                //}

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Card Holder Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARDHOLDER_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }
                }



                if (strPrintType == "Suspend Receipt")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace3);

                   

                    

                    DataTable prndtblINV = new DataTable();
                    DataTable prndtblINV1 = new DataTable();
                    DataTable dtblCpn = new DataTable();

                    prndtblINV.Columns.Add("StoreID", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("RegisterID", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("TransDate", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("CID", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("CustID", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("CustName", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("CustCompany", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("EmpID", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Tax", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Tax1", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Tax2", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Tax3", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("TotalSale", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("TaxNM1", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("TaxNM2", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("TaxNM3", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Discount", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("Coupon", System.Type.GetType("System.String"));
                    prndtblINV.Columns.Add("CustomerDOB", System.Type.GetType("System.String"));

                    prndtblINV1.Columns.Add("ProductType", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Description", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("SKU", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Price", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Qty", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("TotalPrice", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("MOP1", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("MOP2", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("MOP3", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("DP", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("NormalPrice", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("UOMPrice", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("DiscountID", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("DiscountText", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Discount", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("ItemIndex", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Fees", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("FeesTax", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("FeesText", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("Notes", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("BuyNGetFreeHeaderID", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("BuyNGetFreeCategory", System.Type.GetType("System.String"));
                    prndtblINV1.Columns.Add("BuyNGetFreeName", System.Type.GetType("System.String"));

                    FetchSuspendRecord(ref prndtblINV, ref prndtblINV1);
                    dtblCpn = prndtblINV1;
                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCustID = "";
                    string strCID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string strCustDOB = "";

                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); //stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());

                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());

                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();
                    }
                    prndtblINV.Dispose();

                    
                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblTempTotal = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        if (dr["ProductType"].ToString() == "C") continue;
                        if (dr["ProductType"].ToString() == "Z") continue;
                        if (dr["ProductType"].ToString() == "H") continue;
                        string strDiscText = "";
                        string strDescription = "";
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        double dblDisc = 0;
                        string strInvNotes = "";
                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strSKU = dr["SKU"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        string strFeesText = "";
                        strFeesText = dr["FeesText"].ToString();
                        strInvNotes = dr["Notes"].ToString();

                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        double tempFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        double tempFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblTempTotal = dblTempTotal + dblTotalPrice + dblDisc + tempFees + tempFeesTax;
                        dblFees = dblFees + tempFees;
                        dblFeesTax = dblFeesTax + tempFeesTax;

                        strDP = dr["DP"].ToString();

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";
                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                       
                    }
                    //prndtblINV1.Dispose();




                    // -------------- Sub Total ----------------



                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }



                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Line")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }

                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {
                                if (dr1["ProductType"].ToString() == "C") continue;
                                if (dr1["ProductType"].ToString() == "Z") continue;
                                if (dr1["ProductType"].ToString() == "H") continue;
                                string strDiscText = "";
                                string strDescription = "";
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                double dblDisc = 0;
                                string strInvNotes = "";
                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();
                                strDiscText = dr1["DiscountText"].ToString();
                                strSKU = dr1["SKU"].ToString();
                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr1["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                string strFeesText = "";
                                strFeesText = dr1["FeesText"].ToString();
                                strInvNotes = dr1["Notes"].ToString();

                                int BuyNGetFreeHeader = 0;
                                string BuyNGetFreeCategory = "";
                                string BuyNGetFreeCaption = "";

                                BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr1["BuyNGetFreeHeaderID"].ToString());
                                BuyNGetFreeCategory = dr1["BuyNGetFreeCategory"].ToString();
                                BuyNGetFreeCaption = dr1["BuyNGetFreeName"].ToString();

                                double tempFees = GeneralFunctions.fnDouble(dr1["Fees"].ToString());
                                double tempFeesTax = GeneralFunctions.fnDouble(dr1["FeesTax"].ToString());

                                dblTempTotal = dblTempTotal + dblTotalPrice + dblDisc + tempFees + tempFeesTax;
                                dblFees = dblFees + tempFees;
                                dblFeesTax = dblFeesTax + tempFeesTax;

                                strDP = dr1["DP"].ToString();

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";
                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                if (BuyNGetFreeCategory == "B")
                                {
                                    dtblstrm.Rows.Add(new object[] { "** " + BuyNGetFreeCaption + " **", "", "","Item","Y",ptextval });
                                }

                                dtblstrm.Rows.Add(new object[] { sPD1, "", "", "Item", "Y", ptextval });

                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                    if (strMV2 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                    }
                                }

                                if (strDiscText.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                                }

                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    if (strFeesText != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "", "Item", "Y", ptextval });
                                    }
                                }

                                dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice),"Detail","Y",pval });

                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, 30, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;

                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > 30)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(30, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", "", "Item", "Y", ptextval });
                                }

                            }



                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValueWithCurrency(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            if (dblDiscount != 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                string strDiscountCaption = Properties.Resources.Discount;
                                dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption + ": " + GetFotmatDoubleValueWithCurrency(dblDiscount), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            if (dblTax != 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                if (dblTax1 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName1 + GetFotmatDoubleValueWithCurrency(dblTax1), "", "", "", "Y", pval });

                                }
                                if (dblTax2 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName2 + GetFotmatDoubleValueWithCurrency(dblTax2), "", "", "", "Y", pval });
                                }
                                if (dblTax3 != 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName3 + GetFotmatDoubleValueWithCurrency(dblTax3), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            if (((dblFees != 0) || (dblFeesTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                            {
                                DataTable dFees = FetchInvFees();
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                if (dblFees != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(dblFees), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValueWithCurrency(dblFees), "", "", "", "Y", pval });
                                }
                                if (dblFeesTax  != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {
                            if (dblCoupon != 0)
                            {
                                
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket + ": " + GetFotmatDoubleValueWithCurrency(dblCoupon), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Total_Due + ": " + GetFotmatDoubleValueWithCurrency(dblTotalSale), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Reprint/Void Caption")
                            {


                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Suspended Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Suspended__ + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                if (strCustDOB != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Card Holder Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARDHOLDER_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }
                }


                if (strPrintType == "Closeout")  // Close Out
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace3);

                    
                    DataTable dtblH = new DataTable();
                    DataTable dtblT = new DataTable();


                    DataTable prndtblHeader = new DataTable();
                    string strEmpID = "";
                    string strTerminal = "";
                    int intNoOfSale = 0;
                    string strStartDate = "";
                    string strStartTime = "";
                    string strEndDate = "";
                    string strEndTime = "";
                    string strNotes = "";
                    double dblTaxedSales = 0;
                    double dblNonTaxedSales = 0;
                    string strTax1Exist = "N";
                    string strTax1Name = "";
                    double dblTax1Amount = 0;
                    string strTax2Exist = "N";
                    string strTax2Name = "";
                    double dblTax2Amount = 0;
                    string strTax3Exist = "N";
                    string strTax3Name = "";
                    double dblTax3Amount = 0;
                    double dblServiceSales = 0;
                    double dblProductSales = 0;
                    double dblOtherSales = 0;
                    int intDiscountItemNo = 0;
                    double dblDiscountItemAmount = 0;
                    int intDiscountInvoiceNo = 0;
                    double dblDiscountInvoiceAmount = 0;
                    double dblLayawayDeposits = 0;
                    double dblLayawayRefund = 0;
                    double dblLayawayPayment = 0;
                    double dblLayawaySalesPosted = 0;
                    double dblPaidOuts = 0;
                    double dblGCsold = 0;
                    double dblSCissued = 0;
                    double dblSCredeemed = 0;
                    double dblHACharged = 0;
                    double dblHApayments = 0;
                    int intNoSaleCount = 0;
                    double dblTotalSales = 0;

                    double dblRentSales = 0;
                    double dblRentDeposit = 0;
                    double dblRentDepositReturned = 0;
                    double dblRepairSales = 0;

                    double dblSTax1Amount = 0;
                    double dblSTax2Amount = 0;
                    double dblSTax3Amount = 0;

                    double dblBTax1Amount = 0;
                    double dblBTax2Amount = 0;
                    double dblBTax3Amount = 0;

                    double dblRntTax1Amount = 0;
                    double dblRntTax2Amount = 0;
                    double dblRntTax3Amount = 0;

                    double dblRTax1Amount = 0;
                    double dblRTax2Amount = 0;
                    double dblRTax3Amount = 0;

                    double dblSDiscountItemAmount = 0;
                    double dblBDiscountItemAmount = 0;
                    double dblRDiscountItemAmount = 0;
                    double dblRntDiscountInvoiceAmount = 0;
                    double dblRDiscountInvoiceAmount = 0;



                    int intSDiscountItemNo = 0;
                    int intBDiscountItemNo = 0;
                    int intRDiscountItemNo = 0;
                    int intRntDiscountInvoiceNo = 0;
                    int intRDiscountInvoiceNo = 0;



                    int intSalesInvoiceCount = 0;
                    int intRentInvoiceCount = 0;
                    int intRepairInvoiceCount = 0;

                    double dblProductTx = 0;
                    double dblProductNTx = 0;

                    double dblServiceTx = 0;
                    double dblServiceNTx = 0;

                    double dblOtherTx = 0;
                    double dblOtherNTx = 0;

                    double dblCashTip = 0;
                    double dblCCTip = 0;
                    string strTip = "";

                    double dblSalesFees = 0;
                    double dblSalesFeesTax = 0;


                    double dblRentFees = 0;
                    double dblRentFeesTax = 0;

                    double dblRepairFees = 0;
                    double dblRepairFeesTax = 0;

                    double dblDTax = 0;
                    double dblMGC = 0;
                    double dblPGC = 0;
                    double dblDGC = 0;
                    double dblPLGC = 0;
                    double dblBot = 0;

                    double dblRepairDeposit = 0;

                    int intFreeQty = 0;
                    double dblFreeAmount = 0;

                    double dblLottoPayout = 0;
                    double dblGiftAid = 0;

                    prndtblHeader = FetchCOHeader();
                    if ((IsCloseout) && (Settings.CloseoutExport == "Y")) dtblH = prndtblHeader;
                    foreach (DataRow dr in prndtblHeader.Rows)
                    {
                        strEmpID = dr["EmpID"].ToString();
                        intNoOfSale = GeneralFunctions.fnInt32(dr["NoOfSales"].ToString());
                        strStartDate = dr["StartDateTime"].ToString();
                        strStartTime = dr["StartTime"].ToString();
                        strEndDate = dr["EndDateTime"].ToString();
                        strEndTime = dr["EndTime"].ToString();
                        strNotes = dr["Notes"].ToString();
                        strTerminal = dr["TerminalName"].ToString();

                        dblTaxedSales = GeneralFunctions.fnDouble(dr["TaxedSales"].ToString());
                        dblNonTaxedSales = GeneralFunctions.fnDouble(dr["NonTaxedSales"].ToString());
                        strTax1Exist = dr["Tax1Exist"].ToString();
                        strTax1Name = dr["Tax1Name"].ToString();
                        dblTax1Amount = GeneralFunctions.fnDouble(dr["Tax1Amount"].ToString());
                        strTax2Exist = dr["Tax2Exist"].ToString();
                        strTax2Name = dr["Tax2Name"].ToString();
                        dblTax2Amount = GeneralFunctions.fnDouble(dr["Tax2Amount"].ToString());
                        strTax3Exist = dr["Tax3Exist"].ToString();
                        strTax3Name = dr["Tax3Name"].ToString();
                        dblTax3Amount = GeneralFunctions.fnDouble(dr["Tax3Amount"].ToString());
                        dblServiceSales = GeneralFunctions.fnDouble(dr["ServiceSales"].ToString());
                        dblProductSales = GeneralFunctions.fnDouble(dr["ProductSales"].ToString());
                        dblOtherSales = GeneralFunctions.fnDouble(dr["OtherSales"].ToString());
                        intDiscountItemNo = GeneralFunctions.fnInt32(dr["DiscountItemNo"].ToString());
                        dblDiscountItemAmount = GeneralFunctions.fnDouble(dr["DiscountItemAmount"].ToString());
                        intDiscountInvoiceNo = GeneralFunctions.fnInt32(dr["DiscountInvoiceNo"].ToString());
                        dblDiscountInvoiceAmount = GeneralFunctions.fnDouble(dr["DiscountInvoiceAmount"].ToString());
                        dblLayawayDeposits = GeneralFunctions.fnDouble(dr["LayawayDeposits"].ToString());
                        dblLayawayRefund = GeneralFunctions.fnDouble(dr["LayawayRefund"].ToString());
                        dblLayawayPayment = GeneralFunctions.fnDouble(dr["LayawayPayment"].ToString());
                        dblLayawaySalesPosted = GeneralFunctions.fnDouble(dr["LayawaySalesPosted"].ToString());
                        dblPaidOuts = GeneralFunctions.fnDouble(dr["PaidOuts"].ToString());
                        dblGCsold = GeneralFunctions.fnDouble(dr["GCsold"].ToString());
                        dblSCissued = GeneralFunctions.fnDouble(dr["SCissued"].ToString());
                        dblSCredeemed = GeneralFunctions.fnDouble(dr["SCredeemed"].ToString());
                        dblHACharged = GeneralFunctions.fnDouble(dr["HACharged"].ToString());
                        dblHApayments = GeneralFunctions.fnDouble(dr["HApayments"].ToString());

                        intNoSaleCount = GeneralFunctions.fnInt32(dr["NoSaleCount"].ToString());


                        dblRentSales = GeneralFunctions.fnDouble(dr["RentSales"].ToString());
                        dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        dblRentDepositReturned = GeneralFunctions.fnDouble(dr["RentDepositReturned"].ToString());
                        dblRepairSales = GeneralFunctions.fnDouble(dr["RepairSales"].ToString());

                        dblSTax1Amount = GeneralFunctions.fnDouble(dr["STax1Amount"].ToString());
                        dblSTax2Amount = GeneralFunctions.fnDouble(dr["STax2Amount"].ToString());
                        dblSTax3Amount = GeneralFunctions.fnDouble(dr["STax3Amount"].ToString());

                        dblBTax1Amount = GeneralFunctions.fnDouble(dr["BTax1Amount"].ToString());
                        dblBTax2Amount = GeneralFunctions.fnDouble(dr["BTax2Amount"].ToString());
                        dblBTax3Amount = GeneralFunctions.fnDouble(dr["BTax3Amount"].ToString());

                        dblRTax1Amount = GeneralFunctions.fnDouble(dr["RTax1Amount"].ToString());
                        dblRTax2Amount = GeneralFunctions.fnDouble(dr["RTax2Amount"].ToString());
                        dblRTax3Amount = GeneralFunctions.fnDouble(dr["RTax3Amount"].ToString());

                        dblRntTax1Amount = GeneralFunctions.fnDouble(dr["RntTax1Amount"].ToString());
                        dblRntTax2Amount = GeneralFunctions.fnDouble(dr["RntTax2Amount"].ToString());
                        dblRntTax3Amount = GeneralFunctions.fnDouble(dr["RntTax3Amount"].ToString());

                        dblSDiscountItemAmount = GeneralFunctions.fnDouble(dr["SDiscountItemAmount"].ToString());
                        dblBDiscountItemAmount = GeneralFunctions.fnDouble(dr["BDiscountItemAmount"].ToString());
                        dblRDiscountItemAmount = GeneralFunctions.fnDouble(dr["RDiscountItemAmount"].ToString());
                        dblRntDiscountInvoiceAmount = GeneralFunctions.fnDouble(dr["RntDiscountInvoiceAmount"].ToString());
                        dblRDiscountInvoiceAmount = GeneralFunctions.fnDouble(dr["RDiscountInvoiceAmount"].ToString());

                        intSDiscountItemNo = GeneralFunctions.fnInt32(dr["SDiscountItemNo"].ToString());
                        intBDiscountItemNo = GeneralFunctions.fnInt32(dr["BDiscountItemNo"].ToString());
                        intRDiscountItemNo = GeneralFunctions.fnInt32(dr["RDiscountItemNo"].ToString());
                        intRntDiscountInvoiceNo = GeneralFunctions.fnInt32(dr["RntDiscountInvoiceNo"].ToString());
                        intRDiscountInvoiceNo = GeneralFunctions.fnInt32(dr["RDiscountInvoiceNo"].ToString());

                        intSalesInvoiceCount = GeneralFunctions.fnInt32(dr["SalesInvoiceCount"].ToString());
                        intRentInvoiceCount = GeneralFunctions.fnInt32(dr["RentInvoiceCount"].ToString());
                        intRepairInvoiceCount = GeneralFunctions.fnInt32(dr["RepairInvoiceCount"].ToString());

                        dblProductTx = GeneralFunctions.fnDouble(dr["ProductTx"].ToString());
                        dblProductNTx = GeneralFunctions.fnDouble(dr["ProductNTx"].ToString());

                        dblServiceTx = GeneralFunctions.fnDouble(dr["ServiceTx"].ToString());
                        dblServiceNTx = GeneralFunctions.fnDouble(dr["ServiceNTx"].ToString());

                        dblOtherTx = GeneralFunctions.fnDouble(dr["OtherTx"].ToString());
                        dblOtherNTx = GeneralFunctions.fnDouble(dr["OtherNTx"].ToString());


                        dblCashTip = GeneralFunctions.fnDouble(dr["CashTip"].ToString());
                        dblCCTip = GeneralFunctions.fnDouble(dr["CCTip"].ToString());

                        dblSalesFees = GeneralFunctions.fnDouble(dr["SalesFees"].ToString());
                        dblSalesFeesTax = GeneralFunctions.fnDouble(dr["SalesFeesTax"].ToString());

                        dblRentFees = GeneralFunctions.fnDouble(dr["RentFees"].ToString());
                        dblRentFeesTax = GeneralFunctions.fnDouble(dr["RentFeesTax"].ToString());

                        dblRepairFees = GeneralFunctions.fnDouble(dr["RepairFees"].ToString());
                        dblRepairFeesTax = GeneralFunctions.fnDouble(dr["RepairFeesTax"].ToString());

                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        dblMGC = GeneralFunctions.fnDouble(dr["MGCsold"].ToString());
                        dblPGC = GeneralFunctions.fnDouble(dr["PGCsold"].ToString());
                        dblDGC = GeneralFunctions.fnDouble(dr["DGCsold"].ToString());
                        dblPLGC = GeneralFunctions.fnDouble(dr["PLGCsold"].ToString());

                        dblBot = GeneralFunctions.fnDouble(dr["BottleRefund"].ToString());

                        dblRepairDeposit = GeneralFunctions.fnDouble(dr["RepairDeposit"].ToString());

                        intFreeQty = GeneralFunctions.fnInt32(dr["FreeQty"].ToString());
                        dblFreeAmount = GeneralFunctions.fnDouble(dr["FreeAmount"].ToString());
                        strTip = dr["Tip"].ToString();
                        dblLottoPayout = GeneralFunctions.fnDouble(dr["LottoPayout"].ToString());

                        dblGiftAid = GeneralFunctions.fnDouble(dr["GiftAid"].ToString());
                    }

                    dblTotalSales = dblProductSales + dblServiceSales + dblOtherSales
                        + dblSTax1Amount + dblSTax2Amount + dblSTax3Amount + dblBTax1Amount + dblBTax2Amount + dblBTax3Amount
                        - dblDiscountInvoiceAmount + dblSalesFees + dblSalesFeesTax + (Settings.TaxInclusive == "N" ? (dblTax1Amount + dblTax2Amount + dblTax3Amount) : 0);

                    prndtblHeader.Dispose();

                    DataTable prndtblINV41 = new DataTable();
                    prndtblINV41 = FetchCOTenderOverShort();
                    double dblOSTotal1 = 0;
                    foreach (DataRow dr1 in prndtblINV41.Rows)
                    {
                        
                        double dblTenderAmount = 0;
                        string strTenderName = dr1["TenderName"].ToString();
                        dblTenderAmount = GeneralFunctions.fnDouble(dr1["TenderAmount"].ToString());
                        if (strTenderName != "Card Processing Total")
                        {

                            dblOSTotal1 = dblOSTotal1 + dblTenderAmount;
                           
                        }
                       
                    }
                    prndtblINV41.Dispose();

                    dblOSTotal1 = dblOSTotal1 + (-dblPaidOuts);

                    /*
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CLOSE_OUT_REPORT, "", "", "OneColumn" });

                    if (strCloseoutType == "C") dtblstrm.Rows.Add(new object[] { Properties.Resources.Consolidated, "", "", "OneColumn" });
                    if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.By_Employee, "", "", "OneColumn" });
                    if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.By_Terminal, "", "", "OneColumn" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRANSACTION_SUMMARY, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Begin_, "", strStartDate + SP1 + strStartTime });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.End_, "", strEndDate + SP1 + strEndTime });

                    if (strCloseoutType == "C")
                    {
                        if (SystemVariables.CurrentUserID <= 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserName, "" });
                        else dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserCode, "" });
                    }
                    if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.Employee + "#:", strEmpID, "" });
                    if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + "#:", strTerminal, "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Close_Out_ + ":", " " + intCloseoutID.ToString(), "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.NOTE + ":", "", "" });

                    if (strNotes != "")
                    {
                        string OrginalF = "";
                        ArrangeText(strNotes, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;
                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 30), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 30), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                        }

                        dtblstrm.Rows.Add(new object[] { strNotes, "", "", NumberOfOccurancesF.ToString() });

                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.SALES, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.No__of_Invoices + ": ", intSalesInvoiceCount.ToString(), "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Product_Sales, "", GetFotmatDoubleValue(dblProductSales) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Taxed, "", GetFotmatDoubleValue(dblProductTx) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Non_Taxed, "", GetFotmatDoubleValue(dblProductNTx) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Service_Sales, "", GetFotmatDoubleValue(dblServiceSales) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Taxed, "", GetFotmatDoubleValue(dblServiceTx) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Non_Taxed, "", GetFotmatDoubleValue(dblServiceNTx) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Other_Sales, "", GetFotmatDoubleValue(dblOtherSales) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Taxed, "", GetFotmatDoubleValue(dblOtherTx) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Non_Taxed, "", GetFotmatDoubleValue(dblOtherNTx) });

                    if (Settings.TaxInclusive == "N")
                    {
                        if (strTax1Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax1Name, "", GetFotmatNonZeroDoubleValue(dblTax1Amount) });
                        }
                        if (strTax2Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax2Name, "", GetFotmatNonZeroDoubleValue(dblTax2Amount) });
                        }
                        if (strTax3Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax3Name, "", GetFotmatNonZeroDoubleValue(dblTax3Amount) });
                        }

                        if (dblDTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Destination_Tax, "", GetFotmatNonZeroDoubleValue(dblDTax) });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        else
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                    }


                    dtblstrm.Rows.Add(new object[] { Properties.Resources.DISCOUNTS, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Item, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Product, GetFotmatNonZeroIntValue(intDiscountItemNo), GetFotmatNonZeroDoubleValue1(dblDiscountItemAmount) });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Service, GetFotmatNonZeroIntValue(intSDiscountItemNo), GetFotmatNonZeroDoubleValue1(dblSDiscountItemAmount) });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.other, GetFotmatNonZeroIntValue(intBDiscountItemNo), GetFotmatNonZeroDoubleValue1(dblBDiscountItemAmount) });

                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Invoice, GetFotmatNonZeroIntValue(intDiscountInvoiceNo), GetFotmatNonZeroDoubleValue1(dblDiscountInvoiceAmount) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Free_Items, GetFotmatNonZeroIntValue(intFreeQty), GetFotmatNonZeroDoubleValue1(dblFreeAmount) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });



                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblSalesFees) });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblSalesFeesTax) });


                    dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSales), "B" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    if (Settings.TaxInclusive == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "TAX", "", "" });

                        if (strTax1Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax1Name, "", GetFotmatNonZeroDoubleValue(dblTax1Amount) });
                        }
                        if (strTax2Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax2Name, "", GetFotmatNonZeroDoubleValue(dblTax2Amount) });
                        }
                        if (strTax3Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax3Name, "", GetFotmatNonZeroDoubleValue(dblTax3Amount) });
                        }

                        if (dblDTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Destination_Tax, "", GetFotmatNonZeroDoubleValue(dblDTax) });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        else
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                    }


                    if (intRentInvoiceCount > 0) // Rent 
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.RENTS, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.No__of_Invoices + ": ", intRentInvoiceCount.ToString(), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Net_Issued, "", GetFotmatDoubleValue(dblRentSales) });

                        if (strTax1Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax1Name, "", GetFotmatNonZeroDoubleValue(dblRntTax1Amount) });
                        }
                        if (strTax2Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax2Name, "", GetFotmatNonZeroDoubleValue(dblRntTax2Amount) });
                        }
                        if (strTax3Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax3Name, "", GetFotmatNonZeroDoubleValue(dblRntTax3Amount) });
                        }

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Deposits, "", GetFotmatDoubleValue(dblRentDeposit) });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Deposits_Returned, "", GetFotmatDoubleValue1(dblRentDepositReturned) });


                        dtblstrm.Rows.Add(new object[] { Properties.Resources.DISCOUNTS, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { SP1, GetFotmatNonZeroIntValue(intRntDiscountInvoiceNo), GetFotmatNonZeroDoubleValue1(dblRntDiscountInvoiceAmount) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblRentFees) });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblRentFeesTax) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if ((intRepairInvoiceCount > 0) || (dblRepairDeposit > 0))// Repair
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.REPAIRS, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.No__of_Invoices + ": ", intRepairInvoiceCount.ToString(), "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Amount, "", GetFotmatDoubleValue(dblRepairSales) });

                        if (strTax1Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax1Name, "", GetFotmatNonZeroDoubleValue(dblRTax1Amount) });
                        }
                        if (strTax2Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax2Name, "", GetFotmatNonZeroDoubleValue(dblRTax2Amount) });
                        }
                        if (strTax3Exist == "Y")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + strTax3Name, "", GetFotmatNonZeroDoubleValue(dblRTax3Amount) });
                        }

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Deposit, "", GetFotmatDoubleValue(dblRepairDeposit) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.DISCOUNTS, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Item, GetFotmatNonZeroIntValue(intRDiscountItemNo), GetFotmatNonZeroDoubleValue1(dblRDiscountItemAmount) });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Invoice, GetFotmatNonZeroIntValue(intRDiscountInvoiceNo), GetFotmatNonZeroDoubleValue1(dblRDiscountInvoiceAmount) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblRepairFees) });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblRepairFeesTax) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    dtblstrm.Rows.Add(new object[] { Properties.Resources.NON_SALES, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Deposits, "", GetFotmatDoubleValue(dblLayawayDeposits), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Refunds, "", GetFotmatDoubleValue(dblLayawayRefund), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Payments, "", GetFotmatDoubleValue(dblLayawayPayment), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Sales_Posted, "", GetFotmatDoubleValue(dblLayawaySalesPosted), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.No_Sale_Count, "", intNoSaleCount, "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Paid_Outs, "", GetFotmatDoubleValue(dblPaidOuts), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Lotto_Payout, "", GetFotmatDoubleValue(dblLottoPayout), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Gift_Cert__Sold, "", GetFotmatDoubleValue(dblGCsold), "TwoOneColumn" });
                    if (Settings.PaymentGateway == 2) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Mercury_Gift_Card_Sold, "", GetFotmatDoubleValue(dblMGC), "TwoOneColumn" });
                    if (Settings.PaymentGateway == 3) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Mercury_Gift_Card_Sold, "", GetFotmatDoubleValue(dblPGC), "TwoOneColumn" });
                    if (Settings.PaymentGateway == 5) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Datacap_Gift_Card_Sold, "", GetFotmatDoubleValue(dblDGC), "TwoOneColumn" });
                    if (Settings.PaymentGateway == 7) dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.POSLink_Gift_Card_Sold, "", GetFotmatDoubleValue(dblPLGC), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.House_Account_Payments, "", GetFotmatDoubleValue(dblHApayments), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Bottle_Refund, "", GetFotmatDoubleValue(dblBot), "TwoOneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.STORE_CREDIT, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Issued, "", GetFotmatDoubleValue(dblSCissued) });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Redeemed, "", GetFotmatDoubleValue(dblSCredeemed) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.HOUSE_ACCOUNT, "", "", "OneColumn" });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Charged, "", GetFotmatDoubleValue(dblHACharged) });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Account_Payments, "", GetFotmatDoubleValue(dblHApayments) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    if (Settings.AcceptTips == "Y")
                    {
                        if (strCloseoutType != "T")
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.TIPS, "", strTip });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                    }

                    // Item Returns

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.RETURNS, Properties.Resources.Invoice + "# ", "" });

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchCOReturn();
                    double dblTempTotal = 0;
                    int intC = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        intC++;
                        string strReturnSKU = "";
                        string strReturnInvoiceNo = "";
                        double dblReturnAmount = 0;
                        strReturnSKU = dr["ReturnSKU"].ToString();
                        strReturnInvoiceNo = dr["ReturnInvoiceNo"].ToString();
                        dblReturnAmount = GeneralFunctions.fnDouble(dr["ReturnAmount"].ToString());
                        dblTempTotal = dblTempTotal + dblReturnAmount;

                        dtblstrm.Rows.Add(new object[] { SP1 + strReturnSKU, strReturnInvoiceNo, GetFotmatDoubleValue(dblReturnAmount) });

                    }
                    prndtblINV1.Dispose();

                    if (intC > 0)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTempTotal), "" });
                    }
                    else
                    {
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.NoReturns, "", "", "OneColumn" });
                    }

                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // Tender Reconciliation

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TENDER_RECONCILIATION, "", "", "OneColumn" });

                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    // TENDER

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "OneColumn" });

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchCOTender();
                    if ((IsCloseout) && (Settings.CloseoutExport == "Y")) dtblT = prndtblINV2;
                    double dblTTotal = 0;

                    bool blCashFloat = false;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        if (dr["TenderName"].ToString().Contains("Cash Float"))
                        {
                            blCashFloat = true;
                            break;
                        }
                    }
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTenderName = "";
                        string strTenderCount = "";
                        double dblTenderAmount = 0;
                        strTenderName = dr["TenderName"].ToString();
                        strTenderCount = dr["TenderCount"].ToString();
                        dblTenderAmount = GeneralFunctions.fnDouble(dr["TenderAmount"].ToString());
                        if (strTenderName != "Card Processing Total")
                        {
                            if (dblTenderAmount != -929292)
                            {
                                dblTTotal = dblTTotal + dblTenderAmount;
                                if (strTenderName.StartsWith("Gift Certificate")) strTenderName.Replace("Gift Certificate", Properties.Resources.Gift_Cert);
                                if (strTenderName.StartsWith("American Express")) strTenderName = strTenderName.Replace("American Express", Properties.Resources.American_Exp_);
                                if (strTenderName.StartsWith("Debit Card Cash Back")) strTenderName = strTenderName.Replace("Debit Card Cash Back", Properties.Resources.Cash_Back);

                                if ((blCashFloat) && (strTenderName == "Cash"))
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strTenderName, "", "" });
                                }
                                else
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strTenderName, "", GetFotmatDoubleValue(dblTenderAmount) });
                                }

                            }


                        }
                        else
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Card_Proc_Total, "", GetFotmatDoubleValue(dblTenderAmount) });
                        }

                    }
                    prndtblINV2.Dispose();

                    dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total_Amount, "", GetFotmatDoubleValue(dblTTotal) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // COUNTS

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.COUNTS, "", "", "OneColumn" });

                    DataTable prndtblINV3 = new DataTable();
                    prndtblINV3 = FetchCOTenderCount();
                    double dblCTotal = 0;
                    foreach (DataRow dr in prndtblINV3.Rows)
                    {
                        string strTenderName = "";
                        string strTenderCount = "";
                        double dblTenderAmount = 0;
                        strTenderName = dr["TenderName"].ToString();
                        strTenderCount = dr["TenderCount"].ToString();
                        dblTenderAmount = GeneralFunctions.fnDouble(dr["TenderAmount"].ToString());
                        dblCTotal = dblCTotal + dblTenderAmount;
                        if (strTenderName.StartsWith("Gift Certificate")) strTenderName.Replace("Gift Certificate", Properties.Resources.Gift_Cert);
                        if (strTenderName.StartsWith("American Express")) strTenderName = strTenderName.Replace("American Express", Properties.Resources.American_Exp_);

                        dtblstrm.Rows.Add(new object[] { SP1 + strTenderName, "", GetFotmatDoubleValue(dblTenderAmount) });
                    }
                    prndtblINV3.Dispose();

                    dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total_Counted, "", GetFotmatDoubleValue(dblCTotal) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    // OVER/(SHORT)

                    dtblstrm.Rows.Add(new object[] { Properties.Resources.OVER__SHORT_, "", "", "OneColumn" });

                    DataTable prndtblINV4 = new DataTable();
                    prndtblINV4 = FetchCOTenderOverShort();
                    double dblOSTotal = 0;
                    foreach (DataRow dr in prndtblINV4.Rows)
                    {
                        string strTenderName = "";
                        string strTenderCount = "";
                        double dblTenderAmount = 0;
                        strTenderName = dr["TenderName"].ToString();
                        strTenderCount = dr["TenderCount"].ToString();
                        dblTenderAmount = GeneralFunctions.fnDouble(dr["TenderAmount"].ToString());
                        if (strTenderName != "Card Processing Total")
                        {

                            dblOSTotal = dblOSTotal + dblTenderAmount;
                            if (strTenderName.StartsWith("Gift Certificate")) strTenderName.Replace("Gift Certificate", Properties.Resources.Gift_Cert);
                            if (strTenderName.StartsWith("American Express")) strTenderName = strTenderName.Replace("American Express", Properties.Resources.American_Exp_);
                            dtblstrm.Rows.Add(new object[] { SP1 + strTenderName, "", GetFotmatDoubleValue(dblTenderAmount) });
                        }
                        else
                        {
                            //dtblstrm.Rows.Add(new object[] { SP1 + "Card Processing Tot", SP1 + SP2 + strTenderCount, GetFotmatDoubleValue(dblTenderAmount) });
                        }
                    }
                    prndtblINV4.Dispose();



                    dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total_Over__Short_, "", GetFotmatDoubleValue(dblOSTotal) });
                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                    if (blCloseoutSaleHour)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.SALES_BY_HOUR, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Begin_, "", strStartDate + SP1 + strStartTime });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.End_, "", strEndDate + SP1 + strEndTime });

                        if (strCloseoutType == "C")
                        {
                            if (SystemVariables.CurrentUserID <= 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserName, "" });
                            else dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserCode, "" });
                        }
                        if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.Employee + "#:", strEmpID, "" });
                        if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + "#:", strTerminal, "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Close_Out_ + ":", " " + intCloseoutID.ToString(), "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.NOTE + ":", "", "", "OneColumn" });

                        if (strNotes != "")
                        {
                            string OrginalF = "";
                            ArrangeText(strNotes, 30, ref OrginalF);
                            char FindF = '\n';
                            int NumberOfOccurancesF = 0;
                            string CopyOrginalF = string.Copy(OrginalF);
                            int PlaceF = 0;
                            NumberOfOccurancesF = 0;
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            while (PlaceF != -1)
                            {
                                string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 30), "", "" });
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                }

                                CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                NumberOfOccurancesF++;
                            }

                            if (CopyOrginalF.Length > 30)
                            {
                                int len = CopyOrginalF.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (CopyOrginalF != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                        CopyOrginalF = CopyOrginalF.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                            }

                            if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                            else
                            {
                                if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                            }

                            dtblstrm.Rows.Add(new object[] { strNotes, "", "", NumberOfOccurancesF.ToString() });

                        }

                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });


                        DataTable prndtblINV5 = new DataTable();
                        prndtblINV5 = FetchCOSH();
                        double dblSHTotal = 0;
                        foreach (DataRow dr in prndtblINV5.Rows)
                        {
                            string strTimeinterval = "";
                            double dblSalesAmount = 0;
                            strTimeinterval = dr["Timeinterval"].ToString();
                            dblSalesAmount = GeneralFunctions.fnDouble(dr["SalesAmount"].ToString());
                            dblSHTotal = dblSHTotal + dblSalesAmount;
                            dtblstrm.Rows.Add(new object[] { SP1 + strTimeinterval, "", GetFotmatDoubleValue(dblSalesAmount), "TwoOneColumn" });
                        }
                        prndtblINV5.Dispose();

                        dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total_Sales, "", GetFotmatDoubleValue(dblSHTotal) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    if (blCloseoutSaleDept)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.SALES_BY_DEPARTMENT, "", "", "OneColumn" });
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Begin_, "", strStartDate + SP1 + strStartTime });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.End_, "", strEndDate + SP1 + strEndTime });

                        if (strCloseoutType == "C")
                        {
                            if (SystemVariables.CurrentUserID <= 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserName, "" });
                            else dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_, SystemVariables.CurrentUserCode, "" });
                        }
                        if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.Employee + "#:", strEmpID, "" });
                        if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + "#:", strTerminal, "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Close_Out_ + ":", " " + intCloseoutID.ToString(), "" });

                        dtblstrm.Rows.Add(new object[] { Properties.Resources.NOTE + ":", "", "", "OneColumn" });

                        if (strNotes != "")
                        {
                            string OrginalF = "";
                            ArrangeText(strNotes, 30, ref OrginalF);
                            char FindF = '\n';
                            int NumberOfOccurancesF = 0;
                            string CopyOrginalF = string.Copy(OrginalF);
                            int PlaceF = 0;
                            NumberOfOccurancesF = 0;
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            while (PlaceF != -1)
                            {
                                string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 30), "", "" });
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                }

                                CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                NumberOfOccurancesF++;
                            }

                            if (CopyOrginalF.Length > 30)
                            {
                                int len = CopyOrginalF.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (CopyOrginalF != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 30), "", "" });
                                        CopyOrginalF = CopyOrginalF.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                            }

                            if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                            else
                            {
                                if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                            }
                            dtblstrm.Rows.Add(new object[] { strNotes, "", "", NumberOfOccurancesF.ToString() });
                        }

                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });


                        DataTable prndtblINV6 = new DataTable();
                        prndtblINV6 = FetchCOSD();
                        double dblSDTotal = 0;
                        foreach (DataRow dr in prndtblINV6.Rows)
                        {

                            string strDeptID = "";
                            string strDeptDesc = "";
                            double dblSalesAmount = 0;
                            strDeptID = dr["DeptID"].ToString();
                            strDeptDesc = dr["DeptDesc"].ToString();
                            dblSalesAmount = GeneralFunctions.fnDouble(dr["SalesAmount"].ToString());
                            dblSDTotal = dblSDTotal + dblSalesAmount;

                            dtblstrm.Rows.Add(new object[] { SP1 + strDeptID, SP1 + strDeptDesc, GetFotmatDoubleValue(dblSalesAmount) });
                        }
                        prndtblINV6.Dispose();

                        dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Total_Sales, "", GetFotmatDoubleValue(dblSDTotal) });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    */


                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }

                    

                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        
                        if (dr["GroupName"].ToString() == "Separator")
                        {
                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            

                            if (dr["GroupName"].ToString() == "Closeout Report Caption")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.CLOSE_OUT_REPORT, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout Type")
                            {
                                if (strCloseoutType == "C") dtblstrm.Rows.Add(new object[] { Properties.Resources.Consolidated, "", "", "", "Y", pval });
                                if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.By_Employee, "", "", "", "Y", pval });
                                if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.By_Terminal, "", "", "", "Y", pval });

                                if (strCloseoutType == "C")
                                {
                                    if (SystemVariables.CurrentUserID <= 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_ + SystemVariables.CurrentUserName, "", "", "", "Y", pval });
                                    else dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_ + SystemVariables.CurrentUserCode, "", "", "", "Y", pval });
                                }
                                if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.Employee + "#:" + strEmpID, "", "", "", "Y", pval });
                                if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + "#:" + strTerminal, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Transaction Summary")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TRANSACTION_SUMMARY, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout Begin Date/Time")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Begin_ + strStartDate + SP1 + strStartTime, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout End Date/Time")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.End_ + strEndDate + SP1 + strEndTime, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Close_Out_ + ":" + intCloseoutID.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout Notes")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.NOTE, "", "", "", "Y", pval });
                                if (strNotes != "")
                                {
                                    string OrginalF = "";
                                    ArrangeText(strNotes, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;
                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 30), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 30), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }

                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                                    }

                                    dtblstrm.Rows.Add(new object[] { strNotes, "", "", "", "Y", pval });

                                }
                            }

                            if (dr["GroupName"].ToString() == "Sales Caption")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.SALES, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "No of Invoices (Sales)")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.No__of_Invoices + ": " + intSalesInvoiceCount.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Product Sales Amount")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Product_Sales + ": " + GetFotmatDoubleValueWithCurrency(dblProductSales), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Product Sales Amount(Taxed)")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Taxed + ": " + GetFotmatDoubleValueWithCurrency(dblProductTx), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Product Sales Amount(Non Taxed)")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Non_Taxed + ": " + GetFotmatDoubleValueWithCurrency(dblProductNTx), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Service Sales Amount")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Service_Sales + ": " + GetFotmatDoubleValueWithCurrency(dblServiceSales), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Service Sales Amount(Taxed)")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Taxed + ": " + GetFotmatDoubleValueWithCurrency(dblServiceTx), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Service Sales Amount(Non Taxed)")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Non_Taxed + ": " + GetFotmatDoubleValueWithCurrency(dblServiceNTx), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Other Sales Amount")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Other_Sales + ": " + GetFotmatDoubleValueWithCurrency(dblOtherSales), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Other Sales Amount(Taxed)")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Taxed + ": " + GetFotmatDoubleValueWithCurrency(dblOtherTx), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Other Sales Amount(Non Taxed)")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Non_Taxed + ": " + GetFotmatDoubleValueWithCurrency(dblOtherNTx), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Tax Details (Sales)")
                            {
                                if (Settings.TaxInclusive == "N")
                                {
                                    if (strTax1Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { strTax1Name + ": " + GetFotmatNonZeroDoubleValueWithCurrency(dblTax1Amount), "", "", "", "Y", pval });
                                    }
                                    if (strTax2Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { strTax2Name + ": " + GetFotmatNonZeroDoubleValueWithCurrency(dblTax2Amount), "", "", "", "Y", pval });
                                    }
                                    if (strTax3Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { strTax3Name + ": " + GetFotmatNonZeroDoubleValueWithCurrency(dblTax3Amount), "", "", "", "Y", pval });
                                    }

                                }

                                if (Settings.TaxInclusive == "Y")
                                {
                                    dtblstrm.Rows.Add(new object[] { "TAX", "", "", "", "Y", pval });

                                    if (strTax1Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strTax1Name +": " + GetFotmatNonZeroDoubleValueWithCurrency(dblTax1Amount), "", "", "", "Y", pval });
                                    }
                                    if (strTax2Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strTax2Name + ": " + GetFotmatNonZeroDoubleValueWithCurrency(dblTax2Amount), "", "", "", "Y", pval });
                                    }
                                    if (strTax3Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strTax3Name + ": " + GetFotmatNonZeroDoubleValueWithCurrency(dblTax3Amount), "", "", "", "Y", pval });
                                    }

                                    
                                }

                            }

                            if (dr["GroupName"].ToString() == "Discount Caption (Sales)")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.DISCOUNTS, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Discount Details (Sales)")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Item, "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Product + ": " + GetFotmatNonZeroIntValue(intDiscountItemNo) + "  " + GetFotmatNonZeroDoubleValue1(dblDiscountItemAmount), "", "", "", "Y", pval });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Service + ": " + GetFotmatNonZeroIntValue(intSDiscountItemNo) + "  " + GetFotmatNonZeroDoubleValue1(dblSDiscountItemAmount), "", "", "", "Y", pval });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.other + ": " + GetFotmatNonZeroIntValue(intBDiscountItemNo) + "  " + GetFotmatNonZeroDoubleValue1(dblBDiscountItemAmount), "", "", "", "Y", pval });

                            }

                            if (dr["GroupName"].ToString() == "Free Items")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Free_Items + ": " + GetFotmatNonZeroIntValue(intFreeQty) + "  " + GetFotmatNonZeroDoubleValue1(dblFreeAmount), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Fees Amount (Sales)")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValueWithCurrency(dblSalesFees), "", "", "", "Y", pval });
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblSalesFeesTax), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Total Amount")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblTotalSales), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Rent Caption")
                            {
                                if (intRentInvoiceCount > 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.RENTS, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "No of Invoices (Rent)")
                            {
                                if (intRentInvoiceCount > 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.No__of_Invoices + ": " + intRentInvoiceCount.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Net Issued (Rent)")
                            {
                                if (intRentInvoiceCount > 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Net_Issued + ": " + GetFotmatDoubleValueWithCurrency(dblRentSales), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Tax Details (Rent)")
                            {
                                if (intRentInvoiceCount > 0)
                                {
                                    if (strTax1Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { strTax1Name + ": " + GetFotmatNonZeroDoubleValueWithCurrency(dblRntTax1Amount), "", "", "", "Y", pval });
                                    }
                                    if (strTax2Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { strTax2Name + ": " + GetFotmatNonZeroDoubleValueWithCurrency(dblRntTax2Amount), "", "", "", "Y", pval });
                                    }
                                    if (strTax3Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { strTax3Name + ": " + GetFotmatNonZeroDoubleValueWithCurrency(dblRntTax3Amount), "", "", "", "Y", pval });
                                    }
                                }
                            }

                            if (dr["GroupName"].ToString() == "Rent Deposit Amount")
                            {
                                if (intRentInvoiceCount > 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Deposits + ": " + GetFotmatDoubleValueWithCurrency(dblRentDeposit), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Rent Deposit Return Amount")
                            {
                                if (intRentInvoiceCount > 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Deposits_Returned + ": " + GetFotmatDoubleValueWithCurrency(dblRentDepositReturned), "", "", "", "Y", pval });
                            }



                            if (dr["GroupName"].ToString() == "Discount Caption (Rent)")
                            {
                                if (intRentInvoiceCount > 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.DISCOUNTS, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Discount Details (Rent)")
                            {
                                if (intRentInvoiceCount > 0) dtblstrm.Rows.Add(new object[] { GetFotmatNonZeroIntValue(intRntDiscountInvoiceNo) + "  " + GetFotmatNonZeroDoubleValue1(dblRntDiscountInvoiceAmount), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Fees Amount (Rent)")
                            {
                                if (intRentInvoiceCount > 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValueWithCurrency(dblRentFees), "", "", "", "Y", pval });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblRentFeesTax), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Repair Caption")
                            {
                                if ((intRepairInvoiceCount > 0) || (dblRepairDeposit > 0))
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.REPAIRS, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "No of Invoices (Repair)")
                            {
                                if ((intRepairInvoiceCount > 0) || (dblRepairDeposit > 0))
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.No__of_Invoices + ": " + intRepairInvoiceCount.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Sales Amount (Repair)")
                            {
                                if ((intRepairInvoiceCount > 0) || (dblRepairDeposit > 0))
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Amount + ": " + GetFotmatDoubleValueWithCurrency(dblRepairSales), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Tax Details (Repair)")
                            {
                                if ((intRepairInvoiceCount > 0) || (dblRepairDeposit > 0))
                                {
                                    if (strTax1Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strTax1Name + ": " + GetFotmatNonZeroDoubleValueWithCurrency(dblRTax1Amount), "", "", "", "Y", pval });
                                    }
                                    if (strTax2Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strTax2Name + ": " + GetFotmatNonZeroDoubleValueWithCurrency(dblRTax2Amount), "", "", "", "Y", pval });
                                    }
                                    if (strTax3Exist == "Y")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strTax3Name + ": " + GetFotmatNonZeroDoubleValueWithCurrency(dblRTax3Amount), "", "", "", "Y", pval });
                                    }
                                }
                            }

                            if (dr["GroupName"].ToString() == "Repair Deposit Amount")
                            {
                                if ((intRepairInvoiceCount > 0) || (dblRepairDeposit > 0))
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Deposit + ": " + GetFotmatDoubleValueWithCurrency(dblRepairDeposit), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Discount Caption (Repair)")
                            {
                                if ((intRepairInvoiceCount > 0) || (dblRepairDeposit > 0))
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.DISCOUNTS, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Discount Details (Repair)")
                            {
                                if ((intRepairInvoiceCount > 0) || (dblRepairDeposit > 0))
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Item + ": " + GetFotmatNonZeroIntValue(intRDiscountItemNo) + "  " + GetFotmatNonZeroDoubleValue1(dblRDiscountItemAmount), "", "", "", "Y", pval });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Invoice + ": " + GetFotmatNonZeroIntValue(intRDiscountInvoiceNo) + "  " + GetFotmatNonZeroDoubleValue1(dblRDiscountInvoiceAmount), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Fees Amount (Repair)")
                            {
                                if ((intRepairInvoiceCount > 0) || (dblRepairDeposit > 0))
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValueWithCurrency(dblRepairFees), "", "", "", "Y", pval });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblRepairFeesTax), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Non Sales Caption")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.NON_SALES, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Layaway Deposit")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Layaway_Deposits + ": " + GetFotmatDoubleValueWithCurrency(dblLayawayDeposits), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Layaway Refund")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Layaway_Refunds + ": " + GetFotmatDoubleValueWithCurrency(dblLayawayRefund), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Layaway Payment")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Layaway_Payments + ": " + GetFotmatDoubleValueWithCurrency(dblLayawayPayment), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Layaway Sales Posted")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Layaway_Sales_Posted + ": " + GetFotmatDoubleValueWithCurrency(dblLayawaySalesPosted), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Number of No Sale")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.No_Sale_Count + ": " + intNoSaleCount, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Paid Out")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Paid_Outs + ": " + GetFotmatDoubleValueWithCurrency(dblPaidOuts), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Lotto Payout")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Lotto_Payout + ": " + GetFotmatDoubleValueWithCurrency(dblLottoPayout), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Gift Aid Amount")
                            {
                                dtblstrm.Rows.Add(new object[] { "Gift Aid" + ": " + GetFotmatDoubleValueWithCurrency(dblGiftAid), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Gift Certificate Sold")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Gift_Cert__Sold + ": " + GetFotmatDoubleValueWithCurrency(dblGCsold), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "House Account Payment")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Payments + ": " + GetFotmatDoubleValueWithCurrency(dblHApayments), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Mercury/Datacap/PosLink Gift Card Sold")
                            {
                                if (Settings.PaymentGateway == 2) dtblstrm.Rows.Add(new object[] { Properties.Resources.Mercury_Gift_Card_Sold + ": " + GetFotmatDoubleValueWithCurrency(dblMGC), "", "", "", "Y", pval });
                                if (Settings.PaymentGateway == 3) dtblstrm.Rows.Add(new object[] { Properties.Resources.Mercury_Gift_Card_Sold + ": " + GetFotmatDoubleValueWithCurrency(dblPGC), "", "", "", "Y", pval });
                                if (Settings.PaymentGateway == 5) dtblstrm.Rows.Add(new object[] { Properties.Resources.Datacap_Gift_Card_Sold + ": " + GetFotmatDoubleValueWithCurrency(dblDGC), "", "", "", "Y", pval });
                                if (Settings.PaymentGateway == 7) dtblstrm.Rows.Add(new object[] { Properties.Resources.POSLink_Gift_Card_Sold + ": " + GetFotmatDoubleValueWithCurrency(dblPLGC), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Bottle Refund")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Bottle_Refund + ": " + GetFotmatDoubleValueWithCurrency(dblBot), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Store Credit Caption")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.STORE_CREDIT, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Store Credit Issued")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Issued + ": " + GetFotmatDoubleValueWithCurrency(dblSCissued), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Store Credit Redeemed")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Redeemed + ": " + GetFotmatDoubleValueWithCurrency(dblSCredeemed), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "House Account Caption")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.HOUSE_ACCOUNT, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "House Account Charged")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Charged + ": " + GetFotmatDoubleValueWithCurrency(dblHACharged), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "House Account Payment")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Account_Payments + ": " + GetFotmatDoubleValueWithCurrency(dblHApayments), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Tips Details")
                            {
                                if (Settings.AcceptTips == "Y")
                                {
                                    if (strCloseoutType != "T")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TIPS + ": " + strTip, "", "", "", "Y", pval });
                                    }
                                }

                            }

                            if (dr["GroupName"].ToString() == "Return Items")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.RETURNS, "", "", "", "Y", pval });

                                DataTable prndtblINV1 = new DataTable();
                                prndtblINV1 = FetchCOReturn();
                                double dblTempTotal = 0;
                                int intC = 0;
                                foreach (DataRow dr1 in prndtblINV1.Rows)
                                {
                                    intC++;
                                    string strReturnSKU = "";
                                    string strReturnInvoiceNo = "";
                                    double dblReturnAmount = 0;
                                    strReturnSKU = dr1["ReturnSKU"].ToString();
                                    strReturnInvoiceNo = dr1["ReturnInvoiceNo"].ToString();
                                    dblReturnAmount = GeneralFunctions.fnDouble(dr1["ReturnAmount"].ToString());
                                    dblTempTotal = dblTempTotal + dblReturnAmount;

                                    dtblstrm.Rows.Add(new object[] { "SKU: " + strReturnSKU + "Inv#: " + strReturnInvoiceNo + " " + GetFotmatDoubleValue(dblReturnAmount), "", "", "", "Y", pval });

                                }

                                if (intC > 0)
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValue(dblTempTotal), "", "", "", "Y", pval });
                                }
                                else
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.NoReturns, "", "", "", "Y", pval });
                                }

                            }


                            if (dr["GroupName"].ToString() == "Tender Details")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.TENDER_RECONCILIATION, "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                                DataTable prndtblINV2 = new DataTable();
                                prndtblINV2 = FetchCOTender();
                                if ((IsCloseout) && (Settings.CloseoutExport == "Y")) dtblT = prndtblINV2;
                                double dblTTotal = 0;

                                bool blCashFloat = false;
                                foreach (DataRow dr1 in prndtblINV2.Rows)
                                {
                                    if (dr1["TenderName"].ToString().Contains("Cash Float"))
                                    {
                                        blCashFloat = true;
                                        break;
                                    }
                                }
                                foreach (DataRow dr1 in prndtblINV2.Rows)
                                {
                                    string strTenderName = "";
                                    string strTenderCount = "";
                                    double dblTenderAmount = 0;
                                    strTenderName = dr1["TenderName"].ToString();
                                    strTenderCount = dr1["TenderCount"].ToString();
                                    dblTenderAmount = GeneralFunctions.fnDouble(dr1["TenderAmount"].ToString());
                                    if (strTenderName != "Card Processing Total")
                                    {
                                        if (dblTenderAmount != -929292)
                                        {
                                            dblTTotal = dblTTotal + dblTenderAmount;
                                            if (strTenderName.StartsWith("Gift Certificate")) strTenderName.Replace("Gift Certificate", Properties.Resources.Gift_Cert);
                                            if (strTenderName.StartsWith("American Express")) strTenderName = strTenderName.Replace("American Express", Properties.Resources.American_Exp_);
                                            if (strTenderName.StartsWith("Debit Card Cash Back")) strTenderName = strTenderName.Replace("Debit Card Cash Back", Properties.Resources.Cash_Back);

                                            if ((blCashFloat) && (strTenderName == "Cash"))
                                            {
                                                dtblstrm.Rows.Add(new object[] { strTenderName, "", "", "", "Y", pval });
                                            }
                                            else
                                            {
                                                dtblstrm.Rows.Add(new object[] { strTenderName + ": " + GetFotmatDoubleValueWithCurrency(dblTenderAmount), "", "", "", "Y", pval });
                                            }

                                        }


                                    }
                                    else
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.Card_Proc_Total + ": " + GetFotmatDoubleValueWithCurrency(dblTenderAmount), "", "", "", "Y", pval });
                                    }

                                }

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Total_Amount + ": " + GetFotmatDoubleValueWithCurrency(dblTTotal), "", "", "", "Y", pval });


                            }


                            if (dr["GroupName"].ToString() == "Tender Count Details")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.COUNTS, "", "", "", "Y", pval });

                                DataTable prndtblINV3 = new DataTable();
                                prndtblINV3 = FetchCOTenderCount();
                                 double dblCTotal = 0;
                                foreach (DataRow dr1 in prndtblINV3.Rows)
                                {
                                    string strTenderName = "";
                                    string strTenderCount = "";
                                    double dblTenderAmount = 0;
                                    strTenderName = dr1["TenderName"].ToString();
                                    strTenderCount = dr1["TenderCount"].ToString();
                                    dblTenderAmount = GeneralFunctions.fnDouble(dr1["TenderAmount"].ToString());
                                    dblCTotal = dblCTotal + dblTenderAmount;
                                    if (strTenderName.StartsWith("Gift Certificate")) strTenderName.Replace("Gift Certificate", Properties.Resources.Gift_Cert);
                                    if (strTenderName.StartsWith("American Express")) strTenderName = strTenderName.Replace("American Express", Properties.Resources.American_Exp_);

                                    dtblstrm.Rows.Add(new object[] { strTenderName + ": " + GetFotmatDoubleValueWithCurrency(dblTenderAmount), "", "", "", "Y", pval });
                                }
                               

                               
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Total_Counted + ": " + GetFotmatDoubleValueWithCurrency(dblCTotal), "", "", "", "Y", pval });


                            }


                            if (dr["GroupName"].ToString() == "Tender Over/Short Details")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.OVER__SHORT_, "", "", "", "Y", pval });

                                DataTable prndtblINV4 = new DataTable();
                                prndtblINV4 = FetchCOTenderOverShort();
                                double dblOSTotal = 0;
                                foreach (DataRow dr1 in prndtblINV4.Rows)
                                {
                                    string strTenderName = "";
                                    string strTenderCount = "";
                                    double dblTenderAmount = 0;
                                    strTenderName = dr1["TenderName"].ToString();
                                    strTenderCount = dr1["TenderCount"].ToString();
                                    dblTenderAmount = GeneralFunctions.fnDouble(dr1["TenderAmount"].ToString());
                                    if (strTenderName != "Card Processing Total")
                                    {

                                        dblOSTotal = dblOSTotal + dblTenderAmount;
                                        if (strTenderName.StartsWith("Gift Certificate")) strTenderName.Replace("Gift Certificate", Properties.Resources.Gift_Cert);
                                        if (strTenderName.StartsWith("American Express")) strTenderName = strTenderName.Replace("American Express", Properties.Resources.American_Exp_);
                                        dtblstrm.Rows.Add(new object[] { strTenderName + ": " + GetFotmatDoubleValueWithCurrency(dblTenderAmount), "", "", "", "Y", pval });
                                    }
                                    else
                                    {
                                        //dtblstrm.Rows.Add(new object[] { SP1 + "Card Processing Tot", SP1 + SP2 + strTenderCount, GetFotmatDoubleValue(dblTenderAmount) });
                                    }
                                }
                                prndtblINV4.Dispose();
                                if (blIsCloseout)
                                {
                                    dtblstrm.Rows.Add(new object[] { "Gross Over/ (Short)" + ": " + GetFotmatDoubleValueWithCurrency(dblOSTotal), "", "", "", "Y", pval });
                                }
                                else
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total_Over__Short_ + ": " + GetFotmatDoubleValueWithCurrency(dblOSTotal), "", "", "", "Y", pval });
                                }
                                
                            }


                            if (dr["GroupName"].ToString() == "Net Over/Short")
                            {
                                if (blIsCloseout)
                                {
                                    dtblstrm.Rows.Add(new object[] { "Net Over/ (Short)" + ": " + GetFotmatDoubleValueWithCurrency(dblOSTotal1), "", "", "", "Y", pval });
                                }
                            }


                            if (dr["GroupName"].ToString() == "Sales by Hour Caption")
                            {
                                if (blCloseoutSaleHour)
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.SALES_BY_HOUR, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout Type (Sales by Hour)")
                            {
                                if (blCloseoutSaleHour)
                                {
                                    if (strCloseoutType == "C") dtblstrm.Rows.Add(new object[] { Properties.Resources.Consolidated, "", "", "", "Y", pval });
                                    if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.By_Employee, "", "", "", "Y", pval });
                                    if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.By_Terminal, "", "", "", "Y", pval });

                                    if (strCloseoutType == "C")
                                    {
                                        if (SystemVariables.CurrentUserID <= 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_ + SystemVariables.CurrentUserName, "", "", "", "Y", pval });
                                        else dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_ + SystemVariables.CurrentUserCode, "", "", "", "Y", pval });
                                    }
                                    if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.Employee + "#:" + strEmpID, "", "", "", "Y", pval });
                                    if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + "#:" + strTerminal, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Closeout Begin Date/Time (Sales by Hour)")
                            {
                                if (blCloseoutSaleHour)
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Begin_ + strStartDate + SP1 + strStartTime, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout End Date/Time (Sales by Hour)")
                            {
                                if (blCloseoutSaleHour)
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.End_ + strEndDate + SP1 + strEndTime, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout Number (Sales by Hour)")
                            {
                                if (blCloseoutSaleHour)
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Close_Out_ + ":" + intCloseoutID.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout Notes (Sales by Hour)")
                            {
                                if (blCloseoutSaleHour)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.NOTE, "", "", "", "Y", pval });
                                    if (strNotes != "")
                                    {
                                        string OrginalF = "";
                                        ArrangeText(strNotes, 30, ref OrginalF);
                                        char FindF = '\n';
                                        int NumberOfOccurancesF = 0;
                                        string CopyOrginalF = string.Copy(OrginalF);
                                        int PlaceF = 0;
                                        NumberOfOccurancesF = 0;
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        while (PlaceF != -1)
                                        {
                                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                            if (cutstr.Length > 30)
                                            {
                                                int len = cutstr.Length;
                                                while (len >= 30)
                                                {
                                                    NumberOfOccurancesF++;
                                                    len = len - 30;
                                                    if (cutstr != "")
                                                    {
                                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 30), "", "" });
                                                        cutstr = cutstr.Substring(30, len);
                                                    }
                                                }
                                                if (len != 0)
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                                }
                                            }
                                            else
                                            {
                                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                            }

                                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                            NumberOfOccurancesF++;
                                        }

                                        if (CopyOrginalF.Length > 30)
                                        {
                                            int len = CopyOrginalF.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (CopyOrginalF != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 30), "", "" });
                                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                        }

                                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                        else
                                        {
                                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                                        }

                                        dtblstrm.Rows.Add(new object[] { strNotes, "", "", "", "Y", pval });

                                    }
                                }
                            }


                            if (dr["GroupName"].ToString() == "Sales by Hour Details")
                            {
                                if (blCloseoutSaleHour)
                                {
                                    DataTable prndtblINV5 = new DataTable();
                                    prndtblINV5 = FetchCOSH();
                                    double dblSHTotal = 0;
                                    foreach (DataRow dr1 in prndtblINV5.Rows)
                                    {
                                        string strTimeinterval = "";
                                        double dblSalesAmount = 0;
                                        strTimeinterval = dr1["Timeinterval"].ToString();
                                        dblSalesAmount = GeneralFunctions.fnDouble(dr1["SalesAmount"].ToString());
                                        dblSHTotal = dblSHTotal + dblSalesAmount;
                                        dtblstrm.Rows.Add(new object[] { strTimeinterval + " : " + GetFotmatDoubleValueWithCurrency(dblSalesAmount), "", "", "", "Y", pval });
                                    }
                                    prndtblINV5.Dispose();
                                }
                            }

                            if (dr["GroupName"].ToString() == "Sales by Hour Total Amount")
                            {
                                if (blCloseoutSaleHour)
                                {
                                    DataTable prndtblINV5 = new DataTable();
                                    prndtblINV5 = FetchCOSH();
                                    double dblSHTotal = 0;
                                    foreach (DataRow dr1 in prndtblINV5.Rows)
                                    {
                                        string strTimeinterval = "";
                                        double dblSalesAmount = 0;
                                        strTimeinterval = dr1["Timeinterval"].ToString();
                                        dblSalesAmount = GeneralFunctions.fnDouble(dr1["SalesAmount"].ToString());
                                        dblSHTotal = dblSHTotal + dblSalesAmount;
                                        
                                    }
                                    prndtblINV5.Dispose();

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total_Sales + " : " + GetFotmatDoubleValueWithCurrency(dblSHTotal), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Sales by Department Caption")
                            {
                                if (blCloseoutSaleDept)
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.SALES_BY_HOUR, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout Type (Sales by Department)")
                            {
                                if (blCloseoutSaleDept)
                                {
                                    if (strCloseoutType == "C") dtblstrm.Rows.Add(new object[] { Properties.Resources.Consolidated, "", "", "", "Y", pval });
                                    if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.By_Employee, "", "", "", "Y", pval });
                                    if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.By_Terminal, "", "", "", "Y", pval });

                                    if (strCloseoutType == "C")
                                    {
                                        if (SystemVariables.CurrentUserID <= 0) dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_ + SystemVariables.CurrentUserName, "", "", "", "Y", pval });
                                        else dtblstrm.Rows.Add(new object[] { Properties.Resources.Requester_ + SystemVariables.CurrentUserCode, "", "", "", "Y", pval });
                                    }
                                    if (strCloseoutType == "E") dtblstrm.Rows.Add(new object[] { Properties.Resources.Employee + "#:" + strEmpID, "", "", "", "Y", pval });
                                    if (strCloseoutType == "T") dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + "#:" + strTerminal, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Closeout Begin Date/Time (Sales by Department)")
                            {
                                if (blCloseoutSaleDept)
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Begin_ + strStartDate + SP1 + strStartTime, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout End Date/Time (Sales by Department)")
                            {
                                if (blCloseoutSaleDept)
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.End_ + strEndDate + SP1 + strEndTime, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout Number (Sales by Department)")
                            {
                                if (blCloseoutSaleDept)
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Close_Out_ + ":" + intCloseoutID.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Closeout Notes (Sales by Department)")
                            {
                                if (blCloseoutSaleDept)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.NOTE, "", "", "", "Y", pval });
                                    if (strNotes != "")
                                    {
                                        string OrginalF = "";
                                        ArrangeText(strNotes, 30, ref OrginalF);
                                        char FindF = '\n';
                                        int NumberOfOccurancesF = 0;
                                        string CopyOrginalF = string.Copy(OrginalF);
                                        int PlaceF = 0;
                                        NumberOfOccurancesF = 0;
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        while (PlaceF != -1)
                                        {
                                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                            if (cutstr.Length > 30)
                                            {
                                                int len = cutstr.Length;
                                                while (len >= 30)
                                                {
                                                    NumberOfOccurancesF++;
                                                    len = len - 30;
                                                    if (cutstr != "")
                                                    {
                                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 30), "", "" });
                                                        cutstr = cutstr.Substring(30, len);
                                                    }
                                                }
                                                if (len != 0)
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                                }
                                            }
                                            else
                                            {
                                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                            }

                                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                            NumberOfOccurancesF++;
                                        }

                                        if (CopyOrginalF.Length > 30)
                                        {
                                            int len = CopyOrginalF.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (CopyOrginalF != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 30), "", "" });
                                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                        }

                                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                        else
                                        {
                                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                                        }

                                        dtblstrm.Rows.Add(new object[] { strNotes, "", "", "", "Y", pval });

                                    }
                                }
                            }


                            if (dr["GroupName"].ToString() == "Sales by Department Details")
                            {
                                if (blCloseoutSaleDept)
                                {
                                    DataTable prndtblINV6 = new DataTable();
                                    prndtblINV6 = FetchCOSD();
                                    double dblSDTotal = 0;
                                    foreach (DataRow dr1 in prndtblINV6.Rows)
                                    {

                                        string strDeptID = "";
                                        string strDeptDesc = "";
                                        double dblSalesAmount = 0;
                                        strDeptID = dr1["DeptID"].ToString();
                                        strDeptDesc = dr1["DeptDesc"].ToString();
                                        dblSalesAmount = GeneralFunctions.fnDouble(dr1["SalesAmount"].ToString());
                                        dblSDTotal = dblSDTotal + dblSalesAmount;

                                        dtblstrm.Rows.Add(new object[] { strDeptDesc + ": " +  GetFotmatDoubleValueWithCurrency(dblSalesAmount), "", "", "", "Y", pval });
                                    }
                                    prndtblINV6.Dispose();
                                }
                            }

                            if (dr["GroupName"].ToString() == "Sales by Department Total Amount")
                            {
                                if (blCloseoutSaleDept)
                                {
                                    DataTable prndtblINV6 = new DataTable();
                                    prndtblINV6 = FetchCOSD();
                                    double dblSDTotal = 0;
                                    foreach (DataRow dr1 in prndtblINV6.Rows)
                                    {

                                        string strDeptID = "";
                                        string strDeptDesc = "";
                                        double dblSalesAmount = 0;
                                        strDeptID = dr1["DeptID"].ToString();
                                        strDeptDesc = dr1["DeptDesc"].ToString();
                                        dblSalesAmount = GeneralFunctions.fnDouble(dr1["SalesAmount"].ToString());
                                        dblSDTotal = dblSDTotal + dblSalesAmount;

                                        
                                    }
                                    prndtblINV6.Dispose();

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total_Sales + " : " + GetFotmatDoubleValueWithCurrency(dblSDTotal), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    /*if ((IsCloseout) && (Settings.CloseoutExport == "Y"))
                    {
                        if (!blexecuteexport)
                        {
                            Expr = ExecuteExport(dtblH, dtblT);
                            blexecuteexport = true;
                        }

                    }*/
                    dtblH.Dispose();
                    dtblT.Dispose();


                    /*if ((IsCloseout) && (Settings.CentralExportImport == "Y") && (strCloseoutType == "C"))
                    {
                        if (!blexecutecentralexport)
                        {

                            strExportPath = ExpFileName();

                            bool blproceed = true;
                            bool blprev = CheckIfExportedToday();
                            if (blprev)
                            {
                                if (DocMessage.MsgConfirmation(Translation.SetMultilingualTextInCodes("Data has already been exported to central office today." + "\n" + "Do you want to continue agian?") == DialogResult.Yes)
                                {
                                    blproceed = true;
                                }
                                else
                                {
                                    blproceed = false;
                                }
                            }
                            else
                            {
                                if (DocMessage.MsgConfirmation(Translation.SetMultilingualTextInCodes("Do you want to export data to central office?") == DialogResult.Yes)
                                {
                                    blproceed = true;
                                }
                                else
                                {
                                    blproceed = false;
                                }
                            }
                            if (!blproceed) return;
                            blViewPrevFile = false;
                            try
                            {
                                Cursor.Current = Cursors.WaitCursor;
                                int rtn = ExecuteExport();
                                if (rtn == 0)
                                {
                                    UpdateSalesExportFlag();
                                    UpdateEmployeeAttnExportFlag();
                                    InsertExpImpLog("E", strExportFile, strExportPath);

                                    DocMessage.MsgInformation(Translation.SetMultilingualTextInCodes("Data exported to central office successfully." + "\n" + "File saved in " + strExportPath);
                                    System.Diagnostics.Process p = new System.Diagnostics.Process();
                                    p.StartInfo.FileName = strExportPath;
                                    p.Start();
                                }
                                if (rtn == 1)
                                {
                                    DocMessage.MsgInformation(Translation.SetMultilingualTextInCodes("No data found for export to central office.");
                                }
                                if (rtn == 2)
                                {
                                    DocMessage.MsgInformation(Translation.SetMultilingualTextInCodes("Permission error while exporting to central office...");
                                }
                            }
                            finally
                            {
                                Cursor.Current = Cursors.Default;
                            }

                            blexecutecentralexport = true;
                        }
                    }*/
                }

                if (strPrintType == "No Sale")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);

                    

                    

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strTransDate = "";


                    prndtblINV = FetchPaidOut(intInvNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    }
                    prndtblINV.Dispose();


                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }

                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        
                        
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "No Sale Caption")
                            {

                                dtblstrm.Rows.Add(new object[] { "**** " + Properties.Resources.No_Sale + " ****", "", "", "", "Y", pval });
                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                           

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                
                            }

                        }
                    }
                }

                if (strPrintType == "Paid Out")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strTransDate = "";


                    prndtblINV = FetchPaidOut(intPaidOutTranNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    }
                    prndtblINV.Dispose();


                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;



                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);

                            }
                        }

                        
                    }
                    prndtblINV2.Dispose();


                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }

                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                            DataTable prndtblINV21 = new DataTable();
                            prndtblINV21 = FetchInvTender();

                            foreach (DataRow dr1 in prndtblINV21.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr1["DisplayAs"].ToString();
                                dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                dtblstrm.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                {
                                    double cashbk = 0;
                                    cashbk = FetchCashBack(dblAmount);
                                    if (cashbk != 0)
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                    }
                                }


                            }
                            prndtblINV21.Dispose();
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Paid Out Caption")
                            {

                                dtblstrm.Rows.Add(new object[] { "**** " + Properties.Resources.Paid_Out + " ****", "", "", "", "Y", pval });
                            }
                            if (dr["GroupName"].ToString() == "Paid Out Explanation")
                            {

                                dtblstrm.Rows.Add(new object[] { strPaidOutDesc, "", "", "", "Y", pval });
                            }
                            if (dr["GroupName"].ToString() == "Paid Out Amount")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Amount + ": " + GetFotmatDoubleValueWithCurrency(dblPaidOutAmount), "", "", "", "Y", pval });
                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }



                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }



                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }



                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {

                            }

                        }
                    }
                }

                if (strPrintType == "Paid In")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strTransDate = "";


                    prndtblINV = FetchPaidOut(intPaidOutTranNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    }
                    prndtblINV.Dispose();

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;



                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);

                            }
                        }

                        
                    }
                    prndtblINV2.Dispose();


                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }

                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                            DataTable prndtblINV21 = new DataTable();
                            prndtblINV21 = FetchInvTender();

                            foreach (DataRow dr1 in prndtblINV21.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr1["DisplayAs"].ToString();
                                dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                dtblstrm.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                {
                                    double cashbk = 0;
                                    cashbk = FetchCashBack(dblAmount);
                                    if (cashbk != 0)
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                    }
                                }


                            }
                            prndtblINV21.Dispose();
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Paid In Caption")
                            {

                                dtblstrm.Rows.Add(new object[] { "**** " + Properties.Resources.Paid_In + " ****", "", "", "", "Y", pval });
                            }
                            if (dr["GroupName"].ToString() == "Paid In Explanation")
                            {

                                dtblstrm.Rows.Add(new object[] { strPaidOutDesc, "", "", "", "Y", pval });
                            }
                            if (dr["GroupName"].ToString() == "Paid In Amount")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Amount + ": " + GetFotmatDoubleValueWithCurrency(dblPaidOutAmount), "", "", "", "Y", pval });
                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }



                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }



                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }



                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {

                            }

                        }
                    }
                }



                if (strPrintType == "Safe Drop")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    

                    
                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strTransDate = "";


                    prndtblINV = FetchPaidOut(intPaidOutTranNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    }
                    prndtblINV.Dispose();

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                            DataTable prndtblINV21 = new DataTable();
                            prndtblINV21 = FetchInvTender();

                            foreach (DataRow dr1 in prndtblINV21.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr1["DisplayAs"].ToString();
                                dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                dtblstrm.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                {
                                    double cashbk = 0;
                                    cashbk = FetchCashBack(dblAmount);
                                    if (cashbk != 0)
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                    }
                                }


                            }
                            prndtblINV21.Dispose();
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Safe Drop Caption")
                            {

                                dtblstrm.Rows.Add(new object[] { "**** " + Properties.Resources.Safe_Drop + " ****", "", "", "", "Y", pval });
                            }
                           
                            if (dr["GroupName"].ToString() == "Safe Drop Amount")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Amount + ": " + GetFotmatDoubleValueWithCurrency(dblPaidOutAmount), "", "", "", "Y", pval });
                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }



                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }



                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }



                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {

                            }

                        }
                    }


                }


                if (strPrintType == "Lotto Payout")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    

                    

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strTransDate = "";


                    prndtblINV = FetchPaidOut(intPaidOutTranNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        strEmpID = dr["EmpID"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    }
                    prndtblINV.Dispose();


                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Lotto Payout Caption")
                            {

                                dtblstrm.Rows.Add(new object[] { "**** " + Properties.Resources.Lotto_Payout + " ****", "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Lotto Payout Explanation")
                            {

                                dtblstrm.Rows.Add(new object[] { strPaidOutDesc, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Lotto Payout Amount")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Amount + ": " + GetFotmatDoubleValueWithCurrency(dblPaidOutAmount), "", "", "", "Y", pval });
                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }



                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }



                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }



                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {

                            }

                        }
                    }
                }


                if (strPrintType == "Customer Label")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);

                    DataTable prndtblINV = new DataTable();

                    string strcompany = "";
                    string strcust = "";
                    string stradd = "";

                    prndtblINV = FetchCustInfo(intInvNo);
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        strcompany = dr["Company"].ToString();
                        strcust = dr["CustomerName"].ToString();
                        stradd = dr["MailAddress"].ToString();

                    }
                    prndtblINV.Dispose();


                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {

                                dtblstrm.Rows.Add(new object[] { strcompany, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Mail Address")
                            {

                                if (stradd != "")
                                {
                                    string OrginalH = stradd;

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > 26)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 26)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - 26;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "","", "Y", pval });
                                                    cutstr = cutstr.Substring(26, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > 26)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 26)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 26;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }

                                }
                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Attn + ": " + strcust, "", "" });
                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }



                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }



                            



                           

                        }
                    }
                }


                if (strPrintType == "Invoice")
                {
                    dummyTest = "";
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    



                   


                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";

                    string strDTaxName = "";
                    double dblDTax = 0;
                    int CustomerOrderRef = 0;

                    string strCustDOB = "";

                    string strCustAddress = "";

                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        serviceT = dr["ServiceType"].ToString();

                        strDTaxName = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();
                    }

                    prndtblINV.Dispose();

                    
                    intWO = FetchWorkorderNo();
                    
                    

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);

                    double dblTempTotal = 0;
                    int i = 0;

                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strFeesText = "";
                        string strFeesID = "0";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";
                        string strRentType = "";
                        double dblRentDuration = 1;
                        string dtRentEffectiveFrom = "";

                        string iQtyDecimals = "";

                        int SalePriceID = 0;
                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();

                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();

                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());

                        iQtyDecimals = dr["QtyDecimal"].ToString();

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        if (strPType == "O") dblTotalPrice = -dblTotalPrice;


                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();



                        TService1 = dr["ServiceType"].ToString();
                        strRentType = dr["RentType"].ToString();
                        dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());
                        SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                        int rnt = 0;
                        string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);



                        string rentdisplay = "";
                        
                    }

                    //prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                    if (!blIsRentReturned)
                    {
                        

                        if (dblDiscount != 0) // -------------- Discount ----------------
                        {
                            
                        }

                        // -------------- Tax ----------------
                        if (dblTax != 0)
                        {
                            
                        }

                        if (dblDTax != 0)
                        {
                           
                        }


                        if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                        {
                            
                        }

                        DataTable dtblCpn = new DataTable();
                        dtblCpn = FetchInvCoupon();

                        if (dblCoupon != 0)
                        {
                            
                        }

                        if (dtblCpn.Rows.Count > 0)
                        {
                        }

                       
                    }

                    if (serviceT == "Rent")
                    {
                        
                    }

                    // -------------- Total ----------------


                    
                    // --------------- Tender --------------

                    
                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                        
                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                
                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }
                    prndtblINV2.Dispose();


                    if (!blIsRentIssued)
                    {
                        if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                        {
                            
                        }
                        
                    }
                    else
                    {
                        
                    }

                    /*
                    if (!FindNewTemplate)
                    {
                        if (Settings.POSShowGiftCertBalance == "Y")
                        {
                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "" });

                                dtblstrm.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "", "" });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow dr in dtblGC.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                                }
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                            }
                            dtblGC.Dispose();
                        }

                    }
                    else
                    {
                        string pval = FindTemplateParameterValueInDatatable("Gift Certificate Balance");
                        if (pval != "")
                        {
                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow dr in dtblGC.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GC + "#:" + dr["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                            }
                            dtblGC.Dispose();
                        }
                    }


                    if (!FindNewTemplate)
                    {
                        DataTable dtblEBT = new DataTable();
                        dtblEBT = FetchEBTBalance(intInvNo);
                        if (dtblEBT.Rows.Count > 0)
                        {

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "" });

                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                            foreach (DataRow dr in dtblEBT.Rows)
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                            }
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                        dtblEBT.Dispose();

                    }
                    else
                    {
                        string pval = FindTemplateParameterValueInDatatable("EBT Balance");
                        if (pval != "")
                        {
                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow dr in dtblEBT.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "", "", "Y", pval });
                                }
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                            }
                            dtblEBT.Dispose();
                        }
                    }


                    if (!FindNewTemplate)
                    {

                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        bool mgc = false;
                        int mgcnt = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                        {
                            if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                            {
                                mgcnt++;
                                if (mgcnt == 1)
                                {
                                    mgc = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }






                        int prmebt = 0;
                        PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                        obcc01mgc33.Connection = SystemVariables.Conn;
                        prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc3 = new DataTable();
                        PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                        obcc11mgc55.Connection = SystemVariables.Conn;
                        ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                        bool mgc4 = false;
                        int mgcnt4 = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                        {
                            if (drmgc["CardType"].ToString() == "Food Stamps")
                            {
                                mgcnt4++;
                                if (mgcnt4 == 1)
                                {
                                    mgc4 = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc4)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                    }
                    else
                    {
                        string pval = FindTemplateParameterValueInDatatable("EBT Balance");
                        if (pval != "")
                        {

                            int prmmgc = 0;
                            PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                            obcc01mgc.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc = new DataTable();
                            PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                            obcc11mgc.Connection = SystemVariables.Conn;
                            ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                            bool mgc = false;
                            int mgcnt = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                            {
                                if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                    || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                                {
                                    mgcnt++;
                                    if (mgcnt == 1)
                                    {
                                        mgc = true;
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc)
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }






                            int prmebt = 0;
                            PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                            obcc01mgc33.Connection = SystemVariables.Conn;
                            prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc3 = new DataTable();
                            PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                            obcc11mgc55.Connection = SystemVariables.Conn;
                            ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                            bool mgc4 = false;
                            int mgcnt4 = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                            {
                                if (drmgc["CardType"].ToString() == "Food Stamps")
                                {
                                    mgcnt4++;
                                    if (mgcnt4 == 1)
                                    {
                                        mgc4 = true;
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc4)
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                        }
                    }


                    if (boolHATender)
                    {
                        if (!FindNewTemplate)
                        {
                            if ((Settings.HouseAccountBalanceInReceipt == "Y"))
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable("House Account Balance");
                            if (pval != "")
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                        }
                    }

                    if (boolSCrdtTender) // Print Store Credit Balance
                    {
                        if (!FindNewTemplate)
                        {
                            PosDataObject.POS objscrtbal = new PosDataObject.POS();
                            objscrtbal.Connection = SystemVariables.Conn;
                            double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable("Store Credit Balance");
                            if (pval != "")
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                        }
                    }
                    */



                    /*

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        int prm = 0;
                        PosDataObject.POS obcc01 = new PosDataObject.POS();
                        obcc01.Connection = SystemVariables.Conn;
                        prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11 = new DataTable();
                        PosDataObject.POS obcc11 = new PosDataObject.POS();
                        obcc11.Connection = SystemVariables.Conn;
                        ccdtbl11 = obcc11.FetchCardData(prm);


                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                            if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                            if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                            if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                            strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            strCardNum = drcc["RefCardAct"].ToString();
                            strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                            strCardLogo = drcc["RefCardLogo"].ToString();
                            strCardEntry = drcc["RefCardEntry"].ToString();
                            strApprovalNum = drcc["RefCardAuthID"].ToString();
                            strTranID = drcc["RefCardTranID"].ToString();
                            strApprovedAmt = drcc["RefCardAuthAmount"].ToString();

                            if (!FindNewTemplate)
                            {
                                if (Settings.POSCardPayment == "Y")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "Credit")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }
                                if (strCardType == "Debit")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                                }

                                if (strCardType == "Mercury")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "Precidia")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "EBT")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }
                            }
                            else
                            {
                                string pval = FindTemplateParameterValueInDatatable("Card Payment Reference");
                                if (pval != "")
                                {
                                    if (Settings.POSCardPayment == "Y")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + " :" + strCardLogo, "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    }

                                    if (strCardType == "Credit")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    }
                                    if (strCardType == "Debit")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });

                                    }

                                    if (strCardType == "Mercury")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    }

                                    if (strCardType == "Precidia")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    }

                                    if (strCardType == "EBT")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    }
                                }
                            }
                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ShowTipsInReceipt == "Y")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                }
                            }


                            if (strCardType == "Credit")
                            {
                                if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                    || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                    ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                     || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                    || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                {
                                    if (!FindNewTemplate)
                                    {
                                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    }
                                    else
                                    {
                                        string pval = FindTemplateParameterValueInDatatable("Credit Card - Agree Line");
                                        if (pval != "")
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                                        }
                                    }

                                    if (!FindNewTemplate)
                                    {

                                        dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                        dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                                    }
                                    else
                                    {
                                        string pval = FindTemplateParameterValueInDatatable("Credit Card - Signature Line");
                                        if (pval != "")
                                        {
                                            dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "", " ", "", "Y", pval });
                                        }
                                    }
                                }
                            }

                            if (strCardType == "Debit")
                            {
                                if (!FindNewTemplate)
                                {
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                                }
                                else
                                {
                                    string pval = FindTemplateParameterValueInDatatable("Debit Card - Pin Used Line");
                                    if (pval != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                    }
                                }
                                if (!FindNewTemplate)
                                {
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                                }
                                else
                                {
                                    string pval = FindTemplateParameterValueInDatatable("Debit Card - Signature Not Required Line");
                                    if (pval != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                    }
                   

                    // --------------- Receipt Footer --------------
                    if (!FindNewTemplate)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    else
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        string pval = FindTemplateParameterValueInDatatable("Receipt Date");
                        if (pval != "")
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                        }

                        string pval1 = FindTemplateParameterValueInDatatable("User Name");
                        if (pval1 != "")
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval1 });
                        }

                        string pval2 = FindTemplateParameterValueInDatatable("Till Name");
                        if (pval2 != "")
                        {
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval2 });
                        }
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        if (!FindNewTemplate)
                        {
                            string OrginalF = "";
                            ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                            char FindF = '\n';
                            int NumberOfOccurancesF = 0;


                            string CopyOrginalF = string.Copy(OrginalF);
                            int PlaceF = 0;
                            NumberOfOccurancesF = 0;
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            while (PlaceF != -1)
                            {
                                string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                }

                                CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                NumberOfOccurancesF++;
                            }

                            if (CopyOrginalF.Length > 30)
                            {
                                int len = CopyOrginalF.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (CopyOrginalF != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                        CopyOrginalF = CopyOrginalF.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                            }



                            if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                            else
                            {
                                if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                            }

                            dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable("Receipt Footer");
                            if (pval != "")
                            {
                                string OrginalF = "";
                                ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                char FindF = '\n';
                                int NumberOfOccurancesF = 0;


                                string CopyOrginalF = string.Copy(OrginalF);
                                int PlaceF = 0;
                                NumberOfOccurancesF = 0;
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                while (PlaceF != -1)
                                {
                                    string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                    if (cutstr.Length > 30)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    NumberOfOccurancesF++;
                                }

                                if (CopyOrginalF.Length > 30)
                                {
                                    int len = CopyOrginalF.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (CopyOrginalF != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalF = CopyOrginalF.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }



                                if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                else
                                {
                                    if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                }

                                dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                            }

                        }
                    }

                    */



                    foreach(DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Line")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }



                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {
                                i++;
                                string strDescription = "";
                                string strDiscText = "";
                                string strFeesText = "";
                                string strFeesID = "0";
                                string strDiscID = "0";
                                double dblDisc = 0;
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                string strInvNotes = "";
                                string tgininv = "";
                                int ipid = 0;

                                string TService1 = "";
                                string strRentType = "";
                                double dblRentDuration = 1;
                                string dtRentEffectiveFrom = "";

                                string iQtyDecimals = "";

                                int SalePriceID = 0;
                                int BuyNGetFreeHeader = 0;
                                string BuyNGetFreeCategory = "";
                                string BuyNGetFreeCaption = "";

                                string PUOM = "";
                                PUOM = dr1["UOM"].ToString();

                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();
                                ipid = GeneralFunctions.fnInt32(dr1["ProductID"].ToString());
                                tgininv = dr1["TaggedInInvoice"].ToString();
                                strSKU = dr1["SKU"].ToString();
                                strDiscText = dr1["DiscountText"].ToString();
                                strDiscID = dr1["DiscountID"].ToString();

                                strFeesID = dr1["FeesID"].ToString();
                                strFeesText = dr1["FeesText"].ToString();

                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr1["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());

                                iQtyDecimals = dr1["QtyDecimal"].ToString();

                                BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr1["BuyNGetFreeHeaderID"].ToString());
                                BuyNGetFreeCategory = dr1["BuyNGetFreeCategory"].ToString();
                                BuyNGetFreeCaption = dr1["BuyNGetFreeName"].ToString();

                                //if (strPType == "O") dblTotalPrice = -dblTotalPrice;


                                //dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));

                                strDP = dr1["DP"].ToString();
                                strInvNotes = dr1["Notes"].ToString();



                                TService1 = dr1["ServiceType"].ToString();
                                strRentType = dr1["RentType"].ToString();
                                dblRentDuration = GeneralFunctions.fnDouble(dr1["RentDuration"].ToString());
                                SalePriceID = GeneralFunctions.fnInt32(dr1["SalePriceID"].ToString());
                                int rnt = 0;
                                string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);



                                string rentdisplay = "";
                                if (TService1 == "Rent")
                                {
                                    if (strRentType == "MI") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.min_;
                                    if (strRentType == "HR") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.hr_;
                                    if (strRentType == "HD") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.half_day_s_;
                                    if (strRentType == "DY") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.day_s_;
                                    if (strRentType == "WK") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.week_s_;
                                    if (strRentType == "MN") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.month_s_;
                                    dtRentEffectiveFrom = GeneralFunctions.fnDate(dr1["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                                }

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                if (BuyNGetFreeCategory == "B")
                                {
                                    dtblstrm.Rows.Add(new object[] { "** " + BuyNGetFreeCaption + " **", "", "Item", "Y", ptextval });
                                }

                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm.Rows.Add(new object[] { sPD1, "", "", "Item", "Y", ptextval });



                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                    if (strMV2 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                    }
                                }


                                if (TService1 == "Sales")
                                {
                                    if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                                        || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                                    {
                                        if (SalePriceID == 0)
                                        {
                                            if (strPType != "U")
                                            {
                                                if (dblNormalPrice - dblPrice > 0)
                                                {
                                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP) + " " + Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                            if (strPType == "U")
                                            {
                                                if (dblUOMPrice - dblPrice > 0)
                                                {
                                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP) + " " + Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                        }


                                        if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                                        {
                                            if (strPType != "U")
                                            {
                                                if (dblNormalPrice - dblPrice > 0)
                                                {
                                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP) + " " + Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                            if (strPType == "U")
                                            {
                                                if (dblUOMPrice - dblPrice > 0)
                                                {
                                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP) + " " + Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                        }

                                        if (strPType == "T")
                                        {
                                            if (tgininv == "Y")
                                            {
                                                PosDataObject.Product opdt = new PosDataObject.Product();
                                                opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                DataTable dtemp = opdt.FetchTaggedData(ipid);
                                                foreach (DataRow tgdr in dtemp.Rows)
                                                {
                                                    double tgQty = 0;
                                                    string tgName = "";
                                                    tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                                    tgName = tgdr["ItemName"].ToString();
                                                    tgQty = tgQty * dblQty;

                                                    dtblstrm.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "", "Item", "Y", ptextval });
                                                }
                                                dtemp.Dispose();
                                            }
                                        }
                                    }
                                }

                                if (!blIsRentReturned)
                                {
                                    if (strDiscText != "")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                                    }

                                    if (Settings.ShowFeesInReceipt == "Y")
                                    {
                                        if (strFeesText != "")
                                        {
                                            dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "Item", "Y", ptextval });
                                        }
                                    }
                                }

                                if ((TService1 == "Rent") && (blIsRentIssued))
                                {
                                    dtblstrm.Rows.Add(new object[] { SP2 + rentdisplay, "", "", "Item", "Y", ptextval });

                                }
                                if (!blIsRentReturned)
                                {
                                    // For Weighted Item
                                    if (strPType == "W")
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()) + "/" + PUOM, GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });
                                    }
                                    else
                                    {
                                        dtblstrm.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });
                                        //dtblstrm.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice), "" });
                                    }

                                    if ((Settings.ScaleDevice == "(None)") && (strPType == "W"))
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Manual_Weight, "", "", "Item", "Y", ptextval });
                                    }
                                }
                                else
                                    dtblstrm.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblQty), "Detail", "Y", pval });


                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, chrperline, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;

                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > chrperline)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= chrperline)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(chrperline, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", "Item", "Y", ptextval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValueWithCurrency(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblDiscount != 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                    string strDiscountCaption = Properties.Resources.Discount;
                                    dtblstrm.Rows.Add(new object[] { SP1 + strDiscountCaption + ": " + GetFotmatDoubleValueWithCurrency(dblDiscount), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblTax != 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    if (dblTax1 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName1 + GetFotmatDoubleValueWithCurrency(dblTax1), "", "", "", "Y", pval });

                                    }
                                    if (dblTax2 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName2 + GetFotmatDoubleValueWithCurrency(dblTax2), "", "", "", "Y", pval });
                                    }
                                    if (dblTax3 != 0)
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName3 + GetFotmatDoubleValueWithCurrency(dblTax3), "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                                {
                                    DataTable dFees = FetchInvFees();
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    if (dblFees + dblFeesCoupon != 0)
                                    {
                                        if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                        if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValue(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                    }
                                    if (dblFeesTax + dblFeesCouponTax != 0)
                                    {
                                        if (dFees.Rows.Count == 1) dtblstrm.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                        if (dFees.Rows.Count > 1) dtblstrm.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblCoupon != 0)
                                {
                                    DataTable dtblCpn = new DataTable();
                                    dtblCpn = FetchInvCoupon();
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket + ": " + GetFotmatDoubleValueWithCurrency(dblCoupon), "", "", "", "Y", pval });

                                    if (dtblCpn.Rows.Count > 0)
                                    {
                                        foreach (DataRow drc in dtblCpn.Rows)
                                        {
                                            string strTender = "";
                                            double dblAmount = 0;

                                            strTender = drc["Name"].ToString();

                                            string sPD1 = "";
                                            string sPD2 = "";
                                            string sPD3 = "";

                                            SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);


                                            dtblstrm.Rows.Add(new object[] { sPD1, "", "", "", "Y", pval });

                                            if (sPD2.Trim() != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { sPD2, "", "", "", "Y", pval });
                                            }

                                            if (sPD3.Trim() != "")
                                            {

                                                dtblstrm.Rows.Add(new object[] { sPD3, "", "", "", "Y", pval });
                                            }


                                            dblAmount = GeneralFunctions.fnDouble(drc["Amount"].ToString());
                                            dtblstrm.Rows.Add(new object[] { GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });
                                        }
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {
                            if (serviceT == "Rent")
                            {
                                if (dblRentalSecurityDeposit > 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Security_Deposit + ": " + GetFotmatDoubleValueWithCurrency(dblRentalSecurityDeposit), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (serviceT != "Rent")
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblTotalSale), "", "", "", "Y", pval });
                            else
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblTotalSale + dblRentalSecurityDeposit), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                            DataTable prndtblINV21 = new DataTable();
                            prndtblINV21 = FetchInvTender();
                            
                            foreach (DataRow dr1 in prndtblINV21.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr1["DisplayAs"].ToString();
                                dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());
                                
                                if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                                
                                dtblstrm.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                {
                                    double cashbk = 0;
                                    cashbk = FetchCashBack(dblAmount);
                                    if (cashbk != 0)
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                    }
                                }

                                
                            }
                            prndtblINV21.Dispose();
                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (!blIsRentIssued)
                            {
                                if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValueWithCurrency(dblTempTender - dblTotalSale), "", "", "", "Y", pval });
                                }
                                
                            }
                            else
                            {
                                if (dblTotalSale + dblRentalSecurityDeposit - dblTempTender != 0) // --------------- Change Due --------------
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValue(dblTempTender + dblRentalSecurityDeposit - dblTotalSale), "", "", "", "Y", pval });
                                }
                                
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drgc in dtblGC.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GC + "#:" + drgc["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drgc["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }
                                
                            }
                            dtblGC.Dispose();

                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drebt in dtblEBT.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + drebt["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drebt["CardBalance"].ToString())), "", "", "Y", pval });
                                }
                               
                            }
                            dtblEBT.Dispose();




                            int prmmgc = 0;
                            PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                            obcc01mgc.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc = new DataTable();
                            PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                            obcc11mgc.Connection = SystemVariables.Conn;
                            ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                            bool mgc = false;
                            int mgcnt = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                            {
                                if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                    || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                                {
                                    mgcnt++;
                                    if (mgcnt == 1)
                                    {
                                        mgc = true;
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc)
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }






                            int prmebt = 0;
                            PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                            obcc01mgc33.Connection = SystemVariables.Conn;
                            prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc3 = new DataTable();
                            PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                            obcc11mgc55.Connection = SystemVariables.Conn;
                            ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                            bool mgc4 = false;
                            int mgcnt4 = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                            {
                                if (drmgc["CardType"].ToString() == "Food Stamps")
                                {
                                    mgcnt4++;
                                    if (mgcnt4 == 1)
                                    {
                                        mgc4 = true;
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc4)
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                        




                    }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            
                            if (boolHATender)
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolSCrdtTender)
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (blCardPayment)
                            {
                                int prm = 0;
                                PosDataObject.POS obcc01 = new PosDataObject.POS();
                                obcc01.Connection = SystemVariables.Conn;
                                prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                                DataTable ccdtbl11 = new DataTable();
                                PosDataObject.POS obcc11 = new PosDataObject.POS();
                                obcc11.Connection = SystemVariables.Conn;
                                ccdtbl11 = obcc11.FetchCardData(prm);


                                foreach (DataRow drcc in ccdtbl11.Rows)
                                {
                                    if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                    if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                    if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                    if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                    strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                    strCardNum = drcc["RefCardAct"].ToString();
                                    strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                    strCardLogo = drcc["RefCardLogo"].ToString();
                                    strCardEntry = drcc["RefCardEntry"].ToString();
                                    strApprovalNum = drcc["RefCardAuthID"].ToString();
                                    strTranID = drcc["RefCardTranID"].ToString();
                                    strApprovedAmt = drcc["RefCardAuthAmount"].ToString();


                                    if (Settings.POSCardPayment == "Y")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + " :" + strCardLogo, "", "", "", "Y", pval });

                                       
                                    }

                                    if (strCardType == "Credit")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                       
                                    }
                                    if (strCardType == "Debit")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        

                                    }

                                    if (strCardType == "Mercury")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        
                                    }

                                    if (strCardType == "Precidia")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        
                                    }

                                    if (strCardType == "EBT")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                       
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        
                                    }
                                    if (Settings.AcceptTips == "Y")
                                    {
                                        if (Settings.ShowTipsInReceipt == "Y")
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                            //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                            
                                            
                                        }
                                    }


                                    if (strCardType == "Credit")
                                    {
                                        if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                            || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                            ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                             || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                            || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });

                                            dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "", " ", "", "Y", pval });
                                        }
                                    }

                                    if (strCardType == "Debit")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {
                                if (intWO > 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Work_Order_Number + ": " + intWO.ToString(), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {
                                if (intWO > 0)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date + ": " + GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt"), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {
                                if (serviceT == "Rent")
                                {
                                    if (blIsRentIssued) dtblstrm.Rows.Add(new object[] { Properties.Resources.Rent___Issue, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {
                                if (serviceT == "Rent")
                                {
                                    if (blIsRentReturned) dtblstrm.Rows.Add(new object[] { Properties.Resources.Rent___Return, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                if (strCustAddress != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText("Address: " + strCustAddress, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                if (strCustDOB != "")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Card Holder Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARDHOLDER_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    this.intPageCounter++;




                }

                if (strPrintType == "Gift Aid Receipt")
                {
                    dummyTest = "";
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    

                    



                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";

                    string strDTaxName = "";
                    double dblDTax = 0;
                    int CustomerOrderRef = 0;

                    string strCustDOB = "";

                    string strCustAddress = "";

                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        serviceT = dr["ServiceType"].ToString();

                        strDTaxName = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();
                    }

                    prndtblINV.Dispose();



                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchGADetails();

                    string strDescription = "";
                    string strDiscText = "";

                    double dblTotalPrice = 0;
                    string strDP = "";
                   
                    string strInvNotes = "";

                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        strDescription = dr["Description"].ToString();
                        strDiscText = dr["DiscountText"].ToString().Trim();
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString().Trim();
                    }


                    prndtblINV1.Dispose();




                   

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                        

                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                
                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }
                    prndtblINV2.Dispose();


                    if (dblTotalSale - dblTempTender != 0)
                    {
                        

                    }

                    /*

                    if (!FindNewTemplate)
                    {
                        if (Settings.POSShowGiftCertBalance == "Y")
                        {
                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "" });

                                dtblstrm.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "", "" });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow dr in dtblGC.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                                }
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                            }
                            dtblGC.Dispose();
                        }

                    }

                    if (!FindNewTemplate)
                    {
                        DataTable dtblEBT = new DataTable();
                        dtblEBT = FetchEBTBalance(intInvNo);
                        if (dtblEBT.Rows.Count > 0)
                        {

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "" });

                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                            foreach (DataRow dr in dtblEBT.Rows)
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                            }
                            dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                        dtblEBT.Dispose();

                    }

                    if (!FindNewTemplate)
                    {

                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        bool mgc = false;
                        int mgcnt = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                        {
                            if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                            {
                                mgcnt++;
                                if (mgcnt == 1)
                                {
                                    mgc = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }






                        int prmebt = 0;
                        PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                        obcc01mgc33.Connection = SystemVariables.Conn;
                        prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc3 = new DataTable();
                        PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                        obcc11mgc55.Connection = SystemVariables.Conn;
                        ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                        bool mgc4 = false;
                        int mgcnt4 = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                        {
                            if (drmgc["CardType"].ToString() == "Food Stamps")
                            {
                                mgcnt4++;
                                if (mgcnt4 == 1)
                                {
                                    mgc4 = true;
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card, "", Properties.Resources.Balance });
                                    dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc4)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                    }

                    if (boolHATender)
                    {
                        if (!FindNewTemplate)
                        {
                            if ((Settings.HouseAccountBalanceInReceipt == "Y"))
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                        }

                    }

                    if (boolSCrdtTender) // Print Store Credit Balance
                    {
                        if (!FindNewTemplate)
                        {
                            PosDataObject.POS objscrtbal = new PosDataObject.POS();
                            objscrtbal.Connection = SystemVariables.Conn;
                            double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                    }

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        int prm = 0;
                        PosDataObject.POS obcc01 = new PosDataObject.POS();
                        obcc01.Connection = SystemVariables.Conn;
                        prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11 = new DataTable();
                        PosDataObject.POS obcc11 = new PosDataObject.POS();
                        obcc11.Connection = SystemVariables.Conn;
                        ccdtbl11 = obcc11.FetchCardData(prm);


                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                            if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                            if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                            if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                            strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            strCardNum = drcc["RefCardAct"].ToString();
                            strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                            strCardLogo = drcc["RefCardLogo"].ToString();
                            strCardEntry = drcc["RefCardEntry"].ToString();
                            strApprovalNum = drcc["RefCardAuthID"].ToString();
                            strTranID = drcc["RefCardTranID"].ToString();
                            strApprovedAmt = drcc["RefCardAuthAmount"].ToString();

                            if (!FindNewTemplate)
                            {
                                if (Settings.POSCardPayment == "Y")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "Credit")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }
                                if (strCardType == "Debit")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });

                                }

                                if (strCardType == "Mercury")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "Precidia")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "EBT")
                                {

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm.Rows.Add(new object[] { "", "", "" });
                                }
                            }

                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ShowTipsInReceipt == "Y")
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                }
                            }


                            if (strCardType == "Credit")
                            {
                                if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                    || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                    ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                     || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                    || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                {
                                    if (!FindNewTemplate)
                                    {
                                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                        dtblstrm.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                                    }


                                    if (!FindNewTemplate)
                                    {

                                        dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                        dtblstrm.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                                    }

                                }
                            }

                            if (strCardType == "Debit")
                            {
                                if (!FindNewTemplate)
                                {
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                                }

                                if (!FindNewTemplate)
                                {
                                    dtblstrm.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                                }

                            }
                        }
                    }
                    // --------------- Sign --------------

                    // --------------- Receipt Footer --------------
                    if (!FindNewTemplate)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }


                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        if (!FindNewTemplate)
                        {
                            string OrginalF = "";
                            ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                            char FindF = '\n';
                            int NumberOfOccurancesF = 0;


                            string CopyOrginalF = string.Copy(OrginalF);
                            int PlaceF = 0;
                            NumberOfOccurancesF = 0;
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            while (PlaceF != -1)
                            {
                                string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                }

                                CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                NumberOfOccurancesF++;
                            }

                            if (CopyOrginalF.Length > 30)
                            {
                                int len = CopyOrginalF.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (CopyOrginalF != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                        CopyOrginalF = CopyOrginalF.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                            }



                            if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                            else
                            {
                                if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                            }

                            dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                        }

                    }

                    if (blCardPayment)
                    {
                        if (!FindNewTemplate)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                            dtblstrm.Rows.Add(new object[] { "", Properties.Resources.CARDHOLDER_COPY, "" });
                        }

                    }

                    if (!FindNewTemplate)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                        dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                    }
                    */

                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                       
                        else if (dr["GroupName"].ToString() == "Gift Aid Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { "Amount" + ": " + GetFotmatDoubleValueWithCurrency(dblTotalPrice), "", "", "", "Y", pval });

                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                            DataTable prndtblINV21 = new DataTable();
                            prndtblINV21 = FetchInvTender();

                            foreach (DataRow dr1 in prndtblINV21.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr1["DisplayAs"].ToString();
                                dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                dtblstrm.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                {
                                    double cashbk = 0;
                                    cashbk = FetchCashBack(dblAmount);
                                    if (cashbk != 0)
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                    }
                                }


                            }
                            prndtblINV21.Dispose();
                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValueWithCurrency(dblTempTender - dblTotalSale), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drgc in dtblGC.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.GC + "#:" + drgc["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drgc["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }

                            }
                            dtblGC.Dispose();

                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drebt in dtblEBT.Rows)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + drebt["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drebt["CardBalance"].ToString())), "", "", "Y", pval });
                                }

                            }
                            dtblEBT.Dispose();




                            int prmmgc = 0;
                            PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                            obcc01mgc.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc = new DataTable();
                            PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                            obcc11mgc.Connection = SystemVariables.Conn;
                            ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                            bool mgc = false;
                            int mgcnt = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                            {
                                if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                    || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                                {
                                    mgcnt++;
                                    if (mgcnt == 1)
                                    {
                                        mgc = true;
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc)
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }






                            int prmebt = 0;
                            PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                            obcc01mgc33.Connection = SystemVariables.Conn;
                            prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc3 = new DataTable();
                            PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                            obcc11mgc55.Connection = SystemVariables.Conn;
                            ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                            bool mgc4 = false;
                            int mgcnt4 = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                            {
                                if (drmgc["CardType"].ToString() == "Food Stamps")
                                {
                                    mgcnt4++;
                                    if (mgcnt4 == 1)
                                    {
                                        mgc4 = true;
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc4)
                            {
                                dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }





                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                            if (boolHATender)
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolSCrdtTender)
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (blCardPayment)
                            {
                                int prm = 0;
                                PosDataObject.POS obcc01 = new PosDataObject.POS();
                                obcc01.Connection = SystemVariables.Conn;
                                prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                                DataTable ccdtbl11 = new DataTable();
                                PosDataObject.POS obcc11 = new PosDataObject.POS();
                                obcc11.Connection = SystemVariables.Conn;
                                ccdtbl11 = obcc11.FetchCardData(prm);


                                foreach (DataRow drcc in ccdtbl11.Rows)
                                {
                                    if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                    if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                    if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                    if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                    strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                    strCardNum = drcc["RefCardAct"].ToString();
                                    strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                    strCardLogo = drcc["RefCardLogo"].ToString();
                                    strCardEntry = drcc["RefCardEntry"].ToString();
                                    strApprovalNum = drcc["RefCardAuthID"].ToString();
                                    strTranID = drcc["RefCardTranID"].ToString();
                                    strApprovedAmt = drcc["RefCardAuthAmount"].ToString();


                                    if (Settings.POSCardPayment == "Y")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CARD + " :" + strCardLogo, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Credit")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (strCardType == "Debit")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Mercury")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "Precidia")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "EBT")
                                    {

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (Settings.AcceptTips == "Y")
                                    {
                                        if (Settings.ShowTipsInReceipt == "Y")
                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                            //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.Total, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });


                                        }
                                    }


                                    if (strCardType == "Credit")
                                    {
                                        if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                            || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                            ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                             || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                            || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                        {
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                            dtblstrm.Rows.Add(new object[] { "", "", "" });

                                            dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                            dtblstrm.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "", " ", "", "Y", pval });
                                        }
                                    }

                                    if (strCardType == "Debit")
                                    {
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                        dtblstrm.Rows.Add(new object[] { Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());




                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress(pval);
                            }

                            

                           
                            if (dr["GroupName"].ToString() == "Gift Aid Caption")
                            {
                                if (serviceT == "Rent")
                                {
                                    if (blIsRentIssued) dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                                }
                            }

                           

                            if (dr["GroupName"].ToString() == "Payment Ref ID")
                            {
                                dtblstrm.Rows.Add(new object[] { "Payment Ref ID" + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                           

                            if (dr["GroupName"].ToString() == "Name")
                            {
                                dtblstrm.Rows.Add(new object[] {  strDiscText, "", "", "", "Y", pval });
                            }

                            

                            if (dr["GroupName"].ToString() == "Address")
                            {
                                if (strInvNotes != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText(strInvNotes, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                           
                            if (dr["GroupName"].ToString() == "Date")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Card Holder Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm.Rows.Add(new object[] { Properties.Resources.CARDHOLDER_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }



                    this.intPageCounter++;




                }
            }
        }


        private void GetPrintStream_Recover()
        {
            DateTime date;
            bool flag;
            bool flag1;
            bool flag2;
            bool flag3;
            bool flag4;
            bool flag5;
            string dummyTest = "";
            if (this.strPrintType == "Gift Receipt")
            {
                string SP1 = new string(' ', 3);
                string SP3 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "*** Gift Receipt ***", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });

                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }

                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";
                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblTotalSale = 0;
                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                string strCustAddress = "";
                prndtblINV = this.FetchInvHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                }
                prndtblINV.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Receipt_Number, "", this.intInvNo.ToString(), "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                if (strCustCompany != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Company, "", strCustCompany, "" });
                }
                if (strCustName != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName, "" });
                }
                if (strCustID != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID, "" });
                }
                if (strCustAddress != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(string.Concat("Address: ", strCustAddress), 40, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len -= 40;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 40)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesH++;
                            len -= 40;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                if ((strCustCompany != "" || strCustName != "" ? true : strCustID != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = this.FetchGCReceipts();
                int i = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    i++;
                    string strDescription = "";
                    string strSKU = "";
                    double dblQty = 0;
                    string strInvNotes = "";
                    strSKU = dr["SKU"].ToString();
                    strDescription = dr["Description"].ToString();
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    strInvNotes = dr["Notes"].ToString();
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                    this.dtblstrm.Rows.Add(new object[] { sPD1, "", "", "" });
                    if (sPD2.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD2, "", "", "" });
                    }
                    if (sPD3.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD3, "", "", "" });
                    }
                    this.dtblstrm.Rows.Add(new object[] { "", this.GetFotmatDoubleValue(dblQty), "", "" });
                    if (strInvNotes != "")
                    {
                        string OrginalN = "";
                        this.ArrangeText(strInvNotes, 30, ref OrginalN);
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;
                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;
                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            string cutstr = CopyOrginalN.Substring(0, PlaceN);
                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len -= 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                            }
                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }
                        if (CopyOrginalN.Length > 30)
                        {
                            int len = CopyOrginalN.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesN++;
                                len -= 30;
                                if (CopyOrginalN != "")
                                {
                                    CopyOrginalN = CopyOrginalN.Substring(30, len);
                                }
                            }
                        }
                        if (NumberOfOccurancesN == 0)
                        {
                            NumberOfOccurancesN = 1;
                        }
                        else if (OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())
                        {
                            NumberOfOccurancesN++;
                        }
                        this.dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                    }
                }
                prndtblINV1.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if ((OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != null))
                {
                    string OrginalF = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Data.Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                this.intPageCounter++;
            }
            if (this.strPrintType == "Rent Issue")
            {
                string SP1 = new string(' ', 3);
                string SP2 = "";
                string SP3 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }

                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }

                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";
                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblCoupon = 0;
                double dblTotalSale = 0;
                double dblRentalSecurityDeposit = 0;
                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                string serviceT = "";
                string calcflag = "";
                double dblFees = 0;
                double dblFeesTax = 0;
                double dblFeesCoupon = 0;
                double dblFeesCouponTax = 0;
                string strCustAddress = "";
                prndtblINV = this.FetchInvHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                    serviceT = dr["ServiceType"].ToString();
                    calcflag = dr["IsRentCalculated"].ToString();
                    dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                    dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                    dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                    dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());
                }
                prndtblINV.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "", "", OfflineRetailV2.Properties.Resources.Rent___Issue, "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Receipt_Number, "", this.intInvNo.ToString(), "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                if (strCustCompany != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Company, "", strCustCompany, "" });
                }
                if (strCustName != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName, "" });
                }
                if (strCustID != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID, "" });
                }
                if (strCustAddress != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(string.Concat("Address: ", strCustAddress), 40, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len -= 40;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 40)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesH++;
                            len -= 40;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                if ((strCustCompany != "" || strCustName != "" ? true : strCustID != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = this.FetchInvDetails(dblTotalSale);
                double dblTempTotal = 0;
                int i = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    i++;
                    string strDescription = "";
                    string strDiscText = "";
                    string strDiscID = "0";
                    double dblDisc = 0;
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string tgininv = "";
                    int ipid = 0;
                    string TService1 = "";
                    string strRentType = "";
                    double dblRentDuration = 1;
                    string dtRentEffectiveFrom = "";
                    string strFeesText = "";
                    string strFeesID = "0";
                    string PUOM = "";
                    PUOM = dr["UOM"].ToString();
                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();
                    ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                    tgininv = dr["TaggedInInvoice"].ToString();
                    strSKU = dr["SKU"].ToString();
                    strDiscText = dr["DiscountText"].ToString();
                    strDiscID = dr["DiscountID"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblDisc : 0));
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();
                    TService1 = dr["ServiceType"].ToString();
                    strRentType = dr["RentType"].ToString();
                    dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());
                    strFeesID = dr["FeesID"].ToString();
                    strFeesText = dr["FeesText"].ToString();
                    string rentdisplay = "";
                    int rnt = 0;
                    string rntvl = (int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : this.GetFotmatDoubleValue(dblRentDuration));
                    if (strRentType == "MI")
                    {
                        rentdisplay = (calcflag == "Y" ? string.Concat(" ", OfflineRetailV2.Properties.Resources.on_minute_basis) : string.Concat(new string[] { " ", OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.min_ }));
                    }
                    if (strRentType == "HR")
                    {
                        rentdisplay = (calcflag == "Y" ? string.Concat(" ", OfflineRetailV2.Properties.Resources.hourly) : string.Concat(new string[] { " ", OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.hr_ }));
                    }
                    if (strRentType == "HD")
                    {
                        rentdisplay = (calcflag == "Y" ? string.Concat(" ", OfflineRetailV2.Properties.Resources.half_day) : string.Concat(new string[] { " ", OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.half_day_s_ }));
                    }
                    if (strRentType == "DY")
                    {
                        rentdisplay = (calcflag == "Y" ? string.Concat(" ", OfflineRetailV2.Properties.Resources.daily) : string.Concat(new string[] { " ", OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.day_s_ }));
                    }
                    if (strRentType == "WK")
                    {
                        rentdisplay = (calcflag == "Y" ? string.Concat(" ", OfflineRetailV2.Properties.Resources.weekly) : string.Concat(new string[] { " ", OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.week_s_ }));
                    }
                    if (strRentType == "MN")
                    {
                        rentdisplay = (calcflag == "Y" ? string.Concat(" ", OfflineRetailV2.Properties.Resources.monthly) : string.Concat(new string[] { " ", OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.month_s_ }));
                    }
                    date = GeneralFunctions.fnDate(dr["RentDuration"].ToString());
                    dtRentEffectiveFrom = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                    this.dtblstrm.Rows.Add(new object[] { sPD1, "", "", "" });
                    if (sPD2.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD2, "", "", "" });
                    }
                    if (sPD3.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD3, "", "", "" });
                    }
                    if (strPType == "M")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "", "" });
                        if (strMV2 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "", "" });
                        }
                        if (strMV3 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "", "" });
                        }
                    }
                    if (strDiscText != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strDiscText), "", "", "" });
                    }
                    if (OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y")
                    {
                        if (strFeesText != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strFeesText), "", "", "" });
                        }
                    }
                    int val = 0;
                    string qval = (int.TryParse(dblQty.ToString(), out val) ? val.ToString() : this.GetFotmatDoubleValue(dblQty));
                    if (calcflag != "N")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, rentdisplay), "", qval, "" });
                    }
                    else
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, rentdisplay), "", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, this.GetFotmatProductValue(dblPrice, strDP)), qval, this.GetFotmatDoubleValue(dblTotalPrice), "" });
                    }
                    if (strInvNotes != "")
                    {
                        string OrginalN = "";
                        this.ArrangeText(strInvNotes, 30, ref OrginalN);
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;
                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;
                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            string cutstr = CopyOrginalN.Substring(0, PlaceN);
                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len -= 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                            }
                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }
                        if (CopyOrginalN.Length > 30)
                        {
                            int len = CopyOrginalN.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesN++;
                                len -= 30;
                                if (CopyOrginalN != "")
                                {
                                    CopyOrginalN = CopyOrginalN.Substring(30, len);
                                }
                            }
                        }
                        if (NumberOfOccurancesN == 0)
                        {
                            NumberOfOccurancesN = 1;
                        }
                        else if (OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())
                        {
                            NumberOfOccurancesN++;
                        }
                        this.dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                    }
                }
                prndtblINV1.Dispose();
                if ((this.blIsRentReturned ? false : calcflag == "N"))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    DataRowCollection rows = this.dtblstrm.Rows;
                    object[] fotmatDoubleValue = new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Sub_Total), "", null, null };
                    fotmatDoubleValue[2] = this.GetFotmatDoubleValue((OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax));
                    fotmatDoubleValue[3] = "";
                    rows.Add(fotmatDoubleValue);
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    if (dblDiscount != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        string strDiscountCaption = OfflineRetailV2.Properties.Resources.Discount;
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strDiscountCaption), "", this.GetFotmatDoubleValue(dblDiscount), "" });
                    }
                    if (dblTax != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        if (dblTax1 != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName1), "", this.GetFotmatDoubleValue(dblTax1), "" });
                        }
                        if (dblTax2 != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName2), "", this.GetFotmatDoubleValue(dblTax2), "" });
                        }
                        if (dblTax3 != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName3), "", this.GetFotmatDoubleValue(dblTax3), "" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    }
                    if ((dblFees != 0 || dblFeesTax != 0 || dblFeesCoupon != 0 || dblFeesCouponTax != 0 ? OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y" : false))
                    {
                        DataTable dFees = this.FetchInvFees();
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        if (dblFees + dblFeesCoupon != 0)
                        {
                            if (dFees.Rows.Count == 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString()), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            }
                            if (dFees.Rows.Count > 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            }
                        }
                        if (dblFeesTax + dblFeesCouponTax != 0)
                        {
                            if (dFees.Rows.Count == 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString(), " ", OfflineRetailV2.Properties.Resources.Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            }
                            if (dFees.Rows.Count > 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges_Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            }
                        }
                    }
                    if (dblCoupon != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Discount_on_Ticket, "", this.GetFotmatDoubleValue(dblCoupon), "" });
                    }
                    DataTable dtblCpn = new DataTable();
                    dtblCpn = this.FetchInvCoupon();
                    if (dtblCpn.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtblCpn.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;
                            strTender = dr["Name"].ToString();
                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            this.SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD1), "", "", "" });
                            if (sPD2.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD2), "", "", "" });
                            }
                            if (sPD3.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD3), "", "", "" });
                            }
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            this.dtblstrm.Rows.Add(new object[] { "", "", this.GetFotmatDoubleValue(dblAmount), "" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    }
                }
                if (dblRentalSecurityDeposit > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Security_Deposit, "", this.GetFotmatDoubleValue(dblRentalSecurityDeposit), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                if (calcflag == "N")
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblTotalSale + dblRentalSecurityDeposit), "B" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tender, "", "", "" });
                bool boolHATender = false;
                bool boolSCrdtTender = false;
                DataTable prndtblINV2 = new DataTable();
                prndtblINV2 = this.FetchInvTender();
                double dblTempTender = 0;
                foreach (DataRow dr in prndtblINV2.Rows)
                {
                    string strTender = "";
                    double dblAmount = 0;
                    strTender = dr["DisplayAs"].ToString();
                    dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                    dblTempTender += dblAmount;
                    if (strTender == "Gift Certificate")
                    {
                        strTender = OfflineRetailV2.Properties.Resources.Gift_Cert;
                    }
                    if (strTender == "American Express")
                    {
                        strTender = OfflineRetailV2.Properties.Resources.American_Exp_;
                    }
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender), "", this.GetFotmatDoubleValue(dblAmount) });
                    if ((dr["Name"].ToString() == "Debit Card" ? true : dr["Name"].ToString() == "EBT Cash"))
                    {
                        double cashbk = 0;
                        cashbk = this.FetchCashBack(dblAmount);
                        if (cashbk != 0)
                        {
                            dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Cash_Back), "", this.GetFotmatDoubleValue(cashbk) });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender, " ", OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblAmount + cashbk) });
                        }
                    }
                    if (dr["Name"].ToString() == "House Account")
                    {
                        boolHATender = true;
                    }
                    if (dr["Name"].ToString() == "Store Credit")
                    {
                        boolSCrdtTender = true;
                    }
                }
                prndtblINV2.Dispose();
                if (dblTotalSale + dblRentalSecurityDeposit - dblTempTender == 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                else
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Change, " "), "", string.Concat("(", this.GetFotmatDoubleValue(dblTempTender + dblRentalSecurityDeposit - dblTotalSale), ")"), "" });
                }
                if (OfflineRetailV2.Data.Settings.POSShowGiftCertBalance == "Y")
                {
                    DataTable dtblGC = new DataTable();
                    dtblGC = this.FetchActiveGC(this.intInvNo);
                    if (dtblGC.Rows.Count > 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.GC_s__with_balance_as_on, " "), "", "", "" });
                        DataRowCollection dataRowCollection = this.dtblstrm.Rows;
                        object[] objArray = new object[4];
                        date = DateTime.Today.Date;
                        objArray[0] = string.Concat(SP1, date.ToShortDateString());
                        objArray[1] = "";
                        objArray[2] = "";
                        objArray[3] = "";
                        dataRowCollection.Add(objArray);
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        foreach (DataRow dr in dtblGC.Rows)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.GC, "#:", dr["GC"].ToString()), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }
                    dtblGC.Dispose();
                }
                DataTable dtblEBT = new DataTable();
                dtblEBT = this.FetchEBTBalance(this.intInvNo);
                if (dtblEBT.Rows.Count > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.EBT_Balance, " "), "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    foreach (DataRow dr in dtblEBT.Rows)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.EBT_Card, "#:", dr["CardNo"].ToString()), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                    }
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                dtblEBT.Dispose();
                int prmmgc = 0;
                POS obcc01mgc = new POS()
                {
                    Connection = SystemVariables.Conn
                };
                prmmgc = obcc01mgc.GetTranIDFromInvoiceID(this.intInvNo);
                DataTable ccdtbl11mgc = new DataTable();
                POS obcc11mgc = new POS()
                {
                    Connection = SystemVariables.Conn
                };
                ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);
                bool mgc = false;
                int mgcnt = 0;
                foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                {
                    if ((drmgc["CardType"].ToString() == "Mercury Gift Card" || drmgc["CardType"].ToString() == "Precidia Gift Card" || drmgc["CardType"].ToString() == "Datacap Gift Card" ? true : drmgc["CardType"].ToString() == "POSLink Gift Card"))
                    {
                        mgcnt++;
                        if (mgcnt == 1)
                        {
                            mgc = true;
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.GIft_Card, "", OfflineRetailV2.Properties.Resources.Balance });
                            this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                    }
                }
                if (mgc)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if ((!boolHATender ? false : OfflineRetailV2.Data.Settings.HouseAccountBalanceInReceipt == "Y"))
                {
                    POS obcc99 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(this.intInvNo, GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.House_Account_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (boolSCrdtTender)
                {
                    POS objscrtbal = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Store_Credit_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (this.blCardPayment)
                {
                    int prm = 0;
                    POS obcc01 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    prm = obcc01.GetTranIDFromInvoiceID(this.intInvNo);
                    DataTable ccdtbl11 = new DataTable();
                    POS obcc11 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    foreach (DataRow drcc in obcc11.FetchCardData(prm).Rows)
                    {
                        if ((drcc["CardType"].ToString() == "Credit" ? true : drcc["CardType"].ToString() == "Credit Card"))
                        {
                            this.strCardType = "Credit";
                        }
                        if ((drcc["CardType"].ToString() == "Debit" ? true : drcc["CardType"].ToString() == "Debit Card"))
                        {
                            this.strCardType = "Debit";
                        }
                        if (drcc["CardType"].ToString() == "Mercury Gift Card")
                        {
                            this.strCardType = "Mercury";
                        }
                        if (drcc["CardType"].ToString() == "Precidia Gift Card")
                        {
                            this.strCardType = "Precidia";
                        }
                        if (drcc["CardType"].ToString() == "Datacap Gift Card")
                        {
                            this.strCardType = "Datacap";
                        }
                        if (drcc["CardType"].ToString() == "POSLink Gift Card")
                        {
                            this.strCardType = "POSLink";
                        }
                        if (drcc["CardType"].ToString() == "EBT")
                        {
                            this.strCardType = "EBT";
                        }
                        this.strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                        this.strCardNum = drcc["RefCardAct"].ToString();
                        this.strCardNum = GeneralFunctions.GetLast(this.strCardNum, 4);
                        this.strCardLogo = drcc["RefCardLogo"].ToString();
                        this.strCardEntry = drcc["RefCardEntry"].ToString();
                        this.strApprovalNum = drcc["RefCardAuthID"].ToString();
                        this.strTranID = drcc["RefCardTranID"].ToString();
                        this.strApprovedAmt = drcc["RefCardAuthAmount"].ToString();
                        if (OfflineRetailV2.Data.Settings.POSCardPayment == "Y")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.REF, "#  :"), "", this.intInvNo.ToString() });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.ACT, "#  :"), "", this.strCardNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.CARD, "  :"), "", this.strCardLogo });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Credit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.CREDIT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Debit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.DEBIT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Mercury")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.MERCURY_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Precidia")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.PRECIDIA_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "EBT")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.EBT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (OfflineRetailV2.Data.Settings.AcceptTips == "Y")
                        {
                            if (OfflineRetailV2.Data.Settings.ShowTipsInReceipt == "Y")
                            {
                                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tip, "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Total, "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                            }
                        }
                        if (this.strCardType == "Credit")
                        {
                            if (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3 && GeneralFunctions.fnDouble(this.strApprovedAmt) >= OfflineRetailV2.Data.Settings.PrecidiaSignAmount || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5 && GeneralFunctions.fnDouble(this.strApprovedAmt) >= OfflineRetailV2.Data.Settings.DatacapSignAmount)
                            {
                                flag5 = true;
                            }
                            else
                            {
                                flag5 = (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) != 5 ? false : this.blDatacapManualTendering);
                            }
                            if (flag5)
                            {
                                this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                this.dtblstrm.Rows.Add(new object[] { "", string.Concat(" ", OfflineRetailV2.Properties.Resources.S_I_G_N_A_T_U_R_E, " "), "" });
                            }
                        }
                        if (this.strCardType == "Debit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.PIN_USED, "" });
                            this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                        }
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if ((OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != null))
                {
                    string OrginalF = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Data.Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                if (this.blCardPayment)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.CARDHOLDER_COPY, "" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                this.intPageCounter++;
            }
            if (this.strPrintType == "Return Rent Item")
            {
                string SP1 = new string(' ', 3);
                string SP2 = "";
                string SP3 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }

                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }

                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";
                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblCoupon = 0;
                double dblTotalSale = 0;
                double dblRentalSecurityDeposit = 0;
                int intRentParent = 0;
                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                string serviceT = "";
                string calcflag = "";
                string strCustAddress = "";
                prndtblINV = this.FetchInvHeader();
                double Tot = 0;
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                    intRentParent = GeneralFunctions.fnInt32(dr["RentParentID"].ToString());
                    serviceT = dr["ServiceType"].ToString();
                    calcflag = dr["IsRentCalculated"].ToString();
                    Tot += dblTotalSale;
                }
                prndtblINV.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "", "", OfflineRetailV2.Properties.Resources.Rent___Return, "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Receipt_Number, "", this.intInvNo.ToString(), "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "Ref. Invoice # ", "", intRentParent.ToString(), "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                if (strCustCompany != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Company, "", strCustCompany, "" });
                }
                if (strCustName != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName, "" });
                }
                if (strCustID != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID, "" });
                }
                if (strCustAddress != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(string.Concat("Address: ", strCustAddress), 40, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len -= 40;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 40)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesH++;
                            len -= 40;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                if ((strCustCompany != "" || strCustName != "" ? true : strCustID != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = this.FetchInvDetails(dblTotalSale);
                double dblTempTotal = 0;
                int i = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    i++;
                    string strDescription = "";
                    string strDiscText = "";
                    string strDiscID = "0";
                    double dblDisc = 0;
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string tgininv = "";
                    int ipid = 0;
                    string TService1 = "";
                    string strRentType = "";
                    double dblRentDuration = 1;
                    string dtRentEffectiveFrom = "";
                    string PUOM = "";
                    PUOM = dr["UOM"].ToString();
                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();
                    ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                    tgininv = dr["TaggedInInvoice"].ToString();
                    strSKU = dr["SKU"].ToString();
                    strDiscText = dr["DiscountText"].ToString();
                    strDiscID = dr["DiscountID"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblDisc : 0));
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();
                    TService1 = dr["ServiceType"].ToString();
                    strRentType = dr["RentType"].ToString();
                    dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());
                    string rentdisplay = "";
                    int rnt = 0;
                    string rntvl = (int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : this.GetFotmatDoubleValue(dblRentDuration));
                    if (TService1 == "Rent")
                    {
                        if (strRentType == "MI")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.min_ });
                        }
                        if (strRentType == "HR")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.hr_ });
                        }
                        if (strRentType == "HD")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.half_day_s_ });
                        }
                        if (strRentType == "DY")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.day_s_ });
                        }
                        if (strRentType == "WK")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.week_s_ });
                        }
                        if (strRentType == "MN")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.month_s_ });
                        }
                        date = GeneralFunctions.fnDate(dr["RentDuration"].ToString());
                        dtRentEffectiveFrom = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    }
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                    this.dtblstrm.Rows.Add(new object[] { sPD1, "", "", "" });
                    if (sPD2.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD2, "", "", "" });
                    }
                    if (sPD3.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD3, "", "", "" });
                    }
                    if (strPType == "M")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "", "" });
                        if (strMV2 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "", "" });
                        }
                        if (strMV3 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "", "" });
                        }
                    }
                    int qval = 0;
                    string val = (int.TryParse((-dblQty).ToString(), out qval) ? qval.ToString() : this.GetFotmatDoubleValue(-dblQty));
                    if (calcflag == "N")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, rentdisplay), "", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { "", "", val, "" });
                    }
                    if (calcflag == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, rentdisplay), "", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { this.GetFotmatDoubleValue(dblPrice), val, this.GetFotmatDoubleValue(dblPrice * -dblQty * dblRentDuration), "" });
                    }
                    if (strInvNotes != "")
                    {
                        string OrginalN = "";
                        this.ArrangeText(strInvNotes, 30, ref OrginalN);
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;
                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;
                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            string cutstr = CopyOrginalN.Substring(0, PlaceN);
                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len -= 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                            }
                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }
                        if (CopyOrginalN.Length > 30)
                        {
                            int len = CopyOrginalN.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesN++;
                                len -= 30;
                                if (CopyOrginalN != "")
                                {
                                    CopyOrginalN = CopyOrginalN.Substring(30, len);
                                }
                            }
                        }
                        if (NumberOfOccurancesN == 0)
                        {
                            NumberOfOccurancesN = 1;
                        }
                        else if (OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())
                        {
                            NumberOfOccurancesN++;
                        }
                        this.dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                    }
                }
                prndtblINV1.Dispose();
                if (dblTax != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    if (dblTax1 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName1), "", this.GetFotmatDoubleValue(dblTax1), "" });
                    }
                    if (dblTax2 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName2), "", this.GetFotmatDoubleValue(dblTax2), "" });
                    }
                    if (dblTax3 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName3), "", this.GetFotmatDoubleValue(dblTax3), "" });
                    }
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                }
                DataTable dtblR = new DataTable();
                dtblR = this.FetchRentParentHeader(intRentParent);
                double val1 = 0;
                double val2 = 0;
                foreach (DataRow drr in dtblR.Rows)
                {
                    val1 = GeneralFunctions.fnDouble(drr["RentDeposit"].ToString());
                    val2 = GeneralFunctions.fnDouble(drr["DueAmount"].ToString());
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                if (val1 > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Security_Deposit, "", this.GetFotmatDoubleValue(val1), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                if (dblRentalSecurityDeposit != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Return_Deposit, "", this.GetFotmatDoubleValue(dblRentalSecurityDeposit), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                if ((val1 <= 0 ? false : val2 > 0))
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Due, " "), "", this.GetFotmatDoubleValue(val2), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                if (dblRentalSecurityDeposit != 0)
                {
                    flag4 = true;
                }
                else
                {
                    flag4 = (calcflag != "Y" ? false : Tot != 0);
                }
                if (flag4)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(Tot), "B" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tender, "", "", "" });
                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = this.FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;
                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender += dblAmount;
                        if (strTender == "Gift Certificate")
                        {
                            strTender = OfflineRetailV2.Properties.Resources.Gift_Cert;
                        }
                        if (strTender == "American Express")
                        {
                            strTender = OfflineRetailV2.Properties.Resources.American_Exp_;
                        }
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender), "", this.GetFotmatDoubleValue(dblAmount) });
                        if ((dr["Name"].ToString() == "Debit Card" ? true : dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = this.FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Cash_Back), "", this.GetFotmatDoubleValue(cashbk) });
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender, " ", OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblAmount + cashbk) });
                            }
                        }
                    }
                    prndtblINV2.Dispose();
                    if (Tot - dblTempTender == 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    else
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Change, " "), "", string.Concat("(", this.GetFotmatDoubleValue(dblTempTender - Tot), ")"), "" });
                    }
                    int prmmgc = 0;
                    POS obcc01mgc = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(this.intInvNo);
                    DataTable ccdtbl11mgc = new DataTable();
                    POS obcc11mgc = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);
                    bool mgc = false;
                    int mgcnt = 0;
                    foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                    {
                        if ((drmgc["CardType"].ToString() == "Mercury Gift Card" || drmgc["CardType"].ToString() == "Precidia Gift Card" || drmgc["CardType"].ToString() == "Datacap Gift Card" ? true : drmgc["CardType"].ToString() == "POSLink Gift Card"))
                        {
                            mgcnt++;
                            if (mgcnt == 1)
                            {
                                mgc = true;
                                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.GIft_Card, "", OfflineRetailV2.Properties.Resources.Balance });
                                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                            this.dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                        }
                    }
                    if (mgc)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if ((OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != null))
                {
                    string OrginalF = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Data.Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                this.intPageCounter++;
            }
            if (this.strPrintType == "Repair In")
            {
                string SP1 = new string(' ', 3);
                string SP2 = "";
                string SP3 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }

                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }

                this.GetRecieptHeader();
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strCustPhone = "";
                string strTransDate = "";
                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblCoupon = 0;
                double dblTotalSale = 0;
                double dblFees = 0;
                double dblFeesTax = 0;
                double dblFeesCoupon = 0;
                double dblFeesCouponTax = 0;
                double dblRentalSecurityDeposit = 0;
                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                string serviceT = "";
                double rpTotal = 0;
                double rpAdvance = 0;
                double rpDue = 0;
                string rpDesc = "";
                string rpInDate = "";
                string rpDelDate = "";
                string rpNotfDate = "";
                string rpItem = "";
                string rpSL = "";
                string strCustAddress = "";
                prndtblINV = this.FetchInvHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    strCustPhone = dr["CustMobile"].ToString();
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                    rpTotal = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                    rpAdvance = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                    rpDue = GeneralFunctions.fnDouble(dr["RepairDueAmount"].ToString());
                    rpDesc = dr["RepairProblem"].ToString();
                    dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                    dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                    dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                    dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());
                    date = GeneralFunctions.fnDate(dr["RepairDateIn"].ToString());
                    rpInDate = date.ToString("d");
                    if (dr["RepairDeliveryDate"].ToString() != "")
                    {
                        date = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString());
                        rpDelDate = date.ToString("d");
                    }
                    if (dr["RepairNotifiedDate"].ToString() != "")
                    {
                        date = GeneralFunctions.fnDate(dr["RepairNotifiedDate"].ToString());
                        rpNotfDate = date.ToString("d");
                    }
                    serviceT = dr["ServiceType"].ToString();
                    rpItem = dr["RepairItemName"].ToString();
                    rpSL = dr["RepairItemSlNo"].ToString();
                }
                prndtblINV.Dispose();
                this.intWO = this.FetchWorkorderNo();
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Repair, "", OfflineRetailV2.Properties.Resources.Issue, "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Receipt_Number, "", this.intInvNo.ToString(), "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                if (rpInDate != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_In, "", rpInDate, "" });
                }
                if (rpDelDate != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Delivery_Date, "", rpDelDate, "" });
                }
                if (rpNotfDate != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Notified_Date, "", rpNotfDate, "" });
                }
                if ((rpInDate != "" || rpDelDate != "" ? true : rpNotfDate != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                if (strCustCompany != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Company, "", strCustCompany, "" });
                }
                if (strCustName != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName, "" });
                }
                if (strCustID != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID, "" });
                }
                if (strCustAddress != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(string.Concat("Address: ", strCustAddress), 40, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len -= 40;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 40)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesH++;
                            len -= 40;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                if (strCustPhone != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Ph_, "", strCustPhone, "" });
                }
                if ((strCustCompany != "" || strCustName != "" ? true : strCustID != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                if (rpItem != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Repair_Item, " : ", rpItem), "", "", "" });
                }
                if (rpSL != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Serial, " # : ", rpSL), "", "", "" });
                }
                if ((rpItem != "" ? true : rpSL != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = this.FetchInvDetails(dblTotalSale);
                double dblTempTotal = 0;
                int i = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    i++;
                    string strDescription = "";
                    string strDiscText = "";
                    string strDiscID = "0";
                    double dblDisc = 0;
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string tgininv = "";
                    int ipid = 0;
                    string TService1 = "";
                    string strFeesID = "0";
                    string strFeesText = "";
                    string strrpItemTag = "";
                    string strrpItemSLNO = "";
                    string dtrpPurchaseDate = "";
                    string dtrpDeliveryDate = "";
                    string PUOM = "";
                    PUOM = dr["UOM"].ToString();
                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();
                    ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                    tgininv = dr["TaggedInInvoice"].ToString();
                    strSKU = dr["SKU"].ToString();
                    strDiscText = dr["DiscountText"].ToString();
                    strDiscID = dr["DiscountID"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblDisc : 0));
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();
                    strFeesID = dr["FeesID"].ToString();
                    strFeesText = dr["FeesText"].ToString();
                    TService1 = dr["ServiceType"].ToString();
                    strrpItemTag = dr["RepairItemTag"].ToString();
                    strrpItemSLNO = dr["RepairItemSLNO"].ToString();
                    if (dr["RepairItemPurchaseDate"].ToString() != "")
                    {
                        date = GeneralFunctions.fnDate(dr["RepairItemPurchaseDate"].ToString());
                        dtrpPurchaseDate = date.ToString("d");
                    }
                    if (dr["RepairItemDeliveryDate"].ToString() != "")
                    {
                        date = GeneralFunctions.fnDate(dr["RepairItemDeliveryDate"].ToString());
                        dtrpDeliveryDate = date.ToString("d");
                    }
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                    this.dtblstrm.Rows.Add(new object[] { sPD1, "", "", "OneColumn" });
                    if (sPD2.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD2, "", "", "OneColumn" });
                    }
                    if (sPD3.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD3, "", "", "OneColumn" });
                    }
                    if (strPType == "M")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "", "" });
                        if (strMV2 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "", "" });
                        }
                        if (strMV3 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "", "" });
                        }
                    }
                    if (strrpItemSLNO != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.SL, " # ", strrpItemSLNO), "", "", "" });
                    }
                    if (strrpItemTag != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tag, " # ", strrpItemTag), "", "", "" });
                    }
                    if (strDiscText != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        if (this.strPrintType == "Invoice")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strDiscText), "", "", "" });
                        }
                    }
                    if (OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y")
                    {
                        if (strFeesText != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strFeesText), "", "", "" });
                        }
                    }
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, this.GetFotmatProductValue(dblPrice, strDP)), this.GetFotmatDoubleValue(dblQty), this.GetFotmatDoubleValue(dblTotalPrice), "" });
                    if (strInvNotes != "")
                    {
                        string OrginalN = "";
                        this.ArrangeText(strInvNotes, 30, ref OrginalN);
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;
                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;
                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            string cutstr = CopyOrginalN.Substring(0, PlaceN);
                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len -= 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                            }
                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }
                        if (CopyOrginalN.Length > 30)
                        {
                            int len = CopyOrginalN.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesN++;
                                len -= 30;
                                if (CopyOrginalN != "")
                                {
                                    CopyOrginalN = CopyOrginalN.Substring(30, len);
                                }
                            }
                        }
                        if (NumberOfOccurancesN == 0)
                        {
                            NumberOfOccurancesN = 1;
                        }
                        else if (OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())
                        {
                            NumberOfOccurancesN++;
                        }
                        this.dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                    }
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                prndtblINV1.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                DataRowCollection rows1 = this.dtblstrm.Rows;
                object[] fotmatDoubleValue1 = new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Sub_Total), "", null, null };
                fotmatDoubleValue1[2] = this.GetFotmatDoubleValue((OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax));
                fotmatDoubleValue1[3] = "";
                rows1.Add(fotmatDoubleValue1);
                if (dblDiscount != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    string strDiscountCaption = OfflineRetailV2.Properties.Resources.Discount;
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strDiscountCaption), "", this.GetFotmatDoubleValue(dblDiscount), "" });
                }
                if (dblTax != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":"), "", this.GetFotmatDoubleValue(dblTax), "" });
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                }
                if ((dblFees != 0 || dblFeesTax != 0 || dblFeesCoupon != 0 || dblFeesCouponTax != 0 ? OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y" : false))
                {
                    DataTable dFees = this.FetchInvFees();
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    if (dblFees + dblFeesCoupon != 0)
                    {
                        if (dFees.Rows.Count == 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString()), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                        if (dFees.Rows.Count > 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                    }
                    if (dblFeesTax + dblFeesCouponTax != 0)
                    {
                        if (dFees.Rows.Count == 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString(), " ", OfflineRetailV2.Properties.Resources.Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                        if (dFees.Rows.Count > 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges_Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Total, "", this.GetFotmatDoubleValue(rpTotal), "B" });
                if (rpDesc != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Problem, " :"), "", "" });
                    string OrginalD = "";
                    this.ArrangeText(rpDesc, 30, ref OrginalD);
                    char FindD = '\n';
                    int NumberOfOccurancesD = 0;
                    string CopyOrginalD = string.Copy(OrginalD);
                    int PlaceD = 0;
                    NumberOfOccurancesD = 0;
                    PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                    while (PlaceD != -1)
                    {
                        string cutstr = CopyOrginalD.Substring(0, PlaceD);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesD++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                        PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                        NumberOfOccurancesD++;
                    }
                    if (CopyOrginalD.Length > 30)
                    {
                        int len = CopyOrginalD.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesD++;
                            len -= 30;
                            if (CopyOrginalD != "")
                            {
                                CopyOrginalD = CopyOrginalD.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesD == 0)
                    {
                        NumberOfOccurancesD = 1;
                    }
                    else if (OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())
                    {
                        NumberOfOccurancesD++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { rpDesc, "", "", NumberOfOccurancesD.ToString() });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Security_Deposit, "", this.GetFotmatDoubleValue(rpAdvance), "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Due, "", this.GetFotmatDoubleValue(rpDue), "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                bool boolHATender = false;
                bool boolSCrdtTender = false;
                if (rpAdvance > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Tran_Amt_), "", this.GetFotmatDoubleValue(rpAdvance), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tender, "", "", "" });
                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = this.FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;
                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender += dblAmount;
                        if (strTender == "Gift Certificate")
                        {
                            strTender = OfflineRetailV2.Properties.Resources.Gift_Cert;
                        }
                        if (strTender == "American Express")
                        {
                            strTender = OfflineRetailV2.Properties.Resources.American_Exp_;
                        }
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender), "", this.GetFotmatDoubleValue(dblAmount) });
                        if ((dr["Name"].ToString() == "Debit Card" ? true : dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = this.FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Cash_Back), "", this.GetFotmatDoubleValue(cashbk) });
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender, " ", OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblAmount + cashbk) });
                            }
                        }
                        if (dr["Name"].ToString() == "House Account")
                        {
                            boolHATender = true;
                        }
                        if (dr["Name"].ToString() == "Store Credit")
                        {
                            boolSCrdtTender = true;
                        }
                    }
                    prndtblINV2.Dispose();
                    if (rpAdvance - dblTempTender == 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    else
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Change, " "), "", string.Concat("(", this.GetFotmatDoubleValue(dblTempTender - rpAdvance), ")"), "" });
                    }
                }
                if (OfflineRetailV2.Data.Settings.POSShowGiftCertBalance == "Y")
                {
                    DataTable dtblGC = new DataTable();
                    dtblGC = this.FetchActiveGC(this.intInvNo);
                    if (dtblGC.Rows.Count > 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.GC_s__with_balance_as_on, " "), "", "", "" });
                        DataRowCollection dataRowCollection1 = this.dtblstrm.Rows;
                        object[] objArray1 = new object[4];
                        date = DateTime.Today.Date;
                        objArray1[0] = string.Concat(SP1, date.ToShortDateString());
                        objArray1[1] = "";
                        objArray1[2] = "";
                        objArray1[3] = "";
                        dataRowCollection1.Add(objArray1);
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        foreach (DataRow dr in dtblGC.Rows)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.GC, "#:", dr["GC"].ToString()), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }
                    dtblGC.Dispose();
                }
                DataTable dtblEBT = new DataTable();
                dtblEBT = this.FetchEBTBalance(this.intInvNo);
                if (dtblEBT.Rows.Count > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.EBT_Balance, " "), "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    foreach (DataRow dr in dtblEBT.Rows)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.EBT_Card, "#:", dr["CardNo"].ToString()), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                    }
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                dtblEBT.Dispose();
                if ((!boolHATender ? false : OfflineRetailV2.Data.Settings.HouseAccountBalanceInReceipt == "Y"))
                {
                    POS obcc99 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(this.intInvNo, GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.House_Account_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (boolSCrdtTender)
                {
                    POS objscrtbal = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Store_Credit_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (this.blCardPayment)
                {
                    if (OfflineRetailV2.Data.Settings.POSCardPayment == "Y")
                    {
                        if (OfflineRetailV2.Data.Settings.PaymentGateway == 2)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.MERCH_ID, " :"), "", this.strMercuryMerchantID });
                        }
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.REF, "#  :"), "", this.intInvNo.ToString() });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.ACT, "#  :"), "", this.strCardNum });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.CARD, "  :"), "", this.strCardLogo });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.ENTRY, "  :"), "", this.strCardEntry });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    if (this.strCardType == "Credit")
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.CREDIT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    if (this.strCardType == "Debit")
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.DEBIT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", "APPROVED" });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    if (this.strCardType == "Credit")
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                        this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { "X", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                        this.dtblstrm.Rows.Add(new object[] { "", string.Concat(" ", OfflineRetailV2.Properties.Resources.S_I_G_N_A_T_U_R_E, " "), "" });
                    }
                    if (this.strCardType == "Debit")
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.PIN_USED, "" });
                        this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "", string.Concat(OfflineRetailV2.Properties.Resources.I_AGREE_TO_PAY, " ", this.GetFotmatDoubleValue(rpDue)), "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "X", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                this.dtblstrm.Rows.Add(new object[] { "", string.Concat(" ", OfflineRetailV2.Properties.Resources.S_I_G_N_A_T_U_R_E, " "), "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if (!(OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != "") || OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == null)
                {
                    flag3 = (OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() != null);
                }
                else
                {
                    flag3 = true;
                }
                if (flag3)
                {
                    string MText = "";
                    if ((OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != null))
                    {
                        MText = string.Concat(OfflineRetailV2.Properties.Resources.CUSTOMER_AGREEMENT_, "\n", OfflineRetailV2.Data.Settings.ReceiptFooter.Trim());
                    }
                    if ((OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() != null))
                    {
                        MText = (MText != "" ? string.Concat(new string[] { MText, "\n\n", OfflineRetailV2.Properties.Resources.REPAIR_DISCLAIMER_, "\n", OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() }) : string.Concat(OfflineRetailV2.Properties.Resources.REPAIR_DISCLAIMER_, "\n", OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim()));
                    }
                    string OrginalF = "";
                    this.ArrangeText(MText, 40, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesF++;
                                len -= 40;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 40)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesF++;
                            len -= 40;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { MText, "", "", NumberOfOccurancesF.ToString() });
                }
                if (this.blCardPayment)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.CARDHOLDER_COPY, "" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                this.intPageCounter++;
            }
            if (this.strPrintType == "Repair Deliver")
            {
                string SP1 = new string(' ', 3);
                string SP2 = "";
                string SP3 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }
                this.GetRecieptHeader();
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strCustPhone = "";
                string strTransDate = "";
                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblCoupon = 0;
                double dblTotalSale = 0;
                double dblRentalSecurityDeposit = 0;
                double dblFees = 0;
                double dblFeesTax = 0;
                double dblFeesCoupon = 0;
                double dblFeesCouponTax = 0;
                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                string serviceT = "";
                double rpTotal = 0;
                double rpAdvance = 0;
                double rpDue = 0;
                string rpProb = "";
                string rpDesc = "";
                string rpDelDate = "";
                string rpNotfDate = "";
                string rpInDate = "";
                string rpItem = "";
                string rpSL = "";
                int ParentID = 0;
                string strCustAddress = "";
                prndtblINV = this.FetchInvHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    strCustPhone = dr["CustMobile"].ToString();
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                    ParentID = GeneralFunctions.fnInt32(dr["RepairParentID"].ToString());
                    dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                    dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                    dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                    dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());
                    rpTotal = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                    rpAdvance = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                    rpDue = GeneralFunctions.fnDouble(dr["RepairDueAmount"].ToString());
                    if (dr["RepairDeliveryDate"].ToString() != "")
                    {
                        date = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString());
                        rpDelDate = date.ToString("d");
                    }
                    if (dr["RepairNotifiedDate"].ToString() != "")
                    {
                        date = GeneralFunctions.fnDate(dr["RepairNotifiedDate"].ToString());
                        rpNotfDate = date.ToString("d");
                    }
                    date = GeneralFunctions.fnDate(dr["RepairDateIn"].ToString());
                    rpInDate = date.ToString("d");
                    rpItem = dr["RepairItemName"].ToString();
                    rpSL = dr["RepairItemSlNo"].ToString();
                    serviceT = dr["ServiceType"].ToString();
                }
                prndtblINV.Dispose();
                this.intWO = this.FetchWorkorderNo();
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Repair, "", OfflineRetailV2.Properties.Resources.Deliver, "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Receipt_Number, "", this.intInvNo.ToString(), "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "Ref. Invoice #", "", ParentID.ToString(), "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                if (strCustCompany != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Company, "", strCustCompany, "" });
                }
                if (strCustName != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName, "" });
                }
                if (strCustID != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID, "" });
                }
                if (strCustAddress != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(string.Concat("Address: ", strCustAddress), 40, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len -= 40;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 40)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesH++;
                            len -= 40;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                if (strCustPhone != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Ph_, "", strCustPhone, "" });
                }
                if ((strCustCompany != "" || strCustName != "" ? true : strCustID != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                if (rpItem != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Repair_Item, " : ", rpItem), "", "", "" });
                }
                if (rpSL != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Serial, " # : ", rpSL), "", "", "" });
                }
                if ((rpItem != "" ? true : rpSL != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = this.FetchRPInvDetails(ParentID);
                double dblTempTotal = 0;
                int i = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    i++;
                    string strDescription = "";
                    string strDiscText = "";
                    string strDiscID = "0";
                    double dblDisc = 0;
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string tgininv = "";
                    int ipid = 0;
                    string strFeesID = "0";
                    string strFeesText = "";
                    string TService1 = "";
                    string strrpItemTag = "";
                    string strrpItemSLNO = "";
                    string dtrpPurchaseDate = "";
                    string dtrpDeliveryDate = "";
                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();
                    ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                    tgininv = dr["TaggedInInvoice"].ToString();
                    strSKU = dr["SKU"].ToString();
                    strDiscText = dr["DiscountText"].ToString();
                    strDiscID = dr["DiscountID"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblDisc : 0));
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();
                    strFeesID = dr["FeesID"].ToString();
                    strFeesText = dr["FeesText"].ToString();
                    TService1 = dr["ServiceType"].ToString();
                    strrpItemTag = dr["RepairItemTag"].ToString();
                    strrpItemSLNO = dr["RepairItemSLNO"].ToString();
                    if (dr["RepairItemPurchaseDate"].ToString() != "")
                    {
                        date = GeneralFunctions.fnDate(dr["RepairItemPurchaseDate"].ToString());
                        dtrpPurchaseDate = date.ToString("d");
                    }
                    if (dr["RepairItemDeliveryDate"].ToString() != "")
                    {
                        date = GeneralFunctions.fnDate(dr["RepairItemDeliveryDate"].ToString());
                        dtrpDeliveryDate = date.ToString("d");
                    }
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                    this.dtblstrm.Rows.Add(new object[] { sPD1, "", "", "OneColumn" });
                    if (sPD2.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD2, "", "", "OneColumn" });
                    }
                    if (sPD3.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD3, "", "", "OneColumn" });
                    }
                    if (strPType == "M")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "", "" });
                        if (strMV2 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "", "" });
                        }
                        if (strMV3 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "", "" });
                        }
                    }
                    if (strrpItemSLNO != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.SL, " # ", strrpItemSLNO), "", "", "" });
                    }
                    if (strrpItemTag != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tag, " # ", strrpItemTag), "", "", "" });
                    }
                    if (strDiscText != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strDiscText), "", "", "" });
                    }
                    if (OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y")
                    {
                        if (strFeesText != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strFeesText), "", "", "" });
                        }
                    }
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, this.GetFotmatProductValue(dblPrice, strDP)), this.GetFotmatDoubleValue(dblQty), this.GetFotmatDoubleValue(dblTotalPrice), "" });
                    if (strInvNotes != "")
                    {
                        string OrginalN = "";
                        this.ArrangeText(strInvNotes, 30, ref OrginalN);
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;
                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;
                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            string cutstr = CopyOrginalN.Substring(0, PlaceN);
                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len -= 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                            }
                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }
                        if (CopyOrginalN.Length > 30)
                        {
                            int len = CopyOrginalN.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesN++;
                                len -= 30;
                                if (CopyOrginalN != "")
                                {
                                    CopyOrginalN = CopyOrginalN.Substring(30, len);
                                }
                            }
                        }
                        if (NumberOfOccurancesN == 0)
                        {
                            NumberOfOccurancesN = 1;
                        }
                        else if (OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())
                        {
                            NumberOfOccurancesN++;
                        }
                        this.dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                    }
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                prndtblINV1.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                DataRowCollection rows2 = this.dtblstrm.Rows;
                object[] fotmatDoubleValue2 = new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Sub_Total), "", null, null };
                fotmatDoubleValue2[2] = this.GetFotmatDoubleValue((OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax));
                fotmatDoubleValue2[3] = "";
                rows2.Add(fotmatDoubleValue2);
                if (dblDiscount != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    string strDiscountCaption = OfflineRetailV2.Properties.Resources.Discount;
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strDiscountCaption), "", this.GetFotmatDoubleValue(dblDiscount), "" });
                }
                if (dblTax != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    if (dblTax1 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName1), "", this.GetFotmatDoubleValue(dblTax1), "" });
                    }
                    if (dblTax2 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName2), "", this.GetFotmatDoubleValue(dblTax2), "" });
                    }
                    if (dblTax3 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName3), "", this.GetFotmatDoubleValue(dblTax3), "" });
                    }
                }
                if ((dblFees != 0 || dblFeesTax != 0 || dblFeesCoupon != 0 || dblFeesCouponTax != 0 ? OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y" : false))
                {
                    DataTable dFees = this.FetchInvFees();
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    if (dblFees + dblFeesCoupon != 0)
                    {
                        if (dFees.Rows.Count == 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString()), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                        if (dFees.Rows.Count > 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                    }
                    if (dblFeesTax + dblFeesCouponTax != 0)
                    {
                        if (dFees.Rows.Count == 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString(), " ", OfflineRetailV2.Properties.Resources.Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                        if (dFees.Rows.Count > 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges_Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Total, "", this.GetFotmatDoubleValue(rpTotal), "B" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                DataTable dtbl2 = new DataTable();
                foreach (DataRow dr4 in this.FetchRepairParentHeader(ParentID).Rows)
                {
                    rpTotal = GeneralFunctions.fnDouble(dr4["RepairAmount"].ToString());
                    rpAdvance = GeneralFunctions.fnDouble(dr4["RepairAdvanceAmount"].ToString());
                    rpDue = GeneralFunctions.fnDouble(dr4["RepairDueAmount"].ToString());
                    rpProb = dr4["RepairProblem"].ToString();
                    rpDesc = dr4["RepairNotes"].ToString();
                }
                if (rpAdvance > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Security_Deposit, "", this.GetFotmatDoubleValue(rpAdvance), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Due, "", this.GetFotmatDoubleValue(rpDue), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                bool boolHATender = false;
                bool boolSCrdtTender = false;
                if (dblTotalSale > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tender, "", "", "" });
                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = this.FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;
                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender += dblAmount;
                        if (strTender == "Gift Certificate")
                        {
                            strTender = OfflineRetailV2.Properties.Resources.Gift_Cert;
                        }
                        if (strTender == "American Express")
                        {
                            strTender = OfflineRetailV2.Properties.Resources.American_Exp_;
                        }
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender), "", this.GetFotmatDoubleValue(dblAmount) });
                        if ((dr["Name"].ToString() == "Debit Card" ? true : dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = this.FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Cash_Back), "", this.GetFotmatDoubleValue(cashbk) });
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender, " ", OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblAmount + cashbk) });
                            }
                        }
                        if (dr["Name"].ToString() == "House Account")
                        {
                            boolHATender = true;
                        }
                        if (dr["Name"].ToString() == "Store Credit")
                        {
                            boolSCrdtTender = true;
                        }
                    }
                    prndtblINV2.Dispose();
                    if (rpDue - dblTempTender == 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    else
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Change, " "), "", string.Concat("(", this.GetFotmatDoubleValue(dblTempTender - rpDue), ")"), "" });
                    }
                }
                if (OfflineRetailV2.Data.Settings.POSShowGiftCertBalance == "Y")
                {
                    DataTable dtblGC = new DataTable();
                    dtblGC = this.FetchActiveGC(this.intInvNo);
                    if (dtblGC.Rows.Count > 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.GC_s__with_balance_as_on, " "), "", "", "" });
                        DataRowCollection dataRowCollection2 = this.dtblstrm.Rows;
                        object[] objArray2 = new object[4];
                        date = DateTime.Today.Date;
                        objArray2[0] = string.Concat(SP1, date.ToShortDateString());
                        objArray2[1] = "";
                        objArray2[2] = "";
                        objArray2[3] = "";
                        dataRowCollection2.Add(objArray2);
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        foreach (DataRow dr in dtblGC.Rows)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.GC, "#:", dr["GC"].ToString()), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }
                    dtblGC.Dispose();
                }
                DataTable dtblEBT = new DataTable();
                dtblEBT = this.FetchEBTBalance(this.intInvNo);
                if (dtblEBT.Rows.Count > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.EBT_Balance, " "), "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    foreach (DataRow dr in dtblEBT.Rows)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.EBT_Card, "#:", dr["CardNo"].ToString()), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                    }
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                dtblEBT.Dispose();
                int prmmgc = 0;
                POS obcc01mgc = new POS()
                {
                    Connection = SystemVariables.Conn
                };
                prmmgc = obcc01mgc.GetTranIDFromInvoiceID(this.intInvNo);
                DataTable ccdtbl11mgc = new DataTable();
                POS obcc11mgc = new POS()
                {
                    Connection = SystemVariables.Conn
                };
                ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);
                bool mgc = false;
                int mgcnt = 0;
                foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                {
                    if ((drmgc["CardType"].ToString() == "Mercury Gift Card" || drmgc["CardType"].ToString() == "Precidia Gift Card" || drmgc["CardType"].ToString() == "Datacap Gift Card" ? true : drmgc["CardType"].ToString() == "POSLink Gift Card"))
                    {
                        mgcnt++;
                        if (mgcnt == 1)
                        {
                            mgc = true;
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.GIft_Card, "", OfflineRetailV2.Properties.Resources.Balance });
                            this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                    }
                }
                if (mgc)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if ((!boolHATender ? false : OfflineRetailV2.Data.Settings.HouseAccountBalanceInReceipt == "Y"))
                {
                    POS obcc99 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(this.intInvNo, GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.House_Account_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (boolSCrdtTender)
                {
                    POS objscrtbal = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Store_Credit_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (this.blCardPayment)
                {
                    int prm = 0;
                    POS obcc01 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    prm = obcc01.GetTranIDFromInvoiceID(this.intInvNo);
                    DataTable ccdtbl11 = new DataTable();
                    POS obcc11 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    foreach (DataRow drcc in obcc11.FetchCardData(prm).Rows)
                    {
                        if ((drcc["CardType"].ToString() == "Credit" ? true : drcc["CardType"].ToString() == "Credit Card"))
                        {
                            this.strCardType = "Credit";
                        }
                        if ((drcc["CardType"].ToString() == "Debit" ? true : drcc["CardType"].ToString() == "Debit Card"))
                        {
                            this.strCardType = "Debit";
                        }
                        if (drcc["CardType"].ToString() == "Mercury Gift Card")
                        {
                            this.strCardType = "Mercury";
                        }
                        if (drcc["CardType"].ToString() == "Precidia Gift Card")
                        {
                            this.strCardType = "Precidia";
                        }
                        if (drcc["CardType"].ToString() == "Datacap Gift Card")
                        {
                            this.strCardType = "Datacap";
                        }
                        if (drcc["CardType"].ToString() == "POSLink Gift Card")
                        {
                            this.strCardType = "POSLink";
                        }
                        if (drcc["CardType"].ToString() == "EBT")
                        {
                            this.strCardType = "EBT";
                        }
                        this.strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                        this.strCardNum = drcc["RefCardAct"].ToString();
                        this.strCardNum = GeneralFunctions.GetLast(this.strCardNum, 4);
                        this.strCardLogo = drcc["RefCardLogo"].ToString();
                        this.strCardEntry = drcc["RefCardEntry"].ToString();
                        this.strApprovalNum = drcc["RefCardAuthID"].ToString();
                        this.strTranID = drcc["RefCardTranID"].ToString();
                        this.strApprovedAmt = drcc["RefCardAuthAmount"].ToString();
                        if (OfflineRetailV2.Data.Settings.POSCardPayment == "Y")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.REF, "#  :"), "", this.intInvNo.ToString() });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.ACT, "#  :"), "", this.strCardNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.CARD, "  :"), "", this.strCardLogo });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Credit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.CREDIT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Debit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.DEBIT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Mercury")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.MERCURY_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Precidia")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.PRECIDIA_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "EBT")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.EBT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (OfflineRetailV2.Data.Settings.AcceptTips == "Y")
                        {
                            if (OfflineRetailV2.Data.Settings.ShowTipsInReceipt == "Y")
                            {
                                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tip, "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Total, "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                            }
                        }
                        if (this.strCardType == "Credit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                            this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { "X", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                            this.dtblstrm.Rows.Add(new object[] { "", string.Concat(" ", OfflineRetailV2.Properties.Resources.S_I_G_N_A_T_U_R_E, " "), "" });
                        }
                        if (this.strCardType == "Debit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.PIN_USED, "" });
                            this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                        }
                    }
                }
                if (rpProb != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Problem, " :"), "", "" });
                    string OrginalD = "";
                    this.ArrangeText(rpProb, 30, ref OrginalD);
                    char FindD = '\n';
                    int NumberOfOccurancesD = 0;
                    string CopyOrginalD = string.Copy(OrginalD);
                    int PlaceD = 0;
                    NumberOfOccurancesD = 0;
                    PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                    while (PlaceD != -1)
                    {
                        string cutstr = CopyOrginalD.Substring(0, PlaceD);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesD++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                        PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                        NumberOfOccurancesD++;
                    }
                    if (CopyOrginalD.Length > 30)
                    {
                        int len = CopyOrginalD.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesD++;
                            len -= 30;
                            if (CopyOrginalD != "")
                            {
                                CopyOrginalD = CopyOrginalD.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesD == 0)
                    {
                        NumberOfOccurancesD = 1;
                    }
                    else if (OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())
                    {
                        NumberOfOccurancesD++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { rpProb, "", "", NumberOfOccurancesD.ToString() });
                }
                if (rpDesc != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "Repair :", "", "", "" });
                    string OrginalR = "";
                    this.ArrangeText(rpDesc, 30, ref OrginalR);
                    char FindR = '\n';
                    int NumberOfOccurancesR = 0;
                    string CopyOrginalR = string.Copy(OrginalR);
                    int PlaceR = 0;
                    NumberOfOccurancesR = 0;
                    PlaceR = CopyOrginalR.IndexOf(FindR.ToString());
                    while (PlaceR != -1)
                    {
                        string cutstr = CopyOrginalR.Substring(0, PlaceR);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesR++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalR = CopyOrginalR.Substring(PlaceR + 1);
                        PlaceR = CopyOrginalR.IndexOf(FindR.ToString());
                        NumberOfOccurancesR++;
                    }
                    if (CopyOrginalR.Length > 30)
                    {
                        int len = CopyOrginalR.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesR++;
                            len -= 30;
                            if (CopyOrginalR != "")
                            {
                                CopyOrginalR = CopyOrginalR.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesR == 0)
                    {
                        NumberOfOccurancesR = 1;
                    }
                    else if (OrginalR.Substring(0, OrginalR.Length - 2) != FindR.ToString())
                    {
                        NumberOfOccurancesR++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { rpDesc, "", "", NumberOfOccurancesR.ToString() });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "X", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                this.dtblstrm.Rows.Add(new object[] { "", string.Concat(" ", OfflineRetailV2.Properties.Resources.S_I_G_N_A_T_U_R_E, " "), "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if (!(OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != "") || OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == null)
                {
                    flag2 = (OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() != null);
                }
                else
                {
                    flag2 = true;
                }
                if (flag2)
                {
                    string MText = "";
                    if ((OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != null))
                    {
                        MText = string.Concat(OfflineRetailV2.Properties.Resources.CUSTOMER_AGREEMENT_, "\n", OfflineRetailV2.Data.Settings.ReceiptFooter.Trim());
                    }
                    if ((OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() != null))
                    {
                        MText = (MText != "" ? string.Concat(new string[] { MText, "\n\n", OfflineRetailV2.Properties.Resources.REPAIR_DISCLAIMER_, "\n", OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() }) : string.Concat(OfflineRetailV2.Properties.Resources.REPAIR_DISCLAIMER_, "\n", OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim()));
                    }
                    string OrginalF = "";
                    this.ArrangeText(MText, 40, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesF++;
                                len -= 40;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 40)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesF++;
                            len -= 40;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { MText, "", "", NumberOfOccurancesF.ToString() });
                }
                if (this.blCardPayment)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.CARDHOLDER_COPY, "" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                this.intPageCounter++;
            }
            if (this.strPrintType == "Invoice")
            {
                dummyTest = "";
                string SP1 = new string(' ', 3);
                string SP2 = "";
                string SP3 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.PrintTrainingMode == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", string.Concat(" ", OfflineRetailV2.Properties.Resources.Training, " "), "", "B" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }
                this.GetRecieptHeader();
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";
                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblCoupon = 0;
                double dblTotalSale = 0;
                double dblFees = 0;
                double dblFeesTax = 0;
                double dblFeesCoupon = 0;
                double dblFeesCouponTax = 0;
                double dblRentalSecurityDeposit = 0;
                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                string serviceT = "";
                string strDTaxName = "";
                double dblDTax = 0;
                int CustomerOrderRef = 0;
                string strCustDOB = "";
                string strCustAddress = "";
                prndtblINV = this.FetchInvHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                    dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                    dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                    dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                    dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());
                    serviceT = dr["ServiceType"].ToString();
                    strDTaxName = dr["DTaxName"].ToString();
                    dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());
                    CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());
                    strCustDOB = dr["CustomerDOB"].ToString();
                }
                prndtblINV.Dispose();
                if (CustomerOrderRef > 0)
                {
                    string dt1 = "";
                    string dt2 = "";
                    this.GetCustomerOrderRef(CustomerOrderRef, ref dt1, ref dt2);
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(dummyTest, OfflineRetailV2.Properties.Resources.Ref__Order, "  : "), "", CustomerOrderRef.ToString(), "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Order_Date), "", dt1, "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Pickup_Date), "", dt2, "" });
                }
                this.intWO = this.FetchWorkorderNo();
                if (this.intWO > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Work_Order_Number, "", this.intWO.ToString(), "" });
                    DataRowCollection rows3 = this.dtblstrm.Rows;
                    object[] str = new object[] { OfflineRetailV2.Properties.Resources.Date, "", null, null };
                    date = GeneralFunctions.fnDate(this.FetchWorkorderDate());
                    str[2] = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    str[3] = "";
                    rows3.Add(str);
                }
                if (serviceT == "Rent")
                {
                    if (this.blIsRentIssued)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", OfflineRetailV2.Properties.Resources.Rent___Issue, "" });
                    }
                    if (this.blIsRentReturned)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", OfflineRetailV2.Properties.Resources.Rent___Return, "" });
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Receipt_Number, "", this.intInvNo.ToString(), "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                if (strCustCompany != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(dummyTest, OfflineRetailV2.Properties.Resources.Company), "", strCustCompany, "" });
                }
                if (strCustName != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName, "" });
                }
                if (strCustID != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID, "" });
                }
                if (strCustAddress != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(string.Concat("Address: ", strCustAddress), 40, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len -= 40;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 40)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesH++;
                            len -= 40;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                if (strCustDOB != "")
                {
                    DataRowCollection dataRowCollection3 = this.dtblstrm.Rows;
                    object[] dateOfBirth = new object[] { OfflineRetailV2.Properties.Resources.Date_of_Birth, "", null, null };
                    date = GeneralFunctions.fnDate(strCustDOB);
                    dateOfBirth[2] = date.ToString(SystemVariables.DateFormat);
                    dateOfBirth[3] = "";
                    dataRowCollection3.Add(dateOfBirth);
                }
                if ((strCustCompany != "" || strCustName != "" || strCustID != "" ? true : strCustDOB != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Unit_Price, OfflineRetailV2.Properties.Resources.Net_Wt_Ct, OfflineRetailV2.Properties.Resources.Total_Price, "" });
                this.dtblstrm.Rows.Add(new object[] { "xxxx", "xxxx", "xxxx", "" });
                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = this.FetchInvDetails(dblTotalSale);
                double dblTempTotal = 0;
                int i = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    i++;
                    string strDescription = "";
                    string strDiscText = "";
                    string strFeesText = "";
                    string strFeesID = "0";
                    string strDiscID = "0";
                    double dblDisc = 0;
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string tgininv = "";
                    int ipid = 0;
                    string TService1 = "";
                    string strRentType = "";
                    double dblRentDuration = 1;
                    string dtRentEffectiveFrom = "";
                    string iQtyDecimals = "";
                    int SalePriceID = 0;
                    int BuyNGetFreeHeader = 0;
                    string BuyNGetFreeCategory = "";
                    string BuyNGetFreeCaption = "";
                    string PUOM = "";
                    PUOM = dr["UOM"].ToString();
                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();
                    ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                    tgininv = dr["TaggedInInvoice"].ToString();
                    strSKU = dr["SKU"].ToString();
                    strDiscText = dr["DiscountText"].ToString();
                    strDiscID = dr["DiscountID"].ToString();
                    strFeesID = dr["FeesID"].ToString();
                    strFeesText = dr["FeesText"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    iQtyDecimals = dr["QtyDecimal"].ToString();
                    BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                    BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                    BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();
                    if (strPType == "O")
                    {
                        dblTotalPrice = -dblTotalPrice;
                    }
                    dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblDisc : 0));
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();
                    TService1 = dr["ServiceType"].ToString();
                    strRentType = dr["RentType"].ToString();
                    dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());
                    SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                    int rnt = 0;
                    string rntvl = (int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : this.GetFotmatDoubleValue(dblRentDuration));
                    string rentdisplay = "";
                    if (TService1 == "Rent")
                    {
                        if (strRentType == "MI")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.min_ });
                        }
                        if (strRentType == "HR")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.hr_ });
                        }
                        if (strRentType == "HD")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.half_day_s_ });
                        }
                        if (strRentType == "DY")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.day_s_ });
                        }
                        if (strRentType == "WK")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.week_s_ });
                        }
                        if (strRentType == "MN")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.month_s_ });
                        }
                        date = GeneralFunctions.fnDate(dr["RentDuration"].ToString());
                        dtRentEffectiveFrom = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    }
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    if (BuyNGetFreeCategory == "B")
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", string.Concat("** ", BuyNGetFreeCaption, " **"), "", "" });
                    }
                    this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                    this.dtblstrm.Rows.Add(new object[] { sPD1, "", "", "OneColumn" });
                    if (sPD2.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD2, "", "", "OneColumn" });
                    }
                    if (sPD3.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD3, "", "", "OneColumn" });
                    }
                    if (strPType == "M")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "", "" });
                        if (strMV2 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "", "" });
                        }
                        if (strMV3 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "", "" });
                        }
                    }
                    if (TService1 == "Sales")
                    {
                        if ((strPType == "P" || strPType == "M" || strPType == "K" || strPType == "U" || strPType == "W" || strPType == "E" || strPType == "F" || strPType == "S" ? true : strPType == "T"))
                        {
                            if (SalePriceID == 0)
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblNormalPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblNormalPrice - dblPrice, strDP)), "" });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblUOMPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblUOMPrice - dblPrice, strDP)), "" });
                                    }
                                }
                            }
                            if ((SalePriceID <= 0 ? false : OfflineRetailV2.Data.Settings.ShowSaleSaveInReceipt == "Y"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblNormalPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.You_Save_, " ", this.GetFotmatProductValue(dblNormalPrice - dblPrice, strDP)), "" });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblUOMPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.You_Save_, " ", this.GetFotmatProductValue(dblUOMPrice - dblPrice, strDP)), "" });
                                    }
                                }
                            }
                            if (strPType == "T")
                            {
                                if (tgininv == "Y")
                                {
                                    Product opdt = new Product()
                                    {
                                        Connection = new SqlConnection(SystemVariables.ConnectionString)
                                    };
                                    DataTable dtemp = opdt.FetchTaggedData(ipid);
                                    foreach (DataRow tgdr in dtemp.Rows)
                                    {
                                        double tgQty = 0;
                                        string tgName = "";
                                        tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                        tgName = tgdr["ItemName"].ToString();
                                        tgQty *= dblQty;
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(tgName, " - ", this.GetFotmatDoubleValue(tgQty)), "", "", "" });
                                    }
                                    dtemp.Dispose();
                                }
                            }
                        }
                    }
                    if (!this.blIsRentReturned)
                    {
                        if (strDiscText != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strDiscText), "", "", "" });
                        }
                        if (OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strFeesText), "", "", "" });
                            }
                        }
                    }
                    if ((TService1 != "Rent" ? false : this.blIsRentIssued))
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, rentdisplay), "", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    if (this.blIsRentReturned)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", this.GetFotmatDoubleValue(dblQty), "" });
                    }
                    else
                    {
                        if (strPType != "W")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString())), this.GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), this.GetFotmatDoubleValue(dblTotalPrice), "" });
                        }
                        else
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), "/", PUOM), this.GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), this.GetFotmatDoubleValue(dblTotalPrice), "" });
                        }
                        if ((OfflineRetailV2.Data.Settings.ScaleDevice != "(None)" ? false : strPType == "W"))
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Manual_Weight, "", "", "s" });
                        }
                    }
                    if (strInvNotes != "")
                    {
                        string OrginalN = "";
                        this.ArrangeText(strInvNotes, 30, ref OrginalN);
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;
                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;
                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            string cutstr = CopyOrginalN.Substring(0, PlaceN);
                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len -= 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                            }
                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }
                        if (CopyOrginalN.Length > 30)
                        {
                            int len = CopyOrginalN.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesN++;
                                len -= 30;
                                if (CopyOrginalN != "")
                                {
                                    CopyOrginalN = CopyOrginalN.Substring(30, len);
                                }
                            }
                        }
                        if (NumberOfOccurancesN == 0)
                        {
                            NumberOfOccurancesN = 1;
                        }
                        else if (OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())
                        {
                            NumberOfOccurancesN++;
                        }
                        this.dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                    }
                }
                prndtblINV1.Dispose();
                if (!this.blIsRentReturned)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    DataRowCollection rows4 = this.dtblstrm.Rows;
                    object[] fotmatDoubleValue3 = new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Sub_Total), "", null, null };
                    fotmatDoubleValue3[2] = this.GetFotmatDoubleValue((OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax));
                    fotmatDoubleValue3[3] = "";
                    rows4.Add(fotmatDoubleValue3);
                    if (dblDiscount != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        string strDiscountCaption = OfflineRetailV2.Properties.Resources.Discount;
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strDiscountCaption), "", this.GetFotmatDoubleValue(dblDiscount), "" });
                    }
                    if (dblTax != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        if (dblTax1 != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName1), "", this.GetFotmatDoubleValue(dblTax1), "" });
                        }
                        if (dblTax2 != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName2), "", this.GetFotmatDoubleValue(dblTax2), "" });
                        }
                        if (dblTax3 != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName3), "", this.GetFotmatDoubleValue(dblTax3), "" });
                        }
                    }
                    if (dblDTax != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Dest__Tax, ": ", strDTaxName), "", this.GetFotmatDoubleValue(dblDTax), "" });
                    }
                    if ((dblFees != 0 || dblFeesTax != 0 || dblFeesCoupon != 0 || dblFeesCouponTax != 0 ? OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y" : false))
                    {
                        DataTable dFees = this.FetchInvFees();
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        if (dblFees + dblFeesCoupon != 0)
                        {
                            if (dFees.Rows.Count == 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString()), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            }
                            if (dFees.Rows.Count > 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            }
                        }
                        if (dblFeesTax + dblFeesCouponTax != 0)
                        {
                            if (dFees.Rows.Count == 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString(), " ", OfflineRetailV2.Properties.Resources.Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            }
                            if (dFees.Rows.Count > 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges_Tax, ":"), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            }
                        }
                    }
                    DataTable dtblCpn = new DataTable();
                    dtblCpn = this.FetchInvCoupon();
                    if (dblCoupon != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Discount_on_Ticket, "", this.GetFotmatDoubleValue(dblCoupon), "" });
                    }
                    if (dtblCpn.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtblCpn.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;
                            strTender = dr["Name"].ToString();
                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            this.SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD1), "", "", "" });
                            if (sPD2.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD2), "", "", "" });
                            }
                            if (sPD3.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD3), "", "", "" });
                            }
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            this.dtblstrm.Rows.Add(new object[] { "", "", this.GetFotmatDoubleValue(dblAmount), "" });
                        }
                    }
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                }
                if (serviceT == "Rent")
                {
                    if (dblRentalSecurityDeposit > 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Security_Deposit, "", this.GetFotmatDoubleValue(dblRentalSecurityDeposit), "" });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                }
                if (serviceT == "Rent")
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblTotalSale + dblRentalSecurityDeposit), "B" });
                }
                else
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblTotalSale), "B" });
                }
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tender, "", "", "" });
                bool boolHATender = false;
                bool boolSCrdtTender = false;
                DataTable prndtblINV2 = new DataTable();
                prndtblINV2 = this.FetchInvTender();
                double dblTempTender = 0;
                foreach (DataRow dr in prndtblINV2.Rows)
                {
                    string strTender = "";
                    double dblAmount = 0;
                    strTender = dr["DisplayAs"].ToString();
                    dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                    dblTempTender += dblAmount;
                    if (strTender == "Gift Certificate")
                    {
                        strTender = OfflineRetailV2.Properties.Resources.Gift_Cert;
                    }
                    if (strTender == "American Express")
                    {
                        strTender = OfflineRetailV2.Properties.Resources.American_Exp_;
                    }
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender), "", this.GetFotmatDoubleValue(dblAmount) });
                    if ((dr["Name"].ToString() == "Debit Card" ? true : dr["Name"].ToString() == "EBT Cash"))
                    {
                        double cashbk = 0;
                        cashbk = this.FetchCashBack(dblAmount);
                        if (cashbk != 0)
                        {
                            dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Cash_Back), "", this.GetFotmatDoubleValue(cashbk) });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender, " ", OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblAmount + cashbk) });
                        }
                    }
                    if (dr["Name"].ToString() == "House Account")
                    {
                        boolHATender = true;
                    }
                    if (dr["Name"].ToString() == "Store Credit")
                    {
                        boolSCrdtTender = true;
                    }
                }
                prndtblINV2.Dispose();
                if (!this.blIsRentIssued)
                {
                    if (dblTotalSale - dblTempTender == 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    else
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Change, " "), "", string.Concat("(", this.GetFotmatDoubleValue(dblTempTender - dblTotalSale), ")"), "" });
                    }
                }
                else if (dblTotalSale + dblRentalSecurityDeposit - dblTempTender == 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                else
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Change, " "), "", string.Concat("(", this.GetFotmatDoubleValue(dblTempTender + dblRentalSecurityDeposit - dblTotalSale), ")"), "" });
                }
                if (OfflineRetailV2.Data.Settings.POSShowGiftCertBalance == "Y")
                {
                    DataTable dtblGC = new DataTable();
                    dtblGC = this.FetchActiveGC(this.intInvNo);
                    if (dtblGC.Rows.Count > 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.GC_s__with_balance_as_on, " "), "", "", "" });
                        DataRowCollection dataRowCollection4 = this.dtblstrm.Rows;
                        object[] objArray3 = new object[4];
                        date = DateTime.Today.Date;
                        objArray3[0] = string.Concat(SP1, date.ToShortDateString());
                        objArray3[1] = "";
                        objArray3[2] = "";
                        objArray3[3] = "";
                        dataRowCollection4.Add(objArray3);
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        foreach (DataRow dr in dtblGC.Rows)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.GC, "#:", dr["GC"].ToString()), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }
                    dtblGC.Dispose();
                }
                DataTable dtblEBT = new DataTable();
                dtblEBT = this.FetchEBTBalance(this.intInvNo);
                if (dtblEBT.Rows.Count > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.EBT_Balance, " "), "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    foreach (DataRow dr in dtblEBT.Rows)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.EBT_Card, "#:", dr["CardNo"].ToString()), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                    }
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                dtblEBT.Dispose();
                int prmmgc = 0;
                POS obcc01mgc = new POS()
                {
                    Connection = SystemVariables.Conn
                };
                prmmgc = obcc01mgc.GetTranIDFromInvoiceID(this.intInvNo);
                DataTable ccdtbl11mgc = new DataTable();
                POS obcc11mgc = new POS()
                {
                    Connection = SystemVariables.Conn
                };
                ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);
                bool mgc = false;
                int mgcnt = 0;
                foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                {
                    if ((drmgc["CardType"].ToString() == "Mercury Gift Card" || drmgc["CardType"].ToString() == "Precidia Gift Card" || drmgc["CardType"].ToString() == "Datacap Gift Card" ? true : drmgc["CardType"].ToString() == "POSLink Gift Card"))
                    {
                        mgcnt++;
                        if (mgcnt == 1)
                        {
                            mgc = true;
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.GIft_Card, "", OfflineRetailV2.Properties.Resources.Balance });
                            this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                    }
                }
                if (mgc)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                int prmebt = 0;
                POS obcc01mgc33 = new POS()
                {
                    Connection = SystemVariables.Conn
                };
                prmebt = obcc01mgc33.GetTranIDFromInvoiceID(this.intInvNo);
                DataTable ccdtbl11mgc3 = new DataTable();
                POS obcc11mgc55 = new POS()
                {
                    Connection = SystemVariables.Conn
                };
                ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);
                bool mgc4 = false;
                int mgcnt4 = 0;
                foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                {
                    if (drmgc["CardType"].ToString() == "Food Stamps")
                    {
                        mgcnt4++;
                        if (mgcnt4 == 1)
                        {
                            mgc4 = true;
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.EBT_Card, "", OfflineRetailV2.Properties.Resources.Balance });
                            this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                    }
                }
                if (mgc4)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if ((!boolHATender ? false : OfflineRetailV2.Data.Settings.HouseAccountBalanceInReceipt == "Y"))
                {
                    POS obcc99 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(this.intInvNo, GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.House_Account_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (boolSCrdtTender)
                {
                    POS objscrtbal = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Store_Credit_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (this.blCardPayment)
                {
                    int prm = 0;
                    POS obcc01 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    prm = obcc01.GetTranIDFromInvoiceID(this.intInvNo);
                    DataTable ccdtbl11 = new DataTable();
                    POS obcc11 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    foreach (DataRow drcc in obcc11.FetchCardData(prm).Rows)
                    {
                        if ((drcc["CardType"].ToString() == "Credit" ? true : drcc["CardType"].ToString() == "Credit Card"))
                        {
                            this.strCardType = "Credit";
                        }
                        if ((drcc["CardType"].ToString() == "Debit" ? true : drcc["CardType"].ToString() == "Debit Card"))
                        {
                            this.strCardType = "Debit";
                        }
                        if (drcc["CardType"].ToString() == "Mercury Gift Card")
                        {
                            this.strCardType = "Mercury";
                        }
                        if (drcc["CardType"].ToString() == "EBT")
                        {
                            this.strCardType = "EBT";
                        }
                        this.strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                        this.strCardNum = drcc["RefCardAct"].ToString();
                        this.strCardNum = GeneralFunctions.GetLast(this.strCardNum, 4);
                        this.strCardLogo = drcc["RefCardLogo"].ToString();
                        this.strCardEntry = drcc["RefCardEntry"].ToString();
                        this.strApprovalNum = drcc["RefCardAuthID"].ToString();
                        this.strTranID = drcc["RefCardTranID"].ToString();
                        this.strApprovedAmt = drcc["RefCardAuthAmount"].ToString();
                        if (OfflineRetailV2.Data.Settings.POSCardPayment == "Y")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.REF, "#  :"), "", this.intInvNo.ToString() });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.ACT, "#  :"), "", this.strCardNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.CARD, "  :"), "", this.strCardLogo });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Credit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.CREDIT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Debit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.DEBIT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Mercury")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.MERCURY_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Precidia")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.PRECIDIA_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "EBT")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.EBT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (OfflineRetailV2.Data.Settings.AcceptTips == "Y")
                        {
                            if (OfflineRetailV2.Data.Settings.ShowTipsInReceipt == "Y")
                            {
                                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tip, "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Total, "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                            }
                        }
                        if (this.strCardType == "Credit")
                        {
                            if (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3 && GeneralFunctions.fnDouble(this.strApprovedAmt) >= OfflineRetailV2.Data.Settings.PrecidiaSignAmount || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5 && GeneralFunctions.fnDouble(this.strApprovedAmt) >= OfflineRetailV2.Data.Settings.DatacapSignAmount)
                            {
                                flag1 = true;
                            }
                            else
                            {
                                flag1 = (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) != 5 ? false : this.blDatacapManualTendering);
                            }
                            if (flag1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                this.dtblstrm.Rows.Add(new object[] { "", string.Concat(" ", OfflineRetailV2.Properties.Resources.S_I_G_N_A_T_U_R_E, " "), "" });
                            }
                        }
                        if (this.strCardType == "Debit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.PIN_USED, "" });
                            this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                        }
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if ((OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != null))
                {
                    string OrginalF = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Data.Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                if (this.blCardPayment)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.CARDHOLDER_COPY, "" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                this.intPageCounter++;
            }
            if (this.strPrintType == "Preview Invoice_Orig_Before_Change")
            {
                string SP1 = new string(' ', 3);
                string SP2 = "";
                string SP3 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.PrintTrainingMode == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", string.Concat(" ", OfflineRetailV2.Properties.Resources.Training, " "), "", "B" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }

                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }
                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                string invNumber = "";
                int intStoreID = 0;
                string stermnl = "";
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";
                double dblTax = 0;
                double dblDiscount = 0;
                double dblCoupon = 0;
                double dblTotalSale = 0;
                double dblFees = 0;
                double dblFeesTax = 0;
                double dblFeesCoupon = 0;
                double dblFeesCouponTax = 0;
                double dblRentalSecurityDeposit = 0;
                string strDiscountReason = "";
                string serviceT = "";
                string strDTaxName = "";
                double dblDTax = 0;
                string strCustDOB = "";
                string strCustAddress = "";
                prndtblINV = this.dtblPreviewInvoiceHeader;
                date = GeneralFunctions.fnDate(DateTime.Now);
                strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    invNumber = dr["InvoiceNo"].ToString();
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    strDiscountReason = dr["DiscountReason"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                    dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                    dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                    dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                    dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());
                    serviceT = dr["ServiceType"].ToString();
                }
                prndtblINV.Dispose();
                if (serviceT == "Rent")
                {
                    if (this.blIsRentIssued)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", OfflineRetailV2.Properties.Resources.Rent___Issue, "" });
                    }
                    if (this.blIsRentReturned)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", OfflineRetailV2.Properties.Resources.Rent___Return, "" });
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Receipt_Number, "", invNumber.ToString(), "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                if (strCustCompany != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Company, "", strCustCompany, "" });
                }
                if (strCustName != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName, "" });
                }
                if (strCustID != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID, "" });
                }
                if (strCustAddress != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(string.Concat("Address: ", strCustAddress), 40, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len -= 40;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 40)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesH++;
                            len -= 40;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                if ((strCustCompany != "" || strCustName != "" || strCustID != "" ? true : strCustDOB != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Unit_Price, OfflineRetailV2.Properties.Resources.Net_Wt_Ct, OfflineRetailV2.Properties.Resources.Total_Price, "" });
                this.dtblstrm.Rows.Add(new object[] { "xxxx", "xxxx", "xxxx", "" });
                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = this.dtblPreviewInvoiceDetails;
                double dblTempTotal = 0;
                int i = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    i++;
                    string strDescription = "";
                    string strDiscText = "";
                    string strFeesText = "";
                    string strFeesID = "0";
                    string strDiscID = "0";
                    double dblDisc = 0;
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string TService1 = "";
                    string strRentType = "";
                    double dblRentDuration = 1;
                    string dtRentEffectiveFrom = "";
                    string iQtyDecimals = "";
                    int SalePriceID = 0;
                    int BuyNGetFreeHeader = 0;
                    string BuyNGetFreeCategory = "";
                    string BuyNGetFreeCaption = "";
                    string PUOM = "";
                    PUOM = dr["UOM"].ToString();
                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();
                    strSKU = dr["SKU"].ToString();
                    strDiscText = dr["DiscountText"].ToString();
                    strDiscID = dr["DiscountID"].ToString();
                    strFeesID = dr["FeesID"].ToString();
                    strFeesText = dr["FeesText"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                    BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                    BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();
                    if (strPType == "O")
                    {
                        dblTotalPrice = -dblTotalPrice;
                    }
                    dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblDisc : 0));
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();
                    TService1 = dr["ServiceType"].ToString();
                    dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());
                    SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                    int rnt = 0;
                    string rntvl = (int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : this.GetFotmatDoubleValue(dblRentDuration));
                    string rentdisplay = "";
                    if (TService1 == "Rent")
                    {
                        if (strRentType == "MI")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.min_ });
                        }
                        if (strRentType == "HR")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.hr_ });
                        }
                        if (strRentType == "HD")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.half_day_s_ });
                        }
                        if (strRentType == "DY")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.day_s_ });
                        }
                        if (strRentType == "WK")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.week_s_ });
                        }
                        if (strRentType == "MN")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.month_s_ });
                        }
                        date = GeneralFunctions.fnDate(dr["RentDuration"].ToString());
                        dtRentEffectiveFrom = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    }
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    if (BuyNGetFreeCategory == "B")
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", string.Concat("** ", BuyNGetFreeCaption, " **"), "", "" });
                    }
                    this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                    this.dtblstrm.Rows.Add(new object[] { sPD1, "", "", "" });
                    if (sPD2.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD2, "", "", "" });
                    }
                    if (sPD3.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD3, "", "", "" });
                    }
                    if (strPType == "M")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "", "" });
                        if (strMV2 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "", "" });
                        }
                        if (strMV3 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "", "" });
                        }
                    }
                    if (TService1 == "Sales")
                    {
                        if ((strPType == "P" || strPType == "M" || strPType == "K" || strPType == "U" || strPType == "W" || strPType == "E" || strPType == "F" || strPType == "S" ? true : strPType == "T"))
                        {
                            if (SalePriceID == 0)
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblNormalPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblNormalPrice - dblPrice, strDP)), "" });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblUOMPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblUOMPrice - dblPrice, strDP)), "" });
                                    }
                                }
                            }
                            if ((SalePriceID <= 0 ? false : OfflineRetailV2.Data.Settings.ShowSaleSaveInReceipt == "Y"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblNormalPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.You_Save_, " ", this.GetFotmatProductValue(dblNormalPrice - dblPrice, strDP)), "" });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblUOMPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.You_Save_, " ", this.GetFotmatProductValue(dblUOMPrice - dblPrice, strDP)), "" });
                                    }
                                }
                            }
                        }
                    }
                    if (!this.blIsRentReturned)
                    {
                        if (strDiscText != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strDiscText), "", "", "" });
                        }
                        if (OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strFeesText), "", "", "" });
                            }
                        }
                    }
                    if ((TService1 != "Rent" ? false : this.blIsRentIssued))
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, rentdisplay), "", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    if (this.blIsRentReturned)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", this.GetFotmatDoubleValue(dblQty), "" });
                    }
                    else
                    {
                        if (strPType != "W")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString())), this.GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), this.GetFotmatDoubleValue(dblTotalPrice), "" });
                        }
                        else
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), "/", PUOM), this.GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), this.GetFotmatDoubleValue(dblTotalPrice), "" });
                        }
                        if ((OfflineRetailV2.Data.Settings.ScaleDevice != "(None)" ? false : strPType == "W"))
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Manual_Weight, "", "", "s" });
                        }
                    }
                    if (strInvNotes != "")
                    {
                        string OrginalN = "";
                        this.ArrangeText(strInvNotes, 30, ref OrginalN);
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;
                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;
                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            string cutstr = CopyOrginalN.Substring(0, PlaceN);
                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len -= 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                            }
                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }
                        if (CopyOrginalN.Length > 30)
                        {
                            int len = CopyOrginalN.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesN++;
                                len -= 30;
                                if (CopyOrginalN != "")
                                {
                                    CopyOrginalN = CopyOrginalN.Substring(30, len);
                                }
                            }
                        }
                        if (NumberOfOccurancesN == 0)
                        {
                            NumberOfOccurancesN = 1;
                        }
                        else if (OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())
                        {
                            NumberOfOccurancesN++;
                        }
                        this.dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                    }
                }
                prndtblINV1.Dispose();
                if (!this.blIsRentReturned)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    DataRowCollection rows5 = this.dtblstrm.Rows;
                    object[] fotmatDoubleValue4 = new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Sub_Total), "", null, null };
                    fotmatDoubleValue4[2] = this.GetFotmatDoubleValue((OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax));
                    fotmatDoubleValue4[3] = "";
                    rows5.Add(fotmatDoubleValue4);
                    if (dblDiscount != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        string strDiscountCaption = OfflineRetailV2.Properties.Resources.Discount;
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strDiscountCaption), "", this.GetFotmatDoubleValue(dblDiscount), "" });
                    }
                    if (dblTax != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        foreach (DataRow drTx in this.dtblPreviewTaxDetails.Rows)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", drTx["Tax"].ToString().Substring(0, drTx["Tax"].ToString().LastIndexOf("("))), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(drTx["Amount"].ToString())), "" });
                        }
                    }
                    if (dblDTax != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Dest__Tax, ": ", strDTaxName), "", this.GetFotmatDoubleValue(dblDTax), "" });
                    }
                    if ((dblFees != 0 || dblFeesTax != 0 || dblFeesCoupon != 0 || dblFeesCouponTax != 0 ? OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y" : false))
                    {
                        DataTable dFees = this.FetchInvFees();
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        if (dblFees + dblFeesCoupon != 0)
                        {
                            if (dFees.Rows.Count == 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString()), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            }
                            if (dFees.Rows.Count > 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            }
                        }
                        if (dblFeesTax + dblFeesCouponTax != 0)
                        {
                            if (dFees.Rows.Count == 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString(), " ", OfflineRetailV2.Properties.Resources.Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            }
                            if (dFees.Rows.Count > 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges_Tax, ":"), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            }
                        }
                    }
                    DataTable dtblCpn = new DataTable();
                    if (dblCoupon != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Discount_on_Ticket, "", this.GetFotmatDoubleValue(dblCoupon), "" });
                    }
                    if (dtblCpn.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtblCpn.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;
                            strTender = dr["Name"].ToString();
                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            this.SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD1), "", "", "" });
                            if (sPD2.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD2), "", "", "" });
                            }
                            if (sPD3.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD3), "", "", "" });
                            }
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            this.dtblstrm.Rows.Add(new object[] { "", "", this.GetFotmatDoubleValue(dblAmount), "" });
                        }
                    }
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                }
                if (serviceT == "Rent")
                {
                    if (dblRentalSecurityDeposit > 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Security_Deposit, "", this.GetFotmatDoubleValue(dblRentalSecurityDeposit), "" });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                }
                if (serviceT == "Rent")
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblTotalSale + dblRentalSecurityDeposit), "B" });
                }
                else
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblTotalSale), "B" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if ((OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != null))
                {
                    string OrginalF = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Data.Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                this.intPageCounter++;
            }
            if (this.strPrintType == "Preview Invoice")
            {
                dummyTest = "";
                string SP1 = new string(' ', 3);
                string SP2 = "";
                string SP3 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.PrintTrainingMode == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", string.Concat(" ", OfflineRetailV2.Properties.Resources.Training, " "), "", "B" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }
                this.GetRecieptHeader();
                DataTable prndtblINV = new DataTable();
                string invNumber = "";
                int intStoreID = 0;
                string stermnl = "";
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";
                double dblTax = 0;
                double dblDiscount = 0;
                double dblCoupon = 0;
                double dblTotalSale = 0;
                double dblFees = 0;
                double dblFeesTax = 0;
                double dblFeesCoupon = 0;
                double dblFeesCouponTax = 0;
                double dblRentalSecurityDeposit = 0;
                string strDiscountReason = "";
                string serviceT = "";
                string strDTaxName = "";
                double dblDTax = 0;
                string strCustDOB = "";
                string strCustAddress = "";
                prndtblINV = this.dtblPreviewInvoiceHeader;
                date = GeneralFunctions.fnDate(DateTime.Now);
                strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    invNumber = dr["InvoiceNo"].ToString();
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    strDiscountReason = dr["DiscountReason"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                    dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                    dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                    dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                    dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());
                    serviceT = dr["ServiceType"].ToString();
                }
                prndtblINV.Dispose();
                if (serviceT == "Rent")
                {
                    if (this.blIsRentIssued)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", OfflineRetailV2.Properties.Resources.Rent___Issue, "" });
                    }
                    if (this.blIsRentReturned)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", OfflineRetailV2.Properties.Resources.Rent___Return, "" });
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(dummyTest, OfflineRetailV2.Properties.Resources.Receipt_Number), "", invNumber.ToString(), "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                if (strCustCompany != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Company, "", strCustCompany, "" });
                }
                if (strCustName != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName, "" });
                }
                if (strCustID != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID, "" });
                }
                if (strCustAddress != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(string.Concat(dummyTest, "Address: ", strCustAddress), 40, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len -= 40;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 40)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesH++;
                            len -= 40;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                if ((strCustCompany != "" || strCustName != "" || strCustID != "" ? true : strCustDOB != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Unit_Price, OfflineRetailV2.Properties.Resources.Net_Wt_Ct, OfflineRetailV2.Properties.Resources.Total_Price, "" });
                this.dtblstrm.Rows.Add(new object[] { "xxxx", "xxxx", "xxxx", "" });
                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = this.dtblPreviewInvoiceDetails;
                double dblTempTotal = 0;
                int i = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    i++;
                    string strDescription = "";
                    string strDiscText = "";
                    string strFeesText = "";
                    string strFeesID = "0";
                    string strDiscID = "0";
                    double dblDisc = 0;
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string TService1 = "";
                    string strRentType = "";
                    double dblRentDuration = 1;
                    string dtRentEffectiveFrom = "";
                    string iQtyDecimals = "";
                    int SalePriceID = 0;
                    int BuyNGetFreeHeader = 0;
                    string BuyNGetFreeCategory = "";
                    string BuyNGetFreeCaption = "";
                    string PUOM = "";
                    PUOM = dr["UOM"].ToString();
                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();
                    strSKU = dr["SKU"].ToString();
                    strDiscText = dr["DiscountText"].ToString();
                    strDiscID = dr["DiscountID"].ToString();
                    strFeesID = dr["FeesID"].ToString();
                    strFeesText = dr["FeesText"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                    BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                    BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();
                    if (strPType == "O")
                    {
                        dblTotalPrice = -dblTotalPrice;
                    }
                    dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblDisc : 0));
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();
                    TService1 = dr["ServiceType"].ToString();
                    dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());
                    SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                    int rnt = 0;
                    string rntvl = (int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : this.GetFotmatDoubleValue(dblRentDuration));
                    string rentdisplay = "";
                    if (TService1 == "Rent")
                    {
                        if (strRentType == "MI")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.min_ });
                        }
                        if (strRentType == "HR")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.hr_ });
                        }
                        if (strRentType == "HD")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.half_day_s_ });
                        }
                        if (strRentType == "DY")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.day_s_ });
                        }
                        if (strRentType == "WK")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.week_s_ });
                        }
                        if (strRentType == "MN")
                        {
                            rentdisplay = string.Concat(new string[] { OfflineRetailV2.Properties.Resources._for, " ", rntvl, " ", OfflineRetailV2.Properties.Resources.month_s_ });
                        }
                        date = GeneralFunctions.fnDate(dr["RentDuration"].ToString());
                        dtRentEffectiveFrom = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    }
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    if (BuyNGetFreeCategory == "B")
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", string.Concat("** ", BuyNGetFreeCaption, " **"), "", "" });
                    }
                    this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                    this.dtblstrm.Rows.Add(new object[] { sPD1, "", "", "OneColumn" });
                    if (sPD2.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD2, "", "", "OneColumn" });
                    }
                    if (sPD3.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD3, "", "", "OneColumn" });
                    }
                    if (strPType == "M")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "", "" });
                        if (strMV2 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "", "" });
                        }
                        if (strMV3 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "", "" });
                        }
                    }
                    if (TService1 == "Sales")
                    {
                        if ((strPType == "P" || strPType == "M" || strPType == "K" || strPType == "U" || strPType == "W" || strPType == "E" || strPType == "F" || strPType == "S" ? true : strPType == "T"))
                        {
                            if (SalePriceID == 0)
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblNormalPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblNormalPrice - dblPrice, strDP)), "" });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblUOMPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblUOMPrice - dblPrice, strDP)), "" });
                                    }
                                }
                            }
                            if ((SalePriceID <= 0 ? false : OfflineRetailV2.Data.Settings.ShowSaleSaveInReceipt == "Y"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblNormalPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.You_Save_, " ", this.GetFotmatProductValue(dblNormalPrice - dblPrice, strDP)), "" });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, this.GetFotmatProductValue(dblUOMPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.You_Save_, " ", this.GetFotmatProductValue(dblUOMPrice - dblPrice, strDP)), "" });
                                    }
                                }
                            }
                        }
                    }
                    if (!this.blIsRentReturned)
                    {
                        if (strDiscText != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strDiscText), "", "", "" });
                        }
                        if (OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strFeesText), "", "", "" });
                            }
                        }
                    }
                    if ((TService1 != "Rent" ? false : this.blIsRentIssued))
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, rentdisplay), "", "", "" });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                    if (this.blIsRentReturned)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", this.GetFotmatDoubleValue(dblQty), "" });
                    }
                    else
                    {
                        if (strPType != "W")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString())), this.GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), this.GetFotmatDoubleValue(dblTotalPrice), "" });
                        }
                        else
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), "/", PUOM), this.GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), this.GetFotmatDoubleValue(dblTotalPrice), "" });
                        }
                        if ((OfflineRetailV2.Data.Settings.ScaleDevice != "(None)" ? false : strPType == "W"))
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Manual_Weight, "", "", "s" });
                        }
                    }
                    if (strInvNotes != "")
                    {
                        string OrginalN = "";
                        this.ArrangeText(strInvNotes, 30, ref OrginalN);
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;
                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;
                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            string cutstr = CopyOrginalN.Substring(0, PlaceN);
                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len -= 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                            }
                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }
                        if (CopyOrginalN.Length > 30)
                        {
                            int len = CopyOrginalN.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesN++;
                                len -= 30;
                                if (CopyOrginalN != "")
                                {
                                    CopyOrginalN = CopyOrginalN.Substring(30, len);
                                }
                            }
                        }
                        if (NumberOfOccurancesN == 0)
                        {
                            NumberOfOccurancesN = 1;
                        }
                        else if (OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())
                        {
                            NumberOfOccurancesN++;
                        }
                        this.dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                    }
                }
                prndtblINV1.Dispose();
                if (!this.blIsRentReturned)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    DataRowCollection dataRowCollection5 = this.dtblstrm.Rows;
                    object[] objArray4 = new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Sub_Total), "", null, null };
                    objArray4[2] = this.GetFotmatDoubleValue((OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax));
                    objArray4[3] = "";
                    dataRowCollection5.Add(objArray4);
                    if (dblDiscount != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        string strDiscountCaption = OfflineRetailV2.Properties.Resources.Discount;
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strDiscountCaption), "", this.GetFotmatDoubleValue(dblDiscount), "" });
                    }
                    if (dblTax != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        foreach (DataRow drTx in this.dtblPreviewTaxDetails.Rows)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", drTx["Tax"].ToString().Substring(0, drTx["Tax"].ToString().LastIndexOf("("))), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(drTx["Amount"].ToString())), "" });
                        }
                    }
                    if (dblDTax != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Dest__Tax, ": ", strDTaxName), "", this.GetFotmatDoubleValue(dblDTax), "" });
                    }
                    if ((dblFees != 0 || dblFeesTax != 0 || dblFeesCoupon != 0 || dblFeesCouponTax != 0 ? OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y" : false))
                    {
                        DataTable dFees = this.FetchInvFees();
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        if (dblFees + dblFeesCoupon != 0)
                        {
                            if (dFees.Rows.Count == 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString()), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            }
                            if (dFees.Rows.Count > 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                            }
                        }
                        if (dblFeesTax + dblFeesCouponTax != 0)
                        {
                            if (dFees.Rows.Count == 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString(), " ", OfflineRetailV2.Properties.Resources.Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            }
                            if (dFees.Rows.Count > 1)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges_Tax, ":"), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                            }
                        }
                    }
                    DataTable dtblCpn = new DataTable();
                    if (dblCoupon != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Discount_on_Ticket, "", this.GetFotmatDoubleValue(dblCoupon), "" });
                    }
                    if (dtblCpn.Rows.Count > 0)
                    {
                        foreach (DataRow dr in dtblCpn.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;
                            strTender = dr["Name"].ToString();
                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            this.SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD1), "", "", "" });
                            if (sPD2.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD2), "", "", "" });
                            }
                            if (sPD3.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD3), "", "", "" });
                            }
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            this.dtblstrm.Rows.Add(new object[] { "", "", this.GetFotmatDoubleValue(dblAmount), "" });
                        }
                    }
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                }
                if (serviceT == "Rent")
                {
                    if (dblRentalSecurityDeposit > 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Security_Deposit, "", this.GetFotmatDoubleValue(dblRentalSecurityDeposit), "" });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                    }
                }
                if (serviceT == "Rent")
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblTotalSale + dblRentalSecurityDeposit), "B" });
                }
                else
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblTotalSale), "B" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if ((OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != null))
                {
                    string OrginalF = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Data.Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                this.intPageCounter++;
            }
            if (this.strPrintType == "Reprint Receipt")
            {
                dummyTest = "";
                string SP1 = new string(' ', 3);
                string SP2 = "";
                if (OfflineRetailV2.Data.Settings.PrintTrainingMode == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", string.Concat(" ", OfflineRetailV2.Properties.Resources.Training, " "), "", "B" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (this.blIsVoid)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.VOIDED, "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                }
                else
                {
                    DataRowCollection rows6 = this.dtblstrm.Rows;
                    object[] objArray5 = new object[] { "", null, null };
                    objArray5[1] = string.Concat(new string[] { "* ", OfflineRetailV2.Properties.Resources.Reprinted_Receipt, ": ", this.intReprintCnt.ToString(), " *" });
                    objArray5[2] = "";
                    rows6.Add(objArray5);
                }

                this.dtblstrm.Rows.Add(new object[] { "", "", "" });

                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }

                this.GetRecieptHeader();
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCustID = "";
                string strCID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";
                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblTotalSale = 0;
                double dblCoupon = 0;
                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                double dblFees = 0;
                double dblFeesTax = 0;
                double dblFeesCoupon = 0;
                double dblFeesCouponTax = 0;
                string strDTaxName = "";
                double dblDTax = 0;
                int CustomerOrderRef = 0;
                string strCustDOB = "";
                string strCustAddress = "";
                prndtblINV = this.FetchInvHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                    dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                    dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                    dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());
                    strDTaxName = dr["DTaxName"].ToString();
                    dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());
                    CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());
                    strCustDOB = dr["CustomerDOB"].ToString();
                }
                prndtblINV.Dispose();
                if (CustomerOrderRef > 0)
                {
                    string dt1 = "";
                    string dt2 = "";
                    this.GetCustomerOrderRef(CustomerOrderRef, ref dt1, ref dt2);
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Ref__Order, "  : "), "", CustomerOrderRef.ToString(), "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Order_Date), "", dt1, "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Pickup_Date), "", dt2, "" });
                }
                this.intWO = this.FetchWorkorderNo();
                if (this.intWO > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Work_Order_Number, "", this.intWO.ToString() });
                    DataRowCollection dataRowCollection6 = this.dtblstrm.Rows;
                    object[] date1 = new object[] { OfflineRetailV2.Properties.Resources.Date, "", null };
                    date = GeneralFunctions.fnDate(this.FetchWorkorderDate());
                    date1[2] = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    dataRowCollection6.Add(date1);
                }
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Receipt_Number, "", this.intInvNo.ToString() });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                if (strCustCompany != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Company, "", strCustCompany });
                }
                if (strCustName != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName });
                }
                if (strCustID != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID });
                }
                if (strCustAddress != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(string.Concat("Address:", strCustAddress), 40, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len -= 40;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "" });
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 40)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesH++;
                            len -= 40;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                if (strCustDOB != "")
                {
                    DataRowCollection rows7 = this.dtblstrm.Rows;
                    object[] dateOfBirth1 = new object[] { OfflineRetailV2.Properties.Resources.Date_of_Birth, "", null, null };
                    date = GeneralFunctions.fnDate(strCustDOB);
                    dateOfBirth1[2] = date.ToString(SystemVariables.DateFormat);
                    dateOfBirth1[3] = "";
                    rows7.Add(dateOfBirth1);
                }
                if ((strCustCompany != "" || strCustName != "" || strCustID != "" ? true : strCustDOB != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                }
                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = this.FetchInvDetails(dblTotalSale);
                double dblTempTotal = 0;
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Unit_Price, OfflineRetailV2.Properties.Resources.Net_Wt_Ct, OfflineRetailV2.Properties.Resources.Total_Price, "" });
                this.dtblstrm.Rows.Add(new object[] { "xxxx", "xxxx", "xxxx", "" });
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    string strDiscText = "";
                    double dblDisc = 0;
                    string strDescription = "";
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string tgininv = "";
                    string strFeesID = "0";
                    string strFeesText = "";
                    int SalePriceID = 0;
                    string iQtyDecimals = "";
                    int BuyNGetFreeHeader = 0;
                    string BuyNGetFreeCategory = "";
                    string BuyNGetFreeCaption = "";
                    string PUOM = "";
                    PUOM = dr["UOM"].ToString();
                    int ipid = 0;
                    ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                    tgininv = dr["TaggedInInvoice"].ToString();
                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();
                    strSKU = dr["SKU"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();
                    strFeesID = dr["FeesID"].ToString();
                    strFeesText = dr["FeesText"].ToString();
                    iQtyDecimals = dr["QtyDecimal"].ToString();
                    BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                    BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                    BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();
                    if (strPType == "O")
                    {
                        dblTotalPrice = -dblTotalPrice;
                    }
                    strDiscText = dr["DiscountText"].ToString();
                    dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblDisc : 0));
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                    if (BuyNGetFreeCategory == "B")
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", string.Concat("** ", BuyNGetFreeCaption, " **"), "" });
                    }
                    this.dtblstrm.Rows.Add(new object[] { sPD1, "", "", "OneColumn" });
                    if (sPD2.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD2, "", "", "OneColumn" });
                    }
                    if (sPD3.Trim() != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { sPD3, "", "", "OneColumn" });
                    }
                    if (strPType == "M")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "" });
                        if (strMV2 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "" });
                        }
                        if (strMV3 != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "" });
                        }
                    }
                    if ((strPType == "P" || strPType == "M" || strPType == "K" || strPType == "U" || strPType == "W" || strPType == "E" || strPType == "F" || strPType == "S" ? true : strPType == "T"))
                    {
                        if (SalePriceID == 0)
                        {
                            if (strPType != "U")
                            {
                                if (dblNormalPrice - dblPrice > 0)
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, "  ", this.GetFotmatProductValue(dblNormalPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblNormalPrice - dblPrice, strDP)) });
                                }
                            }
                            if (strPType == "U")
                            {
                                if (dblUOMPrice - dblPrice > 0)
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, "  ", this.GetFotmatProductValue(dblUOMPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblUOMPrice - dblPrice, strDP)) });
                                }
                            }
                        }
                        if ((SalePriceID <= 0 ? false : OfflineRetailV2.Data.Settings.ShowSaleSaveInReceipt == "Y"))
                        {
                            if (strPType != "U")
                            {
                                if (dblNormalPrice - dblPrice > 0)
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, "  ", this.GetFotmatProductValue(dblNormalPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.You_Save_, " ", this.GetFotmatProductValue(dblNormalPrice - dblPrice, strDP)) });
                                }
                            }
                            if (strPType == "U")
                            {
                                if (dblUOMPrice - dblPrice > 0)
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, "  ", this.GetFotmatProductValue(dblUOMPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.You_Save_, " ", this.GetFotmatProductValue(dblUOMPrice - dblPrice, strDP)) });
                                }
                            }
                        }
                        if (strPType == "T")
                        {
                            if (tgininv == "Y")
                            {
                                Product opdt = new Product()
                                {
                                    Connection = new SqlConnection(SystemVariables.ConnectionString)
                                };
                                DataTable dtemp = opdt.FetchTaggedData(ipid);
                                foreach (DataRow tgdr in dtemp.Rows)
                                {
                                    double tgQty = 0;
                                    string tgName = "";
                                    tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                    tgName = tgdr["ItemName"].ToString();
                                    tgQty *= dblQty;
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(tgName, " - ", this.GetFotmatDoubleValue(tgQty)), "", "" });
                                }
                                dtemp.Dispose();
                            }
                        }
                    }
                    if (strDiscText != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strDiscText), "", "", "" });
                    }
                    if (OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y")
                    {
                        if (strFeesText != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strFeesText), "", "", "" });
                        }
                    }
                    if (strPType != "W")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString())), this.GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), this.GetFotmatDoubleValue(dblTotalPrice), "" });
                    }
                    else
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), "/", PUOM), this.GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), this.GetFotmatDoubleValue(dblTotalPrice), "" });
                    }
                    if ((OfflineRetailV2.Data.Settings.ScaleDevice != "(None)" ? false : strPType == "W"))
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Manual_Weight, "", "", "s" });
                    }
                    if (strInvNotes != "")
                    {
                        string OrginalN = "";
                        this.ArrangeText(strInvNotes, 30, ref OrginalN);
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;
                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;
                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            string cutstr = CopyOrginalN.Substring(0, PlaceN);
                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len -= 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                            }
                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }
                        if (CopyOrginalN.Length > 30)
                        {
                            int len = CopyOrginalN.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesN++;
                                len -= 30;
                                if (CopyOrginalN != "")
                                {
                                    CopyOrginalN = CopyOrginalN.Substring(30, len);
                                }
                            }
                        }
                        if (NumberOfOccurancesN == 0)
                        {
                            NumberOfOccurancesN = 1;
                        }
                        else if (OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())
                        {
                            NumberOfOccurancesN++;
                        }
                        this.dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                    }
                }
                prndtblINV1.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                DataRowCollection dataRowCollection7 = this.dtblstrm.Rows;
                object[] subTotal = new object[] { OfflineRetailV2.Properties.Resources.Sub_Total, "", null };
                subTotal[2] = this.GetFotmatDoubleValue((OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax));
                dataRowCollection7.Add(subTotal);
                if (dblDiscount != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    string strDiscountCaption = OfflineRetailV2.Properties.Resources.Discount;
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strDiscountCaption), "", this.GetFotmatDoubleValue(dblDiscount) });
                }
                if (dblTax != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    if (dblTax1 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName1), "", this.GetFotmatDoubleValue(dblTax1) });
                    }
                    if (dblTax2 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName2), "", this.GetFotmatDoubleValue(dblTax2) });
                    }
                    if (dblTax3 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName3), "", this.GetFotmatDoubleValue(dblTax3) });
                    }
                }
                if (dblDTax != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Dest__Tax, ": ", strDTaxName), "", this.GetFotmatDoubleValue(dblDTax), "" });
                }
                if ((dblFees != 0 || dblFeesTax != 0 || dblFeesCoupon != 0 || dblFeesCouponTax != 0 ? OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y" : false))
                {
                    DataTable dFees = this.FetchInvFees();
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    if (dblFees + dblFeesCoupon != 0)
                    {
                        if (dFees.Rows.Count == 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString()), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                        if (dFees.Rows.Count > 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                    }
                    if (dblFeesTax + dblFeesCouponTax != 0)
                    {
                        if (dFees.Rows.Count == 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString(), " ", OfflineRetailV2.Properties.Resources.Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                        if (dFees.Rows.Count > 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges_Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                    }
                }
                if (dblCoupon != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Discount_on_Ticket, "", this.GetFotmatDoubleValue(dblCoupon), "" });
                }
                DataTable dtblCpn = new DataTable();
                dtblCpn = this.FetchInvCoupon();
                if (dtblCpn.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtblCpn.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;
                        strTender = dr["Name"].ToString();
                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";
                        this.SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD1), "", "", "" });
                        if (sPD2.Trim() != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD2), "", "", "" });
                        }
                        if (sPD3.Trim() != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD3), "", "", "" });
                        }
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        this.dtblstrm.Rows.Add(new object[] { "", "", this.GetFotmatDoubleValue(dblAmount), "" });
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Total, "", this.GetFotmatDoubleValue(dblTotalSale), "B" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tender, "", "", "" });
                bool boolHATender = false;
                bool boolSCrdtTender = false;
                DataTable prndtblINV2 = new DataTable();
                prndtblINV2 = this.FetchInvTender();
                double dblTempTender = 0;
                foreach (DataRow dr in prndtblINV2.Rows)
                {
                    string strTender = "";
                    double dblAmount = 0;
                    strTender = dr["DisplayAs"].ToString();
                    dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + dblAmount);
                    if (strTender == "Gift Certificate")
                    {
                        strTender = OfflineRetailV2.Properties.Resources.Gift_Cert;
                    }
                    if (strTender == "American Express")
                    {
                        strTender = OfflineRetailV2.Properties.Resources.American_Exp_;
                    }
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender), "", this.GetFotmatDoubleValue(dblAmount) });
                    if ((dr["Name"].ToString() == "Debit Card" ? true : dr["Name"].ToString() == "EBT Cash"))
                    {
                        double cashbk = 0;
                        cashbk = this.FetchCashBack(dblAmount);
                        if (cashbk != 0)
                        {
                            dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Cash_Back), "", this.GetFotmatDoubleValue(cashbk) });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender, " ", OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblAmount + cashbk) });
                        }
                    }
                    if (dr["Name"].ToString() == "House Account")
                    {
                        boolHATender = true;
                    }
                    if (dr["Name"].ToString() == "Store Credit")
                    {
                        boolSCrdtTender = true;
                    }
                }
                prndtblINV2.Dispose();
                if (dblTotalSale - dblTempTender == 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                else
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, "Change"), "", string.Concat("(", this.GetFotmatDoubleValue(dblTempTender - dblTotalSale), ")") });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (OfflineRetailV2.Data.Settings.POSShowGiftCertBalance == "Y")
                {
                    DataTable dtblGC = new DataTable();
                    dtblGC = this.FetchActiveGC(this.intInvNo);
                    if (dtblGC.Rows.Count > 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.GC_s__with_balance_as_on, " "), "", "" });
                        DataRowCollection rows8 = this.dtblstrm.Rows;
                        object[] objArray6 = new object[3];
                        date = DateTime.Today.Date;
                        objArray6[0] = string.Concat(SP1, date.ToShortDateString());
                        objArray6[1] = "";
                        objArray6[2] = "";
                        rows8.Add(objArray6);
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        foreach (DataRow dr in dtblGC.Rows)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.GC, "#:", dr["GC"].ToString()), "xxx", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())) });
                        }
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }
                    dtblGC.Dispose();
                }
                DataTable dtblEBT = new DataTable();
                dtblEBT = this.FetchEBTBalance(this.intInvNo);
                if (dtblEBT.Rows.Count > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.EBT_Balance, " "), "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    foreach (DataRow dr in dtblEBT.Rows)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.EBT_Card, "#:", dr["CardNo"].ToString()), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                    }
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                }
                dtblEBT.Dispose();
                int prmmgc = 0;
                POS obcc01mgc = new POS()
                {
                    Connection = SystemVariables.Conn
                };
                prmmgc = obcc01mgc.GetTranIDFromInvoiceID(this.intInvNo);
                DataTable ccdtbl11mgc = new DataTable();
                POS obcc11mgc = new POS()
                {
                    Connection = SystemVariables.Conn
                };
                ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);
                bool mgc = false;
                int mgcnt = 0;
                foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                {
                    if ((drmgc["CardType"].ToString() == "Mercury Gift Card" || drmgc["CardType"].ToString() == "Precidia Gift Card" || drmgc["CardType"].ToString() == "Datacap Gift Card" ? true : drmgc["CardType"].ToString() == "POSLink Gift Card"))
                    {
                        mgcnt++;
                        if (mgcnt == 1)
                        {
                            mgc = true;
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.GIft_Card, "", OfflineRetailV2.Properties.Resources.Balance });
                            this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                    }
                }
                if (mgc)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if ((!boolHATender ? false : OfflineRetailV2.Data.Settings.HouseAccountBalanceInReceipt == "Y"))
                {
                    POS obcc99 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(this.intInvNo, GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.House_Account_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (boolSCrdtTender)
                {
                    POS objscrtbal = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Store_Credit_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (this.blIsVoid)
                {
                    if (this.blCardPayment)
                    {
                        DataTable ccdtbl11 = new DataTable();
                        POS obcc11 = new POS()
                        {
                            Connection = SystemVariables.Conn
                        };
                        ccdtbl11 = obcc11.FetchVoidCardData(this.intInvNo);
                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit" ? true : drcc["CardType"].ToString() == "Credit Card"))
                            {
                                this.strCardType = "Credit";
                            }
                            if ((drcc["CardType"].ToString() == "Debit" ? true : drcc["CardType"].ToString() == "Debit Card"))
                            {
                                this.strCardType = "Debit";
                            }
                            if (drcc["CardType"].ToString() == "Mercury Gift Card")
                            {
                                this.strCardType = "Mercury";
                            }
                            if (drcc["CardType"].ToString() == "EBT")
                            {
                                this.strCardType = "EBT";
                            }
                            this.strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            this.strCardNum = drcc["RefCardAct"].ToString();
                            this.strCardNum = GeneralFunctions.GetLast(this.strCardNum, 4);
                            this.strCardLogo = drcc["RefCardLogo"].ToString();
                            this.strCardEntry = drcc["RefCardEntry"].ToString();
                            this.strApprovalNum = drcc["RefCardAuthID"].ToString();
                            this.strTranID = drcc["RefCardTranID"].ToString();
                            this.strApprovedAmt = drcc["RefCardAuthAmount"].ToString();
                            string voidRef = drcc["Reference"].ToString();
                            if (OfflineRetailV2.Data.Settings.POSCardPayment == "Y")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.REF, "#  :"), "", this.intInvNo.ToString() });
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.ACT, "#  :"), "", this.strCardNum });
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.CARD, "  :"), "", this.strCardLogo });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            }
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.VOID_AMOUNT, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.REFERENCE, " : "), "", voidRef });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                    }
                }
                if (this.blCardPayment)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", string.Concat("  ", OfflineRetailV2.Properties.Resources.S_I_G_N_A_T_U_R_E, "     ") });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if ((OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == "" ? true : OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == null))
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                else
                {
                    string OrginalF = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Data.Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                if (!this.blIsVoid)
                {
                    DataRowCollection dataRowCollection8 = this.dtblstrm.Rows;
                    object[] objArray7 = new object[] { "", null, null };
                    objArray7[1] = string.Concat(new string[] { "* ", OfflineRetailV2.Properties.Resources.Reprinted_Receipt, ": ", this.intReprintCnt.ToString(), " *" });
                    objArray7[2] = "";
                    dataRowCollection8.Add(objArray7);
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
            }
            if (this.strPrintType == "Layaway")
            {
                string SP1 = new string(' ', 1);
                string SP2 = "";
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }
                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                if (this.blIsLayawayRefund)
                {
                    this.dtblstrm.Rows.Add(new object[] { "Layaway Cancellation", "", "" });
                }
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";
                string strLayawayDueDate = "";
                int intLayInvNo = 0;
                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblTotalSale = 0;
                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                string strLayawayStatus = "";
                prndtblINV = this.FetchLayawayHeader(false);
                int invcount = 0;
                double dblTotalLayawaySale = 0;
                double dblTotalLayawayBalance = 0;
                int intPrevLayNo = 0;
                int distinctlayway = 1;
                double dblFees = 0;
                double dblFeesTax = 0;
                double dblFeesCoupon = 0;
                double dblFeesCouponTax = 0;
                double dblDTax = 0;
                string custAddr = "";
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    invcount++;
                    this.intLayNo = GeneralFunctions.fnInt32(dr["LayawayNo"].ToString());
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                    dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                    dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                    dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());
                    intLayInvNo = GeneralFunctions.fnInt32(dr["InvoiceNo"].ToString());
                    date = GeneralFunctions.fnDate(dr["DateDue"].ToString());
                    strLayawayDueDate = date.ToString("d");
                    strLayawayStatus = dr["LayawayStatus"].ToString();
                    dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());
                    this.intInvNo = intLayInvNo;
                    custAddr = this.FetchCustomerAddress(GeneralFunctions.fnInt32(strCID));
                    if (strLayawayStatus == "3")
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Receipt_Number, "", intLayInvNo.ToString() });
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    }
                    else if ((intPrevLayNo == 0 ? true : intPrevLayNo != this.intLayNo))
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Layaway_Number, "", this.intLayNo.ToString() });
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    }
                    if (invcount == 1)
                    {
                        if (strCustName != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName });
                        }
                        if (strCustID != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID });
                        }
                        if (custAddr != "")
                        {
                            string OrginalH = "";
                            this.ArrangeText(custAddr, 26, ref OrginalH);
                            char FindH = '\n';
                            int NumberOfOccurancesH = 0;
                            string CopyOrginalH = string.Copy(OrginalH);
                            int PlaceH = 0;
                            NumberOfOccurancesH = 0;
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            while (PlaceH != -1)
                            {
                                string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                                if (cutstr.Length > 26)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 26)
                                    {
                                        NumberOfOccurancesH++;
                                        len -= 26;
                                        if (cutstr != "")
                                        {
                                            this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                            cutstr = cutstr.Substring(26, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                }
                                CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                NumberOfOccurancesH++;
                            }
                            if (CopyOrginalH.Length > 26)
                            {
                                int len = CopyOrginalH.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len -= 26;
                                    if (CopyOrginalH != "")
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                        CopyOrginalH = CopyOrginalH.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                                }
                            }
                            else if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                            }
                            if (NumberOfOccurancesH == 0)
                            {
                                NumberOfOccurancesH = 1;
                            }
                            else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                            {
                                NumberOfOccurancesH++;
                            }
                        }
                        if ((custAddr != "" || strCustName != "" ? true : strCustID != ""))
                        {
                            this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }
                    }
                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = this.FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;
                    foreach (DataRow drL in prndtblINV1.Rows)
                    {
                        string strDescription = "";
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string tgininv = "";
                        string strDiscText = "";
                        double dblDisc = 0;
                        int ipid = 0;
                        string txapp1 = "N";
                        string txapp2 = "N";
                        string txapp3 = "N";
                        double tx1 = 0;
                        double tx2 = 0;
                        double tx3 = 0;
                        double linetx = 0;
                        double lineprice = 0;
                        int tx1ty = 0;
                        int tx2ty = 0;
                        int tx3ty = 0;
                        double tDTax = 0;
                        double tFees = 0;
                        double tFeesTax = 0;
                        tDTax = GeneralFunctions.fnDouble(drL["DTax"].ToString());
                        tFees = GeneralFunctions.fnDouble(drL["Fees"].ToString());
                        tFeesTax = GeneralFunctions.fnDouble(drL["FeesTax"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                        lineprice = dblTotalPrice;
                        txapp1 = drL["Taxable1"].ToString();
                        txapp2 = drL["Taxable2"].ToString();
                        txapp3 = drL["Taxable3"].ToString();
                        tx1 = GeneralFunctions.fnDouble(drL["TaxRate1"].ToString());
                        tx2 = GeneralFunctions.fnDouble(drL["TaxRate2"].ToString());
                        tx3 = GeneralFunctions.fnDouble(drL["TaxRate3"].ToString());
                        tx1ty = GeneralFunctions.fnInt32(drL["TaxType1"].ToString());
                        tx2ty = GeneralFunctions.fnInt32(drL["TaxType2"].ToString());
                        tx3ty = GeneralFunctions.fnInt32(drL["TaxType3"].ToString());
                        if ((txapp1 == "Y" || txapp2 == "Y" ? true : txapp3 == "Y"))
                        {
                            if (txapp1 == "Y")
                            {
                                linetx = (tx1ty == 0 ? GeneralFunctions.FormatDouble(lineprice * tx1 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal1"].ToString())));
                            }
                            if (txapp2 == "Y")
                            {
                                linetx = (tx2ty == 0 ? linetx + GeneralFunctions.FormatDouble(lineprice * tx2 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal2"].ToString())));
                            }
                            if (txapp3 == "Y")
                            {
                                linetx = (tx3ty == 0 ? linetx + GeneralFunctions.FormatDouble(lineprice * tx3 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal3"].ToString())));
                            }
                        }
                        ipid = GeneralFunctions.fnInt32(drL["ProductID"].ToString());
                        tgininv = drL["TaggedInInvoice"].ToString();
                        strDescription = drL["Description"].ToString();
                        strPType = drL["ProductType"].ToString();
                        strMV1 = drL["MOP1"].ToString();
                        strMV2 = drL["MOP2"].ToString();
                        strMV3 = drL["MOP3"].ToString();
                        strSKU = drL["SKU"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(drL["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(drL["Qty"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(drL["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(drL["UOMPrice"].ToString());
                        strDiscText = drL["DiscountText"].ToString();
                        dblDisc = GeneralFunctions.fnDouble(drL["Discount"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = drL["DP"].ToString();
                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";
                        this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                        this.dtblstrm.Rows.Add(new object[] { sPD1, "", "" });
                        if (sPD2.Trim() != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { sPD2, "", "" });
                        }
                        if (sPD3.Trim() != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { sPD3, "", "" });
                        }
                        if (strPType == "M")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "" });
                            if (strMV2 != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "" });
                            }
                            if (strMV3 != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "" });
                            }
                        }
                        if ((strPType == "P" || strPType == "M" || strPType == "K" || strPType == "U" || strPType == "W" || strPType == "E" || strPType == "F" || strPType == "S" ? true : strPType == "T"))
                        {
                            if (strPType != "U")
                            {
                                if (dblNormalPrice - dblPrice > 0)
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, "  ", this.GetFotmatProductValue(dblNormalPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblNormalPrice - dblPrice, strDP)) });
                                }
                            }
                            if (strPType == "U")
                            {
                                if (dblUOMPrice - dblPrice > 0)
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, "  ", this.GetFotmatProductValue(dblUOMPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblUOMPrice - dblPrice, strDP)) });
                                }
                            }
                            if (strPType == "T")
                            {
                                if (tgininv == "Y")
                                {
                                    Product opdt = new Product()
                                    {
                                        Connection = new SqlConnection(SystemVariables.ConnectionString)
                                    };
                                    DataTable dtemp = opdt.FetchTaggedData(ipid);
                                    foreach (DataRow tgdr in dtemp.Rows)
                                    {
                                        double tgQty = 0;
                                        string tgName = "";
                                        tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                        tgName = tgdr["ItemName"].ToString();
                                        tgQty *= dblQty;
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(tgName, " - ", this.GetFotmatDoubleValue(tgQty)), "", "" });
                                    }
                                    dtemp.Dispose();
                                }
                            }
                        }
                        if (strDiscText != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strDiscText), "", "" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, this.GetFotmatProductValue(dblPrice, strDP)), this.GetFotmatDoubleValue(dblQty), this.GetFotmatDoubleValue(lineprice + linetx + tFees + tFeesTax + tDTax) });
                    }
                    prndtblINV1.Dispose();
                    if (strLayawayStatus == "3")
                    {
                        this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                        DataRowCollection rows9 = this.dtblstrm.Rows;
                        object[] fotmatDoubleValue5 = new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Sub_Total), "", null };
                        fotmatDoubleValue5[2] = this.GetFotmatDoubleValue((OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax));
                        rows9.Add(fotmatDoubleValue5);
                        if (dblDiscount != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, "Discount"), "", this.GetFotmatDoubleValue(dblDiscount) });
                        }
                        if (dblTax != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                            if (dblTax1 != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName1), "", this.GetFotmatDoubleValue(dblTax1) });
                            }
                            if (dblTax2 != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName2), "", this.GetFotmatDoubleValue(dblTax2) });
                            }
                            if (dblTax3 != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName3), "", this.GetFotmatDoubleValue(dblTax3) });
                            }
                        }
                        if (dblTax != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Dest__Tax, ": ", strTaxName1), "", this.GetFotmatDoubleValue(dblDTax) });
                        }
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblTotalSale), "B" });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    DataTable prndtblLAYPMT = new DataTable();
                    prndtblLAYPMT = this.FetchLayawayPayment();
                    foreach (DataRow drL1 in prndtblLAYPMT.Rows)
                    {
                        double dblLayPayment = 0;
                        string strLayPmtType = "";
                        string strLayPmtDate = "";
                        strLayPmtType = drL1["PaymentType"].ToString();
                        strLayPmtDate = drL1["PaymentDate"].ToString();
                        dblLayPayment = GeneralFunctions.fnDouble(drL1["PaymentAmt"].ToString());
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strLayPmtType, " ", strLayPmtDate), "", this.GetFotmatDoubleValue(dblLayPayment) });
                    }
                    prndtblLAYPMT.Dispose();
                    if ((intPrevLayNo == 0 ? false : intPrevLayNo != this.intLayNo))
                    {
                        distinctlayway++;
                        dblTotalLayawaySale = this.GetTotalLayawaySale(intPrevLayNo);
                        dblTotalLayawayBalance = dblTotalLayawaySale - this.GetTotalLayawayPayment(intPrevLayNo);
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Balance_Due, " "), "", this.GetFotmatDoubleValue(dblTotalLayawayBalance) });
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Layaway_Due, " "), "", strLayawayDueDate });
                    }
                    intPrevLayNo = this.intLayNo;
                }
                prndtblINV.Dispose();
                if ((invcount == 1 ? true : distinctlayway == 1))
                {
                    dblTotalLayawaySale = this.GetTotalLayawaySale(intPrevLayNo);
                    dblTotalLayawayBalance = dblTotalLayawaySale - this.GetTotalLayawayPayment(intPrevLayNo);
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Balance_Due, " "), "", this.GetFotmatDoubleValue(dblTotalLayawayBalance) });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Layaway_Due, " "), "", strLayawayDueDate });
                }
                bool boolHATender = false;
                if (!this.blIsLayawayRefund)
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tender, "", "", "" });
                    DataTable prndtblINV2 = new DataTable();
                    this.intTrnNo = this.FetchMaxTranNo();
                    prndtblINV2 = this.FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;
                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender += dblAmount;
                        if (strTender == "Gift Certificate")
                        {
                            strTender = OfflineRetailV2.Properties.Resources.Gift_Cert;
                        }
                        if (strTender == "American Express")
                        {
                            strTender = OfflineRetailV2.Properties.Resources.American_Exp_;
                        }
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender), "", this.GetFotmatDoubleValue(dblAmount) });
                        if ((dr["Name"].ToString() == "Debit Card" ? true : dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = this.FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Cash_Back), "", this.GetFotmatDoubleValue(cashbk) });
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender, " ", OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblAmount + cashbk) });
                            }
                        }
                        if (dr["Name"].ToString() == "House Account")
                        {
                            boolHATender = true;
                        }
                    }
                    prndtblINV2.Dispose();
                    int prmmgc = 0;
                    POS obcc01mgc = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(this.intInvNo);
                    DataTable ccdtbl11mgc = new DataTable();
                    POS obcc11mgc = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);
                    bool mgc = false;
                    int mgcnt = 0;
                    foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                    {
                        if ((drmgc["CardType"].ToString() == "Mercury Gift Card" || drmgc["CardType"].ToString() == "Precidia Gift Card" || drmgc["CardType"].ToString() == "Datacap Gift Card" ? true : drmgc["CardType"].ToString() == "POSLink Gift Card"))
                        {
                            mgcnt++;
                            if (mgcnt == 1)
                            {
                                mgc = true;
                                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.GIft_Card, "", OfflineRetailV2.Properties.Resources.Balance });
                                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                            this.dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                        }
                    }
                    if (mgc)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                }
                if ((!boolHATender ? false : OfflineRetailV2.Data.Settings.HouseAccountBalanceInReceipt == "Y"))
                {
                    POS obcc99 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(this.intInvNo, GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.House_Account_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                string strSign = new string('\u005F', 20);
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.sign_), "", strSign });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if (this.blCardPayment)
                {
                    DataTable ccdtbl11 = new DataTable();
                    POS obcc11 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    ccdtbl11 = obcc11.FetchCardData(this.intLayTran);
                    foreach (DataRow drcc in ccdtbl11.Rows)
                    {
                        if ((drcc["CardType"].ToString() == "Credit" ? true : drcc["CardType"].ToString() == "Credit Card"))
                        {
                            this.strCardType = "Credit";
                        }
                        if ((drcc["CardType"].ToString() == "Debit" ? true : drcc["CardType"].ToString() == "Debit Card"))
                        {
                            this.strCardType = "Debit";
                        }
                        if (drcc["CardType"].ToString() == "Mercury Gift Card")
                        {
                            this.strCardType = "Mercury";
                        }
                        if (drcc["CardType"].ToString() == "Precidia Gift Card")
                        {
                            this.strCardType = "Precidia";
                        }
                        if (drcc["CardType"].ToString() == "Datacap Gift Card")
                        {
                            this.strCardType = "Datacap";
                        }
                        if (drcc["CardType"].ToString() == "POSLink Gift Card")
                        {
                            this.strCardType = "POSLink";
                        }
                        if (drcc["CardType"].ToString() == "EBT")
                        {
                            this.strCardType = "EBT";
                        }
                        this.strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                        this.strCardNum = drcc["RefCardAct"].ToString();
                        this.strCardNum = GeneralFunctions.GetLast(this.strCardNum, 4);
                        this.strCardLogo = drcc["RefCardLogo"].ToString();
                        this.strCardEntry = drcc["RefCardEntry"].ToString();
                        this.strApprovalNum = drcc["RefCardAuthID"].ToString();
                        this.strTranID = drcc["RefCardTranID"].ToString();
                        this.strApprovedAmt = drcc["RefCardAuthAmount"].ToString();
                        if (OfflineRetailV2.Data.Settings.POSCardPayment == "Y")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.REF, "#  :"), "", this.intInvNo.ToString() });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.ACT, "#  :"), "", this.strCardNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.CARD, "  :"), "", this.strCardLogo });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Credit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.CREDIT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Debit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.DEBIT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Mercury")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.MERCURY_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "Precidia")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.PRECIDIA_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (this.strCardType == "EBT")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.EBT_PURCHASE, "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(this.strApprovedAmt)) });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.APPROVAL_CODE, " : "), "", this.strApprovalNum });
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.TRAN_ID, " : "), "", this.strTranID });
                            this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }
                        if (OfflineRetailV2.Data.Settings.AcceptTips == "Y")
                        {
                            if (OfflineRetailV2.Data.Settings.ShowTipsInReceipt == "Y")
                            {
                                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tip, "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Total, "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "x", "x", "x", "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                            }
                        }
                        if (this.strCardType == "Credit")
                        {
                            if (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7 || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3 && GeneralFunctions.fnDouble(this.strApprovedAmt) >= OfflineRetailV2.Data.Settings.PrecidiaSignAmount || GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5 && GeneralFunctions.fnDouble(this.strApprovedAmt) >= OfflineRetailV2.Data.Settings.DatacapSignAmount)
                            {
                                flag = true;
                            }
                            else
                            {
                                flag = (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) != 5 ? false : this.blDatacapManualTendering);
                            }
                            if (flag)
                            {
                                this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "X", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                                this.dtblstrm.Rows.Add(new object[] { "sig", "sig", "sig" });
                                this.dtblstrm.Rows.Add(new object[] { "", string.Concat(" ", OfflineRetailV2.Properties.Resources.S_I_G_N_A_T_U_R_E, " "), "" });
                            }
                        }
                        if (this.strCardType == "Debit")
                        {
                            this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.PIN_USED, "" });
                            this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                        }
                    }
                }
                if (this.blCardPayment)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.CARDHOLDER_COPY, "" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if ((OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() != null))
                {
                    string OrginalF = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
            }
            if (this.strPrintType == "Reprint Layaway")
            {
                string SP1 = new string(' ', 1);
                string SP2 = "";
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", string.Concat("* ", OfflineRetailV2.Properties.Resources.Reprinted_Receipt, " *"), "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }
                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strCID = "";
                string strEmpID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";
                string strLayawayDueDate = "";
                int intLayInvNo = 0;
                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblTotalSale = 0;
                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                string strLayawayStatus = "";
                prndtblINV = this.FetchLayawayHeader(true);
                int invcount = 0;
                double dblTotalLayawaySale = 0;
                double dblTotalLayawayBalance = 0;
                int intPrevLayNo = 0;
                double dblDTax = 0;
                string custAddr = "";
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    invcount++;
                    this.intLayNo = GeneralFunctions.fnInt32(dr["LayawayNo"].ToString());
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strCID = dr["CID"].ToString();
                    strEmpID = dr["EmpID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    intLayInvNo = GeneralFunctions.fnInt32(dr["InvoiceNo"].ToString());
                    date = GeneralFunctions.fnDate(dr["DateDue"].ToString());
                    strLayawayDueDate = date.ToString("d");
                    strLayawayStatus = dr["LayawayStatus"].ToString();
                    dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());
                    this.intInvNo = intLayInvNo;
                    custAddr = this.FetchCustomerAddress(GeneralFunctions.fnInt32(strCID));
                    if ((intPrevLayNo == 0 ? true : intPrevLayNo != this.intLayNo))
                    {
                        intPrevLayNo = this.intLayNo;
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Layaway_Number, "", this.intLayNo.ToString() });
                        this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    }
                    if (invcount == 1)
                    {
                        if (strCustName != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName });
                        }
                        if (strCustID != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID });
                        }
                        if (custAddr != "")
                        {
                            string OrginalH = "";
                            this.ArrangeText(custAddr, 26, ref OrginalH);
                            char FindH = '\n';
                            int NumberOfOccurancesH = 0;
                            string CopyOrginalH = string.Copy(OrginalH);
                            int PlaceH = 0;
                            NumberOfOccurancesH = 0;
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            while (PlaceH != -1)
                            {
                                string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                                if (cutstr.Length > 26)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 26)
                                    {
                                        NumberOfOccurancesH++;
                                        len -= 26;
                                        if (cutstr != "")
                                        {
                                            this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                            cutstr = cutstr.Substring(26, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                                }
                                CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                NumberOfOccurancesH++;
                            }
                            if (CopyOrginalH.Length > 26)
                            {
                                int len = CopyOrginalH.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len -= 26;
                                    if (CopyOrginalH != "")
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                        CopyOrginalH = CopyOrginalH.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                                }
                            }
                            else if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                            }
                            if (NumberOfOccurancesH == 0)
                            {
                                NumberOfOccurancesH = 1;
                            }
                            else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                            {
                                NumberOfOccurancesH++;
                            }
                        }
                        if ((custAddr != "" || strCustName != "" ? true : strCustID != ""))
                        {
                            this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }
                    }
                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = this.FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;
                    foreach (DataRow drL in prndtblINV1.Rows)
                    {
                        string strDescription = "";
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        string tgininv = "";
                        string strDiscText = "";
                        double dblDisc = 0;
                        int ipid = 0;
                        string txapp1 = "N";
                        string txapp2 = "N";
                        string txapp3 = "N";
                        double tx1 = 0;
                        double tx2 = 0;
                        double tx3 = 0;
                        double linetx = 0;
                        double lineprice = 0;
                        int tx1ty = 0;
                        int tx2ty = 0;
                        int tx3ty = 0;
                        double tDTax = 0;
                        double tFees = 0;
                        double tFeesTax = 0;
                        tDTax = GeneralFunctions.fnDouble(drL["DTax"].ToString());
                        tFees = GeneralFunctions.fnDouble(drL["Fees"].ToString());
                        tFeesTax = GeneralFunctions.fnDouble(drL["FeesTax"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                        lineprice = dblTotalPrice;
                        txapp1 = drL["Taxable1"].ToString();
                        txapp2 = drL["Taxable2"].ToString();
                        txapp3 = drL["Taxable3"].ToString();
                        tx1 = GeneralFunctions.fnDouble(drL["TaxRate1"].ToString());
                        tx2 = GeneralFunctions.fnDouble(drL["TaxRate2"].ToString());
                        tx3 = GeneralFunctions.fnDouble(drL["TaxRate3"].ToString());
                        tx1ty = GeneralFunctions.fnInt32(drL["TaxType1"].ToString());
                        tx2ty = GeneralFunctions.fnInt32(drL["TaxType2"].ToString());
                        tx3ty = GeneralFunctions.fnInt32(drL["TaxType3"].ToString());
                        if ((txapp1 == "Y" || txapp2 == "Y" ? true : txapp3 == "Y"))
                        {
                            if (txapp1 == "Y")
                            {
                                linetx = (tx1ty == 0 ? GeneralFunctions.FormatDouble(lineprice * tx1 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal1"].ToString())));
                            }
                            if (txapp2 == "Y")
                            {
                                linetx = (tx2ty == 0 ? linetx + GeneralFunctions.FormatDouble(lineprice * tx2 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal2"].ToString())));
                            }
                            if (txapp3 == "Y")
                            {
                                linetx = (tx3ty == 0 ? linetx + GeneralFunctions.FormatDouble(lineprice * tx3 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal3"].ToString())));
                            }
                        }
                        ipid = GeneralFunctions.fnInt32(drL["ProductID"].ToString());
                        tgininv = drL["TaggedInInvoice"].ToString();
                        strDescription = drL["Description"].ToString();
                        strPType = drL["ProductType"].ToString();
                        strMV1 = drL["MOP1"].ToString();
                        strMV2 = drL["MOP2"].ToString();
                        strMV3 = drL["MOP3"].ToString();
                        strDiscText = drL["DiscountText"].ToString();
                        strSKU = drL["SKU"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(drL["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(drL["Qty"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(drL["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(drL["UOMPrice"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(drL["Discount"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = drL["DP"].ToString();
                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";
                        this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                        this.dtblstrm.Rows.Add(new object[] { sPD1, "", "" });
                        if (sPD2.Trim() != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { sPD2, "", "" });
                        }
                        if (sPD3.Trim() != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { sPD3, "", "" });
                        }
                        if (strPType == "M")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "" });
                            if (strMV2 != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "" });
                            }
                            if (strMV3 != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "" });
                            }
                        }
                        if ((strPType == "P" || strPType == "M" || strPType == "K" || strPType == "U" || strPType == "W" || strPType == "E" || strPType == "F" || strPType == "S" ? true : strPType == "T"))
                        {
                            if (strPType != "U")
                            {
                                if (dblNormalPrice - dblPrice > 0)
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, "  ", this.GetFotmatProductValue(dblNormalPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblNormalPrice - dblPrice, strDP)) });
                                }
                            }
                            if (strPType == "U")
                            {
                                if (dblUOMPrice - dblPrice > 0)
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Normal_Pr_, "  ", this.GetFotmatProductValue(dblUOMPrice, strDP)), "", string.Concat(OfflineRetailV2.Properties.Resources.Disc_, " ", this.GetFotmatProductValue(dblUOMPrice - dblPrice, strDP)) });
                                }
                            }
                            if (strPType == "T")
                            {
                                if (tgininv == "Y")
                                {
                                    Product opdt = new Product()
                                    {
                                        Connection = new SqlConnection(SystemVariables.ConnectionString)
                                    };
                                    DataTable dtemp = opdt.FetchTaggedData(ipid);
                                    foreach (DataRow tgdr in dtemp.Rows)
                                    {
                                        double tgQty = 0;
                                        string tgName = "";
                                        tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                        tgName = tgdr["ItemName"].ToString();
                                        tgQty *= dblQty;
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(tgName, " - ", this.GetFotmatDoubleValue(tgQty)), "", "" });
                                    }
                                    dtemp.Dispose();
                                }
                            }
                        }
                        if (strDiscText.Trim() != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strDiscText), "", "" });
                        }
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, this.GetFotmatProductValue(dblPrice, strDP)), this.GetFotmatDoubleValue(dblQty), this.GetFotmatDoubleValue(lineprice + linetx + tFees + tFeesTax + tDTax) });
                    }
                    prndtblINV1.Dispose();
                    DataTable prndtblLAYPMT = new DataTable();
                    prndtblLAYPMT = this.FetchLayawayPayment();
                    foreach (DataRow drL1 in prndtblLAYPMT.Rows)
                    {
                        double dblLayPayment = 0;
                        string strLayPmtType = "";
                        string strLayPmtDate = "";
                        strLayPmtType = drL1["PaymentType"].ToString();
                        strLayPmtDate = drL1["PaymentDate"].ToString();
                        dblLayPayment = GeneralFunctions.fnDouble(drL1["PaymentAmt"].ToString());
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strLayPmtType, " ", strLayPmtDate), "", this.GetFotmatDoubleValue(dblLayPayment) });
                    }
                    prndtblLAYPMT.Dispose();
                }
                prndtblINV.Dispose();
                dblTotalLayawaySale = this.GetTotalLayawaySale(intPrevLayNo);
                dblTotalLayawayBalance = dblTotalLayawaySale - this.GetTotalLayawayPayment(intPrevLayNo);
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Balance_Due, " "), "", this.GetFotmatDoubleValue(dblTotalLayawayBalance) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Layaway_Due, " "), "", strLayawayDueDate });
                bool boolHATender = false;
                if (!this.blIsLayawayRefund)
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tender, "", "", "" });
                    DataTable prndtblINV2 = new DataTable();
                    this.intTrnNo = this.FetchMaxTranNo();
                    prndtblINV2 = this.FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;
                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender += dblAmount;
                        if (strTender == "Gift Certificate")
                        {
                            strTender = OfflineRetailV2.Properties.Resources.Gift_Cert;
                        }
                        if (strTender == "American Express")
                        {
                            strTender = OfflineRetailV2.Properties.Resources.American_Exp_;
                        }
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender), "", this.GetFotmatDoubleValue(dblAmount) });
                        if ((dr["Name"].ToString() == "Debit Card" ? true : dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = this.FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Cash_Back), "", this.GetFotmatDoubleValue(cashbk) });
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTender, " ", OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblAmount + cashbk) });
                            }
                        }
                        if (dr["Name"].ToString() == "House Account")
                        {
                            boolHATender = true;
                        }
                    }
                    prndtblINV2.Dispose();
                    int prmmgc = 0;
                    POS obcc01mgc = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(this.intInvNo);
                    DataTable ccdtbl11mgc = new DataTable();
                    POS obcc11mgc = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);
                    bool mgc = false;
                    int mgcnt = 0;
                    foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                    {
                        if ((drmgc["CardType"].ToString() == "Mercury Gift Card" || drmgc["CardType"].ToString() == "Precidia Gift Card" || drmgc["CardType"].ToString() == "Datacap Gift Card" ? true : drmgc["CardType"].ToString() == "POSLink Gift Card"))
                        {
                            mgcnt++;
                            if (mgcnt == 1)
                            {
                                mgc = true;
                                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.GIft_Card, "", OfflineRetailV2.Properties.Resources.Balance });
                                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                            this.dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", this.GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                        }
                    }
                    if (mgc)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                }
                if ((!boolHATender ? false : OfflineRetailV2.Data.Settings.HouseAccountBalanceInReceipt == "Y"))
                {
                    POS obcc99 = new POS()
                    {
                        Connection = SystemVariables.Conn
                    };
                    double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(this.intInvNo, GeneralFunctions.fnInt32(strCID));
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.House_Account_Balance, " :"), "", this.GetFotmatDoubleValue(dval), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                string strSign = new string('\u005F', 20);
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.sign_), "", strSign });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if ((OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() == "" ? true : OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim() == null))
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                else
                {
                    string OrginalF = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Data.Settings.ReceiptLayawayPolicy.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                this.dtblstrm.Rows.Add(new object[] { "", string.Concat("* ", OfflineRetailV2.Properties.Resources.Reprinted_Receipt, " *"), "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
            }
            if (this.strPrintType == "WorkOrder")
            {
                string SP1 = new string(' ', 3);
                string SP2 = "";
                string SP3 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }
                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";
                double dblTax = 0;
                double dblTotalSale = 0;
                prndtblINV = this.FetchWOHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intStoreID = 1;
                    intRegisterID = 1;
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    date = GeneralFunctions.fnDate(dr["WorkOrderDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    dblTotalSale = GeneralFunctions.fnDouble(dr["Total"].ToString());
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                }
                prndtblINV.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Work_Order_Number, "", this.intInvNo.ToString() });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                if (strCustCompany != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Company, "", strCustCompany });
                }
                if (strCustName != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName });
                }
                if (strCustID != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID });
                }
                if ((strCustCompany != "" || strCustName != "" ? true : strCustID != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                }
                DataTable dtblCpn = new DataTable();
                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = this.FetchWODetails();
                dtblCpn = prndtblINV1;
                double dblDiscount = 0;
                double dblCoupon = 0;
                double dblFees = 0;
                double dblFeesTax = 0;
                double dblFeesCoupon = 0;
                double dblFeesCouponTax = 0;
                double dblTempTotal = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    if ((dr["ProductType"].ToString() == "C" ? true : dr["ProductType"].ToString() == "Z"))
                    {
                        dblCoupon += GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    }
                    if (dr["ProductType"].ToString() != "C")
                    {
                        if (dr["ProductType"].ToString() != "H")
                        {
                            if (dr["ProductType"].ToString() != "Z")
                            {
                                dblDiscount += GeneralFunctions.fnDouble(dr["Discount"].ToString());
                                string strDescription = "";
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblUOMPrice = 0;
                                double dblDisc = 0;
                                string strDiscText = "";
                                string strFeesText = "";
                                strFeesText = dr["FeesText"].ToString();
                                strDescription = dr["Description"].ToString();
                                strPType = dr["ProductType"].ToString();
                                strMV1 = dr["MOP1"].ToString();
                                strMV2 = dr["MOP2"].ToString();
                                strMV3 = dr["MOP3"].ToString();
                                strSKU = dr["SKU"].ToString();
                                dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                                strDiscText = dr["DiscountText"].ToString();
                                dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                                double tempFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                                double tempFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                                int BuyNGetFreeHeader = 0;
                                string BuyNGetFreeCategory = "";
                                string BuyNGetFreeCaption = "";
                                BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                                BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                                BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();
                                dblTempTotal = dblTempTotal + dblTotalPrice + dblDisc + tempFees + tempFeesTax;
                                dblFees += tempFees;
                                dblFees += tempFeesTax;
                                strDP = dr["DP"].ToString();
                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";
                                this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                                if (BuyNGetFreeCategory == "B")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { "", string.Concat("** ", BuyNGetFreeCaption, " **"), "" });
                                }
                                this.dtblstrm.Rows.Add(new object[] { sPD1, "", "" });
                                if (sPD2.Trim() != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { sPD2, "", "" });
                                }
                                if (sPD3.Trim() != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { sPD3, "", "" });
                                }
                                if (strPType == "M")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "" });
                                    if (strMV2 != "")
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "" });
                                    }
                                    if (strMV3 != "")
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "" });
                                    }
                                }
                                if (strDiscText.Trim() != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strDiscText), "", "" });
                                }
                                if (OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y")
                                {
                                    if (strFeesText != "")
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strFeesText), "", "", "" });
                                    }
                                }
                                DataRowCollection dataRowCollection9 = this.dtblstrm.Rows;
                                object[] fotmatProductValue = new object[] { string.Concat(SP1, this.GetFotmatProductValue(dblPrice, strDP)), null, null };
                                fotmatProductValue[1] = this.GetFotmatProductValue(dblQty, (strPType == "W" ? "3" : strDP));
                                fotmatProductValue[2] = this.GetFotmatDoubleValue(dblTotalPrice);
                                dataRowCollection9.Add(fotmatProductValue);
                            }
                        }
                    }
                }
                prndtblINV1.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                DataRowCollection rows10 = this.dtblstrm.Rows;
                object[] fotmatDoubleValue6 = new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Sub_Total), "", null };
                fotmatDoubleValue6[2] = this.GetFotmatDoubleValue((OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax));
                rows10.Add(fotmatDoubleValue6);
                if (dblDiscount != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, "Discount"), "", this.GetFotmatDoubleValue(dblDiscount) });
                }
                if (dblTax != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":"), "", this.GetFotmatDoubleValue(dblTax) });
                }
                if ((dblFees != 0 || dblFeesTax != 0 ? OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y" : false))
                {
                    DataTable dFees = this.FetchInvFees();
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    if (dblFees + dblFeesCoupon != 0)
                    {
                        if (dFees.Rows.Count == 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString()), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                        if (dFees.Rows.Count > 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges), "", this.GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        }
                    }
                    if (dblFeesTax + dblFeesCouponTax != 0)
                    {
                        if (dFees.Rows.Count == 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString(), " ", OfflineRetailV2.Properties.Resources.Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                        if (dFees.Rows.Count > 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges_Tax), "", this.GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        }
                    }
                }
                if (dblCoupon != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Discount_on_Ticket, "", this.GetFotmatDoubleValue(dblCoupon), "" });
                }
                bool flg = false;
                foreach (DataRow drc in dtblCpn.Rows)
                {
                    if ((drc["Producttype"].ToString() == "C" ? true : drc["Producttype"].ToString() == "Z"))
                    {
                        flg = true;
                        break;
                    }
                }
                if (flg)
                {
                    foreach (DataRow dr in dtblCpn.Rows)
                    {
                        if ((dr["Producttype"].ToString() != "C" ? true : dr["Producttype"].ToString() != "Z"))
                        {
                            string strTender = "";
                            double dblAmount = 0;
                            strTender = dr["Description"].ToString();
                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            this.SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD1), "", "", "" });
                            if (sPD2.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD2), "", "", "" });
                            }
                            if (sPD3.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD3), "", "", "" });
                            }
                            dblAmount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                            this.dtblstrm.Rows.Add(new object[] { "", "", this.GetFotmatDoubleValue(dblAmount), "" });
                        }
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblTotalSale), "B" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if ((OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != null))
                {
                    string OrginalF = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Data.Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
            }
            if (this.strPrintType == "Suspend Receipt")
            {
                string SP1 = new string(' ', 3);
                string SP2 = "";
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "", "", "logo" });
                }
                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                DataTable prndtblINV1 = new DataTable();
                DataTable dtblCpn = new DataTable();
                prndtblINV.Columns.Add("StoreID", Type.GetType("System.String"));
                prndtblINV.Columns.Add("RegisterID", Type.GetType("System.String"));
                prndtblINV.Columns.Add("TransDate", Type.GetType("System.String"));
                prndtblINV.Columns.Add("CID", Type.GetType("System.String"));
                prndtblINV.Columns.Add("CustID", Type.GetType("System.String"));
                prndtblINV.Columns.Add("CustName", Type.GetType("System.String"));
                prndtblINV.Columns.Add("CustCompany", Type.GetType("System.String"));
                prndtblINV.Columns.Add("EmpID", Type.GetType("System.String"));
                prndtblINV.Columns.Add("Tax", Type.GetType("System.String"));
                prndtblINV.Columns.Add("Tax1", Type.GetType("System.String"));
                prndtblINV.Columns.Add("Tax2", Type.GetType("System.String"));
                prndtblINV.Columns.Add("Tax3", Type.GetType("System.String"));
                prndtblINV.Columns.Add("TotalSale", Type.GetType("System.String"));
                prndtblINV.Columns.Add("TaxNM1", Type.GetType("System.String"));
                prndtblINV.Columns.Add("TaxNM2", Type.GetType("System.String"));
                prndtblINV.Columns.Add("TaxNM3", Type.GetType("System.String"));
                prndtblINV.Columns.Add("Discount", Type.GetType("System.String"));
                prndtblINV.Columns.Add("Coupon", Type.GetType("System.String"));
                prndtblINV.Columns.Add("CustomerDOB", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("ProductType", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("Description", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("SKU", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("Price", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("Qty", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("TotalPrice", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("MOP1", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("MOP2", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("MOP3", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("DP", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("NormalPrice", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("UOMPrice", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("DiscountID", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("DiscountText", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("Discount", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("ItemIndex", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("Fees", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("FeesTax", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("FeesText", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("Notes", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("BuyNGetFreeHeaderID", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("BuyNGetFreeCategory", Type.GetType("System.String"));
                prndtblINV1.Columns.Add("BuyNGetFreeName", Type.GetType("System.String"));
                this.FetchSuspendRecord(ref prndtblINV, ref prndtblINV1);
                dtblCpn = prndtblINV1;
                int intStoreID = 0;
                int intRegisterID = 0;
                string strEmpID = "";
                string strCustID = "";
                string strCID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";
                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblCoupon = 0;
                double dblTotalSale = 0;
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                string strCustDOB = "";
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();
                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                    strCustDOB = dr["CustomerDOB"].ToString();
                }
                prndtblINV.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Suspended__, "", this.intInvNo.ToString() });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                if (strCustCompany != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Company, "", strCustCompany });
                }
                if (strCustName != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer, "", strCustName });
                }
                if (strCustID != "")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Customer_ID, "", strCustID });
                }
                if (strCustDOB != "")
                {
                    DataRowCollection dataRowCollection10 = this.dtblstrm.Rows;
                    object[] str1 = new object[] { OfflineRetailV2.Properties.Resources.Date_of_Birth, "", null, null };
                    date = GeneralFunctions.fnDate(strCustDOB);
                    str1[2] = date.ToString(SystemVariables.DateFormat);
                    str1[3] = "";
                    dataRowCollection10.Add(str1);
                }
                if ((strCustCompany != "" || strCustName != "" || strCustID != "" ? true : strCustDOB != ""))
                {
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                }
                double dblFees = 0;
                double dblFeesTax = 0;
                double dblTempTotal = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    if (dr["ProductType"].ToString() != "C")
                    {
                        if (dr["ProductType"].ToString() != "Z")
                        {
                            if (dr["ProductType"].ToString() != "H")
                            {
                                string strDiscText = "";
                                string strDescription = "";
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                double dblDisc = 0;
                                string strInvNotes = "";
                                strDescription = dr["Description"].ToString();
                                strPType = dr["ProductType"].ToString();
                                strMV1 = dr["MOP1"].ToString();
                                strMV2 = dr["MOP2"].ToString();
                                strMV3 = dr["MOP3"].ToString();
                                strDiscText = dr["DiscountText"].ToString();
                                strSKU = dr["SKU"].ToString();
                                dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                                string strFeesText = "";
                                strFeesText = dr["FeesText"].ToString();
                                strInvNotes = dr["Notes"].ToString();
                                int BuyNGetFreeHeader = 0;
                                string BuyNGetFreeCategory = "";
                                string BuyNGetFreeCaption = "";
                                BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                                BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                                BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();
                                double tempFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                                double tempFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                                dblTempTotal = dblTempTotal + dblTotalPrice + dblDisc + tempFees + tempFeesTax;
                                dblFees += tempFees;
                                dblFeesTax += tempFeesTax;
                                strDP = dr["DP"].ToString();
                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";
                                this.SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                                if (BuyNGetFreeCategory == "B")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { "", string.Concat("** ", BuyNGetFreeCaption, " **"), "" });
                                }
                                this.dtblstrm.Rows.Add(new object[] { sPD1, "", "" });
                                if (sPD2.Trim() != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { sPD2, "", "" });
                                }
                                if (sPD3.Trim() != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { sPD3, "", "" });
                                }
                                if (strPType == "M")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV1), "", "" });
                                    if (strMV2 != "")
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV2), "", "" });
                                    }
                                    if (strMV3 != "")
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strMV3), "", "" });
                                    }
                                }
                                if (strDiscText.Trim() != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strDiscText), "", "" });
                                }
                                if (OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y")
                                {
                                    if (strFeesText != "")
                                    {
                                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, strFeesText), "", "", "" });
                                    }
                                }
                                DataRowCollection rows11 = this.dtblstrm.Rows;
                                object[] fotmatProductValue1 = new object[] { string.Concat(SP1, this.GetFotmatProductValue(dblPrice, strDP)), null, null };
                                fotmatProductValue1[1] = this.GetFotmatProductValue(dblQty, (strPType == "W" ? "3" : strDP));
                                fotmatProductValue1[2] = this.GetFotmatDoubleValue(dblTotalPrice);
                                rows11.Add(fotmatProductValue1);
                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    this.ArrangeText(strInvNotes, 30, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;
                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);
                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesN++;
                                                len -= 30;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                        }
                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }
                                    if (CopyOrginalN.Length > 30)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesN++;
                                            len -= 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(30, len);
                                            }
                                        }
                                    }
                                    if (NumberOfOccurancesN == 0)
                                    {
                                        NumberOfOccurancesN = 1;
                                    }
                                    else if (OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())
                                    {
                                        NumberOfOccurancesN++;
                                    }
                                    this.dtblstrm.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                                }
                            }
                        }
                    }
                }
                prndtblINV1.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                DataRowCollection dataRowCollection11 = this.dtblstrm.Rows;
                object[] fotmatDoubleValue7 = new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Sub_Total), "", null };
                fotmatDoubleValue7[2] = this.GetFotmatDoubleValue((OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax));
                dataRowCollection11.Add(fotmatDoubleValue7);
                if (dblDiscount > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, "Discount"), "", this.GetFotmatDoubleValue(dblDiscount) });
                }
                if (dblTax != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    if (dblTax1 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName1), "", this.GetFotmatDoubleValue(dblTax1) });
                    }
                    if (dblTax2 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName2), "", this.GetFotmatDoubleValue(dblTax2) });
                    }
                    if (dblTax3 != 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Tax, ":", strTaxName3), "", this.GetFotmatDoubleValue(dblTax3) });
                    }
                }
                if ((dblFees != 0 || dblFeesTax != 0 ? OfflineRetailV2.Data.Settings.ShowFeesInReceipt == "Y" : false))
                {
                    DataTable dFees = this.FetchInvFees();
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    if (dblFees != 0)
                    {
                        if (dFees.Rows.Count == 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString()), "", this.GetFotmatDoubleValue(dblFees), "" });
                        }
                        if (dFees.Rows.Count > 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges), "", this.GetFotmatDoubleValue(dblFees), "" });
                        }
                    }
                    if (dblFeesTax != 0)
                    {
                        if (dFees.Rows.Count == 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, dFees.Rows[0]["FeesName"].ToString(), " ", OfflineRetailV2.Properties.Resources.Tax), "", this.GetFotmatDoubleValue(dblFeesTax), "" });
                        }
                        if (dFees.Rows.Count > 1)
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP2, OfflineRetailV2.Properties.Resources.Fees___Charges_Tax), "", this.GetFotmatDoubleValue(dblFeesTax), "" });
                        }
                    }
                }
                if (dblCoupon != 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Discount_on_Ticket, "", this.GetFotmatDoubleValue(dblCoupon), "" });
                }
                bool flg = false;
                foreach (DataRow drc in dtblCpn.Rows)
                {
                    if ((drc["Producttype"].ToString() == "C" ? true : drc["Producttype"].ToString() == "Z"))
                    {
                        flg = true;
                        break;
                    }
                }
                if (flg)
                {
                    foreach (DataRow dr in dtblCpn.Rows)
                    {
                        if ((dr["Producttype"].ToString() == "C" ? true : dr["Producttype"].ToString() == "Z"))
                        {
                            string strTender = "";
                            double dblAmount = 0;
                            strTender = dr["Description"].ToString();
                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            this.SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD1), "", "", "" });
                            if (sPD2.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD2), "", "", "" });
                            }
                            if (sPD3.Trim() != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, sPD3), "", "", "" });
                            }
                            dblAmount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                            this.dtblstrm.Rows.Add(new object[] { "", "", this.GetFotmatDoubleValue(dblAmount), "" });
                        }
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total_Due), "", this.GetFotmatDoubleValue(dblTotalSale) });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if ((OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() == "" ? false : OfflineRetailV2.Data.Settings.ReceiptFooter.Trim() != null))
                {
                    string OrginalF = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Data.Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
            }
            if (this.strPrintType == "Closeout")
            {
                string SP1 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                this.GetRecieptHeader();
                DataTable dtblH = new DataTable();
                DataTable dtblT = new DataTable();
                DataTable prndtblHeader = new DataTable();
                string strEmpID = "";
                string strTerminal = "";
                int intNoOfSale = 0;
                string strStartDate = "";
                string strStartTime = "";
                string strEndDate = "";
                string strEndTime = "";
                string strNotes = "";
                double dblTaxedSales = 0;
                double dblNonTaxedSales = 0;
                string strTax1Exist = "N";
                string strTax1Name = "";
                double dblTax1Amount = 0;
                string strTax2Exist = "N";
                string strTax2Name = "";
                double dblTax2Amount = 0;
                string strTax3Exist = "N";
                string strTax3Name = "";
                double dblTax3Amount = 0;
                double dblServiceSales = 0;
                double dblProductSales = 0;
                double dblOtherSales = 0;
                int intDiscountItemNo = 0;
                double dblDiscountItemAmount = 0;
                int intDiscountInvoiceNo = 0;
                double dblDiscountInvoiceAmount = 0;
                double dblLayawayDeposits = 0;
                double dblLayawayRefund = 0;
                double dblLayawayPayment = 0;
                double dblLayawaySalesPosted = 0;
                double dblPaidOuts = 0;
                double dblGCsold = 0;
                double dblSCissued = 0;
                double dblSCredeemed = 0;
                double dblHACharged = 0;
                double dblHApayments = 0;
                int intNoSaleCount = 0;
                double dblTotalSales = 0;
                double dblRentSales = 0;
                double dblRentDeposit = 0;
                double dblRentDepositReturned = 0;
                double dblRepairSales = 0;
                double dblSTax1Amount = 0;
                double dblSTax2Amount = 0;
                double dblSTax3Amount = 0;
                double dblBTax1Amount = 0;
                double dblBTax2Amount = 0;
                double dblBTax3Amount = 0;
                double dblRntTax1Amount = 0;
                double dblRntTax2Amount = 0;
                double dblRntTax3Amount = 0;
                double dblRTax1Amount = 0;
                double dblRTax2Amount = 0;
                double dblRTax3Amount = 0;
                double dblSDiscountItemAmount = 0;
                double dblBDiscountItemAmount = 0;
                double dblRDiscountItemAmount = 0;
                double dblRntDiscountInvoiceAmount = 0;
                double dblRDiscountInvoiceAmount = 0;
                int intSDiscountItemNo = 0;
                int intBDiscountItemNo = 0;
                int intRDiscountItemNo = 0;
                int intRntDiscountInvoiceNo = 0;
                int intRDiscountInvoiceNo = 0;
                int intSalesInvoiceCount = 0;
                int intRentInvoiceCount = 0;
                int intRepairInvoiceCount = 0;
                double dblProductTx = 0;
                double dblProductNTx = 0;
                double dblServiceTx = 0;
                double dblServiceNTx = 0;
                double dblOtherTx = 0;
                double dblOtherNTx = 0;
                double dblCashTip = 0;
                double dblCCTip = 0;
                string strTip = "";
                double dblSalesFees = 0;
                double dblSalesFeesTax = 0;
                double dblRentFees = 0;
                double dblRentFeesTax = 0;
                double dblRepairFees = 0;
                double dblRepairFeesTax = 0;
                double dblDTax = 0;
                double dblMGC = 0;
                double dblPGC = 0;
                double dblDGC = 0;
                double dblPLGC = 0;
                double dblBot = 0;
                double dblRepairDeposit = 0;
                int intFreeQty = 0;
                double dblFreeAmount = 0;
                double dblLottoPayout = 0;
                prndtblHeader = this.FetchCOHeader();
                if ((!this.IsCloseout ? false : OfflineRetailV2.Data.Settings.CloseoutExport == "Y"))
                {
                    dtblH = prndtblHeader;
                }
                foreach (DataRow dr in prndtblHeader.Rows)
                {
                    strEmpID = dr["EmpID"].ToString();
                    intNoOfSale = GeneralFunctions.fnInt32(dr["NoOfSales"].ToString());
                    strStartDate = dr["StartDateTime"].ToString();
                    strStartTime = dr["StartTime"].ToString();
                    strEndDate = dr["EndDateTime"].ToString();
                    strEndTime = dr["EndTime"].ToString();
                    strNotes = dr["Notes"].ToString();
                    strTerminal = dr["TerminalName"].ToString();
                    dblTaxedSales = GeneralFunctions.fnDouble(dr["TaxedSales"].ToString());
                    dblNonTaxedSales = GeneralFunctions.fnDouble(dr["NonTaxedSales"].ToString());
                    strTax1Exist = dr["Tax1Exist"].ToString();
                    strTax1Name = dr["Tax1Name"].ToString();
                    dblTax1Amount = GeneralFunctions.fnDouble(dr["Tax1Amount"].ToString());
                    strTax2Exist = dr["Tax2Exist"].ToString();
                    strTax2Name = dr["Tax2Name"].ToString();
                    dblTax2Amount = GeneralFunctions.fnDouble(dr["Tax2Amount"].ToString());
                    strTax3Exist = dr["Tax3Exist"].ToString();
                    strTax3Name = dr["Tax3Name"].ToString();
                    dblTax3Amount = GeneralFunctions.fnDouble(dr["Tax3Amount"].ToString());
                    dblServiceSales = GeneralFunctions.fnDouble(dr["ServiceSales"].ToString());
                    dblProductSales = GeneralFunctions.fnDouble(dr["ProductSales"].ToString());
                    dblOtherSales = GeneralFunctions.fnDouble(dr["OtherSales"].ToString());
                    intDiscountItemNo = GeneralFunctions.fnInt32(dr["DiscountItemNo"].ToString());
                    dblDiscountItemAmount = GeneralFunctions.fnDouble(dr["DiscountItemAmount"].ToString());
                    intDiscountInvoiceNo = GeneralFunctions.fnInt32(dr["DiscountInvoiceNo"].ToString());
                    dblDiscountInvoiceAmount = GeneralFunctions.fnDouble(dr["DiscountInvoiceAmount"].ToString());
                    dblLayawayDeposits = GeneralFunctions.fnDouble(dr["LayawayDeposits"].ToString());
                    dblLayawayRefund = GeneralFunctions.fnDouble(dr["LayawayRefund"].ToString());
                    dblLayawayPayment = GeneralFunctions.fnDouble(dr["LayawayPayment"].ToString());
                    dblLayawaySalesPosted = GeneralFunctions.fnDouble(dr["LayawaySalesPosted"].ToString());
                    dblPaidOuts = GeneralFunctions.fnDouble(dr["PaidOuts"].ToString());
                    dblGCsold = GeneralFunctions.fnDouble(dr["GCsold"].ToString());
                    dblSCissued = GeneralFunctions.fnDouble(dr["SCissued"].ToString());
                    dblSCredeemed = GeneralFunctions.fnDouble(dr["SCredeemed"].ToString());
                    dblHACharged = GeneralFunctions.fnDouble(dr["HACharged"].ToString());
                    dblHApayments = GeneralFunctions.fnDouble(dr["HApayments"].ToString());
                    intNoSaleCount = GeneralFunctions.fnInt32(dr["NoSaleCount"].ToString());
                    dblRentSales = GeneralFunctions.fnDouble(dr["RentSales"].ToString());
                    dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                    dblRentDepositReturned = GeneralFunctions.fnDouble(dr["RentDepositReturned"].ToString());
                    dblRepairSales = GeneralFunctions.fnDouble(dr["RepairSales"].ToString());
                    dblSTax1Amount = GeneralFunctions.fnDouble(dr["STax1Amount"].ToString());
                    dblSTax2Amount = GeneralFunctions.fnDouble(dr["STax2Amount"].ToString());
                    dblSTax3Amount = GeneralFunctions.fnDouble(dr["STax3Amount"].ToString());
                    dblBTax1Amount = GeneralFunctions.fnDouble(dr["BTax1Amount"].ToString());
                    dblBTax2Amount = GeneralFunctions.fnDouble(dr["BTax2Amount"].ToString());
                    dblBTax3Amount = GeneralFunctions.fnDouble(dr["BTax3Amount"].ToString());
                    dblRTax1Amount = GeneralFunctions.fnDouble(dr["RTax1Amount"].ToString());
                    dblRTax2Amount = GeneralFunctions.fnDouble(dr["RTax2Amount"].ToString());
                    dblRTax3Amount = GeneralFunctions.fnDouble(dr["RTax3Amount"].ToString());
                    dblRntTax1Amount = GeneralFunctions.fnDouble(dr["RntTax1Amount"].ToString());
                    dblRntTax2Amount = GeneralFunctions.fnDouble(dr["RntTax2Amount"].ToString());
                    dblRntTax3Amount = GeneralFunctions.fnDouble(dr["RntTax3Amount"].ToString());
                    dblSDiscountItemAmount = GeneralFunctions.fnDouble(dr["SDiscountItemAmount"].ToString());
                    dblBDiscountItemAmount = GeneralFunctions.fnDouble(dr["BDiscountItemAmount"].ToString());
                    dblRDiscountItemAmount = GeneralFunctions.fnDouble(dr["RDiscountItemAmount"].ToString());
                    dblRntDiscountInvoiceAmount = GeneralFunctions.fnDouble(dr["RntDiscountInvoiceAmount"].ToString());
                    dblRDiscountInvoiceAmount = GeneralFunctions.fnDouble(dr["RDiscountInvoiceAmount"].ToString());
                    intSDiscountItemNo = GeneralFunctions.fnInt32(dr["SDiscountItemNo"].ToString());
                    intBDiscountItemNo = GeneralFunctions.fnInt32(dr["BDiscountItemNo"].ToString());
                    intRDiscountItemNo = GeneralFunctions.fnInt32(dr["RDiscountItemNo"].ToString());
                    intRntDiscountInvoiceNo = GeneralFunctions.fnInt32(dr["RntDiscountInvoiceNo"].ToString());
                    intRDiscountInvoiceNo = GeneralFunctions.fnInt32(dr["RDiscountInvoiceNo"].ToString());
                    intSalesInvoiceCount = GeneralFunctions.fnInt32(dr["SalesInvoiceCount"].ToString());
                    intRentInvoiceCount = GeneralFunctions.fnInt32(dr["RentInvoiceCount"].ToString());
                    intRepairInvoiceCount = GeneralFunctions.fnInt32(dr["RepairInvoiceCount"].ToString());
                    dblProductTx = GeneralFunctions.fnDouble(dr["ProductTx"].ToString());
                    dblProductNTx = GeneralFunctions.fnDouble(dr["ProductNTx"].ToString());
                    dblServiceTx = GeneralFunctions.fnDouble(dr["ServiceTx"].ToString());
                    dblServiceNTx = GeneralFunctions.fnDouble(dr["ServiceNTx"].ToString());
                    dblOtherTx = GeneralFunctions.fnDouble(dr["OtherTx"].ToString());
                    dblOtherNTx = GeneralFunctions.fnDouble(dr["OtherNTx"].ToString());
                    dblCashTip = GeneralFunctions.fnDouble(dr["CashTip"].ToString());
                    dblCCTip = GeneralFunctions.fnDouble(dr["CCTip"].ToString());
                    dblSalesFees = GeneralFunctions.fnDouble(dr["SalesFees"].ToString());
                    dblSalesFeesTax = GeneralFunctions.fnDouble(dr["SalesFeesTax"].ToString());
                    dblRentFees = GeneralFunctions.fnDouble(dr["RentFees"].ToString());
                    dblRentFeesTax = GeneralFunctions.fnDouble(dr["RentFeesTax"].ToString());
                    dblRepairFees = GeneralFunctions.fnDouble(dr["RepairFees"].ToString());
                    dblRepairFeesTax = GeneralFunctions.fnDouble(dr["RepairFeesTax"].ToString());
                    dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());
                    dblMGC = GeneralFunctions.fnDouble(dr["MGCsold"].ToString());
                    dblPGC = GeneralFunctions.fnDouble(dr["PGCsold"].ToString());
                    dblDGC = GeneralFunctions.fnDouble(dr["DGCsold"].ToString());
                    dblPLGC = GeneralFunctions.fnDouble(dr["PLGCsold"].ToString());
                    dblBot = GeneralFunctions.fnDouble(dr["BottleRefund"].ToString());
                    dblRepairDeposit = GeneralFunctions.fnDouble(dr["RepairDeposit"].ToString());
                    intFreeQty = GeneralFunctions.fnInt32(dr["FreeQty"].ToString());
                    dblFreeAmount = GeneralFunctions.fnDouble(dr["FreeAmount"].ToString());
                    strTip = dr["Tip"].ToString();
                    dblLottoPayout = GeneralFunctions.fnDouble(dr["LottoPayout"].ToString());
                }
                dblTotalSales = dblProductSales + dblServiceSales + dblOtherSales + dblSTax1Amount + dblSTax2Amount + dblSTax3Amount + dblBTax1Amount + dblBTax2Amount + dblBTax3Amount - dblDiscountInvoiceAmount + dblSalesFees + dblSalesFeesTax + (OfflineRetailV2.Data.Settings.TaxInclusive == "N" ? dblTax1Amount + dblTax2Amount + dblTax3Amount : 0);
                prndtblHeader.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.CLOSE_OUT_REPORT, "", "", "OneColumn" });
                if (this.strCloseoutType == "C")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Consolidated, "", "", "OneColumn" });
                }
                if (this.strCloseoutType == "E")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.By_Employee, "", "", "OneColumn" });
                }
                if (this.strCloseoutType == "T")
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.By_Terminal, "", "", "OneColumn" });
                }
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.TRANSACTION_SUMMARY, "", "", "OneColumn" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Begin_, "", string.Concat(strStartDate, SP1, strStartTime) });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.End_, "", string.Concat(strEndDate, SP1, strEndTime) });
                if (this.strCloseoutType == "C")
                {
                    if (SystemVariables.CurrentUserID > 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Requester_, SystemVariables.CurrentUserCode, "" });
                    }
                    else
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Requester_, SystemVariables.CurrentUserName, "" });
                    }
                }
                if (this.strCloseoutType == "E")
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Employee, "#:"), strEmpID, "" });
                }
                if (this.strCloseoutType == "T")
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, "#:"), strTerminal, "" });
                }
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Close_Out_, ":"), string.Concat(" ", this.intCloseoutID.ToString()), "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.NOTE, ":"), "", "" });
                if (strNotes != "")
                {
                    string OrginalF = "";
                    this.ArrangeText(strNotes, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);
                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (cutstr != "")
                                {
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len -= 30;
                            if (CopyOrginalF != "")
                            {
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                        }
                    }
                    if (NumberOfOccurancesF == 0)
                    {
                        NumberOfOccurancesF = 1;
                    }
                    else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                    {
                        NumberOfOccurancesF++;
                    }
                    this.dtblstrm.Rows.Add(new object[] { strNotes, "", "", NumberOfOccurancesF.ToString() });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.SALES, "", "", "OneColumn" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.No__of_Invoices, ": "), intSalesInvoiceCount.ToString(), "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Product_Sales, "", this.GetFotmatDoubleValue(dblProductSales) });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Taxed, "", this.GetFotmatDoubleValue(dblProductTx) });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Non_Taxed, "", this.GetFotmatDoubleValue(dblProductNTx) });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Service_Sales, "", this.GetFotmatDoubleValue(dblServiceSales) });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Taxed, "", this.GetFotmatDoubleValue(dblServiceTx) });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Non_Taxed, "", this.GetFotmatDoubleValue(dblServiceNTx) });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Other_Sales, "", this.GetFotmatDoubleValue(dblOtherSales) });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Taxed, "", this.GetFotmatDoubleValue(dblOtherTx) });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Non_Taxed, "", this.GetFotmatDoubleValue(dblOtherNTx) });
                if (OfflineRetailV2.Data.Settings.TaxInclusive == "N")
                {
                    if (strTax1Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax1Name), "", this.GetFotmatNonZeroDoubleValue(dblTax1Amount) });
                    }
                    if (strTax2Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax2Name), "", this.GetFotmatNonZeroDoubleValue(dblTax2Amount) });
                    }
                    if (strTax3Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax3Name), "", this.GetFotmatNonZeroDoubleValue(dblTax3Amount) });
                    }
                    if (dblDTax == 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    else
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Destination_Tax), "", this.GetFotmatNonZeroDoubleValue(dblDTax) });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.DISCOUNTS, "", "", "OneColumn" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Item), "", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Product), this.GetFotmatNonZeroIntValue(intDiscountItemNo), this.GetFotmatNonZeroDoubleValue1(dblDiscountItemAmount) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Service), this.GetFotmatNonZeroIntValue(intSDiscountItemNo), this.GetFotmatNonZeroDoubleValue1(dblSDiscountItemAmount) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.other), this.GetFotmatNonZeroIntValue(intBDiscountItemNo), this.GetFotmatNonZeroDoubleValue1(dblBDiscountItemAmount) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Invoice), this.GetFotmatNonZeroIntValue(intDiscountInvoiceNo), this.GetFotmatNonZeroDoubleValue1(dblDiscountInvoiceAmount) });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Free_Items), this.GetFotmatNonZeroIntValue(intFreeQty), this.GetFotmatNonZeroDoubleValue1(dblFreeAmount) });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Fees___Charges, "", this.GetFotmatDoubleValue(dblSalesFees) });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Fees___Charges_Tax, "", this.GetFotmatDoubleValue(dblSalesFeesTax) });
                this.dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Total, "", this.GetFotmatDoubleValue(dblTotalSales), "B" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if (OfflineRetailV2.Data.Settings.TaxInclusive == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "TAX", "", "" });
                    if (strTax1Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax1Name), "", this.GetFotmatNonZeroDoubleValue(dblTax1Amount) });
                    }
                    if (strTax2Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax2Name), "", this.GetFotmatNonZeroDoubleValue(dblTax2Amount) });
                    }
                    if (strTax3Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax3Name), "", this.GetFotmatNonZeroDoubleValue(dblTax3Amount) });
                    }
                    if (dblDTax == 0)
                    {
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    else
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Destination_Tax), "", this.GetFotmatNonZeroDoubleValue(dblDTax) });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                }
                if (intRentInvoiceCount > 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.RENTS, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.No__of_Invoices, ": "), intRentInvoiceCount.ToString(), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Net_Issued, "", this.GetFotmatDoubleValue(dblRentSales) });
                    if (strTax1Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax1Name), "", this.GetFotmatNonZeroDoubleValue(dblRntTax1Amount) });
                    }
                    if (strTax2Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax2Name), "", this.GetFotmatNonZeroDoubleValue(dblRntTax2Amount) });
                    }
                    if (strTax3Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax3Name), "", this.GetFotmatNonZeroDoubleValue(dblRntTax3Amount) });
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Deposits, "", this.GetFotmatDoubleValue(dblRentDeposit) });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Deposits_Returned, "", this.GetFotmatDoubleValue1(dblRentDepositReturned) });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.DISCOUNTS, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { SP1, this.GetFotmatNonZeroIntValue(intRntDiscountInvoiceNo), this.GetFotmatNonZeroDoubleValue1(dblRntDiscountInvoiceAmount) });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Fees___Charges, "", this.GetFotmatDoubleValue(dblRentFees) });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Fees___Charges_Tax, "", this.GetFotmatDoubleValue(dblRentFeesTax) });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if ((intRepairInvoiceCount > 0 ? true : dblRepairDeposit > 0))
                {
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.REPAIRS, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.No__of_Invoices, ": "), intRepairInvoiceCount.ToString(), "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Amount, "", this.GetFotmatDoubleValue(dblRepairSales) });
                    if (strTax1Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax1Name), "", this.GetFotmatNonZeroDoubleValue(dblRTax1Amount) });
                    }
                    if (strTax2Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax2Name), "", this.GetFotmatNonZeroDoubleValue(dblRTax2Amount) });
                    }
                    if (strTax3Exist == "Y")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTax3Name), "", this.GetFotmatNonZeroDoubleValue(dblRTax3Amount) });
                    }
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Deposit, "", this.GetFotmatDoubleValue(dblRepairDeposit) });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.DISCOUNTS, "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Item), this.GetFotmatNonZeroIntValue(intRDiscountItemNo), this.GetFotmatNonZeroDoubleValue1(dblRDiscountItemAmount) });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Invoice), this.GetFotmatNonZeroIntValue(intRDiscountInvoiceNo), this.GetFotmatNonZeroDoubleValue1(dblRDiscountInvoiceAmount) });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Fees___Charges, "", this.GetFotmatDoubleValue(dblRepairFees) });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Fees___Charges_Tax, "", this.GetFotmatDoubleValue(dblRepairFeesTax) });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.NON_SALES, "", "", "OneColumn" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Layaway_Deposits), "", this.GetFotmatDoubleValue(dblLayawayDeposits), "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Layaway_Refunds), "", this.GetFotmatDoubleValue(dblLayawayRefund), "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Layaway_Payments), "", this.GetFotmatDoubleValue(dblLayawayPayment), "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Layaway_Sales_Posted), "", this.GetFotmatDoubleValue(dblLayawaySalesPosted), "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.No_Sale_Count), "", intNoSaleCount, "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Paid_Outs), "", this.GetFotmatDoubleValue(dblPaidOuts), "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Lotto_Payout), "", this.GetFotmatDoubleValue(dblLottoPayout), "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Gift_Cert__Sold), "", this.GetFotmatDoubleValue(dblGCsold), "TwoOneColumn" });
                if (OfflineRetailV2.Data.Settings.PaymentGateway == 2)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Mercury_Gift_Card_Sold), "", this.GetFotmatDoubleValue(dblMGC), "TwoOneColumn" });
                }
                if (OfflineRetailV2.Data.Settings.PaymentGateway == 3)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Mercury_Gift_Card_Sold), "", this.GetFotmatDoubleValue(dblPGC), "TwoOneColumn" });
                }
                if (OfflineRetailV2.Data.Settings.PaymentGateway == 5)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Datacap_Gift_Card_Sold), "", this.GetFotmatDoubleValue(dblDGC), "TwoOneColumn" });
                }
                if (OfflineRetailV2.Data.Settings.PaymentGateway == 7)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.POSLink_Gift_Card_Sold), "", this.GetFotmatDoubleValue(dblPLGC), "TwoOneColumn" });
                }
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.House_Account_Payments), "", this.GetFotmatDoubleValue(dblHApayments), "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Bottle_Refund), "", this.GetFotmatDoubleValue(dblBot), "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.STORE_CREDIT, "", "", "OneColumn" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Issued), "", this.GetFotmatDoubleValue(dblSCissued) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Redeemed), "", this.GetFotmatDoubleValue(dblSCredeemed) });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.HOUSE_ACCOUNT, "", "", "OneColumn" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Charged), "", this.GetFotmatDoubleValue(dblHACharged), "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Account_Payments), "", this.GetFotmatDoubleValue(dblHApayments), "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if (OfflineRetailV2.Data.Settings.AcceptTips == "Y")
                {
                    if (this.strCloseoutType != "T")
                    {
                        this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.TIPS, "", strTip });
                        this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.RETURNS, string.Concat(OfflineRetailV2.Properties.Resources.Invoice, "# "), "" });
                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = this.FetchCOReturn();
                double dblTempTotal = 0;
                int intC = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    intC++;
                    string strReturnSKU = "";
                    string strReturnInvoiceNo = "";
                    double dblReturnAmount = 0;
                    strReturnSKU = dr["ReturnSKU"].ToString();
                    strReturnInvoiceNo = dr["ReturnInvoiceNo"].ToString();
                    dblReturnAmount = GeneralFunctions.fnDouble(dr["ReturnAmount"].ToString());
                    dblTempTotal += dblReturnAmount;
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strReturnSKU), strReturnInvoiceNo, this.GetFotmatDoubleValue(dblReturnAmount) });
                }
                prndtblINV1.Dispose();
                if (intC <= 0)
                {
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.NoReturns), "", "", "OneColumn" });
                }
                else
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total), "", this.GetFotmatDoubleValue(dblTempTotal), "" });
                }
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.TENDER_RECONCILIATION, "", "", "OneColumn" });
                this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Tender, "", "", "OneColumn" });
                DataTable prndtblINV2 = new DataTable();
                prndtblINV2 = this.FetchCOTender();
                if ((!this.IsCloseout ? false : OfflineRetailV2.Data.Settings.CloseoutExport == "Y"))
                {
                    dtblT = prndtblINV2;
                }
                double dblTTotal = 0;
                bool blCashFloat = false;
                foreach (DataRow dr in prndtblINV2.Rows)
                {
                    if (dr["TenderName"].ToString().Contains("Cash Float"))
                    {
                        blCashFloat = true;
                        break;
                    }
                }
                foreach (DataRow dr in prndtblINV2.Rows)
                {
                    string strTenderName = "";
                    string strTenderCount = "";
                    double dblTenderAmount = 0;
                    strTenderName = dr["TenderName"].ToString();
                    strTenderCount = dr["TenderCount"].ToString();
                    dblTenderAmount = GeneralFunctions.fnDouble(dr["TenderAmount"].ToString());
                    if (strTenderName == "Card Processing Total")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Card_Proc_Total), "", this.GetFotmatDoubleValue(dblTenderAmount) });
                    }
                    else if (dblTenderAmount != -929292)
                    {
                        dblTTotal += dblTenderAmount;
                        if (strTenderName.StartsWith("Gift Certificate"))
                        {
                            strTenderName.Replace("Gift Certificate", OfflineRetailV2.Properties.Resources.Gift_Cert);
                        }
                        if (strTenderName.StartsWith("American Express"))
                        {
                            strTenderName = strTenderName.Replace("American Express", OfflineRetailV2.Properties.Resources.American_Exp_);
                        }
                        if (strTenderName.StartsWith("Debit Card Cash Back"))
                        {
                            strTenderName = strTenderName.Replace("Debit Card Cash Back", OfflineRetailV2.Properties.Resources.Cash_Back);
                        }
                        if ((!blCashFloat ? true : strTenderName != "Cash"))
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTenderName), "", this.GetFotmatDoubleValue(dblTenderAmount) });
                        }
                        else
                        {
                            this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTenderName), "", "" });
                        }
                    }
                }
                prndtblINV2.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total_Amount), "", this.GetFotmatDoubleValue(dblTTotal) });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.COUNTS, "", "", "OneColumn" });
                DataTable prndtblINV3 = new DataTable();
                prndtblINV3 = this.FetchCOTenderCount();
                double dblCTotal = 0;
                foreach (DataRow dr in prndtblINV3.Rows)
                {
                    string strTenderName = "";
                    string strTenderCount = "";
                    double dblTenderAmount = 0;
                    strTenderName = dr["TenderName"].ToString();
                    strTenderCount = dr["TenderCount"].ToString();
                    dblTenderAmount = GeneralFunctions.fnDouble(dr["TenderAmount"].ToString());
                    dblCTotal += dblTenderAmount;
                    if (strTenderName.StartsWith("Gift Certificate"))
                    {
                        strTenderName.Replace("Gift Certificate", OfflineRetailV2.Properties.Resources.Gift_Cert);
                    }
                    if (strTenderName.StartsWith("American Express"))
                    {
                        strTenderName = strTenderName.Replace("American Express", OfflineRetailV2.Properties.Resources.American_Exp_);
                    }
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTenderName), "", this.GetFotmatDoubleValue(dblTenderAmount), "TwoOneColumn" });
                }
                prndtblINV3.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total_Counted), "", this.GetFotmatDoubleValue(dblCTotal) });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.OVER__SHORT_, "", "", "OneColumn" });
                DataTable prndtblINV4 = new DataTable();
                prndtblINV4 = this.FetchCOTenderOverShort();
                double dblOSTotal = 0;
                foreach (DataRow dr in prndtblINV4.Rows)
                {
                    string strTenderName = "";
                    string strTenderCount = "";
                    double dblTenderAmount = 0;
                    strTenderName = dr["TenderName"].ToString();
                    strTenderCount = dr["TenderCount"].ToString();
                    dblTenderAmount = GeneralFunctions.fnDouble(dr["TenderAmount"].ToString());
                    if (strTenderName != "Card Processing Total")
                    {
                        dblOSTotal += dblTenderAmount;
                        if (strTenderName.StartsWith("Gift Certificate"))
                        {
                            strTenderName.Replace("Gift Certificate", OfflineRetailV2.Properties.Resources.Gift_Cert);
                        }
                        if (strTenderName.StartsWith("American Express"))
                        {
                            strTenderName = strTenderName.Replace("American Express", OfflineRetailV2.Properties.Resources.American_Exp_);
                        }
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTenderName), "", this.GetFotmatDoubleValue(dblTenderAmount) });
                    }
                }
                prndtblINV4.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total_Over__Short_), "", this.GetFotmatDoubleValue(dblOSTotal), "TwoOneColumn" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                if (this.blCloseoutSaleHour)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.SALES_BY_HOUR, "", "", "OneColumn" });
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Begin_, "", string.Concat(strStartDate, SP1, strStartTime) });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.End_, "", string.Concat(strEndDate, SP1, strEndTime) });
                    if (this.strCloseoutType == "C")
                    {
                        if (SystemVariables.CurrentUserID > 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Requester_, SystemVariables.CurrentUserCode, "" });
                        }
                        else
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Requester_, SystemVariables.CurrentUserName, "" });
                        }
                    }
                    if (this.strCloseoutType == "E")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Employee, "#:"), strEmpID, "" });
                    }
                    if (this.strCloseoutType == "T")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, "#:"), strTerminal, "" });
                    }
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Close_Out_, ":"), string.Concat(" ", this.intCloseoutID.ToString()), "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.NOTE, ":"), "", "" });
                    if (strNotes != "")
                    {
                        string OrginalF = "";
                        this.ArrangeText(strNotes, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;
                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);
                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len -= 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                }
                            }
                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }
                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (CopyOrginalF != "")
                                {
                                    CopyOrginalF = CopyOrginalF.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        if (NumberOfOccurancesF == 0)
                        {
                            NumberOfOccurancesF = 1;
                        }
                        else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                        {
                            NumberOfOccurancesF++;
                        }
                        this.dtblstrm.Rows.Add(new object[] { strNotes, "", "", NumberOfOccurancesF.ToString() });
                    }
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    DataTable prndtblINV5 = new DataTable();
                    prndtblINV5 = this.FetchCOSH();
                    double dblSHTotal = 0;
                    foreach (DataRow dr in prndtblINV5.Rows)
                    {
                        string strTimeinterval = "";
                        double dblSalesAmount = 0;
                        strTimeinterval = dr["Timeinterval"].ToString();
                        dblSalesAmount = GeneralFunctions.fnDouble(dr["SalesAmount"].ToString());
                        dblSHTotal += dblSalesAmount;
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strTimeinterval), "", this.GetFotmatDoubleValue(dblSalesAmount), "TwoOneColumn" });
                    }
                    prndtblINV5.Dispose();
                    this.dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total_Sales), "", this.GetFotmatDoubleValue(dblSHTotal) });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (this.blCloseoutSaleDept)
                {
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.SALES_BY_DEPARTMENT, "", "", "OneColumn" });
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Begin_, "", string.Concat(strStartDate, SP1, strStartTime) });
                    this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.End_, "", string.Concat(strEndDate, SP1, strEndTime) });
                    if (this.strCloseoutType == "C")
                    {
                        if (SystemVariables.CurrentUserID > 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Requester_, SystemVariables.CurrentUserCode, "" });
                        }
                        else
                        {
                            this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Requester_, SystemVariables.CurrentUserName, "" });
                        }
                    }
                    if (this.strCloseoutType == "E")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Employee, "#:"), strEmpID, "" });
                    }
                    if (this.strCloseoutType == "T")
                    {
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, "#:"), strTerminal, "" });
                    }
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Close_Out_, ":"), string.Concat(" ", this.intCloseoutID.ToString()), "" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.NOTE, ":"), "", "" });
                    if (strNotes != "")
                    {
                        string OrginalF = "";
                        this.ArrangeText(strNotes, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;
                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);
                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len -= 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                }
                            }
                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }
                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len -= 30;
                                if (CopyOrginalF != "")
                                {
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                            }
                        }
                        if (NumberOfOccurancesF == 0)
                        {
                            NumberOfOccurancesF = 1;
                        }
                        else if (OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())
                        {
                            NumberOfOccurancesF++;
                        }
                        this.dtblstrm.Rows.Add(new object[] { strNotes, "", "", NumberOfOccurancesF.ToString() });
                    }
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                    this.dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    DataTable prndtblINV6 = new DataTable();
                    prndtblINV6 = this.FetchCOSD();
                    double dblSDTotal = 0;
                    foreach (DataRow dr in prndtblINV6.Rows)
                    {
                        string strDeptID = "";
                        string strDeptDesc = "";
                        double dblSalesAmount = 0;
                        strDeptID = dr["DeptID"].ToString();
                        strDeptDesc = dr["DeptDesc"].ToString();
                        dblSalesAmount = GeneralFunctions.fnDouble(dr["SalesAmount"].ToString());
                        dblSDTotal += dblSalesAmount;
                        this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, strDeptID), string.Concat(SP1, strDeptDesc), this.GetFotmatDoubleValue(dblSalesAmount) });
                    }
                    prndtblINV6.Dispose();
                    this.dtblstrm.Rows.Add(new object[] { "", "", "---------------" });
                    this.dtblstrm.Rows.Add(new object[] { string.Concat(SP1, OfflineRetailV2.Properties.Resources.Total_Sales), "", this.GetFotmatDoubleValue(dblSDTotal) });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                dtblH.Dispose();
                dtblT.Dispose();
            }
            if (this.strPrintType == "No Sale")
            {
                string SP1 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strTransDate = "";
                prndtblINV = this.FetchPaidOut(this.intInvNo);
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    strEmpID = dr["EmpID"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                }
                prndtblINV.Dispose();
                this.dtblstrm.Rows.Add(new object[] { string.Concat("**** ", OfflineRetailV2.Properties.Resources.No_Sale, " ****"), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
            }
            if (this.strPrintType == "Paid Out")
            {
                string SP1 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strTransDate = "";
                prndtblINV = this.FetchPaidOut(this.intPaidOutTranNo);
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    strEmpID = dr["EmpID"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                }
                prndtblINV.Dispose();
                this.dtblstrm.Rows.Add(new object[] { string.Concat("**** ", OfflineRetailV2.Properties.Resources.Paid_Out, " ****"), "", "" });
                this.dtblstrm.Rows.Add(new object[] { this.strPaidOutDesc, "", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Amount, ": ", this.GetFotmatDoubleValue(this.dblPaidOutAmount)), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
            }
            if (this.strPrintType == "Paid In")
            {
                string SP1 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", " *** DEMO VERSION *** ", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strTransDate = "";
                prndtblINV = this.FetchPaidOut(this.intPaidOutTranNo);
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    strEmpID = dr["EmpID"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                }
                prndtblINV.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "**** Paid In ****", "", "" });
                this.dtblstrm.Rows.Add(new object[] { this.strPaidOutDesc, "", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat("Amount: ", this.GetFotmatDoubleValue(this.dblPaidOutAmount)), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "Date:", "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat("Store:", intStoreID.ToString()), "", string.Concat("Clerk:", strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat("Terminal: ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
            }
            if (this.strPrintType == "Safe Drop")
            {
                string SP1 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", " *** DEMO VERSION *** ", "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strTransDate = "";
                prndtblINV = this.FetchPaidOut(this.intPaidOutTranNo);
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    strEmpID = dr["EmpID"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                }
                prndtblINV.Dispose();
                this.dtblstrm.Rows.Add(new object[] { "**** Safe Drop ****", "", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat("Amount: ", this.GetFotmatDoubleValue(this.dblPaidOutAmount)), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { "Date:", "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat("Store:", intStoreID.ToString()), "", string.Concat("Clerk:", strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat("Terminal: ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
            }
            if (this.strPrintType == "Lotto Payout")
            {
                string SP1 = new string(' ', 1);
                if (OfflineRetailV2.Data.Settings.DemoVersion == "Y")
                {
                    this.dtblstrm.Rows.Add(new object[] { "", OfflineRetailV2.Properties.Resources.____DEMO_VERSION____, "" });
                    this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                }
                if (OfflineRetailV2.Data.Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = "";
                    this.ArrangeText(OfflineRetailV2.Data.Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                DataTable prndtblINV = new DataTable();
                int intTranNo = 0;
                int intStoreID = 0;
                string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strTransDate = "";
                prndtblINV = this.FetchPaidOut(this.intPaidOutTranNo);
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    this.intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                    stermnl = dr["Terminal"].ToString();
                    strEmpID = dr["EmpID"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    date = GeneralFunctions.fnDate(dr["TransDate"].ToString());
                    strTransDate = date.ToString(string.Concat(SystemVariables.DateFormat, " hh:mm:ss tt"));
                }
                prndtblINV.Dispose();
                this.dtblstrm.Rows.Add(new object[] { string.Concat("**** ", OfflineRetailV2.Properties.Resources.Lotto_Payout, " ****"), "", "" });
                this.dtblstrm.Rows.Add(new object[] { this.strPaidOutDesc, "", "" });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Amount, ": ", this.GetFotmatDoubleValue(this.dblPaidOutAmount)), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
                this.dtblstrm.Rows.Add(new object[] { OfflineRetailV2.Properties.Resources.Date_, "", strTransDate });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.store_, intStoreID.ToString()), "", string.Concat(OfflineRetailV2.Properties.Resources.Clerk_, strEmpID) });
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Terminal, ": ", stermnl), "", "" });
                this.dtblstrm.Rows.Add(new object[] { "", "", "" });
            }
            if (this.strPrintType == "Customer Label")
            {
                string SP1 = new string(' ', 1);
                DataTable prndtblINV = new DataTable();
                string strcompany = "";
                string strcust = "";
                string stradd = "";
                prndtblINV = this.FetchCustInfo(this.intInvNo);
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    strcompany = dr["Company"].ToString();
                    strcust = dr["CustomerName"].ToString();
                    stradd = dr["MailAddress"].ToString();
                }
                prndtblINV.Dispose();
                this.dtblstrm.Rows.Add(new object[] { strcompany, "", "" });
                if (stradd != "")
                {
                    string OrginalH = stradd;
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;
                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;
                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len -= 26;
                                if (cutstr != "")
                                {
                                    this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                this.dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else if (cutstr != "")
                        {
                            this.dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }
                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len -= 26;
                            if (CopyOrginalH != "")
                            {
                                this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            this.dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else if (CopyOrginalH != "")
                    {
                        this.dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }
                    if (NumberOfOccurancesH == 0)
                    {
                        NumberOfOccurancesH = 1;
                    }
                    else if (OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())
                    {
                        NumberOfOccurancesH++;
                    }
                }
                this.dtblstrm.Rows.Add(new object[] { string.Concat(OfflineRetailV2.Properties.Resources.Attn, " :"), "", "" });
                this.dtblstrm.Rows.Add(new object[] { strcust, "", "" });
            }
        }

        // For Additional copy for Card Payment, Repair


        private bool GetRecieptHeaderCompany(string templatevalue)
        {
            if (Settings.ReceiptHeader_Company.Trim() != "")
            {
                string OrginalH = "";// Settings.TotalReceiptHeader;

                ArrangeText(Settings.ReceiptHeader_Company, chrperline, ref OrginalH);

                char FindH = '\n';
                int NumberOfOccurancesH = 0;

                string CopyOrginalH = string.Copy(OrginalH);
                int PlaceH = 0;

                NumberOfOccurancesH = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                while (PlaceH != -1)
                {
                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                    if (cutstr.Length > chrperline)
                    {
                        int len = cutstr.Length;
                        while (len >= chrperline)
                        {
                            NumberOfOccurancesH++;
                            len = len - chrperline;
                            if (cutstr != "")
                            {
                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "","Y", templatevalue });
                                cutstr = cutstr.Substring(chrperline, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", templatevalue });
                        }
                    }
                    else
                    {
                        if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", templatevalue });
                    }

                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    NumberOfOccurancesH++;
                }

                if (CopyOrginalH.Length > 50)
                {
                    int len = CopyOrginalH.Length;
                    while (len >= 50)
                    {
                        NumberOfOccurancesH++;
                        len = len - 50;
                        if (CopyOrginalH != "")
                        {
                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 50), "", "", "", "Y", templatevalue });
                            CopyOrginalH = CopyOrginalH.Substring(50, len);
                        }
                    }
                    if (len != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", templatevalue });
                    }
                }
                else
                {
                    if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", templatevalue });
                }


                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                else
                {
                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                }

            }

            return true;
        }

        private bool GetRecieptHeaderAddress(string templatevalue)
        {
            if (Settings.ReceiptHeader_Address.Trim() != "")
            {
                string OrginalH = "";// Settings.TotalReceiptHeader;

                ArrangeText(Settings.ReceiptHeader_Address, chrperline, ref OrginalH);

                char FindH = '\n';
                int NumberOfOccurancesH = 0;

                string CopyOrginalH = string.Copy(OrginalH);
                int PlaceH = 0;

                NumberOfOccurancesH = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                while (PlaceH != -1)
                {
                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                    if (cutstr.Length > chrperline)
                    {
                        int len = cutstr.Length;
                        while (len >= chrperline)
                        {
                            NumberOfOccurancesH++;
                            len = len - chrperline;
                            if (cutstr != "")
                            {
                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", templatevalue });
                                cutstr = cutstr.Substring(chrperline, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", templatevalue });
                        }
                    }
                    else
                    {
                        if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", templatevalue });
                    }

                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    NumberOfOccurancesH++;
                }

                if (CopyOrginalH.Length > 50)
                {
                    int len = CopyOrginalH.Length;
                    while (len >= 50)
                    {
                        NumberOfOccurancesH++;
                        len = len - 50;
                        if (CopyOrginalH != "")
                        {
                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 50), "", "", "", "Y", templatevalue });
                            CopyOrginalH = CopyOrginalH.Substring(50, len);
                        }
                    }
                    if (len != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", templatevalue });
                    }
                }
                else
                {
                    if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", templatevalue });
                }


                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                else
                {
                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                }

            }

            return true;
        }


        private bool GetRecieptHeaderCompany1(string templatevalue)
        {
            if (Settings.ReceiptHeader_Company.Trim() != "")
            {
                string OrginalH = "";// Settings.TotalReceiptHeader;

                ArrangeText(Settings.ReceiptHeader_Company, chrperline, ref OrginalH);

                char FindH = '\n';
                int NumberOfOccurancesH = 0;

                string CopyOrginalH = string.Copy(OrginalH);
                int PlaceH = 0;

                NumberOfOccurancesH = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                while (PlaceH != -1)
                {
                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                    if (cutstr.Length > chrperline)
                    {
                        int len = cutstr.Length;
                        while (len >= chrperline)
                        {
                            NumberOfOccurancesH++;
                            len = len - chrperline;
                            if (cutstr != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", templatevalue });
                                cutstr = cutstr.Substring(chrperline, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", templatevalue });
                        }
                    }
                    else
                    {
                        if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "", "Y", templatevalue });
                    }

                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    NumberOfOccurancesH++;
                }

                if (CopyOrginalH.Length > 50)
                {
                    int len = CopyOrginalH.Length;
                    while (len >= 50)
                    {
                        NumberOfOccurancesH++;
                        len = len - 50;
                        if (CopyOrginalH != "")
                        {
                            dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 50), "", "", "", "Y", templatevalue });
                            CopyOrginalH = CopyOrginalH.Substring(50, len);
                        }
                    }
                    if (len != 0)
                    {
                        dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", templatevalue });
                    }
                }
                else
                {
                    if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", templatevalue });
                }


                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                else
                {
                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                }

            }

            return true;
        }

        private bool GetRecieptHeaderAddress1(string templatevalue)
        {
            if (Settings.ReceiptHeader_Address.Trim() != "")
            {
                string OrginalH = "";// Settings.TotalReceiptHeader;

                ArrangeText(Settings.ReceiptHeader_Address, chrperline, ref OrginalH);

                char FindH = '\n';
                int NumberOfOccurancesH = 0;

                string CopyOrginalH = string.Copy(OrginalH);
                int PlaceH = 0;

                NumberOfOccurancesH = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                while (PlaceH != -1)
                {
                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                    if (cutstr.Length > chrperline)
                    {
                        int len = cutstr.Length;
                        while (len >= chrperline)
                        {
                            NumberOfOccurancesH++;
                            len = len - chrperline;
                            if (cutstr != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", templatevalue });
                                cutstr = cutstr.Substring(chrperline, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", templatevalue });
                        }
                    }
                    else
                    {
                        if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "", "Y", templatevalue });
                    }

                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    NumberOfOccurancesH++;
                }

                if (CopyOrginalH.Length > 50)
                {
                    int len = CopyOrginalH.Length;
                    while (len >= 50)
                    {
                        NumberOfOccurancesH++;
                        len = len - 50;
                        if (CopyOrginalH != "")
                        {
                            dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 50), "", "", "", "Y", templatevalue });
                            CopyOrginalH = CopyOrginalH.Substring(50, len);
                        }
                    }
                    if (len != 0)
                    {
                        dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", templatevalue });
                    }
                }
                else
                {
                    if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", templatevalue });
                }


                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                else
                {
                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                }

            }

            return true;
        }


        private bool GetRecieptHeader()
        {
            if (Settings.TotalReceiptHeader.Trim() != "")
            {
                string OrginalH = "";// Settings.TotalReceiptHeader;

                ArrangeText(Settings.TotalReceiptHeader, 50, ref OrginalH);

                char FindH = '\n';
                int NumberOfOccurancesH = 0;

                string CopyOrginalH = string.Copy(OrginalH);
                int PlaceH = 0;

                NumberOfOccurancesH = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                while (PlaceH != -1)
                {
                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                    if (cutstr.Length > 50)
                    {
                        int len = cutstr.Length;
                        while (len >= 50)
                        {
                            NumberOfOccurancesH++;
                            len = len - 50;
                            if (cutstr != "")
                            {
                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 50), "", "", "OneColumn" });
                                cutstr = cutstr.Substring(50, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "OneColumn" });
                        }
                    }
                    else
                    {
                        if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "OneColumn" });
                    }

                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    NumberOfOccurancesH++;
                }

                if (CopyOrginalH.Length > 50)
                {
                    int len = CopyOrginalH.Length;
                    while (len >= 50)
                    {
                        NumberOfOccurancesH++;
                        len = len - 50;
                        if (CopyOrginalH != "")
                        {
                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 50), "", "", "OneColumn" });
                            CopyOrginalH = CopyOrginalH.Substring(50, len);
                        }
                    }
                    if (len != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "OneColumn" });
                    }
                }
                else
                {
                    if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "OneColumn" });
                }


                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                else
                {
                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                }

            }

            return true;
        }

        private void GetPrintStream1()
        {
            if (!FindNewTemplate)
            {
                if (strPrintType == "Invoice")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", " " + Properties.Resources.Training + " ", "", "B" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;
                    double dblCoupon = 0;
                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    string strDTaxName = "";
                    double dblDTax = 0;
                    int CustomerOrderRef = 0;

                    string strCustDOB = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();

                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        strDTaxName = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();
                    }
                    prndtblINV.Dispose();



                    if (CustomerOrderRef > 0)
                    {
                        string dt1 = "";
                        string dt2 = "";

                        GetCustomerOrderRef(CustomerOrderRef, ref dt1, ref dt2);
                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Ref__Order + "  : ", "", CustomerOrderRef.ToString(), "" });
                        dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Order_Date, "", dt1, "" });
                        dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Pickup_Date, "", dt2, "" });
                    }

                    intWO = FetchWorkorderNo();
                    if (intWO > 0) // work order payment
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Work_Order_Number, "", intWO.ToString() });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date, "", GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt") });
                    }

                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString() });


                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    if (strCustCompany != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                    }

                    if (strCustAddress != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    if (strCustDOB != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_of_Birth, "", GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat) });
                    }

                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != "") || (strCustDOB != ""))
                    {
                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    }



                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);




                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string strFeesID = "0";
                        string strFeesText = "";
                        int SalePriceID = 0;


                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        strDiscText = dr["DiscountText"].ToString();
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());

                        if (strPType == "O") dblTotalPrice = -dblTotalPrice;

                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();

                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());


                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";
                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        //dtblstrm1.Rows.Add(new object[] { sPD1, "", "" });

                        if (sPD2.Trim() != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { sPD2, "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {

                            //dtblstrm1.Rows.Add(new object[] { sPD3, "", "" });
                        }


                        if (strPType == "M")
                        {
                            //dtblstrm1.Rows.Add(new object[] { SP1 + strMV1, "", "" });

                            if (strMV2 != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                            }
                            if (strMV3 != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                            }
                        }
                        if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                            || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                        {
                            if (SalePriceID == 0)
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                    }
                                }
                            }


                            if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                    }
                                }
                            }

                            if (strPType == "T")
                            {
                                if (tgininv == "Y")
                                {
                                    PosDataObject.Product opdt = new PosDataObject.Product();
                                    opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                    DataTable dtemp = opdt.FetchTaggedData(ipid);
                                    foreach (DataRow tgdr in dtemp.Rows)
                                    {
                                        double tgQty = 0;
                                        string tgName = "";
                                        tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                        tgName = tgdr["ItemName"].ToString();
                                        tgQty = tgQty * dblQty;

                                        //dtblstrm1.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "" });
                                    }
                                    dtemp.Dispose();
                                }
                            }
                        }

                        if (strDiscText != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { SP2 + strDiscText, "", "" });
                        }

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                //dtblstrm.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                            }
                        }

                        //dtblstrm1.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strDP), GetFotmatDoubleValue(dblTotalPrice) });


                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            // dtblstrm1.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }


                    }
                    prndtblINV1.Dispose();




                    // -------------- Sub Total ----------------

                    //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });

                    //dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(dblTempTotal) });


                    if (dblDiscount != 0) // -------------- Discount ----------------
                    {
                        // dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                        string strDiscountCaption = Properties.Resources.Discount;
                        // dtblstrm1.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount) });
                    }

                    // -------------- Tax ----------------
                    if (dblTax != 0)
                    {
                        //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                        //if (dblTax1 != 0) dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax  + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1) });
                        //if (dblTax2 != 0) dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax  + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2) });
                        //if (dblTax3 != 0) dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax  + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3) });
                    }


                    if (dblDTax != 0)
                    {
                        //dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        //dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Dest__Tax + ": " + strDTaxName, "", GetFotmatDoubleValue(dblDTax), "" });
                    }


                    if (((dblFees != 0) || (dblFeesTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                    {
                        //dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblFees != 0)
                        {
                            //dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges + ":", "", GetFotmatDoubleValue(dblFees), "" });
                        }
                        if (dblFeesTax != 0)
                        {
                            //dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax + ":", "", GetFotmatDoubleValue(dblFeesTax), "" });
                        }
                    }

                    if (dblCoupon != 0)
                    {
                        //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                        //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });
                    }

                    DataTable dtblCpn = new DataTable();
                    dtblCpn = FetchInvCoupon();
                    if (dtblCpn.Rows.Count > 0)
                    {

                        foreach (DataRow dr in dtblCpn.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["Name"].ToString();

                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";

                            SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);

                            dtblstrm.Rows.Add(new object[] { SP1 + sPD1, "", "", "" });

                            if (sPD2.Trim() != "")
                            {
                                dtblstrm.Rows.Add(new object[] { SP1 + sPD2, "", "", "" });
                            }

                            if (sPD3.Trim() != "")
                            {

                                dtblstrm.Rows.Add(new object[] { SP1 + sPD3, "", "", "" });
                            }


                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dtblstrm1.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblAmount), "" });
                        }
                    }

                    //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });

                    // -------------- Total ----------------

                    dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale), "B" });

                    // --------------- Tender --------------


                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                    bool boolHATender = false;

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                        dtblstrm1.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                dtblstrm1.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;
                    }
                    prndtblINV2.Dispose();

                    if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                    {
                        dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Change + " ", "", "(" + GetFotmatDoubleValue(dblTempTender - dblTotalSale) + ")" });
                    }
                    else dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    /*
                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        DataTable dtblGC = new DataTable();
                        dtblGC = FetchActiveGC(intInvNo);
                        if (dtblGC.Rows.Count > 0)
                        {

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "" });

                            dtblstrm1.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "" });

                            dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                            foreach (DataRow dr in dtblGC.Rows)
                            {
                                dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())) });
                            }
                        }
                        dtblGC.Dispose();
                    }
                   */

                    /*
                    int prmmgc = 0;
                    PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                    obcc01mgc.Connection = SystemVariables.Conn;
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                    DataTable ccdtbl11mgc = new DataTable();
                    PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                    obcc11mgc.Connection = SystemVariables.Conn;
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                    bool mgc = false;
                    int mgcnt = 0;
                    foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                    {
                        if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card"))
                        {
                            mgcnt++;
                            if (mgcnt == 1)
                            {
                                mgc = true;
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                            dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                        }
                    }
                    if (mgc)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }
                    */


                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        int prm = 0;
                        PosDataObject.POS obcc01 = new PosDataObject.POS();
                        obcc01.Connection = SystemVariables.Conn;
                        prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11 = new DataTable();
                        PosDataObject.POS obcc11 = new PosDataObject.POS();
                        obcc11.Connection = SystemVariables.Conn;
                        ccdtbl11 = obcc11.FetchCardData(prm);

                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                            if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                            if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                            if (drcc["CardType"].ToString() == "Precidia Gift Card") strCardType = "Precidia";
                            if (drcc["CardType"].ToString() == "Datacap Gift Card") strCardType = "Datacap";
                            if (drcc["CardType"].ToString() == "POSLink Gift Card") strCardType = "POSLink";
                            if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                            strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            strCardNum = drcc["RefCardAct"].ToString();
                            strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                            strCardLogo = drcc["RefCardLogo"].ToString();
                            strCardEntry = drcc["RefCardEntry"].ToString();
                            strApprovalNum = drcc["RefCardAuthID"].ToString();
                            strTranID = drcc["RefCardTranID"].ToString();
                            strApprovedAmt = drcc["RefCardAuthAmount"].ToString();
                            if (Settings.POSCardPayment == "Y")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Credit")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }
                            if (strCardType == "Debit")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Mercury")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Precidia")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "EBT")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ShowTipsInReceipt == "Y")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                                }
                            }

                            if (strCardType == "Credit")
                            {
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { "X", "", "" });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });

                                dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                                dtblstrm1.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                            }

                            if (strCardType == "Debit")
                            {
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                            }
                        }
                    }
                    // --------------- Sign --------------

                    // --------------- Receipt Footer --------------
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                        }
                        dtblstrm1.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                    }

                    if (blCardPayment)
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.MERCHANT_COPY, "" });
                    }

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                }

                if (strPrintType == "Reprint Receipt")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace3);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }

                    if (!blIsVoid)
                        dtblstrm1.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Receipt + ": " + intReprintCnt.ToString() + " *", "" });
                    else
                        dtblstrm1.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Void_Receipt + " " + intReprintCnt.ToString() + " *", "" });

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCustID = "";
                    string strCID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;
                    double dblCoupon = 0;
                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    string strDTaxName = "";
                    double dblDTax = 0;
                    int CustomerOrderRef = 0;

                    string strCustDOB = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();

                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        strDTaxName = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());
                        CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();

                    }
                    prndtblINV.Dispose();

                    if (CustomerOrderRef > 0)
                    {
                        string dt1 = "";
                        string dt2 = "";

                        GetCustomerOrderRef(CustomerOrderRef, ref dt1, ref dt2);
                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Ref__Order + "  : ", "", CustomerOrderRef.ToString(), "" });
                        dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Order_Date, "", dt1, "" });
                        dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Pickup_Date, "", dt2, "" });


                    }

                    intWO = FetchWorkorderNo();
                    if (intWO > 0) // work order payment
                    {
                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Work_Order_Number, "", intWO.ToString() });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date, "", GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt") });
                    }

                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString() });

                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                    if (strCustCompany != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                    }

                    if (strCustAddress != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    if (strCustDOB != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_of_Birth, "", GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat) });
                    }

                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != "") || (strCustDOB != ""))
                    {
                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    }


                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        string strDescription = "";
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        string strDiscText = "";
                        double dblDisc = 0;
                        int ipid = 0;
                        string strFeesID = "0";
                        string strFeesText = "";
                        int SalePriceID = 0;
                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();

                        strSKU = dr["SKU"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());

                        SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        if (strPType == "O") dblTotalPrice = -dblTotalPrice;

                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";
                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        //dtblstrm1.Rows.Add(new object[] { sPD1, "", "" });

                        if (sPD2.Trim() != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { sPD2, "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { sPD3, "", "" });
                        }


                        if (strPType == "M")
                        {
                            //dtblstrm1.Rows.Add(new object[] { SP1 + strMV1, "", "" });
                            if (strMV2 != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                            }
                            if (strMV3 != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                            }
                        }

                        if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                            || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                        {
                            if (SalePriceID == 0)
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                    }
                                }
                            }

                            if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                    }
                                }
                            }

                            if (strPType == "T")
                            {
                                if (tgininv == "Y")
                                {
                                    PosDataObject.Product opdt = new PosDataObject.Product();
                                    opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                    DataTable dtemp = opdt.FetchTaggedData(ipid);
                                    foreach (DataRow tgdr in dtemp.Rows)
                                    {
                                        double tgQty = 0;
                                        string tgName = "";
                                        tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                        tgName = tgdr["ItemName"].ToString();
                                        tgQty = tgQty * dblQty;

                                        //dtblstrm1.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "" });
                                    }
                                    dtemp.Dispose();
                                }
                            }
                        }
                        if (strDiscText != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { SP2 + strDiscText, "", "" });
                        }

                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();

                        dtblstrm1.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice) });

                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }
                            //dtblstrm1.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }
                    }

                    prndtblINV1.Dispose();



                    // -------------- Sub Total ----------------

                    //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });

                    //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(dblTempTotal) });

                    if (dblDiscount != 0) // -------------- Discount ----------------
                    {
                        //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                        string strDiscountCaption = Properties.Resources.Discount;
                        //dtblstrm1.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount) });
                    }

                    // -------------- Tax ----------------
                    if (dblTax != 0)
                    {
                        //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                        //if (dblTax1 != 0) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tax  + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1) });
                        //if (dblTax2 != 0) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tax  + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2) });
                        //if (dblTax3 != 0) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tax  + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3) });
                    }

                    if (dblDTax != 0)
                    {
                        //dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        //dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Dest__Tax + ": " + strDTaxName, "", GetFotmatDoubleValue(dblDTax), "" });
                    }
                    /*
                    if (((dblFees != 0) || (dblFeesTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                    {
                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblFees != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges + ":", "", GetFotmatDoubleValue(dblFees), "" });
                        }
                        if (dblFeesTax != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax + ":", "", GetFotmatDoubleValue(dblFeesTax), "" });
                        }
                    }



                    if (dblCoupon != 0)
                    {
                        dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });
                    }

                    DataTable dtblCpn = new DataTable();
                    dtblCpn = FetchInvCoupon();
                    if (dtblCpn.Rows.Count > 0)
                    {
                        //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                        //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });

                        foreach (DataRow dr in dtblCpn.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["Name"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dtblstrm1.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount), "" });
                        }
                    }

                    dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                    */
                    // -------------- Total ----------------

                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale), "B" });
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    // --------------- Tender --------------

                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                    bool boolHATender = false;

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + dblAmount);
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;
                        dtblstrm1.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                dtblstrm1.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;
                    }
                    prndtblINV2.Dispose();

                    if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                    {
                        dtblstrm1.Rows.Add(new object[] { SP1 + "Change", "", "(" + GetFotmatDoubleValue(dblTempTender - dblTotalSale) + ")" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }
                    else
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });


                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }

                    /*
                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        DataTable dtblGC = new DataTable();
                        dtblGC = FetchActiveGC(intInvNo);
                        if (dtblGC.Rows.Count > 0)
                        {
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "" });

                            dtblstrm1.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "" });

                            dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                            foreach (DataRow dr in dtblGC.Rows)
                            {
                                dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "xxx", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())) });
                            }
                        }
                        dtblGC.Dispose();
                    }


                    int prmmgc = 0;
                    PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                    obcc01mgc.Connection = SystemVariables.Conn;
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                    DataTable ccdtbl11mgc = new DataTable();
                    PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                    obcc11mgc.Connection = SystemVariables.Conn;
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                    bool mgc = false;
                    int mgcnt = 0;
                    foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                    {
                        if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card"))
                        {
                            mgcnt++;
                            if (mgcnt == 1)
                            {
                                mgc = true;
                                dtblstrm.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                            dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                        }
                    }
                    if (mgc)
                    {
                        dtblstrm.Rows.Add(new object[] { "", "", "" });
                    }

                    */

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                        //dtblstrm1.Rows.Add(new object[] { "", "", "  S I G N A T U R E     " });
                    }
                    // --------------- Sign --------------
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                        }
                        dtblstrm1.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                    }
                    else dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    if (!blIsVoid)
                        dtblstrm1.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Receipt + ": " + intReprintCnt.ToString() + " *", "" });
                    else
                        dtblstrm1.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Void_Receipt + " " + intReprintCnt.ToString() + " *", "" });

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                    //this.intPageCounter++;
                }

                if (strPrintType == "Layaway")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace2);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }


                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    if (blIsLayawayRefund)
                    {
                        dtblstrm1.Rows.Add(new object[] { "Layaway Cancellation", "", "" });
                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCustID = "";
                    string strCID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";
                    string strLayawayDueDate = "";
                    int intLayInvNo = 0;

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string strLayawayStatus = "";

                    prndtblINV = FetchLayawayHeader(false);
                    int invcount = 0;
                    double dblTotalLayawaySale = 0;
                    double dblTotalLayawayPayment = 0;
                    double dblTotalLayawayBalance = 0;
                    int intPrevLayNo = 0;
                    int distinctlayway = 1;

                    string custAddr = "";

                    foreach (DataRow dr in prndtblINV.Rows)
                    {


                        invcount++;

                        intLayNo = GeneralFunctions.fnInt32(dr["LayawayNo"].ToString());
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        intLayInvNo = GeneralFunctions.fnInt32(dr["InvoiceNo"].ToString());
                        strLayawayDueDate = GeneralFunctions.fnDate(dr["DateDue"].ToString()).ToString("d");
                        strLayawayStatus = dr["LayawayStatus"].ToString();
                        intInvNo = intLayInvNo;
                        custAddr = FetchCustomerAddress(GeneralFunctions.fnInt32(strCID));
                        if (strLayawayStatus == "3")
                        {
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intLayInvNo.ToString() });
                            dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }
                        else
                        {
                            if ((intPrevLayNo == 0) || (intPrevLayNo != intLayNo))
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Layaway_Number, "", intLayNo.ToString() });
                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                        }

                        if (invcount == 1)
                        {


                            if (strCustName != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                            }

                            if (strCustID != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                            }

                            if (custAddr != "")
                            {
                                string OrginalH = ""; // Settings.TotalReceiptHeader;
                                ArrangeText(custAddr, 26, ref OrginalH);

                                char FindH = '\n';
                                int NumberOfOccurancesH = 0;

                                string CopyOrginalH = string.Copy(OrginalH);
                                int PlaceH = 0;

                                NumberOfOccurancesH = 0;
                                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                while (PlaceH != -1)
                                {
                                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                    if (cutstr.Length > 26)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 26)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 26;
                                            if (cutstr != "")
                                            {
                                                dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(26, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    NumberOfOccurancesH++;
                                }

                                if (CopyOrginalH.Length > 26)
                                {
                                    int len = CopyOrginalH.Length;
                                    while (len >= 26)
                                    {
                                        NumberOfOccurancesH++;
                                        len = len - 26;
                                        if (CopyOrginalH != "")
                                        {
                                            dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                            CopyOrginalH = CopyOrginalH.Substring(26, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "" });
                                }


                                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                else
                                {
                                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                }

                            }


                            if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                            {
                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                        }


                        DataTable prndtblINV1 = new DataTable();
                        prndtblINV1 = FetchInvDetails(dblTotalSale);
                        double dblTempTotal = 0;
                        foreach (DataRow drL in prndtblINV1.Rows)
                        {
                            string strDescription = "";
                            string strPType = "";
                            string strMV1 = "";
                            string strMV2 = "";
                            string strMV3 = "";
                            string strSKU = "";
                            double dblPrice = 0;
                            double dblQty = 0;
                            double dblTotalPrice = 0;
                            string strDP = "";
                            double dblNormalPrice = 0;
                            double dblUOMPrice = 0;
                            string tgininv = "";
                            string strDiscText = "";
                            double dblDisc = 0;
                            int ipid = 0;
                            string txapp1 = "N";
                            string txapp2 = "N";
                            string txapp3 = "N";
                            double tx1 = 0;
                            double tx2 = 0;
                            double tx3 = 0;
                            double linetx = 0;
                            double lineprice = 0;
                            int tx1ty = 0;
                            int tx2ty = 0;
                            int tx3ty = 0;

                            dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                            lineprice = dblTotalPrice;

                            txapp1 = drL["Taxable1"].ToString();
                            txapp2 = drL["Taxable2"].ToString();
                            txapp3 = drL["Taxable3"].ToString();
                            tx1 = GeneralFunctions.fnDouble(drL["TaxRate1"].ToString());
                            tx2 = GeneralFunctions.fnDouble(drL["TaxRate2"].ToString());
                            tx3 = GeneralFunctions.fnDouble(drL["TaxRate3"].ToString());

                            tx1ty = GeneralFunctions.fnInt32(drL["TaxType1"].ToString());
                            tx2ty = GeneralFunctions.fnInt32(drL["TaxType2"].ToString());
                            tx3ty = GeneralFunctions.fnInt32(drL["TaxType3"].ToString());

                            if ((txapp1 == "Y") || (txapp2 == "Y") || (txapp3 == "Y"))
                            {
                                if (txapp1 == "Y")
                                {
                                    linetx = (tx1ty == 0) ? GeneralFunctions.FormatDouble(lineprice * tx1 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal1"].ToString()));
                                }

                                if (txapp2 == "Y")
                                {
                                    linetx = (tx2ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx2 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal2"].ToString()));
                                }

                                if (txapp3 == "Y")
                                {
                                    linetx = (tx3ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx3 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal3"].ToString()));
                                }
                            }

                            ipid = GeneralFunctions.fnInt32(drL["ProductID"].ToString());
                            tgininv = drL["TaggedInInvoice"].ToString();
                            strDescription = drL["Description"].ToString();
                            strPType = drL["ProductType"].ToString();
                            strMV1 = drL["MOP1"].ToString();
                            strMV2 = drL["MOP2"].ToString();
                            strMV3 = drL["MOP3"].ToString();

                            strSKU = drL["SKU"].ToString();
                            dblPrice = GeneralFunctions.fnDouble(drL["Price"].ToString());
                            dblQty = GeneralFunctions.fnDouble(drL["Qty"].ToString());

                            dblNormalPrice = GeneralFunctions.fnDouble(drL["NormalPrice"].ToString());
                            dblUOMPrice = GeneralFunctions.fnDouble(drL["UOMPrice"].ToString());
                            strDiscText = drL["DiscountText"].ToString();
                            dblDisc = GeneralFunctions.fnDouble(drL["Discount"].ToString());
                            dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                            strDP = drL["DP"].ToString();

                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                            dtblstrm1.Rows.Add(new object[] { sPD1, "", "" });

                            if (sPD2.Trim() != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { sPD2, "", "" });
                            }

                            if (sPD3.Trim() != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { sPD3, "", "" });
                            }

                            if (strPType == "M")
                            {
                                dtblstrm1.Rows.Add(new object[] { SP1 + strMV1, "", "" });

                                if (strMV2 != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                                }
                                if (strMV3 != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                                }
                            }

                            if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                            || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                    }
                                }

                                if (strPType == "T")
                                {
                                    if (tgininv == "Y")
                                    {
                                        PosDataObject.Product opdt = new PosDataObject.Product();
                                        opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                        DataTable dtemp = opdt.FetchTaggedData(ipid);
                                        foreach (DataRow tgdr in dtemp.Rows)
                                        {
                                            double tgQty = 0;
                                            string tgName = "";
                                            tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                            tgName = tgdr["ItemName"].ToString();
                                            tgQty = tgQty * dblQty;
                                            dtblstrm.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "" });
                                        }
                                        dtemp.Dispose();
                                    }
                                }
                            }

                            if (strDiscText != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { SP2 + strDiscText, "", "" });
                            }
                            dtblstrm1.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(lineprice + linetx) });

                        }

                        prndtblINV1.Dispose();

                        if (strLayawayStatus == "3")
                        {


                            // -------------- Sub Total ----------------

                            dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });

                            dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax) });

                            if (dblDiscount != 0) // -------------- Discount ----------------
                            {
                                dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                                dtblstrm1.Rows.Add(new object[] { SP1 + "Discount", "", GetFotmatDoubleValue(dblDiscount) });
                            }
                            // -------------- Tax ----------------
                            if (dblTax != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                                if (dblTax1 != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1) });
                                }
                                if (dblTax2 != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2) });
                                }
                                if (dblTax3 != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3) });
                                }
                            }

                            // -------------- Total ----------------

                            dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale), "B" });
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        }

                        // ---------------- Layaway Payment -------------

                        DataTable prndtblLAYPMT = new DataTable();
                        prndtblLAYPMT = FetchLayawayPayment();


                        foreach (DataRow drL1 in prndtblLAYPMT.Rows)
                        {
                            double dblLayPayment = 0;
                            string strLayPmtType = "";
                            string strLayPmtDate = "";

                            strLayPmtType = drL1["PaymentType"].ToString();
                            strLayPmtDate = drL1["PaymentDate"].ToString();
                            dblLayPayment = GeneralFunctions.fnDouble(drL1["PaymentAmt"].ToString());

                            dtblstrm1.Rows.Add(new object[] { SP1 + strLayPmtType + " " + strLayPmtDate, "", GetFotmatDoubleValue(dblLayPayment) });
                        }
                        prndtblLAYPMT.Dispose();


                        if ((intPrevLayNo != 0) && (intPrevLayNo != intLayNo))
                        {
                            // Layaway Balance Due, Due Date
                            distinctlayway++;
                            dblTotalLayawaySale = GetTotalLayawaySale(intPrevLayNo);
                            dblTotalLayawayPayment = GetTotalLayawayPayment(intPrevLayNo);
                            dblTotalLayawayBalance = dblTotalLayawaySale - dblTotalLayawayPayment;

                            dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Balance_Due + " ", "", GetFotmatDoubleValue(dblTotalLayawayBalance) });
                            dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Due + " ", "", strLayawayDueDate });
                        }

                        intPrevLayNo = intLayNo;
                    }
                    prndtblINV.Dispose();

                    if ((invcount == 1) || (distinctlayway == 1))
                    {
                        dblTotalLayawaySale = GetTotalLayawaySale(intPrevLayNo);
                        dblTotalLayawayPayment = GetTotalLayawayPayment(intPrevLayNo);
                        dblTotalLayawayBalance = dblTotalLayawaySale - dblTotalLayawayPayment;
                        dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Balance_Due + " ", "", GetFotmatDoubleValue(dblTotalLayawayBalance) });
                        dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Due + " ", "", strLayawayDueDate });
                    }

                    // --------------- Tender --------------

                    bool boolHATender = false;

                    if (!blIsLayawayRefund)
                    {

                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                        DataTable prndtblINV2 = new DataTable();
                        intTrnNo = FetchMaxTranNo();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            dtblstrm1.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;

                        }
                        prndtblINV2.Dispose();

                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        bool mgc = false;
                        int mgcnt = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                        {
                            if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                            {
                                mgcnt++;
                                if (mgcnt == 1)
                                {
                                    mgc = true;
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc)
                        {
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        }


                    }

                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    string strSign = new string('_', Settings.NoOfPrintSign);
                    dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.sign_, "", strSign });
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        DataTable ccdtbl11 = new DataTable();
                        PosDataObject.POS obcc11 = new PosDataObject.POS();
                        obcc11.Connection = SystemVariables.Conn;
                        ccdtbl11 = obcc11.FetchCardData(intLayTran);

                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                            if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                            if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                            if (drcc["CardType"].ToString() == "Precidia Gift Card") strCardType = "Precidia";
                            if (drcc["CardType"].ToString() == "Datacap Gift Card") strCardType = "Datacap";
                            if (drcc["CardType"].ToString() == "POSLink Gift Card") strCardType = "POSLink";
                            if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                            strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            strCardNum = drcc["RefCardAct"].ToString();
                            strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                            strCardLogo = drcc["RefCardLogo"].ToString();
                            strCardEntry = drcc["RefCardEntry"].ToString();
                            strApprovalNum = drcc["RefCardAuthID"].ToString();
                            strTranID = drcc["RefCardTranID"].ToString();
                            strApprovedAmt = drcc["RefCardAuthAmount"].ToString();
                            if (Settings.POSCardPayment == "Y")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Credit")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }
                            if (strCardType == "Debit")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Mercury")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Precidia")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "EBT")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ShowTipsInReceipt == "Y")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                                }
                            }


                            if (strCardType == "Credit")
                            {
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { "X", "", "" });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });

                                dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                                dtblstrm1.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                            }

                            if (strCardType == "Debit")
                            {
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                            }
                        }
                    }
                    // --------------- Sign --------------



                    // --------------- Receipt Footer --------------


                    if (blCardPayment)
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.MERCHANT_COPY, "" });
                    }

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------


                    if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptLayawayPolicy, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm1.Rows.Add(new object[] { Settings.ReceiptLayawayPolicy.Trim(), "", "", NumberOfOccurancesF.ToString() });

                    }

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { "barcode", "barcode", "barcode" });

                }

                if (strPrintType == "Reprint Layaway")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace2);
                                     //StringFormat f = new StringFormat();

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }

                    dtblstrm1.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Receipt + " *", "" });

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }
                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";
                    string strLayawayDueDate = "";
                    int intLayInvNo = 0;

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string strLayawayStatus = "";

                    prndtblINV = FetchLayawayHeader(true);
                    int invcount = 0;
                    double dblTotalLayawaySale = 0;
                    double dblTotalLayawayPayment = 0;
                    double dblTotalLayawayBalance = 0;
                    int intPrevLayNo = 0;
                    string custAddr = "";
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        invcount++;

                        intLayNo = GeneralFunctions.fnInt32(dr["LayawayNo"].ToString());
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        intLayInvNo = GeneralFunctions.fnInt32(dr["InvoiceNo"].ToString());
                        strLayawayDueDate = GeneralFunctions.fnDate(dr["DateDue"].ToString()).ToString("d");
                        strLayawayStatus = dr["LayawayStatus"].ToString();
                        intInvNo = intLayInvNo;
                        custAddr = FetchCustomerAddress(GeneralFunctions.fnInt32(strCID));
                        if ((intPrevLayNo == 0) || (intPrevLayNo != intLayNo))
                        {
                            intPrevLayNo = intLayNo;
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Layaway_Number, "", intLayNo.ToString() });
                            dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                        }

                        if (invcount == 1)
                        {
                            if (custAddr != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany });
                            }

                            if (strCustName != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                            }

                            if (strCustID != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                            }

                            if (custAddr != "")
                            {
                                string OrginalH = ""; // Settings.TotalReceiptHeader;
                                ArrangeText(custAddr, 26, ref OrginalH);

                                char FindH = '\n';
                                int NumberOfOccurancesH = 0;

                                string CopyOrginalH = string.Copy(OrginalH);
                                int PlaceH = 0;

                                NumberOfOccurancesH = 0;
                                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                while (PlaceH != -1)
                                {
                                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                    if (cutstr.Length > 26)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 26)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 26;
                                            if (cutstr != "")
                                            {
                                                dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(26, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    NumberOfOccurancesH++;
                                }

                                if (CopyOrginalH.Length > 26)
                                {
                                    int len = CopyOrginalH.Length;
                                    while (len >= 26)
                                    {
                                        NumberOfOccurancesH++;
                                        len = len - 26;
                                        if (CopyOrginalH != "")
                                        {
                                            dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                            CopyOrginalH = CopyOrginalH.Substring(26, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "" });
                                }


                                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                else
                                {
                                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                }
                            }

                            if ((custAddr != "") || (strCustName != "") || (strCustID != ""))
                            {
                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                        }

                        DataTable prndtblINV1 = new DataTable();
                        prndtblINV1 = FetchInvDetails(dblTotalSale);
                        double dblTempTotal = 0;
                        foreach (DataRow drL in prndtblINV1.Rows)
                        {
                            string strDescription = "";
                            string strPType = "";
                            string strMV1 = "";
                            string strMV2 = "";
                            string strMV3 = "";
                            string strSKU = "";
                            double dblPrice = 0;
                            double dblNormalPrice = 0;
                            double dblUOMPrice = 0;
                            double dblQty = 0;
                            double dblTotalPrice = 0;
                            string strDP = "";
                            string tgininv = "";
                            string strDiscText = "";
                            double dblDisc = 0;
                            int ipid = 0;

                            string txapp1 = "N";
                            string txapp2 = "N";
                            string txapp3 = "N";
                            double tx1 = 0;
                            double tx2 = 0;
                            double tx3 = 0;
                            double linetx = 0;
                            double lineprice = 0;

                            int tx1ty = 0;
                            int tx2ty = 0;
                            int tx3ty = 0;

                            dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                            lineprice = dblTotalPrice;

                            txapp1 = drL["Taxable1"].ToString();
                            txapp2 = drL["Taxable2"].ToString();
                            txapp3 = drL["Taxable3"].ToString();
                            tx1 = GeneralFunctions.fnDouble(drL["TaxRate1"].ToString());
                            tx2 = GeneralFunctions.fnDouble(drL["TaxRate2"].ToString());
                            tx3 = GeneralFunctions.fnDouble(drL["TaxRate3"].ToString());

                            tx1ty = GeneralFunctions.fnInt32(drL["TaxType1"].ToString());
                            tx2ty = GeneralFunctions.fnInt32(drL["TaxType2"].ToString());
                            tx3ty = GeneralFunctions.fnInt32(drL["TaxType3"].ToString());

                            if ((txapp1 == "Y") || (txapp2 == "Y") || (txapp3 == "Y"))
                            {
                                if (txapp1 == "Y")
                                {
                                    linetx = (tx1ty == 0) ? GeneralFunctions.FormatDouble(lineprice * tx1 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal1"].ToString()));
                                }

                                if (txapp2 == "Y")
                                {
                                    linetx = (tx2ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx2 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal2"].ToString()));
                                }

                                if (txapp3 == "Y")
                                {
                                    linetx = (tx3ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx3 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal3"].ToString()));
                                }
                            }



                            ipid = GeneralFunctions.fnInt32(drL["ProductID"].ToString());
                            tgininv = drL["TaggedInInvoice"].ToString();

                            strDescription = drL["Description"].ToString();
                            strPType = drL["ProductType"].ToString();
                            strMV1 = drL["MOP1"].ToString();
                            strMV2 = drL["MOP2"].ToString();
                            strMV3 = drL["MOP3"].ToString();
                            strDiscText = drL["DiscountText"].ToString();

                            strSKU = drL["SKU"].ToString();
                            dblPrice = GeneralFunctions.fnDouble(drL["Price"].ToString());
                            dblQty = GeneralFunctions.fnDouble(drL["Qty"].ToString());
                            //dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                            dblNormalPrice = GeneralFunctions.fnDouble(drL["NormalPrice"].ToString());
                            dblUOMPrice = GeneralFunctions.fnDouble(drL["UOMPrice"].ToString());
                            dblDisc = GeneralFunctions.fnDouble(drL["Discount"].ToString());
                            dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                            strDP = drL["DP"].ToString();

                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                            dtblstrm1.Rows.Add(new object[] { sPD1, "", "" });

                            if (sPD2.Trim() != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { sPD2, "", "" });
                            }

                            if (sPD3.Trim() != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { sPD3, "", "" });
                            }

                            if (strPType == "M")
                            {
                                dtblstrm1.Rows.Add(new object[] { SP1 + strMV1, "", "" });

                                if (strMV2 != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                                }
                                if (strMV3 != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                                }
                            }

                            if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                            || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                    }
                                }

                                if (strPType == "T")
                                {
                                    if (tgininv == "Y")
                                    {
                                        PosDataObject.Product opdt = new PosDataObject.Product();
                                        opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                        DataTable dtemp = opdt.FetchTaggedData(ipid);
                                        foreach (DataRow tgdr in dtemp.Rows)
                                        {
                                            double tgQty = 0;
                                            string tgName = "";
                                            tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                            tgName = tgdr["ItemName"].ToString();
                                            tgQty = tgQty * dblQty;

                                            dtblstrm1.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "" });
                                        }
                                        dtemp.Dispose();
                                    }
                                }
                            }

                            if (strDiscText.Trim() != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { SP2 + strDiscText, "", "" });
                            }
                            dtblstrm1.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(lineprice + linetx) });
                        }
                        prndtblINV1.Dispose();

                        // ---------------- Layaway Payment -------------

                        DataTable prndtblLAYPMT = new DataTable();
                        prndtblLAYPMT = FetchLayawayPayment();


                        foreach (DataRow drL1 in prndtblLAYPMT.Rows)
                        {
                            double dblLayPayment = 0;
                            string strLayPmtType = "";
                            string strLayPmtDate = "";

                            strLayPmtType = drL1["PaymentType"].ToString();
                            strLayPmtDate = drL1["PaymentDate"].ToString();
                            dblLayPayment = GeneralFunctions.fnDouble(drL1["PaymentAmt"].ToString());

                            dtblstrm1.Rows.Add(new object[] { SP1 + strLayPmtType + " " + strLayPmtDate, "", GetFotmatDoubleValue(dblLayPayment) });
                        }
                        prndtblLAYPMT.Dispose();
                    }
                    prndtblINV.Dispose();

                    // Layaway Balance Due, Due Date

                    dblTotalLayawaySale = GetTotalLayawaySale(intPrevLayNo);
                    dblTotalLayawayPayment = GetTotalLayawayPayment(intPrevLayNo);

                    dblTotalLayawayBalance = dblTotalLayawaySale - dblTotalLayawayPayment;

                    dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Balance_Due + " ", "", GetFotmatDoubleValue(dblTotalLayawayBalance) });
                    dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Due + " ", "", strLayawayDueDate });

                    // --------------- Tender --------------

                    bool boolHATender = false;


                    if (!blIsLayawayRefund)
                    {
                        dtblstrm.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                        DataTable prndtblINV2 = new DataTable();
                        intTrnNo = FetchMaxTranNo();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            dtblstrm1.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        }
                        prndtblINV2.Dispose();


                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        bool mgc = false;
                        int mgcnt = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                        {
                            if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                            {
                                mgcnt++;
                                if (mgcnt == 1)
                                {
                                    mgc = true;
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc)
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "" });
                        }

                    }

                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    // --------------- Receipt Footer --------------
                    string strSign = new string('_', Settings.NoOfPrintSign);
                    dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.sign_, "", strSign });


                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------


                    if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                    {
                        string OrginalF = "";
                        ArrangeText(Settings.ReceiptLayawayPolicy, 30, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;


                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 30)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }
                        dtblstrm1.Rows.Add(new object[] { Settings.ReceiptLayawayPolicy.Trim(), "", "", NumberOfOccurancesF.ToString() });
                    }
                    else dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    dtblstrm1.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Receipt + " *", "" });

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { "barcode", "barcode", "barcode" });
                }

                if (strPrintType == "Repair In")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = ""; // Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);
                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strCustPhone = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string serviceT = "";

                    double rpTotal = 0;
                    double rpAdvance = 0;
                    double rpDue = 0;

                    string rpDesc = "";

                    string rpStatus = "";
                    string rpInDate = "";
                    string rpDelDate = "";
                    string rpNotfDate = "";

                    string rpItem = "";
                    string rpSL = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strCustPhone = dr["CustMobile"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                        rpTotal = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr["RepairDueAmount"].ToString());
                        rpDesc = dr["RepairProblem"].ToString();

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        rpInDate = GeneralFunctions.fnDate(dr["RepairDateIn"].ToString()).ToString("d");

                        if (dr["RepairDeliveryDate"].ToString() != "")
                            rpDelDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToString("d");
                        if (dr["RepairNotifiedDate"].ToString() != "")
                            rpNotfDate = GeneralFunctions.fnDate(dr["RepairNotifiedDate"].ToString()).ToString("d");

                        serviceT = dr["ServiceType"].ToString();

                        rpItem = dr["RepairItemName"].ToString();

                        rpSL = dr["RepairItemSlNo"].ToString();
                    }
                    prndtblINV.Dispose();

                    intWO = FetchWorkorderNo();

                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Repair, "", Properties.Resources.Issue, "" });

                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString(), "" });

                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    if (rpInDate != "") dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_In, "", rpInDate, "" });

                    if (rpDelDate != "") dtblstrm1.Rows.Add(new object[] { Properties.Resources.Delivery_Date, "", rpDelDate, "" });

                    if (rpNotfDate != "") dtblstrm1.Rows.Add(new object[] { Properties.Resources.Notified_Date, "", rpNotfDate, "" });

                    if ((rpInDate != "") || (rpDelDate != "") || (rpNotfDate != ""))
                    {
                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    if (strCustCompany != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany, "" });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName, "" });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID, "" });
                    }

                    if (strCustAddress != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    if (strCustPhone != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Ph_, "", strCustPhone, "" });
                    }


                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                    {
                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    if (rpItem != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Repair_Item + " : " + rpItem, "", "", "" });
                    }
                    if (rpSL != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Serial + " # : " + rpSL, "", "", "" });
                    }

                    if ((rpItem != "") || (rpSL != ""))
                    {
                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";

                        string strFeesID = "0";
                        string strFeesText = "";


                        string strrpItemTag = "";
                        string strrpItemSLNO = "";
                        string dtrpPurchaseDate = "";
                        string dtrpDeliveryDate = "";

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();
                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        TService1 = dr["ServiceType"].ToString();
                        strrpItemTag = dr["RepairItemTag"].ToString();
                        strrpItemSLNO = dr["RepairItemSLNO"].ToString();

                        if (dr["RepairItemPurchaseDate"].ToString() != "")
                            dtrpPurchaseDate = GeneralFunctions.fnDate(dr["RepairItemPurchaseDate"].ToString()).ToString("d");

                        if (dr["RepairItemDeliveryDate"].ToString() != "")
                            dtrpDeliveryDate = GeneralFunctions.fnDate(dr["RepairItemDeliveryDate"].ToString()).ToString("d");

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        //dtblstrm1.Rows.Add(new object[] { sPD1, "", "", "" });

                        if (sPD2.Trim() != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { sPD2, "", "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { sPD3, "", "", "" });
                        }

                        if (strPType == "M")
                        {
                            //dtblstrm1.Rows.Add(new object[] { SP1 + strMV1, "", "", "" });

                            if (strMV2 != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { SP1 + strMV2, "", "", "" });
                            }
                            if (strMV3 != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { SP1 + strMV3, "", "", "" });
                            }
                        }

                        if (strrpItemSLNO != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.SL + " # " + strrpItemSLNO, "", "", "" });
                        }

                        if (strrpItemTag != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tag + " # " + strrpItemTag, "", "", "" });
                        }

                        if (strDiscText != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                            //dtblstrm1.Rows.Add(new object[] { SP2 + strDiscText, "", "", "" });
                        }

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                            }
                        }

                        //dtblstrm1.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblTotalPrice), "" });
                        //dtblstrm1.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(dblTotalPrice), "" });

                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            //dtblstrm1.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }
                        //dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    }
                    prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                    //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                    //dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(dblTempTotal), "" });

                    /*
                    if (dblDiscount != 0) // -------------- Discount ----------------
                    {
                        dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        string strDiscountCaption = Properties.Resources.Discount;
                        dtblstrm1.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount), "" });
                    }

                    // -------------- Tax ----------------
                    if (dblTax != 0)
                    {
                        dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax  + ":", "", GetFotmatDoubleValue(dblTax), "" });

                        dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    }


                    if (((dblFees != 0) || (dblFeesTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                    {
                        dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblFees != 0)
                        {
                            dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges + ":", "", GetFotmatDoubleValue(dblFees), "" });
                        }
                        if (dblFeesTax != 0)
                        {
                            dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax + ":", "", GetFotmatDoubleValue(dblFeesTax), "" });
                        }
                    }
                    */
                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total, "", GetFotmatDoubleValue(rpTotal), "B" });

                    /*
                    if (rpDesc != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Problem + " :" "", "", "" });
                        string OrginalD = "";
                        ArrangeText(rpDesc, 30, ref OrginalD);
                        char FindD = '\n';
                        int NumberOfOccurancesD = 0;


                        string CopyOrginalD = string.Copy(OrginalD);
                        int PlaceD = 0;
                        NumberOfOccurancesD = 0;
                        PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                        while (PlaceD != -1)
                        {
                            string cutstr = CopyOrginalD.Substring(0, PlaceD);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesD++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                            PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                            NumberOfOccurancesD++;
                        }

                        if (CopyOrginalD.Length > 30)
                        {
                            int len = CopyOrginalD.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesD++;
                                len = len - 30;
                                if (CopyOrginalD != "")
                                {
                                    //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalD = CopyOrginalD.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesD == 0) NumberOfOccurancesD = 1;
                        else
                        {
                            if ((OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())) NumberOfOccurancesD = NumberOfOccurancesD + 1;
                        }

                        dtblstrm1.Rows.Add(new object[] { rpDesc, "", "", NumberOfOccurancesD.ToString() });

                    }
                    */
                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Security_Deposit, "", GetFotmatDoubleValue(rpAdvance), "" });
                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Due, "", GetFotmatDoubleValue(rpDue), "" });
                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });


                    // -------------- Total ----------------

                    bool boolHATender = false;

                    if (rpAdvance > 0)
                    {
                        dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Tran_Amt_, "", GetFotmatDoubleValue(rpAdvance), "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                        // --------------- Tender --------------



                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                        DataTable prndtblINV2 = new DataTable();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            dtblstrm1.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        }
                        prndtblINV2.Dispose();

                        if (rpAdvance - dblTempTender != 0) // --------------- Change Due --------------
                        {
                            dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Change + " ", "", "(" + GetFotmatDoubleValue(dblTempTender - rpAdvance) + ")", "" });
                        }
                        else dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    }

                    /*
                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        DataTable dtblGC = new DataTable();
                        dtblGC = FetchActiveGC(intInvNo);
                        if (dtblGC.Rows.Count > 0)
                        {

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "" });

                            dtblstrm1.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "", "" });

                            dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                            foreach (DataRow dr in dtblGC.Rows)
                            {
                                dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                            }
                        }
                        dtblGC.Dispose();
                    }
    */

                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        if (Settings.POSCardPayment == "Y")
                        {
                            if (Settings.PaymentGateway == 2) // Mercury Payment
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCH_ID + " :", "", strMercuryMerchantID });
                            }
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.ENTRY + "  :", "", strCardEntry });

                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        }

                        if (strCardType == "Credit")
                        {
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        }
                        if (strCardType == "Debit")
                        {

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", "APPROVED" });
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });

                        }

                        if (Settings.AcceptTips == "Y")
                        {
                            if (Settings.ShowTipsInReceipt == "Y")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });
                                dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                            }
                        }

                        if (strCardType == "Credit")
                        {
                            dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                            dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            dtblstrm1.Rows.Add(new object[] { "X", "", "" });
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });

                            dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                            dtblstrm1.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                        }

                        if (strCardType == "Debit")
                        {
                            dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                            dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                        }
                    }

                    // --------------- Receipt Footer --------------
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if (((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                        || ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null)))
                    {
                        string MText = "";

                        if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                            MText = Properties.Resources.CUSTOMER_AGREEMENT_ + "\n" + Settings.ReceiptFooter.Trim();
                        /*
                        if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                        {
                            if (MText == "") MText = Properties.Resources.REPAIR_DISCLAIMER_  + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                            else MText = MText + "\n\n" + Properties.Resources.REPAIR_DISCLAIMER_  + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                        }*/

                        string OrginalF = "";
                        ArrangeText(MText, 40, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;

                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 40)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesF++;
                                len = len - 40;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm1.Rows.Add(new object[] { MText, "", "", NumberOfOccurancesF.ToString() });

                    }

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { "barcode", "barcode", "barcode" });



                    this.intPageCounter++;
                }

                if (strPrintType == "Repair Deliver")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    }

                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "logo" });
                    }

                    // -----------------  Receipt Header ---------------

                    if (Settings.TotalReceiptHeader.Trim() != "")
                    {
                        string OrginalH = "";//Settings.TotalReceiptHeader;
                        ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 26)
                            {
                                int len = cutstr.Length;
                                while (len >= 26)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 26;
                                    if (cutstr != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                        cutstr = cutstr.Substring(26, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 26)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strCustPhone = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblRentalSecurityDeposit = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string serviceT = "";

                    double rpTotal = 0;
                    double rpAdvance = 0;
                    double rpDue = 0;

                    string rpProb = "";
                    string rpDesc = "";

                    string rpStatus = "";
                    string rpDelDate = "";
                    string rpNotfDate = "";

                    string rpInDate = "";
                    string rpItem = "";
                    string rpSL = "";

                    int ParentID = 0;
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strCustPhone = dr["CustMobile"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        ParentID = GeneralFunctions.fnInt32(dr["RepairParentID"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        rpTotal = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr["RepairDueAmount"].ToString());

                        if (dr["RepairDeliveryDate"].ToString() != "")
                            rpDelDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToString("d");
                        if (dr["RepairNotifiedDate"].ToString() != "")
                            rpNotfDate = GeneralFunctions.fnDate(dr["RepairNotifiedDate"].ToString()).ToString("d");

                        rpInDate = GeneralFunctions.fnDate(dr["RepairDateIn"].ToString()).ToString("d");

                        rpItem = dr["RepairItemName"].ToString();

                        rpSL = dr["RepairItemSlNo"].ToString();

                        serviceT = dr["ServiceType"].ToString();
                    }
                    prndtblINV.Dispose();

                    intWO = FetchWorkorderNo();

                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Repair, "", Properties.Resources.Deliver, "" });

                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString(), "" });

                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });

                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Ref__Invoice__, "", ParentID.ToString(), "" });

                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                    //if (rpDelDate != "") dtblstrm1.Rows.Add(new object[] { Properties.Resources.Delivery_Date, "", rpDelDate, "" });
                    //if (rpNotfDate != "") dtblstrm1.Rows.Add(new object[] { Properties.Resources.Notified_Date, "", rpDelDate, "" });

                    if (strCustCompany != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany, "" });
                    }

                    if (strCustName != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName, "" });
                    }

                    if (strCustID != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID, "" });
                    }

                    if (strCustAddress != "")
                    {
                        string OrginalH = "";// Settings.TotalReceiptHeader;

                        ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                        char FindH = '\n';
                        int NumberOfOccurancesH = 0;

                        string CopyOrginalH = string.Copy(OrginalH);
                        int PlaceH = 0;

                        NumberOfOccurancesH = 0;
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        while (PlaceH != -1)
                        {
                            string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesH++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                                }
                            }
                            else
                            {
                                if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "" });
                            }

                            CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                            PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                            NumberOfOccurancesH++;
                        }

                        if (CopyOrginalH.Length > 40)
                        {
                            int len = CopyOrginalH.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (CopyOrginalH != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                    CopyOrginalH = CopyOrginalH.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                        }


                        if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                        else
                        {
                            if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                        }

                    }

                    if (strCustPhone != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Ph_, "", strCustPhone, "" });
                    }



                    if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                    {
                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    if (rpItem != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Repair_Item + " : " + rpItem, "", "", "" });
                    }
                    if (rpSL != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Serial + " # : " + rpSL, "", "", "" });
                    }

                    if ((rpItem != "") || (rpSL != ""))
                    {
                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }

                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchRPInvDetails(ParentID);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;
                        string strFeesID = "0";
                        string strFeesText = "";

                        string TService1 = "";

                        string strrpItemTag = "";
                        string strrpItemSLNO = "";
                        string dtrpPurchaseDate = "";
                        string dtrpDeliveryDate = "";

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();
                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        TService1 = dr["ServiceType"].ToString();
                        strrpItemTag = dr["RepairItemTag"].ToString();
                        strrpItemSLNO = dr["RepairItemSLNO"].ToString();
                        if (dr["RepairItemPurchaseDate"].ToString() != "")
                            dtrpPurchaseDate = GeneralFunctions.fnDate(dr["RepairItemPurchaseDate"].ToString()).ToString("d");

                        if (dr["RepairItemDeliveryDate"].ToString() != "")
                            dtrpDeliveryDate = GeneralFunctions.fnDate(dr["RepairItemDeliveryDate"].ToString()).ToString("d");

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                        //dtblstrm1.Rows.Add(new object[] { sPD1, "", "", "" });

                        if (sPD2.Trim() != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { sPD2, "", "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { sPD3, "", "", "" });
                        }

                        if (strPType == "M")
                        {
                            //dtblstrm1.Rows.Add(new object[] { SP1 + strMV1, "", "", "" });

                            if (strMV2 != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { SP1 + strMV2, "", "", "" });
                            }
                            if (strMV3 != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { SP1 + strMV3, "", "", "" });
                            }
                        }

                        if (strrpItemSLNO != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.SL + " # " + strrpItemSLNO, "", "", "" });
                        }

                        if (strrpItemTag != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tag + " # " + strrpItemTag, "", "", "" });
                        }

                        if (strDiscText != "")
                        {
                            //dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                            //dtblstrm1.Rows.Add(new object[] { SP2 + strDiscText, "", "", "" });
                        }

                        if (Settings.ShowFeesInReceipt == "Y")
                        {
                            if (strFeesText != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                            }
                        }

                        //dtblstrm1.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblTotalPrice), "" });

                        //dtblstrm1.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(dblTotalPrice), "" });

                        if (strInvNotes != "")
                        {
                            string OrginalN = "";
                            ArrangeText(strInvNotes, 30, ref OrginalN);
                            char FindN = '\n';
                            int NumberOfOccurancesN = 0;
                            string CopyOrginalN = string.Copy(OrginalN);
                            int PlaceN = 0;

                            NumberOfOccurancesN = 0;
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            while (PlaceN != -1)
                            {
                                string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesN++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                }

                                CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                NumberOfOccurancesN++;
                            }

                            if (CopyOrginalN.Length > 30)
                            {
                                int len = CopyOrginalN.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (CopyOrginalN != "")
                                    {
                                        CopyOrginalN = CopyOrginalN.Substring(30, len);
                                    }
                                }
                            }

                            if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                            else
                            {
                                if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                            }

                            //dtblstrm1.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                        }
                        //dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    }
                    prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                    //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                    //dtblstrm1.Rows.Add(new object[] { "", "", "", "" });

                    //dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(dblTempTotal), "" });

                    /*
                    if (dblDiscount != 0) // -------------- Discount ----------------
                    {
                        dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                        string strDiscountCaption = Properties.Resources.Discount;
                        dtblstrm1.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount), "" });
                    }

                    // -------------- Tax ----------------
                    if (dblTax != 0)
                    {
                        dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblTax1 != 0)
                        {
                            dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax  + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1), "" });

                        }
                        if (dblTax2 != 0)
                        {
                            dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax  + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2), "" });
                        }
                        if (dblTax3 != 0)
                        {
                            dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax  + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3), "" });
                        }
                    }

                    if (((dblFees != 0) || (dblFeesTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                    {
                        dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                        if (dblFees != 0)
                        {
                            dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges + ":", "", GetFotmatDoubleValue(dblFees), "" });
                        }
                        if (dblFeesTax != 0)
                        {
                            dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax + ":", "", GetFotmatDoubleValue(dblFeesTax), "" });
                        }
                    }


                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    */

                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total, "", GetFotmatDoubleValue(rpTotal), "B" });

                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });

                    DataTable dtbl2 = new DataTable();
                    dtbl2 = FetchRepairParentHeader(ParentID);
                    foreach (DataRow dr4 in dtbl2.Rows)
                    {
                        rpTotal = GeneralFunctions.fnDouble(dr4["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr4["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr4["RepairDueAmount"].ToString());
                        rpProb = dr4["RepairProblem"].ToString();
                        rpDesc = dr4["RepairNotes"].ToString();
                    }
                    if (rpAdvance > 0)
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Security_Deposit, "", GetFotmatDoubleValue(rpAdvance), "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Due, "", GetFotmatDoubleValue(rpDue), "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    }



                    // -------------- Total ----------------

                    bool boolHATender = false;

                    if (dblTotalSale > 0)
                    {
                        //dtblstrm1.Rows.Add(new object[] { SP1 + Translation.Properties.Resources.Tran_Amt_, "", GetFotmatDoubleValue(dblTotalSale), "" });
                        //dtblstrm1.Rows.Add(new object[] { "", "", "", "" });

                        // --------------- Tender --------------

                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });

                        DataTable prndtblINV2 = new DataTable();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            dtblstrm1.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        }
                        prndtblINV2.Dispose();

                        if (rpDue - dblTempTender != 0) // --------------- Change Due --------------
                        {
                            dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Change + " ", "", "(" + GetFotmatDoubleValue(dblTempTender - rpDue) + ")", "" });
                        }
                        else dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                    }

                    /*
                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        DataTable dtblGC = new DataTable();
                        dtblGC = FetchActiveGC(intInvNo);
                        if (dtblGC.Rows.Count > 0)
                        {

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "" });

                            dtblstrm1.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "", "" });

                            dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                            foreach (DataRow dr in dtblGC.Rows)
                            {
                                dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                            }
                        }
                        dtblGC.Dispose();
                    }


                    int prmmgc = 0;
                    PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                    obcc01mgc.Connection = SystemVariables.Conn;
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                    DataTable ccdtbl11mgc = new DataTable();
                    PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                    obcc11mgc.Connection = SystemVariables.Conn;
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                    bool mgc = false;
                    int mgcnt = 0;
                    foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                    {
                        if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card"))
                        {
                            mgcnt++;
                            if (mgcnt == 1)
                            {
                                mgc = true;
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                            dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                        }
                    }
                    if (mgc)
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }
                     */


                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        int prm = 0;
                        PosDataObject.POS obcc01 = new PosDataObject.POS();
                        obcc01.Connection = SystemVariables.Conn;
                        prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11 = new DataTable();
                        PosDataObject.POS obcc11 = new PosDataObject.POS();
                        obcc11.Connection = SystemVariables.Conn;
                        ccdtbl11 = obcc11.FetchCardData(prm);

                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                            if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                            if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                            if (drcc["CardType"].ToString() == "Precidia Gift Card") strCardType = "Precidia";
                            if (drcc["CardType"].ToString() == "Datacap Gift Card") strCardType = "Datacap";
                            if (drcc["CardType"].ToString() == "POSLink Gift Card") strCardType = "POSLink";
                            if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                            strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            strCardNum = drcc["RefCardAct"].ToString();
                            strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                            strCardLogo = drcc["RefCardLogo"].ToString();
                            strCardEntry = drcc["RefCardEntry"].ToString();
                            strApprovalNum = drcc["RefCardAuthID"].ToString();
                            strTranID = drcc["RefCardTranID"].ToString();
                            strApprovedAmt = drcc["RefCardAuthAmount"].ToString();

                            if (Settings.POSCardPayment == "Y")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Credit")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }
                            if (strCardType == "Debit")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });

                            }

                            if (strCardType == "Mercury")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "Precidia")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }

                            if (strCardType == "EBT")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }


                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ShowTipsInReceipt == "Y")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm11.Rows.Add(new object[] { "", "", "...............", "" });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm11.Rows.Add(new object[] { "", "", "...............", "" });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                                }
                            }


                            if (strCardType == "Credit")
                            {
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                dtblstrm1.Rows.Add(new object[] { "X", "", "" });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });

                                dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                                dtblstrm1.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                            }

                            if (strCardType == "Debit")
                            {
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                                dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                            }
                        }
                    }
                    // --------------- Sign --------------

                    /*
                    if (rpProb != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Problem + " :" "", "", "" });

                        string OrginalD = "";
                        ArrangeText(rpProb, 30, ref OrginalD);
                        char FindD = '\n';
                        int NumberOfOccurancesD = 0;


                        string CopyOrginalD = string.Copy(OrginalD);
                        int PlaceD = 0;
                        NumberOfOccurancesD = 0;
                        PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                        while (PlaceD != -1)
                        {
                            string cutstr = CopyOrginalD.Substring(0, PlaceD);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesD++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                            PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                            NumberOfOccurancesD++;
                        }

                        if (CopyOrginalD.Length > 30)
                        {
                            int len = CopyOrginalD.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesD++;
                                len = len - 30;
                                if (CopyOrginalD != "")
                                {
                                    //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalD = CopyOrginalD.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }



                        if (NumberOfOccurancesD == 0) NumberOfOccurancesD = 1;
                        else
                        {
                            if ((OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())) NumberOfOccurancesD = NumberOfOccurancesD + 1;

                        }

                        dtblstrm1.Rows.Add(new object[] { rpProb, "", "", NumberOfOccurancesD.ToString() });

                    }

                    if (rpDesc != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                        dtblstrm1.Rows.Add(new object[] { "Repair :", "", "", "" });

                        string OrginalR = "";
                        ArrangeText(rpDesc, 30, ref OrginalR);
                        char FindR = '\n';
                        int NumberOfOccurancesR = 0;


                        string CopyOrginalR = string.Copy(OrginalR);
                        int PlaceR = 0;
                        NumberOfOccurancesR = 0;
                        PlaceR = CopyOrginalR.IndexOf(FindR.ToString());
                        while (PlaceR != -1)
                        {
                            string cutstr = CopyOrginalR.Substring(0, PlaceR);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesR++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalR = CopyOrginalR.Substring(PlaceR + 1);
                            PlaceR = CopyOrginalR.IndexOf(FindR.ToString());
                            NumberOfOccurancesR++;
                        }

                        if (CopyOrginalR.Length > 30)
                        {
                            int len = CopyOrginalR.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesR++;
                                len = len - 30;
                                if (CopyOrginalR != "")
                                {
                                    //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalR = CopyOrginalR.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesR == 0) NumberOfOccurancesR = 1;
                        else
                        {
                            if ((OrginalR.Substring(0, OrginalR.Length - 2) != FindR.ToString())) NumberOfOccurancesR = NumberOfOccurancesR + 1;
                        }

                        dtblstrm1.Rows.Add(new object[] { rpDesc, "", "", NumberOfOccurancesR.ToString() });
                    }

                    */


                    // --------------- Receipt Footer --------------
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    // ------------ Setting Receipt Footer -------------

                    if (((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                        || ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null)))
                    {
                        string MText = "";

                        if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                            MText = Properties.Resources.CUSTOMER_AGREEMENT_ + "\n" + Settings.ReceiptFooter.Trim();

                        /*
                        if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                        {
                            if (MText == "") MText = Properties.Resources.REPAIR_DISCLAIMER_  + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                            else MText = MText + "\n\n" + Properties.Resources.REPAIR_DISCLAIMER_  + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                        }
                        */
                        string OrginalF = "";
                        ArrangeText(MText, 40, ref OrginalF);
                        char FindF = '\n';
                        int NumberOfOccurancesF = 0;

                        string CopyOrginalF = string.Copy(OrginalF);
                        int PlaceF = 0;
                        NumberOfOccurancesF = 0;
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        while (PlaceF != -1)
                        {
                            string cutstr = CopyOrginalF.Substring(0, PlaceF);

                            if (cutstr.Length > 40)
                            {
                                int len = cutstr.Length;
                                while (len >= 40)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 40;
                                    if (cutstr != "")
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                        cutstr = cutstr.Substring(40, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                            }

                            CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            NumberOfOccurancesF++;
                        }

                        if (CopyOrginalF.Length > 40)
                        {
                            int len = CopyOrginalF.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesF++;
                                len = len - 40;
                                if (CopyOrginalF != "")
                                {
                                    //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                    CopyOrginalF = CopyOrginalF.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                        }

                        if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                        else
                        {
                            if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                        }

                        dtblstrm1.Rows.Add(new object[] { MText, "", "", NumberOfOccurancesF.ToString() });

                    }

                    if (blCardPayment)
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.MERCHANT_COPY, "" });
                    }

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { "barcode", "barcode", "barcode" });

                    this.intPageCounter++;
                }

            }
            else
            {
                if (strPrintType == "Invoice")
                {
                    
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);








                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    string serviceT = "";

                    string strDTaxName = "";
                    double dblDTax = 0;
                    int CustomerOrderRef = 0;

                    string strCustDOB = "";

                    string strCustAddress = "";

                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        serviceT = dr["ServiceType"].ToString();

                        strDTaxName = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();
                    }

                    prndtblINV.Dispose();


                    intWO = FetchWorkorderNo();



                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);

                    double dblTempTotal = 0;
                    int i = 0;

                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strFeesText = "";
                        string strFeesID = "0";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";
                        string strRentType = "";
                        double dblRentDuration = 1;
                        string dtRentEffectiveFrom = "";

                        string iQtyDecimals = "";

                        int SalePriceID = 0;
                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();

                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();

                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());

                        iQtyDecimals = dr["QtyDecimal"].ToString();

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        if (strPType == "O") dblTotalPrice = -dblTotalPrice;


                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();



                        TService1 = dr["ServiceType"].ToString();
                        strRentType = dr["RentType"].ToString();
                        dblRentDuration = GeneralFunctions.fnDouble(dr["RentDuration"].ToString());
                        SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                        int rnt = 0;
                        string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);



                        string rentdisplay = "";

                    }

                    //prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------

                    if (!blIsRentReturned)
                    {


                        if (dblDiscount != 0) // -------------- Discount ----------------
                        {

                        }

                        // -------------- Tax ----------------
                        if (dblTax != 0)
                        {

                        }

                        if (dblDTax != 0)
                        {

                        }


                        if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                        {

                        }

                        DataTable dtblCpn = new DataTable();
                        dtblCpn = FetchInvCoupon();

                        if (dblCoupon != 0)
                        {

                        }

                        if (dtblCpn.Rows.Count > 0)
                        {
                        }


                    }

                    if (serviceT == "Rent")
                    {

                    }

                    // -------------- Total ----------------



                    // --------------- Tender --------------


                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);

                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }
                    prndtblINV2.Dispose();


                    if (!blIsRentIssued)
                    {
                        if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                        {

                        }

                    }
                    else
                    {

                    }

                    /*
                    if (!FindNewTemplate)
                    {
                        if (Settings.POSShowGiftCertBalance == "Y")
                        {
                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "" });

                                dtblstrm1.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "", "" });

                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow dr in dtblGC.Rows)
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "" });
                                }
                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                            }
                            dtblGC.Dispose();
                        }

                    }
                    else
                    {
                        string pval = FindTemplateParameterValueInDatatable("Gift Certificate Balance");
                        if (pval != "")
                        {
                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow dr in dtblGC.Rows)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC + "#:" + dr["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }
                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                            }
                            dtblGC.Dispose();
                        }
                    }


                    if (!FindNewTemplate)
                    {
                        DataTable dtblEBT = new DataTable();
                        dtblEBT = FetchEBTBalance(intInvNo);
                        if (dtblEBT.Rows.Count > 0)
                        {

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "" });

                            dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                            foreach (DataRow dr in dtblEBT.Rows)
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                            }
                            dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                        dtblEBT.Dispose();

                    }
                    else
                    {
                        string pval = FindTemplateParameterValueInDatatable("EBT Balance");
                        if (pval != "")
                        {
                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow dr in dtblEBT.Rows)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "", "", "Y", pval });
                                }
                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                            }
                            dtblEBT.Dispose();
                        }
                    }


                    if (!FindNewTemplate)
                    {

                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        bool mgc = false;
                        int mgcnt = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                        {
                            if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                            {
                                mgcnt++;
                                if (mgcnt == 1)
                                {
                                    mgc = true;
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc)
                        {
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        }






                        int prmebt = 0;
                        PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                        obcc01mgc33.Connection = SystemVariables.Conn;
                        prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11mgc3 = new DataTable();
                        PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                        obcc11mgc55.Connection = SystemVariables.Conn;
                        ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                        bool mgc4 = false;
                        int mgcnt4 = 0;
                        foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                        {
                            if (drmgc["CardType"].ToString() == "Food Stamps")
                            {
                                mgcnt4++;
                                if (mgcnt4 == 1)
                                {
                                    mgc4 = true;
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Card, "", Properties.Resources.Balance });
                                    dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                }
                                dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                            }
                        }
                        if (mgc4)
                        {
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        }

                    }
                    else
                    {
                        string pval = FindTemplateParameterValueInDatatable("EBT Balance");
                        if (pval != "")
                        {

                            int prmmgc = 0;
                            PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                            obcc01mgc.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc = new DataTable();
                            PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                            obcc11mgc.Connection = SystemVariables.Conn;
                            ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                            bool mgc = false;
                            int mgcnt = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                            {
                                if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                    || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                                {
                                    mgcnt++;
                                    if (mgcnt == 1)
                                    {
                                        mgc = true;
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.GIft_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc)
                            {
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }






                            int prmebt = 0;
                            PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                            obcc01mgc33.Connection = SystemVariables.Conn;
                            prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc3 = new DataTable();
                            PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                            obcc11mgc55.Connection = SystemVariables.Conn;
                            ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                            bool mgc4 = false;
                            int mgcnt4 = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                            {
                                if (drmgc["CardType"].ToString() == "Food Stamps")
                                {
                                    mgcnt4++;
                                    if (mgcnt4 == 1)
                                    {
                                        mgc4 = true;
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc4)
                            {
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }
                        }
                    }


                    if (boolHATender)
                    {
                        if (!FindNewTemplate)
                        {
                            if ((Settings.HouseAccountBalanceInReceipt == "Y"))
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable("House Account Balance");
                            if (pval != "")
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }
                        }
                    }

                    if (boolSCrdtTender) // Print Store Credit Balance
                    {
                        if (!FindNewTemplate)
                        {
                            PosDataObject.POS objscrtbal = new PosDataObject.POS();
                            objscrtbal.Connection = SystemVariables.Conn;
                            double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable("Store Credit Balance");
                            if (pval != "")
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }
                        }
                    }
                    */



                    /*

                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        int prm = 0;
                        PosDataObject.POS obcc01 = new PosDataObject.POS();
                        obcc01.Connection = SystemVariables.Conn;
                        prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                        DataTable ccdtbl11 = new DataTable();
                        PosDataObject.POS obcc11 = new PosDataObject.POS();
                        obcc11.Connection = SystemVariables.Conn;
                        ccdtbl11 = obcc11.FetchCardData(prm);


                        foreach (DataRow drcc in ccdtbl11.Rows)
                        {
                            if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                            if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                            if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                            if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                            strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                            strCardNum = drcc["RefCardAct"].ToString();
                            strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                            strCardLogo = drcc["RefCardLogo"].ToString();
                            strCardEntry = drcc["RefCardEntry"].ToString();
                            strApprovalNum = drcc["RefCardAuthID"].ToString();
                            strTranID = drcc["RefCardTranID"].ToString();
                            strApprovedAmt = drcc["RefCardAuthAmount"].ToString();

                            if (!FindNewTemplate)
                            {
                                if (Settings.POSCardPayment == "Y")
                                {

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.REF + "#  :", "", intInvNo.ToString() });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACT + "#  :", "", strCardNum });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.CARD + "  :", "", strCardLogo });

                                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "Credit")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                }
                                if (strCardType == "Debit")
                                {

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                                }

                                if (strCardType == "Mercury")
                                {

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "Precidia")
                                {

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                }

                                if (strCardType == "EBT")
                                {

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE, "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)) });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : ", "", strApprovalNum });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : ", "", strTranID });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                }
                            }
                            else
                            {
                                string pval = FindTemplateParameterValueInDatatable("Card Payment Reference");
                                if (pval != "")
                                {
                                    if (Settings.POSCardPayment == "Y")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.CARD + " :" + strCardLogo, "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                    }

                                    if (strCardType == "Credit")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                    }
                                    if (strCardType == "Debit")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });

                                    }

                                    if (strCardType == "Mercury")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                    }

                                    if (strCardType == "Precidia")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                    }

                                    if (strCardType == "EBT")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                    }
                                }
                            }
                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ShowTipsInReceipt == "Y")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total, "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });
                                    //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                                    dtblstrm1.Rows.Add(new object[] { "", "", "", "" });
                                }
                            }


                            if (strCardType == "Credit")
                            {
                                if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                    || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                    ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                     || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                    || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                {
                                    if (!FindNewTemplate)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "" });
                                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "" });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                        dtblstrm1.Rows.Add(new object[] { "X", "", "" });
                                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                    }
                                    else
                                    {
                                        string pval = FindTemplateParameterValueInDatatable("Credit Card - Agree Line");
                                        if (pval != "")
                                        {
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                            dtblstrm1.Rows.Add(new object[] { "X", "", "" });
                                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                        }
                                    }

                                    if (!FindNewTemplate)
                                    {

                                        dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                                        dtblstrm1.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                                    }
                                    else
                                    {
                                        string pval = FindTemplateParameterValueInDatatable("Credit Card - Signature Line");
                                        if (pval != "")
                                        {
                                            dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "", " ", "", "Y", pval });
                                        }
                                    }
                                }
                            }

                            if (strCardType == "Debit")
                            {
                                if (!FindNewTemplate)
                                {
                                    dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.PIN_USED, "" });
                                }
                                else
                                {
                                    string pval = FindTemplateParameterValueInDatatable("Debit Card - Pin Used Line");
                                    if (pval != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                    }
                                }
                                if (!FindNewTemplate)
                                {
                                    dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.SIGNATURE_NOT_REQUIRED, "" });
                                }
                                else
                                {
                                    string pval = FindTemplateParameterValueInDatatable("Debit Card - Signature Not Required Line");
                                    if (pval != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                    }
                   

                    // --------------- Receipt Footer --------------
                    if (!FindNewTemplate)
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }
                    else
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        string pval = FindTemplateParameterValueInDatatable("Receipt Date");
                        if (pval != "")
                        {
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                        }

                        string pval1 = FindTemplateParameterValueInDatatable("User Name");
                        if (pval1 != "")
                        {
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval1 });
                        }

                        string pval2 = FindTemplateParameterValueInDatatable("Till Name");
                        if (pval2 != "")
                        {
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval2 });
                        }
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }

                    // ------------ Setting Receipt Footer -------------

                    if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                    {
                        if (!FindNewTemplate)
                        {
                            string OrginalF = "";
                            ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                            char FindF = '\n';
                            int NumberOfOccurancesF = 0;


                            string CopyOrginalF = string.Copy(OrginalF);
                            int PlaceF = 0;
                            NumberOfOccurancesF = 0;
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            while (PlaceF != -1)
                            {
                                string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                }

                                CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                NumberOfOccurancesF++;
                            }

                            if (CopyOrginalF.Length > 30)
                            {
                                int len = CopyOrginalF.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (CopyOrginalF != "")
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                        CopyOrginalF = CopyOrginalF.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                            }



                            if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                            else
                            {
                                if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                            }

                            dtblstrm1.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable("Receipt Footer");
                            if (pval != "")
                            {
                                string OrginalF = "";
                                ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                char FindF = '\n';
                                int NumberOfOccurancesF = 0;


                                string CopyOrginalF = string.Copy(OrginalF);
                                int PlaceF = 0;
                                NumberOfOccurancesF = 0;
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                while (PlaceF != -1)
                                {
                                    string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                    if (cutstr.Length > 30)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    NumberOfOccurancesF++;
                                }

                                if (CopyOrginalF.Length > 30)
                                {
                                    int len = CopyOrginalF.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (CopyOrginalF != "")
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalF = CopyOrginalF.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }



                                if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                else
                                {
                                    if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                }

                                dtblstrm1.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                            }

                        }
                    }

                    */

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }

                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Line")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }



                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {
                                i++;
                                string strDescription = "";
                                string strDiscText = "";
                                string strFeesText = "";
                                string strFeesID = "0";
                                string strDiscID = "0";
                                double dblDisc = 0;
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                string strInvNotes = "";
                                string tgininv = "";
                                int ipid = 0;

                                string TService1 = "";
                                string strRentType = "";
                                double dblRentDuration = 1;
                                string dtRentEffectiveFrom = "";

                                string iQtyDecimals = "";

                                int SalePriceID = 0;
                                int BuyNGetFreeHeader = 0;
                                string BuyNGetFreeCategory = "";
                                string BuyNGetFreeCaption = "";

                                string PUOM = "";
                                PUOM = dr1["UOM"].ToString();

                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();
                                ipid = GeneralFunctions.fnInt32(dr1["ProductID"].ToString());
                                tgininv = dr1["TaggedInInvoice"].ToString();
                                strSKU = dr1["SKU"].ToString();
                                strDiscText = dr1["DiscountText"].ToString();
                                strDiscID = dr1["DiscountID"].ToString();

                                strFeesID = dr1["FeesID"].ToString();
                                strFeesText = dr1["FeesText"].ToString();

                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr1["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());

                                iQtyDecimals = dr1["QtyDecimal"].ToString();

                                BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr1["BuyNGetFreeHeaderID"].ToString());
                                BuyNGetFreeCategory = dr1["BuyNGetFreeCategory"].ToString();
                                BuyNGetFreeCaption = dr1["BuyNGetFreeName"].ToString();

                                //if (strPType == "O") dblTotalPrice = -dblTotalPrice;


                                //dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));

                                strDP = dr1["DP"].ToString();
                                strInvNotes = dr1["Notes"].ToString();



                                TService1 = dr1["ServiceType"].ToString();
                                strRentType = dr1["RentType"].ToString();
                                dblRentDuration = GeneralFunctions.fnDouble(dr1["RentDuration"].ToString());
                                SalePriceID = GeneralFunctions.fnInt32(dr1["SalePriceID"].ToString());
                                int rnt = 0;
                                string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);



                                string rentdisplay = "";
                                if (TService1 == "Rent")
                                {
                                    if (strRentType == "MI") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.min_;
                                    if (strRentType == "HR") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.hr_;
                                    if (strRentType == "HD") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.half_day_s_;
                                    if (strRentType == "DY") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.day_s_;
                                    if (strRentType == "WK") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.week_s_;
                                    if (strRentType == "MN") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.month_s_;
                                    dtRentEffectiveFrom = GeneralFunctions.fnDate(dr1["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                                }

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                if (BuyNGetFreeCategory == "B")
                                {
                                    dtblstrm1.Rows.Add(new object[] { "** " + BuyNGetFreeCaption + " **", "", "Item", "Y", ptextval });
                                }

                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm1.Rows.Add(new object[] { sPD1, "", "", "Item", "Y", ptextval });



                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm1.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                    if (strMV2 != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                    }
                                }


                                if (TService1 == "Sales")
                                {
                                    if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                                        || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                                    {
                                        if (SalePriceID == 0)
                                        {
                                            if (strPType != "U")
                                            {
                                                if (dblNormalPrice - dblPrice > 0)
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP) + " " + Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                            if (strPType == "U")
                                            {
                                                if (dblUOMPrice - dblPrice > 0)
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP) + " " + Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                        }


                                        if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                                        {
                                            if (strPType != "U")
                                            {
                                                if (dblNormalPrice - dblPrice > 0)
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP) + " " + Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                            if (strPType == "U")
                                            {
                                                if (dblUOMPrice - dblPrice > 0)
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP) + " " + Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                        }

                                        if (strPType == "T")
                                        {
                                            if (tgininv == "Y")
                                            {
                                                PosDataObject.Product opdt = new PosDataObject.Product();
                                                opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                DataTable dtemp = opdt.FetchTaggedData(ipid);
                                                foreach (DataRow tgdr in dtemp.Rows)
                                                {
                                                    double tgQty = 0;
                                                    string tgName = "";
                                                    tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                                    tgName = tgdr["ItemName"].ToString();
                                                    tgQty = tgQty * dblQty;

                                                    dtblstrm1.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "", "Item", "Y", ptextval });
                                                }
                                                dtemp.Dispose();
                                            }
                                        }
                                    }
                                }

                                if (!blIsRentReturned)
                                {
                                    if (strDiscText != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                                    }

                                    if (Settings.ShowFeesInReceipt == "Y")
                                    {
                                        if (strFeesText != "")
                                        {
                                            dtblstrm1.Rows.Add(new object[] { SP2 + strFeesText, "", "", "Item", "Y", ptextval });
                                        }
                                    }
                                }

                                if ((TService1 == "Rent") && (blIsRentIssued))
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + rentdisplay, "", "", "Item", "Y", ptextval });

                                }
                                if (!blIsRentReturned)
                                {
                                    // For Weighted Item
                                    if (strPType == "W")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()) + "/" + PUOM, GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });
                                    }
                                    else
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });
                                        //dtblstrm1.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice), "" });
                                    }

                                    if ((Settings.ScaleDevice == "(None)") && (strPType == "W"))
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Manual_Weight, "", "", "Item", "Y", ptextval });
                                    }
                                }
                                else
                                    dtblstrm1.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblQty), "Detail", "Y", pval });


                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, chrperline, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;

                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > chrperline)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= chrperline)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(chrperline, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm1.Rows.Add(new object[] { strInvNotes, "", "", "Item", "Y", ptextval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValueWithCurrency(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblDiscount != 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                    string strDiscountCaption = Properties.Resources.Discount;
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strDiscountCaption + ": " + GetFotmatDoubleValueWithCurrency(dblDiscount), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblTax != 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    if (dblTax1 != 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName1 + GetFotmatDoubleValueWithCurrency(dblTax1), "", "", "", "Y", pval });

                                    }
                                    if (dblTax2 != 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName2 + GetFotmatDoubleValueWithCurrency(dblTax2), "", "", "", "Y", pval });
                                    }
                                    if (dblTax3 != 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName3 + GetFotmatDoubleValueWithCurrency(dblTax3), "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                                {
                                    DataTable dFees = FetchInvFees();
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    if (dblFees + dblFeesCoupon != 0)
                                    {
                                        if (dFees.Rows.Count == 1) dtblstrm1.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                        if (dFees.Rows.Count > 1) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValue(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                    }
                                    if (dblFeesTax + dblFeesCouponTax != 0)
                                    {
                                        if (dFees.Rows.Count == 1) dtblstrm1.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                        if (dFees.Rows.Count > 1) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblCoupon != 0)
                                {
                                    DataTable dtblCpn = new DataTable();
                                    dtblCpn = FetchInvCoupon();
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket + ": " + GetFotmatDoubleValueWithCurrency(dblCoupon), "", "", "", "Y", pval });

                                    if (dtblCpn.Rows.Count > 0)
                                    {
                                        foreach (DataRow drc in dtblCpn.Rows)
                                        {
                                            string strTender = "";
                                            double dblAmount = 0;

                                            strTender = drc["Name"].ToString();

                                            string sPD1 = "";
                                            string sPD2 = "";
                                            string sPD3 = "";

                                            SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);


                                            dtblstrm1.Rows.Add(new object[] { sPD1, "", "", "", "Y", pval });

                                            if (sPD2.Trim() != "")
                                            {
                                                dtblstrm1.Rows.Add(new object[] { sPD2, "", "", "", "Y", pval });
                                            }

                                            if (sPD3.Trim() != "")
                                            {

                                                dtblstrm1.Rows.Add(new object[] { sPD3, "", "", "", "Y", pval });
                                            }


                                            dblAmount = GeneralFunctions.fnDouble(drc["Amount"].ToString());
                                            dtblstrm1.Rows.Add(new object[] { GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });
                                        }
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {
                            if (serviceT == "Rent")
                            {
                                if (dblRentalSecurityDeposit > 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Security_Deposit + ": " + GetFotmatDoubleValueWithCurrency(dblRentalSecurityDeposit), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (serviceT != "Rent")
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblTotalSale), "", "", "", "Y", pval });
                            else
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblTotalSale + dblRentalSecurityDeposit), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                            DataTable prndtblINV21 = new DataTable();
                            prndtblINV21 = FetchInvTender();

                            foreach (DataRow dr1 in prndtblINV21.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr1["DisplayAs"].ToString();
                                dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                dtblstrm1.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                {
                                    double cashbk = 0;
                                    cashbk = FetchCashBack(dblAmount);
                                    if (cashbk != 0)
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                    }
                                }


                            }
                            prndtblINV21.Dispose();
                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (!blIsRentIssued)
                            {
                                if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValueWithCurrency(dblTempTender - dblTotalSale), "", "", "", "Y", pval });
                                }

                            }
                            else
                            {
                                if (dblTotalSale + dblRentalSecurityDeposit - dblTempTender != 0) // --------------- Change Due --------------
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValue(dblTempTender + dblRentalSecurityDeposit - dblTotalSale), "", "", "", "Y", pval });
                                }

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drgc in dtblGC.Rows)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC + "#:" + drgc["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drgc["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }

                            }
                            dtblGC.Dispose();

                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drebt in dtblEBT.Rows)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + drebt["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drebt["CardBalance"].ToString())), "", "", "Y", pval });
                                }

                            }
                            dtblEBT.Dispose();




                            int prmmgc = 0;
                            PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                            obcc01mgc.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc = new DataTable();
                            PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                            obcc11mgc.Connection = SystemVariables.Conn;
                            ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                            bool mgc = false;
                            int mgcnt = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                            {
                                if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                    || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                                {
                                    mgcnt++;
                                    if (mgcnt == 1)
                                    {
                                        mgc = true;
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.GIft_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc)
                            {
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }






                            int prmebt = 0;
                            PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                            obcc01mgc33.Connection = SystemVariables.Conn;
                            prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc3 = new DataTable();
                            PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                            obcc11mgc55.Connection = SystemVariables.Conn;
                            ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                            bool mgc4 = false;
                            int mgcnt4 = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                            {
                                if (drmgc["CardType"].ToString() == "Food Stamps")
                                {
                                    mgcnt4++;
                                    if (mgcnt4 == 1)
                                    {
                                        mgc4 = true;
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc4)
                            {
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }





                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                            if (boolHATender)
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolSCrdtTender)
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (blCardPayment)
                            {
                                int prm = 0;
                                PosDataObject.POS obcc01 = new PosDataObject.POS();
                                obcc01.Connection = SystemVariables.Conn;
                                prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                                DataTable ccdtbl11 = new DataTable();
                                PosDataObject.POS obcc11 = new PosDataObject.POS();
                                obcc11.Connection = SystemVariables.Conn;
                                ccdtbl11 = obcc11.FetchCardData(prm);


                                foreach (DataRow drcc in ccdtbl11.Rows)
                                {
                                    if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                    if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                    if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                    if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                    strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                    strCardNum = drcc["RefCardAct"].ToString();
                                    strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                    strCardLogo = drcc["RefCardLogo"].ToString();
                                    strCardEntry = drcc["RefCardEntry"].ToString();
                                    strApprovalNum = drcc["RefCardAuthID"].ToString();
                                    strTranID = drcc["RefCardTranID"].ToString();
                                    strApprovedAmt = drcc["RefCardAuthAmount"].ToString();


                                    if (Settings.POSCardPayment == "Y")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.CARD + " :" + strCardLogo, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Credit")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (strCardType == "Debit")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Mercury")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "Precidia")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "EBT")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (Settings.AcceptTips == "Y")
                                    {
                                        if (Settings.ShowTipsInReceipt == "Y")
                                        {
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });
                                            //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });


                                        }
                                    }


                                    if (strCardType == "Credit")
                                    {
                                        if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                            || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                            ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                             || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                            || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                        {
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                            dtblstrm1.Rows.Add(new object[] { "X", "", "" });
                                            dtblstrm1.Rows.Add(new object[] { "", "", "" });

                                            dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "", " ", "", "Y", pval });
                                        }
                                    }

                                    if (strCardType == "Debit")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany1(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress1(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {
                                if (intWO > 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Work_Order_Number + ": " + intWO.ToString(), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {
                                if (intWO > 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date + ": " + GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt"), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {
                                if (serviceT == "Rent")
                                {
                                    if (blIsRentIssued) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Rent___Issue, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {
                                if (serviceT == "Rent")
                                {
                                    if (blIsRentReturned) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Rent___Return, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                if (strCustAddress != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText("Address: " + strCustAddress, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                if (strCustDOB != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Merchant Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCHANT_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm1.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    this.intPageCounter++;




                }


                if (strPrintType == "Reprint Receipt")
                {
                    
                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace3);





                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCustID = "";
                    string strCID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;
                    double dblCoupon = 0;
                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";

                    double dblFees = 0;
                    double dblFeesTax = 0;
                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    string strDTaxName = "";
                    double dblDTax = 0;

                    int CustomerOrderRef = 0;

                    string strCustDOB = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        strDTaxName = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        CustomerOrderRef = GeneralFunctions.fnInt32(dr["CustomerOrderRef"].ToString());

                        strCustDOB = dr["CustomerDOB"].ToString();
                    }
                    prndtblINV.Dispose();




                    intWO = FetchWorkorderNo();
                    if (intWO > 0) // work order payment
                    {

                    }





                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;



                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        string strDiscText = "";
                        double dblDisc = 0;
                        string strDescription = "";
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";

                        string strFeesID = "0";
                        string strFeesText = "";
                        int SalePriceID = 0;
                        string iQtyDecimals = "";
                        int BuyNGetFreeHeader = 0;
                        string BuyNGetFreeCategory = "";
                        string BuyNGetFreeCaption = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        int ipid = 0;
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();

                        strSKU = dr["SKU"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();

                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        iQtyDecimals = dr["QtyDecimal"].ToString();

                        BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                        BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                        BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();

                        if (strPType == "O") dblTotalPrice = -dblTotalPrice;

                        strDiscText = dr["DiscountText"].ToString();
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";






                    }

                    //prndtblINV1.Dispose();



                    // -------------- Sub Total ----------------










                    // --------------- Tender --------------

                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "" });
                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    DataTable prndtblINV2 = new DataTable();
                    prndtblINV2 = FetchInvTender();
                    double dblTempTender = 0;
                    foreach (DataRow dr in prndtblINV2.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + dblAmount);
                        if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                        if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;



                        if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                        {
                            double cashbk = 0;
                            cashbk = FetchCashBack(dblAmount);
                            if (cashbk != 0)
                            {
                                dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);

                            }
                        }

                        if (dr["Name"].ToString() == "House Account") boolHATender = true;
                        if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }
                    prndtblINV2.Dispose();

                    if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                    {

                    }

                    /*
                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        DataTable dtblGC = new DataTable();
                        dtblGC = FetchActiveGC(intInvNo);
                        if (dtblGC.Rows.Count > 0)
                        {
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "" });

                            dtblstrm1.Rows.Add(new object[] { SP1 + DateTime.Today.Date.ToShortDateString(), "", "" });

                            dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                            foreach (DataRow dr in dtblGC.Rows)
                            {
                                dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.GC + "#:" + dr["GC"].ToString(), "xxx", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["GCAMT"].ToString())) });
                            }
                            dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                        }
                        dtblGC.Dispose();
                    }
                    //}

                    DataTable dtblEBT = new DataTable();
                    dtblEBT = FetchEBTBalance(intInvNo);
                    if (dtblEBT.Rows.Count > 0)
                    {

                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "" });

                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                        foreach (DataRow dr in dtblEBT.Rows)
                        {
                            dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.EBT_Card + "#:" + dr["CardNo"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(dr["CardBalance"].ToString())), "" });
                        }
                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });
                    }
                    dtblEBT.Dispose();

                    int prmmgc = 0;
                    PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                    obcc01mgc.Connection = SystemVariables.Conn;
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                    DataTable ccdtbl11mgc = new DataTable();
                    PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                    obcc11mgc.Connection = SystemVariables.Conn;
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                    bool mgc = false;
                    int mgcnt = 0;
                    foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                    {
                        if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                            || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                        {
                            mgcnt++;
                            if (mgcnt == 1)
                            {
                                mgc = true;
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.GIft_Card, "", Properties.Resources.Balance });
                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                            }
                            dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString(), "", GetFotmatDoubleValue(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())) });
                        }
                    }
                    if (mgc)
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }


                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }

                    if (boolSCrdtTender) // Print Store Credit Balance
                    {
                        PosDataObject.POS objscrtbal = new PosDataObject.POS();
                        objscrtbal.Connection = SystemVariables.Conn;
                        double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + " :", "", GetFotmatDoubleValue(dval), "" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    }
                    */


                    /*
                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                        dtblstrm1.Rows.Add(new object[] { "", "", "  " + Properties.Resources.S_I_G_N_A_T_U_R_E + "     " });
                    }
                    // --------------- Sign --------------
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "" });
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    // ------------ Setting Receipt Footer -------------

                    */

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Line")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }



                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {

                                string strDescription = "";
                                string strDiscText = "";
                                string strFeesText = "";
                                string strFeesID = "0";
                                string strDiscID = "0";
                                double dblDisc = 0;
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                string strInvNotes = "";
                                string tgininv = "";
                                int ipid = 0;

                                string TService1 = "";
                                string strRentType = "";
                                double dblRentDuration = 1;
                                string dtRentEffectiveFrom = "";

                                string iQtyDecimals = "";

                                int SalePriceID = 0;
                                int BuyNGetFreeHeader = 0;
                                string BuyNGetFreeCategory = "";
                                string BuyNGetFreeCaption = "";

                                string PUOM = "";
                                PUOM = dr1["UOM"].ToString();

                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();
                                ipid = GeneralFunctions.fnInt32(dr1["ProductID"].ToString());
                                tgininv = dr1["TaggedInInvoice"].ToString();
                                strSKU = dr1["SKU"].ToString();
                                strDiscText = dr1["DiscountText"].ToString();
                                strDiscID = dr1["DiscountID"].ToString();

                                strFeesID = dr1["FeesID"].ToString();
                                strFeesText = dr1["FeesText"].ToString();

                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr1["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());

                                iQtyDecimals = dr1["QtyDecimal"].ToString();

                                BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr1["BuyNGetFreeHeaderID"].ToString());
                                BuyNGetFreeCategory = dr1["BuyNGetFreeCategory"].ToString();
                                BuyNGetFreeCaption = dr1["BuyNGetFreeName"].ToString();

                                //if (strPType == "O") dblTotalPrice = -dblTotalPrice;


                                //dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));

                                strDP = dr1["DP"].ToString();
                                strInvNotes = dr1["Notes"].ToString();



                                TService1 = dr1["ServiceType"].ToString();
                                strRentType = dr1["RentType"].ToString();
                                dblRentDuration = GeneralFunctions.fnDouble(dr1["RentDuration"].ToString());
                                SalePriceID = GeneralFunctions.fnInt32(dr1["SalePriceID"].ToString());
                                int rnt = 0;
                                string rntvl = int.TryParse(dblRentDuration.ToString(), out rnt) ? rnt.ToString() : GetFotmatDoubleValue(dblRentDuration);



                                string rentdisplay = "";
                                if (TService1 == "Rent")
                                {
                                    if (strRentType == "MI") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.min_;
                                    if (strRentType == "HR") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.hr_;
                                    if (strRentType == "HD") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.half_day_s_;
                                    if (strRentType == "DY") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.day_s_;
                                    if (strRentType == "WK") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.week_s_;
                                    if (strRentType == "MN") rentdisplay = Properties.Resources._for + " " + rntvl + " " + Properties.Resources.month_s_;
                                    dtRentEffectiveFrom = GeneralFunctions.fnDate(dr1["RentDuration"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                                }

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                if (BuyNGetFreeCategory == "B")
                                {
                                    dtblstrm1.Rows.Add(new object[] { "** " + BuyNGetFreeCaption + " **", "", "Item", "Y", ptextval });
                                }

                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm1.Rows.Add(new object[] { sPD1, "", "", "Item", "Y", ptextval });



                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm1.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                    if (strMV2 != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                    }
                                }


                                if (TService1 == "Sales")
                                {
                                    if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                                        || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                                    {
                                        if (SalePriceID == 0)
                                        {
                                            if (strPType != "U")
                                            {
                                                if (dblNormalPrice - dblPrice > 0)
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP) + " " + Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                            if (strPType == "U")
                                            {
                                                if (dblUOMPrice - dblPrice > 0)
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP) + " " + Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                        }


                                        if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                                        {
                                            if (strPType != "U")
                                            {
                                                if (dblNormalPrice - dblPrice > 0)
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP) + " " + Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                            if (strPType == "U")
                                            {
                                                if (dblUOMPrice - dblPrice > 0)
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP) + " " + Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });

                                                }
                                            }
                                        }

                                        if (strPType == "T")
                                        {
                                            if (tgininv == "Y")
                                            {
                                                PosDataObject.Product opdt = new PosDataObject.Product();
                                                opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                DataTable dtemp = opdt.FetchTaggedData(ipid);
                                                foreach (DataRow tgdr in dtemp.Rows)
                                                {
                                                    double tgQty = 0;
                                                    string tgName = "";
                                                    tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                                    tgName = tgdr["ItemName"].ToString();
                                                    tgQty = tgQty * dblQty;

                                                    dtblstrm1.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "", "Item", "Y", ptextval });
                                                }
                                                dtemp.Dispose();
                                            }
                                        }
                                    }
                                }

                                if (!blIsRentReturned)
                                {
                                    if (strDiscText != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                                    }

                                    if (Settings.ShowFeesInReceipt == "Y")
                                    {
                                        if (strFeesText != "")
                                        {
                                            dtblstrm1.Rows.Add(new object[] { SP2 + strFeesText, "", "", "Item", "Y", ptextval });
                                        }
                                    }
                                }

                                if ((TService1 == "Rent") && (blIsRentIssued))
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + rentdisplay, "", "", "Item", "Y", ptextval });

                                }
                                if (!blIsRentReturned)
                                {
                                    // For Weighted Item
                                    if (strPType == "W")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()) + "/" + PUOM, GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });
                                    }
                                    else
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + GeneralFunctions.FormatDoubleForPrint(dblPrice.ToString()), GetDisplayQty(dblQty.ToString(), iQtyDecimals, strPType, PUOM), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });
                                        //dtblstrm1.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice), "" });
                                    }

                                    if ((Settings.ScaleDevice == "(None)") && (strPType == "W"))
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Manual_Weight, "", "", "Item", "Y", ptextval });
                                    }
                                }
                                else
                                    dtblstrm1.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblQty), "Detail", "Y", pval });


                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, chrperline, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;

                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > chrperline)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= chrperline)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(chrperline, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm1.Rows.Add(new object[] { strInvNotes, "", "", "Item", "Y", ptextval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValueWithCurrency(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblDiscount != 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                    string strDiscountCaption = Properties.Resources.Discount;
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strDiscountCaption + ": " + GetFotmatDoubleValueWithCurrency(dblDiscount), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblTax != 0)
                                {
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    if (dblTax1 != 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName1 + GetFotmatDoubleValueWithCurrency(dblTax1), "", "", "", "Y", pval });

                                    }
                                    if (dblTax2 != 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName2 + GetFotmatDoubleValueWithCurrency(dblTax2), "", "", "", "Y", pval });
                                    }
                                    if (dblTax3 != 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tax + ": " + strTaxName3 + GetFotmatDoubleValueWithCurrency(dblTax3), "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                                {
                                    DataTable dFees = FetchInvFees();
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    if (dblFees + dblFeesCoupon != 0)
                                    {
                                        if (dFees.Rows.Count == 1) dtblstrm1.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                        if (dFees.Rows.Count > 1) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValue(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                    }
                                    if (dblFeesTax + dblFeesCouponTax != 0)
                                    {
                                        if (dFees.Rows.Count == 1) dtblstrm1.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                        if (dFees.Rows.Count > 1) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {
                            if (!blIsRentReturned)
                            {
                                if (dblCoupon != 0)
                                {
                                    DataTable dtblCpn = new DataTable();
                                    dtblCpn = FetchInvCoupon();
                                    string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket + ": " + GetFotmatDoubleValueWithCurrency(dblCoupon), "", "", "", "Y", pval });

                                    if (dtblCpn.Rows.Count > 0)
                                    {
                                        foreach (DataRow drc in dtblCpn.Rows)
                                        {
                                            string strTender = "";
                                            double dblAmount = 0;

                                            strTender = drc["Name"].ToString();

                                            string sPD1 = "";
                                            string sPD2 = "";
                                            string sPD3 = "";

                                            SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);


                                            dtblstrm1.Rows.Add(new object[] { sPD1, "", "", "", "Y", pval });

                                            if (sPD2.Trim() != "")
                                            {
                                                dtblstrm1.Rows.Add(new object[] { sPD2, "", "", "", "Y", pval });
                                            }

                                            if (sPD3.Trim() != "")
                                            {

                                                dtblstrm1.Rows.Add(new object[] { sPD3, "", "", "", "Y", pval });
                                            }


                                            dblAmount = GeneralFunctions.fnDouble(drc["Amount"].ToString());
                                            dtblstrm1.Rows.Add(new object[] { GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });
                                        }
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {
                            if (dblRentalSecurityDeposit > 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Security_Deposit + ": " + GetFotmatDoubleValueWithCurrency(dblRentalSecurityDeposit), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblTotalSale), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                            DataTable prndtblINV21 = new DataTable();
                            prndtblINV21 = FetchInvTender();

                            foreach (DataRow dr1 in prndtblINV21.Rows)
                            {
                                string strTender = "";
                                double dblAmount = 0;

                                strTender = dr1["DisplayAs"].ToString();
                                dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                dtblstrm1.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                {
                                    double cashbk = 0;
                                    cashbk = FetchCashBack(dblAmount);
                                    if (cashbk != 0)
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                    }
                                }


                            }
                            prndtblINV21.Dispose();
                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (!blIsRentIssued)
                            {
                                if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValueWithCurrency(dblTempTender - dblTotalSale), "", "", "", "Y", pval });
                                }

                            }
                            else
                            {
                                if (dblTotalSale + dblRentalSecurityDeposit - dblTempTender != 0) // --------------- Change Due --------------
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValue(dblTempTender + dblRentalSecurityDeposit - dblTotalSale), "", "", "", "Y", pval });
                                }

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drgc in dtblGC.Rows)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC + "#:" + drgc["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drgc["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }

                            }
                            dtblGC.Dispose();

                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drebt in dtblEBT.Rows)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + drebt["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drebt["CardBalance"].ToString())), "", "", "Y", pval });
                                }

                            }
                            dtblEBT.Dispose();




                            int prmmgc = 0;
                            PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                            obcc01mgc.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc = new DataTable();
                            PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                            obcc11mgc.Connection = SystemVariables.Conn;
                            ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                            bool mgc = false;
                            int mgcnt = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                            {
                                if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                    || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                                {
                                    mgcnt++;
                                    if (mgcnt == 1)
                                    {
                                        mgc = true;
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.GIft_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc)
                            {
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }






                            int prmebt = 0;
                            PosDataObject.POS obcc01mgc33 = new PosDataObject.POS();
                            obcc01mgc33.Connection = SystemVariables.Conn;
                            prmebt = obcc01mgc33.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc3 = new DataTable();
                            PosDataObject.POS obcc11mgc55 = new PosDataObject.POS();
                            obcc11mgc55.Connection = SystemVariables.Conn;
                            ccdtbl11mgc3 = obcc11mgc55.FetchMercuryEBTCardData(prmebt);

                            bool mgc4 = false;
                            int mgcnt4 = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc3.Rows)
                            {
                                if (drmgc["CardType"].ToString() == "Food Stamps")
                                {
                                    mgcnt4++;
                                    if (mgcnt4 == 1)
                                    {
                                        mgc4 = true;
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                            if (mgc4)
                            {
                                dtblstrm1.Rows.Add(new object[] { "", "", "" });
                            }





                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                            if (boolHATender)
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolSCrdtTender)
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (blIsVoid)
                            {
                                if (blCardPayment)
                                {
                                    DataTable ccdtbl11 = new DataTable();
                                    PosDataObject.POS obcc11 = new PosDataObject.POS();
                                    obcc11.Connection = SystemVariables.Conn;
                                    ccdtbl11 = obcc11.FetchVoidCardData(intInvNo);


                                    foreach (DataRow drcc in ccdtbl11.Rows)
                                    {
                                        if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                        if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                        if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                        if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                        strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                        strCardNum = drcc["RefCardAct"].ToString();
                                        strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                        strCardLogo = drcc["RefCardLogo"].ToString();
                                        strCardEntry = drcc["RefCardEntry"].ToString();
                                        strApprovalNum = drcc["RefCardAuthID"].ToString();
                                        strTranID = drcc["RefCardTranID"].ToString();
                                        strApprovedAmt = drcc["RefCardAuthAmount"].ToString();
                                        string voidRef = drcc["Reference"].ToString();
                                        if (Settings.POSCardPayment == "Y")
                                        {

                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.CARD + ":" + strCardLogo, "", "", "", "Y", pval });


                                        }

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.VOID_AMOUNT + ": " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.REFERENCE + ": " + voidRef, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                }
                            }
                        }
                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Reprint/Void Caption")
                            {
                                if (!blIsVoid)
                                    dtblstrm1.Rows.Add(new object[] { "* " + Properties.Resources.Reprinted_Receipt + ": " + intReprintCnt.ToString() + " *", "", "", "", "Y", pval });
                                else
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.VOIDED, "", "", "", "Y", pval });

                                }

                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany1(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress1(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {
                                if (intWO > 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Work_Order_Number + ": " + intWO.ToString(), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {
                                if (intWO > 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date + ": " + GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt"), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {
                                if (blIsRentIssued) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Rent___Issue, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {
                                if (blIsRentReturned) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Rent___Return, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                if (strCustAddress != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText("Address: " + strCustAddress, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                if (strCustDOB != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Merchant Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCHANT_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm1.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    //this.intPageCounter++;
                }


                if (strPrintType == "Repair In")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);



                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strCustPhone = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblRentalSecurityDeposit = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string serviceT = "";

                    double rpTotal = 0;
                    double rpAdvance = 0;
                    double rpDue = 0;

                    string rpDesc = "";

                    string rpStatus = "";
                    string rpInDate = "";
                    string rpDelDate = "";
                    string rpNotfDate = "";

                    string rpItem = "";
                    string rpSL = "";
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strCustPhone = dr["CustMobile"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                        rpTotal = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr["RepairDueAmount"].ToString());
                        rpDesc = dr["RepairProblem"].ToString();

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        rpInDate = GeneralFunctions.fnDate(dr["RepairDateIn"].ToString()).ToString("d");

                        if (dr["RepairDeliveryDate"].ToString() != "")
                            rpDelDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToString("d");
                        if (dr["RepairNotifiedDate"].ToString() != "")
                            rpNotfDate = GeneralFunctions.fnDate(dr["RepairNotifiedDate"].ToString()).ToString("d");

                        serviceT = dr["ServiceType"].ToString();

                        rpItem = dr["RepairItemName"].ToString();

                        rpSL = dr["RepairItemSlNo"].ToString();
                    }
                    prndtblINV.Dispose();

                    intWO = FetchWorkorderNo();




                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchInvDetails(dblTotalSale);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;

                        string TService1 = "";

                        string strFeesID = "0";
                        string strFeesText = "";


                        string strrpItemTag = "";
                        string strrpItemSLNO = "";
                        string dtrpPurchaseDate = "";
                        string dtrpDeliveryDate = "";

                        string PUOM = "";
                        PUOM = dr["UOM"].ToString();

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();
                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        TService1 = dr["ServiceType"].ToString();
                        strrpItemTag = dr["RepairItemTag"].ToString();
                        strrpItemSLNO = dr["RepairItemSLNO"].ToString();

                        if (dr["RepairItemPurchaseDate"].ToString() != "")
                            dtrpPurchaseDate = GeneralFunctions.fnDate(dr["RepairItemPurchaseDate"].ToString()).ToString("d");

                        if (dr["RepairItemDeliveryDate"].ToString() != "")
                            dtrpDeliveryDate = GeneralFunctions.fnDate(dr["RepairItemDeliveryDate"].ToString()).ToString("d");

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);







                    }

                    //prndtblINV1.Dispose();

                    // -------------- Sub Total ----------------


                    if (dblDiscount != 0) // -------------- Discount ----------------
                    {

                    }

                    // -------------- Tax ----------------
                    if (dblTax != 0)
                    {

                    }


                    if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                    {

                    }






                    // -------------- Total ----------------

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    double dblTempTender = 0;
                    if (rpAdvance > 0)
                    {



                        DataTable prndtblINV2 = new DataTable();
                        prndtblINV2 = FetchInvTender();

                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            //dtblstrm1.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    //dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    //dtblstrm1.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                            if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                        }
                        prndtblINV2.Dispose();


                    }


                    //Block

                    /*
                    dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.I_AGREE_TO_PAY + " " + GetFotmatDoubleValue(rpDue), "" });

                    dtblstrm1.Rows.Add(new object[] { "", "", "" });
                    dtblstrm1.Rows.Add(new object[] { "X", "", "" });
                    dtblstrm1.Rows.Add(new object[] { "", "", "" });

                    dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                    dtblstrm1.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "" });
                    */


                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Details")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }


                            prndtblINV1 = FetchInvDetails(dblTotalSale);

                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {
                                i++;
                                string strDescription = "";
                                string strDiscText = "";
                                string strDiscID = "0";
                                double dblDisc = 0;
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                string strInvNotes = "";
                                string tgininv = "";
                                int ipid = 0;

                                string TService1 = "";

                                string strFeesID = "0";
                                string strFeesText = "";


                                string strrpItemTag = "";
                                string strrpItemSLNO = "";
                                string dtrpPurchaseDate = "";
                                string dtrpDeliveryDate = "";

                                string PUOM = "";
                                PUOM = dr1["UOM"].ToString();

                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();
                                ipid = GeneralFunctions.fnInt32(dr1["ProductID"].ToString());
                                tgininv = dr1["TaggedInInvoice"].ToString();
                                strSKU = dr1["SKU"].ToString();
                                strDiscText = dr1["DiscountText"].ToString();
                                strDiscID = dr1["DiscountID"].ToString();
                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr1["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());
                                dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                                strDP = dr1["DP"].ToString();
                                strInvNotes = dr1["Notes"].ToString();
                                strFeesID = dr1["FeesID"].ToString();
                                strFeesText = dr1["FeesText"].ToString();
                                TService1 = dr1["ServiceType"].ToString();
                                strrpItemTag = dr1["RepairItemTag"].ToString();
                                strrpItemSLNO = dr1["RepairItemSLNO"].ToString();

                                if (dr1["RepairItemPurchaseDate"].ToString() != "")
                                    dtrpPurchaseDate = GeneralFunctions.fnDate(dr1["RepairItemPurchaseDate"].ToString()).ToString("d");

                                if (dr1["RepairItemDeliveryDate"].ToString() != "")
                                    dtrpDeliveryDate = GeneralFunctions.fnDate(dr1["RepairItemDeliveryDate"].ToString()).ToString("d");

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm1.Rows.Add(new object[] { sPD1, "", "", "Item", "Y", ptextval });

                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm1.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                    if (strMV2 != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                    }
                                }

                                if (strrpItemSLNO != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.SL + "# " + strrpItemSLNO, "", "", "Item", "Y", ptextval });
                                }

                                if (strrpItemTag != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tag + "# " + strrpItemTag, "", "", "Item", "Y", ptextval });
                                }

                                if (strDiscText != "")
                                {

                                    dtblstrm1.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                                }

                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    if (strFeesText != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP2 + strFeesText, "", "", "Item", "Y", ptextval });
                                    }
                                }

                                //dtblstrm1.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblTotalPrice), "" });
                                dtblstrm1.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });

                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, 30, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;

                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > 30)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(30, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm1.Rows.Add(new object[] { strInvNotes, "", "", "", "Y", ptextval });
                                }

                            }



                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValueWithCurrency(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (dblDiscount != 0) // -------------- Discount ----------------
                            {

                                string strDiscountCaption = Properties.Resources.Discount;
                                dtblstrm1.Rows.Add(new object[] { SP1 + strDiscountCaption + ": " + GetFotmatDoubleValueWithCurrency(dblDiscount), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dblTax != 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblTax), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                            {
                                DataTable dFees = FetchInvFees();
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                if (dblFees + dblFeesCoupon != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm1.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValue(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                }
                                if (dblFeesTax + dblFeesCouponTax != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm1.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Transaction/ Advance Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (rpAdvance > 0)
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tran_Amt_ + ": " + GetFotmatDoubleValueWithCurrency(rpAdvance), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Security_Deposit + ": " + GetFotmatDoubleValueWithCurrency(rpAdvance), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Due + ": " + GetFotmatDoubleValueWithCurrency(rpDue), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(rpTotal), "", "", "", "Y", pval });

                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (rpAdvance > 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                                DataTable prndtblINV21 = new DataTable();
                                prndtblINV21 = FetchInvTender();

                                foreach (DataRow dr1 in prndtblINV21.Rows)
                                {
                                    string strTender = "";
                                    double dblAmount = 0;

                                    strTender = dr1["DisplayAs"].ToString();
                                    dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                    if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                    if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                    dtblstrm1.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                    if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                    {
                                        double cashbk = 0;
                                        cashbk = FetchCashBack(dblAmount);
                                        if (cashbk != 0)
                                        {

                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                        }
                                    }


                                }
                                prndtblINV21.Dispose();

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (rpAdvance - dblTempTender != 0)
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValueWithCurrency(dblTempTender - rpAdvance), "", "", "", "Y", pval });

                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drgc in dtblGC.Rows)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC + "#:" + drgc["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drgc["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }

                            }
                            dtblGC.Dispose();

                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drebt in dtblEBT.Rows)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + drebt["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drebt["CardBalance"].ToString())), "", "", "Y", pval });
                                }

                            }
                            dtblEBT.Dispose();
                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolHATender)
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolSCrdtTender)
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (blCardPayment)
                            {
                                int prm = 0;
                                PosDataObject.POS obcc01 = new PosDataObject.POS();
                                obcc01.Connection = SystemVariables.Conn;
                                prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                                DataTable ccdtbl11 = new DataTable();
                                PosDataObject.POS obcc11 = new PosDataObject.POS();
                                obcc11.Connection = SystemVariables.Conn;
                                ccdtbl11 = obcc11.FetchCardData(prm);


                                foreach (DataRow drcc in ccdtbl11.Rows)
                                {
                                    if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                    if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                    if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                    if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                    strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                    strCardNum = drcc["RefCardAct"].ToString();
                                    strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                    strCardLogo = drcc["RefCardLogo"].ToString();
                                    strCardEntry = drcc["RefCardEntry"].ToString();
                                    strApprovalNum = drcc["RefCardAuthID"].ToString();
                                    strTranID = drcc["RefCardTranID"].ToString();
                                    strApprovedAmt = drcc["RefCardAuthAmount"].ToString();


                                    if (Settings.POSCardPayment == "Y")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.CARD + " :" + strCardLogo, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Credit")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (strCardType == "Debit")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Mercury")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "Precidia")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "EBT")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (Settings.AcceptTips == "Y")
                                    {
                                        if (Settings.ShowTipsInReceipt == "Y")
                                        {
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });
                                            //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });


                                        }
                                    }


                                    if (strCardType == "Credit")
                                    {
                                        if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                            || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                            ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                             || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                            || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                        {
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                            dtblstrm1.Rows.Add(new object[] { "X", "", "" });
                                            dtblstrm1.Rows.Add(new object[] { "", "", "" });

                                            dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "", " ", "", "Y", pval });
                                        }
                                    }

                                    if (strCardType == "Debit")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                    }
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Repair Item Problem")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (rpDesc != "")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Problem + ": ", "", "", "Y", pval });
                                string OrginalD = "";
                                ArrangeText(rpDesc, 30, ref OrginalD);
                                char FindD = '\n';
                                int NumberOfOccurancesD = 0;


                                string CopyOrginalD = string.Copy(OrginalD);
                                int PlaceD = 0;
                                NumberOfOccurancesD = 0;
                                PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                while (PlaceD != -1)
                                {
                                    string cutstr = CopyOrginalD.Substring(0, PlaceD);

                                    if (cutstr.Length > 30)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesD++;
                                            len = len - 30;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                                    PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                    NumberOfOccurancesD++;
                                }

                                if (CopyOrginalD.Length > 30)
                                {
                                    int len = CopyOrginalD.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesD++;
                                        len = len - 30;
                                        if (CopyOrginalD != "")
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalD = CopyOrginalD.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }

                                if (NumberOfOccurancesD == 0) NumberOfOccurancesD = 1;
                                else
                                {
                                    if ((OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())) NumberOfOccurancesD = NumberOfOccurancesD + 1;
                                }

                                dtblstrm1.Rows.Add(new object[] { rpDesc, "", "", "", "Y", pval });

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Receipt Footer/Repair Disclaimer")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                         || ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null)))
                            {
                                string MText = "";

                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                    MText = Properties.Resources.CUSTOMER_AGREEMENT_ + "\n" + Settings.ReceiptFooter.Trim();

                                if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                                {
                                    if (MText == "") MText = Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                                    else MText = MText + "\n\n" + Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                                }

                                string OrginalF = "";
                                ArrangeText(MText, 40, ref OrginalF);
                                char FindF = '\n';
                                int NumberOfOccurancesF = 0;


                                string CopyOrginalF = string.Copy(OrginalF);
                                int PlaceF = 0;
                                NumberOfOccurancesF = 0;
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                while (PlaceF != -1)
                                {
                                    string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                    if (cutstr.Length > 40)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 40;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    NumberOfOccurancesF++;
                                }

                                if (CopyOrginalF.Length > 40)
                                {
                                    int len = CopyOrginalF.Length;
                                    while (len >= 40)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 40;
                                        if (CopyOrginalF != "")
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalF = CopyOrginalF.Substring(40, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }
                                if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                else
                                {
                                    if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                }

                                dtblstrm1.Rows.Add(new object[] { MText, "", "", "", "Y", pval });

                            }


                        }

                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Repair Issue Caption")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Repair + " " + Properties.Resources.Issue, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Date In")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_In + ": " + rpInDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Delivery Date")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Delivery_Date + " " + rpDelDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Notified Date")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Notified_Date + " " + rpNotfDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Repair Item Name")
                            {
                                if (rpItem != "")
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Repair_Item + ": " + rpItem, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Repair Item Serial No")
                            {
                                if (rpSL != "")
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Serial + "#: " + rpSL, "", "", "", "Y", pval });
                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany1(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress1(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Phone")
                            {
                                if (strCustPhone != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Ph_ + ": " + strCustPhone, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                if (strCustAddress != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText("Address: " + strCustAddress, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                //if (strCustDOB != "")
                                //{
                                //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                //}

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Merchant Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCHANT_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm1.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    this.intPageCounter++;
                }


                if (strPrintType == "Repair Deliver")
                {

                    string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                    string SP2 = "";
                    string SP3 = new string(' ', Settings.NoOfPrintSpace1);



                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";

                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strCustPhone = "";
                    string strTransDate = "";

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTotalSale = 0;

                    double dblRentalSecurityDeposit = 0;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string serviceT = "";

                    double rpTotal = 0;
                    double rpAdvance = 0;
                    double rpDue = 0;

                    string rpProb = "";
                    string rpDesc = "";

                    string rpStatus = "";
                    string rpDelDate = "";
                    string rpNotfDate = "";

                    string rpInDate = "";
                    string rpItem = "";
                    string rpSL = "";

                    int ParentID = 0;
                    string strCustAddress = "";
                    prndtblINV = FetchInvHeader();
                    foreach (DataRow dr in prndtblINV.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustAddress = dr["CustomerShortAddress"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strCustPhone = dr["CustMobile"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblRentalSecurityDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                        ParentID = GeneralFunctions.fnInt32(dr["RepairParentID"].ToString());
                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());


                        rpTotal = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr["RepairDueAmount"].ToString());

                        if (dr["RepairDeliveryDate"].ToString() != "")
                            rpDelDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToString("d");
                        if (dr["RepairNotifiedDate"].ToString() != "")
                            rpNotfDate = GeneralFunctions.fnDate(dr["RepairNotifiedDate"].ToString()).ToString("d");

                        rpInDate = GeneralFunctions.fnDate(dr["RepairDateIn"].ToString()).ToString("d");

                        rpItem = dr["RepairItemName"].ToString();

                        rpSL = dr["RepairItemSlNo"].ToString();

                        serviceT = dr["ServiceType"].ToString();
                    }
                    prndtblINV.Dispose();








                    DataTable prndtblINV1 = new DataTable();
                    prndtblINV1 = FetchRPInvDetails(ParentID);
                    double dblTempTotal = 0;
                    int i = 0;
                    foreach (DataRow dr in prndtblINV1.Rows)
                    {
                        i++;
                        string strDescription = "";
                        string strDiscText = "";
                        string strDiscID = "0";
                        double dblDisc = 0;
                        string strPType = "";
                        string strMV1 = "";
                        string strMV2 = "";
                        string strMV3 = "";
                        string strSKU = "";
                        double dblPrice = 0;
                        double dblQty = 0;
                        double dblTotalPrice = 0;
                        string strDP = "";
                        double dblNormalPrice = 0;
                        double dblUOMPrice = 0;
                        string strInvNotes = "";
                        string tgininv = "";
                        int ipid = 0;
                        string strFeesID = "0";
                        string strFeesText = "";

                        string TService1 = "";

                        string strrpItemTag = "";
                        string strrpItemSLNO = "";
                        string dtrpPurchaseDate = "";
                        string dtrpDeliveryDate = "";

                        strDescription = dr["Description"].ToString();
                        strPType = dr["ProductType"].ToString();
                        strMV1 = dr["MOP1"].ToString();
                        strMV2 = dr["MOP2"].ToString();
                        strMV3 = dr["MOP3"].ToString();
                        ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                        tgininv = dr["TaggedInInvoice"].ToString();
                        strSKU = dr["SKU"].ToString();
                        strDiscText = dr["DiscountText"].ToString();
                        strDiscID = dr["DiscountID"].ToString();
                        dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                        dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                        dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                        dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                        dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                        dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                        strDP = dr["DP"].ToString();
                        strInvNotes = dr["Notes"].ToString();
                        strFeesID = dr["FeesID"].ToString();
                        strFeesText = dr["FeesText"].ToString();
                        TService1 = dr["ServiceType"].ToString();
                        strrpItemTag = dr["RepairItemTag"].ToString();
                        strrpItemSLNO = dr["RepairItemSLNO"].ToString();
                        if (dr["RepairItemPurchaseDate"].ToString() != "")
                            dtrpPurchaseDate = GeneralFunctions.fnDate(dr["RepairItemPurchaseDate"].ToString()).ToString("d");

                        if (dr["RepairItemDeliveryDate"].ToString() != "")
                            dtrpDeliveryDate = GeneralFunctions.fnDate(dr["RepairItemDeliveryDate"].ToString()).ToString("d");

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);



                    }
                    //prndtblINV1.Dispose();



                    // -------------- Tax ----------------


                    DataTable dtbl2 = new DataTable();
                    dtbl2 = FetchRepairParentHeader(ParentID);
                    foreach (DataRow dr4 in dtbl2.Rows)
                    {
                        rpTotal = GeneralFunctions.fnDouble(dr4["RepairAmount"].ToString());
                        rpAdvance = GeneralFunctions.fnDouble(dr4["RepairAdvanceAmount"].ToString());
                        rpDue = GeneralFunctions.fnDouble(dr4["RepairDueAmount"].ToString());
                        rpProb = dr4["RepairProblem"].ToString();
                        rpDesc = dr4["RepairNotes"].ToString();
                    }



                    // -------------- Total ----------------

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;
                    double dblTempTender = 0;
                    if (dblTotalSale > 0)
                    {


                        DataTable prndtblINV2 = new DataTable();
                        prndtblINV2 = FetchInvTender();

                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            //dtblstrm1.Rows.Add(new object[] { SP1 + strTender, "", GetFotmatDoubleValue(dblAmount) });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    //dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back, "", GetFotmatDoubleValue(cashbk) });
                                    //dtblstrm1.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total, "", GetFotmatDoubleValue(dblAmount + cashbk) });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;
                            if (dr["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                        }
                        prndtblINV2.Dispose();


                    }

                    if (Settings.PrintTrainingMode == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.Training, "", "" });
                    }

                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });
                    }


                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Item/Price Header")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderHeader(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "Header", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Details")
                        {
                            string pval = FindTemplateParameterValueInDatatableOrderDetail(dr["GroupName"].ToString(), dr["SL"].ToString());

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }



                            prndtblINV1 = FetchRPInvDetails(ParentID);

                            foreach (DataRow dr1 in prndtblINV1.Rows)
                            {

                                string strDescription = "";
                                string strDiscText = "";
                                string strDiscID = "0";
                                double dblDisc = 0;
                                string strPType = "";
                                string strMV1 = "";
                                string strMV2 = "";
                                string strMV3 = "";
                                string strSKU = "";
                                double dblPrice = 0;
                                double dblQty = 0;
                                double dblTotalPrice = 0;
                                string strDP = "";
                                double dblNormalPrice = 0;
                                double dblUOMPrice = 0;
                                string strInvNotes = "";
                                string tgininv = "";
                                int ipid = 0;
                                string strFeesID = "0";
                                string strFeesText = "";

                                string TService1 = "";

                                string strrpItemTag = "";
                                string strrpItemSLNO = "";
                                string dtrpPurchaseDate = "";
                                string dtrpDeliveryDate = "";

                                strDescription = dr1["Description"].ToString();
                                strPType = dr1["ProductType"].ToString();
                                strMV1 = dr1["MOP1"].ToString();
                                strMV2 = dr1["MOP2"].ToString();
                                strMV3 = dr1["MOP3"].ToString();
                                ipid = GeneralFunctions.fnInt32(dr1["ProductID"].ToString());
                                tgininv = dr1["TaggedInInvoice"].ToString();
                                strSKU = dr1["SKU"].ToString();
                                strDiscText = dr1["DiscountText"].ToString();
                                strDiscID = dr1["DiscountID"].ToString();
                                dblPrice = GeneralFunctions.fnDouble(dr1["Price"].ToString());
                                dblQty = GeneralFunctions.fnDouble(dr1["Qty"].ToString());
                                dblDisc = GeneralFunctions.fnDouble(dr1["Discount"].ToString());
                                dblTotalPrice = GeneralFunctions.fnDouble(dr1["TotalPrice"].ToString());
                                dblNormalPrice = GeneralFunctions.fnDouble(dr1["NormalPrice"].ToString());
                                dblUOMPrice = GeneralFunctions.fnDouble(dr1["UOMPrice"].ToString());
                                dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                                strDP = dr1["DP"].ToString();
                                strInvNotes = dr1["Notes"].ToString();
                                strFeesID = dr1["FeesID"].ToString();
                                strFeesText = dr1["FeesText"].ToString();
                                TService1 = dr1["ServiceType"].ToString();
                                strrpItemTag = dr1["RepairItemTag"].ToString();
                                strrpItemSLNO = dr1["RepairItemSLNO"].ToString();
                                if (dr1["RepairItemPurchaseDate"].ToString() != "")
                                    dtrpPurchaseDate = GeneralFunctions.fnDate(dr1["RepairItemPurchaseDate"].ToString()).ToString("d");

                                if (dr1["RepairItemDeliveryDate"].ToString() != "")
                                    dtrpDeliveryDate = GeneralFunctions.fnDate(dr1["RepairItemDeliveryDate"].ToString()).ToString("d");

                                string sPD1 = "";
                                string sPD2 = "";
                                string sPD3 = "";

                                SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                                dtblstrm1.Rows.Add(new object[] { sPD1, "", "", "Item", "Y", ptextval });

                                if (sPD2.Trim() != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                                }

                                if (sPD3.Trim() != "")
                                {

                                    dtblstrm1.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                                }

                                if (strPType == "M")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                    if (strMV2 != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                    }
                                    if (strMV3 != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                    }
                                }



                                if (strrpItemSLNO != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.SL + " # " + strrpItemSLNO, "", "", "Item", "Y", ptextval });
                                }

                                if (strrpItemTag != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tag + " # " + strrpItemTag, "", "", "Item", "Y", ptextval });
                                }

                                if (strDiscText != "")
                                {

                                    dtblstrm1.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                                }

                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    if (strFeesText != "")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP2 + strFeesText, "", "", "Item", "Y", ptextval });
                                    }
                                }

                                //dtblstrm1.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblTotalPrice), "" });

                                dtblstrm1.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(dblTotalPrice), "Detail", "Y", pval });

                                if (strInvNotes != "")
                                {
                                    string OrginalN = "";
                                    ArrangeText(strInvNotes, 30, ref OrginalN);
                                    char FindN = '\n';
                                    int NumberOfOccurancesN = 0;
                                    string CopyOrginalN = string.Copy(OrginalN);
                                    int PlaceN = 0;

                                    NumberOfOccurancesN = 0;
                                    PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                    while (PlaceN != -1)
                                    {
                                        string cutstr = CopyOrginalN.Substring(0, PlaceN);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesN++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                        }

                                        CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                                        NumberOfOccurancesN++;
                                    }

                                    if (CopyOrginalN.Length > 30)
                                    {
                                        int len = CopyOrginalN.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesN++;
                                            len = len - 30;
                                            if (CopyOrginalN != "")
                                            {
                                                CopyOrginalN = CopyOrginalN.Substring(30, len);
                                            }
                                        }
                                    }

                                    if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                                    else
                                    {
                                        if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                                    }

                                    dtblstrm1.Rows.Add(new object[] { strInvNotes, "", "", "Item", "Y", ptextval });
                                }

                            }




                        }
                        else if (dr["GroupName"].ToString() == "Subtotal Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValueWithCurrency(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Discount Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (dblDiscount != 0) // -------------- Discount ----------------
                            {

                                string strDiscountCaption = Properties.Resources.Discount;
                                dtblstrm1.Rows.Add(new object[] { SP1 + strDiscountCaption + ": " + GetFotmatDoubleValueWithCurrency(dblDiscount), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Tax Amount")
                        {
                            if (dblTax != 0)
                            {
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                if (dblTax1 != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1 + " " + GetFotmatDoubleValueWithCurrency(dblTax1), "", "", "", "Y", pval });

                                }
                                if (dblTax2 != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2 + " " + GetFotmatDoubleValueWithCurrency(dblTax2), "", "", "", "Y", pval });
                                }
                                if (dblTax3 != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3 + " " + GetFotmatDoubleValueWithCurrency(dblTax3), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Fees Amount")
                        {
                            if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                            {
                                DataTable dFees = FetchInvFees();
                                string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                                if (dblFees + dblFeesCoupon != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm1.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Fees___Charges + ": " + GetFotmatDoubleValue(dblFees + dblFeesCoupon), "", "", "", "Y", pval });
                                }
                                if (dblFeesTax + dblFeesCouponTax != 0)
                                {
                                    if (dFees.Rows.Count == 1) dtblstrm1.Rows.Add(new object[] { dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                    if (dFees.Rows.Count > 1) dtblstrm1.Rows.Add(new object[] { Properties.Resources.Fees___Charges_Tax + ": " + GetFotmatDoubleValueWithCurrency(dblFeesTax + dblFeesCouponTax), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Ticket Discount Amount")
                        {

                        }
                        else if (dr["GroupName"].ToString() == "Security Deposit Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (rpAdvance > 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Security_Deposit + ": " + GetFotmatDoubleValueWithCurrency(rpAdvance), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (rpAdvance > 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Due + ": " + GetFotmatDoubleValueWithCurrency(rpDue), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Total Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(rpTotal), "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Tender Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (dblTotalSale > 0)
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                                DataTable prndtblINV21 = new DataTable();
                                prndtblINV21 = FetchInvTender();

                                foreach (DataRow dr1 in prndtblINV21.Rows)
                                {
                                    string strTender = "";
                                    double dblAmount = 0;

                                    strTender = dr1["DisplayAs"].ToString();
                                    dblAmount = GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                    if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                                    if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;


                                    dtblstrm1.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValueWithCurrency(dblAmount), "", "", "", "Y", pval });

                                    if ((dr1["Name"].ToString() == "Debit Card") || (dr1["Name"].ToString() == "EBT Cash"))
                                    {
                                        double cashbk = 0;
                                        cashbk = FetchCashBack(dblAmount);
                                        if (cashbk != 0)
                                        {

                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValueWithCurrency(cashbk), "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValueWithCurrency(dblAmount + cashbk), "", "", "", "Y", pval });
                                        }
                                    }


                                }
                                prndtblINV21.Dispose();

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Change Due Amount")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (dblTotalSale > 0)
                            {
                                if (rpDue - dblTempTender != 0)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Change + ": " + GetFotmatDoubleValueWithCurrency(dblTempTender - rpDue), "", "", "", "Y", pval });
                                }
                            }

                        }
                        else if (dr["GroupName"].ToString() == "Gift Certificate Balance")
                        {

                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            DataTable dtblGC = new DataTable();
                            dtblGC = FetchActiveGC(intInvNo);
                            if (dtblGC.Rows.Count > 0)
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC_s__with_balance_as_on + " ", "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { DateTime.Today.Date.ToShortDateString(), "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drgc in dtblGC.Rows)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.GC + "#:" + drgc["GC"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drgc["GCAMT"].ToString())), "", "", "", "Y", pval });
                                }

                            }
                            dtblGC.Dispose();

                        }
                        else if (dr["GroupName"].ToString() == "EBT Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            DataTable dtblEBT = new DataTable();
                            dtblEBT = FetchEBTBalance(intInvNo);
                            if (dtblEBT.Rows.Count > 0)
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Balance + " ", "", "", "", "Y", pval });

                                dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                                foreach (DataRow drebt in dtblEBT.Rows)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_Card + "#:" + drebt["CardNo"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drebt["CardBalance"].ToString())), "", "", "Y", pval });
                                }

                            }
                            dtblEBT.Dispose();




                            int prmmgc = 0;
                            PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                            obcc01mgc.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intInvNo);
                            DataTable ccdtbl11mgc = new DataTable();
                            PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                            obcc11mgc.Connection = SystemVariables.Conn;
                            ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                            bool mgc = false;
                            int mgcnt = 0;
                            foreach (DataRow drmgc in ccdtbl11mgc.Rows)
                            {
                                if ((drmgc["CardType"].ToString() == "Mercury Gift Card") || (drmgc["CardType"].ToString() == "Precidia Gift Card")
                                    || (drmgc["CardType"].ToString() == "Datacap Gift Card") || (drmgc["CardType"].ToString() == "POSLink Gift Card"))
                                {
                                    mgcnt++;
                                    if (mgcnt == 1)
                                    {
                                        mgc = true;
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.GIft_Card + ": " + Properties.Resources.Balance, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                                    }
                                    dtblstrm1.Rows.Add(new object[] { drmgc["RefCardAct"].ToString() + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(drmgc["RefCardBalance"].ToString())), "", "", "", "Y", pval });
                                }
                            }
                        }
                        else if (dr["GroupName"].ToString() == "House Account Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolHATender)
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Store Credit Balance")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (boolSCrdtTender)
                            {
                                PosDataObject.POS objscrtbal = new PosDataObject.POS();
                                objscrtbal.Connection = SystemVariables.Conn;
                                double dval = objscrtbal.GetCustomerStoreCreditBalance(GeneralFunctions.fnInt32(strCID));

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Store_Credit_Balance + ": " + GetFotmatDoubleValueWithCurrency(dval), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Card Payment Reference")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (blCardPayment)
                            {
                                int prm = 0;
                                PosDataObject.POS obcc01 = new PosDataObject.POS();
                                obcc01.Connection = SystemVariables.Conn;
                                prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
                                DataTable ccdtbl11 = new DataTable();
                                PosDataObject.POS obcc11 = new PosDataObject.POS();
                                obcc11.Connection = SystemVariables.Conn;
                                ccdtbl11 = obcc11.FetchCardData(prm);


                                foreach (DataRow drcc in ccdtbl11.Rows)
                                {
                                    if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                    if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                    if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                    if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                    strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                    strCardNum = drcc["RefCardAct"].ToString();
                                    strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                    strCardLogo = drcc["RefCardLogo"].ToString();
                                    strCardEntry = drcc["RefCardEntry"].ToString();
                                    strApprovalNum = drcc["RefCardAuthID"].ToString();
                                    strTranID = drcc["RefCardTranID"].ToString();
                                    strApprovedAmt = drcc["RefCardAuthAmount"].ToString();


                                    if (Settings.POSCardPayment == "Y")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.REF + "# :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACT + "# :" + strCardNum, "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.CARD + " :" + strCardLogo, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Credit")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (strCardType == "Debit")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });


                                    }

                                    if (strCardType == "Mercury")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "Precidia")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }

                                    if (strCardType == "EBT")
                                    {

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + ": " + GetFotmatDoubleValueWithCurrency(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + ": " + strApprovalNum, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + ": " + strTranID, "", "", "", "Y", pval });

                                    }
                                    if (Settings.AcceptTips == "Y")
                                    {
                                        if (Settings.ShowTipsInReceipt == "Y")
                                        {
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tip, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });
                                            //dtblstrm1.Rows.Add(new object[] { "", "", "...............", "" });

                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Total, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { "x", "x", "x", "" });


                                        }
                                    }


                                    if (strCardType == "Credit")
                                    {
                                        if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                            || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                            ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                             || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                            || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                        {
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });
                                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                                            dtblstrm1.Rows.Add(new object[] { "X", "", "" });
                                            dtblstrm1.Rows.Add(new object[] { "", "", "" });

                                            dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "", " ", "", "Y", pval });
                                        }
                                    }

                                    if (strCardType == "Debit")
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                    }
                                }
                            }

                        }
                        else if (dr["GroupName"].ToString() == "Repair Problem")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (rpProb != "")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Problem + ": ", "", "", "Y", pval });
                                string OrginalD = "";
                                ArrangeText(rpProb, 30, ref OrginalD);
                                char FindD = '\n';
                                int NumberOfOccurancesD = 0;


                                string CopyOrginalD = string.Copy(OrginalD);
                                int PlaceD = 0;
                                NumberOfOccurancesD = 0;
                                PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                while (PlaceD != -1)
                                {
                                    string cutstr = CopyOrginalD.Substring(0, PlaceD);

                                    if (cutstr.Length > 30)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesD++;
                                            len = len - 30;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                                    PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                    NumberOfOccurancesD++;
                                }

                                if (CopyOrginalD.Length > 30)
                                {
                                    int len = CopyOrginalD.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesD++;
                                        len = len - 30;
                                        if (CopyOrginalD != "")
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalD = CopyOrginalD.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }

                                if (NumberOfOccurancesD == 0) NumberOfOccurancesD = 1;
                                else
                                {
                                    if ((OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())) NumberOfOccurancesD = NumberOfOccurancesD + 1;
                                }

                                dtblstrm1.Rows.Add(new object[] { rpProb, "", "", "", "Y", pval });

                            }
                        }
                        else if (dr["GroupName"].ToString() == "Repair Notes")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (rpDesc != "")
                            {

                                dtblstrm1.Rows.Add(new object[] { "Repair" + ": ", "", "", "Y", pval });
                                string OrginalD = "";
                                ArrangeText(rpDesc, 30, ref OrginalD);
                                char FindD = '\n';
                                int NumberOfOccurancesD = 0;


                                string CopyOrginalD = string.Copy(OrginalD);
                                int PlaceD = 0;
                                NumberOfOccurancesD = 0;
                                PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                while (PlaceD != -1)
                                {
                                    string cutstr = CopyOrginalD.Substring(0, PlaceD);

                                    if (cutstr.Length > 30)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesD++;
                                            len = len - 30;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalD = CopyOrginalD.Substring(PlaceD + 1);
                                    PlaceD = CopyOrginalD.IndexOf(FindD.ToString());
                                    NumberOfOccurancesD++;
                                }

                                if (CopyOrginalD.Length > 30)
                                {
                                    int len = CopyOrginalD.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesD++;
                                        len = len - 30;
                                        if (CopyOrginalD != "")
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalD = CopyOrginalD.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }

                                if (NumberOfOccurancesD == 0) NumberOfOccurancesD = 1;
                                else
                                {
                                    if ((OrginalD.Substring(0, OrginalD.Length - 2) != FindD.ToString())) NumberOfOccurancesD = NumberOfOccurancesD + 1;
                                }

                                dtblstrm1.Rows.Add(new object[] { rpDesc, "", "", "", "Y", pval });

                            }
                        }

                        else if (dr["GroupName"].ToString() == "Repair Signature Line")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E, "", "", "", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Receipt Footer/Repair Disclaimer")
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                         || ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null)))
                            {
                                string MText = "";

                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                    MText = Properties.Resources.CUSTOMER_AGREEMENT_ + "\n" + Settings.ReceiptFooter.Trim();

                                if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                                {
                                    if (MText == "") MText = Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                                    else MText = MText + "\n\n" + Properties.Resources.REPAIR_DISCLAIMER_ + "\n" + Settings.ReceiptLayawayPolicy.Trim();
                                }

                                string OrginalF = "";
                                ArrangeText(MText, 40, ref OrginalF);
                                char FindF = '\n';
                                int NumberOfOccurancesF = 0;


                                string CopyOrginalF = string.Copy(OrginalF);
                                int PlaceF = 0;
                                NumberOfOccurancesF = 0;
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                while (PlaceF != -1)
                                {
                                    string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                    if (cutstr.Length > 40)
                                    {
                                        int len = cutstr.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 40;
                                            if (cutstr != "")
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                cutstr = cutstr.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                    }

                                    CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    NumberOfOccurancesF++;
                                }

                                if (CopyOrginalF.Length > 40)
                                {
                                    int len = CopyOrginalF.Length;
                                    while (len >= 40)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 40;
                                        if (CopyOrginalF != "")
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                            CopyOrginalF = CopyOrginalF.Substring(40, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                }
                                if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                else
                                {
                                    if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                }

                                dtblstrm1.Rows.Add(new object[] { MText, "", "", "", "Y", pval });

                            }


                        }

                        else
                        {
                            string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                            if (dr["GroupName"].ToString() == "Repair Deliver Caption")
                            {

                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Repair + " " + Properties.Resources.Deliver, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Reference Invoice Number")
                            {
                                dtblstrm1.Rows.Add(new object[] { "Ref. Invoice# " + ParentID.ToString(), "", "", "", "Y", pval });

                            }

                            if (dr["GroupName"].ToString() == "Repair Item Name")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Repair_Item + " : " + rpItem, "", "", "", "Y", pval });

                            }

                            if (dr["GroupName"].ToString() == "Repair Item Serial No")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Serial + " # : " + rpSL, "", "", "", "Y", pval });

                            }

                            

                            if (dr["GroupName"].ToString() == "Business Name")
                            {
                                GetRecieptHeaderCompany1(pval);
                            }

                            if (dr["GroupName"].ToString() == "Business Address")
                            {
                                GetRecieptHeaderAddress1(pval);
                            }

                            if (dr["GroupName"].ToString() == "Work Order Number")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Work Order Date")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Issue")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Rent - Return")
                            {

                            }

                            if (dr["GroupName"].ToString() == "Receipt Number")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intInvNo.ToString(), "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Customer Company")
                            {
                                if (strCustCompany != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Company + ": " + strCustCompany, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Phone")
                            {
                                if (strCustPhone != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Ph_ + ": " + strCustPhone, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Name")
                            {
                                if (strCustName != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Code")
                            {
                                if (strCustID != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer_ID + ": " + strCustID, "", "", "", "Y", pval });
                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Address")
                            {
                                if (strCustAddress != "")
                                {
                                    string OrginalH = "";// Settings.TotalReceiptHeader;

                                    ArrangeText("Address: " + strCustAddress, chrperline, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > chrperline)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= chrperline)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - chrperline;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(chrperline, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > chrperline)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 40)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 40;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, chrperline), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }


                                }

                            }

                            if (dr["GroupName"].ToString() == "Customer Date of Birth")
                            {
                                //if (strCustDOB != "")
                                //{
                                //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_of_Birth + ": " + GeneralFunctions.fnDate(strCustDOB).ToString(SystemVariables.DateFormat), "", "", "", "Y", pval });
                                //}

                            }

                            if (dr["GroupName"].ToString() == "Receipt Date")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_ + ": " + strTransDate, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Till Name")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "User Name")
                            {
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                            }

                            if (dr["GroupName"].ToString() == "Merchant Copy")
                            {
                                if (blCardPayment)
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCHANT_COPY, "", "", "", "Y", pval });
                                }
                            }

                            if (dr["GroupName"].ToString() == "Receipt Footer")
                            {
                                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                                {
                                    string OrginalF = "";
                                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                                    char FindF = '\n';
                                    int NumberOfOccurancesF = 0;


                                    string CopyOrginalF = string.Copy(OrginalF);
                                    int PlaceF = 0;
                                    NumberOfOccurancesF = 0;
                                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                    while (PlaceF != -1)
                                    {
                                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                        if (cutstr.Length > 30)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 30)
                                            {
                                                NumberOfOccurancesF++;
                                                len = len - 30;
                                                if (cutstr != "")
                                                {
                                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                                    cutstr = cutstr.Substring(30, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                            }
                                        }
                                        else
                                        {
                                            //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                        }

                                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                        NumberOfOccurancesF++;
                                    }

                                    if (CopyOrginalF.Length > 30)
                                    {
                                        int len = CopyOrginalF.Length;
                                        while (len >= 30)
                                        {
                                            NumberOfOccurancesF++;
                                            len = len - 30;
                                            if (CopyOrginalF != "")
                                            {
                                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                        }
                                    }
                                    else
                                    {
                                        //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                                    }



                                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                                    else
                                    {
                                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                                    }

                                    dtblstrm1.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", "", "Y", pval });
                                }
                            }

                        }
                    }

                    this.intPageCounter++;
                }

                if (strPrintType == "Layaway")
                {
                    string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                    string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace2);


                    if (Settings.DemoVersion == "Y")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "", "" });

                    }

                    string pval = FindTemplateParameterValueInDatatable("Logo");
                    if (pval != "")
                    {
                        dtblstrm1.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                    }

                    pval = FindTemplateParameterValueInDatatable("Business Name");
                    if (pval != "")
                    {
                        GetRecieptHeaderCompany1(pval);
                    }
                    pval = FindTemplateParameterValueInDatatable("Business Address");
                    if (pval != "")
                    {
                        GetRecieptHeaderAddress1(pval);
                    }



                    if (blIsLayawayRefund)
                    {
                        string pval1 = FindTemplateParameterValueInDatatable("Layaway Cancellation Caption");
                        if (pval1 != "")
                            dtblstrm1.Rows.Add(new object[] { "Layaway Cancellation", "", "", "", "Y", pval1 });
                    }



                    DataTable prndtblINV = new DataTable();

                    int intTranNo = 0;
                    int intStoreID = 0; string stermnl = "";
                    int intRegisterID = 0;
                    string strEmpID = "";
                    string strCID = "";
                    string strCustID = "";
                    string strCustName = "";
                    string strCustCompany = "";
                    string strTransDate = "";
                    string strLayawayDueDate = "";
                    int intLayInvNo = 0;

                    double dblTax = 0;
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    double dblDiscount = 0;
                    double dblTotalSale = 0;

                    string strDiscountReason = "";
                    string strTaxName1 = "";
                    string strTaxName2 = "";
                    string strTaxName3 = "";
                    string strLayawayStatus = "";

                    prndtblINV = FetchLayawayHeader(false);
                    int invcount = 0;
                    double dblTotalLayawaySale = 0;
                    double dblTotalLayawayPayment = 0;
                    double dblTotalLayawayBalance = 0;
                    int intPrevLayNo = 0;
                    int distinctlayway = 1;

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    double dblDTax = 0;
                    string custAddr = "";

                    foreach (DataRow dr in prndtblINV.Rows)
                    {


                        invcount++;

                        intLayNo = GeneralFunctions.fnInt32(dr["LayawayNo"].ToString());
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intTrnNo = intTranNo;
                        intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                        intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                        strEmpID = dr["EmpID"].ToString();
                        strCID = dr["CID"].ToString();
                        strCustID = dr["CustID"].ToString();
                        strCustName = dr["CustName"].ToString();
                        strCustCompany = dr["CustCompany"].ToString();
                        strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        strDiscountReason = dr["DiscountReason"].ToString();
                        strTaxName1 = dr["TaxNM1"].ToString();
                        strTaxName2 = dr["TaxNM2"].ToString();
                        strTaxName3 = dr["TaxNM3"].ToString();

                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        intLayInvNo = GeneralFunctions.fnInt32(dr["InvoiceNo"].ToString());
                        strLayawayDueDate = GeneralFunctions.fnDate(dr["DateDue"].ToString()).ToString("d");
                        strLayawayStatus = dr["LayawayStatus"].ToString();

                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        intInvNo = intLayInvNo;

                        custAddr = FetchCustomerAddress(GeneralFunctions.fnInt32(strCID));

                        if (strLayawayStatus == "3")
                        {
                            pval = FindTemplateParameterValueInDatatable("Receipt/Layaway Number");
                            if (pval != "")
                                dtblstrm1.Rows.Add(new object[] { Properties.Resources.Receipt_Number + ": " + intLayInvNo.ToString(), "", "", "", "Y", pval });

                        }
                        else
                        {
                            if ((intPrevLayNo == 0) || (intPrevLayNo != intLayNo))
                            {
                                pval = FindTemplateParameterValueInDatatable("Receipt/Layaway Number");
                                if (pval != "")
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Layaway_Number + ": " + intLayNo.ToString(), "", "", "", "Y", pval });

                            }
                        }

                        if (invcount == 1)
                        {



                            if (strCustName != "")
                            {
                                pval = FindTemplateParameterValueInDatatable("Customer Name");
                                if (pval != "")
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.Customer + ": " + strCustName, "", "", "", "Y", pval });
                            }



                            if (custAddr != "")
                            {
                                pval = FindTemplateParameterValueInDatatable("Customer Address");
                                if (pval != "")
                                {
                                    string OrginalH = ""; // Settings.TotalReceiptHeader;
                                    ArrangeText(custAddr, 26, ref OrginalH);

                                    char FindH = '\n';
                                    int NumberOfOccurancesH = 0;

                                    string CopyOrginalH = string.Copy(OrginalH);
                                    int PlaceH = 0;

                                    NumberOfOccurancesH = 0;
                                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                    while (PlaceH != -1)
                                    {
                                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                                        if (cutstr.Length > 26)
                                        {
                                            int len = cutstr.Length;
                                            while (len >= 26)
                                            {
                                                NumberOfOccurancesH++;
                                                len = len - 26;
                                                if (cutstr != "")
                                                {
                                                    dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "", "Y", pval });
                                                    cutstr = cutstr.Substring(26, len);
                                                }
                                            }
                                            if (len != 0)
                                            {
                                                dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", pval });
                                            }
                                        }
                                        else
                                        {
                                            if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "", "", "Y", pval });
                                        }

                                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                                        NumberOfOccurancesH++;
                                    }

                                    if (CopyOrginalH.Length > 26)
                                    {
                                        int len = CopyOrginalH.Length;
                                        while (len >= 26)
                                        {
                                            NumberOfOccurancesH++;
                                            len = len - 26;
                                            if (CopyOrginalH != "")
                                            {
                                                dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "", "Y", pval });
                                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                                            }
                                        }
                                        if (len != 0)
                                        {
                                            dtblstrm1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", pval });
                                        }
                                    }
                                    else
                                    {
                                        if (CopyOrginalH != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", pval });
                                    }


                                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                                    else
                                    {
                                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                                    }
                                }
                            }


                        }


                        DataTable prndtblINV1 = new DataTable();
                        prndtblINV1 = FetchInvDetails(dblTotalSale);
                        double dblTempTotal = 0;
                        foreach (DataRow drL in prndtblINV1.Rows)
                        {

                            pval = FindTemplateParameterValueInDatatableOrderDetail1("Item/Price Line");

                            string ptextval = pval;

                            string pval1 = FindTemplateParameterValueInDatatableOrderHeader1("Item/Price Header");
                            if (pval1 == "")
                            {
                                pval = pval + "|Y|Y|Y";
                            }
                            else
                            {
                                pval = pval + "|" + pval1;
                            }

                            string strDescription = "";
                            string strPType = "";
                            string strMV1 = "";
                            string strMV2 = "";
                            string strMV3 = "";
                            string strSKU = "";
                            double dblPrice = 0;
                            double dblQty = 0;
                            double dblTotalPrice = 0;
                            string strDP = "";
                            double dblNormalPrice = 0;
                            double dblUOMPrice = 0;
                            string tgininv = "";
                            string strDiscText = "";
                            double dblDisc = 0;
                            int ipid = 0;
                            string txapp1 = "N";
                            string txapp2 = "N";
                            string txapp3 = "N";
                            double tx1 = 0;
                            double tx2 = 0;
                            double tx3 = 0;
                            double linetx = 0;
                            double lineprice = 0;
                            int tx1ty = 0;
                            int tx2ty = 0;
                            int tx3ty = 0;
                            double tDTax = 0;
                            double tFees = 0;
                            double tFeesTax = 0;
                            tDTax = GeneralFunctions.fnDouble(drL["DTax"].ToString());
                            tFees = GeneralFunctions.fnDouble(drL["Fees"].ToString());
                            tFeesTax = GeneralFunctions.fnDouble(drL["FeesTax"].ToString());
                            dblTotalPrice = GeneralFunctions.fnDouble(drL["TotalPrice"].ToString());
                            lineprice = dblTotalPrice;

                            txapp1 = drL["Taxable1"].ToString();
                            txapp2 = drL["Taxable2"].ToString();
                            txapp3 = drL["Taxable3"].ToString();
                            tx1 = GeneralFunctions.fnDouble(drL["TaxRate1"].ToString());
                            tx2 = GeneralFunctions.fnDouble(drL["TaxRate2"].ToString());
                            tx3 = GeneralFunctions.fnDouble(drL["TaxRate3"].ToString());

                            tx1ty = GeneralFunctions.fnInt32(drL["TaxType1"].ToString());
                            tx2ty = GeneralFunctions.fnInt32(drL["TaxType2"].ToString());
                            tx3ty = GeneralFunctions.fnInt32(drL["TaxType3"].ToString());

                            if ((txapp1 == "Y") || (txapp2 == "Y") || (txapp3 == "Y"))
                            {
                                if (txapp1 == "Y")
                                {
                                    linetx = (tx1ty == 0) ? GeneralFunctions.FormatDouble(lineprice * tx1 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal1"].ToString()));
                                }

                                if (txapp2 == "Y")
                                {
                                    linetx = (tx2ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx2 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal2"].ToString()));
                                }

                                if (txapp3 == "Y")
                                {
                                    linetx = (tx3ty == 0) ? linetx + GeneralFunctions.FormatDouble(lineprice * tx3 / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drL["TaxTotal3"].ToString()));
                                }
                            }

                            ipid = GeneralFunctions.fnInt32(drL["ProductID"].ToString());
                            tgininv = drL["TaggedInInvoice"].ToString();
                            strDescription = drL["Description"].ToString();
                            strPType = drL["ProductType"].ToString();
                            strMV1 = drL["MOP1"].ToString();
                            strMV2 = drL["MOP2"].ToString();
                            strMV3 = drL["MOP3"].ToString();

                            strSKU = drL["SKU"].ToString();
                            dblPrice = GeneralFunctions.fnDouble(drL["Price"].ToString());
                            dblQty = GeneralFunctions.fnDouble(drL["Qty"].ToString());

                            dblNormalPrice = GeneralFunctions.fnDouble(drL["NormalPrice"].ToString());
                            dblUOMPrice = GeneralFunctions.fnDouble(drL["UOMPrice"].ToString());
                            strDiscText = drL["DiscountText"].ToString();
                            dblDisc = GeneralFunctions.fnDouble(drL["Discount"].ToString());
                            dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                            strDP = drL["DP"].ToString();

                            string sPD1 = "";
                            string sPD2 = "";
                            string sPD3 = "";
                            SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                            pval = FindTemplateParameterValueInDatatable("Customer Address");
                            if (pval != "")

                                dtblstrm1.Rows.Add(new object[] { sPD1, "", "", "Item", "Y", ptextval });

                            if (sPD2.Trim() != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { sPD2, "", "", "Item", "Y", ptextval });
                            }

                            if (sPD3.Trim() != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { sPD3, "", "", "Item", "Y", ptextval });
                            }

                            if (strPType == "M")
                            {
                                dtblstrm1.Rows.Add(new object[] { SP1 + strMV1, "", "", "Item", "Y", ptextval });

                                if (strMV2 != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strMV2, "", "", "Item", "Y", ptextval });
                                }
                                if (strMV3 != "")
                                {
                                    dtblstrm1.Rows.Add(new object[] { SP1 + strMV3, "", "", "Item", "Y", ptextval });
                                }
                            }

                            if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                            || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                            {
                                if (strPType != "U")
                                {
                                    if (dblNormalPrice - dblPrice > 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP) + " " + Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });
                                    }
                                }
                                if (strPType == "U")
                                {
                                    if (dblUOMPrice - dblPrice > 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP), "", "", "Item", "Y", ptextval });
                                    }
                                }

                                if (strPType == "T")
                                {
                                    if (tgininv == "Y")
                                    {
                                        PosDataObject.Product opdt = new PosDataObject.Product();
                                        opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                        DataTable dtemp = opdt.FetchTaggedData(ipid);
                                        foreach (DataRow tgdr in dtemp.Rows)
                                        {
                                            double tgQty = 0;
                                            string tgName = "";
                                            tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                            tgName = tgdr["ItemName"].ToString();
                                            tgQty = tgQty * dblQty;
                                            dtblstrm1.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "", "Item", "Y", ptextval });
                                        }
                                        dtemp.Dispose();
                                    }
                                }
                            }

                            if (strDiscText != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { SP2 + strDiscText, "", "", "Item", "Y", ptextval });
                            }
                            dtblstrm1.Rows.Add(new object[] { GetFotmatProductValue(dblPrice, strDP), GetFotmatDoubleValue(dblQty), GetFotmatDoubleValue(lineprice + linetx + tFees + tFeesTax + tDTax), "Detail", "Y", ptextval });

                        }

                        prndtblINV1.Dispose();

                        if (strLayawayStatus == "3")
                        {


                            // -------------- Sub Total ----------------

                            pval = FindTemplateParameterValueInDatatable("Subtotal Amount");
                            if (pval != "")
                                dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total + ": " + GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax), "", "", "", "Y", pval });

                            if (dblDiscount != 0) // -------------- Discount ----------------
                            {
                                pval = FindTemplateParameterValueInDatatable("Discount Amount");
                                dtblstrm1.Rows.Add(new object[] { SP1 + "Discount" + ": " + GetFotmatDoubleValue(dblDiscount), "", "", "", "Y", pval });
                            }
                            // -------------- Tax ----------------
                            if (dblTax != 0)
                            {
                                pval = FindTemplateParameterValueInDatatable("Tax Amount");
                                if (pval != "")
                                {
                                    if (dblTax1 != 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1 + " " + GetFotmatDoubleValue(dblTax1), "", "", "", "Y", pval });
                                    }
                                    if (dblTax2 != 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2 + " " + GetFotmatDoubleValue(dblTax2), "", "", "", "Y", pval });
                                    }
                                    if (dblTax3 != 0)
                                    {
                                        dtblstrm1.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3 + " " + GetFotmatDoubleValue(dblTax3), "", "", "", "Y", pval });
                                    }
                                }
                            }



                            // -------------- Total ----------------

                            pval = FindTemplateParameterValueInDatatable("Total Amount");
                            if (pval != "")
                                dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Total + " " + GetFotmatDoubleValue(dblTotalSale), "", "", "", "Y", pval });
                            dtblstrm1.Rows.Add(new object[] { "", "", "" });
                        }

                        // ---------------- Layaway Payment -------------

                        DataTable prndtblLAYPMT = new DataTable();
                        prndtblLAYPMT = FetchLayawayPayment();


                        foreach (DataRow drL1 in prndtblLAYPMT.Rows)
                        {
                            double dblLayPayment = 0;
                            string strLayPmtType = "";
                            string strLayPmtDate = "";

                            strLayPmtType = drL1["PaymentType"].ToString();
                            strLayPmtDate = drL1["PaymentDate"].ToString();
                            dblLayPayment = GeneralFunctions.fnDouble(drL1["PaymentAmt"].ToString());

                            pval = FindTemplateParameterValueInDatatable("Layaway Payment Details");
                            if (pval != "")
                                dtblstrm1.Rows.Add(new object[] { SP1 + strLayPmtType + " " + strLayPmtDate + " " + GetFotmatDoubleValue(dblLayPayment), "", "", "", "Y", pval });
                        }
                        prndtblLAYPMT.Dispose();


                        if ((intPrevLayNo != 0) && (intPrevLayNo != intLayNo))
                        {
                            // Layaway Balance Due, Due Date
                            distinctlayway++;
                            dblTotalLayawaySale = GetTotalLayawaySale(intPrevLayNo);
                            dblTotalLayawayPayment = GetTotalLayawayPayment(intPrevLayNo);
                            dblTotalLayawayBalance = dblTotalLayawaySale - dblTotalLayawayPayment;

                            pval = FindTemplateParameterValueInDatatable("Balance Due Amount");
                            if (pval != "")
                                dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Balance_Due + " " + GetFotmatDoubleValue(dblTotalLayawayBalance), "", "", "", "Y", pval });
                            pval = FindTemplateParameterValueInDatatable("Due Date");
                            if (pval != "")
                                dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Due + " " + strLayawayDueDate, "", "", "", "Y", pval });
                        }

                        intPrevLayNo = intLayNo;
                    }
                    prndtblINV.Dispose();

                    if ((invcount == 1) || (distinctlayway == 1))
                    {
                        dblTotalLayawaySale = GetTotalLayawaySale(intPrevLayNo);
                        dblTotalLayawayPayment = GetTotalLayawayPayment(intPrevLayNo);
                        dblTotalLayawayBalance = dblTotalLayawaySale - dblTotalLayawayPayment;
                        pval = FindTemplateParameterValueInDatatable("Balance Due Amount");
                        if (pval != "")
                            dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Balance_Due + " " + GetFotmatDoubleValue(dblTotalLayawayBalance), "", "", "", "Y", pval });
                        pval = FindTemplateParameterValueInDatatable("Due Date");
                        if (pval != "")
                            dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Layaway_Due + " " + strLayawayDueDate, "", "", "", "Y", pval });
                    }

                    // --------------- Tender --------------

                    bool boolHATender = false;

                    if (!blIsLayawayRefund)
                    {
                        pval = FindTemplateParameterValueInDatatable("Tender Amount");
                        if (pval != "")
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.Tender, "", "", "", "Y", pval });

                        DataTable prndtblINV2 = new DataTable();
                        intTrnNo = FetchMaxTranNo();
                        prndtblINV2 = FetchInvTender();
                        double dblTempTender = 0;
                        foreach (DataRow dr in prndtblINV2.Rows)
                        {
                            string strTender = "";
                            double dblAmount = 0;

                            strTender = dr["DisplayAs"].ToString();
                            dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                            dblTempTender = dblTempTender + dblAmount;
                            if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                            if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;

                            if (pval != "")
                                dtblstrm1.Rows.Add(new object[] { strTender + ": " + GetFotmatDoubleValue(dblAmount), "", "", "", "Y", pval });

                            if ((dr["Name"].ToString() == "Debit Card") || (dr["Name"].ToString() == "EBT Cash"))
                            {
                                double cashbk = 0;
                                cashbk = FetchCashBack(dblAmount);
                                if (cashbk != 0)
                                {
                                    dblTempTender = GeneralFunctions.FormatDouble(dblTempTender + cashbk);
                                    if (pval != "")
                                        dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.Cash_Back + ": " + GetFotmatDoubleValue(cashbk), "", "", "", "Y", pval });

                                    if (pval != "")
                                        dtblstrm1.Rows.Add(new object[] { SP1 + strTender + " " + Properties.Resources.Total + ": " + GetFotmatDoubleValue(dblAmount + cashbk), "", "", "", "Y", pval });
                                }
                            }

                            if (dr["Name"].ToString() == "House Account") boolHATender = true;

                        }
                        prndtblINV2.Dispose();





                    }


                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intInvNo, GeneralFunctions.fnInt32(strCID));

                        pval = FindTemplateParameterValueInDatatable("House Account Balance");
                        if (pval != "")
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.House_Account_Balance + ": " + GetFotmatDoubleValue(dval), "", "", "", "Y", pval });


                    }




                    //string strSign = new string('_', Settings.NoOfPrintSign);
                    //dtblstrm1.Rows.Add(new object[] { SP1 + Properties.Resources.sign_, "", strSign });


                    // --------------- Sign --------------
                    if (blCardPayment)
                    {
                        pval = FindTemplateParameterValueInDatatable("Card Payment Reference");

                        if (pval != "")
                        {
                            DataTable ccdtbl11 = new DataTable();
                            PosDataObject.POS obcc11 = new PosDataObject.POS();
                            obcc11.Connection = SystemVariables.Conn;
                            ccdtbl11 = obcc11.FetchCardData(intLayTran);


                            foreach (DataRow drcc in ccdtbl11.Rows)
                            {
                                if ((drcc["CardType"].ToString() == "Credit") || (drcc["CardType"].ToString() == "Credit Card")) strCardType = "Credit";
                                if ((drcc["CardType"].ToString() == "Debit") || (drcc["CardType"].ToString() == "Debit Card")) strCardType = "Debit";
                                if (drcc["CardType"].ToString() == "Mercury Gift Card") strCardType = "Mercury";
                                if (drcc["CardType"].ToString() == "Precidia Gift Card") strCardType = "Precidia";
                                if (drcc["CardType"].ToString() == "Datacap Gift Card") strCardType = "Datacap";
                                if (drcc["CardType"].ToString() == "POSLink Gift Card") strCardType = "POSLink";
                                if (drcc["CardType"].ToString() == "EBT") strCardType = "EBT";

                                strMercuryMerchantID = drcc["RefCardMerchID"].ToString();
                                strCardNum = drcc["RefCardAct"].ToString();
                                strCardNum = GeneralFunctions.GetLast(strCardNum, 4);
                                strCardLogo = drcc["RefCardLogo"].ToString();
                                strCardEntry = drcc["RefCardEntry"].ToString();
                                strApprovalNum = drcc["RefCardAuthID"].ToString();
                                strTranID = drcc["RefCardTranID"].ToString();
                                strApprovedAmt = drcc["RefCardAuthAmount"].ToString();

                                if (Settings.POSCardPayment == "Y")
                                {

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.REF + "#  :" + intInvNo.ToString(), "", "", "", "Y", pval });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACT + "#  :" + strCardNum, "", "", "", "Y", pval });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.CARD + " : " + strCardLogo, "", "", "", "Y", pval });


                                }

                                if (strCardType == "Credit")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.CREDIT_PURCHASE + " : " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : " + strApprovalNum, "", "", "", "Y", pval });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : " + strTranID, "", "", "", "Y", pval });

                                }
                                if (strCardType == "Debit")
                                {

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.DEBIT_PURCHASE + " : " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : " + strApprovalNum, "", "", "", "Y", pval });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : " + strTranID, "", "", "", "Y", pval });


                                }

                                if (strCardType == "Mercury")
                                {

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCURY_PURCHASE + " : " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : " + strApprovalNum, "", "", "", "Y", pval });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : " + strTranID, "", "", "", "Y", pval });

                                }

                                if (strCardType == "Precidia")
                                {

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.PRECIDIA_PURCHASE + " : " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : " + strApprovalNum, "", "", "", "Y", pval });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : " + strTranID, "", "", "", "Y", pval });

                                }

                                if (strCardType == "EBT")
                                {

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.EBT_PURCHASE + " : " + GetFotmatDoubleValue(GeneralFunctions.fnDouble(strApprovedAmt)), "", "", "", "Y", pval });

                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.APPROVAL_CODE + " : " + strApprovalNum, "", "", "", "Y", pval });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.TRAN_ID + " : " + strTranID, "", "", "", "Y", pval });
                                }


                                if (strCardType == "Credit")
                                {
                                    if ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 1) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 4)
                                        || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 2) || (GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 7) ||
                                        ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 3) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.PrecidiaSignAmount))
                                         || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (GeneralFunctions.fnDouble(strApprovedAmt) >= Settings.DatacapSignAmount))
                                        || ((GeneralFunctions.fnInt32(drcc["PaymentGateway"].ToString()) == 5) && (blDatacapManualTendering)))

                                    {
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT, "", "", "", "Y", pval });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.ACCORDING_TO_CARD_ISSUER_AGREEMENT, "", "", "", "Y", pval });


                                        dtblstrm1.Rows.Add(new object[] { "sig", "sig", "sig" });
                                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.S_I_G_N_A_T_U_R_E + " ", "", "", "", "Y", pval });
                                    }
                                }

                                if (strCardType == "Debit")
                                {
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.PIN_USED, "", "", "", "Y", pval });
                                    dtblstrm1.Rows.Add(new object[] { Properties.Resources.SIGNATURE_NOT_REQUIRED, "", "", "", "Y", pval });
                                }
                            }
                        }
                    }
                    // --------------- Sign --------------



                    // --------------- Receipt Footer --------------


                    if (blCardPayment)
                    {
                        pval = FindTemplateParameterValueInDatatable("Merchant Copy");
                        if (pval != "")
                            dtblstrm1.Rows.Add(new object[] { Properties.Resources.MERCHANT_COPY, "", "", "", "Y", pval });
                    }

                    pval = FindTemplateParameterValueInDatatable("Receipt Date");
                    if (pval != "")
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Date_ + " " + strTransDate, "", "", "", "Y", pval });

                    pval = FindTemplateParameterValueInDatatable("User Name");
                    if (pval != "")
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString() + " " + Properties.Resources.Clerk_ + strEmpID, "", "", "", "Y", pval });
                    pval = FindTemplateParameterValueInDatatable("Till Name");
                    if (pval != "")
                        dtblstrm1.Rows.Add(new object[] { Properties.Resources.Terminal + ": " + stermnl, "", "", "", "Y", pval });


                    // ------------ Setting Receipt Footer -------------

                    pval = FindTemplateParameterValueInDatatable("Layaway Policy");
                    if (pval != "")
                        if ((Settings.ReceiptLayawayPolicy.Trim() != "") && (Settings.ReceiptLayawayPolicy.Trim() != null))
                        {
                            string OrginalF = "";
                            ArrangeText(Settings.ReceiptLayawayPolicy, 30, ref OrginalF);
                            char FindF = '\n';
                            int NumberOfOccurancesF = 0;


                            string CopyOrginalF = string.Copy(OrginalF);
                            int PlaceF = 0;
                            NumberOfOccurancesF = 0;
                            PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                            while (PlaceF != -1)
                            {
                                string cutstr = CopyOrginalF.Substring(0, PlaceF);

                                if (cutstr.Length > 30)
                                {
                                    int len = cutstr.Length;
                                    while (len >= 30)
                                    {
                                        NumberOfOccurancesF++;
                                        len = len - 30;
                                        if (cutstr != "")
                                        {
                                            //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                            cutstr = cutstr.Substring(30, len);
                                        }
                                    }
                                    if (len != 0)
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                                    }
                                }
                                else
                                {
                                    //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                                }

                                CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                                PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                                NumberOfOccurancesF++;
                            }

                            if (CopyOrginalF.Length > 30)
                            {
                                int len = CopyOrginalF.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesF++;
                                    len = len - 30;
                                    if (CopyOrginalF != "")
                                    {
                                        //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                        CopyOrginalF = CopyOrginalF.Substring(30, len);
                                    }
                                }
                                if (len != 0)
                                {
                                    //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                                }
                            }
                            else
                            {
                                //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                            }

                            if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                            else
                            {
                                if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                            }

                            dtblstrm1.Rows.Add(new object[] { Settings.ReceiptLayawayPolicy.Trim(), "", "", NumberOfOccurancesF.ToString() });

                        }



                    foreach (DataRow dr in NewTemplateLinkData.Rows)
                    {
                        if (dr["GroupName"].ToString() == "Separator")
                        {

                            dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                        }
                        else if (dr["GroupName"].ToString() == "Logo")
                        {
                            pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Image")
                        {
                            pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                        }
                        else if (dr["GroupName"].ToString() == "Text")
                        {
                            pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                            if (pval != "")
                            {
                                dtblstrm1.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                            }
                        }
                        else if (dr["GroupName"].ToString() == "Barcode")
                        {
                            pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                            dtblstrm1.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                        }

                    }
                }
            }
        }

        // For Additional copy for House Account Payment

        private void GetPrintStream2()
        {
            if (strPrintType == "Invoice")
            {

                string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                string SP2 = "";
                string SP3 = new string(' ', Settings.NoOfPrintSpace1);

                if (Settings.DemoVersion == "Y")
                {
                    dtblstrm2.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                    dtblstrm2.Rows.Add(new object[] { "", "", "" });
                }

                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm2.Rows.Add(new object[] { "", "", "", "logo" });

                }
                // -----------------  Receipt Header ---------------

                if (Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = ""; // Settings.TotalReceiptHeader;
                    ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;

                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;

                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (cutstr != "")
                                {
                                    dtblstrm2.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm2.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (cutstr != "") dtblstrm2.Rows.Add(new object[] { cutstr, "", "" });
                        }

                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }

                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len = len - 26;
                            if (CopyOrginalH != "")
                            {
                                dtblstrm2.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrm2.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else
                    {
                        if (CopyOrginalH != "") dtblstrm2.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }


                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                    else
                    {
                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                    }

                }

                DataTable prndtblINV = new DataTable();

                int intTranNo = 0;
                int intStoreID = 0; string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";

                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblTotalSale = 0;
                double dblCoupon = 0;
                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";

                double dblFees = 0;
                double dblFeesTax = 0;
                double dblFeesCoupon = 0;
                double dblFeesCouponTax = 0;


                string strDTaxName = "";
                double dblDTax = 0;
                string strCustAddress = "";
                prndtblINV = FetchInvHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();

                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                    dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                    dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                    dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                    dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                    strDTaxName = dr["DTaxName"].ToString();
                    dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());
                }
                prndtblINV.Dispose();

                intWO = FetchWorkorderNo();
                if (intWO > 0) // work order payment
                {
                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Work_Order_Number, "", intWO.ToString() });
                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Date, "", GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt") });
                }

                dtblstrm2.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                dtblstrm2.Rows.Add(new object[] { Properties.Resources.Receipt_Number, "", intInvNo.ToString() });


                dtblstrm2.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                if (strCustCompany != "")
                {
                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany });
                }

                if (strCustName != "")
                {
                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                }

                if (strCustID != "")
                {
                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                }

                if (strCustAddress != "")
                {
                    string OrginalH = "";// Settings.TotalReceiptHeader;

                    ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;

                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;

                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (cutstr != "")
                                {
                                    dtblstrm2.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm2.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (cutstr != "") dtblstrm2.Rows.Add(new object[] { cutstr, "", "", "" });
                        }

                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }

                    if (CopyOrginalH.Length > 40)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesH++;
                            len = len - 40;
                            if (CopyOrginalH != "")
                            {
                                dtblstrm2.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrm2.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else
                    {
                        if (CopyOrginalH != "") dtblstrm2.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }


                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                    else
                    {
                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                    }

                }

                if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                {
                    dtblstrm2.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                }

                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = FetchInvDetails(dblTotalSale);
                double dblTempTotal = 0;
                int i = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    i++;
                    string strDescription = "";
                    string strDiscText = "";
                    double dblDisc = 0;
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string tgininv = "";
                    int ipid = 0;

                    string strFeesID = "0";
                    string strFeesText = "";
                    int SalePriceID = 0;

                    int BuyNGetFreeHeader = 0;
                    string BuyNGetFreeCategory = "";
                    string BuyNGetFreeCaption = "";


                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();
                    ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                    tgininv = dr["TaggedInInvoice"].ToString();
                    strSKU = dr["SKU"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    strDiscText = dr["DiscountText"].ToString();
                    dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());

                    if (strPType == "O") dblTotalPrice = -dblTotalPrice;

                    dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();

                    strFeesID = dr["FeesID"].ToString();
                    strFeesText = dr["FeesText"].ToString();
                    SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());

                    BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                    BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                    BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();


                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                    if (BuyNGetFreeCategory == "B")
                    {
                        dtblstrm2.Rows.Add(new object[] { "", "** " + BuyNGetFreeCaption + " **", "" });
                    }

                    dtblstrm2.Rows.Add(new object[] { sPD1, "", "" });

                    if (sPD2.Trim() != "")
                    {
                        dtblstrm2.Rows.Add(new object[] { sPD2, "", "" });
                    }

                    if (sPD3.Trim() != "")
                    {

                        dtblstrm2.Rows.Add(new object[] { sPD3, "", "" });
                    }


                    if (strPType == "M")
                    {
                        dtblstrm2.Rows.Add(new object[] { SP1 + strMV1, "", "" });

                        if (strMV2 != "")
                        {
                            dtblstrm2.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                        }
                        if (strMV3 != "")
                        {
                            dtblstrm2.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                        }
                    }
                    if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                        || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                    {
                        if (SalePriceID == 0)
                        {
                            if (strPType != "U")
                            {
                                if (dblNormalPrice - dblPrice > 0)
                                {
                                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                }
                            }
                            if (strPType == "U")
                            {
                                if (dblUOMPrice - dblPrice > 0)
                                {
                                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                }
                            }
                        }


                        if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                        {
                            if (strPType != "U")
                            {
                                if (dblNormalPrice - dblPrice > 0)
                                {
                                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                }
                            }
                            if (strPType == "U")
                            {
                                if (dblUOMPrice - dblPrice > 0)
                                {
                                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + GetFotmatProductValue(dblUOMPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                }
                            }
                        }

                        if (strPType == "T")
                        {
                            if (tgininv == "Y")
                            {
                                PosDataObject.Product opdt = new PosDataObject.Product();
                                opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                DataTable dtemp = opdt.FetchTaggedData(ipid);
                                foreach (DataRow tgdr in dtemp.Rows)
                                {
                                    double tgQty = 0;
                                    string tgName = "";
                                    tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                    tgName = tgdr["ItemName"].ToString();
                                    tgQty = tgQty * dblQty;

                                    dtblstrm2.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "" });
                                }
                                dtemp.Dispose();
                            }
                        }
                    }

                    if (strDiscText != "")
                    {
                        dtblstrm2.Rows.Add(new object[] { SP2 + strDiscText, "", "" });
                    }

                    if (Settings.ShowFeesInReceipt == "Y")
                    {
                        if (strFeesText != "")
                        {
                            dtblstrm2.Rows.Add(new object[] { SP2 + strFeesText, "", "", "" });
                        }
                    }

                    dtblstrm2.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice) });


                    if (strInvNotes != "")
                    {
                        string OrginalN = "";
                        ArrangeText(strInvNotes, 30, ref OrginalN);
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;
                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;

                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            string cutstr = CopyOrginalN.Substring(0, PlaceN);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                            }

                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }

                        if (CopyOrginalN.Length > 30)
                        {
                            int len = CopyOrginalN.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesN++;
                                len = len - 30;
                                if (CopyOrginalN != "")
                                {
                                    CopyOrginalN = CopyOrginalN.Substring(30, len);
                                }
                            }
                        }

                        if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                        else
                        {
                            if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                        }

                        dtblstrm2.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                    }


                }
                prndtblINV1.Dispose();




                // -------------- Sub Total ----------------

                dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx" });

                dtblstrm2.Rows.Add(new object[] { SP1 + Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax) });


                if (dblDiscount != 0) // -------------- Discount ----------------
                {
                    dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx" });
                    string strDiscountCaption = Properties.Resources.Discount;
                    dtblstrm2.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount) });
                }

                // -------------- Tax ----------------
                if (dblTax != 0)
                {
                    dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx" });
                    if (dblTax1 != 0) dtblstrm2.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1) });
                    if (dblTax2 != 0) dtblstrm2.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2) });
                    if (dblTax3 != 0) dtblstrm2.Rows.Add(new object[] { SP2 + Properties.Resources.Tax + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3) });
                }


                if (dblDTax != 0)
                {
                    dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    dtblstrm2.Rows.Add(new object[] { SP2 + Properties.Resources.Dest__Tax + ": " + strDTaxName, "", GetFotmatDoubleValue(dblDTax), "" });
                }


                if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                {
                    DataTable dFees = FetchInvFees();
                    dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                    if (dblFees + dblFeesCoupon != 0)
                    {
                        if (dFees.Rows.Count == 1) dtblstrm2.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString(), "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        if (dFees.Rows.Count > 1) dtblstrm2.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                    }
                    if (dblFeesTax + dblFeesCouponTax != 0)
                    {
                        if (dFees.Rows.Count == 1) dtblstrm2.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString() + " " + Properties.Resources.Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        if (dFees.Rows.Count > 1) dtblstrm2.Rows.Add(new object[] { SP2 + Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                    }
                }

                if (dblCoupon != 0)
                {
                    dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx" });
                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket, "", GetFotmatDoubleValue(dblCoupon), "" });
                }

                DataTable dtblCpn = new DataTable();
                dtblCpn = FetchInvCoupon();
                if (dtblCpn.Rows.Count > 0)
                {
                    //dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx" });
                    //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });

                    foreach (DataRow dr in dtblCpn.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["Name"].ToString();

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);

                        dtblstrm.Rows.Add(new object[] { SP1 + sPD1, "", "", "" });

                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + sPD2, "", "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {

                            dtblstrm.Rows.Add(new object[] { SP1 + sPD3, "", "", "" });
                        }


                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dtblstrm2.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblAmount), "" });
                    }
                }

                dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx" });

                // -------------- Total ----------------

                dtblstrm2.Rows.Add(new object[] { SP1 + Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale), "B" });

                dtblstrm2.Rows.Add(new object[] { "", "", "", "" });
                // --------------- Tender --------------


                DataTable prndtblINV2 = new DataTable();
                prndtblINV2 = FetchInvTender();
                double dblTempTender = 0;
                foreach (DataRow dr in prndtblINV2.Rows)
                {
                    if (dr["Name"].ToString() == "House Account")
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;

                        dtblstrm2.Rows.Add(new object[] { SP1 + Properties.Resources.Paid_By + " " + strTender, "", GetFotmatDoubleValue(dblAmount) });


                    }
                }
                prndtblINV2.Dispose();




                dtblstrm2.Rows.Add(new object[] { "", "", "" });
                dtblstrm2.Rows.Add(new object[] { "", "", "" });
                dtblstrm2.Rows.Add(new object[] { "sig", "sig", "sig" });
                dtblstrm2.Rows.Add(new object[] { "", " " + Properties.Resources.S_I_G_N_A_T_U_R_E  + " ", "" });

                // --------------- Sign --------------

                // --------------- Receipt Footer --------------
                dtblstrm2.Rows.Add(new object[] { "", "", "" });
                dtblstrm2.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                dtblstrm2.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                dtblstrm2.Rows.Add(new object[] { "", "", "" });

                // ------------ Setting Receipt Footer -------------

                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                {
                    string OrginalF = "";
                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;


                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (cutstr != "")
                                {
                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                        }

                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }

                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len = len - 30;
                            if (CopyOrginalF != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                        }
                    }
                    else
                    {
                        //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                    }



                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                    else
                    {
                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                    }
                    dtblstrm2.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
            }

            if (strPrintType == "Reprint Receipt")
            {
                string SP1 = new string(' ', Settings.NoOfPrintSpace2);
                string SP2 = ""; //new string(' ', Settings.NoOfPrintSpace3);

                if (Settings.DemoVersion == "Y")
                {
                    dtblstrm2.Rows.Add(new object[] { "", Properties.Resources.____DEMO_VERSION____, "" });
                    dtblstrm2.Rows.Add(new object[] { "", "", "" });
                }

                if (!blIsVoid)
                    dtblstrm2.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Receipt + ": " + intReprintCnt.ToString() + " *", "" });
                else
                    dtblstrm2.Rows.Add(new object[] { "", "* " + Properties.Resources.Reprinted_Void_Receipt + " " + intReprintCnt.ToString() + " *", "" });

                dtblstrm2.Rows.Add(new object[] { "", "", "" });

                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrm2.Rows.Add(new object[] { "", "", "", "logo" });

                }

                // -----------------  Receipt Header ---------------

                if (Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = ""; // Settings.TotalReceiptHeader;
                    ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;

                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;

                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (cutstr != "")
                                {
                                    dtblstrm2.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm2.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            if (cutstr != "") dtblstrm2.Rows.Add(new object[] { cutstr, "", "" });
                        }

                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }

                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len = len - 26;
                            if (CopyOrginalH != "")
                            {
                                dtblstrm2.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrm2.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "" });
                        }
                    }
                    else
                    {
                        if (CopyOrginalH != "") dtblstrm2.Rows.Add(new object[] { CopyOrginalH, "", "" });
                    }


                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                    else
                    {
                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                    }

                }

                DataTable prndtblINV = new DataTable();

                int intTranNo = 0;
                int intStoreID = 0; string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCustID = "";
                string strCID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";

                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblTotalSale = 0;
                double dblCoupon = 0;
                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";

                double dblFees = 0;
                double dblFeesTax = 0;
                double dblFeesCoupon = 0;
                double dblFeesCouponTax = 0;

                string strDTaxName = "";
                double dblDTax = 0;
                string strCustAddress = "";
                prndtblINV = FetchInvHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();

                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());

                    dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                    dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                    dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                    dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                    strDTaxName = dr["DTaxName"].ToString();
                    dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                }
                prndtblINV.Dispose();

                intWO = FetchWorkorderNo();
                if (intWO > 0) // work order payment
                {
                    dtblstrm2.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                    dtblstrm2.Rows.Add(new object[] {  Properties.Resources.Work_Order_Number, "", intWO.ToString() });
                    dtblstrm2.Rows.Add(new object[] {  Properties.Resources.Date, "", GeneralFunctions.fnDate(FetchWorkorderDate()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt") });
                }

                dtblstrm2.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                dtblstrm2.Rows.Add(new object[] {  Properties.Resources.Receipt_Number, "", intInvNo.ToString() });

                dtblstrm2.Rows.Add(new object[] { "xxx", "xxx", "xxx" });

                if (strCustCompany != "")
                {
                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Company, "", strCustCompany });
                }

                if (strCustName != "")
                {
                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Customer, "", strCustName });
                }

                if (strCustID != "")
                {
                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Customer_ID, "", strCustID });
                }

                if (strCustAddress != "")
                {
                    string OrginalH = "";// Settings.TotalReceiptHeader;

                    ArrangeText("Address: " + strCustAddress, 40, ref OrginalH);

                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;

                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;

                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                        if (cutstr.Length > 40)
                        {
                            int len = cutstr.Length;
                            while (len >= 40)
                            {
                                NumberOfOccurancesH++;
                                len = len - 40;
                                if (cutstr != "")
                                {
                                    dtblstrm2.Rows.Add(new object[] { cutstr.Substring(0, 40), "", "", "" });
                                    cutstr = cutstr.Substring(40, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrm2.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (cutstr != "") dtblstrm2.Rows.Add(new object[] { cutstr, "", "", "" });
                        }

                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }

                    if (CopyOrginalH.Length > 40)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 40)
                        {
                            NumberOfOccurancesH++;
                            len = len - 40;
                            if (CopyOrginalH != "")
                            {
                                dtblstrm2.Rows.Add(new object[] { CopyOrginalH.Substring(0, 40), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(40, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrm2.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else
                    {
                        if (CopyOrginalH != "") dtblstrm2.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }


                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                    else
                    {
                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                    }

                }

                if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                {
                    dtblstrm2.Rows.Add(new object[] { "xxx", "xxx", "xxx" });
                }


                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = FetchInvDetails(dblTotalSale);
                double dblTempTotal = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    string strDescription = "";
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string tgininv = "";
                    string strDiscText = "";
                    double dblDisc = 0;
                    int ipid = 0;
                    string strFeesID = "0";
                    string strFeesText = "";
                    int SalePriceID = 0;

                    int BuyNGetFreeHeader = 0;
                    string BuyNGetFreeCategory = "";
                    string BuyNGetFreeCaption = "";

                    BuyNGetFreeHeader = GeneralFunctions.fnInt32(dr["BuyNGetFreeHeaderID"].ToString());
                    BuyNGetFreeCategory = dr["BuyNGetFreeCategory"].ToString();
                    BuyNGetFreeCaption = dr["BuyNGetFreeName"].ToString();


                    ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                    tgininv = dr["TaggedInInvoice"].ToString();
                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();

                    strSKU = dr["SKU"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    strFeesID = dr["FeesID"].ToString();
                    strFeesText = dr["FeesText"].ToString();
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();
                    strDiscText = dr["DiscountText"].ToString();
                    dblDisc = GeneralFunctions.fnDouble(dr["Discount"].ToString());

                    SalePriceID = GeneralFunctions.fnInt32(dr["SalePriceID"].ToString());

                    if (strPType == "O") dblTotalPrice = -dblTotalPrice;

                    dblTempTotal = GeneralFunctions.FormatDouble(dblTempTotal + dblTotalPrice + (Settings.TaxInclusive == "N" ? dblDisc : 0));
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                    if (BuyNGetFreeCategory == "B")
                    {
                        dtblstrm2.Rows.Add(new object[] { "", "** " + BuyNGetFreeCaption + " **", "" });
                    }

                    dtblstrm2.Rows.Add(new object[] { sPD1, "", "" });

                    if (sPD2.Trim() != "")
                    {
                        dtblstrm2.Rows.Add(new object[] { sPD2, "", "" });
                    }

                    if (sPD3.Trim() != "")
                    {
                        dtblstrm2.Rows.Add(new object[] { sPD3, "", "" });
                    }


                    if (strPType == "M")
                    {
                        dtblstrm2.Rows.Add(new object[] { SP1 + strMV1, "", "" });
                        if (strMV2 != "")
                        {
                            dtblstrm2.Rows.Add(new object[] { SP1 + strMV2, "", "" });
                        }
                        if (strMV3 != "")
                        {
                            dtblstrm2.Rows.Add(new object[] { SP1 + strMV3, "", "" });
                        }
                    }

                    if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                        || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                    {
                        if (SalePriceID == 0)
                        {
                            if (strPType != "U")
                            {
                                if (dblNormalPrice - dblPrice > 0)
                                {
                                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                }
                            }
                            if (strPType == "U")
                            {
                                if (dblUOMPrice - dblPrice > 0)
                                {
                                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "",  Properties.Resources.Disc_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                }
                            }
                        }

                        if ((SalePriceID > 0) && (Settings.ShowSaleSaveInReceipt == "Y"))
                        {
                            if (strPType != "U")
                            {
                                if (dblNormalPrice - dblPrice > 0)
                                {
                                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblNormalPrice, strDP), "", Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblNormalPrice - dblPrice, strDP) });
                                }
                            }
                            if (strPType == "U")
                            {
                                if (dblUOMPrice - dblPrice > 0)
                                {
                                    dtblstrm2.Rows.Add(new object[] { Properties.Resources.Normal_Pr_ + "  " + GetFotmatProductValue(dblUOMPrice, strDP), "",
                                         Properties.Resources.You_Save_ + " " + GetFotmatProductValue(dblUOMPrice - dblPrice, strDP) });
                                }
                            }
                        }

                        if (strPType == "T")
                        {
                            if (tgininv == "Y")
                            {
                                PosDataObject.Product opdt = new PosDataObject.Product();
                                opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                DataTable dtemp = opdt.FetchTaggedData(ipid);
                                foreach (DataRow tgdr in dtemp.Rows)
                                {
                                    double tgQty = 0;
                                    string tgName = "";
                                    tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                    tgName = tgdr["ItemName"].ToString();
                                    tgQty = tgQty * dblQty;

                                    dtblstrm2.Rows.Add(new object[] { tgName + " - " + GetFotmatDoubleValue(tgQty), "", "" });
                                }
                                dtemp.Dispose();
                            }
                        }
                    }
                    if (strDiscText != "")
                    {
                        dtblstrm2.Rows.Add(new object[] { SP2 + strDiscText, "", "" });
                    }

                    strFeesID = dr["FeesID"].ToString();
                    strFeesText = dr["FeesText"].ToString();

                    dtblstrm2.Rows.Add(new object[] { SP1 + GetFotmatProductValue(dblPrice, strDP), GetFotmatProductValue(dblQty, strPType == "W" ? "3" : strDP), GetFotmatDoubleValue(dblTotalPrice) });

                    if (strInvNotes != "")
                    {
                        string OrginalN = "";
                        ArrangeText(strInvNotes, 30, ref OrginalN);
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;
                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;

                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            string cutstr = CopyOrginalN.Substring(0, PlaceN);

                            if (cutstr.Length > 30)
                            {
                                int len = cutstr.Length;
                                while (len >= 30)
                                {
                                    NumberOfOccurancesN++;
                                    len = len - 30;
                                    if (cutstr != "")
                                    {
                                        cutstr = cutstr.Substring(30, len);
                                    }
                                }
                            }

                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }

                        if (CopyOrginalN.Length > 30)
                        {
                            int len = CopyOrginalN.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesN++;
                                len = len - 30;
                                if (CopyOrginalN != "")
                                {
                                    CopyOrginalN = CopyOrginalN.Substring(30, len);
                                }
                            }
                        }

                        if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                        else
                        {
                            if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                        }

                        dtblstrm2.Rows.Add(new object[] { strInvNotes, "", "", NumberOfOccurancesN.ToString() });
                    }
                }

                prndtblINV1.Dispose();



                // -------------- Sub Total ----------------

                dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx" });

                dtblstrm2.Rows.Add(new object[] {  Properties.Resources.Sub_Total, "", GetFotmatDoubleValue(Settings.TaxInclusive == "N" ? dblTempTotal : dblTempTotal - dblTax) });

                if (dblDiscount != 0) // -------------- Discount ----------------
                {
                    dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx" });
                    string strDiscountCaption = Properties.Resources.Discount;
                    dtblstrm2.Rows.Add(new object[] { SP1 + strDiscountCaption, "", GetFotmatDoubleValue(dblDiscount) });
                }

                // -------------- Tax ----------------
                if (dblTax != 0)
                {
                    dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                    if (dblTax1 != 0) dtblstrm2.Rows.Add(new object[] { Properties.Resources.Tax + ":" + strTaxName1, "", GetFotmatDoubleValue(dblTax1) });
                    if (dblTax2 != 0) dtblstrm2.Rows.Add(new object[] { Properties.Resources.Tax + ":" + strTaxName2, "", GetFotmatDoubleValue(dblTax2) });
                    if (dblTax3 != 0) dtblstrm2.Rows.Add(new object[] { Properties.Resources.Tax + ":" + strTaxName3, "", GetFotmatDoubleValue(dblTax3) });
                }

                if (dblDTax != 0)
                {
                    dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "" });
                    dtblstrm.Rows.Add(new object[] { SP2 +  Properties.Resources.Dest__Tax + ": " + strDTaxName, "", GetFotmatDoubleValue(dblDTax), "" });
                }

                if (((dblFees != 0) || (dblFeesTax != 0) || (dblFeesCoupon != 0) || (dblFeesCouponTax != 0)) && (Settings.ShowFeesInReceipt == "Y"))
                {
                    DataTable dFees = FetchInvFees();
                    dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx", "" });

                    if (dblFees + dblFeesCoupon != 0)
                    {
                        if (dFees.Rows.Count == 1) dtblstrm2.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString(), "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                        if (dFees.Rows.Count > 1) dtblstrm2.Rows.Add(new object[] { SP2 +  Properties.Resources.Fees___Charges, "", GetFotmatDoubleValue(dblFees + dblFeesCoupon), "" });
                    }
                    if (dblFeesTax + dblFeesCouponTax != 0)
                    {
                        if (dFees.Rows.Count == 1) dtblstrm2.Rows.Add(new object[] { SP2 + dFees.Rows[0]["FeesName"].ToString() + " " +
                             Properties.Resources.Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                        if (dFees.Rows.Count > 1) dtblstrm2.Rows.Add(new object[] { SP2 +  Properties.Resources.Fees___Charges_Tax, "", GetFotmatDoubleValue(dblFeesTax + dblFeesCouponTax), "" });
                    }
                }



                if (dblCoupon != 0)
                {
                    dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx" });
                    dtblstrm2.Rows.Add(new object[] {  Properties.Resources.Discount_on_Ticket, "", GetFotmatDoubleValue(dblCoupon), "" });
                }

                DataTable dtblCpn = new DataTable();
                dtblCpn = FetchInvCoupon();
                if (dtblCpn.Rows.Count > 0)
                {
                    //dtblstrm1.Rows.Add(new object[] { "xx", "xx", "xx" });
                    //dtblstrm1.Rows.Add(new object[] { Properties.Resources.Discount_on_Ticket , "", GetFotmatDoubleValue(dblCoupon), "" });

                    foreach (DataRow dr in dtblCpn.Rows)
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["Name"].ToString();

                        string sPD1 = "";
                        string sPD2 = "";
                        string sPD3 = "";

                        SetMultilineDesc(strTender, ref sPD1, ref sPD2, ref sPD3);

                        dtblstrm.Rows.Add(new object[] { SP1 + sPD1, "", "", "" });

                        if (sPD2.Trim() != "")
                        {
                            dtblstrm.Rows.Add(new object[] { SP1 + sPD2, "", "", "" });
                        }

                        if (sPD3.Trim() != "")
                        {

                            dtblstrm.Rows.Add(new object[] { SP1 + sPD3, "", "", "" });
                        }


                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dtblstrm2.Rows.Add(new object[] { "", "", GetFotmatDoubleValue(dblAmount), "" });
                    }
                }

                dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx" });

                // -------------- Total ----------------

                dtblstrm2.Rows.Add(new object[] {  Properties.Resources.Total, "", GetFotmatDoubleValue(dblTotalSale), "B" });
                dtblstrm2.Rows.Add(new object[] { "", "", "" });

                // --------------- Tender --------------


                DataTable prndtblINV2 = new DataTable();
                prndtblINV2 = FetchInvTender();
                double dblTempTender = 0;
                foreach (DataRow dr in prndtblINV2.Rows)
                {
                    if (dr["Name"].ToString() == "House Account")
                    {
                        string strTender = "";
                        double dblAmount = 0;

                        strTender = dr["DisplayAs"].ToString();
                        dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                        dblTempTender = dblTempTender + dblAmount;
                        dtblstrm2.Rows.Add(new object[] { SP1 +   Properties.Resources.Paid_By + " " + strTender, "", GetFotmatDoubleValue(dblAmount) });
                    }
                }
                prndtblINV2.Dispose();


                dtblstrm2.Rows.Add(new object[] { "", "", "" });
                dtblstrm2.Rows.Add(new object[] { "", "", "" });

                // --------------- Sign --------------

                dtblstrm2.Rows.Add(new object[] { "xx", "xx", "xx" });
                dtblstrm2.Rows.Add(new object[] { "", "", "  " + Properties.Resources.S_I_G_N_A_T_U_R_E  + "     " });

                // --------------- Sign --------------
                dtblstrm2.Rows.Add(new object[] { "", "", "" });
                dtblstrm2.Rows.Add(new object[] { Properties.Resources.Date_, "", strTransDate });
                dtblstrm2.Rows.Add(new object[] { Properties.Resources.store_ + intStoreID.ToString(), "", Properties.Resources.Clerk_ + strEmpID });
                dtblstrm2.Rows.Add(new object[] { "", "", "" });

                // ------------ Setting Receipt Footer -------------

                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                {
                    string OrginalF = "";
                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;


                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        string cutstr = CopyOrginalF.Substring(0, PlaceF);

                        if (cutstr.Length > 30)
                        {
                            int len = cutstr.Length;
                            while (len >= 30)
                            {
                                NumberOfOccurancesF++;
                                len = len - 30;
                                if (cutstr != "")
                                {
                                    //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "" });
                                    cutstr = cutstr.Substring(30, len);
                                }
                            }
                            if (len != 0)
                            {
                                //dtblstrm1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "" });
                            }
                        }
                        else
                        {
                            //if (cutstr != "") dtblstrm1.Rows.Add(new object[] { cutstr, "", "" });
                        }

                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }

                    if (CopyOrginalF.Length > 30)
                    {
                        int len = CopyOrginalF.Length;
                        while (len >= 30)
                        {
                            NumberOfOccurancesF++;
                            len = len - 30;
                            if (CopyOrginalF != "")
                            {
                                //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, 26), "", "" });
                                CopyOrginalF = CopyOrginalF.Substring(30, len);
                            }
                        }
                        if (len != 0)
                        {
                            //dtblstrm1.Rows.Add(new object[] { CopyOrginalF.Substring(0, len), "", "" });
                        }
                    }
                    else
                    {
                        //if (CopyOrginalF != "") dtblstrm1.Rows.Add(new object[] { CopyOrginalF, "", "" });
                    }

                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                    else
                    {
                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;
                    }
                    dtblstrm2.Rows.Add(new object[] { Settings.ReceiptFooter.Trim(), "", "", NumberOfOccurancesF.ToString() });
                }
                else dtblstrm1.Rows.Add(new object[] { "", "", "" });

                if (!blIsVoid)
                    dtblstrm2.Rows.Add(new object[] { "", "* " +  Properties.Resources.Reprinted_Receipt + ": " + intReprintCnt.ToString() + " *", "" });
                else
                    dtblstrm2.Rows.Add(new object[] { "", "* " +  Properties.Resources.Reprinted_Void_Receipt + " " + intReprintCnt.ToString() + " *", "" });


                //this.intPageCounter++;
            }


        }

        private void GetPrintStreamEMV1()
        {


            int prm = 0;
            PosDataObject.POS obcc01 = new PosDataObject.POS();
            obcc01.Connection = SystemVariables.Conn;
            prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
            DataTable ccdtbl11 = new DataTable();
            PosDataObject.POS obcc11 = new PosDataObject.POS();
            obcc11.Connection = SystemVariables.Conn;
            ccdtbl11 = obcc11.FetchEmvPrinData(prm);


            foreach (DataRow drcc in ccdtbl11.Rows)
            {
                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrmEMV1.Rows.Add(new object[] { "", "", "", "logo" });

                }

                if (Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = ""; // Settings.TotalReceiptHeader;
                    ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;

                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;

                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (cutstr != "")
                                {
                                    dtblstrmEMV1.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrmEMV1.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (cutstr != "") dtblstrmEMV1.Rows.Add(new object[] { cutstr, "", "", "" });
                        }

                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }

                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len = len - 26;
                            if (CopyOrginalH != "")
                            {
                                dtblstrmEMV1.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrmEMV1.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else
                    {
                        if (CopyOrginalH != "") dtblstrmEMV1.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }

                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                    else
                    {
                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                    }
                }

                dtblstrmEMV1.Rows.Add(new object[] { "", "", "", "" });


                string xml = drcc["PrintXml"].ToString();

                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.LoadXml("<PrintData>" + xml + "</PrintData>");

                foreach (XmlNode node in xmlDoc.DocumentElement.ChildNodes)
                {
                    string linetxt = node.InnerText.Substring(1);
                    if (linetxt == "")
                    {
                        dtblstrmEMV1.Rows.Add(new object[] { "", "", "", "" });
                    }
                    else
                    {
                        dtblstrmEMV1.Rows.Add(new object[] { linetxt, "", "", "" });
                    }
                }

                dtblstrmEMV1.Rows.Add(new object[] { "",  Properties.Resources.CARDHOLDER_COPY, "", "" });

                this.intPageCounter++;
            }


        }

        private void GetPrintStreamEMV2()
        {


            int prm = 0;
            PosDataObject.POS obcc01 = new PosDataObject.POS();
            obcc01.Connection = SystemVariables.Conn;
            prm = obcc01.GetTranIDFromInvoiceID(intInvNo);
            DataTable ccdtbl11 = new DataTable();
            PosDataObject.POS obcc11 = new PosDataObject.POS();
            obcc11.Connection = SystemVariables.Conn;
            ccdtbl11 = obcc11.FetchEmvPrinData(prm);


            foreach (DataRow drcc in ccdtbl11.Rows)
            {

                if (Settings.PrintLogoInReceipt == "Y")
                {
                    dtblstrmEMV2.Rows.Add(new object[] { "", "", "", "logo" });

                }

                if (Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = ""; // Settings.TotalReceiptHeader;
                    ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;

                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;

                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                                if (cutstr != "")
                                {
                                    dtblstrmEMV2.Rows.Add(new object[] { cutstr.Substring(0, 26), "", "", "" });
                                    cutstr = cutstr.Substring(26, len);
                                }
                            }
                            if (len != 0)
                            {
                                dtblstrmEMV2.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "" });
                            }
                        }
                        else
                        {
                            if (cutstr != "") dtblstrmEMV2.Rows.Add(new object[] { cutstr, "", "", "" });
                        }

                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }

                    if (CopyOrginalH.Length > 26)
                    {
                        int len = CopyOrginalH.Length;
                        while (len >= 26)
                        {
                            NumberOfOccurancesH++;
                            len = len - 26;
                            if (CopyOrginalH != "")
                            {
                                dtblstrmEMV2.Rows.Add(new object[] { CopyOrginalH.Substring(0, 26), "", "", "" });
                                CopyOrginalH = CopyOrginalH.Substring(26, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrmEMV2.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "" });
                        }
                    }
                    else
                    {
                        if (CopyOrginalH != "") dtblstrmEMV2.Rows.Add(new object[] { CopyOrginalH, "", "", "" });
                    }

                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                    else
                    {
                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                    }
                }

                dtblstrmEMV2.Rows.Add(new object[] { "", "", "", "" });


                string xml = drcc["PrintXml"].ToString();

                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.LoadXml("<PrintData>" + xml + "</PrintData>");

                foreach (XmlNode node in xmlDoc.DocumentElement.ChildNodes)
                {
                    string linetxt = node.InnerText.Substring(1);
                    if (linetxt == "")
                    {
                        dtblstrmEMV2.Rows.Add(new object[] { "", "", "", "" });
                    }
                    else
                    {
                        dtblstrmEMV2.Rows.Add(new object[] { linetxt, "", "", "" });
                    }
                }

                dtblstrmEMV2.Rows.Add(new object[] { "",  Properties.Resources.MERCHANT_COPY, "", "" });

                this.intPageCounter++;
            }


        }
        #endregion

        #region Custom Functions for Printing
        private int modifylineno(int ln)
        {
            if (ln <= 4) return ln;
            else
            {
                int cnt = ln - 4;
                int mln = 4;
                while (cnt > 0)
                {
                    mln = mln + 2;
                    cnt = cnt - 4;
                }
                return mln;
            }
        }
        /*
        private int MorePageFunc(object sender, PrintPageEventArgs e, int Y)
        {
            if (Y > e.MarginBounds.Bottom)
            {
                e.HasMorePages = true;
                Y = e.MarginBounds.Top;
            }
            else
            {
                e.HasMorePages = false;
            }
            return Y;
        }*/

        private string GetFotmatNonZeroDoubleValue(double dbval)
        {
            string retstr = "";
            if (dbval == 0) retstr = "";
            else
            {
                if (Settings.DecimalPlace == 3) retstr = dbval.ToString("f3");
                else retstr = dbval.ToString("f");
                if (dbval < 0) retstr = "(" + retstr.Remove(0, 1) + ")";
            }
            return retstr;
        }

        private string GetFotmatNonZeroDoubleValueWithCurrency(double dbval)
        {
            string retstr = "";
            if (dbval == 0) retstr = "";
            else
            {
                if (Settings.DecimalPlace == 3) retstr = dbval.ToString("f3");
                else retstr = dbval.ToString("f");
                if (dbval < 0) retstr = "(" + SystemVariables.CurrencySymbol + retstr.Remove(0, 1) + ")";
                else retstr = SystemVariables.CurrencySymbol + retstr;
            }
            return retstr;
        }

        private string GetFotmatNonZeroIntValue(int inval)
        {
            string retstr = "";
            if (inval == 0) retstr = "";
            else
            {
                retstr = inval.ToString();
                if (inval < 0) retstr = "(" + retstr.Remove(0, 1) + ")";
            }
            return retstr;
        }

        private string GetFotmatDoubleValue(double dbval)
        {
            string retstr = "";
            if (Settings.DecimalPlace == 3) retstr = dbval.ToString("f3");
            else retstr = dbval.ToString("f");
            if (dbval < 0) retstr = "(" + retstr.Remove(0, 1) + ")";
            return retstr;
        }

        private string GetFotmatProductValue(double dbval, string strD)
        {
            string retstr = "";
            if (Settings.DecimalPlace == 3) retstr = dbval.ToString("f3");
            else
            {
                if (strD == "2")
                    retstr = dbval.ToString("f");
                if (strD == "3")
                    retstr = dbval.ToString("f3");
            }
            if (dbval < 0) retstr = "(" + retstr.Remove(0, 1) + ")";
            return retstr;
        }

        private void SetMultilineDesc(string PD, ref string PD1, ref string PD2, ref string PD3)
        {
            int intFirstLine = 0;
            if (Settings.GeneralReceiptPrint == "Y") intFirstLine = 55;
            else intFirstLine = 26;

            bool fl = false;
            bool sl = false;
            bool tl = false;

            if ((PD.Length + 3) <= intFirstLine)
            {
                PD1 = PD;
                PD2 = "";
                PD3 = "";
            }
            else
            {
                string stradd = "";

                foreach (char c in PD + "\n")
                {
                    if ((c.ToString() != " ") && (c.ToString() != "\n"))
                        stradd = stradd + c.ToString();

                    if ((!fl) && (!sl) && (!tl))
                    {
                        if (PD1.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD1 == "")
                                    PD1 = stradd;
                                else
                                    PD1 = PD1 + " " + stradd;

                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD1 == "")
                                    PD1 = stradd;
                                else
                                    PD1 = PD1 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            fl = true;
                        }
                    }
                    else if ((fl) && (!sl) && (!tl))
                    {
                        if (PD2.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD2 == "")
                                    PD2 = stradd;
                                else
                                    PD2 = PD2 + " " + stradd;
                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD2 == "")
                                    PD2 = stradd;
                                else
                                    PD2 = PD2 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            sl = true;
                        }
                    }

                    else if ((fl) && (sl) && (!tl))
                    {
                        if (PD3.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD3 == "")
                                    PD3 = stradd;
                                else
                                    PD3 = PD3 + " " + stradd;
                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD3 == "")
                                    PD3 = stradd;
                                else
                                    PD3 = PD3 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            tl = true;
                        }
                    }
                    else
                    {
                    }

                }
            }


            /*int iPD = PD.Length;
            int idex = 0;
            string tFstr = "";
            if (Settings.GeneralReceiptPrint == "Y") idex = 24;
            else idex = 14;
            tFstr = PD.Substring(idex, 1);
            if (tFstr == " ")
            {
                PD1 = PD.Substring(0, idex);
                PD2 = PD.Substring(idex + 1, iPD - idex - 1);
            }
            else
            {
                // get previous blank space

                string FindH = " ";
                string CopyOrginalH = string.Copy(PD.Substring(0,idex));
                int PlaceH = 0;
                int PlaceF = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                while (PlaceH != -1)
                {
                    PlaceF = PlaceF + PlaceH;
                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                }
                if (PlaceF == 0)
                {
                    PlaceF = PD.IndexOf(FindH.ToString());
                    PD1 = PD.Substring(0, PlaceF);
                    PD2 = PD.Substring(PlaceF + 1, iPD - PlaceF - 1);
                }
                else
                {
                    PD1 = PD.Substring(0, PlaceF);
                    PD2 = PD.Substring(PlaceF + 1, iPD - PlaceF - 1);
                }
            }

            if (PD1.Length + SKU.Length + 2 < intFirstLine)
            {
                string tLstr = PD2.Substring(0,intFirstLine - PD1.Length - SKU.Length - 2);
                string stradd = "";
                int intPOS = 0;
                int i = 0;
                foreach (char c in tLstr)
                {
                    if (PD1.Length + SKU.Length + 2 + stradd.Length == intFirstLine) break;
                    stradd = stradd + c.ToString();
                    if (c.ToString() == " ")
                    {
                        PD1 = PD1 + " " + stradd;
                        intPOS = intPOS + i;
                        stradd = "";
                    }
                    i++;
                }
                if (intPOS > 0)
                {
                    PD2 = PD2.Substring(intPOS + 1, PD2.Length - intPOS - 1);
                }
            }
        }*/
        }

        private void SetProductDesc(string PD, string SKU, ref string PD1, ref string PD2, ref string PD3)
        {
            int intFirstLine = 0;
            if (Settings.GeneralReceiptPrint == "Y") intFirstLine = 55;
            else intFirstLine = 100;

            bool fl = false;
            bool sl = false;
            bool tl = false;

            if ((PD.Length + SKU.Length + 3) <= intFirstLine)
            {
                //PD1 = SKU + " - " + PD;
                PD1 = PD;
                PD2 = "";
                PD3 = "";
            }
            else
            {
                string stradd = "";

                //   foreach (char c in SKU + " - " + PD + "\n")
                foreach (char c in  PD + "\n")
                {
                    if ((c.ToString() != " ") && (c.ToString() != "\n"))
                        stradd = stradd + c.ToString();

                    if ((!fl) && (!sl) && (!tl))
                    {
                        if (PD1.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD1 == "")
                                    PD1 = stradd;
                                else
                                    PD1 = PD1 + " " + stradd;

                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD1 == "")
                                    PD1 = stradd;
                                else
                                    PD1 = PD1 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            fl = true;
                        }
                    }
                    else if ((fl) && (!sl) && (!tl))
                    {
                        if (PD2.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD2 == "")
                                    PD2 = stradd;
                                else
                                    PD2 = PD2 + " " + stradd;
                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD2 == "")
                                    PD2 = stradd;
                                else
                                    PD2 = PD2 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            sl = true;
                        }
                    }

                    else if ((fl) && (sl) && (!tl))
                    {
                        if (PD3.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD3 == "")
                                    PD3 = stradd;
                                else
                                    PD3 = PD3 + " " + stradd;
                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD3 == "")
                                    PD3 = stradd;
                                else
                                    PD3 = PD3 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            tl = true;
                        }
                    }
                    else
                    {
                    }

                }
            }


            /*int iPD = PD.Length;
            int idex = 0;
            string tFstr = "";
            if (Settings.GeneralReceiptPrint == "Y") idex = 24;
            else idex = 14;
            tFstr = PD.Substring(idex, 1);
            if (tFstr == " ")
            {
                PD1 = PD.Substring(0, idex);
                PD2 = PD.Substring(idex + 1, iPD - idex - 1);
            }
            else
            {
                // get previous blank space

                string FindH = " ";
                string CopyOrginalH = string.Copy(PD.Substring(0,idex));
                int PlaceH = 0;
                int PlaceF = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                while (PlaceH != -1)
                {
                    PlaceF = PlaceF + PlaceH;
                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                }
                if (PlaceF == 0)
                {
                    PlaceF = PD.IndexOf(FindH.ToString());
                    PD1 = PD.Substring(0, PlaceF);
                    PD2 = PD.Substring(PlaceF + 1, iPD - PlaceF - 1);
                }
                else
                {
                    PD1 = PD.Substring(0, PlaceF);
                    PD2 = PD.Substring(PlaceF + 1, iPD - PlaceF - 1);
                }
            }

            if (PD1.Length + SKU.Length + 2 < intFirstLine)
            {
                string tLstr = PD2.Substring(0,intFirstLine - PD1.Length - SKU.Length - 2);
                string stradd = "";
                int intPOS = 0;
                int i = 0;
                foreach (char c in tLstr)
                {
                    if (PD1.Length + SKU.Length + 2 + stradd.Length == intFirstLine) break;
                    stradd = stradd + c.ToString();
                    if (c.ToString() == " ")
                    {
                        PD1 = PD1 + " " + stradd;
                        intPOS = intPOS + i;
                        stradd = "";
                    }
                    i++;
                }
                if (intPOS > 0)
                {
                    PD2 = PD2.Substring(intPOS + 1, PD2.Length - intPOS - 1);
                }
            }
        }*/
        }

        private void ArrangeText(string txt, int charlineper, ref string reftxt)
        {
            int intLine = 0;
            if (Settings.GeneralReceiptPrint == "Y") intLine = 55;
            else intLine = charlineper;

            bool fl = false;
            bool sl = false;
            bool tl = false;

            if (txt.Length <= intLine)
            {
                reftxt = txt;
            }
            else
            {
                int strlengh = txt.Length;
                int i = 0;
                string stradd = "";
                string linetxt = "";
                foreach (char c in txt)
                {
                    i++;
                    if ((c.ToString() != "\n") && (c.ToString() != "\r"))
                        stradd = stradd + c.ToString();

                    if (linetxt.Length + stradd.Length < intLine)
                    {
                        if (c.ToString() == " ")
                        {
                            if (linetxt == "")
                                linetxt = stradd;
                            else
                                linetxt = linetxt + " " + stradd;
                            //reftxt = reftxt + linetxt;
                            stradd = "";
                        }
                        if ((c.ToString() == "\n") || (c.ToString() == "\r"))
                        {
                            if (linetxt == "") linetxt = stradd; else linetxt = linetxt + " " + stradd;
                            reftxt = reftxt + linetxt;

                            if (c.ToString() == "\n") reftxt = reftxt + " \n";
                            stradd = "";
                            linetxt = "";
                        }
                    }
                    else
                    {
                        if (c.ToString() == " ")
                        {
                            reftxt = reftxt + linetxt + stradd + " \n";
                            linetxt = "";
                            stradd = "";
                        }
                        else
                        {
                            reftxt = reftxt + linetxt + " \n";
                            linetxt = "";
                        }
                    }
                }

                if ((linetxt != "") || (stradd != ""))
                {
                    reftxt = reftxt + linetxt + stradd; //+ "\n";
                }
            }



        }

        private int GetPageHeight()
        {
            int Y = 1;
            int H = 15;


            if (strPrintType == "Customer Label")
            {
                if (Settings.GeneralReceiptPrint == "Y")
                {
                    Y = 30;
                }

                if (Settings.DemoVersion == "Y")
                {
                    Y = Y + H;
                    Y = Y + H + 3;
                }

                DataTable prndtblINV = new DataTable();

                string strcompany = "";
                string strcust = "";
                string stradd = "";

                prndtblINV = FetchCustInfo(intInvNo);
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    strcompany = dr["Company"].ToString();
                    strcust = dr["CustomerName"].ToString();
                    stradd = dr["MailAddress"].ToString();

                }
                prndtblINV.Dispose();

                Y = Y + H;
                Y = Y + 2;
                if (stradd != "")
                {
                    string OrginalH = stradd;
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;

                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;

                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                            }
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }

                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                    else
                    {
                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                    }

                    Y = Y + H * NumberOfOccurancesH;
                }
                Y = Y + 2;
                Y = Y + H + 1;
                Y = Y + 25;
            }


            if (strPrintType == "Invoice")
            {
                if (Settings.GeneralReceiptPrint == "Y")
                {
                    Y = 30;
                }

                if (Settings.DemoVersion == "Y")
                {
                    Y = Y + H;
                    Y = Y + H + 3;
                }

                // -----------------  Receipt Header ---------------

                if (Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = ""; // Settings.TotalReceiptHeader;
                    ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);

                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;

                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;

                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                            }
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }

                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                    else
                    {
                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                    }

                    ////Y = Y + H * NumberOfOccurancesH;
                    Y = Y + H * NumberOfOccurancesH;
                }

                DataTable prndtblINV = new DataTable();

                int intTranNo = 0;
                int intStoreID = 0; string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCID = "";
                string strCustID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";

                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblTotalSale = 0;

                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                string strCustAddress = "";
                prndtblINV = FetchInvHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();

                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                }
                prndtblINV.Dispose();

                intWO = FetchWorkorderNo();
                if (intWO > 0) // work order payment
                {
                    Y = Y + 1;
                    Y = Y + 3;
                    ////Y = Y + H; 
                    Y = Y + H;
                    ////Y = Y + H;
                    Y = Y + H + 3;
                }

                Y = Y + 1;
                Y = Y + 3;
                ////Y = Y + H; 
                Y = Y + H + 3;
                Y = Y + 1;
                Y = Y + 3;

                if (strCustCompany != "")
                {
                    Y = Y + H;
                    Y = Y + H;
                }

                if (strCustName != "")
                {
                    ////Y = Y + H; 
                    Y = Y + H;
                }

                if (strCustID != "")
                {
                    ////Y = Y + H; 
                    Y = Y + H;
                }
                if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                {
                    Y = Y + 1;
                    Y = Y + 3;
                }


                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = FetchInvDetails(dblTotalSale);
                double dblTempTotal = 0;
                int i = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    i++;
                    string strDescription = "";
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string tgininv = "";
                    int ipid = 0;
                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();
                    ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                    tgininv = dr["TaggedInInvoice"].ToString();
                    strSKU = dr["SKU"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    dblTempTotal = dblTempTotal + dblTotalPrice;
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);

                    ////Y = Y + H; 
                    Y = Y + H;
                    if (sPD2.Trim() != "")
                    {
                        ////Y = Y + H; 
                        Y = Y + H;
                    }

                    if (sPD3.Trim() != "")
                    {
                        ////Y = Y + H; 
                        Y = Y + H;
                    }


                    if (strPType == "M")
                    {
                        ////Y = Y + H; 
                        Y = Y + H;
                        if (strMV2 != "")
                        {
                            ////Y = Y + H; 
                            Y = Y + H;
                        }
                        if (strMV3 != "")
                        {
                            ////Y = Y + H; 
                            Y = Y + H;
                        }
                    }
                    if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                        || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                    {
                        if (strPType != "U")
                        {
                            if (dblNormalPrice - dblPrice > 0)
                            {
                                ////Y = Y + H; 
                                Y = Y + H;
                            }
                        }
                        if (strPType == "U")
                        {
                            if (dblUOMPrice - dblPrice > 0)
                            {
                                ////Y = Y + H; 
                                Y = Y + H;
                            }
                        }

                        if (strPType == "T")
                        {
                            if (tgininv == "Y")
                            {
                                PosDataObject.Product opdt = new PosDataObject.Product();
                                opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                DataTable dtemp = opdt.FetchTaggedData(ipid);
                                foreach (DataRow tgdr in dtemp.Rows)
                                {
                                    double tgQty = 0;
                                    string tgName = "";
                                    tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                    tgName = tgdr["ItemName"].ToString();
                                    tgQty = tgQty * dblQty;
                                    Y = Y + H;
                                    Y = Y + H;
                                }
                                dtemp.Dispose();
                            }
                        }
                    }
                    ////Y = Y + H; 
                    Y = Y + H;

                    if (strInvNotes != "")
                    {
                        string OrginalN = strInvNotes;
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;

                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;

                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }

                        if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                        else
                        {
                            if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                        }

                        ////Y = Y + H * NumberOfOccurancesN;
                        Y = Y + H * NumberOfOccurancesN;
                    }

                }
                prndtblINV1.Dispose();

                Y = Y + 1;

                if (dblDiscount != 0) // -------------- Discount ----------------
                {
                    if (strDiscountReason != "")
                    {
                        ////Y = Y + H; 
                        Y = Y + H;
                        ////Y = Y + H * 2; 
                        Y = Y + H * 2;
                    }
                    else
                    {
                        Y = Y + H;
                        Y = Y + H;
                    }
                }

                // -------------- Sub Total ----------------

                Y = Y + 3;

                ////Y = Y + H; 
                Y = Y + H;

                // -------------- Tax ----------------
                if (dblTax != 0)
                {
                    if (dblTax1 != 0)
                    {
                        ////Y = Y + H; 
                        Y = Y + H;
                    }
                    if (dblTax2 != 0)
                    {
                        ////Y = Y + H; 
                        Y = Y + H;
                    }
                    if (dblTax3 != 0)
                    {
                        ////Y = Y + H; 
                        Y = Y + H;
                    }
                }

                Y = Y + 3;

                // -------------- Total ----------------

                ////Y = Y + H; 
                Y = Y + H * 2;

                // --------------- Tender --------------

                ////Y = Y + H; 

                Y = Y + H;

                DataTable prndtblINV2 = new DataTable();
                prndtblINV2 = FetchInvTender();
                double dblTempTender = 0;
                foreach (DataRow dr in prndtblINV2.Rows)
                {
                    string strTender = "";
                    double dblAmount = 0;

                    strTender = dr["DisplayAs"].ToString();
                    dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                    dblTempTender = dblTempTender + dblAmount;
                    if (strTender == "Gift Certificate") strTender = Properties.Resources.Gift_Cert;
                    if (strTender == "American Express") strTender = Properties.Resources.American_Exp_;
                    ////Y = Y + H; 
                    Y = Y + H;
                }
                prndtblINV2.Dispose();

                if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                {
                    Y = Y + 2;
                    ////Y = Y + H; 
                    Y = Y + H * 2;
                }
                else Y = Y + H;

                if (Settings.POSShowGiftCertBalance == "Y")
                {
                    DataTable dtblGC = new DataTable();
                    dtblGC = FetchActiveGC(intInvNo);
                    if (dtblGC.Rows.Count > 0)
                    {
                        ////Y = Y + H; 
                        Y = Y + H;
                        ////Y = Y + H; 
                        Y = Y + H + 3;

                        Y = Y + 3;
                        foreach (DataRow dr in dtblGC.Rows)
                        {
                            ////Y = Y + H; 
                            Y = Y + H;
                        }
                    }
                    dtblGC.Dispose();
                }

                // --------------- EBT Balance --------

                DataTable dtblEBT = new DataTable();
                dtblEBT = FetchEBTBalance(intInvNo);
                if (dtblEBT.Rows.Count > 0)
                {
                    ////Y = Y + H; 
                    Y = Y + H;
                    ////Y = Y + H; 
                    Y = Y + H + 3;

                    Y = Y + 3;
                    foreach (DataRow dr in dtblEBT.Rows)
                    {
                        ////Y = Y + H; 
                        Y = Y + H;
                    }
                }
                dtblEBT.Dispose();


                // --------------- Sign --------------
                if (blCardPayment)
                {
                    ////Y = Y + H; 
                    Y = Y + H;
                    ////Y = Y + H; 
                    Y = Y + H;

                    ////Y = Y + H; 
                    Y = Y + H;
                    ////Y = Y + H; 
                    Y = Y + H + 7;
                    if (strCardType == "Credit")
                    {
                        ////Y = Y + H; 
                        Y = Y + H + 7;
                        ////Y = Y + H; 
                        Y = Y + H;
                        ////Y = Y + H; 
                        Y = Y + H + 10;
                    }
                    if (strCardType == "Debit")
                    {
                        ////Y = Y + H; 
                        Y = Y + H + 7;
                        ////Y = Y + H; 
                        Y = Y + H;
                        ////Y = Y + H; 
                        Y = Y + H + 10;

                        if (strCardType == "Credit")
                        {
                            ////Y = Y + H; 
                            Y = Y + H;
                            ////Y = Y + H; 
                            Y = Y + H;
                            Y = Y + 20;
                            ////Y = Y + H; 
                            Y = Y + H + 1;
                            Y = Y + 4;
                            ////Y = Y + H; 
                            Y = Y + H;
                        }

                        if (strCardType == "Debit")
                        {
                            ////Y = Y + H; 
                            Y = Y + H;
                            ////Y = Y + H; 
                            Y = Y + H;

                        }
                    }

                }
                // --------------- Sign --------------

                // --------------- Receipt Footer --------------
                Y = Y + H + 2;
                ////Y = Y + H; 
                Y = Y + H;

                Y = Y + H;

                // ------------ Setting Receipt Footer -------------

                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                {
                    Y = Y + H + 3;
                    string OrginalF = "";
                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;


                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                    else
                    {
                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                    }

                    ////Y = Y + H * NumberOfOccurancesF;
                    Y = Y + H * NumberOfOccurancesF;

                }

                if (blCardPayment)
                {
                    Y = Y + 20;
                    ////Y = Y + H; 
                }

                Y = Y + 100;
            }




            if (strPrintType == "Reprint Receipt")
            {
                if (Settings.GeneralReceiptPrint == "Y")
                {
                    Y = 30;
                }
                if (Settings.DemoVersion == "Y")
                {
                    Y = Y + H + 3;
                }
                Y = Y + H + 2;

                // -----------------  Receipt Header ---------------

                if (Settings.TotalReceiptHeader.Trim() != "")
                {
                    string OrginalH = ""; // Settings.TotalReceiptHeader;
                    ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);
                    char FindH = '\n';
                    int NumberOfOccurancesH = 0;

                    string CopyOrginalH = string.Copy(OrginalH);
                    int PlaceH = 0;

                    NumberOfOccurancesH = 0;
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    while (PlaceH != -1)
                    {
                        string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);
                        if (cutstr.Length > 26)
                        {
                            int len = cutstr.Length;
                            while (len >= 26)
                            {
                                NumberOfOccurancesH++;
                                len = len - 26;
                            }
                        }
                        CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                        PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                        NumberOfOccurancesH++;
                    }

                    if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                    else
                    {
                        if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;

                    }
                    Y = Y + H * NumberOfOccurancesH;
                }

                DataTable prndtblINV = new DataTable();

                int intTranNo = 0;
                int intStoreID = 0; string stermnl = "";
                int intRegisterID = 0;
                string strEmpID = "";
                string strCustID = "";
                string strCID = "";
                string strCustName = "";
                string strCustCompany = "";
                string strTransDate = "";

                double dblTax = 0;
                double dblTax1 = 0;
                double dblTax2 = 0;
                double dblTax3 = 0;
                double dblDiscount = 0;
                double dblTotalSale = 0;

                string strDiscountReason = "";
                string strTaxName1 = "";
                string strTaxName2 = "";
                string strTaxName3 = "";
                string strCustAddress = "";
                prndtblINV = FetchInvHeader();
                foreach (DataRow dr in prndtblINV.Rows)
                {
                    intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                    intTrnNo = intTranNo;
                    intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString()); stermnl = dr["Terminal"].ToString();
                    intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                    strEmpID = dr["EmpID"].ToString();
                    strCID = dr["CID"].ToString();
                    strCustID = dr["CustID"].ToString();
                    strCustName = dr["CustName"].ToString();
                    strCustAddress = dr["CustomerShortAddress"].ToString();
                    strCustCompany = dr["CustCompany"].ToString();
                    strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                    strDiscountReason = dr["DiscountReason"].ToString();
                    strTaxName1 = dr["TaxNM1"].ToString();
                    strTaxName2 = dr["TaxNM2"].ToString();
                    strTaxName3 = dr["TaxNM3"].ToString();

                    dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                    dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                    dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                    dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                    dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                    dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                }
                prndtblINV.Dispose();

                intWO = FetchWorkorderNo();
                if (intWO > 0) // work order payment
                {
                    Y = Y + 3;
                    Y = Y + H;
                    Y = Y + H + 3;
                }

                Y = Y + 3;
                Y = Y + H + 3;
                Y = Y + 3;

                if (strCustCompany != "")
                {
                    Y = Y + H;
                }

                if (strCustName != "")
                {
                    Y = Y + H;
                }

                if (strCustID != "")
                {
                    Y = Y + H;
                }
                if ((strCustCompany != "") || (strCustName != "") || (strCustID != ""))
                {
                    Y = Y + 3;
                }

                DataTable prndtblINV1 = new DataTable();
                prndtblINV1 = FetchInvDetails(dblTotalSale);
                double dblTempTotal = 0;
                foreach (DataRow dr in prndtblINV1.Rows)
                {
                    string strDescription = "";
                    string strPType = "";
                    string strMV1 = "";
                    string strMV2 = "";
                    string strMV3 = "";
                    string strSKU = "";
                    double dblPrice = 0;
                    double dblQty = 0;
                    double dblTotalPrice = 0;
                    string strDP = "";
                    double dblNormalPrice = 0;
                    double dblUOMPrice = 0;
                    string strInvNotes = "";
                    string tgininv = "";
                    int ipid = 0;
                    ipid = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                    tgininv = dr["TaggedInInvoice"].ToString();
                    strDescription = dr["Description"].ToString();
                    strPType = dr["ProductType"].ToString();
                    strMV1 = dr["MOP1"].ToString();
                    strMV2 = dr["MOP2"].ToString();
                    strMV3 = dr["MOP3"].ToString();

                    strSKU = dr["SKU"].ToString();
                    dblPrice = GeneralFunctions.fnDouble(dr["Price"].ToString());
                    dblNormalPrice = GeneralFunctions.fnDouble(dr["NormalPrice"].ToString());
                    dblUOMPrice = GeneralFunctions.fnDouble(dr["UOMPrice"].ToString());
                    dblQty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                    dblTempTotal = dblTempTotal + dblTotalPrice;
                    strDP = dr["DP"].ToString();
                    strInvNotes = dr["Notes"].ToString();
                    string sPD1 = "";
                    string sPD2 = "";
                    string sPD3 = "";
                    SetProductDesc(strDescription, strSKU, ref sPD1, ref sPD2, ref sPD3);
                    Y = Y + H;
                    if (sPD2.Trim() != "")
                    {
                        Y = Y + H;
                    }

                    if (sPD3.Trim() != "")
                    {
                        Y = Y + H;
                    }

                    if (strPType == "M")
                    {
                        Y = Y + H;
                        if (strMV2 != "")
                        {
                            Y = Y + H;
                        }
                        if (strMV3 != "")
                        {
                            Y = Y + H;
                        }
                    }

                    if ((strPType == "P") || (strPType == "M") || (strPType == "K") || (strPType == "U")
                        || (strPType == "W") || (strPType == "E") || (strPType == "F") || (strPType == "S") || (strPType == "T"))
                    {
                        if (strPType != "U")
                        {
                            if (dblNormalPrice - dblPrice > 0)
                            {
                                Y = Y + H;
                            }
                        }
                        if (strPType == "U")
                        {
                            if (dblUOMPrice - dblPrice > 0)
                            {
                                Y = Y + H;
                            }
                        }

                        if (strPType == "T")
                        {
                            if (tgininv == "Y")
                            {
                                PosDataObject.Product opdt = new PosDataObject.Product();
                                opdt.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                DataTable dtemp = opdt.FetchTaggedData(ipid);
                                foreach (DataRow tgdr in dtemp.Rows)
                                {
                                    double tgQty = 0;
                                    string tgName = "";
                                    tgQty = GeneralFunctions.fnDouble(tgdr["ItemQty"].ToString());
                                    tgName = tgdr["ItemName"].ToString();
                                    tgQty = tgQty * dblQty;
                                    Y = Y + H;
                                }
                                dtemp.Dispose();
                            }
                        }
                    }

                    Y = Y + H;

                    if (strInvNotes != "")
                    {
                        string OrginalN = strInvNotes;
                        char FindN = '\n';
                        int NumberOfOccurancesN = 0;

                        string CopyOrginalN = string.Copy(OrginalN);
                        int PlaceN = 0;

                        NumberOfOccurancesN = 0;
                        PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                        while (PlaceN != -1)
                        {
                            CopyOrginalN = CopyOrginalN.Substring(PlaceN + 1);
                            PlaceN = CopyOrginalN.IndexOf(FindN.ToString());
                            NumberOfOccurancesN++;
                        }

                        if (NumberOfOccurancesN == 0) NumberOfOccurancesN = 1;
                        else
                        {
                            if ((OrginalN.Substring(0, OrginalN.Length - 2) != FindN.ToString())) NumberOfOccurancesN = NumberOfOccurancesN + 1;
                        }

                        Y = Y + H * NumberOfOccurancesN;
                    }
                }
                prndtblINV1.Dispose();

                Y = Y + 1;

                if (dblDiscount != 0) // -------------- Discount ----------------
                {
                    string strDiscountCaption =  Properties.Resources.Discount;

                    if (strDiscountReason != "")
                    {
                        Y = Y + H;
                        Y = Y + H * 2;
                    }
                    else
                    {
                        Y = Y + H;
                    }
                }
                // -------------- Sub Total ----------------
                Y = Y + 3;
                Y = Y + H;
                // -------------- Tax ----------------
                if (dblTax != 0)
                {
                    if (dblTax1 != 0)
                    {
                        Y = Y + H;
                    }
                    if (dblTax2 != 0)
                    {
                        Y = Y + H;
                    }
                    if (dblTax3 != 0)
                    {
                        Y = Y + H;
                    }
                }

                Y = Y + 3;

                // -------------- Total ----------------

                Y = Y + H * 2;

                // --------------- Tender --------------

                Y = Y + H;

                DataTable prndtblINV2 = new DataTable();
                prndtblINV2 = FetchInvTender();
                double dblTempTender = 0;
                foreach (DataRow dr in prndtblINV2.Rows)
                {
                    string strTender = "";
                    double dblAmount = 0;

                    strTender = dr["DisplayAs"].ToString();
                    dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                    dblTempTender = dblTempTender + dblAmount;
                    if (strTender == "Gift Certificate") strTender =  Properties.Resources.Gift_Cert;
                    if (strTender == "American Express") strTender =  Properties.Resources.American_Exp_;
                    Y = Y + H;
                }
                prndtblINV2.Dispose();

                if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
                {
                    Y = Y + 2;
                    Y = Y + H * 2;
                }
                else Y = Y + H;

                if (Settings.POSShowGiftCertBalance == "Y")
                {
                    DataTable dtblGC = new DataTable();
                    dtblGC = FetchActiveGC(intInvNo);
                    if (dtblGC.Rows.Count > 0)
                    {
                        Y = Y + H;
                        Y = Y + H + 3;
                        Y = Y + 3;
                        foreach (DataRow dr in dtblGC.Rows)
                        {
                            Y = Y + H;
                        }
                    }
                    dtblGC.Dispose();
                }
                //}


                // --------------- EBT Balance --------

                DataTable dtblEBT = new DataTable();
                dtblEBT = FetchEBTBalance(intInvNo);
                if (dtblEBT.Rows.Count > 0)
                {
                    ////Y = Y + H; 
                    Y = Y + H;
                    ////Y = Y + H; 
                    Y = Y + H + 3;

                    Y = Y + 3;
                    foreach (DataRow dr in dtblEBT.Rows)
                    {
                        ////Y = Y + H; 
                        Y = Y + H;
                    }
                }
                dtblEBT.Dispose();

                // --------------- Sign --------------
                if (blCardPayment)
                {
                    Y = Y + 5;
                    Y = Y + 3;
                    Y = Y + H + 2;
                }
                // --------------- Sign --------------

                // --------------- Receipt Footer --------------
                Y = Y + 3;
                Y = Y + H;
                // ------------ Setting Receipt Footer -------------

                if ((Settings.ReceiptFooter.Trim() != "") && (Settings.ReceiptFooter.Trim() != null))
                {
                    Y = Y + H + 3;
                    string OrginalF = "";
                    ArrangeText(Settings.ReceiptFooter, 30, ref OrginalF);
                    char FindF = '\n';
                    int NumberOfOccurancesF = 0;
                    string CopyOrginalF = string.Copy(OrginalF);
                    int PlaceF = 0;
                    NumberOfOccurancesF = 0;
                    PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                    while (PlaceF != -1)
                    {
                        CopyOrginalF = CopyOrginalF.Substring(PlaceF + 1);
                        PlaceF = CopyOrginalF.IndexOf(FindF.ToString());
                        NumberOfOccurancesF++;
                    }
                    if (NumberOfOccurancesF == 0) NumberOfOccurancesF = 1;
                    else
                    {
                        if ((OrginalF.Substring(0, OrginalF.Length - 2) != FindF.ToString())) NumberOfOccurancesF = NumberOfOccurancesF + 1;

                    }
                    Y = Y + H * NumberOfOccurancesF + 2;
                }
                else Y = Y + H + 2;

                Y = Y + 100;
            }
            return Y;
        }

        private string GetFotmatDoubleValue1(double dbval)
        {
            string retstr = "";
            if (Settings.DecimalPlace == 3) retstr = dbval.ToString("f3");
            else retstr = dbval.ToString("f");
            if (dbval < 0) retstr = retstr.Remove(0, 1);
            if (dbval > 0) retstr = "(" + retstr + ")";
            return retstr;
        }

        private string GetFotmatNonZeroDoubleValue1(double dbval)
        {
            string retstr = "";
            if (dbval == 0) retstr = "";
            else
            {
                if (Settings.DecimalPlace == 3) retstr = dbval.ToString("f3");
                else retstr = dbval.ToString("f");
                if (dbval < 0) retstr = retstr.Remove(0, 1);
                if (dbval > 0) retstr = "(" + retstr + ")";
            }
            return retstr;
        }

        private string GetFotmatNonZeroDoubleValue1WithCurrency(double dbval)
        {
            string retstr = "";
            if (dbval == 0) retstr = "";
            else
            {
                if (Settings.DecimalPlace == 3) retstr = dbval.ToString("f3");
                else retstr = dbval.ToString("f");
                if (dbval < 0) retstr = retstr.Remove(0, 1);
                if (dbval > 0) retstr = "(" + retstr + ")";

            }
            return retstr;
        }

        private string GetDisplayQty(string pQty, string pDecimal, string pProdType, string pProductUOM)
        {
            string ReturnS = pQty;
            bool minusval = false;
            if (pQty.StartsWith("-"))
            {
                minusval = true;
                pQty = pQty.Remove(0, 1);
            }
            if (pDecimal == "")
            {
                ReturnS = pQty;
            }
            else
            {
                if ((pProdType == "Z") || (pProdType == "C"))
                {
                    ReturnS = pQty;
                }
                else
                {
                    decimal dQty = GeneralFunctions.fnDecimal(pQty);
                    int IPart = (int)Decimal.Truncate(dQty);
                    Decimal decimal_part = dQty - Decimal.Truncate(IPart);
                    if (decimal_part == 0)
                    {
                        ReturnS = IPart.ToString();
                    }
                    else
                    {
                        if (pDecimal == "0")
                        {
                            ReturnS = pQty;
                        }
                        else
                        {
                            string TempDecimal = "";
                            string strDecimal = decimal_part.ToString();
                            TempDecimal = strDecimal.Substring(2);

                            if (pDecimal == "1") ReturnS = String.Format("{0:0.0}", GeneralFunctions.fnDecimal(IPart + "." + TempDecimal));
                            if (pDecimal == "2") ReturnS = String.Format("{0:0.00}", GeneralFunctions.fnDecimal(IPart + "." + TempDecimal));
                            if (pDecimal == "3") ReturnS = String.Format("{0:0.000}", GeneralFunctions.fnDecimal(IPart + "." + TempDecimal));

                        }
                    }
                }
            }
            if (pProdType == "W")
            {
                ReturnS = ReturnS + " " + pProductUOM;
            }
            if (minusval)
            {
                ReturnS = "(" + ReturnS + ")";
            }
            return ReturnS;
        }
        #endregion

        #region Closeout Export
        private int ExecuteExport(DataTable dtblH, DataTable dtblT)
        {
            int rtn = 0;
            DataTable dtbl = new DataTable();
            int intExpID = 0;

            dtbl.Columns.Add("ID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CO_ID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CO_StartDate", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CO_EndDate", System.Type.GetType("System.String"));
            dtbl.Columns.Add("RWAccount", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Amount", System.Type.GetType("System.String"));

            foreach (DataRow dr in dtblH.Rows)
            {
                intExpID++;
                dtbl.Rows.Add(new object[] {intExpID.ToString(),
                                            dr["CloseoutID"].ToString(),
                                            dr["StartDateTime"].ToString(),
                                            dr["EndDateTime"].ToString(),
                                            "Sales (PreTax)",
                                            dr["TotalSales_PreTax"].ToString()});

                intExpID++;
                dtbl.Rows.Add(new object[] {intExpID.ToString(),
                                            dr["CloseoutID"].ToString(),
                                            dr["StartDateTime"].ToString(),
                                            dr["EndDateTime"].ToString(),
                                            "Tax1",
                                            dr["Tax1Amount"].ToString()});

                intExpID++;
                dtbl.Rows.Add(new object[] {intExpID.ToString(),
                                            dr["CloseoutID"].ToString(),
                                            dr["StartDateTime"].ToString(),
                                            dr["EndDateTime"].ToString(),
                                            "Tax2",
                                            dr["Tax2Amount"].ToString()});

                intExpID++;
                dtbl.Rows.Add(new object[] {intExpID.ToString(),
                                            dr["CloseoutID"].ToString(),
                                            dr["StartDateTime"].ToString(),
                                            dr["EndDateTime"].ToString(),
                                            "Tax3",
                                            dr["Tax3Amount"].ToString()});
                int ECID = 0;
                ECID = GeneralFunctions.fnInt32(dr["CloseoutID"].ToString());

                foreach (DataRow dr1 in dtblT.Rows)
                {
                    intExpID++;
                    dtbl.Rows.Add(new object[] {intExpID.ToString(),
                                            dr["CloseoutID"].ToString(),
                                            dr["StartDateTime"].ToString(),
                                            dr["EndDateTime"].ToString(),
                                            dr1["TenderName"].ToString(),
                                            dr1["TenderAmount"].ToString()});
                }

                intExpID++;
                dtbl.Rows.Add(new object[] {intExpID.ToString(),
                                            dr["CloseoutID"].ToString(),
                                            dr["StartDateTime"].ToString(),
                                            dr["EndDateTime"].ToString(),
                                            "Layaway Deposit/Payment",
                                            Convert.ToString(GeneralFunctions.fnDouble(dr["LayawayDeposits"].ToString())+ GeneralFunctions.fnDouble(dr["LayawayPayment"].ToString()))});

                intExpID++;
                dtbl.Rows.Add(new object[] {intExpID.ToString(),
                                            dr["CloseoutID"].ToString(),
                                            dr["StartDateTime"].ToString(),
                                            dr["EndDateTime"].ToString(),
                                            "Layaway Posted",
                                            dr["LayawaySalesPosted"].ToString()});

                intExpID++;
                dtbl.Rows.Add(new object[] {intExpID.ToString(),
                                            dr["CloseoutID"].ToString(),
                                            dr["StartDateTime"].ToString(),
                                            dr["EndDateTime"].ToString(),
                                            "Gift Certificate Sold",
                                            dr["GCsold"].ToString()});

                intExpID++;
                dtbl.Rows.Add(new object[] {intExpID.ToString(),
                                            dr["CloseoutID"].ToString(),
                                            dr["StartDateTime"].ToString(),
                                            dr["EndDateTime"].ToString(),
                                            "Cost Of Goods Sold",
                                            dr["CostOfGoods"].ToString()});
            }

            if (dtbl.Rows.Count > 0)
            {
                StreamWriter writer = new StreamWriter(GetExportPath());
                StringBuilder builder = new StringBuilder();
                try
                {
                    int prevlength = 0;
                    string sepChar = ",";

                    string sep = "";

                    foreach (DataColumn dc in dtbl.Columns)
                    {
                        builder.Append(sep).Append(dc.ColumnName);
                        sep = sepChar;
                    }
                    writer.WriteLine(builder.ToString());
                    prevlength = builder.Length;


                    foreach (DataRow drE in dtbl.Rows)
                    {
                        sep = "";
                        foreach (DataColumn dc1 in dtbl.Columns)
                        {
                            builder.Append(sep).Append(drE[dc1.ColumnName]);
                            sep = sepChar;
                        }
                        writer.WriteLine(builder.ToString(prevlength, builder.Length - prevlength));
                        prevlength = builder.Length;
                    }
                    writer.Close();
                }
                catch
                {
                    rtn = 2;
                }
            }
            else
            {
                rtn = 1;
            }
            return rtn;
        }

        private string GetExportPath()
        {
            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";
            //csConnPath = Application.StartupPath;
            csConnPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            if (csConnPath.EndsWith("\\"))
            {
                strdirpath = csConnPath + SystemVariables.BrandName + "\\QB";
            }
            else
            {
                strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\QB";
            }
            if (Directory.Exists(strdirpath))
            {
                if (File.Exists(strdirpath + "\\export.csv")) File.Delete(strdirpath + "\\export.csv");
                strfilename = strdirpath + "\\export.csv";
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\export.csv";
            }
            strCloseoutExportLocation = strfilename;
            return strfilename;
        }

        private string ExpFileName()
        {
            strExportDir = GetExpDir();
            string filename = "";
            string tempfile = DateTime.Now.ToString("MMddyy") + "_" + Settings.StoreCode;
            string tempfile1 = tempfile + "*";
            string[] fi = Directory.GetFiles(strExportDir + "\\", tempfile1, SearchOption.TopDirectoryOnly);
            int prevver = 0;
            int newver = 0;
            foreach (string f in fi)
            {
                filename =System.IO.Path.GetFileNameWithoutExtension(f);
                newver = GeneralFunctions.fnInt32(filename.Substring(tempfile.Length + 1));
                if (prevver < newver) prevver = newver;

            }
            prevver++;
            strExportFile = tempfile + "_" + prevver.ToString() + ".csv";
            string expf = strExportDir + "\\" + tempfile + "_" + prevver.ToString() + ".csv";
            return expf;
        }

        private string GetExpDir()
        {
            string csConnPath = "";
            string strdirpath = "";
            //csConnPath = Application.StartupPath;

            csConnPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);

            if (csConnPath.EndsWith("\\"))
            {
                strdirpath = csConnPath + SystemVariables.BrandName + "\\ExporttoCB";
            }
            else
            {
                strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\ExporttoCB";
            }
            if (!Directory.Exists(strdirpath))
            {
                Directory.CreateDirectory(strdirpath);
            }
            return strdirpath;
        }

        private bool CheckIfExportedToday()
        {
            strExportDir = GetExpDir();
            string tempfile = DateTime.Now.ToString("MMddyy") + "_" + Settings.StoreCode;
            string tempfile1 = tempfile + "*";
            string[] fi = Directory.GetFiles(strExportDir + "\\", tempfile1, SearchOption.TopDirectoryOnly);
            bool blExp = false;

            foreach (string f in fi)
            {
                blExp = true;
                break;
            }
            return blExp;
        }

        private int ExecuteExport()
        {
            int rtn = 0;
            DataTable dtbl = new DataTable();
            DataTable dtblSH = new DataTable();
            DataTable dtblST = new DataTable();
            DataTable dtblET = new DataTable();
            DataTable dtblII = new DataTable();
            DataTable dtblH = new DataTable();
            DataTable dtblT = new DataTable();
            DataTable dtblE = new DataTable();
            DataTable dtblP = new DataTable();

            PosDataObject.Closeout objCloseoutM = new PosDataObject.Closeout();
            objCloseoutM.Connection = new SqlConnection(SystemVariables.ConnectionString);
            objCloseoutM.ExecuteCentralExport();
            dtblSH.Columns.Add("StoreCode", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("StoreName", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Exp YY", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Exp MM", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Exp DD", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("TaxedSales", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("NonTaxedSales", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Tax1Exist", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Tax1Name", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Tax1Amount", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Tax2Exist", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Tax2Name", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Tax2Amount", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Tax3Exist", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Tax3Name", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("Tax3Amount", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("ServiceSales", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("ProductSales", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("OtherSales", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("DiscountItemNo", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("DiscountItemAmount", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("DiscountInvoiceNo", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("DiscountInvoiceAmount", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("LayawayDeposits", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("LayawayRefund", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("LayawayPayment", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("LayawaySalesPosted", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("PaidOuts", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("GCsold", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("SCissued", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("SCredeemed", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("HACharged", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("HApayments", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("NoOfSales", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("TotalSales_PreTax", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("CostOfGoods", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("ReturnItemNo", System.Type.GetType("System.String"));
            dtblSH.Columns.Add("ReturnItemAmount", System.Type.GetType("System.String"));


            dtblST.Columns.Add("StoreCode", System.Type.GetType("System.String"));
            dtblST.Columns.Add("StoreName", System.Type.GetType("System.String"));
            dtblST.Columns.Add("Exp YY", System.Type.GetType("System.String"));
            dtblST.Columns.Add("Exp MM", System.Type.GetType("System.String"));
            dtblST.Columns.Add("Exp DD", System.Type.GetType("System.String"));
            dtblST.Columns.Add("TenderName", System.Type.GetType("System.String"));
            dtblST.Columns.Add("TenderAmount", System.Type.GetType("System.String"));
            dtblST.Columns.Add("TenderCount", System.Type.GetType("System.String"));

            dtblET.Columns.Add("StoreCode", System.Type.GetType("System.String"));
            dtblET.Columns.Add("StoreName", System.Type.GetType("System.String"));
            dtblET.Columns.Add("Exp YY", System.Type.GetType("System.String"));
            dtblET.Columns.Add("Exp MM", System.Type.GetType("System.String"));
            dtblET.Columns.Add("Exp DD", System.Type.GetType("System.String"));
            dtblET.Columns.Add("EmpID", System.Type.GetType("System.String"));
            dtblET.Columns.Add("EmployeeID", System.Type.GetType("System.String"));
            dtblET.Columns.Add("LastName", System.Type.GetType("System.String"));
            dtblET.Columns.Add("FirstName", System.Type.GetType("System.String"));
            dtblET.Columns.Add("ShiftID", System.Type.GetType("System.String"));
            dtblET.Columns.Add("ShiftName", System.Type.GetType("System.String"));
            dtblET.Columns.Add("StartTime", System.Type.GetType("System.String"));
            dtblET.Columns.Add("EndTime", System.Type.GetType("System.String"));
            dtblET.Columns.Add("ShiftDuration", System.Type.GetType("System.String"));
            dtblET.Columns.Add("DayStart", System.Type.GetType("System.String"));
            dtblET.Columns.Add("DayEnd", System.Type.GetType("System.String"));
            dtblET.Columns.Add("ShiftStartDate", System.Type.GetType("System.String"));
            dtblET.Columns.Add("ShiftEndDate", System.Type.GetType("System.String"));


            dtblII.Columns.Add("StoreCode", System.Type.GetType("System.String"));
            dtblII.Columns.Add("StoreName", System.Type.GetType("System.String"));
            dtblII.Columns.Add("Exp YY", System.Type.GetType("System.String"));
            dtblII.Columns.Add("Exp MM", System.Type.GetType("System.String"));
            dtblII.Columns.Add("Exp DD", System.Type.GetType("System.String"));
            dtblII.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblII.Columns.Add("Description", System.Type.GetType("System.String"));
            dtblII.Columns.Add("ProductType", System.Type.GetType("System.String"));
            dtblII.Columns.Add("QtyOnHand", System.Type.GetType("System.String"));
            dtblII.Columns.Add("QtyOnLayaway", System.Type.GetType("System.String"));
            dtblII.Columns.Add("ReorderQty", System.Type.GetType("System.String"));
            dtblII.Columns.Add("NormalQty", System.Type.GetType("System.String"));

            PosDataObject.Closeout objCloseout3 = new PosDataObject.Closeout();
            objCloseout3.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblH = objCloseout3.ShowSalesExportHeader();
            foreach (DataRow dr in dtblH.Rows)
            {
                dtblSH.Rows.Add(new object[] {
                                            Settings.StoreCode,
                                            Settings.StoreName,
                                            DateTime.Now.Year.ToString(),
                                            DateTime.Now.Month.ToString(),
                                            DateTime.Now.Day.ToString(),
                                            dr["TaxedSales"].ToString(),
                                            dr["NonTaxedSales"].ToString(),
                                            dr["Tax1Exist"].ToString(),
                                            dr["Tax1Name"].ToString(),
                                            dr["Tax1Amount"].ToString(),
                                            dr["Tax2Exist"].ToString(),
                                            dr["Tax2Name"].ToString(),
                                            dr["Tax2Amount"].ToString(),
                                            dr["Tax3Exist"].ToString(),
                                            dr["Tax3Name"].ToString(),
                                            dr["Tax3Amount"].ToString(),
                                            dr["ServiceSales"].ToString(),
                                            dr["ProductSales"].ToString(),
                                            dr["OtherSales"].ToString(),
                                            dr["DiscountItemNo"].ToString(),
                                            dr["DiscountItemAmount"].ToString(),
                                            dr["DiscountInvoiceNo"].ToString(),
                                            dr["DiscountInvoiceAmount"].ToString(),
                                            dr["LayawayDeposits"].ToString(),
                                            dr["LayawayRefund"].ToString(),
                                            dr["LayawayPayment"].ToString(),
                                            dr["LayawaySalesPosted"].ToString(),
                                            dr["PaidOuts"].ToString(),
                                            dr["GCsold"].ToString(),
                                            dr["SCissued"].ToString(),
                                            dr["SCredeemed"].ToString(),
                                            dr["HACharged"].ToString(),
                                            dr["HApayments"].ToString(),
                                            dr["NoOfSales"].ToString(),
                                            dr["TotalSales_PreTax"].ToString(),
                                            dr["CostOfGoods"].ToString(),
                                            dr["ReturnItemNo"].ToString(),
                                            dr["ReturnItemAmount"].ToString()});
            }


            PosDataObject.Closeout objCloseout4 = new PosDataObject.Closeout();
            objCloseout4.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblT = objCloseout4.ShowSalesExportTender();
            foreach (DataRow dr1 in dtblT.Rows)
            {
                dtblST.Rows.Add(new object[] {
                                            Settings.StoreCode,
                                            Settings.StoreName,
                                            DateTime.Now.Year.ToString(),
                                            DateTime.Now.Month.ToString(),
                                            DateTime.Now.Day.ToString(),
                                            dr1["TenderName"].ToString(),
                                            dr1["TenderAmount"].ToString(),
                                            dr1["TenderCount"].ToString()});
            }

            PosDataObject.Closeout objCloseout5 = new PosDataObject.Closeout();
            objCloseout5.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblP = objCloseout5.ShowInventoryExport();
            foreach (DataRow dr2 in dtblP.Rows)
            {
                dtblII.Rows.Add(new object[] {
                                            Settings.StoreCode,
                                            Settings.StoreName,
                                            DateTime.Now.Year.ToString(),
                                            DateTime.Now.Month.ToString(),
                                            DateTime.Now.Day.ToString(),
                                            dr2["SKU"].ToString(),
                                            dr2["Description"].ToString(),
                                            dr2["ProductType"].ToString(),
                                            dr2["QtyOnHand"].ToString(),
                                            dr2["QtyOnLayaway"].ToString(),
                                            dr2["ReorderQty"].ToString(),
                                            dr2["NormalQty"].ToString()});
            }

            PosDataObject.Closeout objCloseout6 = new PosDataObject.Closeout();
            objCloseout6.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblE = objCloseout6.ShowEmployeeExport();
            foreach (DataRow dr3 in dtblE.Rows)
            {
                dtblET.Rows.Add(new object[] {
                                            Settings.StoreCode,
                                            Settings.StoreName,
                                            DateTime.Now.Year.ToString(),
                                            DateTime.Now.Month.ToString(),
                                            DateTime.Now.Day.ToString(),
                                            dr3["EmpID"].ToString(),
                                            dr3["EmployeeID"].ToString(),
                                            dr3["LastName"].ToString(),
                                            dr3["FirstName"].ToString(),
                                            dr3["ShiftID"].ToString(),
                                            dr3["ShiftName"].ToString(),
                                            dr3["StartTime"].ToString(),
                                            dr3["EndTime"].ToString(),
                                            dr3["ShiftDuration"].ToString(),
                                            dr3["DayStart"].ToString(),
                                            dr3["DayEnd"].ToString(),
                                            dr3["ShiftStartDate"].ToString(),
                                            dr3["ShiftEndDate"].ToString()});
            }

            if ((dtblSH.Rows.Count > 0) || (dtblST.Rows.Count > 0) || (dtblET.Rows.Count > 0) || (dtblII.Rows.Count > 0))
            {
                StreamWriter writer = new StreamWriter(strExportPath);
                StringBuilder builder = new StringBuilder();
                try
                {
                    int prevlength = 0;
                    string sepChar = "|";

                    string sep = "";
                    writer.WriteLine("***Sales Summary***");
                    /*if (chkColumn.Checked)
                    {

                        foreach (DataColumn dc in dtblSH.Columns)
                        {
                            builder.Append(sep).Append(dc.ColumnName);
                            sep = sepChar;
                        }
                        writer.WriteLine(builder.ToString());
                        prevlength = builder.Length;
                    }*/


                    foreach (DataRow drE in dtblSH.Rows)
                    {
                        sep = "";
                        //builder.Remove(0, builder.Length);
                        foreach (DataColumn dc1 in dtblSH.Columns)
                        {
                            builder.Append(sep).Append(drE[dc1.ColumnName]);
                            sep = sepChar;

                        }
                        writer.WriteLine(builder.ToString(prevlength, builder.Length - prevlength - 1));
                        prevlength = builder.Length;

                    }
                    writer.WriteLine("***Sales Summary***");
                    writer.WriteLine("***Sales Tender***");
                    /*if (chkColumn.Checked)
                    {
                        foreach (DataColumn dc2 in dtblST.Columns)
                        {
                            builder.Append(sep).Append(dc2.ColumnName);
                            sep = sepChar;
                        }
                        writer.WriteLine(builder.ToString(prevlength, builder.Length - prevlength));
                        prevlength = builder.Length;
                    }*/

                    foreach (DataRow drE1 in dtblST.Rows)
                    {
                        sep = "";
                        //builder.Remove(0, builder.Length);
                        foreach (DataColumn dc3 in dtblST.Columns)
                        {
                            builder.Append(sep).Append(drE1[dc3.ColumnName]);
                            sep = sepChar;

                        }
                        writer.WriteLine(builder.ToString(prevlength, builder.Length - prevlength));
                        prevlength = builder.Length;

                    }
                    writer.WriteLine("***Sales Tender***");
                    writer.WriteLine("***Employee***");
                    foreach (DataRow drE2 in dtblET.Rows)
                    {
                        sep = "";
                        //builder.Remove(0, builder.Length);
                        foreach (DataColumn dc4 in dtblET.Columns)
                        {
                            builder.Append(sep).Append(drE2[dc4.ColumnName]);
                            sep = sepChar;

                        }
                        writer.WriteLine(builder.ToString(prevlength, builder.Length - prevlength));
                        prevlength = builder.Length;
                    }
                    writer.WriteLine("***Employee***");
                    writer.WriteLine("***Inventory***");
                    foreach (DataRow drE3 in dtblII.Rows)
                    {
                        sep = "";
                        //builder.Remove(0, builder.Length);
                        foreach (DataColumn dc5 in dtblII.Columns)
                        {
                            builder.Append(sep).Append(drE3[dc5.ColumnName]);
                            sep = sepChar;

                        }
                        writer.WriteLine(builder.ToString(prevlength, builder.Length - prevlength));
                        prevlength = builder.Length;
                    }
                    writer.WriteLine("***Inventory***");
                    writer.Close();

                }
                catch
                {
                    rtn = 2;
                }
            }
            else
            {
                rtn = 1;
            }
            return rtn;
        }
        #endregion

        private static BitmapImage LoadImage(byte[] imageData)
        {
            if (imageData == null || imageData.Length == 0) return null;
            var image = new BitmapImage();
            using (var mem = new MemoryStream(imageData))
            {
                mem.Position = 0;
                image.BeginInit();
                image.CreateOptions = BitmapCreateOptions.PreservePixelFormat;
                image.CacheOption = BitmapCacheOption.OnLoad;
                image.UriSource = null;
                image.StreamSource = mem;
                image.EndInit();
            }
            image.Freeze();
            return image;
        }


        private void AdjustColumnsInRow(DataRow dr, TableCell tc1, TableCell tc2, TableCell tc3, TableRow tr)
        {
            if (dr["Cpos"].ToString().Trim() == "" && dr["Fpos"].ToString().Trim() == "")
            {
                tc1.ColumnSpan = 3;
                tr.Cells.Add(tc1);
            }
            else if (dr["Cpos"].ToString().Trim() == "")
            {
                tc1.ColumnSpan = 2;
                tr.Cells.Add(tc1);
                tr.Cells.Add(tc3);
            }
            else
            {
                tr.Cells.Add(tc1);
                tr.Cells.Add(tc2);
                tr.Cells.Add(tc3);
            }
        }
        private void CreateFlowControl()
        {
            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt") || (strPrintType == "Customer Label")
                || (strPrintType == "No Sale") || (strPrintType == "Paid Out") || (strPrintType == "Layaway")
                || (strPrintType == "Reprint Layaway") || (strPrintType == "Closeout") || (strPrintType == "WorkOrder")
                || (strPrintType == "Suspend Receipt") || (strPrintType == "Gift Receipt")
                || (strPrintType == "Rent Issue") || (strPrintType == "Return Rent Item")
                || (strPrintType == "Repair In") || (strPrintType == "Repair Deliver") || (strPrintType == "Lotto Payout")
                || (strPrintType == "Preview Invoice") || (strPrintType == "Paid In") || (strPrintType == "Safe Drop")
                || (strPrintType == "Gift Aid Receipt") || (strPrintType == "Preview Gift Aid Receipt"))
            {

                 int receiptWidth = 0;
                receiptWidth = T_Width;

                //if (Settings.GeneralReceiptPrint == "Y") receiptWidth = 450; else receiptWidth = 245 + SystemVariables.PageAdjustmentForPrint;

                float yPos = 0;
                int count = 0;
                float leftMargin = 0;
                float topMargin = 0;

                FlowDocument FDoc = new FlowDocument();
                FDoc.Background = System.Windows.Media.Brushes.White; //new SolidColorBrush((Color)ColorConverter.ConvertFromString("#344458")); 
                //FDoc.Foreground = System.Windows.Media.Brushes.White;
                FDoc.LineHeight = 1;
                FDoc.PageWidth = GeneralFunctions.fnDouble(receiptWidth);



                System.Windows.Media.FontFamily fontFamily = new System.Windows.Media.FontFamily("Arial");
                double fontDpiSize = 9;
                double fontHeight = Math.Ceiling(fontDpiSize * fontFamily.LineSpacing);
                int H = GeneralFunctions.fnInt32(fontHeight) + 1;

                int counter = 0;

                if (!FindNewTemplate)
                {
                    foreach (DataRow dr in dtblstrm.Rows)
                    {
                        ++counter;
                        if (counter > 112)
                        {

                        }
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDoc.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDoc.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(265 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDoc.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(350 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDoc.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(20 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(-70 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDoc.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                        {
                            byte[] byt = barcd.BinaryData;
                            BitmapImage bitmap = LoadImage(byt);

                            

                            BlockUIContainer bc = new BlockUIContainer();
                            //barcd.Visibility = System.Windows.Visibility.Visible;

                            StackPanel sp = new StackPanel();
                            sp.Width = 97;
                            sp.Height = 100;
                            sp.Orientation = Orientation.Horizontal;
                            sp.HorizontalAlignment = HorizontalAlignment.Center;
                            sp.Background = new SolidColorBrush(Colors.Transparent);

                            sp.Children.Add(barcd_run);
                            DevExpress.Xpf.Editors.BarCodeEdit br = new DevExpress.Xpf.Editors.BarCodeEdit();


                            bc.Child = sp;
                            FDoc.Blocks.Add(bc);
                            //FDocPrint.Blocks.Add(bc);

                        }
                        else
                        {
                            if (dr["param"].ToString() == "")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 11f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 11f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.ColumnSpan = 2;
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);

                                para3.FontSize = 11f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);

                            }
                            else
                            {
                                if ((dr["param"].ToString() == "logo") && (imglogoD.Source != null))
                                {

                                    imglogoD.Width = 90;
                                    imglogoD.Height = 90;
                                    imglogoD.Stretch = Stretch.Uniform;
                                    imglogoD.Margin = new Thickness(0, 0, 0, 0);



                                    Grid grid = new Grid();
                                    grid.Width = 90;
                                    grid.Height = 90;
                                    grid.Children.Add(imglogoD);

                                    BlockUIContainer bc = new BlockUIContainer();
                                    //barcd.Visibility = System.Windows.Visibility.Visible;

                                    StackPanel sp = new StackPanel();
                                    sp.Width = 90;
                                    sp.Height = 90;
                                    sp.Orientation = Orientation.Horizontal;
                                    sp.HorizontalAlignment = HorizontalAlignment.Center;
                                    sp.Background = new SolidColorBrush(Colors.Transparent);

                                    sp.Children.Add(grid);

                                    bc.Child = sp;
                                    FDoc.Blocks.Add(bc);
                                    //FDocPrint.Blocks.Add(bc);

                                }
                                else if (dr["param"].ToString() == "B")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDoc.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 12f;
                                    para1.FontWeight = FontWeights.Bold;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 12f;
                                    para2.FontWeight = FontWeights.Bold;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 12f;
                                    para3.FontWeight = FontWeights.Bold;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                                else if (dr["param"].ToString() == "s")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDoc.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 8.75f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 8.75f;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 8.75f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }

                                #region OldCode
                                /*
                                else if (dr["param"].ToString() == "OneColumn")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDoc.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 11f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);
                                    tc1.ColumnSpan = 3;

                                    tr.Cells.Add(tc1);

                                    trgrp.Rows.Add(tr);

                                }
                                else if (dr["param"].ToString() == "TwoOneColumn")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDoc.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 11f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);
                                    tc1.ColumnSpan = 2;

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 8.75f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);

                                    tr.Cells.Add(tc1);
                                    tr.Cells.Add(tc3);

                                    trgrp.Rows.Add(tr);

                                }
                                */
                                #endregion
                                else
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDoc.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 10f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 10f;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 10f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);

                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                            }
                        }

                        count++;
                    }
                }
                else
                {
                    foreach (DataRow dr in dtblstrm.Rows)
                    {
                        ++counter;
                        if (counter > 112)
                        {

                        }
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDoc.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDoc.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(265 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDoc.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(350 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDoc.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(20 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(-70 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDoc.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }

                        else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                        {
                            string palign = "";
                            string pstyle = "";
                            int pfont = 0;
                            int pcwidth = 0;
                            int pcheight = 0;

                            GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);


                            DevExpress.Xpf.Editors.BarCodeEdit barcd_dy = new DevExpress.Xpf.Editors.BarCodeEdit();
                            barcd_dy.Width = 180;
                            barcd_dy.Height = 48;
                            barcd_dy.Module = 2;
                            barcd_dy.ShowText = false;
                            DevExpress.Xpf.Editors.Code128StyleSettings code128 = new DevExpress.Xpf.Editors.Code128StyleSettings();
                            barcd_dy.StyleSettings = code128;
                            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt")
                                || (strPrintType == "Reprint Layaway") || (strPrintType == "Repair In")
                                || (strPrintType == "Repair Deliver") || (strPrintType == "Rent Issue")
                                || (strPrintType == "Return Rent Item") || (strPrintType == "Suspend Receipt")
                                || (strPrintType == "WorkOrder"))
                             {
                                barcd_dy.EditValue = intInvNo.ToString();
                             }
                            if ((strPrintType == "Layaway") || (strPrintType == "Reprint Layaway"))
                            {
                                string lno = "0";
                                foreach (DataRow drlay in dtblLayawayDtbl.Rows)
                                {
                                    lno = drlay["LAYAWAYNO"].ToString();
                                    break;
                                }
                                barcd_dy.EditValue = lno;
                            }



                                BlockUIContainer bc = new BlockUIContainer();
                            //barcd.Visibility = System.Windows.Visibility.Visible;

                            StackPanel sp = new StackPanel();
                            sp.Width = pcwidth;
                            sp.Height = pcheight;
                            sp.Orientation = Orientation.Horizontal;
                            sp.HorizontalAlignment = GetRowAlignment(palign);
                            sp.Background = new SolidColorBrush(Colors.Transparent);

                            sp.Children.Add(barcd_dy);
                            DevExpress.Xpf.Editors.BarCodeEdit br = new DevExpress.Xpf.Editors.BarCodeEdit();


                            bc.Child = sp;
                            FDoc.Blocks.Add(bc);
                            //FDocPrint.Blocks.Add(bc);

                        }
                        else
                        {
                            if ((dr["param"].ToString() == "Image") && (dr["paramnew"].ToString() == "Y"))
                            {
                                string palign = "";
                                string pstyle = "";
                                int pfont = 0;
                                int pcwidth = 0;
                                int pcheight = 0;
                                GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);

                                System.Windows.Controls.Image moreImage = new System.Windows.Controls.Image();
                                SetMoreImage(moreImage, GetMoreImage("Image", dr["Npos"].ToString()));


                                moreImage.Width = (float)pcwidth;
                                moreImage.Height = (float)pcheight;
                                moreImage.Stretch = Stretch.Uniform;
                                moreImage.Margin = new Thickness(0, 0, 0, 0);



                                Grid grid = new Grid();
                                grid.Width = (float)pcwidth;
                                grid.Height = (float)pcheight;
                                grid.Children.Add(moreImage);

                                BlockUIContainer bc = new BlockUIContainer();
                                //barcd.Visibility = System.Windows.Visibility.Visible;

                                StackPanel sp = new StackPanel();
                                sp.Width = (float)pcwidth;
                                sp.Height = (float)pcheight;
                                sp.Orientation = Orientation.Horizontal;

                                sp.HorizontalAlignment = GetRowAlignment(palign);
                                sp.Background = new SolidColorBrush(Colors.Transparent);

                                sp.Children.Add(grid);

                                bc.Child = sp;
                                FDoc.Blocks.Add(bc);
                            }
                            else if ((dr["param"].ToString() == "") && (dr["paramnew"].ToString() == "Y"))
                            {

                                string palign = "";
                                string pstyle = "";
                                int pfont = 0;
                                int pcwidth = 0;
                                int pcheight = 0;
                                GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);

                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();



                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = GetTextAlignment(palign);
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = GetFontSize(pfont);
                                SetTextStyle(para1, pstyle);
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);


                                tr.Cells.Add(tc1);
                                trgrp.Rows.Add(tr);

                            }
                            else if ((dr["param"].ToString() == "") && (dr["paramnew"].ToString() == ""))
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 11f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 11f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.ColumnSpan = 2;
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);

                                para3.FontSize = 11f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);

                            }
                            else
                            {
                                if ((dr["param"].ToString() == "logo"))
                                {
                                    System.Windows.Controls.Image imglogoDynamic = new System.Windows.Controls.Image();
                                    GeneralFunctions.LoadPhotofromDB("Logo", 0, imglogoDynamic);

                                    if (imglogoDynamic.Source != null)
                                    {
                                        string palign = "";
                                        string pstyle = "";
                                        int pfont = 0;
                                        int pcwidth = 0;
                                        int pcheight = 0;
                                        GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);
                                        imglogoDynamic.Width = (float)pcwidth;
                                        imglogoDynamic.Height = (float)pcheight;
                                        imglogoDynamic.Stretch = Stretch.Uniform;
                                        imglogoDynamic.Margin = new Thickness(0, 0, 0, 0);



                                        Grid grid = new Grid();
                                        grid.Width = (float)pcwidth;
                                        grid.Height = (float)pcheight;
                                        grid.Children.Add(imglogoDynamic);

                                        BlockUIContainer bc = new BlockUIContainer();
                                       
                                        StackPanel sp = new StackPanel();
                                        sp.Width = (float)pcwidth;
                                        sp.Height = (float)pcheight;
                                        sp.Orientation = Orientation.Horizontal;

                                        sp.HorizontalAlignment = GetRowAlignment(palign);
                                        sp.Background = new SolidColorBrush(Colors.Transparent);

                                        sp.Children.Add(grid);

                                        bc.Child = sp;
                                        FDoc.Blocks.Add(bc);
                                        //FDocPrint.Blocks.Add(bc);
                                    }

                                }
                                else if (dr["param"].ToString() == "B")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDoc.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 12f;
                                    para1.FontWeight = FontWeights.Bold;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 12f;
                                    para2.FontWeight = FontWeights.Bold;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 12f;
                                    para3.FontWeight = FontWeights.Bold;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                                else if (dr["param"].ToString() == "s")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDoc.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 8.75f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 8.75f;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 8.75f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                                else if (dr["param"].ToString() == "Header")
                                {

                                    string pstyle = "";
                                    int pfont = 0;

                                    string pcheckH1 = "";
                                    string pcheckH2 = "";
                                    string pcheckH3 = "";
                                    string pcaption1 = "";
                                    string pcaption2 = "";
                                    string pcaption3 = "";

                                    GetSeparateValueHeaderDetail(dr["paramvalue"].ToString(), ref pstyle, ref pfont,
                                       ref pcheckH1, ref pcheckH2, ref pcheckH3,
                                       ref pcaption1, ref pcaption2, ref pcaption3);

                                    if ((pcheckH1 == "Y") || (pcheckH2 == "Y") || (pcheckH2 == "Y"))
                                    {

                                        Table tab = new Table();
                                        tab.CellSpacing = 0;
                                        FDoc.Blocks.Add(tab);

                                        TableRowGroup trgrp = new TableRowGroup();
                                        tab.RowGroups.Add(trgrp);
                                        TableRow tr = new TableRow();

                                        TableCell tc1 = new TableCell();
                                        Paragraph para1 = new Paragraph();
                                        para1.TextAlignment = TextAlignment.Left;
                                        para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para1.FontSize = GetFontSize(pfont);
                                        para1.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para1, pstyle);
                                        para1.Inlines.Add(pcaption1);
                                        tc1.Blocks.Add(para1);

                                        TableCell tc2 = new TableCell();
                                        Paragraph para2 = new Paragraph();
                                        para2.TextAlignment = TextAlignment.Center;
                                        para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para2.FontSize = GetFontSize(pfont);
                                        para2.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para2, pstyle);
                                        para2.Inlines.Add(pcaption2);
                                        tc2.Blocks.Add(para2);

                                        TableCell tc3 = new TableCell();
                                        Paragraph para3 = new Paragraph();
                                        para3.TextAlignment = TextAlignment.Right;
                                        para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para3.FontSize = GetFontSize(pfont);
                                        para3.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para3, pstyle);
                                        para3.Inlines.Add(pcaption3);
                                        tc3.Blocks.Add(para3);


                                        if (pcheckH1 == "Y")
                                        {
                                            tr.Cells.Add(tc1);
                                        }
                                        if (pcheckH2 == "Y")
                                        {
                                            tr.Cells.Add(tc2);
                                        }
                                        if (pcheckH3 == "Y")
                                        {
                                            tr.Cells.Add(tc3);
                                        }

                                        trgrp.Rows.Add(tr);
                                    }


                                }
                                else if (dr["param"].ToString() == "Detail")
                                {

                                    string pstyle = "";
                                    int pfont = 0;

                                    string pcheckH1 = "";
                                    string pcheckH2 = "";
                                    string pcheckH3 = "";
                                    string pcaption1 = "";
                                    string pcaption2 = "";
                                    string pcaption3 = "";

                                    GetSeparateValueHeaderDetail(dr["paramvalue"].ToString(), ref pstyle, ref pfont,
                                       ref pcheckH1, ref pcheckH2, ref pcheckH3,
                                       ref pcaption1, ref pcaption2, ref pcaption3);

                                    if ((pcheckH1 == "Y") || (pcheckH2 == "Y") || (pcheckH2 == "Y"))
                                    {

                                        Table tab = new Table();
                                        tab.CellSpacing = 0;
                                        FDoc.Blocks.Add(tab);

                                        TableRowGroup trgrp = new TableRowGroup();
                                        tab.RowGroups.Add(trgrp);
                                        TableRow tr = new TableRow();

                                        TableCell tc1 = new TableCell();
                                        Paragraph para1 = new Paragraph();
                                        para1.TextAlignment = TextAlignment.Left;
                                        para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para1.FontSize = GetFontSize(pfont);
                                        para1.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para1, pstyle);
                                        para1.Inlines.Add(dr["Npos"].ToString());
                                        tc1.Blocks.Add(para1);

                                        TableCell tc2 = new TableCell();
                                        Paragraph para2 = new Paragraph();
                                        para2.TextAlignment = TextAlignment.Center;
                                        para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para2.FontSize = GetFontSize(pfont);
                                        para2.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para2, pstyle);
                                        para2.Inlines.Add(dr["Cpos"].ToString());
                                        tc2.Blocks.Add(para2);

                                        TableCell tc3 = new TableCell();
                                        Paragraph para3 = new Paragraph();
                                        para3.TextAlignment = TextAlignment.Right;
                                        para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para3.FontSize = GetFontSize(pfont);
                                        para3.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para3, pstyle);
                                        para3.Inlines.Add(dr["Fpos"].ToString());
                                        tc3.Blocks.Add(para3);


                                        if (pcheckH1 == "Y")
                                        {
                                            tr.Cells.Add(tc1);
                                        }
                                        if (pcheckH2 == "Y")
                                        {
                                            tr.Cells.Add(tc2);
                                        }
                                        if (pcheckH3 == "Y")
                                        {
                                            tr.Cells.Add(tc3);
                                        }

                                        trgrp.Rows.Add(tr);
                                    }


                                }
                                else if (dr["param"].ToString() == "Item")
                                {

                                    string pstyle = "";
                                    int pfont = 0;


                                    GetSeparateValueItem(dr["paramvalue"].ToString(), ref pstyle, ref pfont);

                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDoc.Blocks.Add(tab);

                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();

                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = GetFontSize(pfont);
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    SetTextStyle(para1, pstyle);
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    tr.Cells.Add(tc1);

                                    trgrp.Rows.Add(tr);


                                }

                                else
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDoc.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 10f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 10f;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 10f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);

                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                            }
                        }

                        count++;
                    }
                }

                printPCtrl.Document = FDoc;
                printPCtrl.Zoom = 120;

                //FVPrint.Document = FDocPrint;
                //FVPrint.Zoom = 120;
            }




            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt") || (strPrintType == "Customer Label")
                || (strPrintType == "No Sale") || (strPrintType == "Paid Out") || (strPrintType == "Layaway")
                || (strPrintType == "Reprint Layaway") || (strPrintType == "Closeout") || (strPrintType == "WorkOrder")
                || (strPrintType == "Suspend Receipt") || (strPrintType == "Gift Receipt")
                || (strPrintType == "Rent Issue") || (strPrintType == "Return Rent Item")
                || (strPrintType == "Repair In") || (strPrintType == "Repair Deliver") || (strPrintType == "Lotto Payout")
                || (strPrintType == "Preview Invoice") || (strPrintType == "Paid In") || (strPrintType == "Safe Drop")
                || (strPrintType == "Gift Aid Receipt") || (strPrintType == "Preview Gift Aid Receipt"))
            {

                int W = 0;

                if (Settings.GeneralReceiptPrint == "Y") W = 450; else W = 245 + SystemVariables.PageAdjustmentForPrint;

                float yPos = 0;
                int count = 0;
                float leftMargin = 0;
                float topMargin = 0;

                

                FlowDocument FDocPrint = new FlowDocument();
                FDocPrint.Background = System.Windows.Media.Brushes.White;
                FDocPrint.LineHeight = 1;
                FDocPrint.PageWidth = GeneralFunctions.fnDouble(W);

                System.Windows.Media.FontFamily fontFamily = new System.Windows.Media.FontFamily("Arial");
                double fontDpiSize = 9;
                double fontHeight = Math.Ceiling(fontDpiSize * fontFamily.LineSpacing);
                int H = GeneralFunctions.fnInt32(fontHeight) + 1;


                if (!FindNewTemplate)
                {
                    foreach (DataRow dr in dtblstrm.Rows)
                    {
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(265 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(350 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(20 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(-70 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                        {
                            byte[] byt = barcd.BinaryData;
                            BitmapImage bitmap = LoadImage(byt);



                            BlockUIContainer bc = new BlockUIContainer();
                            //barcd.Visibility = System.Windows.Visibility.Visible;

                            StackPanel sp = new StackPanel();
                            sp.Width = 97;
                            sp.Height = 100;
                            sp.Orientation = Orientation.Horizontal;
                            sp.HorizontalAlignment = HorizontalAlignment.Center;
                            sp.Background = new SolidColorBrush(Colors.Transparent);

                            sp.Children.Add(barcd_run_p);
                            DevExpress.Xpf.Editors.BarCodeEdit br = new DevExpress.Xpf.Editors.BarCodeEdit();


                            bc.Child = sp;
                            FDocPrint.Blocks.Add(bc);
                            //FDocPrint.Blocks.Add(bc);

                        }
                        else
                        {
                            if (dr["param"].ToString() == "")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDocPrint.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 11f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 11f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 11f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);

                            }
                            else
                            {

                                if ((dr["param"].ToString() == "logo") && (imglogo.Source != null))
                                {

                                    imglogo.Width = 90;
                                    imglogo.Height = 90;
                                    imglogo.Stretch = Stretch.Uniform;
                                    imglogo.Margin = new Thickness(0, 0, 0, 0);



                                    Grid grid = new Grid();
                                    grid.Width = 90;
                                    grid.Height = 90;
                                    grid.Children.Add(imglogo);

                                    BlockUIContainer bc = new BlockUIContainer();
                                    //barcd.Visibility = System.Windows.Visibility.Visible;

                                    StackPanel sp = new StackPanel();
                                    sp.Width = 90;
                                    sp.Height = 90;
                                    sp.Orientation = Orientation.Horizontal;
                                    sp.HorizontalAlignment = HorizontalAlignment.Center;
                                    sp.Background = new SolidColorBrush(Colors.Transparent);

                                    sp.Children.Add(grid);

                                    bc.Child = sp;
                                    FDocPrint.Blocks.Add(bc);
                                    //FDocPrint.Blocks.Add(bc);

                                }

                                else if (dr["param"].ToString() == "B")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 12f;
                                    para1.FontWeight = FontWeights.Bold;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 12f;
                                    para2.FontWeight = FontWeights.Bold;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 12f;
                                    para3.FontWeight = FontWeights.Bold;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                                else if (dr["param"].ToString() == "s")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();

                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 8.75f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 8.75f;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 8.75f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                                #region OldCode
                                /*
                                else if (dr["param"].ToString() == "OneColumn")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();

                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 11f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.ColumnSpan = 3;
                                    tc1.Blocks.Add(para1);


                                    tr.Cells.Add(tc1);

                                    trgrp.Rows.Add(tr);

                                }
                                else if (dr["param"].ToString() == "TwoOneColumn")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 11f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);


                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 8.75f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);

                                    tr.Cells.Add(tc1);
                                    tr.Cells.Add(tc3);

                                    trgrp.Rows.Add(tr);

                                }
                                */
                                #endregion
                                else
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 10f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 10f;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 10f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                            }
                        }

                        count++;
                    }
                }
                else
                {
                    foreach (DataRow dr in dtblstrm.Rows)
                    {
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(265 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(350 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(20 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(-70 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                        {
                            string palign = "";
                            string pstyle = "";
                            int pfont = 0;
                            int pcwidth = 0;
                            int pcheight = 0;

                            GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);


                            DevExpress.Xpf.Editors.BarCodeEdit barcd_dy = new DevExpress.Xpf.Editors.BarCodeEdit();
                            barcd_dy.Width = 180;
                            barcd_dy.Height = 48;
                            barcd_dy.Module = 2;
                            barcd_dy.ShowText = false;
                            DevExpress.Xpf.Editors.Code128StyleSettings code128 = new DevExpress.Xpf.Editors.Code128StyleSettings();
                            barcd_dy.StyleSettings = code128;
                            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt")
                                || (strPrintType == "Reprint Layaway") || (strPrintType == "Repair In")
                                || (strPrintType == "Repair Deliver") || (strPrintType == "Rent Issue")
                                || (strPrintType == "Return Rent Item") || (strPrintType == "Suspend Receipt")
                                || (strPrintType == "WorkOrder"))
                            {
                                barcd_dy.EditValue = intInvNo.ToString();
                            }
                            if ((strPrintType == "Layaway") || (strPrintType == "Reprint Layaway"))
                            {
                                string lno = "0";
                                foreach (DataRow drlay in dtblLayawayDtbl.Rows)
                                {
                                    lno = drlay["LAYAWAYNO"].ToString();
                                    break;
                                }
                                barcd_dy.EditValue = lno;
                            }



                            BlockUIContainer bc = new BlockUIContainer();
                            //barcd.Visibility = System.Windows.Visibility.Visible;

                            StackPanel sp = new StackPanel();
                            sp.Width = pcwidth;
                            sp.Height = pcheight;
                            sp.Orientation = Orientation.Horizontal;
                            sp.HorizontalAlignment = GetRowAlignment(palign);
                            sp.Background = new SolidColorBrush(Colors.Transparent);

                            sp.Children.Add(barcd_dy);
                            DevExpress.Xpf.Editors.BarCodeEdit br = new DevExpress.Xpf.Editors.BarCodeEdit();


                            bc.Child = sp;
                            FDocPrint.Blocks.Add(bc);
                            //FDocPrint.Blocks.Add(bc);

                        }
                        else
                        {
                            if ((dr["param"].ToString() == "Image") && (dr["paramnew"].ToString() == "Y"))
                            {
                                string palign = "";
                                string pstyle = "";
                                int pfont = 0;
                                int pcwidth = 0;
                                int pcheight = 0;
                                GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);

                                System.Windows.Controls.Image moreImage = new System.Windows.Controls.Image();
                                SetMoreImage(moreImage, GetMoreImage("Image", dr["Npos"].ToString()));


                                moreImage.Width = (float)pcwidth;
                                moreImage.Height = (float)pcheight;
                                moreImage.Stretch = Stretch.Uniform;
                                moreImage.Margin = new Thickness(0, 0, 0, 0);



                                Grid grid = new Grid();
                                grid.Width = (float)pcwidth;
                                grid.Height = (float)pcheight;
                                grid.Children.Add(moreImage);

                                BlockUIContainer bc = new BlockUIContainer();
                                //barcd.Visibility = System.Windows.Visibility.Visible;

                                StackPanel sp = new StackPanel();
                                sp.Width = (float)pcwidth;
                                sp.Height = (float)pcheight;
                                sp.Orientation = Orientation.Horizontal;

                                sp.HorizontalAlignment = GetRowAlignment(palign);
                                sp.Background = new SolidColorBrush(Colors.Transparent);

                                sp.Children.Add(grid);

                                bc.Child = sp;
                                FDocPrint.Blocks.Add(bc);
                            }
                            else if ((dr["param"].ToString() == "") && (dr["paramnew"].ToString() == "Y"))
                            {

                                string palign = "";
                                string pstyle = "";
                                int pfont = 0;
                                int pcwidth = 0;
                                int pcheight = 0;
                                GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);

                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();



                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = GetTextAlignment(palign);
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = GetFontSize(pfont);
                                SetTextStyle(para1, pstyle);
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);


                                tr.Cells.Add(tc1);
                                trgrp.Rows.Add(tr);

                            }
                            else if ((dr["param"].ToString() == "") && (dr["paramnew"].ToString() == ""))
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDocPrint.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 11f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 11f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.ColumnSpan = 2;
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);

                                para3.FontSize = 11f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);

                            }
                            else
                            {
                                if ((dr["param"].ToString() == "logo"))
                                {
                                    System.Windows.Controls.Image imglogoDynamic = new System.Windows.Controls.Image();
                                    GeneralFunctions.LoadPhotofromDB("Logo", 0, imglogoDynamic);

                                    if (imglogoDynamic.Source != null)
                                    {
                                        string palign = "";
                                        string pstyle = "";
                                        int pfont = 0;
                                        int pcwidth = 0;
                                        int pcheight = 0;
                                        GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);
                                        imglogoDynamic.Width = (float)pcwidth;
                                        imglogoDynamic.Height = (float)pcheight;
                                        imglogoDynamic.Stretch = Stretch.Uniform;
                                        imglogoDynamic.Margin = new Thickness(0, 0, 0, 0);



                                        Grid grid = new Grid();
                                        grid.Width = (float)pcwidth;
                                        grid.Height = (float)pcheight;
                                        grid.Children.Add(imglogoDynamic);

                                        BlockUIContainer bc = new BlockUIContainer();

                                        StackPanel sp = new StackPanel();
                                        sp.Width = (float)pcwidth;
                                        sp.Height = (float)pcheight;
                                        sp.Orientation = Orientation.Horizontal;

                                        sp.HorizontalAlignment = GetRowAlignment(palign);
                                        sp.Background = new SolidColorBrush(Colors.Transparent);

                                        sp.Children.Add(grid);

                                        bc.Child = sp;
                                        FDocPrint.Blocks.Add(bc);
                                        //FDocPrint.Blocks.Add(bc);
                                    }

                                }
                                else if (dr["param"].ToString() == "B")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 12f;
                                    para1.FontWeight = FontWeights.Bold;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 12f;
                                    para2.FontWeight = FontWeights.Bold;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 12f;
                                    para3.FontWeight = FontWeights.Bold;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                                else if (dr["param"].ToString() == "s")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 8.75f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 8.75f;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 8.75f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                                else if (dr["param"].ToString() == "Header")
                                {

                                    string pstyle = "";
                                    int pfont = 0;

                                    string pcheckH1 = "";
                                    string pcheckH2 = "";
                                    string pcheckH3 = "";
                                    string pcaption1 = "";
                                    string pcaption2 = "";
                                    string pcaption3 = "";

                                    GetSeparateValueHeaderDetail(dr["paramvalue"].ToString(), ref pstyle, ref pfont,
                                       ref pcheckH1, ref pcheckH2, ref pcheckH3,
                                       ref pcaption1, ref pcaption2, ref pcaption3);

                                    if ((pcheckH1 == "Y") || (pcheckH2 == "Y") || (pcheckH2 == "Y"))
                                    {

                                        Table tab = new Table();
                                        tab.CellSpacing = 0;
                                        FDocPrint.Blocks.Add(tab);

                                        TableRowGroup trgrp = new TableRowGroup();
                                        tab.RowGroups.Add(trgrp);
                                        TableRow tr = new TableRow();

                                        TableCell tc1 = new TableCell();
                                        Paragraph para1 = new Paragraph();
                                        para1.TextAlignment = TextAlignment.Left;
                                        para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para1.FontSize = GetFontSize(pfont);
                                        para1.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para1, pstyle);
                                        para1.Inlines.Add(pcaption1);
                                        tc1.Blocks.Add(para1);

                                        TableCell tc2 = new TableCell();
                                        Paragraph para2 = new Paragraph();
                                        para2.TextAlignment = TextAlignment.Center;
                                        para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para2.FontSize = GetFontSize(pfont);
                                        para2.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para2, pstyle);
                                        para2.Inlines.Add(pcaption2);
                                        tc2.Blocks.Add(para2);

                                        TableCell tc3 = new TableCell();
                                        Paragraph para3 = new Paragraph();
                                        para3.TextAlignment = TextAlignment.Right;
                                        para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para3.FontSize = GetFontSize(pfont);
                                        para3.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para3, pstyle);
                                        para3.Inlines.Add(pcaption3);
                                        tc3.Blocks.Add(para3);


                                        if (pcheckH1 == "Y")
                                        {
                                            tr.Cells.Add(tc1);
                                        }
                                        if (pcheckH2 == "Y")
                                        {
                                            tr.Cells.Add(tc2);
                                        }
                                        if (pcheckH3 == "Y")
                                        {
                                            tr.Cells.Add(tc3);
                                        }

                                        trgrp.Rows.Add(tr);
                                    }


                                }
                                else if (dr["param"].ToString() == "Detail")
                                {

                                    string pstyle = "";
                                    int pfont = 0;

                                    string pcheckH1 = "";
                                    string pcheckH2 = "";
                                    string pcheckH3 = "";
                                    string pcaption1 = "";
                                    string pcaption2 = "";
                                    string pcaption3 = "";

                                    GetSeparateValueHeaderDetail(dr["paramvalue"].ToString(), ref pstyle, ref pfont,
                                       ref pcheckH1, ref pcheckH2, ref pcheckH3,
                                       ref pcaption1, ref pcaption2, ref pcaption3);

                                    if ((pcheckH1 == "Y") || (pcheckH2 == "Y") || (pcheckH2 == "Y"))
                                    {

                                        Table tab = new Table();
                                        tab.CellSpacing = 0;
                                        FDocPrint.Blocks.Add(tab);

                                        TableRowGroup trgrp = new TableRowGroup();
                                        tab.RowGroups.Add(trgrp);
                                        TableRow tr = new TableRow();

                                        TableCell tc1 = new TableCell();
                                        Paragraph para1 = new Paragraph();
                                        para1.TextAlignment = TextAlignment.Left;
                                        para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para1.FontSize = GetFontSize(pfont);
                                        para1.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para1, pstyle);
                                        para1.Inlines.Add(dr["Npos"].ToString());
                                        tc1.Blocks.Add(para1);

                                        TableCell tc2 = new TableCell();
                                        Paragraph para2 = new Paragraph();
                                        para2.TextAlignment = TextAlignment.Center;
                                        para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para2.FontSize = GetFontSize(pfont);
                                        para2.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para2, pstyle);
                                        para2.Inlines.Add(dr["Cpos"].ToString());
                                        tc2.Blocks.Add(para2);

                                        TableCell tc3 = new TableCell();
                                        Paragraph para3 = new Paragraph();
                                        para3.TextAlignment = TextAlignment.Right;
                                        para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para3.FontSize = GetFontSize(pfont);
                                        para3.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para3, pstyle);
                                        para3.Inlines.Add(dr["Fpos"].ToString());
                                        tc3.Blocks.Add(para3);


                                        if (pcheckH1 == "Y")
                                        {
                                            tr.Cells.Add(tc1);
                                        }
                                        if (pcheckH2 == "Y")
                                        {
                                            tr.Cells.Add(tc2);
                                        }
                                        if (pcheckH3 == "Y")
                                        {
                                            tr.Cells.Add(tc3);
                                        }

                                        trgrp.Rows.Add(tr);
                                    }


                                }
                                else if (dr["param"].ToString() == "Item")
                                {

                                    string pstyle = "";
                                    int pfont = 0;


                                    GetSeparateValueItem(dr["paramvalue"].ToString(), ref pstyle, ref pfont);

                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);

                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();

                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = GetFontSize(pfont);
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    SetTextStyle(para1, pstyle);
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    tr.Cells.Add(tc1);

                                    trgrp.Rows.Add(tr);


                                }

                                else
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 10f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 10f;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 10f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);

                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                            }
                        }

                        count++;
                    }
                }

                

                FVPrint.Document = FDocPrint;
                FVPrint.Zoom = 120;

                
            }


        }


        private void CreateFlowControl1()
        {


            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt")
            || (strPrintType == "Layaway")
            || (strPrintType == "Reprint Layaway")
            || (strPrintType == "Repair In") || (strPrintType == "Repair Deliver"))
            {

                int W = 0;
                W = T_Width;
                //if (Settings.GeneralReceiptPrint == "Y") W = 450; else W = 245 + SystemVariables.PageAdjustmentForPrint;

                float yPos = 0;
                int count = 0;
                float leftMargin = 0;
                float topMargin = 0;



                FlowDocument FDocPrint = new FlowDocument();
                FDocPrint.Background = System.Windows.Media.Brushes.White;
                FDocPrint.LineHeight = 1;
                FDocPrint.PageWidth = GeneralFunctions.fnDouble(W);

                System.Windows.Media.FontFamily fontFamily = new System.Windows.Media.FontFamily("Arial");
                double fontDpiSize = 9;
                double fontHeight = Math.Ceiling(fontDpiSize * fontFamily.LineSpacing);
                int H = GeneralFunctions.fnInt32(fontHeight) + 1;

                if (!FindNewTemplate)
                {
                    foreach (DataRow dr in dtblstrm1.Rows)
                    {
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(265 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(350 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(20 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(-70 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                        {
                            byte[] byt = barcd.BinaryData;
                            BitmapImage bitmap = LoadImage(byt);



                            BlockUIContainer bc = new BlockUIContainer();
                            //barcd.Visibility = System.Windows.Visibility.Visible;

                            StackPanel sp = new StackPanel();
                            sp.Width = 97;
                            sp.Height = 100;
                            sp.Orientation = Orientation.Horizontal;
                            sp.HorizontalAlignment = HorizontalAlignment.Center;
                            sp.Background = new SolidColorBrush(Colors.Transparent);

                            sp.Children.Add(barcd_run_p1);
                            DevExpress.Xpf.Editors.BarCodeEdit br = new DevExpress.Xpf.Editors.BarCodeEdit();


                            bc.Child = sp;
                            FDocPrint.Blocks.Add(bc);
                            //FDocPrint.Blocks.Add(bc);

                        }
                        else
                        {
                            if (dr["param"].ToString() == "")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDocPrint.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 11f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 11f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 11f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);

                            }
                            else
                            {

                                if ((dr["param"].ToString() == "logo") && (imglogo1.Source != null))
                                {

                                    imglogo1.Width = 90;
                                    imglogo1.Height = 90;
                                    imglogo1.Stretch = Stretch.Uniform;
                                    imglogo1.Margin = new Thickness(0, 0, 0, 0);



                                    Grid grid = new Grid();
                                    grid.Width = 90;
                                    grid.Height = 90;
                                    grid.Children.Add(imglogo1);

                                    BlockUIContainer bc = new BlockUIContainer();
                                    //barcd.Visibility = System.Windows.Visibility.Visible;

                                    StackPanel sp = new StackPanel();
                                    sp.Width = 90;
                                    sp.Height = 90;
                                    sp.Orientation = Orientation.Horizontal;
                                    sp.HorizontalAlignment = HorizontalAlignment.Center;
                                    sp.Background = new SolidColorBrush(Colors.Transparent);

                                    sp.Children.Add(grid);

                                    bc.Child = sp;
                                    FDocPrint.Blocks.Add(bc);
                                    //FDocPrint.Blocks.Add(bc);

                                }

                                else if (dr["param"].ToString() == "B")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 12f;
                                    para1.FontWeight = FontWeights.Bold;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 12f;
                                    para2.FontWeight = FontWeights.Bold;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 12f;
                                    para3.FontWeight = FontWeights.Bold;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                                else if (dr["param"].ToString() == "s")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();

                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 8.75f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 8.75f;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 8.75f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                                #region OldCode
                                /*
                                else if (dr["param"].ToString() == "OneColumn")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();

                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 11f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.ColumnSpan = 3;
                                    tc1.Blocks.Add(para1);


                                    tr.Cells.Add(tc1);

                                    trgrp.Rows.Add(tr);

                                }
                                else if (dr["param"].ToString() == "TwoOneColumn")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 11f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);


                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 8.75f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);

                                    tr.Cells.Add(tc1);
                                    tr.Cells.Add(tc3);

                                    trgrp.Rows.Add(tr);

                                }
                                */
                                #endregion
                                else
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 10f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 10f;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 10f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);
                                }
                            }
                        }

                        count++;
                    }
                }
                else
                {
                    foreach (DataRow dr in dtblstrm1.Rows)
                    {
                        yPos = topMargin + (count * H);

                        if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(265 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(350 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                        {
                            Line pLine = new Line();
                            pLine.Stretch = Stretch.Fill;
                            pLine.Stroke = System.Windows.Media.Brushes.Black;
                            pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(20 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                            pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(-70 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                            pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                            DoubleCollection dashes = new DoubleCollection();
                            dashes.Add(2);
                            dashes.Add(2);
                            pLine.StrokeDashArray = dashes;
                            pLine.StrokeDashCap = PenLineCap.Round;

                            Paragraph pgph = new Paragraph();
                            pgph.Inlines.Add(pLine);

                            FDocPrint.Blocks.Add(pgph);
                            //FDocPrint.Blocks.Add(pgph);
                        }
                        else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                        {
                            string palign = "";
                            string pstyle = "";
                            int pfont = 0;
                            int pcwidth = 0;
                            int pcheight = 0;

                            GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);


                            DevExpress.Xpf.Editors.BarCodeEdit barcd_dy = new DevExpress.Xpf.Editors.BarCodeEdit();
                            barcd_dy.Width = 180;
                            barcd_dy.Height = 48;
                            barcd_dy.Module = 2;
                            barcd_dy.ShowText = false;
                            DevExpress.Xpf.Editors.Code128StyleSettings code128 = new DevExpress.Xpf.Editors.Code128StyleSettings();
                            barcd_dy.StyleSettings = code128;
                            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt")
                                || (strPrintType == "Reprint Layaway") || (strPrintType == "Repair In")
                                || (strPrintType == "Repair Deliver") || (strPrintType == "Rent Issue")
                                || (strPrintType == "Return Rent Item") || (strPrintType == "Suspend Receipt")
                                || (strPrintType == "WorkOrder"))
                            {
                                barcd_dy.EditValue = intInvNo.ToString();
                            }
                            if ((strPrintType == "Layaway") || (strPrintType == "Reprint Layaway"))
                            {
                                string lno = "0";
                                foreach (DataRow drlay in dtblLayawayDtbl.Rows)
                                {
                                    lno = drlay["LAYAWAYNO"].ToString();
                                    break;
                                }
                                barcd_dy.EditValue = lno;
                            }



                            BlockUIContainer bc = new BlockUIContainer();
                            //barcd.Visibility = System.Windows.Visibility.Visible;

                            StackPanel sp = new StackPanel();
                            sp.Width = pcwidth;
                            sp.Height = pcheight;
                            sp.Orientation = Orientation.Horizontal;
                            sp.HorizontalAlignment = GetRowAlignment(palign);
                            sp.Background = new SolidColorBrush(Colors.Transparent);

                            sp.Children.Add(barcd_dy);
                            DevExpress.Xpf.Editors.BarCodeEdit br = new DevExpress.Xpf.Editors.BarCodeEdit();


                            bc.Child = sp;
                            FDocPrint.Blocks.Add(bc);
                            //FDocPrint.Blocks.Add(bc);

                        }
                        else
                        {
                            if ((dr["param"].ToString() == "Image") && (dr["paramnew"].ToString() == "Y"))
                            {
                                string palign = "";
                                string pstyle = "";
                                int pfont = 0;
                                int pcwidth = 0;
                                int pcheight = 0;
                                GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);

                                System.Windows.Controls.Image moreImage = new System.Windows.Controls.Image();
                                SetMoreImage(moreImage, GetMoreImage("Image", dr["Npos"].ToString()));


                                moreImage.Width = (float)pcwidth;
                                moreImage.Height = (float)pcheight;
                                moreImage.Stretch = Stretch.Uniform;
                                moreImage.Margin = new Thickness(0, 0, 0, 0);



                                Grid grid = new Grid();
                                grid.Width = (float)pcwidth;
                                grid.Height = (float)pcheight;
                                grid.Children.Add(moreImage);

                                BlockUIContainer bc = new BlockUIContainer();
                                //barcd.Visibility = System.Windows.Visibility.Visible;

                                StackPanel sp = new StackPanel();
                                sp.Width = (float)pcwidth;
                                sp.Height = (float)pcheight;
                                sp.Orientation = Orientation.Horizontal;

                                sp.HorizontalAlignment = GetRowAlignment(palign);
                                sp.Background = new SolidColorBrush(Colors.Transparent);

                                sp.Children.Add(grid);

                                bc.Child = sp;
                                FDocPrint.Blocks.Add(bc);
                            }
                            else if ((dr["param"].ToString() == "") && (dr["paramnew"].ToString() == "Y"))
                            {

                                string palign = "";
                                string pstyle = "";
                                int pfont = 0;
                                int pcwidth = 0;
                                int pcheight = 0;
                                GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);

                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();



                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = GetTextAlignment(palign);
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = GetFontSize(pfont);
                                SetTextStyle(para1, pstyle);
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);


                                tr.Cells.Add(tc1);
                                trgrp.Rows.Add(tr);

                            }
                            else if ((dr["param"].ToString() == "") && (dr["paramnew"].ToString() == ""))
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDocPrint.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 11f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 11f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.ColumnSpan = 2;
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);

                                para3.FontSize = 11f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);

                            }


                            else
                            {
                                if (dr["param"].ToString() == "")
                                {
                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDocPrint.Blocks.Add(tab);
                                    //FDocPrint.Blocks.Add(tab);
                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();


                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = 11f;
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = 11f;
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.Margin = new Thickness(0, 0, 5, 0);
                                    para3.FontSize = 11f;
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                    trgrp.Rows.Add(tr);

                                }
                                else
                                {

                                    if ((dr["param"].ToString() == "logo"))
                                    {
                                        System.Windows.Controls.Image imglogoDynamic = new System.Windows.Controls.Image();
                                        GeneralFunctions.LoadPhotofromDB("Logo", 0, imglogoDynamic);

                                        if (imglogoDynamic.Source != null)
                                        {
                                            string palign = "";
                                            string pstyle = "";
                                            int pfont = 0;
                                            int pcwidth = 0;
                                            int pcheight = 0;
                                            GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);
                                            imglogoDynamic.Width = (float)pcwidth;
                                            imglogoDynamic.Height = (float)pcheight;
                                            imglogoDynamic.Stretch = Stretch.Uniform;
                                            imglogoDynamic.Margin = new Thickness(0, 0, 0, 0);



                                            Grid grid = new Grid();
                                            grid.Width = (float)pcwidth;
                                            grid.Height = (float)pcheight;
                                            grid.Children.Add(imglogoDynamic);

                                            BlockUIContainer bc = new BlockUIContainer();

                                            StackPanel sp = new StackPanel();
                                            sp.Width = (float)pcwidth;
                                            sp.Height = (float)pcheight;
                                            sp.Orientation = Orientation.Horizontal;

                                            sp.HorizontalAlignment = GetRowAlignment(palign);
                                            sp.Background = new SolidColorBrush(Colors.Transparent);

                                            sp.Children.Add(grid);

                                            bc.Child = sp;
                                            FDocPrint.Blocks.Add(bc);
                                            //FDocPrint.Blocks.Add(bc);
                                        }

                                    }

                                    else if (dr["param"].ToString() == "B")
                                    {
                                        Table tab = new Table();
                                        tab.CellSpacing = 0;
                                        FDocPrint.Blocks.Add(tab);
                                        //FDocPrint.Blocks.Add(tab);
                                        TableRowGroup trgrp = new TableRowGroup();
                                        tab.RowGroups.Add(trgrp);
                                        TableRow tr = new TableRow();


                                        TableCell tc1 = new TableCell();
                                        Paragraph para1 = new Paragraph();
                                        para1.TextAlignment = TextAlignment.Left;
                                        para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para1.FontSize = 12f;
                                        para1.FontWeight = FontWeights.Bold;
                                        para1.Foreground = System.Windows.Media.Brushes.Black;
                                        para1.Inlines.Add(dr["Npos"].ToString());
                                        tc1.Blocks.Add(para1);

                                        TableCell tc2 = new TableCell();
                                        Paragraph para2 = new Paragraph();
                                        para2.TextAlignment = TextAlignment.Center;
                                        para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para2.FontSize = 12f;
                                        para2.FontWeight = FontWeights.Bold;
                                        para2.Foreground = System.Windows.Media.Brushes.Black;
                                        para2.Inlines.Add(dr["Cpos"].ToString());
                                        tc2.Blocks.Add(para2);

                                        TableCell tc3 = new TableCell();
                                        Paragraph para3 = new Paragraph();
                                        para3.TextAlignment = TextAlignment.Right;
                                        para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para3.Margin = new Thickness(0, 0, 5, 0);
                                        para3.FontSize = 12f;
                                        para3.FontWeight = FontWeights.Bold;
                                        para3.Foreground = System.Windows.Media.Brushes.Black;
                                        para3.Inlines.Add(dr["Fpos"].ToString());
                                        tc3.Blocks.Add(para3);


                                        AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                        trgrp.Rows.Add(tr);
                                    }
                                    else if (dr["param"].ToString() == "s")
                                    {
                                        Table tab = new Table();
                                        tab.CellSpacing = 0;
                                        FDocPrint.Blocks.Add(tab);
                                        //FDocPrint.Blocks.Add(tab);
                                        TableRowGroup trgrp = new TableRowGroup();
                                        tab.RowGroups.Add(trgrp);
                                        TableRow tr = new TableRow();


                                        TableCell tc1 = new TableCell();

                                        Paragraph para1 = new Paragraph();
                                        para1.TextAlignment = TextAlignment.Left;
                                        para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para1.FontSize = 8.75f;
                                        para1.Foreground = System.Windows.Media.Brushes.Black;
                                        para1.Inlines.Add(dr["Npos"].ToString());
                                        tc1.Blocks.Add(para1);

                                        TableCell tc2 = new TableCell();
                                        Paragraph para2 = new Paragraph();
                                        para2.TextAlignment = TextAlignment.Center;
                                        para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para2.FontSize = 8.75f;
                                        para2.Foreground = System.Windows.Media.Brushes.Black;
                                        para2.Inlines.Add(dr["Cpos"].ToString());
                                        tc2.Blocks.Add(para2);

                                        TableCell tc3 = new TableCell();
                                        Paragraph para3 = new Paragraph();
                                        para3.TextAlignment = TextAlignment.Right;
                                        para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para3.Margin = new Thickness(0, 0, 5, 0);
                                        para3.FontSize = 8.75f;
                                        para3.Foreground = System.Windows.Media.Brushes.Black;
                                        para3.Inlines.Add(dr["Fpos"].ToString());
                                        tc3.Blocks.Add(para3);


                                        AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                        trgrp.Rows.Add(tr);
                                    }

                                    else if (dr["param"].ToString() == "Header")
                                    {

                                        string pstyle = "";
                                        int pfont = 0;

                                        string pcheckH1 = "";
                                        string pcheckH2 = "";
                                        string pcheckH3 = "";
                                        string pcaption1 = "";
                                        string pcaption2 = "";
                                        string pcaption3 = "";

                                        GetSeparateValueHeaderDetail(dr["paramvalue"].ToString(), ref pstyle, ref pfont,
                                           ref pcheckH1, ref pcheckH2, ref pcheckH3,
                                           ref pcaption1, ref pcaption2, ref pcaption3);

                                        if ((pcheckH1 == "Y") || (pcheckH2 == "Y") || (pcheckH2 == "Y"))
                                        {

                                            Table tab = new Table();
                                            tab.CellSpacing = 0;
                                            FDocPrint.Blocks.Add(tab);

                                            TableRowGroup trgrp = new TableRowGroup();
                                            tab.RowGroups.Add(trgrp);
                                            TableRow tr = new TableRow();

                                            TableCell tc1 = new TableCell();
                                            Paragraph para1 = new Paragraph();
                                            para1.TextAlignment = TextAlignment.Left;
                                            para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                            para1.FontSize = GetFontSize(pfont);
                                            para1.Foreground = System.Windows.Media.Brushes.Black;
                                            SetTextStyle(para1, pstyle);
                                            para1.Inlines.Add(pcaption1);
                                            tc1.Blocks.Add(para1);

                                            TableCell tc2 = new TableCell();
                                            Paragraph para2 = new Paragraph();
                                            para2.TextAlignment = TextAlignment.Center;
                                            para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                            para2.FontSize = GetFontSize(pfont);
                                            para2.Foreground = System.Windows.Media.Brushes.Black;
                                            SetTextStyle(para2, pstyle);
                                            para2.Inlines.Add(pcaption2);
                                            tc2.Blocks.Add(para2);

                                            TableCell tc3 = new TableCell();
                                            Paragraph para3 = new Paragraph();
                                            para3.TextAlignment = TextAlignment.Right;
                                            para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                            para3.FontSize = GetFontSize(pfont);
                                            para3.Foreground = System.Windows.Media.Brushes.Black;
                                            SetTextStyle(para3, pstyle);
                                            para3.Inlines.Add(pcaption3);
                                            tc3.Blocks.Add(para3);


                                            if (pcheckH1 == "Y")
                                            {
                                                tr.Cells.Add(tc1);
                                            }
                                            if (pcheckH2 == "Y")
                                            {
                                                tr.Cells.Add(tc2);
                                            }
                                            if (pcheckH3 == "Y")
                                            {
                                                tr.Cells.Add(tc3);
                                            }

                                            trgrp.Rows.Add(tr);
                                        }


                                    }
                                    else if (dr["param"].ToString() == "Detail")
                                    {

                                        string pstyle = "";
                                        int pfont = 0;

                                        string pcheckH1 = "";
                                        string pcheckH2 = "";
                                        string pcheckH3 = "";
                                        string pcaption1 = "";
                                        string pcaption2 = "";
                                        string pcaption3 = "";

                                        GetSeparateValueHeaderDetail(dr["paramvalue"].ToString(), ref pstyle, ref pfont,
                                           ref pcheckH1, ref pcheckH2, ref pcheckH3,
                                           ref pcaption1, ref pcaption2, ref pcaption3);

                                        if ((pcheckH1 == "Y") || (pcheckH2 == "Y") || (pcheckH2 == "Y"))
                                        {

                                            Table tab = new Table();
                                            tab.CellSpacing = 0;
                                            FDocPrint.Blocks.Add(tab);

                                            TableRowGroup trgrp = new TableRowGroup();
                                            tab.RowGroups.Add(trgrp);
                                            TableRow tr = new TableRow();

                                            TableCell tc1 = new TableCell();
                                            Paragraph para1 = new Paragraph();
                                            para1.TextAlignment = TextAlignment.Left;
                                            para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                            para1.FontSize = GetFontSize(pfont);
                                            para1.Foreground = System.Windows.Media.Brushes.Black;
                                            SetTextStyle(para1, pstyle);
                                            para1.Inlines.Add(dr["Npos"].ToString());
                                            tc1.Blocks.Add(para1);

                                            TableCell tc2 = new TableCell();
                                            Paragraph para2 = new Paragraph();
                                            para2.TextAlignment = TextAlignment.Center;
                                            para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                            para2.FontSize = GetFontSize(pfont);
                                            para2.Foreground = System.Windows.Media.Brushes.Black;
                                            SetTextStyle(para2, pstyle);
                                            para2.Inlines.Add(dr["Cpos"].ToString());
                                            tc2.Blocks.Add(para2);

                                            TableCell tc3 = new TableCell();
                                            Paragraph para3 = new Paragraph();
                                            para3.TextAlignment = TextAlignment.Right;
                                            para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                            para3.FontSize = GetFontSize(pfont);
                                            para3.Foreground = System.Windows.Media.Brushes.Black;
                                            SetTextStyle(para3, pstyle);
                                            para3.Inlines.Add(dr["Fpos"].ToString());
                                            tc3.Blocks.Add(para3);


                                            if (pcheckH1 == "Y")
                                            {
                                                tr.Cells.Add(tc1);
                                            }
                                            if (pcheckH2 == "Y")
                                            {
                                                tr.Cells.Add(tc2);
                                            }
                                            if (pcheckH3 == "Y")
                                            {
                                                tr.Cells.Add(tc3);
                                            }

                                            trgrp.Rows.Add(tr);
                                        }


                                    }
                                    else if (dr["param"].ToString() == "Item")
                                    {

                                        string pstyle = "";
                                        int pfont = 0;


                                        GetSeparateValueItem(dr["paramvalue"].ToString(), ref pstyle, ref pfont);

                                        Table tab = new Table();
                                        tab.CellSpacing = 0;
                                        FDocPrint.Blocks.Add(tab);

                                        TableRowGroup trgrp = new TableRowGroup();
                                        tab.RowGroups.Add(trgrp);
                                        TableRow tr = new TableRow();

                                        TableCell tc1 = new TableCell();
                                        Paragraph para1 = new Paragraph();
                                        para1.TextAlignment = TextAlignment.Left;
                                        para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para1.FontSize = GetFontSize(pfont);
                                        para1.Foreground = System.Windows.Media.Brushes.Black;
                                        SetTextStyle(para1, pstyle);
                                        para1.Inlines.Add(dr["Npos"].ToString());
                                        tc1.Blocks.Add(para1);

                                        tr.Cells.Add(tc1);

                                        trgrp.Rows.Add(tr);


                                    }

                                    else
                                    {
                                        Table tab = new Table();
                                        tab.CellSpacing = 0;
                                        FDocPrint.Blocks.Add(tab);
                                        //FDocPrint.Blocks.Add(tab);
                                        TableRowGroup trgrp = new TableRowGroup();
                                        tab.RowGroups.Add(trgrp);
                                        TableRow tr = new TableRow();


                                        TableCell tc1 = new TableCell();
                                        Paragraph para1 = new Paragraph();
                                        para1.TextAlignment = TextAlignment.Left;
                                        para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para1.FontSize = 10f;
                                        para1.Foreground = System.Windows.Media.Brushes.Black;
                                        para1.Inlines.Add(dr["Npos"].ToString());
                                        tc1.Blocks.Add(para1);

                                        TableCell tc2 = new TableCell();
                                        Paragraph para2 = new Paragraph();
                                        para2.TextAlignment = TextAlignment.Center;
                                        para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para2.FontSize = 10f;
                                        para2.Foreground = System.Windows.Media.Brushes.Black;
                                        para2.Inlines.Add(dr["Cpos"].ToString());
                                        tc2.Blocks.Add(para2);

                                        TableCell tc3 = new TableCell();
                                        Paragraph para3 = new Paragraph();
                                        para3.TextAlignment = TextAlignment.Right;
                                        para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                        para3.Margin = new Thickness(0, 0, 5, 0);
                                        para3.FontSize = 10f;
                                        para3.Foreground = System.Windows.Media.Brushes.Black;
                                        para3.Inlines.Add(dr["Fpos"].ToString());
                                        tc3.Blocks.Add(para3);


                                        AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                        trgrp.Rows.Add(tr);
                                    }
                                }
                            }

                            count++;
                        }
                    }
                }



                FVPrint1.Document = FDocPrint;
                FVPrint1.Zoom = 120;


            }


        }


        private void CreateFlowControl2()
        {


            if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt"))
            {

                int W = 0;
                W = T_Width;
                //if (Settings.GeneralReceiptPrint == "Y") W = 450; else W = 245 + SystemVariables.PageAdjustmentForPrint;

                float yPos = 0;
                int count = 0;
                float leftMargin = 0;
                float topMargin = 0;



                FlowDocument FDocPrint = new FlowDocument();
                FDocPrint.Background = System.Windows.Media.Brushes.White;
                FDocPrint.LineHeight = 1;
                FDocPrint.PageWidth = GeneralFunctions.fnDouble(W);

                System.Windows.Media.FontFamily fontFamily = new System.Windows.Media.FontFamily("Arial");
                double fontDpiSize = 9;
                double fontHeight = Math.Ceiling(fontDpiSize * fontFamily.LineSpacing);
                int H = GeneralFunctions.fnInt32(fontHeight) + 1;


                foreach (DataRow dr in dtblstrm2.Rows)
                {
                    yPos = topMargin + (count * H);

                    if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDocPrint.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDocPrint.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(265 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDocPrint.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(350 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDocPrint.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(20 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(-70 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDocPrint.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                    {
                        byte[] byt = barcd.BinaryData;
                        BitmapImage bitmap = LoadImage(byt);

                        
                        BlockUIContainer bc = new BlockUIContainer();
                        //barcd.Visibility = System.Windows.Visibility.Visible;

                        StackPanel sp = new StackPanel();
                        sp.Width = 97;
                        sp.Height = 100;
                        sp.Orientation = Orientation.Horizontal;
                        sp.HorizontalAlignment = HorizontalAlignment.Center;
                        sp.Background = new SolidColorBrush(Colors.Transparent);

                        sp.Children.Add(barcd_run_p2);
                        DevExpress.Xpf.Editors.BarCodeEdit br = new DevExpress.Xpf.Editors.BarCodeEdit();


                        bc.Child = sp;
                        FDocPrint.Blocks.Add(bc);
                        //FDocPrint.Blocks.Add(bc);

                    }
                    else
                    {
                        if (dr["param"].ToString() == "")
                        {
                            Table tab = new Table();
                            tab.CellSpacing = 0;
                            FDocPrint.Blocks.Add(tab);
                            //FDocPrint.Blocks.Add(tab);
                            TableRowGroup trgrp = new TableRowGroup();
                            tab.RowGroups.Add(trgrp);
                            TableRow tr = new TableRow();


                            TableCell tc1 = new TableCell();
                            Paragraph para1 = new Paragraph();
                            para1.TextAlignment = TextAlignment.Left;
                            para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                            para1.FontSize = 11f;
                            para1.Foreground = System.Windows.Media.Brushes.Black;
                            para1.Inlines.Add(dr["Npos"].ToString());
                            tc1.Blocks.Add(para1);

                            TableCell tc2 = new TableCell();
                            Paragraph para2 = new Paragraph();
                            para2.TextAlignment = TextAlignment.Center;
                            para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                            para2.FontSize = 11f;
                            para2.Foreground = System.Windows.Media.Brushes.Black;
                            para2.Inlines.Add(dr["Cpos"].ToString());
                            tc2.Blocks.Add(para2);

                            TableCell tc3 = new TableCell();
                            Paragraph para3 = new Paragraph();
                            para3.TextAlignment = TextAlignment.Right;
                            para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                            para3.Margin = new Thickness(0, 0, 5, 0);
                            para3.FontSize = 11f;
                            para3.Foreground = System.Windows.Media.Brushes.Black;
                            para3.Inlines.Add(dr["Fpos"].ToString());
                            tc3.Blocks.Add(para3);


                            AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                            trgrp.Rows.Add(tr);

                        }
                        else
                        {

                            if ((dr["param"].ToString() == "logo") && (imglogo2.Source != null))
                            {

                                imglogo2.Width = 90;
                                imglogo2.Height = 90;
                                imglogo2.Stretch = Stretch.Uniform;
                                imglogo2.Margin = new Thickness(0, 0, 0, 0);



                                Grid grid = new Grid();
                                grid.Width = 90;
                                grid.Height = 90;
                                grid.Children.Add(imglogo2);

                                BlockUIContainer bc = new BlockUIContainer();
                                //barcd.Visibility = System.Windows.Visibility.Visible;

                                StackPanel sp = new StackPanel();
                                sp.Width = 90;
                                sp.Height = 90;
                                sp.Orientation = Orientation.Horizontal;
                                sp.HorizontalAlignment = HorizontalAlignment.Center;
                                sp.Background = new SolidColorBrush(Colors.Transparent);

                                sp.Children.Add(grid);

                                bc.Child = sp;
                                FDocPrint.Blocks.Add(bc);
                                //FDocPrint.Blocks.Add(bc);

                            }

                            else if (dr["param"].ToString() == "B")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDocPrint.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 12f;
                                para1.FontWeight = FontWeights.Bold;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 12f;
                                para2.FontWeight = FontWeights.Bold;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 12f;
                                para3.FontWeight = FontWeights.Bold;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);
                            }
                            else if (dr["param"].ToString() == "s")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDocPrint.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();

                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 8.75f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 8.75f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 8.75f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);
                            }
                            #region OldCode
                            /*
                            else if (dr["param"].ToString() == "OneColumn")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();

                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 11f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.ColumnSpan = 3;
                                tc1.Blocks.Add(para1);


                                tr.Cells.Add(tc1);

                                trgrp.Rows.Add(tr);

                            }
                            else if (dr["param"].ToString() == "TwoOneColumn")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 11f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);


                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 8.75f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);

                                tr.Cells.Add(tc1);
                                tr.Cells.Add(tc3);

                                trgrp.Rows.Add(tr);

                            }
                            */
                            #endregion
                            else
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDocPrint.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 10f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 10f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 10f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);
                            }
                        }
                    }

                    count++;
                }




                FVPrint2.Document = FDocPrint;
                FVPrint2.Zoom = 120;


            }


        }


        #region Function for All New Template Customisation


        private string GetFotmatDoubleValueWithCurrency(double dbval)
        {
            string retstr = "";
            if (Settings.DecimalPlace == 3) retstr = dbval.ToString("f3");
            else retstr = dbval.ToString("f");
            if (dbval < 0) retstr = "(" + SystemVariables.CurrencySymbol + retstr.Remove(0, 1) + ")";
            else
                retstr = SystemVariables.CurrencySymbol + retstr;
            return retstr;
        }

        private void CheckForNewTemplate()
        {
            NewPrintCopy = 1;
            NewPrinterName = "";
            int printerID = 0;
            NewTemplateID = 0;
            NewTemplateSize = "";
            FindNewTemplate = false;
            T_Width = 270;
            NewTemplateLinkData = new DataTable();
            chrperline = 55;

            PosDataObject.ReceiptTemplate objsetup = new PosDataObject.ReceiptTemplate();
            objsetup.Connection = SystemVariables.Conn;
            objsetup.FetchTemplateHeaderInfoForPOSPrinting(strPrintType, ref NewTemplateID, ref NewTemplateSize,  ref NewPrintCopy);

            if (NewTemplateID > 0)
            {
                NewTemplateLinkData = objsetup.FetchLinkData(NewTemplateID);


                string TemplateType = "";

                if ((strPrintType == "Invoice") || (strPrintType == "Reprint Receipt"))
                {
                    TemplateType = "Receipt";
                }
                else if ((strPrintType == "Layaway") || (strPrintType == "Reprint Layaway"))
                {
                    TemplateType = "Layaway";
                }
                else if (strPrintType == "Rent Issue")
                {
                    TemplateType = "Rent Item Issue";
                }
                else if (strPrintType == "Return Rent Item")
                {
                    TemplateType = "Rent Item Return";
                }
                else if (strPrintType == "Repair In")
                {
                    TemplateType = "Repair Item Receive";
                }
                else if (strPrintType == "Repair Deliver")
                {
                    TemplateType = "Repair Item Return";
                }
                else
                {
                    TemplateType = strPrintType;
                }

                string localparm = "";
                if (TemplateType == "Receipt") localparm = "Custom Template Printer 1";
                if (TemplateType == "Layaway") localparm = "Custom Template Printer 2";
                if (TemplateType == "Rent Item Issue") localparm = "Custom Template Printer 3";
                if (TemplateType == "Rent Item Return") localparm = "Custom Template Printer 4";
                if (TemplateType == "Repair Item Receive") localparm = "Custom Template Printer 5";
                if (TemplateType == "Repair Item Return") localparm = "Custom Template Printer 6";
                if (TemplateType == "WorkOrder") localparm = "Custom Template Printer 7";
                if (TemplateType == "Suspend Receipt") localparm = "Custom Template Printer 8";
                if (TemplateType == "Closeout") localparm = "Custom Template Printer 9";
                if (TemplateType == "No Sale") localparm = "Custom Template Printer 10";
                if (TemplateType == "Paid Out") localparm = "Custom Template Printer 11";
                if (TemplateType == "Paid In") localparm = "Custom Template Printer 12";
                if (TemplateType == "Safe Drop") localparm = "Custom Template Printer 13";
                if (TemplateType == "Lotto Payout") localparm = "Custom Template Printer 14";
                if (TemplateType == "Customer Label") localparm = "Custom Template Printer 15";
                if (TemplateType == "Gift Receipt") localparm = "Custom Template Printer 16";
                if (TemplateType == "Gift Aid Receipt") localparm = "Custom Template Printer 17";

                NewPrinterName = objsetup.FetchPrinterName(localparm, Settings.TerminalName);
                if (NewTemplateLinkData.Rows.Count > 0)
                {
                    FindNewTemplate = true;
                    if (NewTemplateSize == "80 mm")
                    {
                        T_Width = 270 - SystemVariables.PageAdjustmentForPrint;
                        chrperline = 55;
                    }
                    else
                    {
                        T_Width = 196 - SystemVariables.PageAdjustmentForPrint; 
                        chrperline = 30;
                    }
                }

            }

        }

        private string FindTemplateParameterValueInDatatable(string paramdefination)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "'");
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextAlign"].ToString() + "|" + dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString() + "|" + dr["CtrlWidth"].ToString() + "|" + dr["CtrlHeight"].ToString();
            }
            return returnstring;
        }

        private string FindTemplateParameterValueInDatatable(string paramdefination, string sl)
        {
           
            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and SL = " + sl);
            foreach(DataRow dr in Drs)
            {
                returnstring = dr["TextAlign"].ToString() + "|" + dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString() + "|" + dr["CtrlWidth"].ToString() + "|" + dr["CtrlHeight"].ToString();
            }
            return returnstring;
        }

        private string FindTemplateParameterValueInDatatableForText(string paramdefination,string subslno)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and GroupSubSL = " + subslno);
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextAlign"].ToString() + "|" + dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString() + "|" + dr["CtrlWidth"].ToString() + "|" + dr["CtrlHeight"].ToString();
            }
            return returnstring;
        }

        private string FindTemplateParameterValueInDatatableForImage(string paramdefination, string subslno)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and GroupSubSL = " + subslno);
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextAlign"].ToString() + "|" + dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString() + "|" + dr["CtrlWidth"].ToString() + "|" + dr["CtrlHeight"].ToString();
            }
            return returnstring;
        }

        private byte[] GetMoreImage(string paramdefination, string subslno)
        {

            byte[] returnval = null;
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and GroupSubSL = " + subslno);
            foreach (DataRow dr in Drs)
            {
                returnval = (byte[])dr["CustomImage"];
            }
            return returnval;
        }

        private void SetMoreImage(System.Windows.Controls.Image imglogo, byte[] bytdata)
        {
            byte[] content = bytdata;
            try
            {
                // assign byte array data into memory stream 
                MemoryStream stream = new MemoryStream(content);

                // set transparent bitmap with 32 X 32 size by memory stream data 
                Bitmap b = new Bitmap(stream);
                Bitmap output = new Bitmap(b, new System.Drawing.Size(32, 32));
                output.MakeTransparent();

                System.Windows.Media.Imaging.BitmapImage bi = new System.Windows.Media.Imaging.BitmapImage();
                bi.BeginInit();
                System.Drawing.Image tempImage = (System.Drawing.Image)output;
                MemoryStream ms = new MemoryStream();
                tempImage.Save(ms, System.Drawing.Imaging.ImageFormat.Bmp);

                stream.Seek(0, SeekOrigin.Begin);

                bi.StreamSource = stream;

                bi.EndInit();

                imglogo.Source = bi;

            }
            catch (Exception ex)
            {
                imglogo.Source = null;
            }
        }

        private void GetSeparateValue(string pstring, ref string palign, ref string pstyle, ref int pfont, ref int pcwidth, ref int pcheight)
        {
            String[] splitstring = pstring.Split('|');
            int i = 0;
            foreach(string s in splitstring)
            {
                i++;
                if (i == 1) palign = s;
                if (i == 2) pstyle = s;
                if (i == 3) pfont = GeneralFunctions.fnInt32(s);
                if (i == 4) pcwidth = GeneralFunctions.fnInt32(s);
                if (i == 5) pcheight = GeneralFunctions.fnInt32(s);
            }
        }

        private System.Windows.HorizontalAlignment GetRowAlignment(string alignval)
        {
            if (alignval == "left") return HorizontalAlignment.Left;
            else if (alignval == "right") return HorizontalAlignment.Right;
            else return HorizontalAlignment.Center;
        }

        private System.Windows.TextAlignment GetTextAlignment(string alignval)
        {
            if (alignval == "left") return TextAlignment.Left;
            else if (alignval == "right") return TextAlignment.Right;
            else return TextAlignment.Center;
        }

        private void SetTextStyle(System.Windows.Documents.Paragraph para, string styleval)
        {
            if (styleval == "normal")
            {
                para.FontStyle = FontStyles.Normal;
            }
            if (styleval == "italic")
            {
                para.FontStyle = FontStyles.Italic;
            }
            if (styleval == "bold")
            {
                para.FontWeight = FontWeights.Bold;
            }
        }

        private double GetFontSize(int fsize)
        {
            if (fsize == 0) return 11f;
            else return (float)fsize;
        }


        private string FindTemplateParameterValueInDatatableOrderHeader(string paramdefination, string sl)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and SL = " + sl);
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString() + "|" + dr["ShowHeader1"].ToString() + "|" + dr["ShowHeader2"].ToString() + "|" + dr["ShowHeader3"].ToString()
                    + "|" + dr["Header1Caption"].ToString() + "|" + dr["Header2Caption"].ToString() + "|" + dr["Header3Caption"].ToString();
            }
            return returnstring;
        }


        private string FindTemplateParameterValueInDatatableOrderHeader1(string paramdefination)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "'");
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["ShowHeader1"].ToString() + "|" + dr["ShowHeader2"].ToString() + "|" + dr["ShowHeader3"].ToString();
            }
            return returnstring;
        }

        private string FindTemplateParameterValueInDatatableOrderDetail(string paramdefination, string sl)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and SL = " + sl);
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString();
            }
            return returnstring;
        }

        private void GetSeparateValueItem(string pstring, ref string pstyle, ref int pfont)
        {
            String[] splitstring = pstring.Split('|');
            int i = 0;
            foreach (string s in splitstring)
            {
                i++;

                if (i == 1) pstyle = s;
                if (i == 2) pfont = GeneralFunctions.fnInt32(s);

            }
        }

        private void GetSeparateValueHeaderDetail(string pstring, ref string pstyle, ref int pfont,
            ref string pcheckH1, ref string pcheckH2, ref string pcheckH3,
            ref string pcaption1, ref string pcaption2, ref string pcaption3)
        {
            String[] splitstring = pstring.Split('|');
            int i = 0;
            foreach (string s in splitstring)
            {
                i++;

                if (i == 1) pstyle = s;
                if (i == 2) pfont = GeneralFunctions.fnInt32(s);
                if (i == 3) pcheckH1 = s;
                if (i == 4) pcheckH2 = s;
                if (i == 5) pcheckH3 = s;
                if (i == 6) pcaption1 = s;
                if (i == 7) pcaption2 = s;
                if (i == 8) pcaption3 = s;
            }
        }


        private string FindTemplateParameterValueInDatatableOrderDetail1(string paramdefination)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "'");
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString();
            }
            return returnstring;
        }

        #endregion
    }
}