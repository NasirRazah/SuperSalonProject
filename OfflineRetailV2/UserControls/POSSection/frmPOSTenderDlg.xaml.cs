using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Editors.Settings;
using DevExpress.XtraReports.UI;
using OfflineRetailV2.Data;
using OfflineRetailV2.XeposExternal;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Threading;
using System.Xml;
using System.Text.RegularExpressions;
using DevExpress.Xpf.Printing;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using WebSocket4Net;
using System.Security.Authentication;
using System.Threading;
using System.Windows;


namespace OfflineRetailV2.UserControls.POSSection
{                                                                                        
    /// <summary>
    /// Interaction logic for frmPOSTenderDlg.xaml
    /// </summary>
    public partial class frmPOSTenderDlg : Window
    {
        int CurrentSelectionStart = 0;
        private string GiftAidFlag = "N";
        private int NewPrintCopy = 1;
        private string NewPrinterName = "";
        private int NewTemplateID = 0;
        private string NewTemplateSize = "";
        private bool FindNewTemplate = false;
        private int T_Width = 270;
        private DataTable NewTemplateLinkData = null;
        private int chrperline = 55;

        static ManualResetEvent manualResetEvent = new ManualResetEvent(false);

        private string ps_returnauthcode = "";
        private string ps_amt = "";
        private string ps_error = "";
        private string ps_transactionResult = "";
        private string ps_transactionNumber = "";
        private string ps_transactionId = "";
        private string ps_transactionType = "";
        private string ps_authCode = "";
        private string ps_cardSchemeName = "";
        private string ps_primaryAccountNumber = "";

        private int intSelectedReturnInvoiceNo;

        public int SelectedReturnInvoiceNo
        {
            get { return intSelectedReturnInvoiceNo; }
            set { intSelectedReturnInvoiceNo = value; }
        }

        private string ps_tid = "";
        private string ps_status = "";
        private string ps_currency = "";

        private bool boolPSTerminalAvailablity = false;

        private bool boolPSComplete = false;

        WebSocket wsoc;

        private DispatcherTimer timer1 = new DispatcherTimer()
        {
            Interval = new TimeSpan(0, 0, 1)
        };
        private bool boolInvoiceCreated = false;

        private volatile int watchr = 0;   // not used
        private FileSystemWatcher watcher; // not used

        private DataTable dtblTenderTypeForDisplay = null;

        #region Precidia Transaction Variables

        private bool blCG = false;
        private bool blCG1 = false;
        private bool blCG2 = false;
        private bool blCG3 = false;
        private bool blCG4 = false;
        private string CGresp_Cashbk = "";
        private double CG_Cashbk = 0;
        private string CGresp = "";
        private string CGresptxt = "";
        private string CGmonitor = "";
        private string CGrequestfile = "";
        private string CGanswerfile = "";

        private string CGcashback_R = "";
        private string CGcashback_A = "";

        private string CGsignature_R = "";
        private string CGsignature_A = "";

        private string CGgc_R = "";
        private string CGgc_A = "";
        private bool blCGgc = false;

        private string CGresp_signature = "";

        private string CGtrantype = "";
        private double CGamt = 0;
        private int CGinv = 0;

        private string PrecidiaRequestDisplayFile = "";
        private string PrecidiaResponseDisplayFile = "";
        private string PrecidiaDisplayResponse = "";
        private string PrecidiaDisplayResult = "";
        private string PrecidiaDisplayResultText = "";
        private int PrecidiaResponse = -1;
        private bool blPressManual = false;
        private bool PrecidiaSignature = true;
        private string PrecidiaLogFile = "";
        private string PrecidiaLogPath = "";
        private string PrecidiaErrorText = "";
        private string PrecidiaCashBack = "";

        private bool blForced2ReceiptsOnPrecidiaSignatureFailure = false;

        private string MercuryLogFile = "";
        private string MercuryLogPath = "";


        private string DatacapLogFile = "";
        private string DatacapLogPath = "";

        private string DatacapEMVLogFile = "";
        private string DatacapEMVLogPath = "";



        #endregion
                                                                                                 
        #region Datacap payment variables

        private string Dcap_TranType = "";
        private string Dcap_TranCode = "";
        private string Dcap_CardType = "";
        private double Dcap_CashBkAmt = 0;
        private double Dcap_TranAmt = 0;
        private double Dcap_AuthAmt = 0;
        private double Dcap_BalAmt = 0;
        private string Dcap_Sign = "";

        private string Dcap_CmdStatus = "";
        private string Dcap_TextResponse = "";
        private string Dcap_AcctNo = "";
        private string Dcap_Merchant = "";
        private string Dcap_AuthCode = "";
        private string Dcap_RefNo = "";
        private string Dcap_ProcessData = "";
        private string Dcap_RecordNo = "";
        private string Dcap_AcqRefData = "";
        private string Dcap_InvoiceNo = "";
        private string Dcap_PrintDraft = "";
        private int CallPadResetCount = 0;

        private string Dcap_PPAD_CmdStatus = "";
        private string Dcap_PPAD_TextResponse = "";

        #endregion

        #region POSLink payment variables

        private double POSLink_CashBack = 0;
        private string POSLink_ResultCode = "";
        private string POSLink_ResultTxt = "";
        private string POSLink_RefNum = "";
        private string POSLink_AuthCode = "";
        private string POSLink_CardType = "";
        private string POSLink_BogusAccountNum = "";
        private double POSLink_RequestedAmt = 0;
        private double POSLink_ApprovedAmt = 0;
        private double POSLink_RemainingBalance = 0;
        private double POSLink_ExtraBalance = 0;

        private string POSLinkLogFile = "";
        private string POSLinkLogPath = "";
        private string POSLinkSignPath = "";

        private string POSLinkLogFile_Test = "";
        private string POSLinkLogPath_Test = "";

        private bool boolPAXCashBack = false;

        #endregion


        #region Printing Variables

        private int lineptr = 0;
        private int linecnt = 0;
        private int lineptr1 = 0;
        private int linecnt1 = 0;
        private Font printFont;
        private DataTable dtblstrm = null;
        private DataTable dtblstrm1 = null;
        private DataTable dtblPrintData = null;

        private int prevPrinterID = 0;
        private string prevPrinterName = "";

        private int PrintOrderNo = 0;
        private Font f_title;
        private Font f_body;
        private Font f_footer;
        private int intPageCounter;

        #endregion

        #region Common Variables for assign Card Transaction Response


        private string AuthCode = "";
        private string TranID = "";
        private string CardNum = "";
        private string CardExMM = "";
        private string CardExYY = "";
        private string CardLogo = "";
        private string CardType = "";
        private string ApprovedAmt = "";
        private string RefNo = "";
        private string CardEntry = "";
        private string AcqRef = "";
        private string Token = "";
        private string MerchantID = "";
        private string MercuryProcessData = "";
        private string MercuryTextResponse = "";
        private double MercuryPurchaseAmount = 0;
        private string MercuryTranCode = "";
        private string MercuryResponseOrigin = "";
        private string MercuryRecordNo = "";
        private string MercuryResponseReturnCode = "";
        private string MercuryGiftCardBalance = "";
        private string PrecidiaFoodStampBalance = "";
        private string strMercuryMerchantID;

        #endregion

        #region forms and classes using this screen
        private SecondMonitor sm;
        private POSControl frm_POS;
        public POSControl calledfrm
        {
            get { return frm_POS; }
            set { frm_POS = value; }
        }
        #endregion



        #region Other Variables

        private bool bCancelClick = false;
        private double dblSubtotal = 0;
        private double dblDiscount = 0;
        private int intDTxID = 0;
        private double dblDTx = 0;
        private double dblFees = 0;
        private double dblFeesTax = 0;
        private double dblSpecialMixnMatch = 0;
        private double dblCoupon = 0;
        private double dblCouponPerc = 0;
        private double dblCouponApplicableTotal = 0;

        private double dblFeesCouponAmount = 0;
        private double dblFeesCouponPerc = 0;
        private double dblFeesCouponApplicableTotal = 0;
        private double dblFeesCouponTaxAmount = 0;

        private double dblNewSubtotal = 0;
        private double dblTax = 0;
        private double dblTotalsale = 0;
        private double dblTender = 0;
        private double dblBalance = 0;
        private double dblChange = 0;
        private string strDiscountReason = "";
        private double dblDiscountPercent = 0;
        private int intCustID;
        private string strTaxExempt;
        private int intTaxID1 = 0;
        private int intTaxID2 = 0;
        private int intTaxID3 = 0;
        private double dblTax1 = 0;
        private double dblTax2 = 0;
        private double dblTax3 = 0;
        private double dblGiftOldAmt = 0;
        private int intINV = 0;
        private int intSuspendInvoiceNo;
        private double dblLayawayAmt;
        private double dblLayawayTotalSale;
        private DateTime dtLayawayDateDue;
        private int PaidInOutTranId = 0;
        private int intLAYNO = 0;
        private int intLAYTRAN = 0;
        private int intCardTranID = 0;
        private int intEBTCardTranID = 0;
        private double dblStoreCr;
        private double dblCustAcctBalance;
        private double dblCustAcctLimit;
        private int intMaxInvNo;
        private int intSuperUserID;
        private string PrevPayTypeID;
        private string PrevPayTypeName;
        private int CustDTaxID;
        private string CustDTaxName;
        private double CustDTaxRate;
        private int CustDTaxType;
        private int intRepairInvoiceForDeposit = 0;
        private double dblBottleRefund = 0;
        private int tempMercuryGCCardID = 0;
        private double CustDTaxValue = 0;
        private string GCNO = "";
        private string GCSTORE = "";
        private string GCOPSTORE = "";
        private int CashTID = 0;
        private string CashTName = "";
        private string CashTDisplay = "";
        private string strServiceType = "Sales";
        private string sRentCalcFlag = "N";
        private double dblRentSecurityDeposit;
        private double dblRepairAdvance;
        private double dblRepairAmount;
        private double dblRepairDue;
        private double dblRepairTender;
        private int intIssueRentInvNo;
        private int intIssueRepairInvNo;

        private DataTable dtblWODatatbl;
        private DataTable dtblPOSDatatbl;
        private DataTable dtblTender = null;
        private DataTable dtblZeroStock = null;
        private DataTable dtblLayawayPayment;
        private DataTable dtblLayawayForInvoice = null;
        private DataTable pdtblForStockUpdate;
        private DataTable dtblRepairItemInfo;
        private DataTable cardidentityfromfastcc;
        private DataTable dtblFashCCTender;
        private DataTable dtblApptDatatbl;

        private bool blStoreCredit = false;
        private bool blProceed = false;
        private bool blFinalFlag;
        private bool blResumeTransaction;
        private bool blWorkOrderTransaction;
        private bool blGiftTender = false;
        private bool blGiftNew = false;
        private bool blGiftOld = false;
        private bool blExistCoupon = false;
        private bool blBottleRefund = false;
        private bool blFashCC;
        private bool blRepairDeposit = false;
        private bool blRepairIssued = false;
        private bool blRepairRecall = false;
        private bool blRentIssued = false;
        private bool blRentRecall = false;
        private bool blFunctionBtnAccess;
        private bool blAllowByAdmin = false;
        private bool blCardPayment = false;
        private bool blDatacapManualEntry = false;
        private bool blRepairPrint = false;
        private bool blHouseAccountPayment = false;
        private bool blFSTender = false;
        private bool blSale = false;
        private bool blReturnItem = false;
        private bool blNewLayaway = false;
        private bool blLayaway = false;
        private bool blLayawayRefund = false;
        private bool FoodStampTendering = false;
        private bool bl100percinvdiscount = false;

        private bool blCustomerOrdering = false;
        private int intCustomerOrderNo = 0;

        private DateTime dtCustomerDOB = Convert.ToDateTime(null);

        // Card Processing Related

        private bool blCardVarify = false;
        private bool blEBTVarify = false;
        private bool CheckEBTPayment = true;
        private bool CheckCardPayment = true;
        private bool CheckMercuryGCPayment = true;
        private bool blMercuryGiftCardIssue = false;
        private bool blMercuryGiftCardReload = false;
        private bool bMercuryGiftCardInsufficientBalance = false;
        private double dblMercuryGiftCardIssueValue = 0;
        private double dblMercuryGiftCardReloadValue = 0;
        private double TotalCashBack = 0;
        private DataTable cardidentity;
        private DataTable mgccardidentity;

        private bool MercuryCardPaymentCheck = false;

        #endregion



        #region Public Declaration

        public bool CustomerOrdering
        {
            get { return blCustomerOrdering; }
            set { blCustomerOrdering = value; }
        }

        public bool RepairDeposit
        {
            get { return blRepairDeposit; }
            set { blRepairDeposit = value; }
        }

        public int RepairInvoiceForDeposit
        {
            get { return intRepairInvoiceForDeposit; }
            set { intRepairInvoiceForDeposit = value; }
        }

        public DataTable dcardidentityfromfastcc
        {
            get { return cardidentityfromfastcc; }
            set { cardidentityfromfastcc = value; }
        }

        public bool ExistCoupon
        {
            get { return blExistCoupon; }
            set { blExistCoupon = value; }
        }

        public int CustomerOrderNo
        {
            get { return intCustomerOrderNo; }
            set { intCustomerOrderNo = value; }
        }

        public SecondMonitor Tsm
        {
            get { return sm; }
            set { sm = value; }
        }

        private bool blPaidout;
        private bool blPaidin;
        private bool blSafedrop;

        private string strPaidInOutExplanation;
        private double dblPaidInOutAmount;

        public string PaidInOutExplanation
        {
            get { return strPaidInOutExplanation; }
            set { strPaidInOutExplanation = value; }
        }

        public double PaidInOutAmount
        {
            get { return dblPaidInOutAmount; }
            set { dblPaidInOutAmount = value; }
        }

        public bool boolPaidout
        {
            get { return blPaidout; }
            set { blPaidout = value; }
        }

        public bool boolPaidin
        {
            get { return blPaidin; }
            set { blPaidin = value; }
        }

        public bool boolSafedrop
        {
            get { return blSafedrop; }
            set { blSafedrop = value; }
        }

        public DataTable dtlRepairItemInfo
        {
            get { return dtblRepairItemInfo; }
            set { dtblRepairItemInfo = value; }
        }

        public double RepairTender
        {
            get { return dblRepairTender; }
            set { dblRepairTender = value; }
        }

        public double RepairDue
        {
            get { return dblRepairDue; }
            set { dblRepairDue = value; }
        }

        public double RepairAmount
        {
            get { return dblRepairAmount; }
            set { dblRepairAmount = value; }
        }

        public double RepairAdvance
        {
            get { return dblRepairAdvance; }
            set { dblRepairAdvance = value; }
        }

        public bool RepairRecall
        {
            get { return blRepairRecall; }
            set { blRepairRecall = value; }
        }

        public bool RepairIssued
        {
            get { return blRepairIssued; }
            set { blRepairIssued = value; }
        }

        public int IssueRentInvNo
        {
            get { return intIssueRentInvNo; }
            set { intIssueRentInvNo = value; }
        }

        public int IssueRepairInvNo
        {
            get { return intIssueRepairInvNo; }
            set { intIssueRepairInvNo = value; }
        }

        public double RentSecurityDeposit
        {
            get { return dblRentSecurityDeposit; }
            set { dblRentSecurityDeposit = value; }
        }

        public bool RentRecall
        {
            get { return blRentRecall; }
            set { blRentRecall = value; }
        }

        public bool RentIssued
        {
            get { return blRentIssued; }
            set { blRentIssued = value; }
        }

        public string ServiceType
        {
            get { return strServiceType; }
            set { strServiceType = value; }
        }

        public int MaxInvNo
        {
            get { return intMaxInvNo; }
            set { intMaxInvNo = value; }
        }

        public double LayawayTotalSale
        {
            get { return dblLayawayTotalSale; }
            set { dblLayawayTotalSale = value; }
        }

        public double StoreCr
        {
            get { return dblStoreCr; }
            set { dblStoreCr = value; }
        }

        public double CustAcctBalance
        {
            get { return dblCustAcctBalance; }
            set { dblCustAcctBalance = value; }
        }

        public double CustAcctLimit
        {
            get { return dblCustAcctLimit; }
            set { dblCustAcctLimit = value; }
        }

        public DateTime LayawayDateDue
        {
            get { return dtLayawayDateDue; }
            set { dtLayawayDateDue = value; }
        }

        public bool Sale
        {
            get { return blSale; }
            set { blSale = value; }
        }

        public bool ReturnItem
        {
            get { return blReturnItem; }
            set { blReturnItem = value; }
        }

        public bool NewLayaway
        {
            get { return blNewLayaway; }
            set { blNewLayaway = value; }
        }

        public bool Layaway
        {
            get { return blLayaway; }
            set { blLayaway = value; }
        }

        public bool LayawayRefund
        {
            get { return blLayawayRefund; }
            set { blLayawayRefund = value; }
        }

        public bool ResumeTransaction
        {
            get { return blResumeTransaction; }
            set { blResumeTransaction = value; }
        }

        public bool WorkOrderTransaction
        {
            get { return blWorkOrderTransaction; }
            set { blWorkOrderTransaction = value; }
        }

        public double LayawayAmt
        {
            get { return dblLayawayAmt; }
            set { dblLayawayAmt = value; }
        }

        public int SuspendInvoiceNo
        {
            get { return intSuspendInvoiceNo; }
            set { intSuspendInvoiceNo = value; }
        }

        public DataTable POSDatatbl
        {
            get { return dtblPOSDatatbl; }
            set { dtblPOSDatatbl = value; }
        }

        public DataTable dtblForStockUpdate
        {
            get { return pdtblForStockUpdate; }
            set { pdtblForStockUpdate = value; }
        }

        public DataTable WODatatbl
        {
            get { return dtblWODatatbl; }
            set { dtblWODatatbl = value; }
        }

        public DataTable ApptDatatbl
        {
            get { return dtblApptDatatbl; }
            set { dtblApptDatatbl = value; }
        }

        public int CustID
        {
            get { return intCustID; }
            set { intCustID = value; }
        }

        public bool FinalFlag
        {
            get { return blFinalFlag; }
            set { blFinalFlag = value; }
        }

        public string TaxExempt
        {
            get { return strTaxExempt; }
            set { strTaxExempt = value; }
        }

        public DataTable LayawayPayment
        {
            get { return dtblLayawayPayment; }
            set { dtblLayawayPayment = value; }
        }

        public int SuperUserID
        {
            get { return intSuperUserID; }
            set { intSuperUserID = value; }
        }

        public bool FunctionBtnAccess
        {
            get { return blFunctionBtnAccess; }
            set { blFunctionBtnAccess = value; }
        }

        public string RentCalcFlag
        {
            get { return sRentCalcFlag; }
            set { sRentCalcFlag = value; }
        }

        public DataTable FashCCTender
        {
            get { return dtblFashCCTender; }
            set { dtblFashCCTender = value; }
        }

        public bool FashCC
        {
            get { return blFashCC; }
            set { blFashCC = value; }
        }

        public int TCustDTaxID
        {
            get { return CustDTaxID; }
            set { CustDTaxID = value; }
        }

        public int TCustDTaxType
        {
            get { return CustDTaxType; }
            set { CustDTaxType = value; }
        }

        public string TCustDTaxName
        {
            get { return CustDTaxName; }
            set { CustDTaxName = value; }
        }

        public double TCustDTaxRate
        {
            get { return CustDTaxRate; }
            set { CustDTaxRate = value; }
        }

        public double TCustDTaxValue
        {
            get { return CustDTaxValue; }
            set { CustDTaxValue = value; }
        }

        public DateTime CustomerDOB
        {
            get { return dtCustomerDOB; }
            set { dtCustomerDOB = value; }
        }

        public DataTable TenderTypeForDisplay { get { return dtblTenderTypeForDisplay; } }

        #endregion

        public frmPOSTenderDlg()
        {
            InitializeComponent();
            timer1.Tick += Timer1_Tick;

            gridView1.FocusedRowHandle = -1;
            ModalWindow.CloseCommand = new CommandBase(OnClose);
        }

        private void OnClose(object obj)
        {
            DialogResult = false;
            Close();
        }

        private void Timer1_Tick(object sender, EventArgs e)
        {
            lbTime.Text = DateTime.Now.ToShortTimeString();
        }

        private void gridView1_CalcRowHeight(object sender, DevExpress.XtraGrid.Views.Grid.RowHeightEventArgs e)
        {
            e.RowHeight = 40;
        }

        

        // Set decimal upto 2 or 3 digits ( deSystem.Drawing.Pending upon setup value )

        private void SetDecimalPlace()
        {
            if (Settings.DecimalPlace == 3)
            {
                colAmount.EditSettings = new TextEditSettings() { DisplayFormat = "f3", MaskType = MaskType.Numeric };
                colTaxAmount.EditSettings = new TextEditSettings() { DisplayFormat = "f3", MaskType = MaskType.Numeric };
                //numSubtotal.Decimals = 3;
                //numTax.Decimals = 3;
                //numTotalsale.Decimals = 3;
                //numDiscount.Decimals = 3;
                //numCoupon.Decimals = 3;
                //numTender.Decimals = 3;
                //numNewSubtotal.Decimals = 3;
                //numBalanceDue.Decimals = 3;
                //numChangeDue.Decimals = 3;
                //numAmount.Decimals = 3;
            }
            else
            {
                colAmount.EditSettings = new TextEditSettings() { DisplayFormat = "f", MaskType = MaskType.Numeric };
                colTaxAmount.EditSettings = new TextEditSettings() { DisplayFormat = "f", MaskType = MaskType.Numeric };
                //numSubtotal.Decimals = 2;
                //numTax.Decimals = 2;
                //numTotalsale.Decimals = 2;
                //numDiscount.Decimals = 2;
                //numCoupon.Decimals = 2;
                //numTender.Decimals = 2;
                //numNewSubtotal.Decimals = 2;
                //numBalanceDue.Decimals = 2;
                //numChangeDue.Decimals = 2;
                //numAmount.Decimals = 2;
            }
        }

        // Load the screen with detail amount info.
        System.Windows.Controls.Button btnPrecidiaManual = new System.Windows.Controls.Button();
        private void frmPOSTenderDlg_Load(object sender, RoutedEventArgs e)
        {
            Title.Text = Properties.Resources.Tender;
            lbPrecidiaErrorResponse.Visibility = Visibility.Collapsed;
            //posNumKeyBoard1.RearrangeForCalculatorStyle(Settings.CalculatorStyleKeyboard == "Y");--Sam

            /*if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
            {
                btnResetPIN.Visibility = Visibility.Visible;
            }*/

            /// Display Special Button deSystem.Drawing.Pending on Applicable Payment Gateway
            /// 

            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 7))
            {
                btnPrecidiaManual.Visibility = Visibility.Visible; //btnEscape.Visibility = Visibility.Visible;
            }

            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3))
            {
                btnPrecidiaManual.Visibility = Visibility.Visible; //btnEscape.Visibility = Visibility.Visible;
            }

            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 5) && (Settings.DatacapCardEntryMode == 0))
            {
                btnPrecidiaManual.Visibility = Visibility.Visible; //btnEscape.Visibility = Visibility.Visible;
            }

            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 6) && (Settings.DatacapEMVManual == "N"))
            {
                btnPrecidiaManual.Visibility = Visibility.Visible; //btnEscape.Visibility = Visibility.Visible;
            }

            if (Settings.CentralExportImport == "Y") GCOPSTORE = Settings.StoreCode;  // Set Gift Certificate Operational Store
            cardidentity = new DataTable();
            cardidentity.Columns.Add("CardID", System.Type.GetType("System.String"));
            if (cardidentityfromfastcc != null)
            {
                cardidentity = cardidentityfromfastcc;
            }
            mgccardidentity = new DataTable();
            mgccardidentity.Columns.Add("TranType", System.Type.GetType("System.String"));
            mgccardidentity.Columns.Add("CardID", System.Type.GetType("System.String"));

            timer1.Start();
            dtblTender = new DataTable();
            dtblTender.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("TENDER", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("DISPLAY", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("AMOUNT", System.Type.GetType("System.Double"));
            dtblTender.Columns.Add("GIFTCERTIFICATE", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("NEWGC", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("OLDGC", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("OLDGCAMT", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("CCTRANNO", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("GCSTORE", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("MANUAL", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("PROCESSCARD", System.Type.GetType("System.String"));
            dtblTender.Columns.Add("XeConnectID", System.Type.GetType("System.String"));
            grdTender.ItemsSource = dtblTender;

            dtblZeroStock = new DataTable();
            dtblZeroStock.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblZeroStock.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));

            dtblPrintData = new DataTable();
            dtblPrintData.Columns.Add("PrinterID", System.Type.GetType("System.String"));
            dtblPrintData.Columns.Add("Qty", System.Type.GetType("System.String"));
            dtblPrintData.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblPrintData.Columns.Add("Menu", System.Type.GetType("System.String"));
            dtblPrintData.Columns.Add("UniqueNo", System.Type.GetType("System.String"));

            dtblstrm = new DataTable();
            dtblstrm.Columns.Add("Npos", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("Cpos", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("Fpos", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("param", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("paramnew", System.Type.GetType("System.String"));
            dtblstrm.Columns.Add("paramvalue", System.Type.GetType("System.String"));

            dtblstrm.Columns.Add("SL", System.Type.GetType("System.String"));

            dtblstrm1 = new DataTable();
            dtblstrm1.Columns.Add("Npos", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("Cpos", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("Fpos", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("param", System.Type.GetType("System.String"));
            dtblstrm1.Columns.Add("SL", System.Type.GetType("System.String"));

            SetDecimalPlace();  // Set Decimal place to 2/3 digits



            //Todo: gridView1.OptionsSelection.EnableAppearanceFocusedCell = false;
            //gridView1.OptionsSelection.EnableAppearanceFocusedRow = false;
            //gridView1.OptionsSelection.EnableAppearanceHideSelection = false;

            //PrevPayTypeID = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridView1, colID);
            //PrevPayTySystem.Drawing.Pename = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, gridView1, colTender);

            if ((blPaidout) || (blPaidin) || (blSafedrop))
            {
                dblTotalsale = GeneralFunctions.FormatDouble(dblPaidInOutAmount);
            }
            else
            {
                if ((!blNewLayaway) && (!blLayaway) && (!blLayawayRefund) && ((!blRentRecall) || (blRentRecall && (sRentCalcFlag == "Y")))) SetInitialAmount();

                if ((blNewLayaway) || (blLayaway) || (blLayawayRefund)) dblTotalsale = GeneralFunctions.FormatDouble(dblLayawayAmt);
            }


            //if (blRepairRecall) dblTotalsale = GeneralFunctions.FormatDouble(dblRepairTender);

            if (blFashCC)
            {
                foreach (DataRow dr in dtblFashCCTender.Rows)
                {
                    dtblTender.Rows.Add(new object[] { dr["ID"].ToString(), dr["TENDER"].ToString(), dr["TENDER"].ToString(),
                                                       dr["AMOUNT"].ToString(),dr["GIFTCERTIFICATE"].ToString(),dr["NEWGC"].ToString(),
                                                       dr["OLDGC"].ToString(), dr["OLDGCAMT"].ToString(),dr["CCTRANNO"].ToString(),
                                                       dr["GCSTORE"].ToString(),"N","N","0"});
                }
                grdTender.ItemsSource = dtblTender;
            }

            ArrangeSettings();  // Calculate and Display Invoice Total, Tender Amount, Change Due Amount

            GetPOSCounterInfo(); // display looged user, current time etc.

            numAmount.SelectionLength = 0;
            GeneralFunctions.SetFocus(numAmount);
            //numAmount.SelectAll();

            // Pole Display

            if ((blReturnItem) || (blLayawayRefund) || (blRentRecall) || (dblTotalsale < 0))
            {
                frm_POS.DisplayPoleText(2, "N", "B", Properties.Resources.Return_Amount, (-dblBalance).ToString("#0.00"));
            }
            else
            {
                frm_POS.DisplayPoleText(2, "N", "B", Properties.Resources.Please_Pay, dblBalance.ToString("#0.00"));
            }

            GetCashTenderTypeData(); // Get Cash Tender Details 

            //if (CashTID == 0) pnlcurrency.Visibility = Visibility.Collapsed; --Sam

            if ((blReturnItem) || (blLayawayRefund) || (blRentRecall) || (dblTotalsale < 0))
            {
                int gettrannofromitem = 0;
                try
                {
                    foreach (DataRow drt in dtblPOSDatatbl.Rows)
                    {
                        gettrannofromitem = GetTranID(GeneralFunctions.fnInt32(drt["MATRIXOID"].ToString()));
                        break;
                    }
                }
                catch
                {
                }

                if (!IsEBTPayment(gettrannofromitem))
                {
                    CheckEBTPayment = false;
                }

                if (!IsCardPayment1(gettrannofromitem))
                {
                    CheckCardPayment = false;
                }

                if (!IsMercuryGCPayment(gettrannofromitem))
                {
                    CheckMercuryGCPayment = false;
                }

                //numAmount.IsReadOnly = true;
                //pnlcurrency.IsEnabled = false;
            }

            if (dtblPOSDatatbl != null)
            {
                try
                {
                    foreach (DataRow dr in dtblPOSDatatbl.Rows)
                    {
                        if ((dr["PRODUCTTYPE"].ToString() == "X") && (dr["PRODUCT"].ToString() == (Settings.PaymentGateway == 3 ? "Issue Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Issue Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "Issue POSLink Gift Card" : "Issue Mercury Gift Card")))))
                        {
                            blMercuryGiftCardIssue = true;
                            dblMercuryGiftCardIssueValue = dblMercuryGiftCardIssueValue + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
                        }
                    }

                    foreach (DataRow dr in dtblPOSDatatbl.Rows)
                    {
                        if ((dr["PRODUCTTYPE"].ToString() == "X") && (dr["PRODUCT"].ToString() == (Settings.PaymentGateway == 3 ? "Reload Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Reload Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "Reload POSLink Gift Card" : "Reload Mercury Gift Card")))))
                        {
                            blMercuryGiftCardReload = true;
                            dblMercuryGiftCardReloadValue = dblMercuryGiftCardReloadValue + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
                        }
                    }
                }
                catch
                {
                }
            }
            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                SecondMonitor.ClearWeightInfo();
                
                
                SecondMonitor.GoTenderScreen(GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1))), GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numRentDeposit.Text.Substring(numRentDeposit.Text.IndexOf(" ") + 1))));
            }

            if ((blExistCoupon) && (blReturnItem))
            {
                btnDiscount.Visibility = Visibility.Visible;
            }
            else
            {
                btnDiscount.Visibility = Visibility.Collapsed;
            }

            lbFS.Visibility = Visibility.Collapsed;
            if (Settings.ShowFoodStampTotal == "Y")
            {
                double val = 0;
                double tx = 0;
                try
                {
                    val = GetFoodStampAmount(ref tx);
                }
                catch
                {
                }

                if (val != 0)
                {
                    lbFS.Text = Properties.Resources.Food_Stamp_Total_ + GeneralFunctions.FormatDouble1(val);
                    lbFS.Visibility = Visibility.Visible;
                }
            }
            else
            {
                lbFS.Text = "";
            }

            if (blRentIssued || blRentRecall || blRepairDeposit || blRepairIssued || blRepairPrint || blRepairRecall)
            {
                btnPreview.Visibility = Visibility.Collapsed;
            }

            SetupQuickTendering();

            dtblTenderTypeForDisplay = new DataTable();
            dtblTenderTypeForDisplay.Columns.Add("SL", System.Type.GetType("System.Int32"));
            dtblTenderTypeForDisplay.Columns.Add("VISIBLE", System.Type.GetType("System.String"));
            dtblTenderTypeForDisplay.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblTenderTypeForDisplay.Columns.Add("Name", System.Type.GetType("System.String"));
            dtblTenderTypeForDisplay.Columns.Add("DisplayAs", System.Type.GetType("System.String"));

            PopulateTenderType();
            DisplayTenderType();
        }



        private void PopulateTenderType()
        {
            bool blf = true;
            if (Settings.POSCardPayment == "Y") if (Settings.PaymentGateway == 1) blf = false;
            if (Settings.POSCardPayment == "Y") if (Settings.PaymentGateway == 3) if (Settings.PrecidiaUsePINPad == "N") blf = false;
            PosDataObject.TenderTypes objTender = new PosDataObject.TenderTypes();
            objTender.Connection = new SqlConnection(SystemVariables.ConnectionString);
            DataTable dtblTenderType = new DataTable();
            if (Settings.POSCardPayment == "N")
            {
                dtblTenderType = objTender.FetchPOSData(blf);
            }
            else
            {
                if (Settings.PaymentGateway == 3)
                {
                    dtblTenderType = objTender.FetchPOSDataForPrecidia(blf);
                }
                else if (Settings.PaymentGateway == 2)
                {
                    dtblTenderType = objTender.FetchPOSDataForMercury();
                }
                else if (Settings.PaymentGateway == 5)
                {
                    dtblTenderType = objTender.FetchPOSDataForDatacap();
                }
                else if (Settings.PaymentGateway == 6)
                {
                    dtblTenderType = objTender.FetchPOSDataForDatacapEMV();
                }
                else if (Settings.PaymentGateway == 7)
                {
                    dtblTenderType = objTender.FetchPOSDataForPOSLink();
                }
                else
                {
                    dtblTenderType = objTender.FetchPOSData(blf);
                }
            }

            int i = 0;
            foreach (DataRow dr in dtblTenderType.Rows)
            {
                i++;
                if (i <= 6)
                {
                    dtblTenderTypeForDisplay.Rows.Add(new object[] { i, "Y", dr["ID"].ToString(), dr["Name"].ToString(), dr["DisplayAs"].ToString() });
                }
                else
                {
                    dtblTenderTypeForDisplay.Rows.Add(new object[] { i, "", dr["ID"].ToString(), dr["Name"].ToString(), dr["DisplayAs"].ToString() });
                }
            }

            dtblTenderType.Dispose();
        }

        private bool RearrangeTenderTypeBeforeDisplay(string pType)
        {
            int StartSL = 0;
            int EndSL = 0;
            bool blProcced = true;
            int intTotal = dtblTenderTypeForDisplay.Rows.Count;
            int iRequired = 0;
            int intLastSL = 0;
            int intFirstSL = 0;
            if (pType == "D")
            {
                foreach (DataRow dr in dtblTenderTypeForDisplay.Rows)
                {
                    if (dr["VISIBLE"].ToString() == "Y") intLastSL = GeneralFunctions.fnInt32(dr["SL"].ToString());
                }

                if (dtblTenderTypeForDisplay.Rows.Count == intLastSL)
                {
                    blProcced = false;
                }
                else
                {
                    blProcced = true;
                    if (intTotal - intLastSL < 6)
                    {
                        iRequired = 6 - (intTotal - intLastSL);
                    }

                    if (iRequired == 0)
                    {
                        StartSL = intLastSL + 1;
                        EndSL = intLastSL + 6;
                    }
                    else
                    {
                        StartSL = (intLastSL - iRequired) + 1;
                        EndSL = StartSL + 6;
                    }
                }

            }


            if (pType == "U")
            {
                foreach (DataRow dr in dtblTenderTypeForDisplay.Rows)
                {
                    if (dr["VISIBLE"].ToString() == "Y")
                    {
                        intFirstSL = GeneralFunctions.fnInt32(dr["SL"].ToString());
                        break;
                    }
                }

                if (intFirstSL == 1)
                {
                    blProcced = false;
                }
                else
                {
                    blProcced = true;

                    if (intFirstSL == 2)
                    {
                        iRequired = 5;
                    }
                    else if (intFirstSL == 3)
                    {
                        iRequired = 4;
                    }
                    else if (intFirstSL == 4)
                    {
                        iRequired = 3;
                    }
                    else if (intFirstSL == 5)
                    {
                        iRequired = 2;
                    }
                    else if (intFirstSL == 6)
                    {
                        iRequired = 1;
                    }
                    else
                    {
                        iRequired = 0;
                    }

                    if (iRequired == 0)
                    {
                        StartSL = intFirstSL - 6;
                        EndSL = intFirstSL - 6;
                    }
                    else
                    {
                        StartSL = 1;
                        EndSL = 6;
                    }
                }


            }

            if (blProcced)
            {
                foreach (DataRow dr in dtblTenderTypeForDisplay.Rows)
                {
                    if ((GeneralFunctions.fnInt32(dr["SL"].ToString()) == StartSL) ||
                        (GeneralFunctions.fnInt32(dr["SL"].ToString()) == StartSL + 1) ||
                        (GeneralFunctions.fnInt32(dr["SL"].ToString()) == StartSL + 2) ||
                        (GeneralFunctions.fnInt32(dr["SL"].ToString()) == StartSL + 3) ||
                        (GeneralFunctions.fnInt32(dr["SL"].ToString()) == StartSL + 4) ||
                        (GeneralFunctions.fnInt32(dr["SL"].ToString()) == StartSL + 5))
                    {
                        dr["VISIBLE"] = "Y";
                    }
                    else
                    {
                        dr["VISIBLE"] = "";
                    }
                }
            }

            return blProcced;

        }

        private void DisplayTenderType()
        {
            pnlTender.Children.Clear();
            int i = 0;
            int style = 0;
            foreach (DataRow dr in dtblTenderTypeForDisplay.Rows)
            {
                if (dr["VISIBLE"].ToString() == "") continue;
                i++;
                if (i == 5)
                {
                    style = 1;
                }
                else if (i == 6)
                {
                    style = 2;
                }
                else
                {
                    style = i;
                }
                System.Windows.Controls.Button btn = new System.Windows.Controls.Button();
                //btn.Height = 100;
                //btn.Width = 200;
                btn.Tag = dr["ID"].ToString() + "|" + dr["Name"].ToString();
                TextBlock tb = new TextBlock
                {
                    Text = dr["DisplayAs"].ToString().ToUpper(),
                    FontSize = 13f
                };

                
                btn.Content = tb;
                btn.Height = 80;
                btn.Margin = new Thickness(0, 9, 0, 9);
                btn.Style = this.FindResource("TenderButtonStyle" + style.ToString()) as Style;
                btn.FontFamily = this.FindResource("OSRegular") as System.Windows.Media.FontFamily;
                btn.Width = 130;
                btn.Click += new RoutedEventHandler(TenterType_Click);

                pnlTender.Children.Add(btn);
            }

        }

        System.Windows.Controls.Button btnPreview = new System.Windows.Controls.Button();
        System.Windows.Controls.Button btnDiscount = new System.Windows.Controls.Button();
        TextBlock lbFS = new TextBlock();

        private void SetupQuickTendering()
        {
            DataTable dtblQT = GeneralFunctions.GetQuickTenderingCurrencies_TenderScreen();

            if (dtblQT.Rows.Count == 0)
            {
                btnC1.Visibility = btnC2.Visibility = btnC3.Visibility = btnC4.Visibility = btnC5.Visibility = btnC6.Visibility = Visibility.Hidden;
            }
            else
            {
                int i = 0;
                foreach(DataRow dr in dtblQT.Rows)
                {
                    i++;
                    if (i == 1)
                    {
                        btnC1.Content = dr["CurrencyName"].ToString();
                        btnC1.Tag = dr["CurrencyValue"].ToString();
                    }

                    if (i == 2)
                    {
                        btnC2.Content = dr["CurrencyName"].ToString();
                        btnC2.Tag = dr["CurrencyValue"].ToString();
                    }

                    if (i == 3)
                    {
                        btnC3.Content = dr["CurrencyName"].ToString();
                        btnC3.Tag = dr["CurrencyValue"].ToString();
                    }

                    if (i == 4)
                    {
                        btnC4.Content = dr["CurrencyName"].ToString();
                        btnC4.Tag = dr["CurrencyValue"].ToString();
                    }

                    if (i == 5)
                    {
                        btnC5.Content = dr["CurrencyName"].ToString();
                        btnC5.Tag = dr["CurrencyValue"].ToString();
                    }

                    if (i == 6)
                    {
                        btnC6.Content = dr["CurrencyName"].ToString();
                        btnC6.Tag = dr["CurrencyValue"].ToString();
                    }

                }

                if (i == 1)
                {
                    btnC2.Visibility = btnC3.Visibility = btnC4.Visibility = btnC5.Visibility = btnC6.Visibility = Visibility.Hidden;
                }

                if (i == 2)
                {
                    btnC3.Visibility = btnC4.Visibility = btnC5.Visibility = btnC6.Visibility = Visibility.Hidden;
                }

                if (i == 3)
                {
                    btnC4.Visibility = btnC5.Visibility = btnC6.Visibility = Visibility.Hidden;
                }

                if (i == 4)
                {
                    btnC5.Visibility = btnC6.Visibility = Visibility.Hidden;
                }

                if (i == 5)
                {
                    btnC6.Visibility = Visibility.Hidden;
                }
            }


        }

        // assign Initial Amount into variables

        private void SetInitialAmount()
        {
            GetValue();
        }

        // Get Tax of a item

        private double GetTaxRate(int ProductID, double ApplicableAmount, string Qty)
        {
            DataTable dtblTax = new DataTable();
            double dblTax = 0;
            PosDataObject.Product objTax = new PosDataObject.Product();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);

            if (strServiceType == "Sales") dtblTax = objTax.ShowActiveTaxes(ProductID);
            if (strServiceType == "Rent") dtblTax = objTax.ShowActiveRentTaxes(ProductID);

            double tqty = 0;
            if (Qty == "")
            {
                tqty = 1;
            }
            else
            {
                tqty = GeneralFunctions.fnDouble(Qty);
            }

            foreach (DataRow drT in dtblTax.Rows)
            {

                if (drT["TaxRate"].ToString() != "")
                {
                    double tx = 0;
                    if (drT["TaxType"].ToString() == "0")
                    {
                        if (Settings.TaxInclusive == "N")
                        {
                            tx = (GeneralFunctions.fnDouble(drT["TaxRate"].ToString()) * ApplicableAmount) / 100;
                        }
                        else
                        {
                            //ApplicableAmount = GeneralFunctions.FormatDouble(ApplicableAmount / tqty);

                            double tempApplicableAmount = ApplicableAmount / ((100 + GeneralFunctions.fnDouble(drT["TaxRate"].ToString())) / 100);

                            tx = GeneralFunctions.FormatDouble(ApplicableAmount - tempApplicableAmount);
                        }
                    }
                    else
                    {
                        tx = GeneralFunctions.GetTaxFromTaxTable(GeneralFunctions.fnInt32(drT["TaxID"].ToString()), GeneralFunctions.fnDouble(drT["TaxRate"].ToString()), ApplicableAmount);
                    }
                    dblTax = dblTax + tx;
                }
            }
            dtblTax.Dispose();
            return dblTax;
        }

        // Check if nondiscountable item or not

        private bool IsNonDiscountableItem(int pID)
        {
            PosDataObject.POS ops = new PosDataObject.POS();
            ops.Connection = SystemVariables.Conn;
            return ops.IsNonDiscountableItem(pID);
        }

        // calcualte ticket discount

        private void CouponCalculation(DataTable dtbl, ref double resultAmount, ref double resultPerc, ref double TotAmount)
        {
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if ((dr["BUYNGETFREECATEGORY"].ToString() == "B") || (dr["BUYNGETFREECATEGORY"].ToString() == "F")) continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                TotAmount = TotAmount + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            double dpp = 0;
            double dAA = 0;
            double dp = 0;
            double dA = 0;
            double retamt = 0;
            resultAmount = 0;
            double AppAmount = 0;
            foreach (DataRow dr in dtbl.Rows)
            {
                dp = 0;
                dA = 0;
                AppAmount = 0;
                if (dr["PRODUCTTYPE"].ToString() != "C") continue;

                if (dr["DISCLOGIC"].ToString() == "P") dp = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());
                if (dr["DISCLOGIC"].ToString() == "A") dA = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());

                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;

                if (CheckIfRestrictedItem(GeneralFunctions.fnInt32(dr["ID"].ToString())))
                {
                    // discount calculation on restricted items
                    AppAmount = RestrictItemApplicableAmount(GeneralFunctions.fnInt32(dr["ID"].ToString()));

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    resultAmount = resultAmount + retamt;
                }
                else
                {
                    // discount calculation on all items

                    AppAmount = AllItemApplicableAmount();

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    resultAmount = resultAmount + retamt;
                }
            }

            if (TotAmount != 0) resultPerc = dpp + GeneralFunctions.fnDouble(dAA * 100 / TotAmount);
        }

        // calcualte Fees

        private void FeesCouponCalculation(DataTable dtbl, ref double resultAmount, ref double TxAmount)
        {
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() != "H") continue;
                resultAmount = resultAmount + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEES"].ToString()));
                TxAmount = TxAmount + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["FEESTAX"].ToString()));
            }

        }

        // check if Item is associated with any fees & charge

        private bool CheckIfRestrictedItem_Fees(int pID)
        {
            bool ret = false;
            PosDataObject.POS objps1 = new PosDataObject.POS();
            objps1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            ret = objps1.IsRestrictedFees(pID);
            return ret;
        }

        // Get fees & charge amount

        private double RestrictItemApplicableAmount_Fees(int DID)
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["FEESID"].ToString() != "0") continue;

                string chr = "N";
                PosDataObject.POS objp = new PosDataObject.POS();
                objp.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objp.IsApplicableForRestrictedFees(GeneralFunctions.fnInt32(dr["ID"].ToString()), DID, ref chr);
                if (chr == "Y") ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }

        // Get discount amount

        private double RestrictItemApplicableAmount(int DID)
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["DISCOUNTID"].ToString() != "0") continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                string chr = "N";
                PosDataObject.POS objp = new PosDataObject.POS();
                objp.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objp.IsApplicableForRestrictedDiscount(GeneralFunctions.fnInt32(dr["ID"].ToString()), DID, ref chr);
                if (chr == "Y") ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }

        // Mix and Match Calculation

        private void SpecialMixnMatchCalculation(DataTable dtbl, ref double resultAmount)
        {

            double dpp = 0;
            double dAA = 0;
            double dp = 0;
            double dA = 0;
            double retamt = 0;
            resultAmount = 0;
            double AppAmount = 0;
            foreach (DataRow dr in dtbl.Rows)
            {
                dp = 0;
                dA = 0;
                AppAmount = 0;
                if (dr["PRODUCTTYPE"].ToString() != "Z") continue;

                if (dr["DISCLOGIC"].ToString() == "P") dp = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());
                if (dr["DISCLOGIC"].ToString() == "A") dA = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());

                AppAmount = GeneralFunctions.fnDouble(dr["DTXRATE"].ToString());

                if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                {
                    retamt = (AppAmount * dp / 100) + dA;
                    dAA = dAA + dA;
                    dpp = dpp + dp;
                }
                resultAmount = resultAmount + retamt;
            }

        }

        /// get all discount applicable to the item

        private double AllItemApplicableAmount()
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["DISCOUNTID"].ToString() != "0") continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }

        // check if restricted discount applicable to the item or not 

        private bool CheckIfRestrictedItem(int pID)
        {
            bool ret = false;
            PosDataObject.POS objps1 = new PosDataObject.POS();
            objps1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            ret = objps1.IsRestrictedDiscount(pID);
            return ret;
        }

        // Calculate Total, Discount, Tax , Tender Amount

        private void GetValue()
        {
            FeesCouponCalculation(dtblPOSDatatbl, ref dblFeesCouponAmount, ref dblFeesCouponTaxAmount);
            CouponCalculation(dtblPOSDatatbl, ref dblCoupon, ref dblCouponPerc, ref dblCouponApplicableTotal);
            SpecialMixnMatchCalculation(dtblPOSDatatbl, ref dblSpecialMixnMatch);
            double dblST = 0;
            double dblTX = 0;
            double dblDTax = 0;
            double dblTXR = 0;
            double dblITEMDISC = 0;
            double rate = 0;
            double qty = 0;
            double renttime = 1;
            double dblFC = 0;
            double dblFCTx = 0;
            string strFQty = "N";
            foreach (DataRow drc in dtblPOSDatatbl.Rows)
            {
                bl100percinvdiscount = false;
                if (drc["PRODUCTTYPE"].ToString() != "C") continue;
                if (drc["PRODUCTTYPE"].ToString() != "H") continue;
                if (drc["PRODUCTTYPE"].ToString() == "Z") continue;
                if ((drc["DISCLOGIC"].ToString() == "P") && (GeneralFunctions.fnDouble(drc["DISCVALUE"].ToString()) == 100))
                {
                    bl100percinvdiscount = true;
                    break;
                }
            }

            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() == "C") continue;
                if (dr["PRODUCTTYPE"].ToString() == "H") continue;
                if (dr["PRODUCTTYPE"].ToString() == "Z") continue;
                if (dr["RATE"].ToString() == "") rate = 0; else rate = GeneralFunctions.fnDouble(dr["RATE"].ToString());
                if (dr["QTY"].ToString() == "") qty = 1; else qty = GeneralFunctions.fnDouble(dr["QTY"].ToString());
                if ((dr["RENTDURATION"].ToString() == "") || (dr["RENTDURATION"].ToString() == "0"))
                {
                    if ((blRentIssued) && (Settings.CalculateRentLater == "Y")) renttime = 0;
                    else renttime = 1;
                }
                else renttime = GeneralFunctions.fnDouble(dr["RENTDURATION"].ToString());

                if (dr["PRODUCTTYPE"].ToString() != "O")
                {
                    if (Settings.TaxInclusive == "N")
                    {
                        dblST = GeneralFunctions.FormatDouble(dblST + rate * qty * renttime);
                    }
                    else
                    {
                        dblST = GeneralFunctions.FormatDouble(dblST + rate * qty);
                    }
                }
                else
                {
                    dblST = GeneralFunctions.FormatDouble(dblST + GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                    blBottleRefund = true;
                }

                strFQty = dr["FEESQTY"].ToString();

                if (strFQty == "Y")
                {
                    if (!blReturnItem)
                    {
                        dblFC = GeneralFunctions.FormatDouble(dblFC + GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEES"].ToString())));
                        dblFCTx = GeneralFunctions.FormatDouble(dblFCTx + GeneralFunctions.FormatDouble(qty * GeneralFunctions.fnDouble(dr["FEESTAX"].ToString())));
                    }
                    else
                    {
                        dblFC = GeneralFunctions.FormatDouble(dblFC + GeneralFunctions.FormatDouble(-qty * GeneralFunctions.fnDouble(dr["FEES"].ToString())));
                        dblFCTx = GeneralFunctions.FormatDouble(dblFCTx + GeneralFunctions.FormatDouble(-qty * GeneralFunctions.fnDouble(dr["FEESTAX"].ToString())));
                    }
                }

                if (strFQty == "N")
                {
                    if (!blReturnItem)
                    {
                        dblFC = GeneralFunctions.FormatDouble(dblFC + GeneralFunctions.fnDouble(dr["FEES"].ToString()));
                        dblFCTx = GeneralFunctions.FormatDouble(dblFCTx + GeneralFunctions.fnDouble(dr["FEESTAX"].ToString()));
                    }
                    else
                    {
                        dblFC = GeneralFunctions.FormatDouble(dblFC - GeneralFunctions.fnDouble(dr["FEES"].ToString()));
                        dblFCTx = GeneralFunctions.FormatDouble(dblFCTx - GeneralFunctions.fnDouble(dr["FEESTAX"].ToString()));
                    }
                }

                if ((dr["PRODUCTTYPE"].ToString() != "G") && (dr["PRODUCTTYPE"].ToString() != "A") && (dr["PRODUCTTYPE"].ToString() != "C")
                    && (dr["PRODUCTTYPE"].ToString() != "Z") && (dr["PRODUCTTYPE"].ToString() != "H")
                    && (dr["PRODUCTTYPE"].ToString() != "X") && (dr["PRODUCTTYPE"].ToString() != "O"))
                {
                    if (strTaxExempt == "N")
                    {
                        if (!bl100percinvdiscount)
                        {
                            if (dr["PRODUCTTYPE"].ToString() != "B")
                            {
                                dblTX = dblTX + GetTaxRate(GeneralFunctions.fnInt32(dr["ID"].ToString()), Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString()), dr["QTY"].ToString()) * ((100 - dblCouponPerc) / 100);

                                if (strServiceType == "Sales")
                                {
                                    if (CustDTaxID > 0)
                                    {
                                        double tempDTax = 0;
                                        tempDTax = GetDTaxAmount(CustDTaxID, CustDTaxRate, CustDTaxType, GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                                        dblDTax = dblDTax + tempDTax;
                                        dblTX = dblTX + tempDTax;
                                    }
                                }
                            }
                            else
                            {
                                dblTXR = 0;
                                if (dr["TAXABLE1"].ToString() == "Y")
                                {
                                    double txtemp = 0;
                                    if (Settings.TaxInclusive == "N")
                                    {
                                        txtemp = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                    }
                                    else
                                    {
                                        //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                        double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString())) / 100);
                                        txtemp = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);

                                    }


                                    dblTXR = dblTXR + GeneralFunctions.FormatDouble(txtemp) * ((100 - dblCouponPerc) / 100);
                                }

                                if (dr["TAXABLE2"].ToString() == "Y")
                                {
                                    double txtemp = 0;
                                    if (Settings.TaxInclusive == "N")
                                    {
                                        txtemp = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                    }
                                    else
                                    {
                                        //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                        double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString())) / 100);
                                        txtemp = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);
                                    }


                                    dblTXR = dblTXR + GeneralFunctions.FormatDouble(txtemp) * ((100 - dblCouponPerc) / 100);
                                }

                                if (dr["TAXABLE3"].ToString() == "Y")
                                {
                                    double txtemp = 0;
                                    if (Settings.TaxInclusive == "N")
                                    {
                                        txtemp = GeneralFunctions.fnDouble((GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100);
                                    }
                                    else
                                    {
                                        //double unitAmount = GeneralFunctions.FormatDouble((Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["PRICE"].ToString()) : GeneralFunctions.fnDouble(dr["GPRICE"].ToString())) / qty);
                                        double tempApplicableAmount = GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) / ((100 + GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString())) / 100);
                                        txtemp = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["GPRICE"].ToString()) - tempApplicableAmount);
                                    }


                                    dblTXR = dblTXR + GeneralFunctions.FormatDouble(txtemp) * ((100 - dblCouponPerc) / 100);
                                }

                                /*
                                if (dr["TAXABLE2"].ToString() == "Y") dblTXR = dblTXR + GeneralFunctions.FormatDouble((GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100) * ((100 - dblCouponPerc) / 100);
                                if (dr["TAXABLE3"].ToString() == "Y") dblTXR = dblTXR + GeneralFunctions.FormatDouble((GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString()) * GeneralFunctions.fnDouble(dr["PRICE"].ToString())) / 100) * ((100 - dblCouponPerc) / 100);
                                 */
                                dblTX = dblTX + dblTXR;

                                if (strServiceType == "Sales")
                                {
                                    if (CustDTaxID > 0)
                                    {
                                        double tempDTax = 0;
                                        tempDTax = GetDTaxAmount(CustDTaxID, CustDTaxRate, CustDTaxType, GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                                        dblDTax = dblDTax + tempDTax;
                                        dblTX = dblTX + tempDTax;
                                    }
                                }
                            }

                        }

                    }
                    dblITEMDISC = GeneralFunctions.FormatDouble(dblITEMDISC + GeneralFunctions.fnDouble(dr["DISCOUNT"].ToString()));
                }
            }

            if (blReturnItem)
            {
                if (dblST >= 0)
                {
                    dblST = -dblST;
                }
            }

            dblSubtotal = dblST;

            dblDiscount = dblITEMDISC;
            dblTax = dblTX;
            dblFees = dblFC;
            dblFeesTax = dblFCTx;
            dblDTx = dblDTax;
        }

        // Display Tax Detail

        private void ShowTax()
        {

            if (strTaxExempt == "N")
            {
                DataTable dtblTax = new DataTable();
                DataTable dtblTax1 = new DataTable();
                dtblTax.Columns.Add("TAXID", System.Type.GetType("System.String"));
                dtblTax.Columns.Add("Tax", System.Type.GetType("System.String"));
                dtblTax.Columns.Add("Amount", System.Type.GetType("System.Double"));
                dtblTax.Columns.Add("DTax", System.Type.GetType("System.String"));

                double dblChangeTax = 0;
                double dblDiscountSum = 0;
                int intCountRow = dtblPOSDatatbl.Rows.Count;
                int intCountCRow = dtblPOSDatatbl.Rows.Count;

                foreach (DataRow dr in dtblPOSDatatbl.Rows)
                {
                    intCountCRow++;
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                        || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "X")
                        || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                        || (dr["PRODUCTTYPE"].ToString() == "H")) continue;


                    int intPID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                    double dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? dr["PRICE"].ToString() : dr["GPRICE"].ToString()));
                    if (intCountCRow != intCountRow)
                    {
                        dblPrice = GeneralFunctions.FormatDouble(dblPrice - (dblPrice * dblDiscountPercent / 100));
                        dblDiscountSum = GeneralFunctions.FormatDouble(dblDiscountSum + (dblPrice * dblDiscountPercent / 100));
                    }
                    else
                    {
                        dblPrice = GeneralFunctions.FormatDouble(dblDiscount - dblDiscountSum);
                    }

                    double dblQty = 0;

                    if (dr["QTY"].ToString() == "")
                    {
                        dblQty = 1;
                    }
                    else
                    {
                        dblQty = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["QTY"].ToString()));
                    }

                    if (GetFStamp(intPID) == "Y")
                    {
                        if (IsFSTenderApplicable()) continue;
                    }

                    double dblTaxR = 0;
                    PosDataObject.Product objTax = new PosDataObject.Product();
                    objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    if ((dr["PRODUCTTYPE"].ToString() != "B") && (dr["EDITF"].ToString() == "N"))
                    {
                        if ((strServiceType == "Sales") || (strServiceType == "Repair")) dtblTax1 = objTax.ShowActiveTaxes(intPID);
                        if (strServiceType == "Rent") dtblTax1 = objTax.ShowActiveRentTaxes(intPID);
                        //if (strServiceType == "Repair") dtblTax1 = objTax.ShowActiveRepairTaxes(intPID);
                    }
                    else
                    {
                        DataTable dtblTemp = new DataTable();
                        dtblTemp.Columns.Add("ID", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxID", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxType", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxName", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxRate", System.Type.GetType("System.String"));

                        double dblRate = 0.00;
                        string strTaxName = "";

                        if (dr["TAXABLE1"].ToString() == "Y")
                        {
                            if (dr["TAXRATE1"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString());
                            }
                            if (dr["TAXNAME1"].ToString() != "")
                            {
                                if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME1"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = dr["TAXNAME1"].ToString() + " (" + dblRate.ToString("f") + "%)";
                            }
                            else
                            {
                                string txnm = GetTaxName(GeneralFunctions.fnInt32(dr["TAXID1"].ToString()));
                                if (Settings.DecimalPlace == 3) strTaxName = txnm + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = txnm + " (" + dblRate.ToString("f") + "%)";
                            }

                            dtblTemp.Rows.Add(new object[] {
                                                "1",
                                                dr["TAXID1"].ToString(),
                                                dr["TX1TYPE"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE1"].ToString()});
                        }

                        if (dr["TAXABLE2"].ToString() == "Y")
                        {
                            if (dr["TAXRATE2"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString());
                            }

                            if (dr["TAXNAME2"].ToString() != "")
                            {
                                if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME2"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = dr["TAXNAME2"].ToString() + " (" + dblRate.ToString("f") + "%)";
                            }
                            else
                            {
                                string txnm = GetTaxName(GeneralFunctions.fnInt32(dr["TAXID2"].ToString()));
                                if (Settings.DecimalPlace == 3) strTaxName = txnm + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = txnm + " (" + dblRate.ToString("f") + "%)";
                            }

                            dtblTemp.Rows.Add(new object[] {
                                                "2",
                                                dr["TAXID2"].ToString(),
                                                dr["TX2TYPE"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE2"].ToString()});
                        }

                        if (dr["TAXABLE3"].ToString() == "Y")
                        {
                            if (dr["TAXRATE3"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString());
                            }

                            if (dr["TAXNAME3"].ToString() != "")
                            {
                                if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME3"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = dr["TAXNAME3"].ToString() + " (" + dblRate.ToString("f") + "%)";
                            }
                            else
                            {
                                string txnm = GetTaxName(GeneralFunctions.fnInt32(dr["TAXID3"].ToString()));
                                if (Settings.DecimalPlace == 3) strTaxName = txnm + " (" + dblRate.ToString("f3") + "%)";
                                else strTaxName = txnm + " (" + dblRate.ToString("f") + "%)";
                            }

                            dtblTemp.Rows.Add(new object[] {
                                                "3",
                                                dr["TAXID3"].ToString(),
                                                dr["TX3TYPE"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE3"].ToString()});
                        }
                        dtblTax1 = dtblTemp;
                        dtblTemp.Dispose();
                    }


                    DataTable dtblF = new DataTable();

                    dtblF.Columns.Add("ID", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxID", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxType", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxName", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("TaxRate", System.Type.GetType("System.String"));
                    dtblF.Columns.Add("DTax", System.Type.GetType("System.String"));




                    foreach (DataRow drt in dtblTax1.Rows)
                    {
                        dtblF.Rows.Add(new object[] { drt["ID"].ToString(),drt["TaxID"].ToString(),drt["TaxType"].ToString(),
                                                      drt["TaxName"].ToString(),drt["TaxRate"].ToString(),"N" });
                    }

                    if (strServiceType == "Sales")
                    {
                        if (CustDTaxID > 0)
                        {
                            dtblF.Rows.Add(new object[] { "4",CustDTaxID.ToString(),CustDTaxType.ToString(),
                                                      CustDTaxName.ToString(),CustDTaxRate.ToString(),"Y" });
                        }
                    }


                    foreach (DataRow drt in dtblF.Rows)
                    {
                        if (bl100percinvdiscount) continue;
                        bool blfinddata = false;
                        foreach (DataRow dr1 in dtblTax.Rows)
                        {
                            if ((dr1["TAXID"].ToString() == drt["TAXID"].ToString()) && (dr1["DTax"].ToString() == drt["DTax"].ToString()))
                            {
                                double tx = 0;
                                if (drt["TaxType"].ToString() == "0")
                                {
                                    if (Settings.TaxInclusive == "N")
                                    {
                                        tx = (GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice) / 100;
                                    }
                                    else
                                    {
                                        //dblPrice = GeneralFunctions.FormatDouble(dblPrice / dblQty);
                                        double tempApplicableAmount = dblPrice / ((100 + GeneralFunctions.fnDouble(drt["TaxRate"].ToString())) / 100);
                                        tx = GeneralFunctions.FormatDouble(dblPrice - tempApplicableAmount);
                                    }

                                }
                                else
                                {
                                    tx = GeneralFunctions.GetTaxFromTaxTable(GeneralFunctions.fnInt32(drt["TaxID"].ToString()), GeneralFunctions.fnDouble(drt["TaxRate"].ToString()), dblPrice);
                                }
                                dblChangeTax = dblChangeTax + GeneralFunctions.fnDouble(tx * ((100 - dblCouponPerc) / 100));
                                double prevtax = GeneralFunctions.fnDouble(dr1["Amount"].ToString());
                                double dblRate = tx * ((100 - dblCouponPerc) / 100);
                                dr1["Amount"] = Convert.ToString(prevtax + dblRate);
                                blfinddata = true;
                                break;
                            }
                        }
                        if (!blfinddata)
                        {
                            double tx = 0;
                            if (drt["TaxType"].ToString() == "0")
                            {
                                if (Settings.TaxInclusive == "N")
                                {
                                    tx = (GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice) / 100;
                                }
                                else
                                {
                                    //dblPrice = GeneralFunctions.FormatDouble(dblPrice / dblQty);

                                    double tempApplicableAmount = dblPrice / ((100 + GeneralFunctions.fnDouble(drt["TaxRate"].ToString())) / 100);
                                    tx = GeneralFunctions.FormatDouble(dblPrice - tempApplicableAmount);
                                }
                            }
                            else
                            {
                                tx = GeneralFunctions.GetTaxFromTaxTable(GeneralFunctions.fnInt32(drt["TaxID"].ToString()), GeneralFunctions.fnDouble(drt["TaxRate"].ToString()), dblPrice);
                            }

                            dtblTax.Rows.Add(new object[] { drt["TAXID"].ToString(), drt["TaxName"].ToString(), GeneralFunctions.fnDouble(tx * (100 - dblCouponPerc) / 100),
                                                            drt["DTax"].ToString()});
                            dblChangeTax = dblChangeTax + (tx * ((100 - dblCouponPerc) / 100));
                        }
                    }
                }
                dtblTax.DefaultView.Sort = "DTax asc";
                dtblTax.DefaultView.ApplyDefaultSort = true;

                grdTax.ItemsSource = dtblTax;
                dtblTax1.Dispose();
                dtblTax.Dispose();
                dblTax = dblChangeTax;


                /* Adjust decimal */

                double tgrdval = 0;

                foreach (DataRow dr in (grdTax.ItemsSource as DataTable).Rows)
                {
                    tgrdval = tgrdval + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["Amount"].ToString()));
                }

                if (tgrdval != GeneralFunctions.FormatDouble(dblTax))
                {
                    double divval = GeneralFunctions.FormatDouble(dblTax) - tgrdval;

                    DataTable dtb = grdTax.ItemsSource as DataTable;
                    int cnt = dtb.Rows.Count;
                    int i = 0;

                    foreach (DataRow dr in dtb.Rows)
                    {
                        i++;
                        if (i == cnt)
                        {
                            dr["Amount"] = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["Amount"].ToString())) + divval;
                        }
                    }

                    grdTax.ItemsSource = dtb;

                    dtb.Dispose();
                }
            }
        }

        private string GetTaxName(int pTxID)
        {
            PosDataObject.Tax objtx = new PosDataObject.Tax();
            objtx.Connection = SystemVariables.Conn;
            return objtx.GetTaxName(pTxID);
        }

        // Get tax for Repair

        private double GetTaxForRepair()
        {
            double dblChangeTax = 0;
            grdTax.Visibility = Visibility.Collapsed;
            if (strTaxExempt == "N") // if tax applicable
            {
                DataTable dtblTax = new DataTable();
                DataTable dtblTax1 = new DataTable();
                dtblTax.Columns.Add("TAXID", System.Type.GetType("System.String"));
                dtblTax.Columns.Add("Tax", System.Type.GetType("System.String"));
                dtblTax.Columns.Add("Amount", System.Type.GetType("System.Double"));

                double dblDiscountSum = 0;
                int intCountRow = dtblPOSDatatbl.Rows.Count;
                int intCountCRow = dtblPOSDatatbl.Rows.Count;

                foreach (DataRow dr in dtblPOSDatatbl.Rows)
                {
                    intCountCRow++;
                    if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                        || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "X")
                        || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                        || (dr["PRODUCTTYPE"].ToString() == "H")) continue;


                    int intPID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                    double dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                    if (intCountCRow != intCountRow)
                    {
                        dblPrice = GeneralFunctions.FormatDouble(dblPrice - (dblPrice * dblDiscountPercent / 100));
                        dblDiscountSum = GeneralFunctions.FormatDouble(dblDiscountSum + (dblPrice * dblDiscountPercent / 100));
                    }
                    else
                    {
                        dblPrice = GeneralFunctions.FormatDouble(dblDiscount - dblDiscountSum);
                    }

                    if (GetFStamp(intPID) == "Y") continue;

                    double dblTaxR = 0;
                    PosDataObject.Product objTax = new PosDataObject.Product();
                    objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    if ((dr["PRODUCTTYPE"].ToString() != "B") && (dr["EDITF"].ToString() == "N"))
                    {
                        dtblTax1 = objTax.ShowActiveRepairTaxes(intPID);
                    }
                    else
                    {
                        DataTable dtblTemp = new DataTable();
                        dtblTemp.Columns.Add("ID", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxID", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxName", System.Type.GetType("System.String"));
                        dtblTemp.Columns.Add("TaxRate", System.Type.GetType("System.String"));

                        double dblRate = 0.00;
                        string strTaxName = "";

                        if (dr["TAXABLE1"].ToString() == "Y")
                        {
                            if (dr["TAXRATE1"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString());
                            }
                            if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME1"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                            else strTaxName = dr["TAXNAME1"].ToString() + " (" + dblRate.ToString("f") + "%)";

                            dtblTemp.Rows.Add(new object[] {
                                                "1",
                                                dr["TAXID1"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE1"].ToString()});
                        }

                        if (dr["TAXABLE2"].ToString() == "Y")
                        {
                            if (dr["TAXRATE2"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString());
                            }
                            if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME2"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                            else strTaxName = dr["TAXNAME2"].ToString() + " (" + dblRate.ToString("f") + "%)";

                            dtblTemp.Rows.Add(new object[] {
                                                "2",
                                                dr["TAXID2"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE2"].ToString()});
                        }

                        if (dr["TAXABLE3"].ToString() == "Y")
                        {
                            if (dr["TAXRATE3"].ToString() != "")
                            {
                                dblRate = GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString());
                            }
                            if (Settings.DecimalPlace == 3) strTaxName = dr["TAXNAME3"].ToString() + " (" + dblRate.ToString("f3") + "%)";
                            else strTaxName = dr["TAXNAME3"].ToString() + " (" + dblRate.ToString("f") + "%)";

                            dtblTemp.Rows.Add(new object[] {
                                                "3",
                                                dr["TAXID3"].ToString(),
                                                strTaxName,
                                                dr["TAXRATE3"].ToString()});
                        }
                        dtblTax1 = dtblTemp;
                        dtblTemp.Dispose();
                    }
                    foreach (DataRow drt in dtblTax1.Rows)
                    {
                        if (bl100percinvdiscount) continue;
                        bool blfinddata = false;
                        foreach (DataRow dr1 in dtblTax.Rows)
                        {
                            if (dr1["TAXID"].ToString() == drt["TAXID"].ToString())
                            {
                                dblChangeTax = dblChangeTax + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100);
                                double prevtax = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr1["Amount"].ToString()));
                                double dblRate = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100);
                                dr1["Amount"] = Convert.ToString(prevtax + dblRate);
                                blfinddata = true;
                                break;
                            }
                        }
                        if (!blfinddata)
                        {
                            dtblTax.Rows.Add(new object[] { drt["TAXID"].ToString(), drt["TaxName"].ToString(), GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100 });
                            dblChangeTax = dblChangeTax + (GeneralFunctions.fnDouble(drt["TaxRate"].ToString()) * dblPrice / 100);
                        }
                    }
                }
                grdTax.ItemsSource = dtblTax;
                dtblTax1.Dispose();
                dtblTax.Dispose();
            }
            return dblChangeTax;
        }

        // Get Total Tender Amount already placed

        private void GetTenderAmount()
        {

            double dblTD = 0;
            foreach (DataRow dr in dtblTender.Rows)
            {
                dblTD = dblTD + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()));
            }
            dblTender = GeneralFunctions.FormatDouble(dblTD);
        }

        // Display Invoice Total, Tender Amount, Change Due Amount

        private void ArrangeSettings()
        {
            dblBalance = 0;
            dblTender = 0;
            dblChange = 0;

            GetTenderAmount();

            if ((blPaidin) || (blPaidout) || (blSafedrop))
            {
                dblSubtotal = dblPaidInOutAmount;
                dblTax = 0;
                dblDiscount = 0;

                numTax.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblTax));
                numRentDeposit.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblRentSecurityDeposit));
                numSubtotal.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblSubtotal));
                numDiscount.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblDiscount));
                dblNewSubtotal = Settings.TaxInclusive == "N" ? GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numSubtotal.Text.Substring(numSubtotal.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numDiscount.Text.Substring(numDiscount.Text.IndexOf(" ") + 1))) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numSubtotal.Text.Substring(numSubtotal.Text.IndexOf(" ") + 1)));

                numNewSubtotal.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblNewSubtotal));
                numFee.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblFees + dblFeesCouponAmount));
                numFeeTax.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblFeesTax + dblFeesCouponTaxAmount));
                numCoupon.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblCoupon + dblSpecialMixnMatch));

                dblTotalsale = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numNewSubtotal.Text.Substring(numNewSubtotal.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numFee.Text.Substring(numFee.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numFeeTax.Text.Substring(numFeeTax.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numTax.Text.Substring(numTax.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numRentDeposit.Text.Substring(numRentDeposit.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numRepairAdvance.Text.Substring(numRepairAdvance.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numCoupon.Text.Substring(numCoupon.Text.IndexOf(" ") + 1)) + dblBottleRefund);

                numTotalsale.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblTotalsale));
                numTender.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblTender));


                if (GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numTender.Text.Substring(numTender.Text.IndexOf(" ") + 1))) >= 0)
                {
                    dblBalance = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numTender.Text.Substring(numTender.Text.IndexOf(" ") + 1)));
                }
                else
                {
                    if ((dblTotalsale < 0)) dblBalance = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numTender.Text.Substring(numTender.Text.IndexOf(" ") + 1)));
                    else dblBalance = 0;
                }

                numBalanceDue.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblBalance));

                if (GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTender.Text.Substring(numTender.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1))) >= 0)
                {
                    dblChange = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTender.Text.Substring(numTender.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)));
                }
                else
                {
                    dblChange = 0;
                }

                numChangeDue.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblChange));


                lbDiscount.Visibility = System.Windows.Visibility.Hidden;
                numDiscount.Visibility = System.Windows.Visibility.Hidden;
                lbNewSubtotal.Visibility = System.Windows.Visibility.Hidden;
                numNewSubtotal.Visibility = System.Windows.Visibility.Hidden;

                lbCoupon.Visibility = System.Windows.Visibility.Hidden;
                numCoupon.Visibility = System.Windows.Visibility.Hidden;

                lbFee.Visibility = System.Windows.Visibility.Hidden;
                numFee.Visibility = System.Windows.Visibility.Hidden;

                lbFeeTax.Visibility = System.Windows.Visibility.Hidden;
                numFeeTax.Visibility = System.Windows.Visibility.Hidden;

                lbRentDeposit.Visibility = System.Windows.Visibility.Hidden;
                numRentDeposit.Visibility = System.Windows.Visibility.Hidden;

                lbRepairAdvance.Visibility = System.Windows.Visibility.Hidden;
                numRepairAdvance.Visibility = System.Windows.Visibility.Hidden;


            }

            else
            {
                if ((!blNewLayaway) && (!blLayaway) && (!blLayawayRefund) && (!blRentRecall))
                {
                    numRepairAdvance.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblRepairAdvance));

                    if (!blRepairDeposit)
                    {
                        ShowTax();
                        numTax.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblTax));
                        numRentDeposit.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblRentSecurityDeposit));
                        numSubtotal.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblSubtotal));
                        numDiscount.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblDiscount));
                        dblNewSubtotal = Settings.TaxInclusive == "N" ? GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numSubtotal.Text.Substring(numSubtotal.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numDiscount.Text.Substring(numDiscount.Text.IndexOf(" ") + 1))) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numSubtotal.Text.Substring(numSubtotal.Text.IndexOf(" ") + 1)));

                        numNewSubtotal.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblNewSubtotal));
                        numFee.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblFees + dblFeesCouponAmount));
                        numFeeTax.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblFeesTax + dblFeesCouponTaxAmount));
                        numCoupon.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblCoupon + dblSpecialMixnMatch));

                        dblTotalsale = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numNewSubtotal.Text.Substring(numNewSubtotal.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numFee.Text.Substring(numFee.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numFeeTax.Text.Substring(numFeeTax.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numTax.Text.Substring(numTax.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numRentDeposit.Text.Substring(numRentDeposit.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numRepairAdvance.Text.Substring(numRepairAdvance.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numCoupon.Text.Substring(numCoupon.Text.IndexOf(" ") + 1)) + dblBottleRefund);

                        /*
                        if (Settings.TaxInclusive == "N")
                        {
                            dblTotalsale = GeneralFunctions.FormatDouble(numNewSubtotal.Value + numFee.Value + numFeeTax.Value + numTax.Value + numRentDeposit.Value - numRepairAdvance.Value - numCoupon.Value + dblBottleRefund);
                        }
                        else
                        {
                            dblTotalsale = GeneralFunctions.FormatDouble(numNewSubtotal.Value + numFee.Value + numFeeTax.Value + numRentDeposit.Value - numRepairAdvance.Value - numCoupon.Value + dblBottleRefund);
                        }*/
                    }
                    else
                    {
                        dblTotalsale = GeneralFunctions.fnDouble(numRepairAdvance.Text.Substring(numRepairAdvance.Text.IndexOf(" ") + 1));
                    }
                }
                if ((blNewLayaway) || (blLayaway) || (blLayawayRefund))
                {
                    dblTax = 0;
                    numTax.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblTax));
                    dblSubtotal = GeneralFunctions.FormatDouble(dblLayawayAmt);
                    numSubtotal.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblSubtotal));
                    numDiscount.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblDiscount));
                    dblNewSubtotal = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numSubtotal.Text.Substring(numSubtotal.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numDiscount.Text.Substring(numDiscount.Text.IndexOf(" ") + 1)));
                    numNewSubtotal.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblNewSubtotal));
                    numFee.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblFees + dblFeesCouponAmount));
                    numFeeTax.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblFeesTax + dblFeesCouponTaxAmount));
                    numCoupon.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblCoupon + dblSpecialMixnMatch));

                    dblTotalsale = dblTotalsale = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numNewSubtotal.Text.Substring(numNewSubtotal.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numFee.Text.Substring(numFee.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numFeeTax.Text.Substring(numFeeTax.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numTax.Text.Substring(numTax.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numCoupon.Text.Substring(numCoupon.Text.IndexOf(" ") + 1)) + dblBottleRefund);

                    /*
                    if (Settings.TaxInclusive == "N")
                    {
                        dblTotalsale = dblTotalsale = GeneralFunctions.FormatDouble(numNewSubtotal.Value + numFee.Value + numFeeTax.Value + numTax.Value - numCoupon.Value + dblBottleRefund);
                    }
                    else
                    {
                        dblTotalsale = dblTotalsale = GeneralFunctions.FormatDouble(numNewSubtotal.Value + numFee.Value + numFeeTax.Value - numCoupon.Value + dblBottleRefund);
                    }*/
                }

                if (blRentRecall)
                {
                    if (sRentCalcFlag == "N") dblTotalsale = GeneralFunctions.FormatDouble(dblRentSecurityDeposit);

                    if (sRentCalcFlag == "Y")
                    {
                        ShowTax();
                        numTax.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblTax));
                        numRentDeposit.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(-dblRentSecurityDeposit));

                        numSubtotal.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblSubtotal));

                        //numSubtotal.Value = GeneralFunctions.FormatDouble(dblSubtotal);
                        numDiscount.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblDiscount));
                        dblNewSubtotal = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numSubtotal.Text.Substring(numSubtotal.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numDiscount.Text.Substring(numDiscount.Text.IndexOf(" ") + 1)));
                        numNewSubtotal.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblNewSubtotal));
                        numFee.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblFees + dblFeesCouponAmount));
                        numFeeTax.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblFeesTax + dblFeesCouponTaxAmount));
                        numCoupon.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblCoupon + dblSpecialMixnMatch));

                        dblTotalsale = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numNewSubtotal.Text.Substring(numNewSubtotal.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numFee.Text.Substring(numFee.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numFeeTax.Text.Substring(numFeeTax.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numTax.Text.Substring(numTax.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numCoupon.Text.Substring(numCoupon.Text.IndexOf(" ") + 1)) + dblRentSecurityDeposit + dblBottleRefund);

                        /*
                        if (Settings.TaxInclusive == "N")
                        {
                            dblTotalsale = GeneralFunctions.FormatDouble(numNewSubtotal.Value + numFee.Value + numFeeTax.Value + numTax.Value - numCoupon.Value + dblRentSecurityDeposit + dblBottleRefund);
                        }
                        else
                        {
                            dblTotalsale = GeneralFunctions.FormatDouble(numNewSubtotal.Value + numFee.Value + numFeeTax.Value - numCoupon.Value + dblRentSecurityDeposit + dblBottleRefund);
                        }*/
                    }
                }

                //if (blRepairRecall) dblTotalsale = GeneralFunctions.FormatDouble(dblRepairTender); 

                numTotalsale.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblTotalsale));
                numTender.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblTender));

                if (GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numTender.Text.Substring(numTender.Text.IndexOf(" ") + 1))) >= 0)
                {
                    dblBalance = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numTender.Text.Substring(numTender.Text.IndexOf(" ") + 1)));
                }
                else
                {
                    if ((blReturnItem) || (blLayawayRefund) || (blRentRecall && (sRentCalcFlag == "N")) || (dblTotalsale < 0)) dblBalance = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numTender.Text.Substring(numTender.Text.IndexOf(" ") + 1)));
                    else dblBalance = 0;
                }

                numBalanceDue.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblBalance));

                if (GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTender.Text.Substring(numTender.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1))) >= 0)
                {
                    dblChange = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTender.Text.Substring(numTender.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)));
                }
                else
                {
                    dblChange = 0;
                }

                numChangeDue.Text = SystemVariables.CurrencySymbol + " " + GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblChange));

                if (dblDiscount == 0)
                {
                    lbDiscount.Visibility = System.Windows.Visibility.Hidden;
                    numDiscount.Visibility = System.Windows.Visibility.Hidden;
                    lbNewSubtotal.Visibility = System.Windows.Visibility.Hidden;
                    numNewSubtotal.Visibility = System.Windows.Visibility.Hidden;
                }
                else
                {
                    lbDiscount.Visibility = System.Windows.Visibility.Visible;
                    numDiscount.Visibility = System.Windows.Visibility.Visible;
                    lbNewSubtotal.Visibility = System.Windows.Visibility.Visible;
                    numNewSubtotal.Visibility = System.Windows.Visibility.Visible;
                }

                if (dblCoupon + dblSpecialMixnMatch == 0)
                {
                    lbCoupon.Visibility = System.Windows.Visibility.Hidden;
                    numCoupon.Visibility = System.Windows.Visibility.Hidden;
                }
                else
                {
                    lbCoupon.Visibility = System.Windows.Visibility.Visible;
                    numCoupon.Visibility = System.Windows.Visibility.Visible;
                }

                if (dblFees + dblFeesCouponAmount == 0)
                {
                    lbFee.Visibility = System.Windows.Visibility.Hidden;
                    numFee.Visibility = System.Windows.Visibility.Hidden;
                }
                else
                {
                    lbFee.Visibility = System.Windows.Visibility.Visible;
                    numFee.Visibility = System.Windows.Visibility.Visible;
                }

                if (dblFeesTax + dblFeesCouponTaxAmount == 0)
                {
                    lbFeeTax.Visibility = System.Windows.Visibility.Hidden;
                    numFeeTax.Visibility = System.Windows.Visibility.Hidden;
                }
                else
                {
                    lbFeeTax.Visibility = System.Windows.Visibility.Visible;
                    numFeeTax.Visibility = System.Windows.Visibility.Visible;
                }


                if (dblRentSecurityDeposit <= 0)
                {
                    if ((blRentRecall) && (sRentCalcFlag == "Y"))
                    {
                        if (dblRentSecurityDeposit != 0)
                        {
                            lbRentDeposit.Text = "Return Deposit";
                            lbRentDeposit.Visibility = System.Windows.Visibility.Visible;
                            numRentDeposit.Visibility = System.Windows.Visibility.Visible;
                        }
                        else
                        {
                            lbRentDeposit.Visibility = System.Windows.Visibility.Hidden;
                            numRentDeposit.Visibility = System.Windows.Visibility.Hidden;
                        }
                    }
                    else
                    {
                        lbRentDeposit.Visibility = System.Windows.Visibility.Hidden;
                        numRentDeposit.Visibility = System.Windows.Visibility.Hidden;
                    }
                }
                else
                {
                    lbRentDeposit.Visibility = System.Windows.Visibility.Visible;
                    numRentDeposit.Visibility = System.Windows.Visibility.Visible;
                }
                if (dblRepairAdvance <= 0)
                {
                    lbRepairAdvance.Visibility = System.Windows.Visibility.Hidden;
                    numRepairAdvance.Visibility = System.Windows.Visibility.Hidden;
                }
                else
                {
                    lbRepairAdvance.Visibility = System.Windows.Visibility.Visible;
                    numRepairAdvance.Visibility = System.Windows.Visibility.Visible;
                }

            }

            
            
            if (GeneralFunctions.fnDouble(numBalanceDue.Text.Substring(numBalanceDue.Text.IndexOf(" ") + 1)) == 0)
            {
                btnOK.IsEnabled = true;
            }
            else btnOK.IsEnabled = false;
            

            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
            {
                SecondMonitor.ClearWeightInfo();
                SecondMonitor.InsertTender(dtblTender, GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTender.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1))), GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numBalanceDue.Text.Substring(numBalanceDue.Text.IndexOf(" ") + 1))), GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numChangeDue.Text.Substring(numChangeDue.Text.IndexOf(" ") + 1))));
            }
        }

        // Element/ Mercury/ Precidia/ Datacap /POSLink Void Transaction

        private bool VoidCC(int cctranid)
        {
            bool returnflag = false;
            DataTable dt = new DataTable();
            dt = GetCardTransData1(cctranid);

            string val1 = "";
            string val2 = "";
            string val3 = "";
            string val4 = "";
            string val5 = "";
            string val6 = "";
            string val7 = "";
            string val8 = "";
            string val9 = "";
            string val20 = "";
            string val21 = "";
            int pmntgwy = 0;
            foreach (DataRow dr in dt.Rows)
            {
                val1 = dr["CardType"].ToString();
                val2 = dr["CardAmount"].ToString();
                val3 = dr["Reference"].ToString();
                val4 = dr["MercuryInvoiceNo"].ToString();
                val5 = dr["MercuryAcqRef"].ToString();
                val6 = dr["MercuryToken"].ToString();
                val7 = dr["AuthCode"].ToString();
                val8 = dr["MercuryProcessData"].ToString();
                val9 = dr["RefCardTranID"].ToString();
                val20 = dr["TransactionType"].ToString();
                val21 = dr["RefCardAuthAmount"].ToString();
                pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());

                PosDataObject.POS objcard = new PosDataObject.POS();
                objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objcard.CustomerID = intCustID;
                objcard.LoginUserID = SystemVariables.CurrentUserID;
                objcard.EmployeeID = SystemVariables.CurrentUserID;
                objcard.CardType = val1;
                objcard.CardAmount = GeneralFunctions.fnDouble(val2);
                objcard.PaymentGateway = Settings.PaymentGateway;
                objcard.TerminalName = Settings.TerminalName;
                if (Settings.PaymentGateway == 2)
                {
                    objcard.LogFileName = MercuryLogFile;
                }
                else if (Settings.PaymentGateway == 3)
                {
                    objcard.LogFileName = PrecidiaLogFile;
                }
                else if (Settings.PaymentGateway == 5)
                {
                    objcard.LogFileName = DatacapLogFile;
                }
                else if (Settings.PaymentGateway == 6)
                {
                    objcard.LogFileName = DatacapEMVLogFile;
                }
                else
                {
                    objcard.LogFileName = "";
                }
                try
                {
                    string strerr = objcard.InsertCardTrans();
                }
                catch (Exception ex)
                {
                    new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                    Cursor = System.Windows.Input.Cursors.Arrow;
                    break;
                }

                //string strerr = objcard.InsertCardTrans();
                intCardTranID = objcard.CardTranID;
                Cursor = System.Windows.Input.Cursors.Hand;

                // element temp out
                /*
                if (pmntgwy == 1)
                {
                    try
                    {
                        ElementExpress.ElementPS pg = new ElementExpress.ElementPS();
                        pg.ElementApplicationID = Settings.ElementHPApplicationID;
                        pg.ElementAccountID = Settings.ElementHPAccountID;
                        pg.ElementAccountToken = Settings.ElementHPAccountToken;
                        pg.ElementAcceptorID = Settings.ElementHPAcceptorID;
                        pg.TranAmount = GeneralFunctions.FormatDouble1(GeneralFunctions.fnDouble(val2));
                        pg.ElementTerminalID = Settings.ElementHPTerminalID.PadLeft(4, '0');
                        pg.TranID = val9;
                        pg.RefNo = val3;
                        pg.TktNo = intCardTranID.ToString();
                        pg.ApplicationVersion = GeneralFunctions.PaymentGatewayApplicationVersion();

                        string msg1 = "";
                        string msg2 = "";
                        if (val1 != "Debit Card")
                        {
                            
                            if (Settings.ElementHPMode == 0) pg.CreditReturn(ref msg1, ref msg2);
                            if (Settings.ElementHPMode == 1) pg.TestCreditReturn(ref msg1, ref msg2);
                        }
                        else
                        {
                            if (Settings.ElementHPMode == 0) pg.DebitReturn(ref msg1, ref msg2);
                            if (Settings.ElementHPMode == 1) pg.TestDebitReturn(ref msg1, ref msg2);
                        }

                        if (msg1 == "0")
                        {
                            
                            AuthCode = pg.ApprovalNo;
                            TranID = pg.TranID;
                            CardNum = "";
                            CardExMM = "";
                            CardExYY = "";
                            CardLogo = "";
                            CardType = "";
                            ApprovedAmt = "0";
                            RefNo = pg.RefNo;
                            CardEntry = "";
                            Token = "";
                            AcqRef = "";
                            MercuryProcessData = "";
                            MercuryTranCode = "";
                            MercuryPurchaseAmount = 0;
                            strMercuryMerchantID = "";

                            Cursor =System.Windows.Input.Cursors.Arrow;
                            string updtstr = "";
                            objcard.CardType = "";
                            objcard.MercuryInvNo = "";
                            objcard.AuthCode = AuthCode;
                            objcard.Reference = RefNo;
                            objcard.AcqRefData = "";
                            objcard.TokenData = "";
                            objcard.MercuryProcessData = "";
                            objcard.MercuryPurchaseAmount = 0;
                            objcard.MercuryTranCode = "";
                            objcard.CardAmount = GeneralFunctions.fnDouble(val2);

                            objcard.RefCardAct = "";
                            objcard.RefCardLogo = "";
                            objcard.RefCardEntry = "";
                            objcard.RefCardAuthID = "";
                            objcard.RefCardTranID = TranID;
                            objcard.RefCardMerchID = RefNo;
                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(val2);
                            objcard.CardTranType = "Return";
                            objcard.AdjustFlag = "Y";
                            objcard.RefCardBalAmount = 0;
                            objcard.PrintXml = "";
                            updtstr = objcard.UpdateCardResponse();
                            Cursor =System.Windows.Input.Cursors.Arrow;
                            if (updtstr == "")
                            {
                            }
                        }
                    }
                    catch
                    {
                        
                        //new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.", "Credit Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor =System.Windows.Input.Cursors.Arrow;
                        //break;
                    }
                }

                if (pmntgwy == 2)
                {
                    WriteToMercuryLogFile("Void Start: " + val1);
                    try
                    {
                        MercuryPayment.clsMercuryPymnt mp = new MercuryPayment.clsMercuryPymnt();
                        mp.MerchantID = Settings.MercuryHPMerchantID;
                        mp.UserID = Settings.MercuryHPUserID;
                        mp.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                        mp.InvNo = val4;
                        mp.RefNo = val3;
                        mp.AuthID = val7;
                        mp.AcqRefData = val5;
                        mp.Token = val6;
                        mp.PurchaseAmount = GeneralFunctions.fnDouble(val2);

                        string msg1 = "";

                        if (val1 == "Credit Card")
                        {
                            if (Settings.ElementHPMode == 0) mp.CreditVoidSale(ref msg1);
                            if (Settings.ElementHPMode == 1) mp.TestCreditVoidSale(ref msg1);
                        }
                        if ((val1 == "Credit Card (STAND-IN)") || (val1 == "Credit Card - Voice Auth (STAND-IN)"))
                        {
                            if (Settings.ElementHPMode == 0) mp.StandInCreditVoidSale(ref msg1);
                            if (Settings.ElementHPMode == 1) mp.TestStandInCreditVoidSale(ref msg1);
                        }
                        if (val1 == "Debit Card")
                        {
                            if (Settings.ElementHPMode == 0) mp.DebitVoidSale(ref msg1);
                            if (Settings.ElementHPMode == 1) mp.TestDebitVoidSale(ref msg1);
                        }

                        if (val1 == "Mercury Gift Card")
                        {
                            if (val20 == "Sale")
                            {
                                if (Settings.ElementHPMode == 0) mp.GiftCardVoidSales(ref msg1);
                                if (Settings.ElementHPMode == 1) mp.TestGiftCardVoidSales(ref msg1);
                            }
                            if (val20 == "Issue")
                            {
                                if (Settings.ElementHPMode == 0) mp.GiftCardVoidIssue(ref msg1);
                                if (Settings.ElementHPMode == 1) mp.TestGiftCardVoidIssue(ref msg1);
                            }

                            if (val20 == "Reload")
                            {
                                if (Settings.ElementHPMode == 0) mp.GiftCardVoidReload(ref msg1);
                                if (Settings.ElementHPMode == 1) mp.TestGiftCardVoidReload(ref msg1);
                            }
                        }

                        GeneralFunctions.CreateMercuryTransactionXML(mp.MercuryXmlResponse, val6);

                        WriteToMercuryLogFile("Response: " + msg1);

                        if (msg1.ToUpper().Trim() == "APPROVED")
                        {
                            alertctrl.Show(this, Properties.Resources."Void", "frmPOSTenderDlg_Void") + " " + mp.CardType, Environment.NewLine + "$ " + GeneralFunctions.fnDouble(mp.ApprovedAmt).ToString("f") + " " + Properties.Resources."voided successfully against card #", "frmPOSTenderDlg_voidedsuccessfullyagainstcard") + " " + mp.CardNumber);

                            blCardVarify = true;
                            AuthCode = mp.AuthID;
                            TranID = mp.TranID;
                            CardNum = mp.CardNumber;
                            CardExMM = mp.CardExMM;
                            CardExYY = mp.CardExYY;
                            CardLogo = mp.CardLogo;
                            CardType = mp.CardType;
                            ApprovedAmt = mp.ApprovedAmt;
                            RefNo = mp.RefNo;
                            CardEntry = mp.CardEntry;
                            Token = mp.Token;
                            AcqRef = mp.AcqRefData;
                            MercuryProcessData = mp.MercuryProcessData;
                            MercuryTranCode = mp.MercuryTranCode;
                            MercuryPurchaseAmount = mp.PurchaseAmount;
                            strMercuryMerchantID = mp.MerchantID;

                            MercuryRecordNo = mp.MercuryRecordNo;
                            MercuryResponseOrigin = mp.MercuryResponseOrigin;
                            MercuryResponseReturnCode = mp.MercuryResponseReturnCode;
                            MercuryTextResponse = mp.MercuryTextResponse;

                            if (AuthCode == null) AuthCode = "";
                            if (TranID == null) TranID = "";
                            if (CardNum == null) CardNum = "";
                            if (CardExMM == null) CardExMM = "";
                            if (CardExYY == null) CardExYY = "";
                            if (CardLogo == null) CardLogo = "";
                            if (CardType == null) CardType = "";
                            if (ApprovedAmt == null) ApprovedAmt = "0";
                            if (RefNo == null) RefNo = "";
                            if (CardEntry == null) CardEntry = "";
                            if (Token == null) Token = "";
                            if (AcqRef == null) AcqRef = "";

                            if (MercuryProcessData == null) MercuryProcessData = "";
                            if (MercuryRecordNo == null) MercuryRecordNo = "";
                            if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                            if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                            if (MercuryTextResponse == null) MercuryTextResponse = "";
                            if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";

                            Cursor =System.Windows.Input.Cursors.Arrow;
                            string updtstr = "";

                            objcard.MercuryRecordNo = MercuryRecordNo;
                            objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                            objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                            objcard.MercuryTextResponse = MercuryTextResponse;

                            objcard.CardType = CardLogo;
                            objcard.MercuryInvNo = TranID;
                            objcard.AuthCode = AuthCode;
                            objcard.Reference = RefNo;
                            objcard.AcqRefData = AcqRef;
                            objcard.TokenData = Token;
                            objcard.MercuryProcessData = MercuryProcessData;
                            objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                            objcard.MercuryTranCode = MercuryTranCode;
                            objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                            objcard.RefCardAct = CardNum;
                            objcard.RefCardLogo = CardLogo;
                            objcard.RefCardEntry = CardEntry;
                            objcard.RefCardAuthID = AuthCode;
                            objcard.RefCardTranID = TranID;
                            objcard.RefCardMerchID = strMercuryMerchantID;
                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                            objcard.CardTranType = "Void";
                            objcard.AdjustFlag = "Y";
                            objcard.RefCardBalAmount = 0;
                            objcard.PrintXml = "";
                            updtstr = objcard.UpdateCardResponse();
                            Cursor =System.Windows.Input.Cursors.Arrow;
                            if (updtstr == "")
                            {
                                returnflag = true;
                            }
                        }
                        else
                        {
                            PrecidiaErrorText = mp.MercuryTextResponse;
                            returnflag = false;
                            Cursor =System.Windows.Input.Cursors.Arrow;
                        }
                    }
                    catch (Exception ex)
                    {
                        returnflag = false;
                        Cursor =System.Windows.Input.Cursors.Arrow;
                    }
                }


                if (pmntgwy == 3)
                {
                    WriteToPrecidiaLogFile("Void Start: " + val1);

                    blCG = false;
                    bool flag = true;
                    try
                    {
                        string resp = "";
                        string resptxt = "";

                        //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                        if (val1 == "Credit Card")
                        {
                            CGtrantype = "CCVOID";
                        }
                        if ((val1 == "Credit Card - Voice Auth") || (val1 == "Credit Card (STAND-IN)") || (val1 == "Credit Card - Voice Auth (STAND-IN)"))
                        {
                            CGtrantype = "CCVOID";
                        }
                        if (val1 == "Debit Card")
                        {
                            CGtrantype = "DCREFUND";
                        }

                        if (val1 == "Precidia Gift Card")
                        {
                            if (val20 == "Sale")
                            {
                                CGtrantype = "GCVOID";
                            }
                            if (val20 == "Issue")
                            {
                                CGtrantype = "GCVOIDACTIVATE";
                            }

                            if (val20 == "Reload")
                            {
                                CGtrantype = "GCVOID";
                            }
                        }

                        if ((val1 == "Food Stamps") || (val1 == "EBT Cash") || (val1 == "EBT Voucher"))
                        {
                            CGtrantype = "EBTVOID";
                        }

                        CGamt = GeneralFunctions.fnDouble(val2);

                        

                        XmlDocument XDoc = new XmlDocument();

                        // Create root node.
                        XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

                        XDoc.ApSystem.Drawing.PendChild(XElemRoot);

                        XmlElement XTemp = XDoc.CreateElement("Command");
                        XTemp.InnerText = CGtrantype;
                        XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                        if (val1 != "Debit Card")
                        {
                            XTemp = XDoc.CreateElement("RecNum");
                            XTemp.InnerText = val9.ToString();
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                        }

                        XTemp = XDoc.CreateElement("Amount");
                        XTemp.InnerText = CGamt.ToString("f");
                        XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                        if (val1 == "Debit Card")
                        {
                            XTemp = XDoc.CreateElement("Input");
                            XTemp.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                        }

                        XTemp = XDoc.CreateElement("KeepAlive");
                        XTemp.InnerText = "N";
                        XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                        XTemp = XDoc.CreateElement("ClientMAC");
                        XTemp.InnerText = Settings.PrecidiaClientMAC;
                        XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                        if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc.OuterXml);

                        XmlDocument XmlResponse = new XmlDocument();

                        bool bTelnet = false;
                        try
                        {
                            SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                            bTelnet = true;
                        }
                        catch (Exception ex)
                        {
                            WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                            bTelnet = false;
                        }

                        if (bTelnet)
                        {
                            if (XmlResponse.InnerXml != "")
                            {
                                if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse.InnerXml);

                                SocketResponse_General(XmlResponse);

                                resp = CGresp;
                                resptxt = CGresptxt;

                                WriteToPrecidiaLogFile("Response : " + resp);

                                if (resp != "")
                                {
                                    if (resp != "APPROVED")
                                    {
                                        flag = false;
                                        break;
                                    }
                                    else
                                    {

                                    }
                                }

                                if (flag)
                                {
                                    alertctrl.Show(this, Properties.Resources."Void", "frmPOSTenderDlg_Void") + " " + CardLogo, Environment.NewLine + "$ " + GeneralFunctions.fnDouble(ApprovedAmt).ToString("f") + " " + Properties.Resources."voided successfully against card # XXXX", "frmPOSTenderDlg_voidedsuccessfullyagainstcardX") + " " + CardNum);

                                    string updtstr = "";
                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = 0;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt) - GeneralFunctions.fnDouble(PrecidiaCashBack);
                                    objcard.CardType = CardLogo;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = "";
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardTranType = "Void";
                                    objcard.AdjustFlag = "Y";
                                    objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                    objcard.PrintXml = "";
                                    WriteToPrecidiaLogFile("CardAmount : " + (GeneralFunctions.fnDouble(ApprovedAmt) - GeneralFunctions.fnDouble(PrecidiaCashBack)).ToString());
                                    WriteToPrecidiaLogFile("CardType : " + CardLogo);
                                    WriteToPrecidiaLogFile("AuthCode : " + AuthCode);
                                    WriteToPrecidiaLogFile("Reference : " + RefNo);
                                    WriteToPrecidiaLogFile("RefCardAct : " + CardNum);
                                    WriteToPrecidiaLogFile("RefCardLogo : " + CardLogo);
                                    WriteToPrecidiaLogFile("RefCardEntry : " + CardEntry);
                                    WriteToPrecidiaLogFile("RefCardAuthID : " + AuthCode);
                                    WriteToPrecidiaLogFile("RefCardTranID : " + TranID);
                                    WriteToPrecidiaLogFile("RefCardAuthAmount : " + ApprovedAmt);

                                    updtstr = objcard.UpdateCardResponse();

                                    if (updtstr == "")
                                    {
                                        WriteToPrecidiaLogFile("Card Trans Updated");
                                        returnflag = true;
                                    }
                                    else
                                    {
                                        WriteToPrecidiaLogFile("Error : " + updtstr);
                                        returnflag = false;
                                    }
                                }

                                Cursor =System.Windows.Input.Cursors.Arrow;
                            }
                            else
                            {
                                WriteToPrecidiaLogFile("Failed to get response");
                                returnflag = false;
                                Cursor =System.Windows.Input.Cursors.Arrow;
                            }
                        }
                        else
                        {
                            PrecidiaErrorText = Properties.Resources."Socket Error", "frmPOSTenderDlg_SocketError");
                            WriteToPrecidiaLogFile("Socket Error");
                            returnflag = false;
                            Cursor =System.Windows.Input.Cursors.Arrow;
                        }
                    }
                    catch (Exception ex)
                    {
                        WriteToPrecidiaLogFile("Error : " + ex.ToString());
                        returnflag = false;
                        Cursor =System.Windows.Input.Cursors.Arrow;
                    }
                }

                if (pmntgwy == 5) // Datacap
                {
                    Dcap_CmdStatus = "";
                    Dcap_TextResponse = "";
                    Dcap_AcctNo = "";
                    Dcap_Merchant = "";
                    Dcap_TranCode = "";
                    Dcap_CardType = "";
                    Dcap_AuthCode = "";
                    Dcap_RefNo = "";
                    Dcap_AcqRefData = "";
                    Dcap_RecordNo = "";
                    Dcap_InvoiceNo = "";
                    Dcap_TranAmt = 0;
                    Dcap_AuthAmt = 0;
                    Dcap_CashBkAmt = 0;
                    Dcap_BalAmt = 0;

                    bool bproceed = true;
                    string request_xml = "";
                    string response_xml = "";
                    DSIPDCXLib.DsiPDCX dsipdx = new DSIPDCXLib.DsiPDCX();
                    
                    dsipdx.ServerIPConfig(Settings.DatacapServer, 1);

                    if (val1 == "Credit Card")
                    {
                        request_xml = GeneralFunctions.Datacap_CreditVoidSale_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7, val5,blPressManual);

                        try
                        {
                            response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                        }
                        catch
                        {
                            bproceed = false;
                        }
                    }

                    if (val1 == "Datacap Gift Card")
                    {
                        if (val20 == "Sale")
                        {
                            request_xml = GeneralFunctions.Datacap_PrePaidVoidSale_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                            try
                            {
                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                            }
                            catch
                            {
                                bproceed = false;
                            }
                        }

                        if (val20 == "Issue")
                        {
                            request_xml = GeneralFunctions.Datacap_PrePaidVoidIssue_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                            try
                            {
                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                            }
                            catch
                            {
                                bproceed = false;
                            }
                        }

                        if (val20 == "Reload")
                        {
                            request_xml = GeneralFunctions.Datacap_PrePaidVoidReload_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                            try
                            {
                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                            }
                            catch
                            {
                                bproceed = false;
                            }
                        }
                    }


                    if (val1 == "Debit Card")
                    {
                        request_xml = GeneralFunctions.Datacap_DebitVoidSale_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, GeneralFunctions.fnDouble(val21) - GeneralFunctions.fnDouble(val2));

                        try
                        {
                            response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                        }
                        catch
                        {
                            bproceed = false;
                        }
                    }

                    if (val1 == "Food Stamps")
                    {
                        request_xml = GeneralFunctions.Datacap_EBTReturn_Request_XML(GeneralFunctions.fnDouble(val2), val4,false);
                        try
                        {
                            response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                        }
                        catch
                        {
                            bproceed = false;
                        }
                    }

                    if (val1 == "EBT Cash")
                    {
                        request_xml = GeneralFunctions.Datacap_EBTCashReturn_Request_XML(GeneralFunctions.fnDouble(val2), val4,blPressManual);
                        try
                        {
                            response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                        }
                        catch
                        {
                            bproceed = false;
                        }
                    }


                    if (bproceed)
                    {
                        GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                            ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                            ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);

                        if (Dcap_CmdStatus == "Approved")
                        {
                            alertctrl.Show(this, Properties.Resources."Void", "frmPOSTenderDlg_Void") + " " + Dcap_CardType, Environment.NewLine + "$ " + GeneralFunctions.fnDouble(Dcap_AuthAmt).ToString("f") + " " + Properties.Resources."voided successfully against card #", "frmPOSTenderDlg_voidedsuccessfullyagainstcard") + " " + Dcap_AcctNo);

                            string updtstr = "";
                            objcard.MercuryRecordNo = "";
                            objcard.MercuryResponseOrigin = "";
                            objcard.MercuryResponseReturnCode = "";
                            objcard.MercuryTextResponse = "";

                            objcard.MercuryInvNo = Dcap_InvoiceNo;
                            objcard.MercuryProcessData = "";
                            objcard.MercuryTranCode = "";
                            objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                            objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                            objcard.CardType = val1;
                            objcard.AuthCode = Dcap_AuthCode;
                            objcard.Reference = Dcap_RefNo;
                            objcard.AcqRefData = Dcap_AcqRefData;
                            objcard.TokenData = Dcap_RecordNo;

                            objcard.RefCardAct = Dcap_AcctNo;
                            objcard.RefCardLogo = Dcap_CardType;
                            objcard.RefCardEntry = CardEntry;
                            objcard.RefCardAuthID = Dcap_AuthCode;
                            objcard.RefCardTranID = TranID;
                            objcard.RefCardMerchID = Dcap_Merchant;
                            objcard.RefCardAuthAmount = Dcap_AuthAmt;
                            objcard.CardTranType = "Void";
                            objcard.AdjustFlag = "Y";
                            objcard.RefCardBalAmount = Dcap_BalAmt;
                            objcard.PrintXml = "";
                            updtstr = objcard.UpdateCardResponse();

                            if (updtstr == "")
                            {
                                returnflag = true;
                            }
                            else
                            {
                                returnflag = false;
                            }

                            Cursor =System.Windows.Input.Cursors.Arrow;
                        }
                        else
                        {
                            new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Void", MessageBoxButton.OK, MessageBoxImage.Information);
                            returnflag = false;
                            Cursor =System.Windows.Input.Cursors.Arrow;
                        }
                    }
                    else
                    {
                        returnflag = false;
                        Cursor =System.Windows.Input.Cursors.Arrow;
                    }

                    
                }




                if (pmntgwy == 6) // Datacap EMV
                {
                    CallPadResetCount = 0;
                    CallEMVPadReset();
                    if (CallPadResetCount == 5)
                    {
                        CallPadResetCount = 0;
                        if (Dcap_PPAD_CmdStatus != "Success") new MessageBoxWindow().Show(Dcap_PPAD_CmdStatus + "\n\n" + Dcap_PPAD_TextResponse, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor =System.Windows.Input.Cursors.Arrow;
                        returnflag = false;
                    }
                    else
                    {
                    Dcap_CmdStatus = "";
                    Dcap_TextResponse = "";
                    Dcap_AcctNo = "";
                    Dcap_Merchant = "";
                    Dcap_TranCode = "";
                    Dcap_CardType = "";
                    Dcap_AuthCode = "";
                    Dcap_RefNo = "";
                    Dcap_AcqRefData = "";
                    Dcap_RecordNo = "";
                    Dcap_InvoiceNo = "";
                    Dcap_TranAmt = 0;
                    Dcap_AuthAmt = 0;
                    Dcap_CashBkAmt = 0;
                    Dcap_ProcessData = "";
                    Dcap_PrintDraft = "";

                    bool bproceed = true;
                    string request_xml = "";
                    string response_xml = "";

                    DSIEMVXLib.DsiEMVX dsipdx = new DSIEMVXLib.DsiEMVX();


                    if (val20 == "Sale")
                    {

                        if (val1 == "Credit Card")
                        {
                            request_xml = GeneralFunctions.PrepareEMVVoidSaleXML(GeneralFunctions.fnDouble(val2), val4, val3, val7, val5, val8, val6, false, 0);

                            try
                            {
                                response_xml = dsipdx.ProcessTransaction(request_xml);
                            }
                            catch
                            {
                                bproceed = false;
                            }
                        }


                        if (val1 == "Debit Card")
                        {
                            request_xml = GeneralFunctions.PrepareEMVVoidSaleXML(GeneralFunctions.fnDouble(val2), val4, val3, val7, val5, val8, val6, true, GeneralFunctions.fnDouble(val21) - GeneralFunctions.fnDouble(val2));

                            try
                            {
                                response_xml = dsipdx.ProcessTransaction(request_xml);
                            }
                            catch
                            {
                                bproceed = false;
                            }
                        }

                    }

                    if (val20 == "Return")
                    {
                        request_xml = GeneralFunctions.PrepareEMVVoidReturnXML(GeneralFunctions.fnDouble(val2), val4, val3, val7, val5, val8,val6);

                        try
                        {
                            response_xml = dsipdx.ProcessTransaction(request_xml);
                        }
                        catch
                        {
                            bproceed = false;
                        }
                    }


                    if (bproceed)
                    {
                        
                        GeneralFunctions.DatacapEMV_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                            ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                            ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_ProcessData, ref Dcap_PrintDraft);

                        if (Dcap_CmdStatus == "Approved")
                        {
                            GeneralFunctions.StoreResponseSequence(response_xml);

                            alertctrl.Show(this, Properties.Resources."Void", "frmPOSTenderDlg_Void") + " " + Dcap_CardType, Environment.NewLine + "$ " + GeneralFunctions.fnDouble(Dcap_AuthAmt).ToString("f") + " " + Properties.Resources."voided successfully against card #", "frmPOSTenderDlg_voidedsuccessfullyagainstcard") + " " + Dcap_AcctNo);

                            string updtstr = "";
                            objcard.MercuryRecordNo = "";
                            objcard.MercuryResponseOrigin = "";
                            objcard.MercuryResponseReturnCode = "";
                            objcard.MercuryTextResponse = "";

                            objcard.MercuryInvNo = Dcap_InvoiceNo;
                            objcard.MercuryProcessData = Dcap_ProcessData;
                            objcard.MercuryTranCode = Dcap_TranCode;
                            objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                            objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                            objcard.CardType = val1;
                            objcard.AuthCode = Dcap_AuthCode;
                            objcard.Reference = Dcap_RefNo;
                            objcard.AcqRefData = Dcap_AcqRefData;
                            objcard.TokenData = Dcap_RecordNo;

                            objcard.RefCardAct = Dcap_AcctNo;
                            objcard.RefCardLogo = Dcap_CardType;
                            objcard.RefCardEntry = CardEntry;
                            objcard.RefCardAuthID = Dcap_AuthCode;
                            objcard.RefCardTranID = TranID;
                            objcard.RefCardMerchID = Dcap_Merchant;
                            objcard.RefCardAuthAmount = Dcap_AuthAmt;
                            objcard.CardTranType = "Void";
                            objcard.AdjustFlag = "Y";
                            objcard.RefCardBalAmount = 0;
                            objcard.PrintXml = "";
                            updtstr = objcard.UpdateCardResponse();

                            if (updtstr == "")
                            {
                                returnflag = true;
                            }
                            else
                            {
                                returnflag = false;
                            }

                            Cursor =System.Windows.Input.Cursors.Arrow;
                        }
                        else
                        {
                            new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Void", MessageBoxButton.OK, MessageBoxImage.Information);
                            returnflag = false;
                            Cursor =System.Windows.Input.Cursors.Arrow;
                        }
                    }
                    else
                    {
                        returnflag = false;
                        Cursor =System.Windows.Input.Cursors.Arrow;
                    }

                    }
                }

                */
                /*
                if (pmntgwy == 7) // POSLink
                {
                    POSLinkLogPath = POSLinkLogFilePath();
                    POSLink_ResultCode = "";
                    POSLink_ResultTxt = "";
                    POSLink_RefNum = "";
                    POSLink_AuthCode = "";
                    POSLink_CardType = "";
                    POSLink_BogusAccountNum = "";
                    POSLink_CashBack = 0;
                    POSLink_RequestedAmt = 0;
                    POSLink_ApprovedAmt = 0;
                    POSLink_RemainingBalance = 0;
                    POSLink_ExtraBalance = 0;

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int refinv = objPOS.FetchMaxInvoiceNo();

                    POSLink.PosLink pg = new POSLink.PosLink();

                    pg.CommSetting = GeneralFunctions.GetPOSLinkCommSetup();

                    POSLink.LogManagement plog = new POSLink.LogManagement();
                    plog.LogLevel = 1;
                    plog.LogFilePath = System.IO.Path.GetDirectoryName(POSLinkLogPath);
                    pg.LogManageMent = plog;

                    POSLink.PaymentRequest paymentRequest = new POSLink.PaymentRequest();

                    if (val1 == "Credit Card")
                    {
                        paymentRequest.TenderType = paymentRequest.ParseTenderType("CREDIT");
                        if (val20 == "Sale")
                        {
                            paymentRequest.TransType = paymentRequest.ParseTransType("VOID SALE");
                        }
                        if (val20 == "Return")
                        {
                            paymentRequest.TransType = paymentRequest.ParseTransType("VOID RETURN");
                        }
                    }

                    if (val1 == "Debit Card")
                    {
                        paymentRequest.TenderType = paymentRequest.ParseTenderType("DEBIT");

                        if (val20 == "Sale")
                        {
                            paymentRequest.TransType = paymentRequest.ParseTransType("VOID SALE");
                        }
                        if (val20 == "Return")
                        {
                            paymentRequest.TransType = paymentRequest.ParseTransType("VOID RETURN");
                        }


                    }

                    if (val1 == "POSLink Gift Card")
                    {
                        paymentRequest.TenderType = paymentRequest.ParseTenderType("GIFT");
                        paymentRequest.TransType = paymentRequest.ParseTransType("VOID");
                    }

                    if (val1 == "EBT Cash")
                    {
                        paymentRequest.TenderType = paymentRequest.ParseTenderType("EBT_CASHBENEFIT");

                        if (val20 == "Sale")
                        {
                            paymentRequest.TransType = paymentRequest.ParseTransType("VOID SALE");
                        }
                        if (val20 == "Return")
                        {
                            paymentRequest.TransType = paymentRequest.ParseTransType("VOID RETURN");
                        }


                    }

                    if (val1 == "Food Stamps")
                    {
                        paymentRequest.TenderType = paymentRequest.ParseTenderType("EBT_FOODSTAMP");

                        if (val20 == "Sale")
                        {
                            paymentRequest.TransType = paymentRequest.ParseTransType("VOID SALE");
                        }
                        if (val20 == "Return")
                        {
                            paymentRequest.TransType = paymentRequest.ParseTransType("VOID RETURN");
                        }

                    }



                    paymentRequest.Amount = "0";

                    paymentRequest.OrigRefNum = val3;
                    paymentRequest.InvNum = refinv.ToString();
                    paymentRequest.UserID = "";
                    paymentRequest.PassWord = "";
                    paymentRequest.ClerkID = "";
                    paymentRequest.ServerID = "";
                    paymentRequest.ECRRefNum = "1";

                    pg.PaymentRequest = paymentRequest;

                    POSLink.ProcessTransResult result = new POSLink.ProcessTransResult();

                    result = pg.ProcessTrans();

                    if (result.Code == POSLink.ProcessTransResultCode.OK)
                    {
                        POSLink.PaymentResponse paymentResponse = pg.PaymentResponse;
                        if (paymentResponse != null && paymentResponse.ResultCode != null)
                        {
                            POSLink_ResultCode = paymentResponse.ResultCode;
                            POSLink_ResultTxt = paymentResponse.ResultTxt;
                            POSLink_RefNum = paymentResponse.RefNum;

                            POSLink_RequestedAmt = GeneralFunctions.fnDouble(paymentResponse.RequestedAmount) / 100;
                            POSLink_ApprovedAmt = GeneralFunctions.fnDouble(paymentResponse.ApprovedAmount) / 100;
                            POSLink_RemainingBalance = GeneralFunctions.fnDouble(paymentResponse.RemainingBalance) / 100;
                            POSLink_ExtraBalance = GeneralFunctions.fnDouble(paymentResponse.ExtraBalance) / 100;

                            POSLink_BogusAccountNum = paymentResponse.BogusAccountNum;
                            POSLink_CardType = paymentResponse.CardType;


                            POSLink_AuthCode = paymentResponse.AuthCode;

                            if (POSLink_ResultCode == "000000") // Approved
                            {


                                string updtstr = "";

                                objcard.MercuryRecordNo = "";
                                objcard.MercuryResponseOrigin = "";
                                objcard.MercuryResponseReturnCode = "";
                                objcard.MercuryTextResponse = "";

                                objcard.MercuryInvNo = "";
                                objcard.MercuryProcessData = "";
                                objcard.MercuryTranCode = "";
                                objcard.MercuryPurchaseAmount = POSLink_RequestedAmt;
                                objcard.CardAmount = POSLink_ApprovedAmt;
                                objcard.CardType = POSLink_CardType;
                                objcard.AuthCode = POSLink_AuthCode;
                                objcard.Reference = POSLink_RefNum;
                                objcard.AcqRefData = "";
                                objcard.TokenData = "";

                                objcard.RefCardAct = POSLink_BogusAccountNum;
                                objcard.RefCardLogo = POSLink_CardType;
                                objcard.RefCardEntry = "";
                                objcard.RefCardAuthID = POSLink_AuthCode;
                                objcard.RefCardTranID = POSLink_RefNum;
                                objcard.RefCardMerchID = "";
                                objcard.RefCardAuthAmount = POSLink_ApprovedAmt;
                                objcard.CardTranType = "Void";
                                objcard.AdjustFlag = "Y";
                                objcard.RefCardBalAmount = 0;
                                objcard.PrintXml = "";
                                updtstr = objcard.UpdateCardResponse();

                                if (updtstr == "")
                                {
                                    returnflag = true;
                                }
                                else
                                {
                                    returnflag = false;
                                }

                                Cursor = System.Windows.Input.Cursors.Arrow;

                            }
                            else
                            {
                                new MessageBoxWindow().Show(POSLink_ResultTxt, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blCardVarify = false;
                                break;
                            }

                        }
                        else
                        {
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            returnflag = false;
                            break;
                        }

                    }
                    else if (result.Code == POSLink.ProcessTransResultCode.TimeOut)
                    {
                        new MessageBoxWindow().Show("Action Timeout.", "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        returnflag = false;
                        break;
                    }
                    else
                    {
                        new MessageBoxWindow().Show(result.Msg, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        returnflag = false;
                        break;

                    }
                }
                */
                if (pmntgwy == 8)
                {
                    var evoTransactionForm = new XeposExternal.frm_EvoTransaction(0, GeneralFunctions.fnInt32(val3), isRefundOrVoid: true, isExecuteVoid: false,dtblPart:null,calledfrom:null);
                    blurGrid.Visibility = Visibility.Visible;
                    evoTransactionForm.ShowDialog();
                    blurGrid.Visibility = Visibility.Collapsed;
                    bool evosuccess = objcard.IsXeConnectTransactionRecordExist(GeneralFunctions.fnInt32(val3));

                    try
                    {
                        // EVo logging in DB
                        var respDTO = Newtonsoft.Json.JsonConvert.SerializeObject("VoidCC() ");
                        GeneralFunctions.SetDetailedTransactionLog("frm_POSTenderDLG.VoidCC()", "Response --> TransactionCompleted= " + evoTransactionForm.TransactionCompleted.ToString() + " -> " +
                            respDTO + $" --> Invoice Exists = {evosuccess.ToString()}  = Line 3630 --> 0, GeneralFunctions.fnInt32(val3)= {val3.ToString()}, isRefundOrVoid: true, isExecuteVoid: false", cctranid.ToString());
                    }
                    catch (Exception ex)
                    {
                    }

                    if (evosuccess && evoTransactionForm.TransactionCompleted)
                    {
                        DataTable dtblXE = objcard.FetchXeConnectTransactionRecord(GeneralFunctions.fnInt32(val3));

                        string Xestatuscode = "";
                        string Xeamount = "";
                        string Xetranid = "";
                        string Xeauthcode = "";



                        foreach (DataRow drxe in dtblXE.Rows)
                        {
                            Xestatuscode = drxe["StatusCode"].ToString();
                            Xeauthcode = drxe["ApprovalCode"].ToString();
                            Xetranid = drxe["TransactionId"].ToString();
                            Xeamount = drxe["Amount"].ToString();
                        }



                        string updtstr = "";


                        objcard.CardAmount = GeneralFunctions.fnDouble(Xeamount);

                        objcard.AuthCode = Xeauthcode;
                        objcard.Reference = val3;


                        objcard.RefCardAuthID = Xeauthcode;
                        objcard.RefCardTranID = Xetranid;
                        objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(Xeamount);
                        objcard.CardTranType = "Void";
                        objcard.ID = intCardTranID;
                        objcard.LoginUserID = SystemVariables.CurrentUserID;
                        objcard.AdjustFlag = "Y";
                        updtstr = objcard.UpdateCardTransOnEvoResponse();


                    }


                }


            }
            dt.Dispose();
            return returnflag;
        }

        private void simpleButton1_Click(object sender, RoutedEventArgs e)
        {
            /*if ((SystemVariables.CurrentUserID >  0) && (!SecurityPermission.AcssPOSTenderDiscount))
            {
                DocMessage.POSRestrictAccess();
                return;
            }*/

            if (!CheckFunctionButton("31r")) return;

            frm_POSDiscountDlg frm_POSDiscountDlg = new frm_POSDiscountDlg();
            try
            {
                frm_POSDiscountDlg.Subtotal = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numSubtotal.Text.Substring(numSubtotal.Text.IndexOf(" ") + 1)));
                frm_POSDiscountDlg.NewSubtotal = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numSubtotal.Text.Substring(numSubtotal.Text.IndexOf(" ") + 1)));
                frm_POSDiscountDlg.ShowDialog();
                if (frm_POSDiscountDlg.DialogResult == true)
                {
                    dblCoupon = GeneralFunctions.FormatDouble(frm_POSDiscountDlg.DiscountAmount);
                    strDiscountReason = frm_POSDiscountDlg.DiscountReason;
                    dblCouponPerc = GeneralFunctions.FormatDouble(frm_POSDiscountDlg.DiscountPercentage);
                    ArrangeSettings();
                    numAmount.Text = GeneralFunctions.FormatDouble(dblBalance).ToString();
                }
            }
            finally
            {
            }
        }

        #region Response From Precidia Socket Transaction

        private void SocketResponse_General(XmlDocument XDoc1)
        {
            XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
            for (int i = 0; i < nd.Count; ++i)
            {
                CGresp = nd[i].InnerText.ToUpper();
            }
            XmlNodeList nd1 = XDoc1.GetElementsByTagName("ResultText");
            for (int i = 0; i < nd1.Count; ++i)
            {
                CGresptxt = nd1[i].InnerText;
            }

            //if (CGresp.ToUpper().Trim() == "APPROVED")
            //{
            AuthCode = "";
            TranID = "";
            CardNum = "";
            CardExMM = "";
            CardExYY = "";
            CardLogo = "";
            CardType = "";
            ApprovedAmt = "";
            RefNo = "";
            CardEntry = "";
            AcqRef = "";
            Token = "";
            MerchantID = "";
            MercuryProcessData = "";
            MercuryTextResponse = "";
            MercuryPurchaseAmount = 0;
            MercuryTranCode = "";
            MercuryResponseOrigin = "";
            MercuryRecordNo = "";
            MercuryResponseReturnCode = "";
            PrecidiaCashBack = "";
            PrecidiaFoodStampBalance = "";
            MercuryGiftCardBalance = "";
            try
            {
                XmlNodeList nd2 = XDoc1.GetElementsByTagName("Authorization");
                for (int i = 0; i < nd2.Count; ++i)
                {
                    AuthCode = nd2[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd3 = XDoc1.GetElementsByTagName("AuthAmt");
                for (int i = 0; i < nd3.Count; ++i)
                {
                    ApprovedAmt = nd3[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd4 = XDoc1.GetElementsByTagName("CardNumber");
                for (int i = 0; i < nd4.Count; ++i)
                {
                    CardNum = nd4[i].InnerText;
                }
            }
            catch
            {
            }
            try
            {
                XmlNodeList nd5 = XDoc1.GetElementsByTagName("Id");
                for (int i = 0; i < nd5.Count; ++i)
                {
                    Token = nd5[i].InnerText;
                }
            }
            catch
            {
            }
            try
            {
                XmlNodeList nd6 = XDoc1.GetElementsByTagName("RecNum");
                for (int i = 0; i < nd6.Count; ++i)
                {
                    TranID = nd6[i].InnerText;
                }
            }
            catch
            {
            }
            try
            {
                XmlNodeList nd7 = XDoc1.GetElementsByTagName("CardType");
                for (int i = 0; i < nd7.Count; ++i)
                {
                    CardLogo = nd7[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd8 = XDoc1.GetElementsByTagName("MerchantId");
                for (int i = 0; i < nd8.Count; ++i)
                {
                    MerchantID = nd8[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd9 = XDoc1.GetElementsByTagName("RefData");
                for (int i = 0; i < nd9.Count; ++i)
                {
                    RefNo = nd9[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd10 = XDoc1.GetElementsByTagName("Cashback");
                for (int i = 0; i < nd10.Count; ++i)
                {
                    PrecidiaCashBack = nd10[i].InnerText;
                }
            }
            catch
            {
            }


            try
            {
                XmlNodeList nd11 = XDoc1.GetElementsByTagName("FoodBalance");
                for (int i = 0; i < nd11.Count; ++i)
                {
                    PrecidiaFoodStampBalance = nd11[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd12 = XDoc1.GetElementsByTagName("Balance");
                for (int i = 0; i < nd12.Count; ++i)
                {
                    MercuryGiftCardBalance = nd12[i].InnerText;
                }
            }
            catch
            {
            }
        }

        private void SocketResponse_CashBack(XmlDocument XDoc1)
        {
            XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
            for (int i = 0; i < nd.Count; ++i)
            {
                CGresp_Cashbk = nd[i].InnerText.ToUpper();
            }

            CG_Cashbk = 0;
            try
            {
                XmlNodeList nd2 = XDoc1.GetElementsByTagName("Response");
                for (int i = 0; i < nd2.Count; ++i)
                {
                    if (nd2[i].InnerText != "")
                    {
                        CG_Cashbk = GeneralFunctions.fnDouble(nd2[i].InnerText.Replace(SystemVariables.CurrencySymbol, ""));
                    }
                }
            }
            catch
            {
            }

        }

        private void SocketResponse_Signature(XmlDocument XDoc1)
        {
            try
            {
                XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
                for (int i = 0; i < nd.Count; ++i)
                {
                    CGresp_signature = nd[i].InnerText.ToUpper();
                }
            }
            catch
            {
            }
        }

        private void SocketResponse_GC(XmlDocument XDoc1)
        {
            XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
            for (int i = 0; i < nd.Count; ++i)
            {
                CGresp = nd[i].InnerText.ToUpper();
            }
            XmlNodeList nd1 = XDoc1.GetElementsByTagName("ResultText");
            for (int i = 0; i < nd1.Count; ++i)
            {
                CGresptxt = nd1[i].InnerText;
            }

            //if (CGresp.ToUpper().Trim() == "APPROVED")
            //{
            AuthCode = "";
            TranID = "";
            CardNum = "";
            CardExMM = "";
            CardExYY = "";
            CardLogo = "";
            CardType = "";
            ApprovedAmt = "";
            RefNo = "";
            CardEntry = "";
            AcqRef = "";
            Token = "";
            MerchantID = "";
            MercuryProcessData = "";
            MercuryTextResponse = "";
            MercuryPurchaseAmount = 0;
            MercuryTranCode = "";
            MercuryResponseOrigin = "";
            MercuryRecordNo = "";
            MercuryResponseReturnCode = "";
            MercuryGiftCardBalance = "";
            PrecidiaCashBack = "";
            try
            {
                XmlNodeList nd2 = XDoc1.GetElementsByTagName("Authorization");
                for (int i = 0; i < nd2.Count; ++i)
                {
                    AuthCode = nd2[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd3 = XDoc1.GetElementsByTagName("AuthAmt");
                for (int i = 0; i < nd3.Count; ++i)
                {
                    ApprovedAmt = nd3[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd4 = XDoc1.GetElementsByTagName("CardNumber");
                for (int i = 0; i < nd4.Count; ++i)
                {
                    CardNum = nd4[i].InnerText;
                }
            }
            catch
            {
            }
            try
            {
                XmlNodeList nd5 = XDoc1.GetElementsByTagName("Id");
                for (int i = 0; i < nd5.Count; ++i)
                {
                    Token = nd5[i].InnerText;
                }
            }
            catch
            {
            }
            try
            {
                XmlNodeList nd6 = XDoc1.GetElementsByTagName("RecNum");
                for (int i = 0; i < nd6.Count; ++i)
                {
                    TranID = nd6[i].InnerText;
                }
            }
            catch
            {
            }
            try
            {
                XmlNodeList nd7 = XDoc1.GetElementsByTagName("CardType");
                for (int i = 0; i < nd7.Count; ++i)
                {
                    CardLogo = nd7[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd8 = XDoc1.GetElementsByTagName("MerchantId");
                for (int i = 0; i < nd8.Count; ++i)
                {
                    MerchantID = nd8[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd9 = XDoc1.GetElementsByTagName("RefData");
                for (int i = 0; i < nd9.Count; ++i)
                {
                    RefNo = nd9[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd10 = XDoc1.GetElementsByTagName("Cashback");
                for (int i = 0; i < nd10.Count; ++i)
                {
                    PrecidiaCashBack = nd10[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd12 = XDoc1.GetElementsByTagName("Balance");
                for (int i = 0; i < nd12.Count; ++i)
                {
                    MercuryGiftCardBalance = nd12[i].InnerText;
                }
            }
            catch
            {
            }

            try
            {
                XmlNodeList nd11 = XDoc1.GetElementsByTagName("FoodBalance");
                for (int i = 0; i < nd11.Count; ++i)
                {
                    PrecidiaFoodStampBalance = nd11[i].InnerText;
                }
            }
            catch
            {
            }
        }

        private void SocketResponse_Display(XmlDocument XDoc1)
        {
            //XDoc1.Load(CGmonitor + PrecidiaResponseDisplayFile);
            XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
            for (int i = 0; i < nd.Count; ++i)
            {
                PrecidiaDisplayResult = nd[i].InnerText.ToUpper();
            }

            XmlNodeList nd1 = XDoc1.GetElementsByTagName("ResultText");
            for (int i = 0; i < nd1.Count; ++i)
            {
                PrecidiaDisplayResultText = nd1[i].InnerText.ToUpper();
            }

            XmlNodeList nd2 = XDoc1.GetElementsByTagName("Response");
            for (int i = 0; i < nd2.Count; ++i)
            {
                PrecidiaDisplayResponse = nd2[i].InnerText.ToUpper();
            }
        }

        private void SocketResponse_PPRESET(XmlDocument XDoc1)
        {
            //XDoc1.Load(CGmonitor + PrecidiaResponseDisplayFile);
            XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
            for (int i = 0; i < nd.Count; ++i)
            {
                PrecidiaDisplayResult = nd[i].InnerText.ToUpper();
            }

            XmlNodeList nd1 = XDoc1.GetElementsByTagName("ResultText");
            for (int i = 0; i < nd1.Count; ++i)
            {
                PrecidiaDisplayResultText = nd1[i].InnerText.ToUpper();
            }

            XmlNodeList nd2 = XDoc1.GetElementsByTagName("Response");
            for (int i = 0; i < nd2.Count; ++i)
            {
                PrecidiaDisplayResponse = nd2[i].InnerText.ToUpper();
            }
        }

        #endregion

        #region Card Processing Functions

        private bool CheckPrecidiaProcced()
        {
            bool blFind = false;
            foreach (DataRow drC in dtblTender.Rows)
            {
                if (drC["TENDER"].ToString() == "Debit Card")
                {
                    blFind = true;
                    break;
                }
            }
            if (blFind)
            {
                if (Settings.PrecidiaUsePINPad == "Y") return true;
                else return false;
            }
            else
                return true;
        }

        private bool CheckPrecidiaProcced2()
        {
            bool blFind = false;
            foreach (DataRow drC in dtblTender.Rows)
            {
                if (drC["TENDER"].ToString() == "Food Stamps")
                {
                    blFind = true;
                    break;
                }
            }
            if (blFind)
            {
                if (Settings.PrecidiaUsePINPad == "Y") return true;
                else return false;
            }
            else
                return true;
        }

        private bool CheckIfCardTenderingExists()
        {
            bool blFind = false;
            foreach (DataRow drC in dtblTender.Rows)
            {
                if (((drC["TENDER"].ToString() == "Visa") || (drC["TENDER"].ToString() == "MasterCard") || (drC["TENDER"].ToString() == "American Express") ||
                    (drC["TENDER"].ToString() == "Discover") || (drC["TENDER"].ToString() == "Diner") || (drC["TENDER"].ToString() == "Debit Card") ||
                    (drC["TENDER"].ToString() == "Credit Card") || (drC["TENDER"].ToString() == "Credit Card - Voice Auth") ||
                    (drC["TENDER"].ToString() == "Credit Card (STAND-IN)") || (drC["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)")
                    || (drC["TENDER"].ToString() == "Mercury Gift Card") || (drC["TENDER"].ToString() == "Precidia Gift Card") || (drC["TENDER"].ToString() == "Datacap Gift Card") || (drC["TENDER"].ToString() == "POSLink Gift Card") || (drC["TENDER"].ToString() == "EBT Cash")
                    || (drC["TENDER"].ToString() == "EBT Voucher")) && (drC["PROCESSCARD"].ToString() == "N"))
                {
                    blFind = true;
                    break;
                }
            }
            if (blFind)
                return true;
            else
                return false;
        }

        private bool CheckIfEBTTenderingExists()
        {
            bool blFind = false;
            foreach (DataRow drC in dtblTender.Rows)
            {
                if ((drC["TENDER"].ToString() == "Food Stamps") && (drC["PROCESSCARD"].ToString() == "N"))
                {
                    blFind = true;
                    break;
                }
            }
            if (blFind)
                return true;
            else
                return false;
        }

        private DataTable GetCardTransData(int prm)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;
            return objp.FetchCardTransData(prm);
        }

        private void RearrangeTenderGridAfterPartialApproval(string tendertype, string amt)
        {
            DataTable dtbl = new DataTable();
            dtbl = grdTender.ItemsSource as DataTable;
            foreach (DataRow dr in dtbl.Rows)
            {
                if (dr["TENDER"].ToString() == tendertype)
                {
                    dr["AMOUNT"] = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(amt));
                    break;
                }
            }

            grdTender.ItemsSource = dtbl;
            dtbl.Dispose();

            FoodStampTendering = false;
            ArrangeSettings();
            numAmount.Text = GeneralFunctions.FormatDouble(dblBalance).ToString();
            GeneralFunctions.SetFocus(numAmount);
            numAmount.SelectionLength = 0;
        }

        private void RearrangeTenderGrid(string processcard)
        {
            DataTable dtbl = new DataTable();
            dtbl = grdTender.ItemsSource as DataTable;
            string crd = "";
            if (processcard.ToUpper() == "VISA") crd = "Visa";
            else if (processcard.ToUpper() == "M/C") crd = "MasterCard";
            else if (processcard.ToUpper() == "AMEX") crd = "American Express";
            else if (processcard.ToUpper() == "DISC") crd = "Discover";
            else crd = "Debit Card";
            foreach (DataRow dr in dtbl.Rows)
            {
                if ((dr["TENDER"].ToString() == "Visa") || (dr["TENDER"].ToString() == "MasterCard") || (dr["TENDER"].ToString() == "American Express") || (dr["TENDER"].ToString() == "Discover") || (dr["TENDER"].ToString() == "Debit Card"))
                {
                    int i = ReturnID(crd);
                    dr["ID"] = i;
                    dr["TENDER"] = crd;
                    break;
                }
            }

            grdTender.ItemsSource = dtbl;
            dtbl.Dispose();
        }

        private bool IsEBTPayment(int prm)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;
            return objp.IsEBTPayment(prm);
        }

        private DataTable GetCardTransData1(int prm)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;
            return objp.FetchCardTransData1(prm);
        }

        private bool IsCardPayment1(int prm)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;
            return objp.IsCardPayment2(prm);
        }

        private bool IsCardPayment3(int prm)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;
            return objp.IsCardPayment3(prm);
        }

        private bool IsMercuryGCPayment(int prm)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;
            return objp.IsCardPayment4(prm);
        }

        // Element/ Mercury/ Precidia EBT Transaction on Sale

        private bool EBTVarify()
        {
            intEBTCardTranID = 0;
            blEBTVarify = false;
            double dblCardAmt = 0;
            string strCard = "";
            AuthCode = "";

            foreach (DataRow drP in dtblTender.Rows)
            {
                if ((drP["TENDER"].ToString() == "Food Stamps") && (drP["PROCESSCARD"].ToString() == "N"))
                {
                    intEBTCardTranID = 0;
                    if (drP["CCTRANNO"].ToString() != "") continue;
                    dblCardAmt = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drP["AMOUNT"].ToString()));
                    strCard = drP["TENDER"].ToString();

                    PosDataObject.POS objcard = new PosDataObject.POS();
                    objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    objcard.CustomerID = intCustID;
                    objcard.LoginUserID = SystemVariables.CurrentUserID;
                    objcard.EmployeeID = SystemVariables.CurrentUserID;
                    objcard.CardType = strCard;
                    objcard.CardAmount = dblCardAmt;
                    objcard.PaymentGateway = Settings.PaymentGateway;
                    objcard.TerminalName = Settings.TerminalName;
                    if (Settings.PaymentGateway == 2)
                    {
                        objcard.LogFileName = MercuryLogFile;
                    }
                    else if (Settings.PaymentGateway == 3)
                    {
                        objcard.LogFileName = PrecidiaLogFile;
                    }
                    else if (Settings.PaymentGateway == 5)
                    {
                        objcard.LogFileName = DatacapLogFile;
                    }
                    else if (Settings.PaymentGateway == 6)
                    {
                        objcard.LogFileName = DatacapEMVLogFile;
                    }
                    else
                    {
                        objcard.LogFileName = "";
                    }
                    try
                    {
                        string strerr = objcard.InsertCardTrans();
                    }
                    catch (Exception ex)
                    {
                        blEBTVarify = false;
                        new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, "EBT Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        break;
                    }
                    intEBTCardTranID = objcard.CardTranID;

                    cardidentity.Rows.Add(new object[] { intEBTCardTranID.ToString() });

                    Cursor = System.Windows.Input.Cursors.Hand;
                    string strAuthCode = "0";

                    /*
                    if (Settings.PaymentGateway == 1)
                    {
                        try
                        {
                            ElementExpress.ElementPS pg = new ElementExpress.ElementPS();
                            pg.ElementApplicationID = Settings.ElementHPApplicationID;
                            pg.ElementAccountID = Settings.ElementHPAccountID;
                            pg.ElementAccountToken = Settings.ElementHPAccountToken;
                            pg.ElementAcceptorID = Settings.ElementHPAcceptorID;
                            pg.TranAmount = GeneralFunctions.FormatDouble1(dblCardAmt);
                            pg.ElementTerminalID = Settings.ElementHPTerminalID.PadLeft(4, '0');
                            pg.RefNo = intCardTranID.ToString();
                            pg.TktNo = intCardTranID.ToString();
                            pg.ApplicationVersion = GeneralFunctions.PaymentGatewayApplicationVersion();

                            if (strCard != "Debit Card")
                            {
                                if (Settings.ElementZipProcessing == "Y")
                                {
                                    frmPOSCCInfo frm_POSCCInfo = new frmPOSCCInfo();
                                    try
                                    {
                                        frm_POSCCInfo.Amount = dblCardAmt;
                                        frm_POSCCInfo.ShowDialog();
                                        if (frm_POSCCInfo.DialogResult == MessageBoxResult.OK)
                                        {
                                            pg.IsBillingInfo = true;
                                            pg.BillingAddress1 = frm_POSCCInfo.txtAdd.Text.Trim();
                                            pg.BillingZIP = frm_POSCCInfo.txtZIP.Text.Trim();
                                        }
                                        else
                                        {
                                            pg.IsBillingInfo = false;
                                        }
                                    }
                                    finally
                                    {
                                        frm_POSCCInfo.Dispose();
                                    }
                                }
                                this.Refresh();
                            }

                            string msg1 = "";
                            string msg2 = "";

                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ElementHPMode == 0) pg.CreditAuthentication(ref msg1, ref msg2, ref strAuthCode);
                                if (Settings.ElementHPMode == 1) pg.TestCreditAuthentication(ref msg1, ref msg2, ref strAuthCode);
                            }
                            else
                            {
                                if (strCard != "Debit Card")
                                {
                                    if (Settings.ElementHPMode == 0) pg.POSCreditSale(ref msg1, ref msg2, ref strAuthCode);
                                    if (Settings.ElementHPMode == 1) pg.TestPOSCreditSale(ref msg1, ref msg2, ref strAuthCode);
                                }
                                else
                                {
                                    if (Settings.ElementHPMode == 0) pg.POSDebitSale(ref msg1, ref msg2, ref strAuthCode);
                                    if (Settings.ElementHPMode == 1) pg.TestPOSDebitSale(ref msg1, ref msg2, ref strAuthCode);
                                }
                            }




                            if (msg1 == "0")
                            {
                                frmPaymentWindow frm_PaymentWindow = new frmPaymentWindow();
                                try
                                {
                                    frm_PaymentWindow.TranID = strAuthCode;
                                    if (Settings.ElementHPMode == 0) frm_PaymentWindow.IsTestMode = false;
                                    if (Settings.ElementHPMode == 1) frm_PaymentWindow.IsTestMode = true;
                                    frm_PaymentWindow.ShowDialog();

                                    if (frm_PaymentWindow.DialogResult == MessageBoxResult.OK)
                                    {
                                        blCardVarify = true;
                                        AuthCode = frm_PaymentWindow.ApprovalNumber;
                                        TranID = frm_PaymentWindow.TranID;
                                        CardNum = frm_PaymentWindow.CardNumber;
                                        CardExMM = frm_PaymentWindow.CardExMM;
                                        CardExYY = frm_PaymentWindow.CardExYY;
                                        CardLogo = frm_PaymentWindow.CardLogo;
                                        CardType = frm_PaymentWindow.CardType;
                                        ApprovedAmt = frm_PaymentWindow.ApprovedAmt;
                                        RefNo = frm_PaymentWindow.RefNo;
                                        CardEntry = frm_PaymentWindow.CardEntry;
                                    }
                                }
                                finally
                                {
                                    frm_PaymentWindow.Dispose();
                                }
                                if (blCardVarify)
                                {
                                    foreach (DataRow dra1 in dtblTender.Rows)
                                    {
                                        if (dra1["TENDER"].ToString() == strCard)
                                        {
                                            dra1["CCTRANNO"] = intCardTranID.ToString();
                                            break;
                                        }
                                    }
                                    string updtstr = "";
                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = 0;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardType = CardLogo;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = "";
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardTranType = "Sale";
                                    objcard.AdjustFlag = "N";
                                    updtstr = objcard.UpdateCardResponse();

                                    if (updtstr == "")
                                    {
                                        blCardVarify = true;
                                    }
                                    else
                                    {
                                        blCardVarify = false;
                                        break;
                                    }
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                }
                                Cursor =System.Windows.Input.Cursors.Arrow;
                            }
                            else
                            {
                                blCardVarify = false;
                                new MessageBoxWindow().Show(msg2, "Credit Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor =System.Windows.Input.Cursors.Arrow;
                                break;
                            }
                        }
                        catch (Exception ex)
                        {
                            blCardVarify = false;
                            new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.", "Credit Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            Cursor =System.Windows.Input.Cursors.Arrow;
                            break;
                        }
                    }

                    if (Settings.PaymentGateway == 2)
                    {
                        WriteToMercuryLogFile("Tender: " + strCard + " - start");
                        try
                        {
                            MercuryPayment.clsMercuryPymnt mp = new MercuryPayment.clsMercuryPymnt();
                            mp.MerchantID = Settings.MercuryHPMerchantID;
                            mp.UserID = Settings.MercuryHPUserID;
                            mp.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                            mp.InvNo = intEBTCardTranID.ToString();
                            mp.PurchaseAmount = dblCardAmt;

                            string msg1 = "";
                            string msg2 = "";


                            if (Settings.ElementHPMode == 0) mp.EBTSales(ref msg1);
                            if (Settings.ElementHPMode == 1) mp.TestEBTSales(ref msg1);


                            GeneralFunctions.CreateMercuryTransactionXML(mp.MercuryXmlResponse, mp.Token);

                            WriteToMercuryLogFile("Response: " + msg1);

                            if (msg1 != "")
                            {
                                if (msg1.ToUpper().Trim() == "APPROVED")
                                {
                                    double AthAmount = mp.ApprovedAmt == null ? 0 : GeneralFunctions.fnDouble(mp.ApprovedAmt);
                                    if (AthAmount < dblCardAmt)
                                    {
                                        new MessageBoxWindow().Show(Properties.Resources."Card only authorized $","frmPOSTenderDlg_msg_Cardonlyauthorized") + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources."Please select another tender to finish the transaction.","frmPOSTenderDlg_msg_Pleaseselectanothertendertofin"), "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                        WriteToMercuryLogFile("Less Authorized");
                                    }
                                    try
                                    {
                                        AuthCode = mp.AuthID;
                                        TranID = mp.TranID;
                                        CardNum = mp.CardNumber;
                                        CardExMM = mp.CardExMM;
                                        CardExYY = mp.CardExYY;
                                        CardLogo = mp.CardLogo;
                                        CardType = mp.CardType;
                                        ApprovedAmt = mp.ApprovedAmt;
                                        RefNo = mp.RefNo;
                                        MercuryPurchaseAmount = mp.PurchaseAmount;
                                        MercuryGiftCardBalance = mp.BalanceAmt;
                                        MercuryProcessData = mp.MercuryProcessData;
                                        MercuryTranCode = mp.MercuryTranCode;
                                        MercuryTextResponse = mp.MercuryTextResponse;
                                        MercuryRecordNo = mp.MercuryRecordNo;
                                        MercuryResponseOrigin = mp.MercuryResponseOrigin;
                                        MercuryResponseReturnCode = mp.MercuryResponseReturnCode;
                                        CardEntry = mp.CardEntry;
                                        Token = mp.Token;
                                        AcqRef = mp.AcqRefData;
                                        strMercuryMerchantID = mp.MerchantID;


                                        if (AuthCode == null) AuthCode = "";
                                        if (TranID == null) TranID = "";
                                        if (CardNum == null) CardNum = "";
                                        if (CardExMM == null) CardExMM = "";
                                        if (CardExYY == null) CardExYY = "";
                                        if (CardLogo == null) CardLogo = "";
                                        if (CardType == null) CardType = "";
                                        if (ApprovedAmt == null) ApprovedAmt = "0";
                                        if (RefNo == null) RefNo = "";
                                        if (CardEntry == null) CardEntry = "";
                                        if (Token == null) Token = "";
                                        if (AcqRef == null) AcqRef = "";

                                        if (MercuryProcessData == null) MercuryProcessData = "";
                                        if (MercuryTranCode == null) MercuryTranCode = "";
                                        if (MercuryRecordNo == null) MercuryRecordNo = "";
                                        if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                                        if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                                        if (MercuryTextResponse == null) MercuryTextResponse = "";
                                        if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";

                                        if ((MercuryTextResponse.ToUpper().Trim() == "AP") || (MercuryTextResponse.ToUpper().Trim() == "AP*") ||
                                            (MercuryTextResponse.ToUpper().Trim() == "APPROVED STANDIN") ||
                                            (MercuryTextResponse.ToUpper().Trim() == "AP-NEW INFO")
                                            || (MercuryTextResponse.ToUpper().Trim() == "APPROVED"))
                                        {
                                            foreach (DataRow dra in dtblTender.Rows)
                                            {
                                                if (dra["TENDER"].ToString() == strCard)
                                                {
                                                    dra["CCTRANNO"] = intEBTCardTranID.ToString();
                                                    break;
                                                }
                                            }
                                            string updtstr = "";

                                            objcard.MercuryInvNo = TranID;
                                            objcard.MercuryProcessData = MercuryProcessData;
                                            objcard.MercuryTranCode = MercuryTranCode;
                                            objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                            objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                            objcard.MercuryRecordNo = MercuryRecordNo;
                                            objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                            objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                            objcard.MercuryTextResponse = MercuryTextResponse;

                                            objcard.CardType = CardLogo;
                                            objcard.AuthCode = AuthCode;
                                            objcard.Reference = RefNo;
                                            objcard.AcqRefData = AcqRef;
                                            objcard.TokenData = Token;

                                            objcard.RefCardAct = CardNum;
                                            objcard.RefCardLogo = CardLogo;
                                            objcard.RefCardEntry = CardEntry;
                                            objcard.RefCardAuthID = AuthCode;
                                            objcard.RefCardTranID = TranID;
                                            objcard.RefCardMerchID = strMercuryMerchantID;
                                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard.CardTranType = "Sale";
                                            objcard.AdjustFlag = "N";
                                            objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                            objcard.PrintXml = "";
                                            updtstr = objcard.UpdateCardResponse();

                                            if (updtstr == "")
                                            {
                                                blEBTVarify = true;
                                                drP["PROCESSCARD"] = "Y";
                                            }
                                            else
                                            {
                                                GeneralFunctions.SetTransactionLog("EBT update after approved fail", updtstr);
                                                blEBTVarify = false;
                                                break;
                                            }
                                            Cursor =System.Windows.Input.Cursors.Arrow;
                                        }

                                        if (MercuryTextResponse.ToUpper().Trim() == "PARTIAL AP")
                                        {
                                            foreach (DataRow dra in dtblTender.Rows)
                                            {
                                                if (dra["TENDER"].ToString() == strCard)
                                                {
                                                    dra["CCTRANNO"] = intEBTCardTranID.ToString();
                                                    break;
                                                }
                                            }
                                            string updtstr = "";
                                            objcard.MercuryInvNo = TranID;
                                            objcard.MercuryProcessData = MercuryProcessData;
                                            objcard.MercuryTranCode = MercuryTranCode;
                                            objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                            objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                            objcard.MercuryRecordNo = MercuryRecordNo;
                                            objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                            objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                            objcard.MercuryTextResponse = MercuryTextResponse;

                                            objcard.CardType = CardLogo;
                                            objcard.AuthCode = AuthCode;
                                            objcard.Reference = RefNo;
                                            objcard.AcqRefData = AcqRef;
                                            objcard.TokenData = Token;

                                            objcard.RefCardAct = CardNum;
                                            objcard.RefCardLogo = CardLogo;
                                            objcard.RefCardEntry = CardEntry;
                                            objcard.RefCardAuthID = AuthCode;
                                            objcard.RefCardTranID = TranID;
                                            objcard.RefCardMerchID = strMercuryMerchantID;
                                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard.CardTranType = "Sale";
                                            objcard.AdjustFlag = "N";
                                            objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                            objcard.PrintXml = "";
                                            updtstr = objcard.UpdateCardResponse();
                                            if (updtstr == "")
                                            {
                                                drP["PROCESSCARD"] = "Y";
                                                RearrangeTenderGridAfterPartialApproval(strCard, ApprovedAmt);
                                                blEBTVarify = false;
                                                GeneralFunctions.SetTransactionLog("EBT partial approved", updtstr);
                                                break;
                                            }
                                            else
                                            {
                                                GeneralFunctions.SetTransactionLog("EBT update after partial approved fail", updtstr);
                                                blEBTVarify = false;
                                                break;
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        GeneralFunctions.SetTransactionLog("Catch - EBT update after approved", ex.Message);
                                        blEBTVarify = false;
                                        break;
                                    }

                                }
                                else
                                {
                                    blEBTVarify = false;
                                    PrecidiaErrorText = mp.MercuryTextResponse;
                                    new MessageBoxWindow().Show(msg1, "EBT", MessageBoxButton.OK, MessageBoxImage.Information);
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    break;
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            GeneralFunctions.SetTransactionLog("Catch - EBT update", ex.Message);
                            blEBTVarify = false;
                            new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.", "EBT", MessageBoxButton.OK, MessageBoxImage.Information);

                            Cursor =System.Windows.Input.Cursors.Arrow;
                            break;
                        }
                    }

                    if (Settings.PaymentGateway == 3)
                    {
                        bool boolPrecidiaLessAuthorised = false;

                        WriteToPrecidiaLogFile("Tender: " + strCard + " - start");

                        blCG = false;
                        string resp = "";
                        string resptxt = "";

                        //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                        CGtrantype = "EBTFOODSALE";

                        CGamt = dblCardAmt;
                        PosDataObject.POS objPOS = new PosDataObject.POS();
                        objPOS.Connection = SystemVariables.Conn;
                        CGinv = objPOS.FetchMaxInvoiceNo();


                        XmlDocument XDoc = new XmlDocument();

                        // Create root node.
                        XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

                        XDoc.ApSystem.Drawing.PendChild(XElemRoot);

                        XmlElement XTemp = XDoc.CreateElement("Command");
                        XTemp.InnerText = CGtrantype;
                        XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                        XTemp = XDoc.CreateElement("Id");
                        XTemp.InnerText = CGinv.ToString();
                        XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                        XTemp = XDoc.CreateElement("Amount");
                        XTemp.InnerText = CGamt.ToString("f");
                        XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                        if (drP["MANUAL"].ToString() == "Y")
                        {
                            XTemp = XDoc.CreateElement("Input");
                            XTemp.InnerText = "MANUAL";
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                        }
                        else
                        {
                            XTemp = XDoc.CreateElement("Input");
                            XTemp.InnerText = "EXTERNAL";
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                        }

                        XTemp = XDoc.CreateElement("KeepAlive");
                        XTemp.InnerText = "N";
                        XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                        XTemp = XDoc.CreateElement("ClientMAC");
                        XTemp.InnerText = Settings.PrecidiaClientMAC;
                        XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                        if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc.OuterXml);

                        XmlDocument XmlResponse = new XmlDocument();

                        bool bTelnet = false;
                        try
                        {
                            SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                            bTelnet = true;
                        }
                        catch (Exception ex)
                        {
                            WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                            bTelnet = false;
                        }

                        if (bTelnet)
                        {
                            if (XmlResponse.InnerXml != "")
                            {
                                if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse.InnerXml);

                                SocketResponse_General(XmlResponse);

                                resp = CGresp;
                                resptxt = CGresptxt;

                                WriteToPrecidiaLogFile("Response: " + resp);
                                WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));

                                if (resp != "")
                                {
                                    if ((resp == "APPROVED") || (resptxt == "REPEATED TRANS"))
                                    {
                                        double AthAmount = ApprovedAmt == null ? 0 : GeneralFunctions.fnDouble(ApprovedAmt);
                                        if (AthAmount < CGamt)
                                        {
                                            new MessageBoxWindow().Show(Properties.Resources.Card_only_authorized + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources.Please_select_another_tender_to_finish_the_transaction_, "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                            drP["AMOUNT"] = GeneralFunctions.FormatDouble1(AthAmount);
                                            boolPrecidiaLessAuthorised = true;
                                        }

                                        foreach (DataRow dra1 in dtblTender.Rows)
                                        {
                                            if ((dra1["TENDER"].ToString() == strCard) && (dra1["CCTRANNO"].ToString() == ""))
                                            {
                                                dra1["CCTRANNO"] = intEBTCardTranID.ToString();
                                                break;
                                            }
                                        }

                                        string updtstr = "";
                                        objcard.MercuryRecordNo = "";
                                        objcard.MercuryResponseOrigin = "";
                                        objcard.MercuryResponseReturnCode = "";
                                        objcard.MercuryTextResponse = "";

                                        objcard.MercuryInvNo = "";
                                        objcard.MercuryProcessData = "";
                                        objcard.MercuryTranCode = "";
                                        objcard.MercuryPurchaseAmount = 0;
                                        objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                        objcard.CardType = CardLogo;
                                        objcard.AuthCode = AuthCode;
                                        objcard.Reference = RefNo;
                                        objcard.AcqRefData = "";
                                        objcard.TokenData = "";

                                        objcard.RefCardAct = CardNum;
                                        objcard.RefCardLogo = CardLogo;
                                        objcard.RefCardEntry = CardEntry;
                                        objcard.RefCardAuthID = AuthCode;
                                        objcard.RefCardTranID = TranID;
                                        objcard.RefCardMerchID = "";
                                        objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                        objcard.CardTranType = "Sale";
                                        objcard.AdjustFlag = "N";
                                        objcard.RefCardBalAmount = GeneralFunctions.fnDouble(PrecidiaFoodStampBalance);
                                        objcard.PrintXml = "";
                                        updtstr = objcard.UpdateCardResponse();

                                        if (!boolPrecidiaLessAuthorised)
                                        {
                                            if (updtstr == "")
                                            {
                                                WriteToPrecidiaLogFile("Card Trans updated");
                                                blEBTVarify = true;
                                                drP["PROCESSCARD"] = "Y";
                                            }
                                            else
                                            {
                                                PrecidiaErrorText = Properties.Resources."Record Update: ", "frmPOSTenderDlg_RecordUpdate") + updtstr;
                                                blEBTVarify = false;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            if (updtstr == "")
                                            {
                                                WriteToPrecidiaLogFile("Card Trans updated");
                                            }
                                            drP["PROCESSCARD"] = "Y";
                                            blEBTVarify = false;
                                            break;
                                        }

                                    }
                                    else
                                    {
                                        WriteToPrecidiaLogFile(resptxt);
                                        PrecidiaErrorText = "Error: " + resptxt;
                                        blEBTVarify = false;
                                    }
                                }
                                else
                                {

                                }
                            }
                        }
                    }

                    if (Settings.PaymentGateway == 5)
                    {
                        WriteToDatacapLogFile("Tender: " + strCard + " - start");

                        bool boolDatacapLessAuthorised = false;
                        Dcap_CmdStatus = "";
                        Dcap_TextResponse = "";
                        Dcap_AcctNo = "";
                        Dcap_Merchant = "";
                        Dcap_TranCode = "";
                        Dcap_CardType = "";
                        Dcap_AuthCode = "";
                        Dcap_RefNo = "";
                        Dcap_AcqRefData = "";
                        Dcap_RecordNo = "";
                        Dcap_InvoiceNo = "";
                        Dcap_TranAmt = 0;
                        Dcap_AuthAmt = 0;
                        Dcap_CashBkAmt = 0;
                        Dcap_BalAmt = 0;

                        bool bproceed = true;
                        string request_xml = "";
                        string response_xml = "";
                        DSIPDCXLib.DsiPDCX dsipdx = new DSIPDCXLib.DsiPDCX();

                        dsipdx.ServerIPConfig(Settings.DatacapServer, 1);

                        PosDataObject.POS objPOS = new PosDataObject.POS();
                        objPOS.Connection = SystemVariables.Conn;
                        int dcap_max_inv = objPOS.FetchMaxInvoiceNo();

                        request_xml = GeneralFunctions.Datacap_EBTSale_Request_XML(dblCardAmt, dcap_max_inv, drP["MANUAL"].ToString() == "Y" ? true : false);
                        try
                        {
                            response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);

                         //   response_xml = "<RStream><CmdResponse><ResponseOrigin>Processor</ResponseOrigin><DSIXReturnCode>000000</DSIXReturnCode>"
                         //       + "<CmdStatus>Approved</CmdStatus><TextResponse>APPROVED</TextResponse><UserTraceData></UserTraceData></CmdResponse>"
                        //        + "<TranResponse><MerchantID>595901</MerchantID><AcctNo>XXXXXXXXXXXX6781</AcctNo><ExpDate>XXXX</ExpDate><CardType>Foodstamp</CardType>"
                        //        + "<TranCode>Sale</TranCode><CaptureStatus>Captured</CaptureStatus><RefNo>0011</RefNo><InvoiceNo>465590</InvoiceNo><Amount><Purchase>1.00</Purchase><Authorize>1.00</Authorize>"
                       //         + "<Balance>15.38</Balance></Amount></TranResponse></RStream>";
                        }
                        catch
                        {
                            bproceed = false;
                        }

                        if (bproceed)
                        {
                            GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);

                            if (Dcap_CmdStatus == "Approved")
                            {

                                double AthAmount = Dcap_AuthAmt;

                                if (AthAmount < Dcap_TranAmt)
                                {
                                    //WriteToPrecidiaLogFile("Less authorized");
                                    new MessageBoxWindow().Show(Properties.Resources.Card_only_authorized + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources.Please_select_another_tender_to_finish_the_transaction_, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                    drP["AMOUNT"] = GeneralFunctions.FormatDouble1(AthAmount);
                                    boolDatacapLessAuthorised = true;
                                }

                                foreach (DataRow dra1 in dtblTender.Rows)
                                {
                                    if ((dra1["TENDER"].ToString() == strCard) && (dra1["CCTRANNO"].ToString() == ""))
                                    {
                                        dra1["CCTRANNO"] = intEBTCardTranID.ToString();
                                        break;
                                    }
                                }

                                string updtstr = "";
                                objcard.MercuryRecordNo = "";
                                objcard.MercuryResponseOrigin = "";
                                objcard.MercuryResponseReturnCode = "";
                                objcard.MercuryTextResponse = "";

                                objcard.MercuryInvNo = Dcap_InvoiceNo;
                                objcard.MercuryProcessData = "";
                                objcard.MercuryTranCode = "";
                                objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                                objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                                objcard.CardType = Dcap_CardType;
                                objcard.AuthCode = Dcap_AuthCode;
                                objcard.Reference = Dcap_RefNo;
                                objcard.AcqRefData = Dcap_AcqRefData;
                                objcard.TokenData = Dcap_RecordNo;

                                objcard.RefCardAct = Dcap_AcctNo;
                                objcard.RefCardLogo = Dcap_CardType;
                                objcard.RefCardEntry = CardEntry;
                                objcard.RefCardAuthID = Dcap_AuthCode;
                                objcard.RefCardTranID = TranID;
                                objcard.RefCardMerchID = Dcap_Merchant;
                                objcard.RefCardAuthAmount = Dcap_AuthAmt;
                                objcard.CardTranType = "Sale";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = Dcap_BalAmt;
                                objcard.PrintXml = Dcap_PrintDraft;
                                updtstr = objcard.UpdateCardResponse();

                                if (!boolDatacapLessAuthorised)
                                {
                                    if (updtstr == "")
                                    {
                                        blEBTVarify = true;
                                        drP["PROCESSCARD"] = "Y";
                                    }
                                    else
                                    {

                                        blEBTVarify = false;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (updtstr == "")
                                    {
                                        drP["PROCESSCARD"] = "Y";
                                    }

                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    blEBTVarify = false;
                                    break;
                                }
                                
                            }
                            else
                            {
                                new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "EBT Sale", MessageBoxButton.OK, MessageBoxImage.Information);
                                blEBTVarify = false;
                                break;
                            }
                        }
                    }
                    */

                    /*
                    if (Settings.PaymentGateway == 7) // POSLink
                    {
                        POSLinkLogPath = POSLinkLogFilePath();
                        bool boolPOSLinkLessAuthorised = false;
                        POSLink_ResultCode = "";
                        POSLink_ResultTxt = "";
                        POSLink_RefNum = "";
                        POSLink_AuthCode = "";
                        POSLink_CardType = "";
                        POSLink_BogusAccountNum = "";
                        POSLink_CashBack = 0;
                        POSLink_RequestedAmt = 0;
                        POSLink_ApprovedAmt = 0;
                        POSLink_RemainingBalance = 0;
                        POSLink_ExtraBalance = 0;

                        PosDataObject.POS objPOS = new PosDataObject.POS();
                        objPOS.Connection = SystemVariables.Conn;
                        int refinv = objPOS.FetchMaxInvoiceNo();

                        POSLink.PosLink pg = new POSLink.PosLink();

                        pg.CommSetting = GeneralFunctions.GetPOSLinkCommSetup();

                        POSLink.LogManagement plog = new POSLink.LogManagement();
                        plog.LogLevel = 1;
                        plog.LogFilePath = System.IO.Path.GetDirectoryName(POSLinkLogPath);
                        pg.LogManageMent = plog;

                        POSLink.PaymentRequest paymentRequest = new POSLink.PaymentRequest();


                        paymentRequest.TenderType = paymentRequest.ParseTenderType("EBT_FOODSTAMP");
                        paymentRequest.TransType = paymentRequest.ParseTransType("SALE");

                        paymentRequest.Amount = Convert.ToString(dblCardAmt * 100);

                        paymentRequest.OrigRefNum = "";
                        paymentRequest.InvNum = refinv.ToString();
                        paymentRequest.UserID = "";
                        paymentRequest.PassWord = "";
                        paymentRequest.ClerkID = "";
                        paymentRequest.ServerID = "";
                        paymentRequest.ECRRefNum = "1";

                        if (drP["Manual"].ToString() == "Y")
                        {
                            POSLink.ManageRequest manageRequest = new POSLink.ManageRequest();
                            manageRequest.ManualEntryFlag = "1";
                            manageRequest.Timeout = "200";
                            manageRequest.TransType = manageRequest.ParseTransType("INPUTACCOUNT");
                            manageRequest.EDCType = manageRequest.ParseEDCType("EBT_FOODSTAMP");

                            manageRequest.ExpiryDatePrompt = "1";

                            pg.ManageRequest = manageRequest;
                            POSLink.ProcessTransResult resultm = pg.ProcessTrans();

                            string mAccountNo = "";
                            string mExp = "";
                            if (resultm.Code == POSLink.ProcessTransResultCode.OK)
                            {
                                POSLink.ManageResponse mr = pg.ManageResponse;
                                mAccountNo = mr.PAN;
                                mExp = mr.ExpiryDate;
                            }
                            paymentRequest.ExtData = "<ExtData><Account>" + mAccountNo + "</Account><ExpDate>" + mExp + "</ExpDate></ExtData>";
                        }

                        pg.PaymentRequest = paymentRequest;

                        POSLink.ProcessTransResult result = new POSLink.ProcessTransResult();

                        result = pg.ProcessTrans();

                        if (result.Code == POSLink.ProcessTransResultCode.OK)
                        {
                            POSLink.PaymentResponse paymentResponse = pg.PaymentResponse;
                            if (paymentResponse != null && paymentResponse.ResultCode != null)
                            {
                                POSLink_ResultCode = paymentResponse.ResultCode;
                                POSLink_ResultTxt = paymentResponse.ResultTxt;
                                POSLink_RefNum = paymentResponse.RefNum;

                                POSLink_RequestedAmt = GeneralFunctions.fnDouble(paymentResponse.RequestedAmount) / 100;
                                POSLink_ApprovedAmt = GeneralFunctions.fnDouble(paymentResponse.ApprovedAmount) / 100;
                                POSLink_RemainingBalance = GeneralFunctions.fnDouble(paymentResponse.RemainingBalance) / 100;
                                POSLink_ExtraBalance = GeneralFunctions.fnDouble(paymentResponse.ExtraBalance) / 100;

                                POSLink_BogusAccountNum = paymentResponse.BogusAccountNum;
                                POSLink_CardType = paymentResponse.CardType;


                                POSLink_AuthCode = paymentResponse.AuthCode;

                                if (POSLink_ResultCode == "000000") // Approved
                                {
                                    double AthAmount = POSLink_ApprovedAmt;

                                    if (AthAmount < POSLink_RequestedAmt)
                                    {
                                        new MessageBoxWindow().Show(Properties.Resources.Card_only_authorized.Replace("$", SystemVariables.CurrencySymbol) + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources.Please_select_another_tender_to_finish_the_transaction_, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                        drP["AMOUNT"] = GeneralFunctions.FormatDouble1(AthAmount);
                                        //WriteToDatacapLogFile("Less Authorized");
                                        boolPOSLinkLessAuthorised = true;
                                    }

                                    foreach (DataRow dra1 in dtblTender.Rows)
                                    {
                                        if ((dra1["TENDER"].ToString() == strCard) && (dra1["CCTRANNO"].ToString() == ""))
                                        {
                                            dra1["CCTRANNO"] = intCardTranID.ToString();
                                            break;
                                        }
                                    }

                                    string updtstr = "";

                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = POSLink_RequestedAmt;
                                    objcard.CardAmount = POSLink_ApprovedAmt;
                                    objcard.CardType = POSLink_CardType;
                                    objcard.AuthCode = POSLink_AuthCode;
                                    objcard.Reference = POSLink_RefNum;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";

                                    objcard.RefCardAct = POSLink_BogusAccountNum;
                                    objcard.RefCardLogo = POSLink_CardType;
                                    objcard.RefCardEntry = "";
                                    objcard.RefCardAuthID = POSLink_AuthCode;
                                    objcard.RefCardTranID = POSLink_RefNum;
                                    objcard.RefCardMerchID = "";
                                    objcard.RefCardAuthAmount = POSLink_ApprovedAmt;
                                    objcard.CardTranType = "Sale";
                                    objcard.AdjustFlag = "N";
                                    objcard.RefCardBalAmount = POSLink_RemainingBalance;
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();

                                    if (!boolPOSLinkLessAuthorised)
                                    {
                                        if (updtstr == "")
                                        {
                                            blEBTVarify = true;
                                            drP["PROCESSCARD"] = "Y";
                                        }
                                        else
                                        {
                                            Cursor = System.Windows.Input.Cursors.Arrow;
                                            blEBTVarify = false;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        if (updtstr == "")
                                        {
                                            drP["PROCESSCARD"] = "Y";
                                        }

                                        Cursor = System.Windows.Input.Cursors.Arrow;
                                        blEBTVarify = false;
                                        break;
                                    }

                                }
                                else
                                {
                                    new MessageBoxWindow().Show(POSLink_ResultTxt, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                    blEBTVarify = false;
                                    break;
                                }

                            }
                            else
                            {
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blEBTVarify = false;
                                break;
                            }

                        }
                        else if (result.Code == POSLink.ProcessTransResultCode.TimeOut)
                        {
                            new MessageBoxWindow().Show("Action Timeout.", "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            blEBTVarify = false;
                            break;
                        }
                        else
                        {
                            new MessageBoxWindow().Show(result.Msg, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            blEBTVarify = false;
                            break;

                        }
                    }
                    */

                }
            }


            if (blEBTVarify)
            {
                return true;
            }
            else
            {
                return false;
            }

        }

        // Element/ Mercury/ Precidia EBT Transaction on Return

        private bool EBTVarifyForReturn()
        {
            cardidentity.Rows.Clear();
            intEBTCardTranID = 0;
            blEBTVarify = false;
            double dblCardAmt = 0;
            string strCard = "";
            AuthCode = "";
            int gettrannofromitem = 0;

            foreach (DataRow drP in dtblTender.Rows)
            {
                if ((drP["TENDER"].ToString() == "Food Stamps") && (drP["PROCESSCARD"].ToString() == "N"))
                {
                    dblCardAmt = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drP["AMOUNT"].ToString()));
                    strCard = drP["TENDER"].ToString();

                    foreach (DataRow drt in dtblPOSDatatbl.Rows)
                    {
                        gettrannofromitem = GetTranID(GeneralFunctions.fnInt32(drt["MATRIXOID"].ToString()));
                        break;
                    }

                    if (!IsCardPayment1(gettrannofromitem))
                    {
                        new MessageBoxWindow().Show(Properties.Resources.No_payment_done_in_card, " Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        return false;
                    }

                    if (!IsCardPayment3(gettrannofromitem)) continue;

                    DataTable dt = new DataTable();

                    dt = GetCardTransData(gettrannofromitem);

                    string val1 = "";
                    string val2 = "";
                    string val3 = "";
                    string val4 = "";
                    string val5 = "";
                    string val6 = "";
                    string val7 = "";
                    string val8 = "";
                    string val9 = "";
                    string val20 = "";

                    int pmntgwy = 0;
                    int CCID = 0;
                    foreach (DataRow dr in dt.Rows)
                    {
                        CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                        PosDataObject.POS objcard = new PosDataObject.POS();
                        objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        objcard.CustomerID = intCustID;
                        objcard.LoginUserID = SystemVariables.CurrentUserID;
                        objcard.EmployeeID = SystemVariables.CurrentUserID;
                        objcard.CardType = strCard;
                        objcard.CardAmount = dblCardAmt;
                        objcard.PaymentGateway = Settings.PaymentGateway;
                        objcard.TerminalName = Settings.TerminalName;
                        if (Settings.PaymentGateway == 2)
                        {
                            objcard.LogFileName = MercuryLogFile;
                        }
                        else if (Settings.PaymentGateway == 3)
                        {
                            objcard.LogFileName = PrecidiaLogFile;
                        }
                        else if (Settings.PaymentGateway == 5)
                        {
                            objcard.LogFileName = DatacapLogFile;
                        }
                        else if (Settings.PaymentGateway == 6)
                        {
                            objcard.LogFileName = DatacapEMVLogFile;
                        }
                        else
                        {
                            objcard.LogFileName = "";
                        }
                        try
                        {
                            string strerr = objcard.InsertCardTrans();
                        }
                        catch (Exception ex)
                        {
                            blEBTVarify = false;
                            new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, "EBT", MessageBoxButton.OK, MessageBoxImage.Information);
                            GeneralFunctions.SetTransactionLog("Catch - Error inserting EBT Trans", ex.Message);
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            break;
                        }
                        //string strerr = objcard.InsertCardTrans();
                        intCardTranID = objcard.CardTranID;
                        cardidentity.Rows.Add(new object[] { intCardTranID.ToString() });
                        Cursor = System.Windows.Input.Cursors.Arrow;

                        val1 = dr["CardType"].ToString();
                        val2 = dr["CardAmount"].ToString();
                        val3 = dr["Reference"].ToString();
                        val4 = dr["MercuryInvoiceNo"].ToString();
                        val5 = dr["MercuryAcqRef"].ToString();
                        val6 = dr["MercuryToken"].ToString();
                        val7 = dr["AuthCode"].ToString();
                        val8 = dr["MercuryProcessData"].ToString();
                        val9 = dr["RefCardTranID"].ToString();
                        val20 = dr["ReturnAmount"].ToString();
                        pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());

                        /*if (pmntgwy == 1)
                        {
                            try
                            {
                                ElementExpress.ElementPS pg = new ElementExpress.ElementPS();
                                pg.ElementApplicationID = Settings.ElementHPApplicationID;
                                pg.ElementAccountID = Settings.ElementHPAccountID;
                                pg.ElementAccountToken = Settings.ElementHPAccountToken;
                                pg.ElementAcceptorID = Settings.ElementHPAcceptorID;
                                pg.TranAmount = GeneralFunctions.FormatDouble1(-dblCardAmt);// GeneralFunctions.FormatDouble1(GeneralFunctions.fnDouble(val2));
                                pg.ElementTerminalID = Settings.ElementHPTerminalID.PadLeft(4, '0');
                                pg.TranID = val9;
                                pg.RefNo = val3;
                                pg.TktNo = intCardTranID.ToString();
                                pg.ApplicationVersion = GeneralFunctions.PaymentGatewayApplicationVersion();

                                string msg1 = "";
                                string msg2 = "";
                                if (strCard != "Debit Card")
                                {
                                    if (Settings.ElementHPMode == 0) pg.CreditReturn(ref msg1, ref msg2);
                                    if (Settings.ElementHPMode == 1) pg.TestCreditReturn(ref msg1, ref msg2);
                                }
                                else
                                {
                                    if (Settings.ElementHPMode == 0) pg.DebitReturn(ref msg1, ref msg2);
                                    if (Settings.ElementHPMode == 1) pg.TestDebitReturn(ref msg1, ref msg2);
                                }

                                if (msg1 == "0")
                                {
                                    blCardVarify = true;
                                    AuthCode = pg.ApprovalNo;
                                    TranID = pg.TranID;
                                    CardNum = "";
                                    CardExMM = "";
                                    CardExYY = "";
                                    CardLogo = "";
                                    CardType = "";
                                    ApprovedAmt = "0";
                                    RefNo = pg.RefNo;
                                    CardEntry = "";
                                    Token = "";
                                    AcqRef = "";
                                    MercuryProcessData = "";
                                    MercuryTranCode = "";
                                    MercuryPurchaseAmount = 0;
                                    strMercuryMerchantID = "";

                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    string updtstr = "";
                                    objcard.CardType = "";
                                    objcard.MercuryInvNo = "";
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryPurchaseAmount = 0;
                                    objcard.MercuryTranCode = "";
                                    objcard.CardAmount = GeneralFunctions.fnDouble(val2);

                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.RefCardAct = "";
                                    objcard.RefCardLogo = "";
                                    objcard.RefCardEntry = "";
                                    objcard.RefCardAuthID = "";
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = RefNo;
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(val2);
                                    objcard.CardTranType = "Return";
                                    objcard.AdjustFlag = "Y";
                                    updtstr = objcard.UpdateCardResponse();
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    if (updtstr == "") blCardVarify = true;
                                }
                            }
                            catch
                            {
                                blCardVarify = false;
                                new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.", "Credit Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor =System.Windows.Input.Cursors.Arrow;
                                break;
                            }
                        }

                        if (pmntgwy == 2)
                        {
                            WriteToMercuryLogFile("Tender: " + strCard + " - start");
                            try
                            {
                                MercuryPayment.clsMercuryPymnt mp = new MercuryPayment.clsMercuryPymnt();
                                mp.MerchantID = Settings.MercuryHPMerchantID;
                                mp.UserID = Settings.MercuryHPUserID;
                                mp.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                                mp.InvNo = val4;
                                mp.RefNo = val3;
                                mp.AuthID = val7;
                                mp.AcqRefData = val5;
                                mp.Token = val6;
                                mp.PurchaseAmount = -dblCardAmt;//GeneralFunctions.fnDouble(val2);

                                string msg1 = "";

                                if (Settings.ElementHPMode == 0) mp.EBTReturn(ref msg1);
                                if (Settings.ElementHPMode == 1) mp.TestEBTReturn(ref msg1);

                                GeneralFunctions.CreateMercuryTransactionXML(mp.MercuryXmlResponse, val6);

                                if (msg1.ToUpper().Trim() == "APPROVED")
                                {
                                    blCardVarify = true;
                                    AuthCode = mp.AuthID;
                                    TranID = mp.TranID;
                                    CardNum = mp.CardNumber;
                                    CardExMM = mp.CardExMM;
                                    CardExYY = mp.CardExYY;
                                    CardLogo = mp.CardLogo;
                                    CardType = mp.CardType;
                                    ApprovedAmt = mp.ApprovedAmt;
                                    RefNo = mp.RefNo;
                                    CardEntry = mp.CardEntry;
                                    Token = mp.Token;
                                    AcqRef = mp.AcqRefData;
                                    MercuryProcessData = mp.MercuryProcessData;
                                    MercuryTranCode = mp.MercuryTranCode;
                                    MercuryPurchaseAmount = mp.PurchaseAmount;
                                    strMercuryMerchantID = mp.MerchantID;

                                    MercuryTextResponse = mp.MercuryTextResponse;
                                    MercuryResponseOrigin = mp.MercuryResponseOrigin;
                                    MercuryResponseReturnCode = mp.MercuryResponseReturnCode;
                                    MercuryRecordNo = mp.MercuryRecordNo;


                                    if (AuthCode == null) AuthCode = "";
                                    if (TranID == null) TranID = "";
                                    if (CardNum == null) CardNum = "";
                                    if (CardExMM == null) CardExMM = "";
                                    if (CardExYY == null) CardExYY = "";
                                    if (CardLogo == null) CardLogo = "";
                                    if (CardType == null) CardType = "";
                                    if (ApprovedAmt == null) ApprovedAmt = "0";
                                    if (RefNo == null) RefNo = "";
                                    if (CardEntry == null) CardEntry = "";
                                    if (Token == null) Token = "";
                                    if (AcqRef == null) AcqRef = "";

                                    if (MercuryProcessData == null) MercuryProcessData = "";
                                    if (MercuryTextResponse == null) MercuryTextResponse = "";
                                    if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                                    if (MercuryRecordNo == null) MercuryRecordNo = "";
                                    if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                                    if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";

                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    string updtstr = "";

                                    objcard.MercuryRecordNo = MercuryRecordNo;
                                    objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                    objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                    objcard.MercuryTextResponse = MercuryTextResponse;

                                    objcard.CardType = CardLogo;
                                    objcard.MercuryInvNo = TranID;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = AcqRef;
                                    objcard.TokenData = Token;
                                    objcard.MercuryProcessData = MercuryProcessData;
                                    objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                    objcard.MercuryTranCode = MercuryTranCode;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = strMercuryMerchantID;
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                    objcard.CardTranType = "Return";
                                    objcard.AdjustFlag = "Y";
                                    objcard.RefCardBalAmount = 0;
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();

                                    PosDataObject.POS ob = new PosDataObject.POS();
                                    ob.Connection = SystemVariables.Conn;
                                    ob.LoginUserID = SystemVariables.CurrentUserID;
                                    ob.CardTranID = CCID;
                                    double amt = 0;
                                    string f = "N";
                                    amt = GeneralFunctions.fnDouble(val20) + (-dblCardAmt);
                                    if (GeneralFunctions.fnDouble(val2) == amt)
                                    {
                                        f = "Y";
                                    }
                                    string s = ob.UpdateCardAdjustmentOnReturn(f, amt);
                                    drP["PROCESSCARD"] = "Y";
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    if (updtstr == "")
                                    {
                                        WriteToMercuryLogFile("Card Transaction Record Updated");
                                        blEBTVarify = true;
                                    }
                                }
                                else
                                {
                                    PrecidiaErrorText = mp.MercuryTextResponse;
                                    blEBTVarify = false;
                                    new MessageBoxWindow().Show(msg1, "EBT", MessageBoxButton.OK, MessageBoxImage.Information);
                                    WriteToMercuryLogFile(msg1);
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    break;
                                }
                            }
                            catch (Exception ex)
                            {
                                blCardVarify = false;
                                new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, "EBT", MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToMercuryLogFile(Error_occured_during_transaction);
                                Cursor =System.Windows.Input.Cursors.Arrow;
                                break;
                            }
                        }

                        if (pmntgwy == 3)
                        {
                            WriteToPrecidiaLogFile("Tender: " + strCard + " - start");

                            blCG = false;
                            string resp = "";
                            string resptxt = "";

                            //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                            CGtrantype = "EBTFOODREFUND";

                            CGamt = dblCardAmt;

                            CGrequestfile = "R_" + CGtrantype + "_" + gettrannofromitem.ToString() + "_" + Settings.TerminalName + "_" + DateTime.Now.ToString("MMddyyyyhhmmss") + ".xml";
                            CGanswerfile = "A_" + CGrequestfile.Remove(0, 2);

                            //CGmonitor = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                            //if (CGmonitor.EndsWith("\\")) CGmonitor = CGmonitor + "Precidia\\";
                            //else CGmonitor = CGmonitor + "\\Precidia\\";

                            CGmonitor = Settings.PrecidiaDataPath;
                            if (!CGmonitor.EndsWith("\\")) CGmonitor = CGmonitor + "\\";

                            XmlDocument XDoc = new XmlDocument();

                            // Create root node.
                            XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

                            XDoc.ApSystem.Drawing.PendChild(XElemRoot);

                            XmlElement XTemp = XDoc.CreateElement("Command");
                            XTemp.InnerText = CGtrantype;
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                            
                            //XTemp = XDoc.CreateElement("RecNum");
                            //XTemp.InnerText = val9.ToString();
                            //XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                            

                            XTemp = XDoc.CreateElement("Amount");
                            XTemp.InnerText = CGamt.ToString("f");
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                            if (drP["MANUAL"].ToString() == "Y")
                            {
                                XTemp = XDoc.CreateElement("Input");
                                XTemp.InnerText = "MANUAL";
                                XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                            }
                            else
                            {
                                XTemp = XDoc.CreateElement("Input");
                                XTemp.InnerText = "EXTERNAL";
                                XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                            }
                            //XTemp = XDoc.CreateElement("ClientId");
                            //XTemp.InnerText = Settings.TerminalName;
                            //XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                            XmlDocument XmlResponse = new XmlDocument();

                            XTemp = XDoc.CreateElement("KeepAlive");
                            XTemp.InnerText = "N";
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                            XTemp = XDoc.CreateElement("ClientMAC");
                            XTemp.InnerText = Settings.PrecidiaClientMAC;
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                            if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc.OuterXml);

                            bool bTelnet = false;
                            try
                            {
                                SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                                bTelnet = true;
                            }
                            catch (Exception ex)
                            {
                                WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                                bTelnet = false;
                            }

                            if (bTelnet)
                            {
                                if (XmlResponse.InnerXml != "")
                                {
                                    if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse.InnerXml);
                                    SocketResponse_General(XmlResponse);
                                    resp = CGresp;
                                    resptxt = CGresptxt;

                                    WriteToPrecidiaLogFile("Response: " + resp);
                                    WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));

                                    if (resp != "")
                                    {
                                        if (resp != "APPROVED")
                                        {
                                            WriteToPrecidiaLogFile(resptxt);
                                            PrecidiaErrorText = "Error: " + resptxt;
                                            blEBTVarify = false;
                                        }
                                        else
                                        {
                                            string updtstr = "";
                                            objcard.MercuryRecordNo = "";
                                            objcard.MercuryResponseOrigin = "";
                                            objcard.MercuryResponseReturnCode = "";
                                            objcard.MercuryTextResponse = "";

                                            objcard.MercuryInvNo = "";
                                            objcard.MercuryProcessData = "";
                                            objcard.MercuryTranCode = "";
                                            objcard.MercuryPurchaseAmount = 0;
                                            objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard.CardType = CardLogo;
                                            objcard.AuthCode = AuthCode;
                                            objcard.Reference = RefNo;
                                            objcard.AcqRefData = "";
                                            objcard.TokenData = "";

                                            objcard.RefCardAct = CardNum;
                                            objcard.RefCardLogo = CardLogo;
                                            objcard.RefCardEntry = CardEntry;
                                            objcard.RefCardAuthID = AuthCode;
                                            objcard.RefCardTranID = TranID;
                                            objcard.RefCardMerchID = "";
                                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard.CardTranType = "Return";
                                            objcard.AdjustFlag = "Y";
                                            objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                            objcard.PrintXml = "";
                                            updtstr = objcard.UpdateCardResponse();
                                            drP["PROCESSCARD"] = "Y";
                                            blEBTVarify = true;
                                            WriteToPrecidiaLogFile("Card Trans Updated");
                                        }
                                    }
                                }
                            }
                        }



                        if (pmntgwy == 5)
                        {
                            WriteToDatacapLogFile("Tender: " + strCard + " - start");
                            Dcap_CmdStatus = "";
                            Dcap_TextResponse = "";
                            Dcap_AcctNo = "";
                            Dcap_Merchant = "";
                            Dcap_TranCode = "";
                            Dcap_CardType = "";
                            Dcap_AuthCode = "";
                            Dcap_RefNo = "";
                            Dcap_AcqRefData = "";
                            Dcap_RecordNo = "";
                            Dcap_InvoiceNo = "";
                            Dcap_TranAmt = 0;
                            Dcap_AuthAmt = 0;
                            Dcap_CashBkAmt = 0;
                            Dcap_BalAmt = 0;

                            bool bproceed = true;
                            string request_xml = "";
                            string response_xml = "";

                            DSIPDCXLib.DsiPDCX dsipdx = new DSIPDCXLib.DsiPDCX();

                            dsipdx.ServerIPConfig(Settings.DatacapServer, 1);

                            PosDataObject.POS objPOS = new PosDataObject.POS();
                            objPOS.Connection = SystemVariables.Conn;
                            int dcap_max_inv = objPOS.FetchMaxInvoiceNo();

                            request_xml = GeneralFunctions.Datacap_EBTReturn_Request_XML(-dblCardAmt, dcap_max_inv.ToString(),blPressManual);
                            try
                            {
                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                            }
                            catch
                            {
                                bproceed = false;
                            }

                            if (bproceed)
                            {
                                GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);

                                WriteToDatacapLogFile("Request XML: " + request_xml);
                                WriteToDatacapLogFile("\n");
                                WriteToDatacapLogFile("Response XML: " + response_xml);

                                if (Dcap_CmdStatus == "Approved")
                                {
                                    string updtstr = "";
                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = Dcap_InvoiceNo;
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                                    objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                                    objcard.CardType = Dcap_CardType;
                                    objcard.AuthCode = Dcap_AuthCode;
                                    objcard.Reference = Dcap_RefNo;
                                    objcard.AcqRefData = Dcap_AcqRefData;
                                    objcard.TokenData = Dcap_RecordNo;

                                    objcard.RefCardAct = Dcap_AcctNo;
                                    objcard.RefCardLogo = Dcap_CardType;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = Dcap_AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = Dcap_Merchant;
                                    objcard.RefCardAuthAmount = Dcap_AuthAmt;
                                    objcard.CardTranType = "Return";
                                    objcard.AdjustFlag = "Y";
                                    objcard.RefCardBalAmount = Dcap_BalAmt;
                                    objcard.PrintXml = Dcap_PrintDraft;
                                    updtstr = objcard.UpdateCardResponse();
                                    drP["PROCESSCARD"] = "Y";
                                    blEBTVarify = true;
                                }
                                else
                                {
                                    new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "EBT Return", MessageBoxButton.OK, MessageBoxImage.Information);
                                    WriteToDatacapLogFile(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse);
                                    blEBTVarify = false;
                                }
                            }
                            else
                            {
                                WriteToDatacapLogFile("Error");
                                blEBTVarify = false;
                            }
                        }
                        
                        */

                        /*
                        if (pmntgwy == 7) // POSLink
                        {
                            POSLinkLogPath = POSLinkLogFilePath();
                            POSLink_ResultCode = "";
                            POSLink_ResultTxt = "";
                            POSLink_RefNum = "";
                            POSLink_AuthCode = "";
                            POSLink_CardType = "";
                            POSLink_BogusAccountNum = "";
                            POSLink_CashBack = 0;
                            POSLink_RequestedAmt = 0;
                            POSLink_ApprovedAmt = 0;
                            POSLink_RemainingBalance = 0;
                            POSLink_ExtraBalance = 0;

                            PosDataObject.POS objPOS = new PosDataObject.POS();
                            objPOS.Connection = SystemVariables.Conn;
                            int refinv = objPOS.FetchMaxInvoiceNo();

                            POSLink.PosLink pg = new POSLink.PosLink();

                            pg.CommSetting = GeneralFunctions.GetPOSLinkCommSetup();

                            POSLink.LogManagement plog = new POSLink.LogManagement();
                            plog.LogLevel = 1;
                            plog.LogFilePath = System.IO.Path.GetDirectoryName(POSLinkLogPath);
                            pg.LogManageMent = plog;

                            POSLink.PaymentRequest paymentRequest = new POSLink.PaymentRequest();


                            paymentRequest.TenderType = paymentRequest.ParseTenderType("EBT_FOODSTAMP");
                            paymentRequest.TransType = paymentRequest.ParseTransType("RETURN");

                            paymentRequest.Amount = Convert.ToString(-dblCardAmt * 100);

                            paymentRequest.OrigRefNum = "";
                            paymentRequest.InvNum = refinv.ToString();
                            paymentRequest.UserID = "";
                            paymentRequest.PassWord = "";
                            paymentRequest.ClerkID = "";
                            paymentRequest.ServerID = "";
                            paymentRequest.ECRRefNum = "1";

                            pg.PaymentRequest = paymentRequest;

                            POSLink.ProcessTransResult result = new POSLink.ProcessTransResult();

                            result = pg.ProcessTrans();

                            if (result.Code == POSLink.ProcessTransResultCode.OK)
                            {
                                POSLink.PaymentResponse paymentResponse = pg.PaymentResponse;
                                if (paymentResponse != null && paymentResponse.ResultCode != null)
                                {
                                    POSLink_ResultCode = paymentResponse.ResultCode;
                                    POSLink_ResultTxt = paymentResponse.ResultTxt;
                                    POSLink_RefNum = paymentResponse.RefNum;

                                    POSLink_RequestedAmt = GeneralFunctions.fnDouble(paymentResponse.RequestedAmount) / 100;
                                    POSLink_ApprovedAmt = GeneralFunctions.fnDouble(paymentResponse.ApprovedAmount) / 100;
                                    POSLink_RemainingBalance = GeneralFunctions.fnDouble(paymentResponse.RemainingBalance) / 100;
                                    POSLink_ExtraBalance = GeneralFunctions.fnDouble(paymentResponse.ExtraBalance) / 100;

                                    POSLink_BogusAccountNum = paymentResponse.BogusAccountNum;
                                    POSLink_CardType = paymentResponse.CardType;


                                    POSLink_AuthCode = paymentResponse.AuthCode;

                                    if (POSLink_ResultCode == "000000") // Approved
                                    {


                                        string updtstr = "";

                                        objcard.MercuryRecordNo = "";
                                        objcard.MercuryResponseOrigin = "";
                                        objcard.MercuryResponseReturnCode = "";
                                        objcard.MercuryTextResponse = "";

                                        objcard.MercuryInvNo = "";
                                        objcard.MercuryProcessData = "";
                                        objcard.MercuryTranCode = "";
                                        objcard.MercuryPurchaseAmount = POSLink_RequestedAmt;
                                        objcard.CardAmount = POSLink_ApprovedAmt;
                                        objcard.CardType = POSLink_CardType;
                                        objcard.AuthCode = POSLink_AuthCode;
                                        objcard.Reference = POSLink_RefNum;
                                        objcard.AcqRefData = "";
                                        objcard.TokenData = "";

                                        objcard.RefCardAct = POSLink_BogusAccountNum;
                                        objcard.RefCardLogo = POSLink_CardType;
                                        objcard.RefCardEntry = "";
                                        objcard.RefCardAuthID = POSLink_AuthCode;
                                        objcard.RefCardTranID = POSLink_RefNum;
                                        objcard.RefCardMerchID = "";
                                        objcard.RefCardAuthAmount = POSLink_ApprovedAmt;
                                        objcard.CardTranType = "Return";
                                        objcard.AdjustFlag = "Y";
                                        objcard.RefCardBalAmount = POSLink_RemainingBalance;
                                        objcard.PrintXml = "";
                                        updtstr = objcard.UpdateCardResponse();

                                        drP["PROCESSCARD"] = "Y";
                                        blEBTVarify = true;

                                    }
                                    else
                                    {
                                        new MessageBoxWindow().Show(POSLink_ResultTxt, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                        Cursor = System.Windows.Input.Cursors.Arrow;
                                        blEBTVarify = false;
                                    }

                                }
                                else
                                {
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                    blEBTVarify = false;
                                }

                            }
                            else if (result.Code == POSLink.ProcessTransResultCode.TimeOut)
                            {
                                new MessageBoxWindow().Show("Action Timeout.", "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blEBTVarify = false;
                            }
                            else
                            {
                                new MessageBoxWindow().Show(result.Msg, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blEBTVarify = false;

                            }
                        }
                        */


                    }
                    dt.Dispose();
                }
            }

            if (blEBTVarify)
            {
                return true;
            }
            else
            {
                if (blEBTVarify)
                {
                    //new MessageBoxWindow().Show(Properties.Resources."Transaction failed.", "EBT", MessageBoxButton.OK, MessageBoxImage.Information);
                    return false;
                }
                else
                {
                    blEBTVarify = false;
                    return false;
                }
            }
        }

        // Element/ Mercury/ Precidia/ Datacap Card / PAX Transaction on Sale

        private bool CardVarify()
        {
            

            intCardTranID = 0;
            blCardVarify = false;
            double dblCardAmt = 0;
            string strCard = "";
            AuthCode = "";
            int precdiacount = 0;

            

            if (Settings.PaymentGateway == 2)
            {
                WriteToMercuryLogFile("CardVarify() - before insert into cardtrans");
            }
            if (Settings.PaymentGateway == 5)
            {
                WriteToDatacapLogFile("CardVarify() - before insert into cardtrans");
            }
            foreach (DataRow drP in dtblTender.Rows)
            {
                
                if (((drP["TENDER"].ToString() == "Visa") || (drP["TENDER"].ToString() == "MasterCard") || (drP["TENDER"].ToString() == "American Express") ||
                    (drP["TENDER"].ToString() == "Discover") || (drP["TENDER"].ToString() == "Diner") || (drP["TENDER"].ToString() == "Debit Card") ||
                    (drP["TENDER"].ToString() == "Credit Card") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth") ||
                    (drP["TENDER"].ToString() == "Credit Card (STAND-IN)") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)") ||
                    (drP["TENDER"].ToString() == "Mercury Gift Card") || (drP["TENDER"].ToString() == "Precidia Gift Card") || (drP["TENDER"].ToString() == "Datacap Gift Card") ||
                    (drP["TENDER"].ToString() == "POSLink Gift Card") ||
                    (drP["TENDER"].ToString() == "EBT Cash") || (drP["TENDER"].ToString() == "EBT Voucher")) && (drP["PROCESSCARD"].ToString() == "N"))
                {
                    intCardTranID = 0;
                    if (drP["CCTRANNO"].ToString() != "") continue;
                    dblCardAmt = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drP["AMOUNT"].ToString()));
                    strCard = drP["TENDER"].ToString();

                    PosDataObject.POS objcard = new PosDataObject.POS();
                    objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    objcard.CustomerID = intCustID;
                    objcard.LoginUserID = SystemVariables.CurrentUserID;
                    objcard.EmployeeID = SystemVariables.CurrentUserID;
                    objcard.CardType = strCard;
                    objcard.CardAmount = dblCardAmt;
                    objcard.PaymentGateway = Settings.PaymentGateway;
                    objcard.TerminalName = Settings.TerminalName;
                    if (Settings.PaymentGateway == 2)
                    {
                        objcard.LogFileName = MercuryLogFile;
                    }
                    else if (Settings.PaymentGateway == 3)
                    {
                        objcard.LogFileName = PrecidiaLogFile;
                    }
                    else if (Settings.PaymentGateway == 5)
                    {
                        objcard.LogFileName = DatacapLogFile;
                    }
                    else if (Settings.PaymentGateway == 6)
                    {
                        objcard.LogFileName = DatacapEMVLogFile;
                    }
                    else
                    {
                        objcard.LogFileName = "";
                    }

                    try
                    {
                        string strerr = objcard.InsertCardTrans();
                        
                    }
                    catch (Exception ex)
                    {
                        
                        blCardVarify = false;
                        new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction,  Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                        GeneralFunctions.SetTransactionLog("Catch - Error Inserting Card Trans", ex.Message);

                        if (Settings.PaymentGateway == 2)
                        {
                            WriteToMercuryLogFile("CardVarify() - card trans insert error - " + ex.Message);
                        }
                        if (Settings.PaymentGateway == 5)
                        {
                            WriteToDatacapLogFile("CardVarify() - card trans insert error - " + ex.Message);
                        }

                        Cursor = System.Windows.Input.Cursors.Arrow;
                        break;
                    }

                    intCardTranID = objcard.CardTranID;

                    cardidentity.Rows.Add(new object[] { intCardTranID.ToString() });

                    if (Settings.PaymentGateway == 2)
                    {
                        WriteToMercuryLogFile("CardVarify() - card trans insert complete");
                    }
                    if (Settings.PaymentGateway == 5)
                    {
                        WriteToDatacapLogFile("CardVarify() - card trans insert complete");
                    }


                    Cursor = System.Windows.Input.Cursors.Hand;
                    string strAuthCode = "0";

                    #region Commented Code
                    // element temp out
                    /*
                    if (Settings.PaymentGateway == 1)
                    {
                        try
                        {
                            ElementExpress.ElementPS pg = new ElementExpress.ElementPS();
                            pg.ElementApplicationID = Settings.ElementHPApplicationID;
                            pg.ElementAccountID = Settings.ElementHPAccountID;
                            pg.ElementAccountToken = Settings.ElementHPAccountToken;
                            pg.ElementAcceptorID = Settings.ElementHPAcceptorID;
                            pg.TranAmount = GeneralFunctions.FormatDouble1(dblCardAmt);
                            pg.ElementTerminalID = Settings.ElementHPTerminalID.PadLeft(4, '0');
                            pg.RefNo = intCardTranID.ToString();
                            pg.TktNo = intCardTranID.ToString();
                            pg.ApplicationVersion = GeneralFunctions.PaymentGatewayApplicationVersion();

                            if (strCard != "Debit Card")
                            {
                                if (Settings.ElementZipProcessing == "Y")
                                {
                                    frmPOSCCInfo frm_POSCCInfo = new frmPOSCCInfo();
                                    try
                                    {
                                        frm_POSCCInfo.Amount = dblCardAmt;
                                        frm_POSCCInfo.ShowDialog();
                                        if (frm_POSCCInfo.DialogResult == MessageBoxResult.OK)
                                        {
                                            pg.IsBillingInfo = true;
                                            pg.BillingAddress1 = frm_POSCCInfo.txtAdd.Text.Trim();
                                            pg.BillingZIP = frm_POSCCInfo.txtZIP.Text.Trim();
                                        }
                                        else
                                        {
                                            pg.IsBillingInfo = false;
                                        }
                                    }
                                    finally
                                    {
                                        frm_POSCCInfo.Dispose();
                                    }
                                }
                                this.Refresh();
                            }

                            string msg1 = "";
                            string msg2 = "";

                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ElementHPMode == 0) pg.CreditAuthentication(ref msg1, ref msg2, ref strAuthCode);
                                if (Settings.ElementHPMode == 1) pg.TestCreditAuthentication(ref msg1, ref msg2, ref strAuthCode);
                            }
                            else
                            {
                                if (strCard != "Debit Card")
                                {
                                    if (Settings.ElementHPMode == 0) pg.POSCreditSale(ref msg1, ref msg2, ref strAuthCode);
                                    if (Settings.ElementHPMode == 1) pg.TestPOSCreditSale(ref msg1, ref msg2, ref strAuthCode);
                                }
                                else
                                {
                                    if (Settings.ElementHPMode == 0) pg.POSDebitSale(ref msg1, ref msg2, ref strAuthCode);
                                    if (Settings.ElementHPMode == 1) pg.TestPOSDebitSale(ref msg1, ref msg2, ref strAuthCode);
                                }
                            }

                            if (msg1 == "0")
                            {
                                frmPaymentWindow frm_PaymentWindow = new frmPaymentWindow();
                                try
                                {
                                    frm_PaymentWindow.TranID = strAuthCode;
                                    if (Settings.ElementHPMode == 0) frm_PaymentWindow.IsTestMode = false;
                                    if (Settings.ElementHPMode == 1) frm_PaymentWindow.IsTestMode = true;
                                    frm_PaymentWindow.ShowDialog();

                                    if (frm_PaymentWindow.DialogResult == MessageBoxResult.OK)
                                    {
                                        blCardVarify = true;
                                        AuthCode = frm_PaymentWindow.ApprovalNumber;
                                        TranID = frm_PaymentWindow.TranID;
                                        CardNum = frm_PaymentWindow.CardNumber;
                                        CardExMM = frm_PaymentWindow.CardExMM;
                                        CardExYY = frm_PaymentWindow.CardExYY;
                                        CardLogo = frm_PaymentWindow.CardLogo;
                                        CardType = frm_PaymentWindow.CardType;
                                        ApprovedAmt = frm_PaymentWindow.ApprovedAmt;
                                        RefNo = frm_PaymentWindow.RefNo;
                                        CardEntry = frm_PaymentWindow.CardEntry;
                                    }
                                }
                                finally
                                {
                                    frm_PaymentWindow.Dispose();
                                }
                                if (blCardVarify)
                                {
                                    double AthAmount = ApprovedAmt == null ? 0 : GeneralFunctions.fnDouble(ApprovedAmt);
                                    if (AthAmount < dblCardAmt)
                                    {
                                        new MessageBoxWindow().Show(Properties.Resources.Card_only_authorized + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources.Please_select_another_tender_to_finish_the_transaction_, "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                    }

                                    foreach (DataRow dra1 in dtblTender.Rows)
                                    {
                                        if (dra1["TENDER"].ToString() == strCard)
                                        {
                                            dra1["CCTRANNO"] = intCardTranID.ToString();
                                            break;
                                        }
                                    }
                                    string updtstr = "";
                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = 0;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardType = CardLogo;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = "";
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardTranType = "Sale";
                                    objcard.AdjustFlag = "N";
                                    objcard.RefCardBalAmount = 0;
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();

                                    if (updtstr == "")
                                    {
                                        blCardVarify = true;
                                        drP["PROCESSCARD"] = "Y";
                                    }
                                    else
                                    {
                                        blCardVarify = false;
                                        break;
                                    }
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                }
                                Cursor =System.Windows.Input.Cursors.Arrow;
                            }
                            else
                            {
                                blCardVarify = false;
                                new MessageBoxWindow().Show(msg2, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor =System.Windows.Input.Cursors.Arrow;
                                break;
                            }
                        }
                        catch (Exception ex)
                        {
                            blCardVarify = false;
                            new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            Cursor =System.Windows.Input.Cursors.Arrow;
                            break;
                        }
                    }

                    if (Settings.PaymentGateway == 2)
                    {
                        WriteToMercuryLogFile("Tender: " + strCard + " - start");
                        try
                        {
                            MercuryPayment.clsMercuryPymnt mp = new MercuryPayment.clsMercuryPymnt();
                            mp.MerchantID = Settings.MercuryHPMerchantID;
                            mp.UserID = Settings.MercuryHPUserID;
                            mp.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                            mp.InvNo = intCardTranID.ToString();
                            mp.PurchaseAmount = dblCardAmt;

                            string msg1 = "";
                            string msg2 = "";


                            if (Settings.AcceptTips == "Y")
                            {
                                if (Settings.ElementHPMode == 0) mp.CreditPreAuth(ref msg1);
                                if (Settings.ElementHPMode == 1) mp.TestCreditPreAuth(ref msg1);
                            }
                            else
                            {
                                if (strCard != "Debit Card")
                                {
                                    if (strCard == "Credit Card")
                                    {
                                        if (Settings.ElementHPMode == 0) mp.CreditSales(ref msg1);
                                        if (Settings.ElementHPMode == 1) mp.TestCreditSales(ref msg1);
                                    }
                                    if (strCard == "Credit Card - Voice Auth")
                                    {
                                        if (Settings.ElementHPMode == 0) mp.VoiceAuth(ref msg1);
                                        if (Settings.ElementHPMode == 1) mp.TestVoiceAuth(ref msg1);
                                    }
                                    if (strCard == "Credit Card (STAND-IN)")
                                    {
                                        if (Settings.ElementHPMode == 0) mp.StandInCreditSales(ref msg1);
                                        if (Settings.ElementHPMode == 1) mp.TestStandInCreditSales(ref msg1);
                                    }
                                    if (strCard == "Credit Card - Voice Auth (STAND-IN)")
                                    {
                                        if (Settings.ElementHPMode == 0) mp.StandInVoiceAuth(ref msg1);
                                        if (Settings.ElementHPMode == 1) mp.TestStandInVoiceAuth(ref msg1);
                                    }
                                    if (strCard == "Mercury Gift Card")
                                    {
                                        if (Settings.ElementHPMode == 0) mp.GiftCardSales(ref msg1);
                                        if (Settings.ElementHPMode == 1) mp.TestGiftCardSales(ref msg1);
                                    }
                                    if (strCard == "EBT Cash")
                                    {
                                        if (Settings.ElementHPMode == 0) mp.EBTCashSales(ref msg1);
                                        if (Settings.ElementHPMode == 1) mp.TestEBTCashSales(ref msg1);
                                    }
                                    if (strCard == "EBT Voucher")
                                    {
                                        if (Settings.ElementHPMode == 0) mp.EBTVoucher(ref msg1);
                                        if (Settings.ElementHPMode == 1) mp.TestEBTVoucher(ref msg1);
                                    }
                                }
                                else
                                {
                                    if (Settings.ElementHPMode == 0) mp.DebitSales(ref msg1);
                                    if (Settings.ElementHPMode == 1) mp.TestDebitSales(ref msg1);
                                }
                            }
                            string strmreq = mp.MercuryRequestXml;
                            GeneralFunctions.CreateMercuryTransactionXML1(mp.MercuryXmlResponse, mp.Token, strmreq);

                            WriteToMercuryLogFile("Response: " + msg1);

                            if (msg1 != "")
                            {
                                if (msg1.ToUpper().Trim() == "APPROVED")
                                {
                                    double AthAmount = mp.ApprovedAmt == null ? 0 : GeneralFunctions.fnDouble(mp.ApprovedAmt);
                                    if (AthAmount < dblCardAmt)
                                    {
                                        new MessageBoxWindow().Show(Properties.Resources.Card_only_authorized + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources.Please_select_another_tender_to_finish_the_transaction_, "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                        WriteToMercuryLogFile("Less Authorized");
                                    }
                                    try
                                    {
                                        AuthCode = mp.AuthID;
                                        TranID = mp.TranID;
                                        CardNum = mp.CardNumber;
                                        CardExMM = mp.CardExMM;
                                        CardExYY = mp.CardExYY;
                                        CardLogo = mp.CardLogo;
                                        CardType = mp.CardType;
                                        ApprovedAmt = mp.ApprovedAmt;
                                        RefNo = mp.RefNo;
                                        MercuryPurchaseAmount = mp.PurchaseAmount;
                                        MercuryProcessData = mp.MercuryProcessData;
                                        MercuryTranCode = mp.MercuryTranCode;
                                        MercuryTextResponse = mp.MercuryTextResponse;
                                        MercuryRecordNo = mp.MercuryRecordNo;
                                        MercuryResponseOrigin = mp.MercuryResponseOrigin;
                                        MercuryResponseReturnCode = mp.MercuryResponseReturnCode;
                                        MercuryGiftCardBalance = mp.BalanceAmt;
                                        CardEntry = mp.CardEntry;
                                        Token = mp.Token;
                                        AcqRef = mp.AcqRefData;
                                        strMercuryMerchantID = mp.MerchantID;

                                        if (AuthCode == null) AuthCode = "";
                                        if (TranID == null) TranID = "";
                                        if (CardNum == null) CardNum = "";
                                        if (CardExMM == null) CardExMM = "";
                                        if (CardExYY == null) CardExYY = "";
                                        if (CardLogo == null) CardLogo = "";
                                        if (CardType == null) CardType = "";
                                        if (ApprovedAmt == null) ApprovedAmt = "0";
                                        if (RefNo == null) RefNo = "";
                                        if (CardEntry == null) CardEntry = "";
                                        if (Token == null) Token = "";
                                        if (AcqRef == null) AcqRef = "";

                                        if (MercuryProcessData == null) MercuryProcessData = "";
                                        if (MercuryTranCode == null) MercuryTranCode = "";
                                        if (MercuryRecordNo == null) MercuryRecordNo = "";
                                        if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                                        if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                                        if (MercuryTextResponse == null) MercuryTextResponse = "";
                                        if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";

                                        if ((MercuryTextResponse.ToUpper().Trim() == "AP") || (MercuryTextResponse.ToUpper().Trim() == "AP*") ||
                                            (MercuryTextResponse.ToUpper().Trim() == "APPROVED STANDIN") ||
                                            (MercuryTextResponse.ToUpper().Trim() == "AP-NEW INFO") ||
                                            (MercuryTextResponse.ToUpper().Trim() == "APPROVED"))
                                        {
                                            foreach (DataRow dra in dtblTender.Rows)
                                            {
                                                if ((dra["TENDER"].ToString() == strCard) && (dra["CCTRANNO"].ToString() == ""))
                                                {
                                                    dra["CCTRANNO"] = intCardTranID.ToString();
                                                    break;
                                                }
                                            }

                                            string updtstr = "";

                                            objcard.MercuryInvNo = TranID;
                                            objcard.MercuryProcessData = MercuryProcessData;
                                            objcard.MercuryTranCode = MercuryTranCode;
                                            objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                            objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                            objcard.MercuryRecordNo = MercuryRecordNo;
                                            objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                            objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                            objcard.MercuryTextResponse = MercuryTextResponse;

                                            objcard.CardType = CardLogo;
                                            objcard.AuthCode = AuthCode;
                                            objcard.Reference = RefNo;
                                            objcard.AcqRefData = AcqRef;
                                            objcard.TokenData = Token;

                                            objcard.RefCardAct = CardNum;
                                            objcard.RefCardLogo = CardLogo;
                                            objcard.RefCardEntry = CardEntry;
                                            objcard.RefCardAuthID = AuthCode;
                                            objcard.RefCardTranID = TranID;
                                            objcard.RefCardMerchID = strMercuryMerchantID;
                                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard.CardTranType = "Sale";
                                            objcard.AdjustFlag = "N";
                                            objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                            objcard.PrintXml = "";
                                            updtstr = objcard.UpdateCardResponse();

                                            if (updtstr == "")
                                            {
                                                blCardVarify = true;
                                                drP["PROCESSCARD"] = "Y";
                                                WriteToMercuryLogFile("Update Card Transaction Record");
                                            }
                                            else
                                            {
                                                GeneralFunctions.SetTransactionLog("credit card update after approved fail", updtstr);
                                                blCardVarify = false;
                                                WriteToMercuryLogFile("Fail to Update Card Transaction Record");
                                                break;
                                            }
                                            Cursor =System.Windows.Input.Cursors.Arrow;
                                        }

                                        if (MercuryTextResponse.ToUpper().Trim() == "PARTIAL AP")
                                        {
                                            foreach (DataRow dra in dtblTender.Rows)
                                            {
                                                if ((dra["TENDER"].ToString() == strCard) && (dra["CCTRANNO"].ToString() == ""))
                                                {
                                                    dra["CCTRANNO"] = intCardTranID.ToString();
                                                    break;
                                                }
                                            }
                                            string updtstr = "";
                                            objcard.MercuryInvNo = TranID;
                                            objcard.MercuryProcessData = MercuryProcessData;
                                            objcard.MercuryTranCode = MercuryTranCode;
                                            objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                            objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                            objcard.MercuryRecordNo = MercuryRecordNo;
                                            objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                            objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                            objcard.MercuryTextResponse = MercuryTextResponse;

                                            objcard.CardType = CardLogo;
                                            objcard.AuthCode = AuthCode;
                                            objcard.Reference = RefNo;
                                            objcard.AcqRefData = AcqRef;
                                            objcard.TokenData = Token;

                                            objcard.RefCardAct = CardNum;
                                            objcard.RefCardLogo = CardLogo;
                                            objcard.RefCardEntry = CardEntry;
                                            objcard.RefCardAuthID = AuthCode;
                                            objcard.RefCardTranID = TranID;
                                            objcard.RefCardMerchID = strMercuryMerchantID;
                                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard.CardTranType = "Sale";
                                            objcard.AdjustFlag = "N";
                                            objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                            objcard.PrintXml = "";
                                            updtstr = objcard.UpdateCardResponse();
                                            if (updtstr == "")
                                            {
                                                drP["PROCESSCARD"] = "Y";
                                                RearrangeTenderGridAfterPartialApproval(strCard, ApprovedAmt);
                                                blCardVarify = false;
                                                GeneralFunctions.SetTransactionLog("credit card partial approved", updtstr);
                                                WriteToMercuryLogFile("Update Card Transaction (Partial Approved) Record");
                                                break;
                                            }
                                            else
                                            {
                                                GeneralFunctions.SetTransactionLog("credit card update after partial approved fail", updtstr);
                                                WriteToMercuryLogFile("Failed to Update Card Transaction (Partial Approved) Record");
                                                blCardVarify = false;
                                                break;
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        GeneralFunctions.SetTransactionLog("Catch - credit card update after approved", ex.Message);
                                        blCardVarify = false;
                                        break;
                                    }

                                }
                                else
                                {
                                    blCardVarify = false;
                                    
                                    PrecidiaErrorText = mp.MercuryTextResponse;

                                    if (strCard == "Mercury Gift Card")
                                    {
                                        MercuryTextResponse = mp.MercuryTextResponse;
                                        if (MercuryTextResponse == "Insufficient Account Balance")
                                        {
                                            bMercuryGiftCardInsufficientBalance = true;
                                            ApprovedAmt = mp.ApprovedAmt;
                                            MercuryGiftCardBalance = mp.BalanceAmt;
                                            int dindx = cardidentity.Rows.Count;
                                            cardidentity.Rows.RemoveAt(dindx - 1);
                                            WriteToMercuryLogFile("Insufficient Account Balance");
                                        }
                                        else
                                        {
                                            new MessageBoxWindow().Show(msg1, "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                            WriteToMercuryLogFile("Error : Mercury Gift Card Transaction");
                                        }
                                    }
                                    else if (strCard == "EBT Cash") new MessageBoxWindow().Show(msg1, "EBT Cash Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                    else if (strCard == "EBT Voucher") new MessageBoxWindow().Show(msg1, "EBT Voucher Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                    else new MessageBoxWindow().Show(msg1, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);

                                    WriteToMercuryLogFile("Error : Card Transaction");
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    break;
                                }
                            }

                            //else
                           // {
                            //    blCardVarify = false;
                            //    new MessageBoxWindow().Show(Properties.Resources."Response file not received. Please check Mercury for confirmation. Order will be finalised.", "Mercury Payment Gateway", MessageBoxButton.OK, MessageBoxImage.Information);
                            //    Cursor =System.Windows.Input.Cursors.Arrow;
                            //    break;
                           // }
                        }
                        catch (Exception ex)
                        {
                            GeneralFunctions.SetTransactionLog("Catch - credit card update", ex.Message);
                            blCardVarify = false;

                            if (strCard == "Mercury Gift Card") new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.", "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            else if (strCard == "EBT Cash") new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.", "EBT Cash Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            else if (strCard == "EBT Voucher") new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.", "EBT Voucher Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            else new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            
                            WriteToMercuryLogFile("Error : Card Transaction");

                            Cursor =System.Windows.Input.Cursors.Arrow;
                            break;
                        }
                    }

                    if (Settings.PaymentGateway == 3)
                    {
                        bool boolPrecidiaLessAuthorised = false;
                        precdiacount++;

                        WriteToPrecidiaLogFile("Tender: " + strCard + " - start");

                        blCG = false;
                        blCG1 = false;
                        blCG2 = false;
                        string resp = "";
                        string resptxt = "";

                        if (strCard != "Debit Card")
                        {
                            if (strCard == "Credit Card")
                            {
                                if (Settings.AcceptTips == "Y")
                                {
                                    CGtrantype = "CCPREAUTH";
                                }
                                else
                                {
                                    CGtrantype = "CCSALE";
                                }
                            }
                            if (strCard == "Credit Card - Voice Auth")
                            {
                                CGtrantype = "CCVOICE";
                            }
                            if (strCard == "Credit Card (STAND-IN)")
                            {
                                CGtrantype = "CCVOICE";
                            }
                            if (strCard == "Credit Card - Voice Auth (STAND-IN)")
                            {
                                CGtrantype = "CCVOICE";
                            }

                            if (strCard == "Precidia Gift Card")
                            {
                                CGtrantype = "GCSALE";
                            }

                            if (strCard == "EBT Cash")
                            {
                                CGtrantype = "EBTCASHSALE";
                            }

                            if (strCard == "EBT Voucher")
                            {
                                CGtrantype = "EBTFOODVOUCHERSALE";
                            }
                        }
                        else
                        {
                            CGtrantype = "DCSALE";
                        }

                        CGamt = dblCardAmt;
                        PosDataObject.POS objPOS = new PosDataObject.POS();
                        objPOS.Connection = SystemVariables.Conn;
                        CGinv = objPOS.FetchMaxInvoiceNo();


                        XmlDocument XDoc = new XmlDocument();

                        // Create root node.
                        XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

                        XDoc.ApSystem.Drawing.PendChild(XElemRoot);

                        XmlElement XTemp = XDoc.CreateElement("Command");
                        XTemp.InnerText = CGtrantype;
                        XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                        XTemp = XDoc.CreateElement("Id");
                        XTemp.InnerText = CGinv.ToString();
                        XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                        if ((strCard == "Credit Card") && (Settings.AcceptTips == "Y"))
                        {
                            XTemp = XDoc.CreateElement("AuthAmt");
                            XTemp.InnerText = CGamt.ToString("f");
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                        }
                        else
                        {
                            XTemp = XDoc.CreateElement("Amount");
                            XTemp.InnerText = CGamt.ToString("f");
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                        }

                        //if ((strCard == "Credit Card") && (Settings.PrecidiaUsePINPad == "Y") && (CGtrantype == "CCSALE") && (CGamt >= Settings.PrecidiaSignAmount))
                        //{
                        //    XTemp = XDoc.CreateElement("ReqPPSigCapture");
                        //    XTemp.InnerText = "Yes";
                        //    XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                        //}


                        if ((strCard != "Debit Card") && (drP["MANUAL"].ToString() == "N"))
                        {
                            if (Settings.PrecidiaUsePINPad == "Y")
                            {
                                XTemp = XDoc.CreateElement("Input");
                                XTemp.InnerText = "EXTERNAL";
                                XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                            }
                        }

                        if (strCard == "Debit Card")
                        {
                            XTemp = XDoc.CreateElement("Input");
                            XTemp.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                        }

                        if ((strCard == "Credit Card") || (strCard == "Credit Card - Voice Auth") || (strCard == "Credit Card (STAND-IN)") || (strCard == "EBT Cash") || (strCard == "EBT Voucher"))
                        {
                            if (drP["MANUAL"].ToString() == "Y")
                            {
                                XTemp = XDoc.CreateElement("Input");
                                XTemp.InnerText = "MANUAL";
                                XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                            }
                        }

                        bool procd = true;

                        if (strCard == "Debit Card")
                        {
                            string cbk_resp = "";
                            XmlDocument XDoc1 = new XmlDocument();
                            XmlElement XElemRoot1 = XDoc1.CreateElement("PLRequest");
                            XDoc1.ApSystem.Drawing.PendChild(XElemRoot1);

                            XmlElement XTemp1 = XDoc1.CreateElement("Command");
                            XTemp1.InnerText = "PPGETCASHBACK";
                            XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);

                            XTemp1 = XDoc1.CreateElement("KeepAlive");
                            XTemp1.InnerText = "N";
                            XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);

                            XTemp1 = XDoc1.CreateElement("ClientMAC");
                            XTemp1.InnerText = Settings.PrecidiaClientMAC;
                            XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);

                            if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML Cashback: \n" + XDoc1.OuterXml);

                            XmlDocument XmlResponseCashBack = new XmlDocument();

                            bool bTelnet = false;
                            try
                            {
                                SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc1, ref XmlResponseCashBack);
                                bTelnet = true;
                            }
                            catch (Exception ex)
                            {
                                WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                                bTelnet = false;
                            }

                            if (bTelnet)
                            {
                                if (XmlResponseCashBack.InnerXml != "")
                                {
                                    if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML Cashback: \n" + XmlResponseCashBack.InnerXml);

                                    SocketResponse_CashBack(XmlResponseCashBack);

                                    cbk_resp = CGresp_Cashbk;

                                    WriteToPrecidiaLogFile("Cash Back Response: " + cbk_resp);
                                    WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));
                                    if ((cbk_resp == "SUCCESS") || (cbk_resp == ""))
                                    {
                                        procd = true;
                                        if (CG_Cashbk > 0)
                                        {
                                            XTemp = XDoc.CreateElement("Cashback");
                                            XTemp.InnerText = CG_Cashbk.ToString("f");
                                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                                        }
                                    }
                                    else
                                    {
                                        PrecidiaErrorText = Properties.Resources."Cash Back Error: ", "frmPOSTenderDlg_CashBackError") + CGresp_Cashbk;
                                        PrecidiaDisplayResultText = "TRANSACTION DECLINED";
                                        procd = false;
                                    }
                                }
                                else
                                {
                                    PrecidiaErrorText = "Failed to get response";
                                    PrecidiaDisplayResultText = "TRANSACTION DECLINED";
                                    procd = false;
                                }

                            }
                            else
                            {
                                PrecidiaErrorText = Properties.Resources."Socket Error", "frmPOSTenderDlg_SocketError");
                                PrecidiaDisplayResultText = "TRANSACTION DECLINED";
                                procd = false;
                            }
                        }

                        if (procd)
                        {

                            XTemp = XDoc.CreateElement("KeepAlive");
                            XTemp.InnerText = "N";
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                            XTemp = XDoc.CreateElement("ClientMAC");
                            XTemp.InnerText = Settings.PrecidiaClientMAC;
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);


                            string xmlI = XDoc.InnerXml;
                            string xmlO = XDoc.OuterXml;

                            if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc.OuterXml);

                            XmlDocument XmlResponse = new XmlDocument();

                            bool bTelnet = false;
                            try
                            {
                                SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                                bTelnet = true;
                            }
                            catch (Exception ex)
                            {
                                WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                                bTelnet = false;
                            }

                            if (bTelnet)
                            {
                                if (XmlResponse.InnerXml != "")
                                {
                                    if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse.InnerXml);

                                    SocketResponse_General(XmlResponse);

                                    resp = CGresp;
                                    resptxt = CGresptxt;

                                    WriteToPrecidiaLogFile("Main Response: " + resptxt);
                                    WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));
                                    
                                    if (resp != "")
                                    {
                                        if ((resp == "APPROVED") || (resp == "DUPLICATE") || (resptxt == "REPEATED TRANS"))
                                        {

                                            if ((strCard == "Credit Card") && (Settings.PrecidiaUsePINPad == "Y") && (CGtrantype == "CCSALE") && (CGamt >= Settings.PrecidiaSignAmount))
                                            {
                                                string sign_resp = "";
                                                XmlDocument XDoc2 = new XmlDocument();
                                                XmlElement XElemRoot2 = XDoc2.CreateElement("PLRequest");
                                                XDoc2.ApSystem.Drawing.PendChild(XElemRoot2);

                                                XmlElement XTemp2 = XDoc2.CreateElement("Command");
                                                XTemp2.InnerText = "PPGETSIGNATURE";
                                                XElemRoot2.ApSystem.Drawing.PendChild(XTemp2);

                                                XTemp2 = XDoc2.CreateElement("KeepAlive");
                                                XTemp2.InnerText = "N";
                                                XElemRoot2.ApSystem.Drawing.PendChild(XTemp2);

                                                XTemp2 = XDoc2.CreateElement("ClientMAC");
                                                XTemp2.InnerText = Settings.PrecidiaClientMAC;
                                                XElemRoot2.ApSystem.Drawing.PendChild(XTemp2);

                                                if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML Signature: \n" + XDoc2.OuterXml);

                                                XmlDocument XmlResponseSignature = new XmlDocument();

                                                bool bTelnet2 = false;
                                                try
                                                {
                                                    SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc2, ref XmlResponseSignature);
                                                    bTelnet2 = true;
                                                }
                                                catch (Exception ex)
                                                {
                                                    WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                                                    bTelnet2 = false;
                                                }


                                                if (bTelnet2)
                                                {
                                                    if (XmlResponseSignature.InnerXml != "")
                                                    {
                                                        if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML Signature: \n" + XmlResponseSignature.InnerXml);

                                                        SocketResponse_Signature(XmlResponseSignature);

                                                        sign_resp = CGresp_signature;

                                                        WriteToPrecidiaLogFile("Signature Response: " + sign_resp);
                                                        WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));
                                                        if (sign_resp != "SUCCESS")
                                                        {
                                                            PrecidiaErrorText = Properties.Resources."Signature Failed. Please Get Signature", "frmPOSTenderDlg_SignatureFailedPleaseGetSignat");
                                                            PrecidiaSignature = false;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        PrecidiaErrorText = Properties.Resources."Failed to get signature", "frmPOSTenderDlg_Failedtogetresponse");
                                                        PrecidiaSignature = false;
                                                    }

                                                }
                                                else
                                                {
                                                    PrecidiaErrorText = Properties.Resources."Socket Error - Signature Capture", "frmPOSTenderDlg_SocketErrorSignatureCapture");
                                                    PrecidiaSignature = false;
                                                }
                                            }


                                            double AthAmount = ApprovedAmt == null ? 0 : GeneralFunctions.fnDouble(ApprovedAmt); //- GeneralFunctions.fnDouble(PrecidiaCashBack);

                                            if (AthAmount < CGamt)
                                            {
                                                //WriteToPrecidiaLogFile("Less authorized");
                                                new MessageBoxWindow().Show(Properties.Resources.Card_only_authorized + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources.Please_select_another_tender_to_finish_the_transaction_, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                                drP["AMOUNT"] = GeneralFunctions.FormatDouble1(AthAmount);
                                                boolPrecidiaLessAuthorised = true;
                                            }

                                            foreach (DataRow dra1 in dtblTender.Rows)
                                            {
                                                if ((dra1["TENDER"].ToString() == strCard) && (dra1["CCTRANNO"].ToString() == ""))
                                                {
                                                    dra1["CCTRANNO"] = intCardTranID.ToString();
                                                    break;
                                                }
                                            }

                                            string updtstr = "";

                                            objcard.MercuryRecordNo = "";
                                            objcard.MercuryResponseOrigin = "";
                                            objcard.MercuryResponseReturnCode = "";
                                            objcard.MercuryTextResponse = "";

                                            objcard.MercuryInvNo = "";
                                            objcard.MercuryProcessData = "";
                                            objcard.MercuryTranCode = "";
                                            objcard.MercuryPurchaseAmount = 0;
                                            objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt) - GeneralFunctions.fnDouble(PrecidiaCashBack);
                                            objcard.CardType = CardLogo;
                                            objcard.AuthCode = AuthCode;
                                            objcard.Reference = RefNo;
                                            objcard.AcqRefData = "";
                                            objcard.TokenData = "";

                                            objcard.RefCardAct = CardNum;
                                            objcard.RefCardLogo = CardLogo;
                                            objcard.RefCardEntry = CardEntry;
                                            objcard.RefCardAuthID = AuthCode;
                                            objcard.RefCardTranID = TranID;
                                            objcard.RefCardMerchID = "";
                                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard.CardTranType = "Sale";
                                            objcard.AdjustFlag = "N";
                                            objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                            objcard.PrintXml = "";
                                            updtstr = objcard.UpdateCardResponse();

                                            if (!boolPrecidiaLessAuthorised)
                                            {
                                                if (updtstr == "")
                                                {
                                                    WriteToPrecidiaLogFile("Card Trans Updated");
                                                    blCardVarify = true;
                                                    drP["PROCESSCARD"] = "Y";
                                                }
                                                else
                                                {
                                                    PrecidiaErrorText = Properties.Resources."Record Update: ", "frmPOSTenderDlg_RecordUpdate") + updtstr;
                                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                                    blCardVarify = false;
                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                if (updtstr == "")
                                                {
                                                    WriteToPrecidiaLogFile("Card Trans Updated");
                                                    drP["PROCESSCARD"] = "Y";
                                                }

                                                PrecidiaErrorText = Properties.Resources."Less authorized - Transaction Not Complete", "frmPOSTenderDlg_LessauthorizedTransactionNotCo");
                                                Cursor =System.Windows.Input.Cursors.Arrow;
                                                blCardVarify = false;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            WriteToPrecidiaLogFile(resptxt);
                                            PrecidiaErrorText = resptxt + "\n" + resp;
                                            PrecidiaDisplayResultText = "TRANSACTION DECLINED";
                                            blCardVarify = false;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        WriteToPrecidiaLogFile(resptxt);
                                        Cursor =System.Windows.Input.Cursors.Arrow;
                                        blCardVarify = false;
                                        break;
                                    }
                                }
                                else
                                {
                                    WriteToPrecidiaLogFile("Failed to get response");
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    blCardVarify = false;
                                    break;
                                }

                            }
                            else
                            {
                                PrecidiaErrorText = Properties.Resources."Socket Error", "frmPOSTenderDlg_SocketError");
                                WriteToPrecidiaLogFile("Socket Error");
                                Cursor =System.Windows.Input.Cursors.Arrow;
                                blCardVarify = false;
                                break;
                            }
                        }
                        else
                        {
                            PrecidiaErrorText = Properties.Resources."Socket Error", "frmPOSTenderDlg_SocketError");
                            WriteToPrecidiaLogFile("Socket Error");
                            Cursor =System.Windows.Input.Cursors.Arrow;
                            blCardVarify = false;
                            break;
                        }
                    }

                    if (Settings.PaymentGateway == 5) // Datacap 
                    {
                        WriteToDatacapLogFile("Tender: " + strCard + " - start");

                        Dcap_CmdStatus = "";
                        Dcap_TextResponse = "";
                        Dcap_AcctNo = "";
                        Dcap_Merchant = ""; 
                        Dcap_TranCode = "";
                        Dcap_CardType = "";
                        Dcap_AuthCode = ""; 
                        Dcap_RefNo = "";
                        Dcap_AcqRefData = "";
                        Dcap_RecordNo = "";
                        Dcap_InvoiceNo = "";
                        Dcap_TranAmt = 0;
                        Dcap_AuthAmt = 0;
                        Dcap_CashBkAmt = 0;
                        Dcap_BalAmt = 0;

                        bool boolDatacapLessAuthorised = false;
                        bool bproceed = true;
                        string request_xml = "";
                        string response_xml = "";
                        string request_xml_signature = "";
                        string response_xml_signature = "";
                        DSIPDCXLib.DsiPDCX dsipdx = new DSIPDCXLib.DsiPDCX();
                        DSIPDCXLib.DsiPDCX dsipdx1 = new DSIPDCXLib.DsiPDCX();
                        DSIPDCXLib.DsiPDCX dsipdx2 = new DSIPDCXLib.DsiPDCX();

                        dsipdx.ServerIPConfig(Settings.DatacapServer, 1);

                        dsipdx1.ServerIPConfig(Settings.DatacapServer, 1);

                        PosDataObject.POS objPOS = new PosDataObject.POS();
                        objPOS.Connection = SystemVariables.Conn;
                        int dcap_max_inv = objPOS.FetchMaxInvoiceNo();

                        if (strCard == "Credit Card")
                        {
                            if ((dblCardAmt < Settings.DatacapSignAmount) || (Settings.DatacapCardEntryMode == 1) || (drP["MANUAL"].ToString() == "Y"))
                            {
                                
                                request_xml = GeneralFunctions.Datacap_CreditSale_Request_XML(dblCardAmt, dcap_max_inv, drP["MANUAL"].ToString() == "Y"? true : false);
                                try
                                {
                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                }
                                catch
                                {
                                    bproceed = false;
                                }
                                

                         //response_xml = "<RStream><CmdResponse><ResponseOrigin>Processor</ResponseOrigin><DSIXReturnCode>000000</DSIXReturnCode><CmdStatus>Approved</CmdStatus>"
                                  // + "<TextResponse>APPROVED</TextResponse><UserTraceData></UserTraceData></CmdResponse><TranResponse><MerchantID>595901</MerchantID><AcctNo>XXXXXXXXXXXX6781</AcctNo>"
                               //  + "<CardType>CREDIT</CardType><TranCode>Sale</TranCode><CaptureStatus>Captured</CaptureStatus><RefNo>0010</RefNo><InvoiceNo>465588</InvoiceNo>"
                              //  + "<Amount><Purchase>2.00</Purchase><Authorize>1.50</Authorize></Amount></TranResponse></RStream>";
                            }
                            else
                            {
                                
                                request_xml_signature = GeneralFunctions.Datacap_GetSignature_Request_XML(drP["MANUAL"].ToString() == "Y" ? true : false);
                                try
                                {
                                    response_xml_signature = dsipdx1.ProcessTransaction(request_xml_signature, 1, null, null);
                                }
                                catch
                                {
                                    bproceed = false;
                                }
                                string s_status = "";
                                string s_response = "";
                                GeneralFunctions.Datacap_Signature_Response(response_xml_signature, ref s_status, ref s_response, ref Dcap_Sign);
                                if (s_status == "Success")
                                {
                                    request_xml = GeneralFunctions.Datacap_CreditSale_Request_XML(dblCardAmt, dcap_max_inv, Dcap_Sign, drP["MANUAL"].ToString() == "Y" ? true : false);
                                    try
                                    {
                                        response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                    }
                                    catch
                                    {
                                        bproceed = false;
                                    }
                                }
                                else
                                {
                                    new MessageBoxWindow().Show(s_status + "\n\n" + s_response, "Card Payment - Signature Capture", MessageBoxButton.OK, MessageBoxImage.Information);
                                    bproceed = false;
                                }
                                
                                
                                //request_xml = GeneralFunctions.Datacap_CreditSale_Request_XML(dblCardAmt, dcap_max_inv, drP["MANUAL"].ToString() == "Y" ? true : false);
                                //try
                                //{
                                //    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                //}
                                //catch
                                //{
                                //    bproceed = false;
                                //}

                                //if (bproceed)
                                //{

                                //    request_xml_signature = GeneralFunctions.Datacap_GetSignature_Request_XML(drP["MANUAL"].ToString() == "Y" ? true : false);
                                //    try
                                //    {
                                 //       response_xml_signature = dsipdx1.ProcessTransaction(request_xml_signature, 1, null, null);
                                 //   }
                                //    catch
                                //    {
                                  //      bproceed = false;
                                 //   }

                                  //  string s_status = "";
                                  //  string s_response = "";
                                  //  GeneralFunctions.Datacap_Signature_Response(response_xml_signature, ref s_status, ref s_response, ref Dcap_Sign);
                                  //  if (s_status == "Success")
                                    //{

                                  //  }
                                  //  else
                                  //  {
                                   //     new MessageBoxWindow().Show(s_status + "\n\n" + s_response, "Card Payment - Signature Capture", MessageBoxButton.OK, MessageBoxImage.Information);
                                  //      bproceed = false;
                                   // }
                               // }
                            }

                        }

                        if (strCard == "Debit Card")
                        {
                            Dcap_CashBkAmt = 0;
                            frmPOSCashBackPopup fcbkpopup = new frmPOSCashBackPopup();
                            try
                            {
                                fcbkpopup.ShowDialog();
                                if (fcbkpopup.DialogResult == System.Windows.Forms.MessageBoxResult.OK)
                                {
                                    Dcap_CashBkAmt = fcbkpopup.CashBackAmount;
                                }
                            }
                            finally
                            {
                                fcbkpopup.Dispose();
                            }

                            request_xml = GeneralFunctions.Datacap_DebitSale_Request_XML(dblCardAmt, dcap_max_inv, Dcap_CashBkAmt);
                            try
                            {
                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);

                         //       response_xml = "<RStream><CmdResponse><ResponseOrigin>Processor</ResponseOrigin><DSIXReturnCode>000000</DSIXReturnCode><CmdStatus>Approved</CmdStatus>"
                        //            + "<TextResponse>APPROVED</TextResponse><UserTraceData></UserTraceData></CmdResponse><TranResponse><MerchantID>595901</MerchantID><AcctNo>XXXXXXXXXXXX6781</AcctNo>"
                       //             + "<CardType>DEBIT</CardType><TranCode>Sale</TranCode><CaptureStatus>Captured</CaptureStatus><RefNo>0010</RefNo><InvoiceNo>465588</InvoiceNo>"
                           //         + "<Amount><Purchase>1.00</Purchase><Authorize>3.00</Authorize><CashBack>2.00</CashBack></Amount></TranResponse></RStream>";
                            }
                            catch
                            {
                                bproceed = false;
                            }
                        }

                        if (strCard == "Datacap Gift Card")
                        {
                            request_xml = GeneralFunctions.Datacap_PrePaidSale_Request_XML(dblCardAmt, dcap_max_inv);
                            try
                            {
                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                            }
                            catch
                            {
                                bproceed = false;
                            }
                        }

                        if (strCard == "EBT Cash")
                        {
                            Dcap_CashBkAmt = 0;
                            frmPOSCashBackPopup fcbkpopup = new frmPOSCashBackPopup();
                            try
                            {
                                fcbkpopup.ShowDialog();
                                if (fcbkpopup.DialogResult == System.Windows.Forms.MessageBoxResult.OK)
                                {
                                    Dcap_CashBkAmt = fcbkpopup.CashBackAmount;
                                }
                            }
                            finally
                            {
                                fcbkpopup.Dispose();
                            }

                            request_xml = GeneralFunctions.Datacap_EBTCashSale_Request_XML(dblCardAmt, dcap_max_inv, Dcap_CashBkAmt, drP["MANUAL"].ToString() == "Y" ? true : false);

                            try
                            {
                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);

                           //     response_xml = "<RStream><CmdResponse><ResponseOrigin>Processor</ResponseOrigin><DSIXReturnCode>000000</DSIXReturnCode>"
		                  //      + "<CmdStatus>Approved</CmdStatus><TextResponse>APPROVED</TextResponse><UserTraceData></UserTraceData></CmdResponse><TranResponse>"
		                 //       + "<MerchantID>595901</MerchantID><AcctNo>XXXXXXXXXXXX6781</AcctNo><ExpDate>XXXX</ExpDate><CardType>Cash</CardType>"
		                 //       + "<TranCode>Sale</TranCode><CaptureStatus>Captured</CaptureStatus><RefNo>0024</RefNo><InvoiceNo>468892</InvoiceNo>"
                        //        + "<Amount><Purchase>1.00</Purchase><Authorize>3.00</Authorize><CashBack>2.00</CashBack><Balance>0.00</Balance></Amount></TranResponse></RStream>";
                            }
                            catch
                            {
                                bproceed = false;
                            }
                        }

                        WriteToDatacapLogFile("Request XML : " + request_xml);
                        WriteToDatacapLogFile("\n");
                        WriteToDatacapLogFile("Response XML : " + response_xml);

                        if (bproceed)
                        {
                            GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);
                        }
                        else
                        {
                            WriteToDatacapLogFile("Error");
                        }
                        if (Dcap_CmdStatus == "Approved")
                        {
                            double AthAmount = Dcap_AuthAmt;

                            if (AthAmount < Dcap_TranAmt)
                            {
                                //WriteToPrecidiaLogFile("Less authorized");
                                new MessageBoxWindow().Show(Properties.Resources.Card_only_authorized + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources.Please_select_another_tender_to_finish_the_transaction_, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                drP["AMOUNT"] = GeneralFunctions.FormatDouble1(AthAmount);
                                WriteToDatacapLogFile("Less Authorized");
                                boolDatacapLessAuthorised = true;
                            }

                            foreach (DataRow dra1 in dtblTender.Rows)
                            {
                                if ((dra1["TENDER"].ToString() == strCard) && (dra1["CCTRANNO"].ToString() == ""))
                                {
                                    dra1["CCTRANNO"] = intCardTranID.ToString();
                                    break;
                                }
                            }

                            string updtstr = "";

                            objcard.MercuryRecordNo = "";
                            objcard.MercuryResponseOrigin = "";
                            objcard.MercuryResponseReturnCode = "";
                            objcard.MercuryTextResponse = "";

                            objcard.MercuryInvNo = Dcap_InvoiceNo;
                            objcard.MercuryProcessData = "";
                            objcard.MercuryTranCode = "";
                            objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                            objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                            objcard.CardType = Dcap_CardType;
                            objcard.AuthCode = Dcap_AuthCode;
                            objcard.Reference = Dcap_RefNo;
                            objcard.AcqRefData = Dcap_AcqRefData;
                            objcard.TokenData = Dcap_RecordNo;

                            objcard.RefCardAct = Dcap_AcctNo;
                            objcard.RefCardLogo = Dcap_CardType;
                            objcard.RefCardEntry = ((Settings.DatacapCardEntryMode == 1) || (drP["MANUAL"].ToString() == "Y")) ? "Manual" : "Swipe";
                            objcard.RefCardAuthID = Dcap_AuthCode;
                            objcard.RefCardTranID = TranID;
                            objcard.RefCardMerchID = Dcap_Merchant;
                            objcard.RefCardAuthAmount = Dcap_AuthAmt;
                            objcard.CardTranType = "Sale";
                            objcard.AdjustFlag = "N";
                            objcard.RefCardBalAmount = Dcap_BalAmt;
                            objcard.PrintXml = Dcap_PrintDraft;
                            updtstr = objcard.UpdateCardResponse();

                            if (!boolDatacapLessAuthorised)
                            {
                                if (updtstr == "")
                                {
                                    blCardVarify = true;
                                    drP["PROCESSCARD"] = "Y";
                                }
                                else
                                {
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    blCardVarify = false;
                                    break;
                                }
                            }
                            else
                            {
                                if (updtstr == "")
                                {
                                    drP["PROCESSCARD"] = "Y";
                                }

                                Cursor =System.Windows.Input.Cursors.Arrow;
                                blCardVarify = false;
                                break;
                            }
                        }
                        else
                        {
                            WriteToDatacapLogFile(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse);
                            if (Dcap_CmdStatus != "") new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            Cursor =System.Windows.Input.Cursors.Arrow;
                            blCardVarify = false;
                            break;
                        }

                    }







                    if (Settings.PaymentGateway == 6) // Datacap EMV
                    {
                        WriteToDatacapEMVLogFile("Tender: " + strCard + " - start");

                        CallPadResetCount = 0;
                        CallEMVPadReset();

                        CallPadResetCount = 0;

                        if (CallPadResetCount == 5)
                        {
                            CallPadResetCount = 0;
                            if (Dcap_PPAD_CmdStatus != "Success") new MessageBoxWindow().Show(Dcap_PPAD_CmdStatus + "\n\n" + Dcap_PPAD_TextResponse, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            WriteToDatacapEMVLogFile(Dcap_PPAD_CmdStatus + "\n\n" + Dcap_PPAD_TextResponse);
                            Cursor =System.Windows.Input.Cursors.Arrow;
                            blCardVarify = false;
                            break;
                        }
                        else
                        {
                            Dcap_CmdStatus = "";
                            Dcap_TextResponse = "";
                            Dcap_AcctNo = "";
                            Dcap_Merchant = "";
                            Dcap_TranCode = "";
                            Dcap_CardType = "";
                            Dcap_AuthCode = "";
                            Dcap_RefNo = "";
                            Dcap_AcqRefData = "";
                            Dcap_RecordNo = "";
                            Dcap_InvoiceNo = "";
                            Dcap_TranAmt = 0;
                            Dcap_AuthAmt = 0;
                            Dcap_CashBkAmt = 0;
                            Dcap_ProcessData = "";
                            Dcap_PrintDraft = "";
                            bool boolDatacapLessAuthorised = false;
                            bool bproceed = true;
                            string request_xml = "";
                            string response_xml = "";
                            DSIEMVXLib.DsiEMVX dsiEMV = new DSIEMVXLib.DsiEMVX();
                            PosDataObject.POS objPOS = new PosDataObject.POS();
                            objPOS.Connection = SystemVariables.Conn;
                            int dcap_max_inv = objPOS.FetchMaxInvoiceNo();


                            
                            //response_xml = "<RStream><CmdResponse><ResponseOrigin>Processor</ResponseOrigin><DSIXReturnCode>000000</DSIXReturnCode>" + 
                            //" <CmdStatus>Approved</CmdStatus><TextResponse>APPROVED</TextResponse><SequenceNo>0010010010</SequenceNo><UserTrace>Dev1</UserTrace>" +
                            //" </CmdResponse><TranResponse><MerchantID>700000000245</MerchantID><TerminalID>002</TerminalID><AcctNo>************0119</AcctNo>" +
                            //" <CardType>VISA</CardType><TranCode>EMVSale</TranCode><AuthCode>036556</AuthCode><CaptureStatus>Captured</CaptureStatus>" +
                            //" <RefNo>00000001</RefNo><InvoiceNo>0003</InvoiceNo><OperatorID>TEST</OperatorID><Amount><Purchase>6.00</Purchase><Authorize>6.00</Authorize>" +
                            //" </Amount><AcqRefData>T305187511660041CPRL00599905 ||N|6.00|RN101436191862</AcqRefData><EntryMethod>CHIP</EntryMethod>" +
                            //" <Date>07/06/2015</Date><Time>10:12:38</Time><ApplicationLabel>Visa Credit</ApplicationLabel><AID>A0000000031010</AID>" +
                            //" <TVR>8000008000</TVR><IAD>06010A03602000</IAD><TSI>6800</TSI><ARC>00</ARC><CVM>SIGN</CVM></TranResponse>" +
                            //" <PrintData><Line1>.MERCHANT ID: 700000000245</Line1><Line2>.TERMINAL ID: 002</Line2><Line3>.CLERK ID: TEST</Line3><Line4>.</Line4>" +
                            //" <Line5>. SALE </Line5><Line6>.</Line6><Line7>.************0119</Line7><Line8>.VISA ENTRY METHOD: CHIP</Line8>" +
                            //" <Line9>.DATE: 07/06/2015 TIME: 10:12:38</Line9><Line10>.</Line10><Line11>.INVOICE: 0003</Line11><Line12>.REFERENCE: 00000001</Line12>" +
                            //" <Line13>.AUTH CODE: 036556</Line13><Line14>.</Line14><Line15>.AMOUNT USD$ 6.00</Line15><Line16>. ==========</Line16><Line17>.TOTAL USD$ 6.00</Line17>" +
                            //" <Line18>.</Line18><Line19>. APPROVED - THANK YOU </Line19><Line20>.</Line20><Line21>.I AGREE TO PAY THE ABOVE TOTAL AMOUNT</Line21><Line22>.ACCORDING TO CARD ISSUER AGREEMENT</Line22>" +
                            //" <Line23>.(MERCHANT AGREEMENT IF CREDIT VOUCHER)</Line23><Line24>.</Line24>" +
                            //" <Line25>.</Line25><Line26>.</Line26><Line27>.x_______________________________________</Line27>" +
                            //" <Line28>. Cardholder Signature </Line28><Line29>.</Line29><Line30>.</Line30>" +
                            //" <Line31>.Application Label: Visa Credit</Line31><Line32>.AID: A0000000031010</Line32><Line33>.TVR: 8000008000</Line33><Line34>.IAD: 06010A03602000</Line34>" +
                            //" <Line35>.TSI: 6800</Line35><Line36>.ARC: 00</Line36><Line37>.CVM: SIGN</Line37>" +
                            //" </PrintData></RStream>";
                            



                            

                            if (strCard == "Credit Card")
                            {
                                request_xml = GeneralFunctions.PrepareEMVSaleXML(dcap_max_inv, dblCardAmt, false, drP["MANUAL"].ToString() == "Y" ? "Y" : Settings.DatacapEMVManual);
                                try
                                {
                                    response_xml = dsiEMV.ProcessTransaction(request_xml);
                                }
                                catch
                                {
                                    bproceed = false;
                                }
                            }

                            if (strCard == "Debit Card")
                            {
                                request_xml = GeneralFunctions.PrepareEMVSaleXML(dcap_max_inv, dblCardAmt, true, drP["MANUAL"].ToString() == "Y" ? "Y" : Settings.DatacapEMVManual);
                                try
                                {
                                    response_xml = dsiEMV.ProcessTransaction(request_xml);
                                }
                                catch
                                {
                                    bproceed = false;
                                }
                            }

                              

                            if (bproceed)
                            {
                                GeneralFunctions.DatacapEMV_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                    ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                    ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_ProcessData, ref Dcap_PrintDraft);

                            }

                            WriteToDatacapEMVLogFile("Request XML : " + request_xml);
                            WriteToDatacapEMVLogFile("\n");
                            WriteToDatacapEMVLogFile("Response XML : " + response_xml);


                            if (Dcap_CmdStatus == "Approved")
                            {
                                GeneralFunctions.StoreResponseSequence(response_xml);

                                double AthAmount = Dcap_AuthAmt;

                                if (AthAmount < Dcap_TranAmt)
                                {
                                    new MessageBoxWindow().Show(Properties.Resources.Card_only_authorized + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources.Please_select_another_tender_to_finish_the_transaction_, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                    drP["AMOUNT"] = GeneralFunctions.FormatDouble1(AthAmount);
                                    WriteToDatacapEMVLogFile("Less Authorised");
                                    boolDatacapLessAuthorised = true;
                                }

                                foreach (DataRow dra1 in dtblTender.Rows)
                                {
                                    if ((dra1["TENDER"].ToString() == strCard) && (dra1["CCTRANNO"].ToString() == ""))
                                    {
                                        dra1["CCTRANNO"] = intCardTranID.ToString();
                                        break;
                                    }
                                }

                                string updtstr = "";

                                objcard.MercuryRecordNo = "";
                                objcard.MercuryResponseOrigin = "";
                                objcard.MercuryResponseReturnCode = "";
                                objcard.MercuryTextResponse = "";

                                objcard.MercuryInvNo = Dcap_InvoiceNo;
                                objcard.MercuryProcessData = Dcap_ProcessData;
                                objcard.MercuryTranCode = Dcap_TranCode;
                                objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                                objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                                objcard.CardType = Dcap_CardType;
                                objcard.AuthCode = Dcap_AuthCode;
                                objcard.Reference = Dcap_RefNo;
                                objcard.AcqRefData = Dcap_AcqRefData;
                                objcard.TokenData = Dcap_RecordNo;

                                objcard.RefCardAct = Dcap_AcctNo;
                                objcard.RefCardLogo = Dcap_CardType;
                                objcard.RefCardEntry = CardEntry;
                                objcard.RefCardAuthID = Dcap_AuthCode;
                                objcard.RefCardTranID = TranID;
                                objcard.RefCardMerchID = Dcap_Merchant;
                                objcard.RefCardAuthAmount = Dcap_AuthAmt;
                                objcard.CardTranType = "Sale";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = 0;
                                objcard.PrintXml = Dcap_PrintDraft;
                                updtstr = objcard.UpdateCardResponse();

                                if (!boolDatacapLessAuthorised)
                                {
                                    if (updtstr == "")
                                    {
                                        blCardVarify = true;
                                        drP["PROCESSCARD"] = "Y";
                                    }
                                    else
                                    {
                                        Cursor =System.Windows.Input.Cursors.Arrow;
                                        blCardVarify = false;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (updtstr == "")
                                    {
                                        drP["PROCESSCARD"] = "Y";
                                    }

                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    blCardVarify = false;
                                    break;
                                }
                            }
                            else
                            {
                                if (Dcap_CmdStatus != "") new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToDatacapEMVLogFile(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse);
                                Cursor =System.Windows.Input.Cursors.Arrow;
                                blCardVarify = false;
                                break;
                            }
                        }
                    }
                    */

                    /*
                    if (Settings.PaymentGateway == 7) // POSLink
                    {
                        WriteToPOSLinkLogFile("Inside Card Verify()"); // PAX LOG
                        POSLinkLogPath = POSLinkLogFilePath();
                        bool boolPOSLinkLessAuthorised = false;
                        POSLink_ResultCode = "";
                        POSLink_ResultTxt = "";
                        POSLink_RefNum = "";
                        POSLink_AuthCode = "";
                        POSLink_CardType = "";
                        POSLink_BogusAccountNum = "";
                        POSLink_CashBack = 0;
                        POSLink_RequestedAmt = 0;
                        POSLink_ApprovedAmt = 0;
                        POSLink_RemainingBalance = 0;
                        POSLink_ExtraBalance = 0;

                        PosDataObject.POS objPOS = new PosDataObject.POS();
                        objPOS.Connection = SystemVariables.Conn;
                        int refinv = objPOS.FetchMaxInvoiceNo();

                        POSLink.PosLink pg = new POSLink.PosLink();

                        pg.CommSetting = GeneralFunctions.GetPOSLinkCommSetup();

                        POSLink.LogManagement plog = new POSLink.LogManagement();
                        plog.LogLevel = 1;
                        plog.LogFilePath = System.IO.Path.GetDirectoryName(POSLinkLogPath);
                        pg.LogManageMent = plog;

                        POSLink.PaymentRequest paymentRequest = new POSLink.PaymentRequest();

                        if (strCard == "Credit Card")
                        {
                            paymentRequest.TenderType = paymentRequest.ParseTenderType("CREDIT");
                            paymentRequest.SigSavePath = POSLinkSignatureFilePath();

                        }

                        if (strCard == "Debit Card")
                        {
                            paymentRequest.TenderType = paymentRequest.ParseTenderType("DEBIT");

                            //POSLink_CashBack = 0;
                            //frmPOSCashBackPopup fcbkpopup = new frmPOSCashBackPopup();
                            //try
                            //{
                            //fcbkpopup.ShowDialog();
                            //if (fcbkpopup.DialogResult == System.Windows.Forms.MessageBoxResult.OK)
                            //{
                            //POSLink_CashBack = fcbkpopup.CashBackAmount;
                            //}
                            //}
                            //finally
                            //{
                            //fcbkpopup.Dispose();
                            //}
                            //paymentRequest.CashBackAmt = Convert.ToString(POSLink_CashBack * 100);
                        }

                        if (strCard == "POSLink Gift Card")
                        {
                            paymentRequest.TenderType = paymentRequest.ParseTenderType("GIFT");
                        }

                        if (strCard == "EBT Cash")
                        {
                            paymentRequest.TenderType = paymentRequest.ParseTenderType("EBT_CASHBENEFIT");
                        }

                        if (strCard == "Food Stamps")
                        {
                            paymentRequest.TenderType = paymentRequest.ParseTenderType("EBT_FOODSTAMP");
                        }

                        paymentRequest.TransType = paymentRequest.ParseTransType("SALE");

                        paymentRequest.Amount = Convert.ToString(dblCardAmt * 100);

                        paymentRequest.OrigRefNum = "";
                        paymentRequest.InvNum = refinv.ToString();
                        paymentRequest.UserID = "";
                        paymentRequest.PassWord = "";
                        paymentRequest.ClerkID = "";
                        paymentRequest.ServerID = "";
                        paymentRequest.ECRRefNum = "1";


                        if (drP["Manual"].ToString() == "Y")
                        {
                            POSLink.ManageRequest manageRequest = new POSLink.ManageRequest();
                            manageRequest.ManualEntryFlag = "1";
                            manageRequest.Timeout = "200";
                            manageRequest.TransType = manageRequest.ParseTransType("INPUTACCOUNT");
                            if (strCard == "Credit Card") manageRequest.EDCType = manageRequest.ParseEDCType("CREDIT");
                            if (strCard == "Debit Card") manageRequest.EDCType = manageRequest.ParseEDCType("DEBIT");
                            if (strCard == "POSLink Gift Card") manageRequest.EDCType = manageRequest.ParseEDCType("GIFT");
                            if (strCard == "EBT Cash") manageRequest.EDCType = manageRequest.ParseEDCType("EBT_CASHBENEFIT");
                            if (strCard == "Food Stamps") manageRequest.EDCType = manageRequest.ParseEDCType("EBT_FOODSTAMP");

                            manageRequest.ExpiryDatePrompt = (strCard == "Debit Card") ? "0" : "1";

                            pg.ManageRequest = manageRequest;
                            POSLink.ProcessTransResult resultm = pg.ProcessTrans();

                            string mAccountNo = "";
                            string mExp = "";
                            if (resultm.Code == POSLink.ProcessTransResultCode.OK)
                            {
                                POSLink.ManageResponse mr = pg.ManageResponse;
                                mAccountNo = mr.PAN;
                                mExp = mr.ExpiryDate;
                            }
                            paymentRequest.ExtData = "<ExtData><Account>" + mAccountNo + "</Account><ExpDate>" + mExp + "</ExpDate></ExtData>";
                        }



                        pg.PaymentRequest = paymentRequest;

                        POSLink.ProcessTransResult result = new POSLink.ProcessTransResult();

                        result = pg.ProcessTrans();

                        WriteToPOSLinkLogFile("Trans Result from PAX :" + result.Msg); // PAX LOG

                        if (result.Code == POSLink.ProcessTransResultCode.OK)
                        {
                            POSLink.PaymentResponse paymentResponse = pg.PaymentResponse;
                            if (paymentResponse != null && paymentResponse.ResultCode != null)
                            {

                                POSLink_ResultCode = paymentResponse.ResultCode;
                                POSLink_ResultTxt = paymentResponse.ResultTxt;
                                POSLink_RefNum = paymentResponse.RefNum;



                                POSLink_RequestedAmt = GeneralFunctions.fnDouble(paymentResponse.RequestedAmount) / 100;
                                POSLink_ApprovedAmt = GeneralFunctions.fnDouble(paymentResponse.ApprovedAmount) / 100;
                                POSLink_RemainingBalance = GeneralFunctions.fnDouble(paymentResponse.RemainingBalance) / 100;
                                POSLink_ExtraBalance = GeneralFunctions.fnDouble(paymentResponse.ExtraBalance) / 100;

                                POSLink_BogusAccountNum = paymentResponse.BogusAccountNum;
                                POSLink_CardType = paymentResponse.CardType;


                                POSLink_AuthCode = paymentResponse.AuthCode;


                                POSLink_CashBack = GeneralFunctions.GetPAXCashback(paymentResponse.ExtData);

                                if (POSLink_CashBack != 0) boolPAXCashBack = true;

                                if (POSLink_ResultCode == "000000") // Approved
                                {
                                    double AthAmount = POSLink_ApprovedAmt;

                                    if (AthAmount < POSLink_RequestedAmt)
                                    {
                                        new MessageBoxWindow().Show(Properties.Resources.Card_only_authorized.Replace("$", SystemVariables.CurrencySymbol) + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources.Please_select_another_tender_to_finish_the_transaction_, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                        drP["AMOUNT"] = GeneralFunctions.FormatDouble1(AthAmount);
                                        //WriteToDatacapLogFile("Less Authorized");
                                        boolPOSLinkLessAuthorised = true;
                                    }

                                    foreach (DataRow dra1 in dtblTender.Rows)
                                    {
                                        if ((dra1["TENDER"].ToString() == strCard) && (dra1["CCTRANNO"].ToString() == ""))
                                        {
                                            dra1["CCTRANNO"] = intCardTranID.ToString();
                                            break;
                                        }
                                    }

                                    string updtstr = "";

                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = POSLink_RequestedAmt;
                                    objcard.CardAmount = POSLink_ApprovedAmt - POSLink_CashBack;
                                    objcard.CardType = POSLink_CardType;
                                    objcard.AuthCode = POSLink_AuthCode;
                                    objcard.Reference = POSLink_RefNum;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";

                                    objcard.RefCardAct = POSLink_BogusAccountNum;
                                    objcard.RefCardLogo = POSLink_CardType;
                                    objcard.RefCardEntry = "";
                                    objcard.RefCardAuthID = POSLink_AuthCode;
                                    objcard.RefCardTranID = POSLink_RefNum;
                                    objcard.RefCardMerchID = "";
                                    objcard.RefCardAuthAmount = POSLink_ApprovedAmt;
                                    objcard.CardTranType = "Sale";
                                    objcard.AdjustFlag = "N";
                                    objcard.RefCardBalAmount = POSLink_RemainingBalance;
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();

                                    if (!boolPOSLinkLessAuthorised)
                                    {
                                        if (updtstr == "")
                                        {
                                            blCardVarify = true;
                                            drP["PROCESSCARD"] = "Y";
                                        }
                                        else
                                        {
                                            Cursor = System.Windows.Input.Cursors.Arrow;
                                            blCardVarify = false;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        if (updtstr == "")
                                        {
                                            drP["PROCESSCARD"] = "Y";
                                        }

                                        Cursor = System.Windows.Input.Cursors.Arrow;
                                        blCardVarify = false;
                                        break;
                                    }

                                }
                                else
                                {
                                    new MessageBoxWindow().Show(POSLink_ResultTxt, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                    blCardVarify = false;
                                    break;
                                }

                            }
                            else
                            {
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blCardVarify = false;
                                break;
                            }

                        }
                        else if (result.Code == POSLink.ProcessTransResultCode.TimeOut)
                        {
                            new MessageBoxWindow().Show("Action Timeout.", "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            blCardVarify = false;
                            break;
                        }
                        else
                        {
                            new MessageBoxWindow().Show(result.Msg, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            blCardVarify = false;
                            break;

                        }
                    }
                    */
                    #endregion

                    

                    if (Settings.PaymentGateway == 8)
                    {
                       

                        PosDataObject.POS objPOS = new PosDataObject.POS();
                        objPOS.Connection = SystemVariables.Conn;
                        int invoiceNo = objPOS.FetchMaxInvoiceNo();

                        int XeConnectId = objPOS.GetXeConnectID();

                        /*
                        if (Layaway && intMaxInvNo> 0)
                        {
                            invoiceNo = intMaxInvNo;
                        }
                        */

                        decimal amount = GeneralFunctions.fnDecimal(string.Format("{0:#.00}", Convert.ToDecimal(dblCardAmt)));

                        

                        var evoTransactionForm = new XeposExternal.frm_EvoTransaction(amount, XeConnectId, isRefundOrVoid: false, isExecuteVoid: false, dtblPart: null, calledfrom: null); 

                        blurGrid.Visibility = Visibility.Visible;
                        evoTransactionForm.ShowDialog();
                        blurGrid.Visibility = Visibility.Collapsed;
                        
                        bool evosuccess = objPOS.IsXeConnectTransactionRecordExist(XeConnectId);

                        try
                        {
                            // EVo logging in DB
                            var respDTO = Newtonsoft.Json.JsonConvert.SerializeObject("CardVarify()");
                            GeneralFunctions.SetDetailedTransactionLog("frm_POSTenderDLG.CardVarify()", "Response --> TransactionCompleted= " + evoTransactionForm.TransactionCompleted.ToString() + " -> " +
                                respDTO + $" --> Invoice Exists = {evosuccess.ToString()} = Invoice{XeConnectId.ToString()} = Line 7960 --> amount {amount.ToString()}, invoiceNo= {invoiceNo.ToString()}, isRefundOrVoid: false, isExecuteVoid: false", invoiceNo.ToString());
                        }
                        catch (Exception ex)
                        {
                        }

                        if (evosuccess && evoTransactionForm.TransactionCompleted)
                        {
                            
                            DataTable dtblXE = objPOS.FetchXeConnectTransactionRecord(XeConnectId);

                            string Xestatuscode = "";
                            string Xeamount = "";
                            string Xetranid = "";
                            string Xeauthcode = "";

                            

                            foreach (DataRow drxe in dtblXE.Rows)
                            {
                                Xestatuscode = drxe["StatusCode"].ToString();
                                Xeauthcode = drxe["ApprovalCode"].ToString();
                                Xetranid = drxe["TransactionId"].ToString();
                                Xeamount = drxe["Amount"].ToString();
                            }


                            bool boolLessAuthorised = false;

                            if (GeneralFunctions.fnDouble(Xeamount) < dblCardAmt)
                            {
                                DocMessage.MsgInformation("Card only authorized " + SystemVariables.CurrencySymbol + Xeamount);
                                drP["AMOUNT"] = GeneralFunctions.fnDouble(Xeamount);

                                boolLessAuthorised = true;
                            }


                            foreach (DataRow dra1 in dtblTender.Rows)
                            {
                                if ((dra1["TENDER"].ToString() == strCard) && (dra1["CCTRANNO"].ToString() == ""))
                                {
                                    dra1["CCTRANNO"] = intCardTranID.ToString();
                                    dra1["XeConnectID"] = XeConnectId.ToString();
                                    break;
                                }

                            }


                            string updtstr = "";


                            objcard.CardAmount = GeneralFunctions.fnDouble(Xeamount);

                            objcard.AuthCode = Xeauthcode;
                            objcard.Reference = XeConnectId.ToString();


                            objcard.RefCardAuthID = Xeauthcode;
                            objcard.RefCardTranID = Xetranid;
                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(Xeamount);
                            objcard.CardTranType = "Sale";
                            objcard.ID = intCardTranID;
                            objcard.LoginUserID = SystemVariables.CurrentUserID;
                            objcard.AdjustFlag = "N";
                            updtstr = objcard.UpdateCardTransOnEvoResponse();

                            

                            if (!boolLessAuthorised)
                            {
                                if (updtstr == "")
                                {
                                    blCardVarify = true;
                                    drP["PROCESSCARD"] = "Y";
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                }
                                else
                                {
                                    
                                    blCardVarify = false;
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                    break;
                                }
                            }
                            else
                            {
                                if (updtstr == "")
                                {
                                    drP["PROCESSCARD"] = "Y";
                                }

                                blCardVarify = false;
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                break;
                            }


                        }
                        else
                        {
                            
                            blCardVarify = false;
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            break;
                        }
                    }


                    if (Settings.PaymentGateway == 9)
                    {
                        ps_error = "";
                        boolPSTerminalAvailablity = false;
                        boolPSComplete = false;
                        ps_tid = "";
                        ps_currency = "";
                        ps_status = "";
                        ps_amt = "";
                        try
                        {
                            ps_amt = dblCardAmt.ToString("f2").Replace(".", String.Empty).TrimStart(new Char[] { '0' });
                        }
                        catch
                        {

                        }

                        wsoc = new WebSocket(Settings.Paymentsense_Uri, sslProtocols: SslProtocols.Tls12);

                        wsoc.Opened += Wsoc_Opened10;
                        wsoc.MessageReceived += Wsoc_MessageReceived10;
                        wsoc.Open();
                        System.Threading.Thread.Sleep(1000);

                        manualResetEvent.WaitOne();

                        bool bproceed = false;
                        if (!boolPSTerminalAvailablity)
                        {
                            DocMessage.MsgInformation("Terminal Busy");
                            bproceed = false;
                        }
                        else
                        {
                            if (boolPSComplete)
                            {
                                if (ps_error != "")
                                {
                                    DocMessage.MsgInformation(ps_error);
                                    bproceed = false;
                                }
                                else
                                {
                                    if (ps_transactionResult == "SUCCESSFUL")
                                    {
                                        bproceed = true;
                                    }
                                    else
                                    {
                                        DocMessage.MsgInformation(ps_transactionResult);
                                        bproceed = false;
                                    }
                                }
                            }
                        }

                        if (bproceed)
                        {
                            bool boolLessAuthorised = false;

                           /* if (GeneralFunctions.fnDouble(Xeamount) < dblCardAmt)
                            {
                                DocMessage.MsgInformation("Card only authorized " + SystemVariables.CurrencySymbol + Xeamount);
                                drP["AMOUNT"] = GeneralFunctions.fnDouble(Xeamount);

                                boolLessAuthorised = true;
                            } */


                            foreach (DataRow dra1 in dtblTender.Rows)
                            {
                                if ((dra1["TENDER"].ToString() == strCard) && (dra1["CCTRANNO"].ToString() == ""))
                                {
                                    dra1["CCTRANNO"] = intCardTranID.ToString();
                                    break;
                                }

                            }


                            string updtstr = "";


                            objcard.CardAmount = GeneralFunctions.fnDouble(dblCardAmt);

                            objcard.AuthCode = ps_authCode;
                            objcard.Reference = ps_transactionNumber;


                            objcard.RefCardAuthID = ps_authCode;
                            objcard.RefCardTranID = ps_transactionId;
                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(dblCardAmt);
                            objcard.CardTranType = "Sale";
                            objcard.ID = intCardTranID;
                            objcard.LoginUserID = SystemVariables.CurrentUserID;
                            objcard.AdjustFlag = "N";
                            updtstr = objcard.UpdateCardTransOnEvoResponse();



                            if (!boolLessAuthorised)
                            {
                                if (updtstr == "")
                                {
                                    blCardVarify = true;
                                    drP["PROCESSCARD"] = "Y";
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                }
                                else
                                {

                                    blCardVarify = false;
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                    break;
                                }
                            }
                            else
                            {
                                if (updtstr == "")
                                {
                                    drP["PROCESSCARD"] = "Y";
                                }

                                blCardVarify = false;
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                break;
                            }
                        }
                        else
                        {
                            blCardVarify = false;
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            break;
                        }

                       
                    }


                    if (Settings.PaymentGateway == 4) // Demo Payment Gateway
                    {
                        bool bprocess = false;
                        frm_POSDemoPaymentGateway paymtdemo = new frm_POSDemoPaymentGateway();
                        try
                        {
                            paymtdemo.Amount = dblCardAmt;
                            paymtdemo.ShowDialog();
                            if (paymtdemo.DialogResult == true)
                            {
                                bprocess = true;
                                blCardVarify = true;
                                drP["PROCESSCARD"] = "Y";
                            }
                        }
                        finally
                        {

                        }
                        System.Threading.Thread.Sleep(1000);
                        if (bprocess)
                        {
                            foreach (DataRow dra1 in dtblTender.Rows)
                            {
                                if (dra1["TENDER"].ToString() == strCard)
                                {
                                    dra1["CCTRANNO"] = intCardTranID.ToString();
                                    break;
                                }
                            }
                            //DevExpress.XtraSplashScreen.SplashScreenManager.ShowForm(typeof(pos.wait_process));--Sam
                            System.Threading.Thread.Sleep(4000);
                            //DevExpress.XtraSplashScreen.SplashScreenManager.CloseForm();
                        }
                    }
                }
            }

            Cursor = System.Windows.Input.Cursors.Arrow;

            if (blCardVarify)
            {
                return true;
            }
            else
            {
                if (blCardVarify)
                {
                    //if (strCard == "Mercury Gift Card") new MessageBoxWindow().Show(Properties.Resources."Transaction Failed.", "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                    //else if (strCard == "EBT Cash") new MessageBoxWindow().Show(Properties.Resources."Transaction Failed.", "EBT Cash Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                    //else if (strCard == "EBT Voucher") new MessageBoxWindow().Show(Properties.Resources."Transaction Failed.", "EBT Voucher Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                    //else new MessageBoxWindow().Show(Properties.Resources."Transaction Failed.", "Credit Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                    return false;
                }
                else
                {
                    blCardVarify = false;
                    return false;
                }
            }

        }

        private async void Wsoc_Opened30(object sender, EventArgs e)
        {
            wsoc.Send(
                   JsonConvert.SerializeObject(
                       new
                       {
                           method = "terminalDetails",
                           jsonrpc = "2.0",
                           @params = new
                           {
                               tid = Settings.Paymentsense_Terminal
                           },
                           id = 10
                       }
                   )
               );

        }


        private async void Wsoc_MessageReceived30(object sender, MessageReceivedEventArgs e)
        {
            dynamic data = JObject.Parse(e.Message);


            var tracklist = data["result"];

            termdtl data1 = JsonConvert.DeserializeObject<termdtl>(tracklist.ToString());

            if (data1 != null)
            {
                ps_tid = data1.tid;
                ps_currency = data1.currency;
                ps_status = data1.status;
            }

            if (ps_status == "AVAILABLE")
            {
                wsoc.Close();
                System.Threading.Thread.Sleep(1000);

                boolPSTerminalAvailablity = true;

                wsoc = new WebSocket(Settings.Paymentsense_Uri, sslProtocols: SslProtocols.Tls12);
                wsoc.Opened += Wsoc_Opened40;
                wsoc.MessageReceived += Wsoc_MessageReceived40;
                wsoc.Open();
                System.Threading.Thread.Sleep(1000);
            }
            else
            {
                wsoc.Close();
                System.Threading.Thread.Sleep(1000);
                manualResetEvent.Set();
                manualResetEvent.Reset();
            }


        }

        private async void Wsoc_Opened40(object sender, EventArgs e)
        {
            wsoc.Send(
                    JsonConvert.SerializeObject(
                        new
                        {
                            method = "refund",
                            jsonrpc = "2.0",
                            @params = new
                            {
                                tid = ps_tid,
                                currency = ps_currency,
                                authCode = ps_returnauthcode,
                                amount = Convert.ToInt32(ps_amt)
                            },
                            id = 10
                        }
                    )
                );
        }

        private async void Wsoc_MessageReceived40(object sender, MessageReceivedEventArgs e)
        {

            try
            {
                dynamic data = JObject.Parse(e.Message);
                var tracklist = data["error"];
                if (tracklist != null)
                {
                    errordtl data1 = JsonConvert.DeserializeObject<errordtl>(tracklist.ToString());
                    ps_error = data1.message;
                    wsoc.Close();
                    System.Threading.Thread.Sleep(1000);
                    boolPSComplete = true;
                    manualResetEvent.Set();
                    manualResetEvent.Reset();

                }
                else
                {
                    var tracklist1 = data["result"];
                    if (tracklist1 != null)
                    {
                        respdtl dataresult = JsonConvert.DeserializeObject<respdtl>(tracklist1.ToString());

                        ps_transactionResult = dataresult.transactionResult;
                        ps_transactionType = dataresult.transactionType;
                        ps_transactionNumber = dataresult.transactionNumber;
                        ps_transactionId = dataresult.transactionId;
                        ps_authCode = dataresult.authCode;

                        wsoc.Close();
                        System.Threading.Thread.Sleep(1000);
                        boolPSComplete = true;
                        manualResetEvent.Set();
                        manualResetEvent.Reset();
                    }
                }


            }
            catch (Exception ex)
            {

            }
        }

        private async void Wsoc_Opened10(object sender, EventArgs e)
        {
            wsoc.Send(
                   JsonConvert.SerializeObject(
                       new
                       {
                           method = "terminalDetails",
                           jsonrpc = "2.0",
                           @params = new
                           {
                               tid = Settings.Paymentsense_Terminal
                           },
                           id = 10
                       }
                   )
               );

        }


        private async void Wsoc_MessageReceived10(object sender, MessageReceivedEventArgs e)
        {
            dynamic data = JObject.Parse(e.Message);
            

            var tracklist = data["result"];

            termdtl data1 = JsonConvert.DeserializeObject<termdtl>(tracklist.ToString());

            if (data1 != null)
            {
                ps_tid = data1.tid;
                ps_currency = data1.currency;
                ps_status = data1.status;
            }
            
            if (ps_status == "AVAILABLE")
            {
                wsoc.Close();
                System.Threading.Thread.Sleep(1000);

                boolPSTerminalAvailablity = true;

                wsoc = new WebSocket(Settings.Paymentsense_Uri, sslProtocols: SslProtocols.Tls12);
                wsoc.Opened += Wsoc_Opened20;
                wsoc.MessageReceived += Wsoc_MessageReceived20;
                wsoc.Open();
                System.Threading.Thread.Sleep(1000);
            }
            else
            {
                wsoc.Close();
                System.Threading.Thread.Sleep(1000);
                manualResetEvent.Set();
                manualResetEvent.Reset();
            }

            
        }



        private async void Wsoc_Opened20(object sender, EventArgs e)
        {
            wsoc.Send(
                    JsonConvert.SerializeObject(
                        new
                        {
                            method = "sale",
                            jsonrpc = "2.0",
                            @params = new
                            {
                                tid = ps_tid,
                                currency = ps_currency,
                                amount = Convert.ToInt32(ps_amt)
                            },
                            id = 10
                        }
                    )
                );
        }

        private async void Wsoc_MessageReceived20(object sender, MessageReceivedEventArgs e)
        {
           
            try
            {
                dynamic data = JObject.Parse(e.Message);
                var tracklist = data["error"];
                if (tracklist != null)
                {
                    errordtl data1 = JsonConvert.DeserializeObject<errordtl>(tracklist.ToString());
                    ps_error = data1.message;
                    wsoc.Close();
                    System.Threading.Thread.Sleep(1000);
                    boolPSComplete = true;
                    manualResetEvent.Set();
                    manualResetEvent.Reset();

                }
                else
                {
                    var tracklist1 = data["result"];
                    if (tracklist1 != null)
                    {
                        respdtl dataresult = JsonConvert.DeserializeObject<respdtl>(tracklist1.ToString());

                        ps_transactionResult = dataresult.transactionResult;
                        ps_transactionType = dataresult.transactionType;
                        ps_transactionNumber = dataresult.transactionNumber;
                        ps_transactionId = dataresult.transactionId;
                        ps_authCode = dataresult.authCode;

                        wsoc.Close();
                        System.Threading.Thread.Sleep(1000);
                        boolPSComplete = true;
                        manualResetEvent.Set();
                        manualResetEvent.Reset();
                    }
                }


            }
            catch (Exception ex)
            {

            }
        }

        // Mercury/ Precidia Gift Card Issue Transaction

        private bool IsValidMarcuryGiftCardIssue()
        {
            tempMercuryGCCardID = 0;
            intCardTranID = 0;
            bool blVarify = false;
            double dblCardAmt = 0;
            string strCard = "";

            foreach (DataRow dmgc in dtblPOSDatatbl.Rows)
            {
                if (!((dmgc["PRODUCT"].ToString() == (Settings.PaymentGateway == 3 ? "Issue Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Issue Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "Issue POSLink Gift Card" : "Issue Mercury Gift Card")))) && (dmgc["PRODUCTTYPE"].ToString() == "X"))) continue;

                double val = GeneralFunctions.fnDouble(dmgc["PRICE"].ToString());
                AuthCode = "";

                PosDataObject.POS objcard = new PosDataObject.POS();
                objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objcard.CustomerID = intCustID;
                objcard.LoginUserID = SystemVariables.CurrentUserID;
                objcard.EmployeeID = SystemVariables.CurrentUserID;
                objcard.CardType = Settings.PaymentGateway == 3 ? "Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "POSLink Gift Card" : "Mercury Gift Card"));
                objcard.CardAmount = val;

                objcard.PaymentGateway = Settings.PaymentGateway;

                objcard.TerminalName = Settings.TerminalName;
                if (Settings.PaymentGateway == 2)
                {
                    objcard.LogFileName = MercuryLogFile;
                }
                else if (Settings.PaymentGateway == 3)
                {
                    objcard.LogFileName = PrecidiaLogFile;
                }
                else if (Settings.PaymentGateway == 5)
                {
                    objcard.LogFileName = DatacapLogFile;
                }
                else if (Settings.PaymentGateway == 6)
                {
                    objcard.LogFileName = DatacapEMVLogFile;
                }
                else
                {
                    objcard.LogFileName = "";
                }

                try
                {
                    string strerr = objcard.InsertCardTrans();
                }
                catch (Exception ex)
                {
                    blVarify = false;
                    new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Settings.PaymentGateway == 3 ? "Precidia Gift Card Issue" : (Settings.PaymentGateway == 5 ? "Datacap Gift Card Issue" : (Settings.PaymentGateway == 7 ? "POSLink Gift Card Issue" : "Mercury Gift Card Issue")), MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                    Cursor = System.Windows.Input.Cursors.Arrow;
                    break;
                }
                intCardTranID = objcard.CardTranID;
                mgccardidentity.Rows.Add(new object[] { "Issue", intCardTranID.ToString() });

                tempMercuryGCCardID = intCardTranID;

                /*
                if (Settings.PaymentGateway == 2)
                {
                    WriteToMercuryLogFile("GC Issue: start");

                    Cursor = System.Windows.Input.Cursors.Hand;
                    string strAuthCode = "0";

                    MercuryPayment.clsMercuryPymnt mp = new MercuryPayment.clsMercuryPymnt();
                    mp.MerchantID = Settings.MercuryHPMerchantID;
                    mp.UserID = Settings.MercuryHPUserID;
                    mp.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                    mp.InvNo = intCardTranID.ToString();
                    mp.PurchaseAmount = val;

                    string msg1 = "";
                    string msg2 = "";

                    if (Settings.ElementHPMode == 0) mp.GiftCardIssue(ref msg1);
                    if (Settings.ElementHPMode == 1) mp.TestGiftCardIssue(ref msg1);

                    GeneralFunctions.CreateMercuryTransactionXML(mp.MercuryXmlResponse, mp.Token);

                    WriteToMercuryLogFile("Response: " + msg1);

                    if (msg1 != "")
                    {
                        if (msg1.ToUpper().Trim() == "APPROVED")
                        {
                            AuthCode = mp.AuthID;
                            TranID = mp.TranID;
                            CardNum = mp.CardNumber;
                            CardExMM = mp.CardExMM;
                            CardExYY = mp.CardExYY;
                            CardLogo = mp.CardLogo;
                            CardType = mp.CardType;
                            ApprovedAmt = mp.ApprovedAmt;
                            RefNo = mp.RefNo;
                            MercuryPurchaseAmount = mp.PurchaseAmount;
                            MercuryProcessData = mp.MercuryProcessData;
                            MercuryTranCode = mp.MercuryTranCode;
                            MercuryTextResponse = mp.MercuryTextResponse;
                            MercuryRecordNo = mp.MercuryRecordNo;
                            MercuryResponseOrigin = mp.MercuryResponseOrigin;
                            MercuryResponseReturnCode = mp.MercuryResponseReturnCode;
                            CardEntry = mp.CardEntry;
                            Token = mp.Token;
                            AcqRef = mp.AcqRefData;
                            strMercuryMerchantID = mp.MerchantID;
                            MercuryGiftCardBalance = mp.BalanceAmt;

                            if (AuthCode == null) AuthCode = "";
                            if (TranID == null) TranID = "";
                            if (CardNum == null) CardNum = "";
                            if (CardExMM == null) CardExMM = "";
                            if (CardExYY == null) CardExYY = "";
                            if (CardLogo == null) CardLogo = "";
                            if (CardType == null) CardType = "";
                            if (ApprovedAmt == null) ApprovedAmt = "0";
                            if (RefNo == null) RefNo = "";
                            if (CardEntry == null) CardEntry = "";
                            if (Token == null) Token = "";
                            if (AcqRef == null) AcqRef = "";

                            if (MercuryProcessData == null) MercuryProcessData = "";
                            if (MercuryTranCode == null) MercuryTranCode = "";
                            if (MercuryRecordNo == null) MercuryRecordNo = "";
                            if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                            if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                            if (MercuryTextResponse == null) MercuryTextResponse = "";
                            if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";

                            if ((MercuryTextResponse.ToUpper().Trim() == "AP") || (MercuryTextResponse.ToUpper().Trim() == "AP-NEW INFO")
                                || (MercuryTextResponse.ToUpper().Trim() == "APPROVED"))
                            {
                                string updtstr = "";

                                objcard.MercuryInvNo = TranID;
                                objcard.MercuryProcessData = MercuryProcessData;
                                objcard.MercuryTranCode = MercuryTranCode;
                                objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                objcard.MercuryRecordNo = MercuryRecordNo;
                                objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                objcard.MercuryTextResponse = MercuryTextResponse;

                                objcard.CardType = CardLogo;
                                objcard.AuthCode = AuthCode;
                                objcard.Reference = RefNo;
                                objcard.AcqRefData = AcqRef;
                                objcard.TokenData = Token;

                                objcard.RefCardAct = CardNum;
                                objcard.RefCardLogo = CardLogo;
                                objcard.RefCardEntry = CardEntry;
                                objcard.RefCardAuthID = AuthCode;
                                objcard.RefCardTranID = TranID;
                                objcard.RefCardMerchID = strMercuryMerchantID;
                                objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                objcard.CardTranType = "Issue";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                objcard.PrintXml = "";
                                updtstr = objcard.UpdateCardResponse();

                                if (updtstr == "") blVarify = true;
                                Cursor =System.Windows.Input.Cursors.Arrow;
                            }
                        }
                        else
                        {
                            if (cardidentity.Rows.Count > 0)
                            {
                                foreach (DataRow dr1 in cardidentity.Rows)
                                {
                                    DataTable dt = new DataTable();
                                    dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                    int CCID = 0;
                                    string val1 = "";
                                    string val2 = "";
                                    string val3 = "";
                                    string val4 = "";
                                    string val5 = "";
                                    string val6 = "";
                                    string val7 = "";
                                    string val8 = "";
                                    string val9 = "";
                                    string val10 = "";
                                    string val20 = "";
                                    int pmntgwy = 0;

                                    bool flag = true;
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                        val1 = dr["CardType"].ToString();
                                        val2 = dr["CardAmount"].ToString();
                                        val3 = dr["Reference"].ToString();
                                        val9 = dr["MercuryProcessData"].ToString();
                                        val4 = dr["MercuryInvoiceNo"].ToString();
                                        val5 = dr["MercuryAcqRef"].ToString();
                                        val6 = dr["MercuryToken"].ToString();
                                        val7 = dr["AuthCode"].ToString();
                                        val8 = dr["IsDebitCard"].ToString();
                                        val10 = dr["RefCardTranID"].ToString();
                                        val20 = dr["TransactionType"].ToString();
                                        pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());



                                        MercuryPayment.clsMercuryPymnt mp1 = new MercuryPayment.clsMercuryPymnt();
                                        mp1.MerchantID = Settings.MercuryHPMerchantID;
                                        mp1.UserID = Settings.MercuryHPUserID;
                                        mp1.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                                        mp1.InvNo = val4;
                                        mp1.RefNo = val3;
                                        mp1.AuthID = val7;
                                        mp1.AcqRefData = val5;
                                        mp1.Token = val6;
                                        mp1.PurchaseAmount = GeneralFunctions.fnDouble(val2);
                                        mp1.MercuryProcessData = val9;
                                        string msg11 = "";
                                        if (val1 == "Credit Card")
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.CreditVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestCreditVoidSale(ref msg11);
                                        }
                                        if ((val1 == "Credit Card (STAND-IN)") || (val1 == "Credit Card - Voice Auth (STAND-IN)"))
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.StandInCreditVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestStandInCreditVoidSale(ref msg11);
                                        }
                                        if (val1 == "Debit Card")
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.DebitVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestDebitVoidSale(ref msg11);
                                        }

                                        if (val1 == "Mercury Gift Card")
                                        {
                                            if (val20 == "Sale")
                                            {
                                                if (Settings.ElementHPMode == 0) mp1.GiftCardVoidSales(ref msg11);
                                                if (Settings.ElementHPMode == 1) mp1.TestGiftCardVoidSales(ref msg11);
                                            }
                                        }

                                        GeneralFunctions.CreateMercuryTransactionXML(mp1.MercuryXmlResponse, val6);


                                        if (msg11.ToUpper().Trim() == "APPROVED")
                                        {
                                            AuthCode = mp1.AuthID;
                                            TranID = mp1.TranID;
                                            CardNum = mp1.CardNumber;
                                            CardExMM = mp1.CardExMM;
                                            CardExYY = mp1.CardExYY;
                                            CardLogo = mp1.CardLogo;
                                            CardType = mp1.CardType;
                                            ApprovedAmt = mp1.ApprovedAmt;
                                            RefNo = mp1.RefNo;
                                            CardEntry = mp1.CardEntry;
                                            Token = mp1.Token;
                                            AcqRef = mp1.AcqRefData;
                                            strMercuryMerchantID = mp1.MerchantID;
                                            MercuryProcessData = mp1.MercuryProcessData;
                                            MercuryPurchaseAmount = mp1.PurchaseAmount;
                                            MercuryTranCode = mp1.MercuryTranCode;
                                            MercuryRecordNo = mp1.MercuryRecordNo;
                                            MercuryResponseOrigin = mp1.MercuryResponseOrigin;
                                            MercuryResponseReturnCode = mp1.MercuryResponseReturnCode;
                                            MercuryGiftCardBalance = mp1.BalanceAmt;
                                            MercuryTextResponse = mp1.MercuryTextResponse;

                                            if (AuthCode == null) AuthCode = "";
                                            if (TranID == null) TranID = "";
                                            if (CardNum == null) CardNum = "";
                                            if (CardExMM == null) CardExMM = "";
                                            if (CardExYY == null) CardExYY = "";
                                            if (CardLogo == null) CardLogo = "";
                                            if (CardType == null) CardType = "";
                                            if (ApprovedAmt == null) ApprovedAmt = "0";
                                            if (RefNo == null) RefNo = "";
                                            if (CardEntry == null) CardEntry = "";
                                            if (Token == null) Token = "";
                                            if (AcqRef == null) AcqRef = "";

                                            if (MercuryTranCode == null) MercuryTranCode = "";
                                            if (MercuryRecordNo == null) MercuryRecordNo = "";
                                            if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                                            if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                                            if (MercuryTextResponse == null) MercuryTextResponse = "";
                                            if (MercuryProcessData == null) MercuryProcessData = "";
                                            if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";
                                        }
                                        else
                                        {
                                            flag = false;
                                            break;
                                        }

                                        if (flag)
                                        {
                                            PosDataObject.POS objcard1 = new PosDataObject.POS();
                                            objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                            objcard1.CustomerID = intCustID;
                                            objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                            objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                            objcard1.CardType = CardType;//CardLogo
                                            objcard1.IsDebit = val8;
                                            objcard1.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard1.PaymentGateway = pmntgwy;
                                            objcard1.MercuryInvNo = TranID;
                                            objcard1.MercuryProcessData = MercuryProcessData;
                                            objcard1.MercuryTranCode = MercuryTranCode;
                                            objcard1.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                            objcard1.AuthCode = AuthCode;
                                            objcard1.Reference = RefNo;
                                            objcard1.AcqRefData = AcqRef;
                                            objcard1.TokenData = Token;
                                            objcard1.MercuryRecordNo = MercuryRecordNo;
                                            objcard1.MercuryResponseOrigin = MercuryResponseOrigin;
                                            objcard1.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                            objcard1.MercuryTextResponse = MercuryTextResponse;

                                            objcard1.RefCardAct = CardNum;
                                            objcard1.RefCardLogo = CardLogo;
                                            objcard1.RefCardEntry = CardEntry;
                                            objcard1.RefCardAuthID = AuthCode;
                                            objcard1.RefCardTranID = TranID;
                                            objcard1.RefCardMerchID = strMercuryMerchantID;
                                            objcard1.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard1.CardTranType = "Void";
                                            objcard1.TerminalName = Settings.TerminalName;
                                            if (Settings.PaymentGateway == 2)
                                            {
                                                objcard1.LogFileName = MercuryLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 3)
                                            {
                                                objcard1.LogFileName = PrecidiaLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 5)
                                            {
                                                objcard1.LogFileName = DatacapLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 6)
                                            {
                                                objcard1.LogFileName = DatacapEMVLogFile;
                                            }
                                            else
                                            {
                                                objcard1.LogFileName = "";
                                            }
                                            string strer = objcard1.InsertCardTrans1();
                                            intCardTranID = objcard1.CardTranID;

                                            PosDataObject.POS ob = new PosDataObject.POS();
                                            ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                            ob.LoginUserID = SystemVariables.CurrentUserID;
                                            ob.CardTranID = CCID;
                                            string s = ob.UpdateCardAdjustment();
                                        }
                                    }
                                }
                            }
                            PrecidiaErrorText = mp.MercuryTextResponse;
                            blVarify = false;
                            new MessageBoxWindow().Show(Properties.Resources."Transaction failed.","frmPOSTenderDlg_msg_Transactionfailed"), "Mercury Gift Card Issue", MessageBoxButton.OK, MessageBoxImage.Information);
                            WriteToMercuryLogFile("Mercury Gift Card Issue - Transaction Failed");
                            Cursor =System.Windows.Input.Cursors.Arrow;
                        }
                    }
                    else
                    {
                        new MessageBoxWindow().Show(Properties.Resources."Transaction failed.","frmPOSTenderDlg_msg_Transactionfailed"), "Mercury Gift Card Issue", MessageBoxButton.OK, MessageBoxImage.Information);
                        WriteToMercuryLogFile("Mercury Gift Card Issue - Transaction Failed");
                        Cursor =System.Windows.Input.Cursors.Arrow;
                    }
                }


                if (Settings.PaymentGateway == 3)
                {
                    WriteToPrecidiaLogFile("GC Activate: start");

                    blCG = false;
                    blCGgc = false;
                    string resp = "";
                    string resptxt = "";

                    //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                    CGtrantype = "GCACTIVATE";

                    CGamt = val;
                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    CGinv = objPOS.FetchMaxInvoiceNo();



                    XmlDocument XDoc = new XmlDocument();

                    // Create root node.
                    XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

                    XDoc.ApSystem.Drawing.PendChild(XElemRoot);

                    XmlElement XTemp = XDoc.CreateElement("Command");
                    XTemp.InnerText = CGtrantype;
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    XTemp = XDoc.CreateElement("Id");
                    XTemp.InnerText = CGinv.ToString();
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    XTemp = XDoc.CreateElement("Amount");
                    XTemp.InnerText = CGamt.ToString("f");
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    XTemp = XDoc.CreateElement("Input");
                    XTemp.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    XmlDocument XmlResponse = new XmlDocument();

                    XTemp = XDoc.CreateElement("KeepAlive");
                    XTemp.InnerText = "N";
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    XTemp = XDoc.CreateElement("ClientMAC");
                    XTemp.InnerText = Settings.PrecidiaClientMAC;
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc.OuterXml);

                    bool bTelnet = false;
                    try
                    {
                        SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                        bTelnet = true;
                    }
                    catch (Exception ex)
                    {
                        WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                        bTelnet = false;
                    }

                    if (bTelnet)
                    {
                        if (XmlResponse.InnerXml != "")
                        {
                            if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse.InnerXml);

                            SocketResponse_GC(XmlResponse);

                            resp = CGresp;
                            resptxt = CGresptxt;

                            WriteToPrecidiaLogFile("Response: " + resp);
                            WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));

                            if (resp != "")
                            {
                                if (resp != "APPROVED")
                                {
                                    if (cardidentity.Rows.Count > 0)
                                    {
                                        foreach (DataRow dr1 in cardidentity.Rows)
                                        {
                                            blCG = false;
                                            DataTable dt = new DataTable();
                                            dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                            int CCID = 0;
                                            string val1 = "";
                                            string val2 = "";
                                            string val3 = "";
                                            string val4 = "";
                                            string val5 = "";
                                            string val6 = "";
                                            string val7 = "";
                                            string val8 = "";
                                            string val9 = "";
                                            string val10 = "";
                                            string val20 = "";
                                            int pmntgwy = 0;

                                            bool flag = true;
                                            foreach (DataRow dr in dt.Rows)
                                            {
                                                CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                                val1 = dr["CardType"].ToString();
                                                val2 = dr["CardAmount"].ToString();
                                                val3 = dr["Reference"].ToString();
                                                val9 = dr["MercuryProcessData"].ToString();
                                                val4 = dr["MercuryInvoiceNo"].ToString();
                                                val5 = dr["MercuryAcqRef"].ToString();
                                                val6 = dr["MercuryToken"].ToString();
                                                val7 = dr["AuthCode"].ToString();
                                                val8 = dr["IsDebitCard"].ToString();
                                                val10 = dr["RefCardTranID"].ToString();
                                                val20 = dr["TransactionType"].ToString();
                                                pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());



                                                string resp1 = "";
                                                string resptxt1 = "";

                                                //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                                                if (val1 == "Credit Card")
                                                {
                                                    CGtrantype = "CCVOID";
                                                }
                                                if ((val1 == "Credit Card - Voice Auth") || (val1 == "Credit Card (STAND-IN)") || (val1 == "Credit Card - Voice Auth (STAND-IN)"))
                                                {
                                                    CGtrantype = "CCVOID";
                                                }
                                                if (val1 == "Debit Card")
                                                {
                                                    CGtrantype = "DCREFUND";
                                                }

                                                if (val1 == "Precidia Gift Card")
                                                {
                                                    if (val20 == "Sale")
                                                    {
                                                        CGtrantype = "GCVOID";
                                                    }
                                                    if (val20 == "Issue")
                                                    {
                                                        CGtrantype = "GCVOIDACTIVATE";
                                                    }

                                                    if (val20 == "Reload")
                                                    {
                                                        CGtrantype = "GCVOID";
                                                    }
                                                }

                                                CGamt = GeneralFunctions.fnDouble(val2);



                                                XmlDocument XDoc1 = new XmlDocument();

                                                // Create root node.
                                                XmlElement XElemRoot1 = XDoc1.CreateElement("PLRequest");

                                                XDoc1.ApSystem.Drawing.PendChild(XElemRoot1);

                                                XmlElement XTemp1 = XDoc1.CreateElement("Command");
                                                XTemp1.InnerText = CGtrantype;
                                                XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);

                                                if (val1 != "Debit Card")
                                                {
                                                    XTemp1 = XDoc1.CreateElement("RecNum");
                                                    XTemp1.InnerText = val10.ToString();
                                                    XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);
                                                }

                                                XTemp1 = XDoc1.CreateElement("Amount");
                                                XTemp1.InnerText = CGamt.ToString("f");
                                                XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);

                                                if (val1 == "Debit Card")
                                                {
                                                    XTemp1 = XDoc1.CreateElement("Input");
                                                    XTemp1.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                                                    XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);
                                                }

                                                XmlDocument XmlResponse1 = new XmlDocument();

                                                XTemp1 = XDoc1.CreateElement("KeepAlive");
                                                XTemp1.InnerText = "N";
                                                XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);

                                                XTemp1 = XDoc1.CreateElement("ClientMAC");
                                                XTemp1.InnerText = Settings.PrecidiaClientMAC;
                                                XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);

                                                if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc1.OuterXml);

                                                bool bTelnet1 = false;
                                                try
                                                {
                                                    SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc1, ref XmlResponse1);
                                                    bTelnet1 = true;
                                                }
                                                catch (Exception ex)
                                                {
                                                    WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                                                    bTelnet1 = false;
                                                }

                                                if (bTelnet1)
                                                {
                                                    if (XmlResponse1.InnerXml != "")
                                                    {
                                                        if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse1.InnerXml);
                                                        SocketResponse_General(XmlResponse1);

                                                        resp1 = CGresp;
                                                        resptxt1 = CGresptxt;

                                                        WriteToPrecidiaLogFile("Response : " + resptxt1);

                                                        if (resp != "")
                                                        {
                                                            if (resp != "APPROVED")
                                                            {
                                                                new MessageBoxWindow().Show(Properties.Resources."Error occured during Card Transaction", "frmPOSTenderDlg_msg_ErroroccuredduringCardTransact"), "Credit Card Transaction", MessageBoxButton.OK, MessageBoxImage.Information);
                                                                flag = false;
                                                                break;
                                                            }
                                                            else
                                                            {

                                                            }
                                                        }

                                                        if (flag)
                                                        {
                                                            PosDataObject.POS objcard1 = new PosDataObject.POS();
                                                            objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                            objcard1.CustomerID = intCustID;
                                                            objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                                            objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                                            objcard1.CardType = CardType;//CardLogo
                                                            objcard1.IsDebit = val8;
                                                            objcard1.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                                            objcard1.PaymentGateway = pmntgwy;
                                                            objcard1.MercuryInvNo = TranID;
                                                            objcard1.MercuryProcessData = MercuryProcessData;
                                                            objcard1.MercuryTranCode = MercuryTranCode;
                                                            objcard1.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                                            objcard1.AuthCode = AuthCode;
                                                            objcard1.Reference = RefNo;
                                                            objcard1.AcqRefData = AcqRef;
                                                            objcard1.TokenData = Token;
                                                            objcard1.MercuryRecordNo = MercuryRecordNo;
                                                            objcard1.MercuryResponseOrigin = MercuryResponseOrigin;
                                                            objcard1.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                                            objcard1.MercuryTextResponse = MercuryTextResponse;

                                                            objcard1.RefCardAct = CardNum;
                                                            objcard1.RefCardLogo = CardLogo;
                                                            objcard1.RefCardEntry = CardEntry;
                                                            objcard1.RefCardAuthID = AuthCode;
                                                            objcard1.RefCardTranID = TranID;
                                                            objcard1.RefCardMerchID = strMercuryMerchantID;
                                                            objcard1.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                                            objcard1.CardTranType = "Void";
                                                            objcard1.TerminalName = Settings.TerminalName;
                                                            if (Settings.PaymentGateway == 2)
                                                            {
                                                                objcard1.LogFileName = MercuryLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 3)
                                                            {
                                                                objcard1.LogFileName = PrecidiaLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 5)
                                                            {
                                                                objcard1.LogFileName = DatacapLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 6)
                                                            {
                                                                objcard1.LogFileName = DatacapEMVLogFile;
                                                            }
                                                            else
                                                            {
                                                                objcard1.LogFileName = "";
                                                            }
                                                            try
                                                            {
                                                                string strerr = objcard1.InsertCardTrans1();
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                                                GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                                                                Cursor =System.Windows.Input.Cursors.Arrow;
                                                                break;
                                                            }
                                                            intCardTranID = objcard1.CardTranID;

                                                            PosDataObject.POS ob = new PosDataObject.POS();
                                                            ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                            ob.LoginUserID = SystemVariables.CurrentUserID;
                                                            ob.CardTranID = CCID;
                                                            string s = ob.UpdateCardAdjustment();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    PrecidiaDisplayResultText = "TRANSACTION DECLINED";
                                    PrecidiaErrorText = "Transaction Declined" + "\n" + resptxt;
                                    WriteToPrecidiaLogFile(resptxt);
                                    blVarify = false;
                                }
                                else
                                {


                                    string updtstr = "";
                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = 0;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardType = CardLogo;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = "";
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardTranType = "Issue";
                                    objcard.AdjustFlag = "N";
                                    objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();

                                    if (updtstr == "")
                                    {
                                        blVarify = true;
                                        WriteToPrecidiaLogFile("Card Trans Updated");
                                    }
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                }
                            }
                        }

                    }
                }


                if (Settings.PaymentGateway == 5) // Datacap
                {
                    WriteToDatacapLogFile("Datacap Prepaid Issue : start");

                    Dcap_CmdStatus = "";
                    Dcap_TextResponse = "";
                    Dcap_AcctNo = "";
                    Dcap_Merchant = "";
                    Dcap_TranCode = "";
                    Dcap_CardType = "";
                    Dcap_AuthCode = "";
                    Dcap_RefNo = "";
                    Dcap_AcqRefData = "";
                    Dcap_RecordNo = "";
                    Dcap_InvoiceNo = "";
                    Dcap_TranAmt = 0;
                    Dcap_AuthAmt = 0;
                    Dcap_CashBkAmt = 0;
                    Dcap_BalAmt = 0;
                    
                    bool bproceed = true;
                    string request_xml = "";
                    string response_xml = "";
                    
                    DSIPDCXLib.DsiPDCX dsipdx = new DSIPDCXLib.DsiPDCX();
                    
                    dsipdx.ServerIPConfig(Settings.DatacapServer, 1);

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int dcap_max_inv = objPOS.FetchMaxInvoiceNo();

                    request_xml = GeneralFunctions.Datacap_PrePaidIssue_Request_XML(val, dcap_max_inv);
                    try
                    {
                        response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                    }
                    catch
                    {
                        bproceed = false;
                    }

                    WriteToDatacapLogFile("Request XML : " + request_xml);

                    WriteToDatacapLogFile("Response XML : " + response_xml);

                    if (bproceed)
                    {
                        GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);
                        if (Dcap_CmdStatus == "Approved")
                        {
                            string updtstr = "";
                            objcard.MercuryRecordNo = "";
                            objcard.MercuryResponseOrigin = "";
                            objcard.MercuryResponseReturnCode = "";
                            objcard.MercuryTextResponse = "";

                            objcard.MercuryInvNo = Dcap_InvoiceNo;
                            objcard.MercuryProcessData = "";
                            objcard.MercuryTranCode = "";
                            objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                            objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                            objcard.CardType = Dcap_CardType;
                            objcard.AuthCode = Dcap_AuthCode;
                            objcard.Reference = Dcap_RefNo;
                            objcard.AcqRefData = Dcap_AcqRefData;
                            objcard.TokenData = Dcap_RecordNo;

                            objcard.RefCardAct = Dcap_AcctNo;
                            objcard.RefCardLogo = Dcap_CardType;
                            objcard.RefCardEntry = CardEntry;
                            objcard.RefCardAuthID = Dcap_AuthCode;
                            objcard.RefCardTranID = TranID;
                            objcard.RefCardMerchID = Dcap_Merchant;
                            objcard.RefCardAuthAmount = Dcap_AuthAmt;
                            objcard.CardTranType = "Issue";
                            objcard.AdjustFlag = "N";
                            objcard.RefCardBalAmount = Dcap_BalAmt;
                            objcard.PrintXml = Dcap_PrintDraft;
                            updtstr = objcard.UpdateCardResponse();

                            if (updtstr == "")
                            {
                                blVarify = true;
                            }
                            else
                            {
                                blVarify = false;
                            }
                            Cursor =System.Windows.Input.Cursors.Arrow;
                        }
                        else
                        {
                            new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Datacap Gift Card Issue", MessageBoxButton.OK, MessageBoxImage.Information);
                            WriteToDatacapLogFile(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse);
                            if (cardidentity.Rows.Count > 0)
                            {
                                foreach (DataRow dr1 in cardidentity.Rows)
                                {
                                    blCG = false;
                                    DataTable dt = new DataTable();
                                    dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                    int CCID = 0;
                                    string val1 = "";
                                    string val2 = "";
                                    string val3 = "";
                                    string val4 = "";
                                    string val5 = "";
                                    string val6 = "";
                                    string val7 = "";
                                    string val8 = "";
                                    string val9 = "";
                                    string val10 = "";
                                    string val20 = "";
                                    int pmntgwy = 0;

                                    bool flag = true;
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                        val1 = dr["CardType"].ToString();
                                        val2 = dr["CardAmount"].ToString();
                                        val3 = dr["Reference"].ToString();
                                        val9 = dr["MercuryProcessData"].ToString();
                                        val4 = dr["MercuryInvoiceNo"].ToString();
                                        val5 = dr["MercuryAcqRef"].ToString();
                                        val6 = dr["MercuryToken"].ToString();
                                        val7 = dr["AuthCode"].ToString();
                                        val8 = dr["IsDebitCard"].ToString();
                                        val10 = dr["RefCardTranID"].ToString();
                                        val20 = dr["TransactionType"].ToString();
                                        pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());



                                        string resp1 = "";
                                        string resptxt1 = "";

                                        //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                                        if (val1 == "Credit Card")
                                        {
                                            request_xml = GeneralFunctions.Datacap_CreditVoidSale_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7, val5,blPressManual);

                                            try
                                            {
                                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                            }
                                            catch
                                            {
                                                bproceed = false;
                                            }
                                        }
                                        
                                        if (val1 == "Debit Card")
                                        {
                                           
                                        }

                                        if (val1 == "Datacap Gift Card")
                                        {
                                            if (val20 == "Sale")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidSale_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }
                                            if (val20 == "Issue")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidIssue_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }

                                            if (val20 == "Reload")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidReload_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }
                                        }

                                        if (bproceed)
                                        {
                                            GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                                ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                                ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);

                                            if (Dcap_CmdStatus == "Approved")
                                            {
                                                PosDataObject.POS objcard1 = new PosDataObject.POS();
                                                objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                objcard1.CustomerID = intCustID;
                                                objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                                objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                                objcard1.CardType = Dcap_CardType;
                                                objcard1.IsDebit = val8;
                                                objcard1.CardAmount = Dcap_AuthAmt;
                                                objcard1.PaymentGateway = pmntgwy;
                                                objcard1.MercuryInvNo = Dcap_InvoiceNo;
                                                objcard1.MercuryProcessData = "";
                                                objcard1.MercuryTranCode = "";
                                                objcard1.MercuryPurchaseAmount = Dcap_TranAmt;
                                                objcard1.AuthCode = Dcap_AuthCode;
                                                objcard1.Reference = Dcap_RefNo;
                                                objcard1.AcqRefData = Dcap_AcqRefData;
                                                objcard1.TokenData = Dcap_RecordNo;
                                                objcard1.MercuryRecordNo = "";
                                                objcard1.MercuryResponseOrigin = "";
                                                objcard1.MercuryResponseReturnCode = "";
                                                objcard1.MercuryTextResponse = "";

                                                objcard1.RefCardAct = Dcap_AcctNo;
                                                objcard1.RefCardLogo = Dcap_CardType;
                                                objcard1.RefCardEntry = CardEntry;
                                                objcard1.RefCardAuthID = Dcap_AuthCode;
                                                objcard1.RefCardTranID = TranID;
                                                objcard1.RefCardMerchID = Dcap_Merchant;
                                                objcard1.RefCardAuthAmount = Dcap_AuthAmt;
                                                objcard1.CardTranType = "Void";
                                                objcard1.TerminalName = Settings.TerminalName;
                                                if (Settings.PaymentGateway == 2)
                                                {
                                                    objcard1.LogFileName = MercuryLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 3)
                                                {
                                                    objcard1.LogFileName = PrecidiaLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 5)
                                                {
                                                    objcard1.LogFileName = DatacapLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 6)
                                                {
                                                    objcard1.LogFileName = DatacapEMVLogFile;
                                                }
                                                else
                                                {
                                                    objcard1.LogFileName = "";
                                                }
                                                try
                                                {
                                                    string strerr = objcard1.InsertCardTrans1();
                                                }
                                                catch (Exception ex)
                                                {
                                                    new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                                    GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                                    break;
                                                }
                                                intCardTranID = objcard1.CardTranID;

                                                PosDataObject.POS ob = new PosDataObject.POS();
                                                ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                ob.LoginUserID = SystemVariables.CurrentUserID;
                                                ob.CardTranID = CCID;
                                                string s = ob.UpdateCardAdjustment();
                                            }
                                            else
                                            {
                                                new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Card Void", MessageBoxButton.OK, MessageBoxImage.Information);
                                            }
                                        }
                                        else
                                        {
                                            blVarify = false;
                                            Cursor =System.Windows.Input.Cursors.Arrow;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                */




                /*
                if (Settings.PaymentGateway == 7) // POSLink
                {
                    //WriteToPOSLinkLogFile("Inside PAX Card Processing - start");
                    POSLinkLogPath = POSLinkLogFilePath();
                    POSLink_ResultCode = "";
                    POSLink_ResultTxt = "";
                    POSLink_RefNum = "";
                    POSLink_AuthCode = "";
                    POSLink_CardType = "";
                    POSLink_BogusAccountNum = "";
                    POSLink_CashBack = 0;
                    POSLink_RequestedAmt = 0;
                    POSLink_ApprovedAmt = 0;
                    POSLink_RemainingBalance = 0;
                    POSLink_ExtraBalance = 0;

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int refinv = objPOS.FetchMaxInvoiceNo();

                    POSLink.PosLink pg = new POSLink.PosLink();

                    pg.CommSetting = GeneralFunctions.GetPOSLinkCommSetup();

                    POSLink.LogManagement plog = new POSLink.LogManagement();
                    plog.LogLevel = 1;
                    plog.LogFilePath = System.IO.Path.GetDirectoryName(POSLinkLogPath);
                    pg.LogManageMent = plog;

                    POSLink.PaymentRequest paymentRequest = new POSLink.PaymentRequest();


                    paymentRequest.TenderType = paymentRequest.ParseTenderType("GIFT");

                    paymentRequest.TransType = paymentRequest.ParseTransType("ACTIVATE");

                    paymentRequest.Amount = Convert.ToString(val * 100);

                    paymentRequest.OrigRefNum = "";
                    paymentRequest.InvNum = refinv.ToString();
                    paymentRequest.UserID = "";
                    paymentRequest.PassWord = "";
                    paymentRequest.ClerkID = "";
                    paymentRequest.ServerID = "";
                    paymentRequest.ECRRefNum = "1";



                    pg.PaymentRequest = paymentRequest;

                    POSLink.ProcessTransResult result = new POSLink.ProcessTransResult();

                    result = pg.ProcessTrans();

                    //WriteToPOSLinkLogFile("PAX ProcessTransResult : " + result.Msg);

                    if (result.Code == POSLink.ProcessTransResultCode.OK)
                    {
                        POSLink.PaymentResponse paymentResponse = pg.PaymentResponse;
                        if (paymentResponse != null && paymentResponse.ResultCode != null)
                        {
                            POSLink_ResultCode = paymentResponse.ResultCode;
                            POSLink_ResultTxt = paymentResponse.ResultTxt;
                            POSLink_RefNum = paymentResponse.RefNum;

                            POSLink_RequestedAmt = GeneralFunctions.fnDouble(paymentResponse.RequestedAmount) / 100;
                            POSLink_ApprovedAmt = GeneralFunctions.fnDouble(paymentResponse.ApprovedAmount) / 100;
                            POSLink_RemainingBalance = GeneralFunctions.fnDouble(paymentResponse.RemainingBalance) / 100;
                            POSLink_ExtraBalance = GeneralFunctions.fnDouble(paymentResponse.ExtraBalance) / 100;

                            POSLink_BogusAccountNum = paymentResponse.BogusAccountNum;
                            POSLink_CardType = paymentResponse.CardType;


                            POSLink_AuthCode = paymentResponse.AuthCode;

                            if (POSLink_ResultCode == "000000") // Approved
                            {




                                string updtstr = "";

                                objcard.MercuryRecordNo = "";
                                objcard.MercuryResponseOrigin = "";
                                objcard.MercuryResponseReturnCode = "";
                                objcard.MercuryTextResponse = "";

                                objcard.MercuryInvNo = "";
                                objcard.MercuryProcessData = "";
                                objcard.MercuryTranCode = "";
                                objcard.MercuryPurchaseAmount = POSLink_RequestedAmt;
                                objcard.CardAmount = POSLink_ApprovedAmt;
                                objcard.CardType = POSLink_CardType;
                                objcard.AuthCode = POSLink_AuthCode;
                                objcard.Reference = POSLink_RefNum;
                                objcard.AcqRefData = "";
                                objcard.TokenData = "";

                                objcard.RefCardAct = POSLink_BogusAccountNum;
                                objcard.RefCardLogo = POSLink_CardType;
                                objcard.RefCardEntry = "";
                                objcard.RefCardAuthID = POSLink_AuthCode;
                                objcard.RefCardTranID = POSLink_RefNum;
                                objcard.RefCardMerchID = "";
                                objcard.RefCardAuthAmount = POSLink_ApprovedAmt;
                                objcard.CardTranType = "Issue";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = POSLink_RemainingBalance;
                                objcard.PrintXml = "";
                                updtstr = objcard.UpdateCardResponse();

                                if (updtstr == "")
                                {
                                    blVarify = true;
                                }
                                else
                                {
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                    blVarify = false;
                                }

                            }
                            else
                            {
                                new MessageBoxWindow().Show(POSLink_ResultTxt, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blVarify = false;
                            }

                        }
                        else
                        {
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            blVarify = false;
                        }

                    }
                    else if (result.Code == POSLink.ProcessTransResultCode.TimeOut)
                    {
                        new MessageBoxWindow().Show("Action Timeout.", "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        blVarify = false;
                    }
                    else
                    {
                        new MessageBoxWindow().Show(result.Msg, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        blVarify = false;

                    }
                }
                */
            }

            return blVarify;
        }

        // Mercury/ Precidia Gift Card Reload Transaction

        private bool IsValidMarcuryGiftCardReload()
        {
            tempMercuryGCCardID = 0;
            intCardTranID = 0;
            bool blVarify = false;
            double dblCardAmt = 0;
            string strCard = "";


            foreach (DataRow dmgc in dtblPOSDatatbl.Rows)
            {
                if (!((dmgc["PRODUCT"].ToString() == (Settings.PaymentGateway == 3 ? "Reload Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Reload Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "Reload POSLink Gift Card" : "Reload Mercury Gift Card")))) && (dmgc["PRODUCTTYPE"].ToString() == "X"))) continue;

                double val = GeneralFunctions.fnDouble(dmgc["PRICE"].ToString());
                dblCardAmt = val;
                AuthCode = "";


                PosDataObject.POS objcard = new PosDataObject.POS();
                objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objcard.CustomerID = intCustID;
                objcard.LoginUserID = SystemVariables.CurrentUserID;
                objcard.EmployeeID = SystemVariables.CurrentUserID;
                objcard.CardType = Settings.PaymentGateway == 3 ? "Precidia Gift Card" : (Settings.PaymentGateway == 5 ? "Datacap Gift Card" : (Settings.PaymentGateway == 7 ? "POSLink Gift Card" : "Mercury Gift Card"));
                objcard.CardAmount = val;

                objcard.PaymentGateway = Settings.PaymentGateway;

                objcard.TerminalName = Settings.TerminalName;
                if (Settings.PaymentGateway == 2)
                {
                    objcard.LogFileName = MercuryLogFile;
                }
                else if (Settings.PaymentGateway == 3)
                {
                    objcard.LogFileName = PrecidiaLogFile;
                }
                else if (Settings.PaymentGateway == 5)
                {
                    objcard.LogFileName = DatacapLogFile;
                }
                else if (Settings.PaymentGateway == 6)
                {
                    objcard.LogFileName = DatacapEMVLogFile;
                }
                else
                {
                    objcard.LogFileName = "";
                }

                try
                {
                    string strerr = objcard.InsertCardTrans();
                }
                catch (Exception ex)
                {
                    blVarify = false;
                    new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, "Gift Card Reload", MessageBoxButton.OK, MessageBoxImage.Information);
                    GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                    Cursor = System.Windows.Input.Cursors.Arrow;
                    break;
                }
                intCardTranID = objcard.CardTranID;
                mgccardidentity.Rows.Add(new object[] { "Reload", intCardTranID.ToString() });

                tempMercuryGCCardID = intCardTranID;

                Cursor = System.Windows.Input.Cursors.Hand;
                string strAuthCode = "0";

                /*
                if (Settings.PaymentGateway == 2)
                {
                    WriteToMercuryLogFile("Mercury Gift Card Reload - Start");

                    MercuryPayment.clsMercuryPymnt mp = new MercuryPayment.clsMercuryPymnt();
                    mp.MerchantID = Settings.MercuryHPMerchantID;
                    mp.UserID = Settings.MercuryHPUserID;
                    mp.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                    mp.InvNo = intCardTranID.ToString();
                    mp.PurchaseAmount = val;

                    string msg1 = "";
                    string msg2 = "";

                    if (Settings.ElementHPMode == 0) mp.GiftCardReload(ref msg1);
                    if (Settings.ElementHPMode == 1) mp.TestGiftCardReload(ref msg1);

                    GeneralFunctions.CreateMercuryTransactionXML(mp.MercuryXmlResponse, mp.Token);

                    WriteToMercuryLogFile("Response: " + msg1);

                    if (msg1 != "")
                    {
                        if (msg1.ToUpper().Trim() == "APPROVED")
                        {
                            AuthCode = mp.AuthID;
                            TranID = mp.TranID;
                            CardNum = mp.CardNumber;
                            CardExMM = mp.CardExMM;
                            CardExYY = mp.CardExYY;
                            CardLogo = mp.CardLogo;
                            CardType = mp.CardType;
                            ApprovedAmt = mp.ApprovedAmt;
                            RefNo = mp.RefNo;
                            MercuryPurchaseAmount = mp.PurchaseAmount;
                            MercuryProcessData = mp.MercuryProcessData;
                            MercuryTranCode = mp.MercuryTranCode;
                            MercuryTextResponse = mp.MercuryTextResponse;
                            MercuryRecordNo = mp.MercuryRecordNo;
                            MercuryResponseOrigin = mp.MercuryResponseOrigin;
                            MercuryResponseReturnCode = mp.MercuryResponseReturnCode;
                            CardEntry = mp.CardEntry;
                            Token = mp.Token;
                            AcqRef = mp.AcqRefData;
                            strMercuryMerchantID = mp.MerchantID;
                            MercuryGiftCardBalance = mp.BalanceAmt;

                            if (AuthCode == null) AuthCode = "";
                            if (TranID == null) TranID = "";
                            if (CardNum == null) CardNum = "";
                            if (CardExMM == null) CardExMM = "";
                            if (CardExYY == null) CardExYY = "";
                            if (CardLogo == null) CardLogo = "";
                            if (CardType == null) CardType = "";
                            if (ApprovedAmt == null) ApprovedAmt = "0";
                            if (RefNo == null) RefNo = "";
                            if (CardEntry == null) CardEntry = "";
                            if (Token == null) Token = "";
                            if (AcqRef == null) AcqRef = "";

                            if (MercuryProcessData == null) MercuryProcessData = "";
                            if (MercuryTranCode == null) MercuryTranCode = "";
                            if (MercuryRecordNo == null) MercuryRecordNo = "";
                            if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                            if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                            if (MercuryTextResponse == null) MercuryTextResponse = "";
                            if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";

                            if ((MercuryTextResponse.ToUpper().Trim() == "AP") || (MercuryTextResponse.ToUpper().Trim() == "AP-NEW INFO")
                                || (MercuryTextResponse.ToUpper().Trim() == "APPROVED"))
                            {
                                string updtstr = "";

                                objcard.MercuryInvNo = TranID;
                                objcard.MercuryProcessData = MercuryProcessData;
                                objcard.MercuryTranCode = MercuryTranCode;
                                objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                objcard.MercuryRecordNo = MercuryRecordNo;
                                objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                objcard.MercuryTextResponse = MercuryTextResponse;

                                objcard.CardType = CardLogo;
                                objcard.AuthCode = AuthCode;
                                objcard.Reference = RefNo;
                                objcard.AcqRefData = AcqRef;
                                objcard.TokenData = Token;

                                objcard.RefCardAct = CardNum;
                                objcard.RefCardLogo = CardLogo;
                                objcard.RefCardEntry = CardEntry;
                                objcard.RefCardAuthID = AuthCode;
                                objcard.RefCardTranID = TranID;
                                objcard.RefCardMerchID = strMercuryMerchantID;
                                objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                objcard.CardTranType = "Reload";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                objcard.PrintXml = "";
                                updtstr = objcard.UpdateCardResponse();

                                if (updtstr == "") blVarify = true;
                                Cursor =System.Windows.Input.Cursors.Arrow;
                            }
                        }
                        else
                        {
                            if (cardidentity.Rows.Count > 0)
                            {
                                foreach (DataRow dr1 in cardidentity.Rows)
                                {
                                    DataTable dt = new DataTable();
                                    dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                    int CCID = 0;
                                    string val1 = "";
                                    string val2 = "";
                                    string val3 = "";
                                    string val4 = "";
                                    string val5 = "";
                                    string val6 = "";
                                    string val7 = "";
                                    string val8 = "";
                                    string val9 = "";
                                    string val10 = "";
                                    string val20 = "";
                                    int pmntgwy = 0;

                                    bool flag = true;
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                        val1 = dr["CardType"].ToString();
                                        val2 = dr["CardAmount"].ToString();
                                        val3 = dr["Reference"].ToString();
                                        val9 = dr["MercuryProcessData"].ToString();
                                        val4 = dr["MercuryInvoiceNo"].ToString();
                                        val5 = dr["MercuryAcqRef"].ToString();
                                        val6 = dr["MercuryToken"].ToString();
                                        val7 = dr["AuthCode"].ToString();
                                        val8 = dr["IsDebitCard"].ToString();
                                        val10 = dr["RefCardTranID"].ToString();
                                        val20 = dr["TransactionType"].ToString();
                                        pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());



                                        MercuryPayment.clsMercuryPymnt mp1 = new MercuryPayment.clsMercuryPymnt();
                                        mp1.MerchantID = Settings.MercuryHPMerchantID;
                                        mp1.UserID = Settings.MercuryHPUserID;
                                        mp1.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                                        mp1.InvNo = val4;
                                        mp1.RefNo = val3;
                                        mp1.AuthID = val7;
                                        mp1.AcqRefData = val5;
                                        mp1.Token = val6;
                                        mp1.PurchaseAmount = GeneralFunctions.fnDouble(val2);
                                        mp1.MercuryProcessData = val9;
                                        string msg11 = "";
                                        if (val1 == "Credit Card")
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.CreditVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestCreditVoidSale(ref msg11);
                                        }
                                        if ((val1 == "Credit Card (STAND-IN)") || (val1 == "Credit Card - Voice Auth (STAND-IN)"))
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.StandInCreditVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestStandInCreditVoidSale(ref msg11);
                                        }
                                        if (val1 == "Debit Card")
                                        {
                                            if (Settings.ElementHPMode == 0) mp1.DebitVoidSale(ref msg11);
                                            if (Settings.ElementHPMode == 1) mp1.TestDebitVoidSale(ref msg11);
                                        }

                                        if (val1 == "Mercury Gift Card")
                                        {
                                            if (val20 == "Sale")
                                            {
                                                if (Settings.ElementHPMode == 0) mp1.GiftCardVoidSales(ref msg11);
                                                if (Settings.ElementHPMode == 1) mp1.TestGiftCardVoidSales(ref msg11);
                                            }
                                        }

                                        GeneralFunctions.CreateMercuryTransactionXML(mp1.MercuryXmlResponse, val6);


                                        if (msg11.ToUpper().Trim() == "APPROVED")
                                        {
                                            AuthCode = mp1.AuthID;
                                            TranID = mp1.TranID;
                                            CardNum = mp1.CardNumber;
                                            CardExMM = mp1.CardExMM;
                                            CardExYY = mp1.CardExYY;
                                            CardLogo = mp1.CardLogo;
                                            CardType = mp1.CardType;
                                            ApprovedAmt = mp1.ApprovedAmt;
                                            RefNo = mp1.RefNo;
                                            CardEntry = mp1.CardEntry;
                                            Token = mp1.Token;
                                            AcqRef = mp1.AcqRefData;
                                            strMercuryMerchantID = mp1.MerchantID;
                                            MercuryProcessData = mp1.MercuryProcessData;
                                            MercuryPurchaseAmount = mp1.PurchaseAmount;
                                            MercuryTranCode = mp1.MercuryTranCode;
                                            MercuryRecordNo = mp1.MercuryRecordNo;
                                            MercuryResponseOrigin = mp1.MercuryResponseOrigin;
                                            MercuryResponseReturnCode = mp1.MercuryResponseReturnCode;
                                            MercuryGiftCardBalance = mp1.BalanceAmt;
                                            MercuryTextResponse = mp1.MercuryTextResponse;

                                            if (AuthCode == null) AuthCode = "";
                                            if (TranID == null) TranID = "";
                                            if (CardNum == null) CardNum = "";
                                            if (CardExMM == null) CardExMM = "";
                                            if (CardExYY == null) CardExYY = "";
                                            if (CardLogo == null) CardLogo = "";
                                            if (CardType == null) CardType = "";
                                            if (ApprovedAmt == null) ApprovedAmt = "0";
                                            if (RefNo == null) RefNo = "";
                                            if (CardEntry == null) CardEntry = "";
                                            if (Token == null) Token = "";
                                            if (AcqRef == null) AcqRef = "";

                                            if (MercuryTranCode == null) MercuryTranCode = "";
                                            if (MercuryRecordNo == null) MercuryRecordNo = "";
                                            if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                                            if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                                            if (MercuryTextResponse == null) MercuryTextResponse = "";
                                            if (MercuryProcessData == null) MercuryProcessData = "";
                                            if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";
                                        }
                                        else
                                        {
                                            flag = false;
                                            break;
                                        }

                                        if (flag)
                                        {
                                            PosDataObject.POS objcard1 = new PosDataObject.POS();
                                            objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                            objcard1.CustomerID = intCustID;
                                            objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                            objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                            objcard1.CardType = CardType;//CardLogo
                                            objcard1.IsDebit = val8;
                                            objcard1.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard1.PaymentGateway = pmntgwy;
                                            objcard1.MercuryInvNo = TranID;
                                            objcard1.MercuryProcessData = MercuryProcessData;
                                            objcard1.MercuryTranCode = MercuryTranCode;
                                            objcard1.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                            objcard1.AuthCode = AuthCode;
                                            objcard1.Reference = RefNo;
                                            objcard1.AcqRefData = AcqRef;
                                            objcard1.TokenData = Token;
                                            objcard1.MercuryRecordNo = MercuryRecordNo;
                                            objcard1.MercuryResponseOrigin = MercuryResponseOrigin;
                                            objcard1.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                            objcard1.MercuryTextResponse = MercuryTextResponse;

                                            objcard1.RefCardAct = CardNum;
                                            objcard1.RefCardLogo = CardLogo;
                                            objcard1.RefCardEntry = CardEntry;
                                            objcard1.RefCardAuthID = AuthCode;
                                            objcard1.RefCardTranID = TranID;
                                            objcard1.RefCardMerchID = strMercuryMerchantID;
                                            objcard1.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard1.CardTranType = "Void";
                                            objcard1.TerminalName = Settings.TerminalName;
                                            if (Settings.PaymentGateway == 2)
                                            {
                                                objcard1.LogFileName = MercuryLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 3)
                                            {
                                                objcard1.LogFileName = PrecidiaLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 5)
                                            {
                                                objcard1.LogFileName = DatacapLogFile;
                                            }
                                            else if (Settings.PaymentGateway == 6)
                                            {
                                                objcard1.LogFileName = DatacapEMVLogFile;
                                            }
                                            else
                                            {
                                                objcard1.LogFileName = "";
                                            }
                                            string strer = objcard1.InsertCardTrans1();
                                            intCardTranID = objcard1.CardTranID;

                                            PosDataObject.POS ob = new PosDataObject.POS();
                                            ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                            ob.LoginUserID = SystemVariables.CurrentUserID;
                                            ob.CardTranID = CCID;
                                            string s = ob.UpdateCardAdjustment();
                                        }
                                    }
                                }
                            }
                            PrecidiaErrorText = mp.MercuryTextResponse;
                            blVarify = false;
                            new MessageBoxWindow().Show(Properties.Resources."Transaction failed.","frmPOSTenderDlg_msg_Transactionfailed"), "Mercury Gift Card Reload", MessageBoxButton.OK, MessageBoxImage.Information);
                            WriteToMercuryLogFile("Mercury Gift Card Reload - Error");
                            Cursor =System.Windows.Input.Cursors.Arrow;
                        }
                    }
                    else
                    {
                        blVarify = false;
                        new MessageBoxWindow().Show(Properties.Resources."Transaction failed.","frmPOSTenderDlg_msg_Transactionfailed"), "Mercury Gift Card Reload", MessageBoxButton.OK, MessageBoxImage.Information);
                        WriteToMercuryLogFile("Mercury Gift Card Reload - Error");
                        Cursor =System.Windows.Input.Cursors.Arrow;
                    }
                }
                if (Settings.PaymentGateway == 3)
                {
                    WriteToPrecidiaLogFile("GC Reload: - start");
                    blCG = false;
                    blCGgc = false;

                    string resp = "";
                    string resptxt = "";

                    //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                    CGtrantype = "GCRELOAD";

                    CGamt = dblCardAmt;
                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    CGinv = objPOS.FetchMaxInvoiceNo();



                    XmlDocument XDoc = new XmlDocument();

                    // Create root node.
                    XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

                    XDoc.ApSystem.Drawing.PendChild(XElemRoot);

                    XmlElement XTemp = XDoc.CreateElement("Command");
                    XTemp.InnerText = CGtrantype;
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    XTemp = XDoc.CreateElement("Id");
                    XTemp.InnerText = CGinv.ToString();
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    XTemp = XDoc.CreateElement("Amount");
                    XTemp.InnerText = CGamt.ToString("f");
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    XTemp = XDoc.CreateElement("Input");
                    XTemp.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    XmlDocument XmlResponse = new XmlDocument();

                    XTemp = XDoc.CreateElement("KeepAlive");
                    XTemp.InnerText = "N";
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    XTemp = XDoc.CreateElement("ClientMAC");
                    XTemp.InnerText = Settings.PrecidiaClientMAC;
                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                    if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc.OuterXml);

                    bool bTelnet = false;
                    try
                    {
                        SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                        bTelnet = true;
                    }
                    catch (Exception ex)
                    {
                        WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                        bTelnet = false;
                    }

                    if (bTelnet)
                    {
                        if (XmlResponse.InnerXml != "")
                        {
                            if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse.InnerXml);
                            SocketResponse_GC(XmlResponse);

                            resp = CGresp;
                            resptxt = CGresptxt;

                            WriteToPrecidiaLogFile("Response: " + resp);
                            WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));

                            if (resp != "")
                            {
                                if (resp != "APPROVED")
                                {
                                    if (cardidentity.Rows.Count > 0)
                                    {
                                        foreach (DataRow dr1 in cardidentity.Rows)
                                        {
                                            DataTable dt = new DataTable();
                                            dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                            int CCID = 0;
                                            string val1 = "";
                                            string val2 = "";
                                            string val3 = "";
                                            string val4 = "";
                                            string val5 = "";
                                            string val6 = "";
                                            string val7 = "";
                                            string val8 = "";
                                            string val9 = "";
                                            string val10 = "";
                                            string val20 = "";
                                            int pmntgwy = 0;

                                            bool flag = true;
                                            foreach (DataRow dr in dt.Rows)
                                            {
                                                blCG = false;
                                                CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                                val1 = dr["CardType"].ToString();
                                                val2 = dr["CardAmount"].ToString();
                                                val3 = dr["Reference"].ToString();
                                                val9 = dr["MercuryProcessData"].ToString();
                                                val4 = dr["MercuryInvoiceNo"].ToString();
                                                val5 = dr["MercuryAcqRef"].ToString();
                                                val6 = dr["MercuryToken"].ToString();
                                                val7 = dr["AuthCode"].ToString();
                                                val8 = dr["IsDebitCard"].ToString();
                                                val10 = dr["RefCardTranID"].ToString();
                                                val20 = dr["TransactionType"].ToString();
                                                pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());



                                                string resp1 = "";
                                                string resptxt1 = "";

                                                //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                                                if (val1 == "Credit Card")
                                                {
                                                    CGtrantype = "CCVOID";
                                                }
                                                if ((val1 == "Credit Card - Voice Auth") || (val1 == "Credit Card (STAND-IN)") || (val1 == "Credit Card - Voice Auth (STAND-IN)"))
                                                {
                                                    CGtrantype = "CCVOID";
                                                }
                                                if (val1 == "Debit Card")
                                                {
                                                    CGtrantype = "DCREFUND";
                                                }

                                                if (val1 == "Precidia Gift Card")
                                                {
                                                    if (val20 == "Sale")
                                                    {
                                                        CGtrantype = "GCVOID";
                                                    }
                                                    if (val20 == "Issue")
                                                    {
                                                        CGtrantype = "GCVOIDACTIVATE";
                                                    }

                                                    if (val20 == "Reload")
                                                    {
                                                        CGtrantype = "GCVOID";
                                                    }
                                                }

                                                CGamt = GeneralFunctions.fnDouble(val2);



                                                XmlDocument XDoc1 = new XmlDocument();

                                                // Create root node.
                                                XmlElement XElemRoot1 = XDoc1.CreateElement("PLRequest");

                                                XDoc1.ApSystem.Drawing.PendChild(XElemRoot1);

                                                XmlElement XTemp1 = XDoc1.CreateElement("Command");
                                                XTemp1.InnerText = CGtrantype;
                                                XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);

                                                if (val1 != "Debit Card")
                                                {
                                                    XTemp1 = XDoc1.CreateElement("RecNum");
                                                    XTemp1.InnerText = val10.ToString();
                                                    XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);
                                                }


                                                XTemp1 = XDoc1.CreateElement("Amount");
                                                XTemp1.InnerText = CGamt.ToString("f");
                                                XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);

                                                if (val1 == "Debit Card")
                                                {
                                                    XTemp1 = XDoc1.CreateElement("Input");
                                                    XTemp1.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                                                    XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);
                                                }

                                                XmlDocument XmlResponse1 = new XmlDocument();

                                                XTemp1 = XDoc1.CreateElement("KeepAlive");
                                                XTemp1.InnerText = "N";
                                                XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);

                                                XTemp1 = XDoc1.CreateElement("ClientMAC");
                                                XTemp1.InnerText = Settings.PrecidiaClientMAC;
                                                XElemRoot1.ApSystem.Drawing.PendChild(XTemp1);

                                                if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc1.OuterXml);

                                                bool bTelnet1 = false;
                                                try
                                                {
                                                    SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc1, ref XmlResponse1);
                                                    bTelnet1 = true;
                                                }
                                                catch (Exception ex)
                                                {
                                                    WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                                                    bTelnet1 = false;
                                                }

                                                if (bTelnet1)
                                                {
                                                    if (XmlResponse1.InnerXml != "")
                                                    {
                                                        if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse1.InnerXml);
                                                        SocketResponse_General(XmlResponse1);

                                                        resp1 = CGresp;
                                                        resptxt1 = CGresptxt;

                                                        if (resp != "")
                                                        {
                                                            if (resp != "APPROVED")
                                                            {
                                                                new MessageBoxWindow().Show(Properties.Resources."Error occured during Card Transaction", "frmPOSTenderDlg_msg_ErroroccuredduringCardTransact"), "Credit Card Transaction", MessageBoxButton.OK, MessageBoxImage.Information);
                                                                flag = false;
                                                                break;
                                                            }
                                                            else
                                                            {

                                                            }
                                                        }

                                                        if (flag)
                                                        {
                                                            PosDataObject.POS objcard1 = new PosDataObject.POS();
                                                            objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                            objcard1.CustomerID = intCustID;
                                                            objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                                            objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                                            objcard1.CardType = CardType;//CardLogo
                                                            objcard1.IsDebit = val8;
                                                            objcard1.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                                            objcard1.PaymentGateway = pmntgwy;
                                                            objcard1.MercuryInvNo = TranID;
                                                            objcard1.MercuryProcessData = MercuryProcessData;
                                                            objcard1.MercuryTranCode = MercuryTranCode;
                                                            objcard1.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                                            objcard1.AuthCode = AuthCode;
                                                            objcard1.Reference = RefNo;
                                                            objcard1.AcqRefData = AcqRef;
                                                            objcard1.TokenData = Token;
                                                            objcard1.MercuryRecordNo = MercuryRecordNo;
                                                            objcard1.MercuryResponseOrigin = MercuryResponseOrigin;
                                                            objcard1.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                                            objcard1.MercuryTextResponse = MercuryTextResponse;

                                                            objcard1.RefCardAct = CardNum;
                                                            objcard1.RefCardLogo = CardLogo;
                                                            objcard1.RefCardEntry = CardEntry;
                                                            objcard1.RefCardAuthID = AuthCode;
                                                            objcard1.RefCardTranID = TranID;
                                                            objcard1.RefCardMerchID = strMercuryMerchantID;
                                                            objcard1.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                                            objcard1.CardTranType = "Void";

                                                            objcard1.TerminalName = Settings.TerminalName;
                                                            if (Settings.PaymentGateway == 2)
                                                            {
                                                                objcard1.LogFileName = MercuryLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 3)
                                                            {
                                                                objcard1.LogFileName = PrecidiaLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 5)
                                                            {
                                                                objcard1.LogFileName = DatacapLogFile;
                                                            }
                                                            else if (Settings.PaymentGateway == 6)
                                                            {
                                                                objcard1.LogFileName = DatacapEMVLogFile;
                                                            }
                                                            else
                                                            {
                                                                objcard1.LogFileName = "";
                                                            }

                                                            try
                                                            {
                                                                string strerr = objcard1.InsertCardTrans1();
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                               new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                                                GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                                                                Cursor =System.Windows.Input.Cursors.Arrow;
                                                                break;
                                                            }
                                                            intCardTranID = objcard1.CardTranID;

                                                            PosDataObject.POS ob = new PosDataObject.POS();
                                                            ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                            ob.LoginUserID = SystemVariables.CurrentUserID;
                                                            ob.CardTranID = CCID;
                                                            string s = ob.UpdateCardAdjustment();
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                    }
                                    PrecidiaErrorText = "Transaction Declined" + "\n" + resptxt;
                                    PrecidiaDisplayResultText = "TRANSACTION DECLINED";
                                    DocMessage.MsgInformation(resptxt);
                                    blVarify = false;
                                }
                                else
                                {

                                    
                            
                                   // foreach (DataRow dra1 in dtblTender.Rows)
                                  //  {
                                  //      if (dra1["TENDER"].ToString() == strCard)
                                   //     {
                                   //         dra1["CCTRANNO"] = intCardTranID.ToString();
                                   //         break;
                                   //     }
                                   // }
                            
                                     

                                    string updtstr = "";
                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = 0;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardType = CardLogo;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = "";
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                    objcard.CardTranType = "Reload";
                                    objcard.AdjustFlag = "N";
                                    objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();

                                    if (updtstr == "")
                                    {
                                        WriteToPrecidiaLogFile("Card Trans Updated");
                                        blVarify = true;
                                    }
                                    else
                                    {
                                        PrecidiaErrorText = Properties.Resources."Record Update: ", "frmPOSTenderDlg_RecordUpdate") + updtstr;
                                    }
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                }
                            }
                            else
                            {
                                WriteToPrecidiaLogFile(resptxt);
                                blVarify = false;
                                break;
                            }
                        }
                    }
                }




                if (Settings.PaymentGateway == 5) // Datacap
                {
                    WriteToDatacapLogFile("Datacap Prepaid Reload - Start");

                    Dcap_CmdStatus = "";
                    Dcap_TextResponse = "";
                    Dcap_AcctNo = "";
                    Dcap_Merchant = "";
                    Dcap_TranCode = "";
                    Dcap_CardType = "";
                    Dcap_AuthCode = "";
                    Dcap_RefNo = "";
                    Dcap_AcqRefData = "";
                    Dcap_RecordNo = "";
                    Dcap_InvoiceNo = "";
                    Dcap_TranAmt = 0;
                    Dcap_AuthAmt = 0;
                    Dcap_CashBkAmt = 0;
                    Dcap_BalAmt = 0;

                    bool bproceed = true;
                    string request_xml = "";
                    string response_xml = "";

                    DSIPDCXLib.DsiPDCX dsipdx = new DSIPDCXLib.DsiPDCX();

                    dsipdx.ServerIPConfig(Settings.DatacapServer, 1);

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int dcap_max_inv = objPOS.FetchMaxInvoiceNo();

                    request_xml = GeneralFunctions.Datacap_PrePaidReload_Request_XML(val, dcap_max_inv);

                    try
                    {
                        response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                    }
                    catch
                    {
                        bproceed = false;
                    }

                    WriteToDatacapLogFile("Request XML : " + request_xml);

                    if (bproceed)
                    {
                        GeneralFunctions.Datacap_General_Response(  response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                                                    ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                                                    ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);

                        WriteToDatacapLogFile("Response XML : " + response_xml);

                        if (Dcap_CmdStatus == "Approved")
                        {
                            string updtstr = "";
                            objcard.MercuryRecordNo = "";
                            objcard.MercuryResponseOrigin = "";
                            objcard.MercuryResponseReturnCode = "";
                            objcard.MercuryTextResponse = "";

                            objcard.MercuryInvNo = Dcap_InvoiceNo;
                            objcard.MercuryProcessData = "";
                            objcard.MercuryTranCode = "";
                            objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                            objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                            objcard.CardType = Dcap_CardType;
                            objcard.AuthCode = Dcap_AuthCode;
                            objcard.Reference = Dcap_RefNo;
                            objcard.AcqRefData = Dcap_AcqRefData;
                            objcard.TokenData = Dcap_RecordNo;

                            objcard.RefCardAct = Dcap_AcctNo;
                            objcard.RefCardLogo = Dcap_CardType;
                            objcard.RefCardEntry = CardEntry;
                            objcard.RefCardAuthID = Dcap_AuthCode;
                            objcard.RefCardTranID = TranID;
                            objcard.RefCardMerchID = Dcap_Merchant;
                            objcard.RefCardAuthAmount = Dcap_AuthAmt;
                            objcard.CardTranType = "Reload";
                            objcard.AdjustFlag = "N";
                            objcard.RefCardBalAmount = Dcap_BalAmt;
                            objcard.PrintXml = "";
                            updtstr = objcard.UpdateCardResponse();

                            if (updtstr == "")
                            {
                                blVarify = true;
                                WriteToDatacapLogFile("Card Trans Record Updated");
                            }
                            else
                            {
                                WriteToDatacapLogFile("Card Trans Record updation fails");
                                blVarify = false;
                            }
                            Cursor =System.Windows.Input.Cursors.Arrow;
                        }
                        else
                        {
                            new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Datacap Gift Card Reload", MessageBoxButton.OK, MessageBoxImage.Information);
                            
                            WriteToDatacapLogFile(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse);

                            if (cardidentity.Rows.Count > 0)
                            {
                                foreach (DataRow dr1 in cardidentity.Rows)
                                {
                                    blCG = false;
                                    DataTable dt = new DataTable();
                                    dt = GetCardTransData1(GeneralFunctions.fnInt32(dr1["CardID"].ToString()));
                                    int CCID = 0;
                                    string val1 = "";
                                    string val2 = "";
                                    string val3 = "";
                                    string val4 = "";
                                    string val5 = "";
                                    string val6 = "";
                                    string val7 = "";
                                    string val8 = "";
                                    string val9 = "";
                                    string val10 = "";
                                    string val20 = "";
                                    int pmntgwy = 0;

                                    bool flag = true;
                                    foreach (DataRow dr in dt.Rows)
                                    {
                                        CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                                        val1 = dr["CardType"].ToString();
                                        val2 = dr["CardAmount"].ToString();
                                        val3 = dr["Reference"].ToString();
                                        val9 = dr["MercuryProcessData"].ToString();
                                        val4 = dr["MercuryInvoiceNo"].ToString();
                                        val5 = dr["MercuryAcqRef"].ToString();
                                        val6 = dr["MercuryToken"].ToString();
                                        val7 = dr["AuthCode"].ToString();
                                        val8 = dr["IsDebitCard"].ToString();
                                        val10 = dr["RefCardTranID"].ToString();
                                        val20 = dr["TransactionType"].ToString();
                                        pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());


                                        if (val1 == "Credit Card")
                                        {
                                            request_xml = GeneralFunctions.Datacap_CreditVoidSale_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7, val5,blPressManual);

                                            try
                                            {
                                                response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                            }
                                            catch
                                            {
                                                bproceed = false;
                                            }
                                        }

                                        if (val1 == "Debit Card")
                                        {

                                        }

                                        if (val1 == "Datacap Gift Card")
                                        {
                                            if (val20 == "Sale")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidSale_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }
                                            if (val20 == "Issue")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidIssue_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }

                                            if (val20 == "Reload")
                                            {
                                                request_xml = GeneralFunctions.Datacap_PrePaidVoidReload_Request_XML(GeneralFunctions.fnDouble(val2), val4, val3, val7);
                                                try
                                                {
                                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                                }
                                                catch
                                                {
                                                    bproceed = false;
                                                }
                                            }
                                        }

                                        if (bproceed)
                                        {
                                            GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                                ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                                ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);

                                            if (Dcap_CmdStatus == "Approved")
                                            {
                                                PosDataObject.POS objcard1 = new PosDataObject.POS();
                                                objcard1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                objcard1.CustomerID = intCustID;
                                                objcard1.LoginUserID = SystemVariables.CurrentUserID;
                                                objcard1.EmployeeID = SystemVariables.CurrentUserID;
                                                objcard1.CardType = Dcap_CardType;
                                                objcard1.IsDebit = val8;
                                                objcard1.CardAmount = Dcap_AuthAmt;
                                                objcard1.PaymentGateway = pmntgwy;
                                                objcard1.MercuryInvNo = Dcap_InvoiceNo;
                                                objcard1.MercuryProcessData = "";
                                                objcard1.MercuryTranCode = "";
                                                objcard1.MercuryPurchaseAmount = Dcap_TranAmt;
                                                objcard1.AuthCode = Dcap_AuthCode;
                                                objcard1.Reference = Dcap_RefNo;
                                                objcard1.AcqRefData = Dcap_AcqRefData;
                                                objcard1.TokenData = Dcap_RecordNo;
                                                objcard1.MercuryRecordNo = "";
                                                objcard1.MercuryResponseOrigin = "";
                                                objcard1.MercuryResponseReturnCode = "";
                                                objcard1.MercuryTextResponse = "";

                                                objcard1.RefCardAct = Dcap_AcctNo;
                                                objcard1.RefCardLogo = Dcap_CardType;
                                                objcard1.RefCardEntry = CardEntry;
                                                objcard1.RefCardAuthID = Dcap_AuthCode;
                                                objcard1.RefCardTranID = TranID;
                                                objcard1.RefCardMerchID = Dcap_Merchant;
                                                objcard1.RefCardAuthAmount = Dcap_AuthAmt;
                                                objcard1.CardTranType = "Void";

                                                objcard1.TerminalName = Settings.TerminalName;
                                                if (Settings.PaymentGateway == 2)
                                                {
                                                    objcard1.LogFileName = MercuryLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 3)
                                                {
                                                    objcard1.LogFileName = PrecidiaLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 5)
                                                {
                                                    objcard1.LogFileName = DatacapLogFile;
                                                }
                                                else if (Settings.PaymentGateway == 6)
                                                {
                                                    objcard1.LogFileName = DatacapEMVLogFile;
                                                }
                                                else
                                                {
                                                    objcard1.LogFileName = "";
                                                }

                                                try
                                                {
                                                    string strerr = objcard1.InsertCardTrans1();
                                                }
                                                catch (Exception ex)
                                                {
                                                    new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                                    GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                                    break;
                                                }
                                                intCardTranID = objcard1.CardTranID;

                                                PosDataObject.POS ob = new PosDataObject.POS();
                                                ob.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                                ob.LoginUserID = SystemVariables.CurrentUserID;
                                                ob.CardTranID = CCID;
                                                string s = ob.UpdateCardAdjustment();
                                            }
                                            else
                                            {
                                                new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Card Void", MessageBoxButton.OK, MessageBoxImage.Information);
                                            }
                                        }
                                        else
                                        {
                                            blVarify = false;
                                            Cursor =System.Windows.Input.Cursors.Arrow;
                                            break;
                                        }


                                    }
                                }
                            }
                        }

                    }
                }

                */


                /*
                if (Settings.PaymentGateway == 7) // POSLink
                {
                    POSLinkLogPath = POSLinkLogFilePath();
                    POSLink_ResultCode = "";
                    POSLink_ResultTxt = "";
                    POSLink_RefNum = "";
                    POSLink_AuthCode = "";
                    POSLink_CardType = "";
                    POSLink_BogusAccountNum = "";
                    POSLink_CashBack = 0;
                    POSLink_RequestedAmt = 0;
                    POSLink_ApprovedAmt = 0;
                    POSLink_RemainingBalance = 0;
                    POSLink_ExtraBalance = 0;

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int refinv = objPOS.FetchMaxInvoiceNo();

                    POSLink.PosLink pg = new POSLink.PosLink();

                    pg.CommSetting = GeneralFunctions.GetPOSLinkCommSetup();

                    POSLink.LogManagement plog = new POSLink.LogManagement();
                    plog.LogLevel = 1;
                    plog.LogFilePath = System.IO.Path.GetDirectoryName(POSLinkLogPath);
                    pg.LogManageMent = plog;

                    POSLink.PaymentRequest paymentRequest = new POSLink.PaymentRequest();

                    paymentRequest.TenderType = paymentRequest.ParseTenderType("GIFT");

                    paymentRequest.TransType = paymentRequest.ParseTransType("RELOAD");

                    paymentRequest.Amount = Convert.ToString(dblCardAmt * 100);

                    paymentRequest.OrigRefNum = "";
                    paymentRequest.InvNum = refinv.ToString();
                    paymentRequest.UserID = "";
                    paymentRequest.PassWord = "";
                    paymentRequest.ClerkID = "";
                    paymentRequest.ServerID = "";
                    paymentRequest.ECRRefNum = "1";

                    pg.PaymentRequest = paymentRequest;

                    POSLink.ProcessTransResult result = new POSLink.ProcessTransResult();

                    result = pg.ProcessTrans();

                    if (result.Code == POSLink.ProcessTransResultCode.OK)
                    {
                        POSLink.PaymentResponse paymentResponse = pg.PaymentResponse;
                        if (paymentResponse != null && paymentResponse.ResultCode != null)
                        {
                            POSLink_ResultCode = paymentResponse.ResultCode;
                            POSLink_ResultTxt = paymentResponse.ResultTxt;
                            POSLink_RefNum = paymentResponse.RefNum;

                            POSLink_RequestedAmt = GeneralFunctions.fnDouble(paymentResponse.RequestedAmount) / 100;
                            POSLink_ApprovedAmt = GeneralFunctions.fnDouble(paymentResponse.ApprovedAmount) / 100;
                            POSLink_RemainingBalance = GeneralFunctions.fnDouble(paymentResponse.RemainingBalance) / 100;
                            POSLink_ExtraBalance = GeneralFunctions.fnDouble(paymentResponse.ExtraBalance) / 100;

                            POSLink_BogusAccountNum = paymentResponse.BogusAccountNum;
                            POSLink_CardType = paymentResponse.CardType;


                            POSLink_AuthCode = paymentResponse.AuthCode;

                            if (POSLink_ResultCode == "000000") // Approved
                            {
                                string updtstr = "";

                                objcard.MercuryRecordNo = "";
                                objcard.MercuryResponseOrigin = "";
                                objcard.MercuryResponseReturnCode = "";
                                objcard.MercuryTextResponse = "";

                                objcard.MercuryInvNo = "";
                                objcard.MercuryProcessData = "";
                                objcard.MercuryTranCode = "";
                                objcard.MercuryPurchaseAmount = POSLink_RequestedAmt;
                                objcard.CardAmount = POSLink_ApprovedAmt;
                                objcard.CardType = POSLink_CardType;
                                objcard.AuthCode = POSLink_AuthCode;
                                objcard.Reference = POSLink_RefNum;
                                objcard.AcqRefData = "";
                                objcard.TokenData = "";

                                objcard.RefCardAct = POSLink_BogusAccountNum;
                                objcard.RefCardLogo = POSLink_CardType;
                                objcard.RefCardEntry = "";
                                objcard.RefCardAuthID = POSLink_AuthCode;
                                objcard.RefCardTranID = POSLink_RefNum;
                                objcard.RefCardMerchID = "";
                                objcard.RefCardAuthAmount = POSLink_ApprovedAmt;
                                objcard.CardTranType = "Reload";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = POSLink_RemainingBalance;
                                objcard.PrintXml = "";
                                updtstr = objcard.UpdateCardResponse();

                                if (updtstr == "")
                                {
                                    blVarify = true;
                                }
                                else
                                {
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                    blVarify = false;
                                }

                            }
                            else
                            {
                                new MessageBoxWindow().Show(POSLink_ResultTxt, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blVarify = false;
                            }

                        }
                        else
                        {
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            blVarify = false;
                        }

                    }
                    else if (result.Code == POSLink.ProcessTransResultCode.TimeOut)
                    {
                        new MessageBoxWindow().Show("Action Timeout.", "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        blVarify = false;
                    }
                    else
                    {
                        new MessageBoxWindow().Show(result.Msg, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor = System.Windows.Input.Cursors.Arrow;
                        blVarify = false;

                    }
                }
                */



            }

            return blVarify;
        }

        // Element/ Mercury/ Precidia Card Transaction on Return

        private bool CardVarifyForReturn()
        {
            cardidentity.Rows.Clear();
            intCardTranID = 0;
            blCardVarify = false;
            double dblCardAmt = 0;
            string strCard = "";
            AuthCode = "";
            int gettrannofromitem = 0;

            foreach (DataRow drP in dtblTender.Rows)
            {
                if (((drP["TENDER"].ToString() == "Visa") || (drP["TENDER"].ToString() == "MasterCard") || (drP["TENDER"].ToString() == "American Express") ||
                    (drP["TENDER"].ToString() == "Discover") || (drP["TENDER"].ToString() == "Diner") || (drP["TENDER"].ToString() == "Debit Card") ||
                    (drP["TENDER"].ToString() == "Credit Card") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth")
                    || (drP["TENDER"].ToString() == "Credit Card (STAND-IN)") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)")
                    || (drP["TENDER"].ToString() == "Mercury Gift Card") || (drP["TENDER"].ToString() == "Precidia Gift Card") || (drP["TENDER"].ToString() == "Datacap Gift Card") || (drP["TENDER"].ToString() == "POSLink Gift Card") || (drP["TENDER"].ToString() == "EBT Voucher"))
                    && (drP["PROCESSCARD"].ToString() == "N"))
                {
                    dblCardAmt = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drP["AMOUNT"].ToString()));
                    strCard = drP["TENDER"].ToString();

                    foreach (DataRow drt in dtblPOSDatatbl.Rows)
                    {
                        gettrannofromitem = GetTranID(GeneralFunctions.fnInt32(drt["MATRIXOID"].ToString()));
                        break;
                    }

                    if (!IsCardPayment1(gettrannofromitem))
                    {
                        new MessageBoxWindow().Show(Properties.Resources.No_payment_done_in_card, " Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        return false;
                    }

                    if (!IsCardPayment3(gettrannofromitem)) continue;

                    DataTable dt = new DataTable();

                    dt = GetCardTransData(gettrannofromitem);

                    string val1 = "";
                    string val2 = "";
                    string val3 = "";
                    string val4 = "";
                    string val5 = "";
                    string val6 = "";
                    string val7 = "";
                    string val8 = "";
                    string val9 = "";
                    string val20 = "";

                    int pmntgwy = 0;
                    int CCID = 0;
                    foreach (DataRow dr in dt.Rows)
                    {
                        CCID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                        PosDataObject.POS objcard = new PosDataObject.POS();
                        objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        objcard.CustomerID = intCustID;
                        objcard.LoginUserID = SystemVariables.CurrentUserID;
                        objcard.EmployeeID = SystemVariables.CurrentUserID;
                        objcard.CardType = strCard;
                        objcard.CardAmount = dblCardAmt;
                        objcard.PaymentGateway = Settings.PaymentGateway;
                        objcard.TerminalName = Settings.TerminalName;
                        if (Settings.PaymentGateway == 2)
                        {
                            objcard.LogFileName = MercuryLogFile;
                        }
                        else if (Settings.PaymentGateway == 3)
                        {
                            objcard.LogFileName = PrecidiaLogFile;
                        }
                        else if (Settings.PaymentGateway == 5)
                        {
                            objcard.LogFileName = DatacapLogFile;
                        }
                        else if (Settings.PaymentGateway == 6)
                        {
                            objcard.LogFileName = DatacapEMVLogFile;
                        }
                        else
                        {
                            objcard.LogFileName = "";
                        }
                        try
                        {
                            string strerr = objcard.InsertCardTrans();
                        }
                        catch (Exception ex)
                        {
                            blCardVarify = false;
                            new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                            Cursor = System.Windows.Input.Cursors.Arrow;
                            break;
                        }
                        //string strerr = objcard.InsertCardTrans();
                        intCardTranID = objcard.CardTranID;
                        cardidentity.Rows.Add(new object[] { intCardTranID.ToString() });
                        Cursor = System.Windows.Input.Cursors.Arrow;

                        val1 = dr["CardType"].ToString();
                        val2 = dr["CardAmount"].ToString();
                        val3 = dr["Reference"].ToString();
                        val4 = dr["MercuryInvoiceNo"].ToString();
                        val5 = dr["MercuryAcqRef"].ToString();
                        val6 = dr["MercuryToken"].ToString();
                        val7 = dr["AuthCode"].ToString();
                        val8 = dr["MercuryProcessData"].ToString();
                        val9 = dr["RefCardTranID"].ToString();
                        val20 = dr["ReturnAmount"].ToString();
                        pmntgwy = GeneralFunctions.fnInt32(dr["PaymentGateway"].ToString());

                        // element temp out
                        /*
                        if (pmntgwy == 1)
                        {
                            try
                            {
                                ElementExpress.ElementPS pg = new ElementExpress.ElementPS();
                                pg.ElementApplicationID = Settings.ElementHPApplicationID;
                                pg.ElementAccountID = Settings.ElementHPAccountID;
                                pg.ElementAccountToken = Settings.ElementHPAccountToken;
                                pg.ElementAcceptorID = Settings.ElementHPAcceptorID;
                                pg.TranAmount = GeneralFunctions.FormatDouble1(-dblCardAmt);// GeneralFunctions.FormatDouble1(GeneralFunctions.fnDouble(val2));
                                pg.ElementTerminalID = Settings.ElementHPTerminalID.PadLeft(4, '0');
                                pg.TranID = val9;
                                pg.RefNo = val3;
                                pg.TktNo = intCardTranID.ToString();
                                pg.ApplicationVersion = GeneralFunctions.PaymentGatewayApplicationVersion();

                                string msg1 = "";
                                string msg2 = "";
                                if (strCard != "Debit Card")
                                {
                                    if (Settings.ElementHPMode == 0) pg.CreditReturn(ref msg1, ref msg2);
                                    if (Settings.ElementHPMode == 1) pg.TestCreditReturn(ref msg1, ref msg2);
                                }
                                else
                                {
                                    if (Settings.ElementHPMode == 0) pg.DebitReturn(ref msg1, ref msg2);
                                    if (Settings.ElementHPMode == 1) pg.TestDebitReturn(ref msg1, ref msg2);
                                }

                                if (msg1 == "0")
                                {
                                    blCardVarify = true;
                                    AuthCode = pg.ApprovalNo;
                                    TranID = pg.TranID;
                                    CardNum = "";
                                    CardExMM = "";
                                    CardExYY = "";
                                    CardLogo = "";
                                    CardType = "";
                                    ApprovedAmt = "0";
                                    RefNo = pg.RefNo;
                                    CardEntry = "";
                                    Token = "";
                                    AcqRef = "";
                                    MercuryProcessData = "";
                                    MercuryTranCode = "";
                                    MercuryPurchaseAmount = 0;
                                    strMercuryMerchantID = "";

                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    string updtstr = "";
                                    objcard.CardType = "";
                                    objcard.MercuryInvNo = "";
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = "";
                                    objcard.TokenData = "";
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryPurchaseAmount = 0;
                                    objcard.MercuryTranCode = "";
                                    objcard.CardAmount = GeneralFunctions.fnDouble(val2);

                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.RefCardAct = "";
                                    objcard.RefCardLogo = "";
                                    objcard.RefCardEntry = "";
                                    objcard.RefCardAuthID = "";
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = RefNo;
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(val2);
                                    objcard.CardTranType = "Return";
                                    objcard.AdjustFlag = "Y";
                                    objcard.RefCardBalAmount = 0;
                                    updtstr = objcard.UpdateCardResponse();
                                    objcard.PrintXml = "";
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    if (updtstr == "")
                                    {
                                        blCardVarify = true;
                                        drP["PROCESSCARD"] = "Y";
                                    }
                                }
                            }
                            catch
                            {
                                blCardVarify = false;
                                new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor =System.Windows.Input.Cursors.Arrow;
                                break;
                            }
                        }

                        if (pmntgwy == 2)
                        {
                            WriteToMercuryLogFile("Tender: " + strCard + " - start");
                            try
                            {
                                MercuryPayment.clsMercuryPymnt mp = new MercuryPayment.clsMercuryPymnt();
                                mp.MerchantID = Settings.MercuryHPMerchantID;
                                mp.UserID = Settings.MercuryHPUserID;
                                mp.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                                mp.InvNo = val4;
                                mp.RefNo = val3;
                                mp.AuthID = val7;
                                mp.AcqRefData = val5;
                                mp.Token = val6;
                                mp.PurchaseAmount = -dblCardAmt;//GeneralFunctions.fnDouble(val2);

                                string msg1 = "";
                                if (strCard != "Debit Card")
                                {
                                    if (strCard == "Mercury Gift Card")
                                    {
                                        if (Settings.ElementHPMode == 0) mp.GiftCardReturn(ref msg1);
                                        if (Settings.ElementHPMode == 1) mp.TestGiftCardReturn(ref msg1);
                                    }
                                    else
                                    {
                                        if (Settings.ElementHPMode == 0) mp.CreditReturn(ref msg1);
                                        if (Settings.ElementHPMode == 1) mp.TestCreditReturn(ref msg1);
                                    }
                                }
                                else
                                {
                                    if (Settings.ElementHPMode == 0) mp.DebitReturn(ref msg1);
                                    if (Settings.ElementHPMode == 1) mp.TestDebitReturn(ref msg1);
                                }

                                GeneralFunctions.CreateMercuryTransactionXML(mp.MercuryXmlResponse, val6);

                                WriteToMercuryLogFile("Response: " + msg1);

                                if (msg1.ToUpper().Trim() == "APPROVED")
                                {
                                    blCardVarify = true;
                                    AuthCode = mp.AuthID;
                                    TranID = mp.TranID;
                                    CardNum = mp.CardNumber;
                                    CardExMM = mp.CardExMM;
                                    CardExYY = mp.CardExYY;
                                    CardLogo = mp.CardLogo;
                                    CardType = mp.CardType;
                                    ApprovedAmt = mp.ApprovedAmt;
                                    RefNo = mp.RefNo;
                                    CardEntry = mp.CardEntry;
                                    Token = mp.Token;
                                    AcqRef = mp.AcqRefData;
                                    MercuryProcessData = mp.MercuryProcessData;
                                    MercuryTranCode = mp.MercuryTranCode;
                                    MercuryPurchaseAmount = mp.PurchaseAmount;
                                    strMercuryMerchantID = mp.MerchantID;

                                    MercuryTextResponse = mp.MercuryTextResponse;
                                    MercuryResponseOrigin = mp.MercuryResponseOrigin;
                                    MercuryResponseReturnCode = mp.MercuryResponseReturnCode;
                                    MercuryRecordNo = mp.MercuryRecordNo;
                                    MercuryGiftCardBalance = mp.BalanceAmt;

                                    if (AuthCode == null) AuthCode = "";
                                    if (TranID == null) TranID = "";
                                    if (CardNum == null) CardNum = "";
                                    if (CardExMM == null) CardExMM = "";
                                    if (CardExYY == null) CardExYY = "";
                                    if (CardLogo == null) CardLogo = "";
                                    if (CardType == null) CardType = "";
                                    if (ApprovedAmt == null) ApprovedAmt = "0";
                                    if (RefNo == null) RefNo = "";
                                    if (CardEntry == null) CardEntry = "";
                                    if (Token == null) Token = "";
                                    if (AcqRef == null) AcqRef = "";

                                    if (MercuryProcessData == null) MercuryProcessData = "";
                                    if (MercuryTextResponse == null) MercuryTextResponse = "";
                                    if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                                    if (MercuryRecordNo == null) MercuryRecordNo = "";
                                    if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                                    if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";

                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    string updtstr = "";

                                    objcard.MercuryRecordNo = MercuryRecordNo;
                                    objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                    objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                    objcard.MercuryTextResponse = MercuryTextResponse;

                                    objcard.CardType = CardLogo;
                                    objcard.MercuryInvNo = TranID;
                                    objcard.AuthCode = AuthCode;
                                    objcard.Reference = RefNo;
                                    objcard.AcqRefData = AcqRef;
                                    objcard.TokenData = Token;
                                    objcard.MercuryProcessData = MercuryProcessData;
                                    objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                    objcard.MercuryTranCode = MercuryTranCode;
                                    objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                    objcard.RefCardAct = CardNum;
                                    objcard.RefCardLogo = CardLogo;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = strMercuryMerchantID;
                                    objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                    objcard.CardTranType = "Return";
                                    objcard.AdjustFlag = "Y";
                                    objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                    objcard.PrintXml = "";
                                    updtstr = objcard.UpdateCardResponse();

                                    PosDataObject.POS ob = new PosDataObject.POS();
                                    ob.Connection = SystemVariables.Conn;
                                    ob.LoginUserID = SystemVariables.CurrentUserID;
                                    ob.CardTranID = CCID;
                                    double amt = 0;
                                    string f = "N";
                                    amt = GeneralFunctions.fnDouble(val20) + (-dblCardAmt);
                                    if (GeneralFunctions.fnDouble(val2) == amt)
                                    {
                                        f = "Y";
                                    }
                                    string s = ob.UpdateCardAdjustmentOnReturn(f, amt);

                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    if (updtstr == "")
                                    {
                                        blCardVarify = true;
                                        drP["PROCESSCARD"] = "Y";
                                    }
                                }
                                else
                                {
                                    blCardVarify = false;
                                    PrecidiaErrorText = mp.MercuryTextResponse;
                                    if (strCard != "Mercury Gift Card") new MessageBoxWindow().Show(msg1, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                    else new MessageBoxWindow().Show(msg1, "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                    WriteToMercuryLogFile("Error in Transaction");
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    break;
                                }
                            }
                            catch (Exception ex)
                            {
                                blCardVarify = false;
                                if (strCard != "Mercury Gift Card") new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                else new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.", "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToMercuryLogFile("Error in Transaction");
                                Cursor =System.Windows.Input.Cursors.Arrow;
                                break;
                            }
                        }

                        if (pmntgwy == 3)
                        {
                            WriteToPrecidiaLogFile("Tender: " + strCard + " - start");

                            blCG = false;
                            string resp = "";
                            string resptxt = "";

                            //GeneralFunctions.TNPCG_Response("CCSALE", dblCardAmt, ref resp, ref resptxt);

                            if (strCard != "Debit Card")
                            {
                                if (strCard == "Precidia Gift Card")
                                {
                                    CGtrantype = "GCREFUND";
                                }
                                else if (strCard == "EBT Voucher")
                                {
                                    CGtrantype = "EBTFOODVOUCHERREFUND";
                                }
                                else
                                {
                                    CGtrantype = "CCREFUND";
                                }
                            }
                            else
                            {
                                CGtrantype = "DCREFUND";
                            }

                            //if (strCard == "Credit Card") CGtrantype = "CCREFUND";
                            //if (strCard == "Debit Card") CGtrantype = "DCREFUND";

                            CGamt = -dblCardAmt;


                            XmlDocument XDoc = new XmlDocument();

                            // Create root node.
                            XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

                            XDoc.ApSystem.Drawing.PendChild(XElemRoot);

                            XmlElement XTemp = XDoc.CreateElement("Command");
                            XTemp.InnerText = CGtrantype;
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                            
                            //XTemp = XDoc.CreateElement("RecNum");
                            //XTemp.InnerText = val9.ToString();
                            //XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                            

                            XTemp = XDoc.CreateElement("Amount");
                            XTemp.InnerText = CGamt.ToString("f");
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);


                            //if ((strCard == "Credit Card") && (Settings.PrecidiaUsePINPad == "Y") && (Settings.PrecidiaSign == "Y"))
                            //{
                                //XTemp = XDoc.CreateElement("ReqPPSigCapture");
                                //XTemp.InnerText = "Yes";
                                //XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                            //}


                            if ((strCard != "Debit Card") && (drP["MANUAL"].ToString() == "N"))
                            {
                                if (Settings.PrecidiaUsePINPad == "Y")
                                {
                                    XTemp = XDoc.CreateElement("Input");
                                    XTemp.InnerText = "EXTERNAL";
                                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                                }
                            }

                            if (strCard == "Debit Card")
                            {
                                XTemp = XDoc.CreateElement("Input");
                                XTemp.InnerText = Settings.PrecidiaUsePINPad == "Y" ? "EXTERNAL" : "SWIPED";
                                XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                            }

                            if ((strCard == "Credit Card") || (strCard == "Credit Card - Voice Auth") || (strCard == "Credit Card (STAND-IN)") || (strCard == "EBT Cash") || (strCard == "EBT Voucher"))
                            {
                                if (drP["MANUAL"].ToString() == "Y")
                                {
                                    XTemp = XDoc.CreateElement("Input");
                                    XTemp.InnerText = "MANUAL";
                                    XElemRoot.ApSystem.Drawing.PendChild(XTemp);
                                }
                            }
                            XmlDocument XmlResponse = new XmlDocument();

                            XTemp = XDoc.CreateElement("KeepAlive");
                            XTemp.InnerText = "N";
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                            XTemp = XDoc.CreateElement("ClientMAC");
                            XTemp.InnerText = Settings.PrecidiaClientMAC;
                            XElemRoot.ApSystem.Drawing.PendChild(XTemp);

                            if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML : \n" + XDoc.OuterXml);
                            bool bTelnet = false;
                            try
                            {
                                SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                                bTelnet = true;
                            }
                            catch (Exception ex)
                            {
                                WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                                bTelnet = false;
                            }

                            if (bTelnet)
                            {
                                if (XmlResponse.InnerXml != "")
                                {

                                    if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML : \n" + XmlResponse.InnerXml);
                                    SocketResponse_General(XmlResponse);

                                    resp = CGresp;
                                    resptxt = CGresptxt;
                                    WriteToPrecidiaLogFile("Response: " + resp);
                                    WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));

                                    if (resp != "")
                                    {
                                        if (resp != "APPROVED")
                                        {
                                            PrecidiaErrorText = "Error: " + resptxt;
                                            blCardVarify = false;
                                        }
                                        else
                                        {
                                            if ((strCard == "Credit Card") && (Settings.PrecidiaUsePINPad == "Y"))
                                            {
                                                string sign_resp = "";
                                                XmlDocument XDoc2 = new XmlDocument();
                                                XmlElement XElemRoot2 = XDoc2.CreateElement("PLRequest");
                                                XDoc2.ApSystem.Drawing.PendChild(XElemRoot2);

                                                XmlElement XTemp2 = XDoc2.CreateElement("Command");
                                                XTemp2.InnerText = "PPGETSIGNATURE";
                                                XElemRoot2.ApSystem.Drawing.PendChild(XTemp2);

                                                XTemp2 = XDoc2.CreateElement("KeepAlive");
                                                XTemp2.InnerText = "N";
                                                XElemRoot2.ApSystem.Drawing.PendChild(XTemp2);

                                                XTemp2 = XDoc2.CreateElement("ClientMAC");
                                                XTemp2.InnerText = Settings.PrecidiaClientMAC;
                                                XElemRoot2.ApSystem.Drawing.PendChild(XTemp2);

                                                if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Request XML Signature: \n" + XDoc2.OuterXml);

                                                XmlDocument XmlResponseSignature = new XmlDocument();

                                                bool bTelnet2 = false;
                                                try
                                                {
                                                    SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc2, ref XmlResponseSignature);
                                                    bTelnet2 = true;
                                                }
                                                catch (Exception ex)
                                                {
                                                    WriteToPrecidiaLogFile("Socket Error: " + ex.ToString());
                                                    bTelnet2 = false;
                                                }


                                                if (bTelnet2)
                                                {
                                                    if (XmlResponseSignature.InnerXml != "")
                                                    {
                                                        if (Settings.PrecidiaRRLog == "Y") WriteToPrecidiaLogFile("Response XML Signature: \n" + XmlResponseSignature.InnerXml);

                                                        SocketResponse_Signature(XmlResponseSignature);

                                                        sign_resp = CGresp_signature;

                                                        WriteToPrecidiaLogFile("Signature Response: " + sign_resp);
                                                        WriteToPrecidiaLogFile("Response on : " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));
                                                        if (sign_resp != "SUCCESS")
                                                        {
                                                            PrecidiaErrorText = Properties.Resources."Signature Failed. Please Get Signature", "frmPOSTenderDlg_SignatureFailedPleaseGetSignat");
                                                            PrecidiaSignature = false;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        PrecidiaErrorText = Properties.Resources."Failed to get signature", "frmPOSTenderDlg_Failedtogetresponse");
                                                        PrecidiaSignature = false;
                                                    }

                                                }
                                                else
                                                {
                                                    PrecidiaErrorText = Properties.Resources."Socket Error - Signature Capture", "frmPOSTenderDlg_SocketErrorSignatureCapture");
                                                    PrecidiaSignature = false;
                                                }
                                            }

                                            string updtstr = "";
                                            objcard.MercuryRecordNo = "";
                                            objcard.MercuryResponseOrigin = "";
                                            objcard.MercuryResponseReturnCode = "";
                                            objcard.MercuryTextResponse = "";

                                            objcard.MercuryInvNo = "";
                                            objcard.MercuryProcessData = "";
                                            objcard.MercuryTranCode = "";
                                            objcard.MercuryPurchaseAmount = 0;
                                            objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard.CardType = CardLogo;
                                            objcard.AuthCode = AuthCode;
                                            objcard.Reference = RefNo;
                                            objcard.AcqRefData = "";
                                            objcard.TokenData = "";

                                            objcard.RefCardAct = CardNum;
                                            objcard.RefCardLogo = CardLogo;
                                            objcard.RefCardEntry = CardEntry;
                                            objcard.RefCardAuthID = AuthCode;
                                            objcard.RefCardTranID = TranID;
                                            objcard.RefCardMerchID = "";
                                            objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                            objcard.CardTranType = "Return";
                                            objcard.AdjustFlag = "Y";
                                            objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                            objcard.PrintXml = "";
                                            WriteToPrecidiaLogFile("CardAmount : " + ApprovedAmt);
                                            WriteToPrecidiaLogFile("CardType : " + CardLogo);
                                            WriteToPrecidiaLogFile("AuthCode : " + AuthCode);
                                            WriteToPrecidiaLogFile("Reference : " + RefNo);
                                            WriteToPrecidiaLogFile("RefCardAct : " + CardNum);
                                            WriteToPrecidiaLogFile("RefCardLogo : " + CardLogo);
                                            WriteToPrecidiaLogFile("RefCardEntry : " + CardEntry);
                                            WriteToPrecidiaLogFile("RefCardAuthID : " + AuthCode);
                                            WriteToPrecidiaLogFile("RefCardTranID : " + TranID);
                                            WriteToPrecidiaLogFile("RefCardAuthAmount : " + ApprovedAmt);

                                            updtstr = objcard.UpdateCardResponse();
                                            drP["PROCESSCARD"] = "Y";
                                            blCardVarify = true;
                                            WriteToPrecidiaLogFile("Card Trans Updated");
                                        }
                                    }
                                }
                            }
                        }

                        if (pmntgwy == 5) // Datacap 
                        {
                            WriteToDatacapLogFile("Tender: " + strCard + " - start");

                            Dcap_CmdStatus = "";
                            Dcap_TextResponse = "";
                            Dcap_AcctNo = "";
                            Dcap_Merchant = "";
                            Dcap_TranCode = "";
                            Dcap_CardType = "";
                            Dcap_AuthCode = "";
                            Dcap_RefNo = "";
                            Dcap_AcqRefData = "";
                            Dcap_RecordNo = "";
                            Dcap_InvoiceNo = "";
                            Dcap_TranAmt = 0;
                            Dcap_AuthAmt = 0;
                            Dcap_CashBkAmt = 0;
                            Dcap_BalAmt = 0;

                            bool boolDatacapLessAuthorised = false;
                            bool bproceed = true;
                            string request_xml = "";
                            string response_xml = "";

                            DSIPDCXLib.DsiPDCX dsipdx = new DSIPDCXLib.DsiPDCX();

                            dsipdx.ServerIPConfig(Settings.DatacapServer, 1);

                            PosDataObject.POS objPOS = new PosDataObject.POS();
                            objPOS.Connection = SystemVariables.Conn;
                            int dcap_max_inv = objPOS.FetchMaxInvoiceNo();

                            if (strCard == "Credit Card")
                            {
                                request_xml = GeneralFunctions.Datacap_CreditReturn_Request_XML(-dblCardAmt, dcap_max_inv,blPressManual);
                                try
                                {
                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                }
                                catch
                                {
                                    bproceed = false;
                                }
                            }

                            if (strCard == "Debit Card")
                            {
                                request_xml = GeneralFunctions.Datacap_DebitReturn_Request_XML(-dblCardAmt, dcap_max_inv);
                                try
                                {
                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                }
                                catch
                                {
                                    bproceed = false;
                                }
                            }

                            if (strCard == "EBT Cash")
                            {
                                request_xml = GeneralFunctions.Datacap_EBTCashReturn_Request_XML(-dblCardAmt, dcap_max_inv.ToString(),blPressManual);
                                try
                                {
                                    response_xml = dsipdx.ProcessTransaction(request_xml, 1, null, null);
                                }
                                catch
                                {
                                    bproceed = false;
                                }
                            }

                            WriteToDatacapLogFile("Request XML: " + request_xml);

                            if (bproceed)
                            {
                                GeneralFunctions.Datacap_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                    ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                    ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_BalAmt);

                                WriteToDatacapLogFile("Response XML: " + response_xml);

                                if (Dcap_CmdStatus == "Approved")
                                {
                                    string updtstr = "";
                                    objcard.MercuryRecordNo = "";
                                    objcard.MercuryResponseOrigin = "";
                                    objcard.MercuryResponseReturnCode = "";
                                    objcard.MercuryTextResponse = "";

                                    objcard.MercuryInvNo = Dcap_InvoiceNo;
                                    objcard.MercuryProcessData = "";
                                    objcard.MercuryTranCode = "";
                                    objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                                    objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                                    objcard.CardType = Dcap_CardType;
                                    objcard.AuthCode = Dcap_AuthCode;
                                    objcard.Reference = Dcap_RefNo;
                                    objcard.AcqRefData = Dcap_AcqRefData;
                                    objcard.TokenData = Dcap_RecordNo;

                                    objcard.RefCardAct = Dcap_AcctNo;
                                    objcard.RefCardLogo = Dcap_CardType;
                                    objcard.RefCardEntry = CardEntry;
                                    objcard.RefCardAuthID = Dcap_AuthCode;
                                    objcard.RefCardTranID = TranID;
                                    objcard.RefCardMerchID = Dcap_Merchant;
                                    objcard.RefCardAuthAmount = Dcap_AuthAmt;
                                    objcard.CardTranType = "Return";
                                    objcard.AdjustFlag = "Y";
                                    objcard.RefCardBalAmount = Dcap_BalAmt;
                                    objcard.PrintXml = Dcap_PrintDraft;
                                    updtstr = objcard.UpdateCardResponse();
                                    drP["PROCESSCARD"] = "Y";
                                    blCardVarify = true;
                                    WriteToDatacapLogFile("Card Trans Data Updated");
                                }
                                else
                                {
                                    new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Return Transaction", MessageBoxButton.OK, MessageBoxImage.Information);
                                    WriteToDatacapLogFile(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse);
                                    blCardVarify = false;
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    break;
                                }
                            }
                            else
                            {
                                blCardVarify = false;
                                WriteToDatacapLogFile("Error");
                                Cursor =System.Windows.Input.Cursors.Arrow;
                                break;
                            }

                        }




                        if (pmntgwy == 6) // Datacap EMV
                        {
                            WriteToDatacapEMVLogFile("Tender: " + strCard + " - start");

                            CallPadResetCount = 0;
                            CallEMVPadReset();
                            if (CallPadResetCount == 5)
                            {
                                CallPadResetCount = 0;
                                if (Dcap_PPAD_CmdStatus != "Success") new MessageBoxWindow().Show(Dcap_PPAD_CmdStatus + "\n\n" + Dcap_PPAD_TextResponse, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToDatacapEMVLogFile(Dcap_PPAD_CmdStatus + "\n\n" + Dcap_PPAD_TextResponse);
                                Cursor =System.Windows.Input.Cursors.Arrow;
                                blCardVarify = false;
                                break;
                            }
                            else
                            {
                                Dcap_CmdStatus = "";
                                Dcap_TextResponse = "";
                                Dcap_AcctNo = "";
                                Dcap_Merchant = "";
                                Dcap_TranCode = "";
                                Dcap_CardType = "";
                                Dcap_AuthCode = "";
                                Dcap_RefNo = "";
                                Dcap_AcqRefData = "";
                                Dcap_RecordNo = "";
                                Dcap_InvoiceNo = "";
                                Dcap_TranAmt = 0;
                                Dcap_AuthAmt = 0;
                                Dcap_CashBkAmt = 0;
                                Dcap_ProcessData = "";
                                Dcap_PrintDraft = "";

                                bool boolDatacapLessAuthorised = false;
                                bool bproceed = true;
                                string request_xml = "";
                                string response_xml = "";

                                DSIEMVXLib.DsiEMVX dsipdx = new DSIEMVXLib.DsiEMVX();

                                PosDataObject.POS objPOS = new PosDataObject.POS();
                                objPOS.Connection = SystemVariables.Conn;
                                int dcap_max_inv = objPOS.FetchMaxInvoiceNo();

                                request_xml = GeneralFunctions.PrepareEMVReturnXML(dcap_max_inv, -dblCardAmt, drP["MANUAL"].ToString() == "Y" ? "Y" : Settings.DatacapEMVManual);
                                try
                                {
                                    response_xml = dsipdx.ProcessTransaction(request_xml);
                                }
                                catch
                                {
                                    bproceed = false;
                                }
                                
                                WriteToDatacapEMVLogFile("Request XML : " + request_xml);

                                if (bproceed)
                                {
                                    GeneralFunctions.DatacapEMV_General_Response(response_xml, ref Dcap_CmdStatus, ref Dcap_TextResponse, ref Dcap_AcctNo, ref Dcap_Merchant, ref Dcap_TranCode,
                                        ref Dcap_CardType, ref Dcap_AuthCode, ref Dcap_InvoiceNo, ref Dcap_RefNo, ref Dcap_AcqRefData, ref Dcap_RecordNo,
                                        ref Dcap_TranAmt, ref Dcap_AuthAmt, ref Dcap_CashBkAmt, ref Dcap_ProcessData, ref Dcap_PrintDraft);

                                    WriteToDatacapEMVLogFile("Response XML : " + response_xml);

                                    if (Dcap_CmdStatus == "Approved")
                                    {
                                        GeneralFunctions.StoreResponseSequence(response_xml);
                                        string updtstr = "";
                                        objcard.MercuryRecordNo = "";
                                        objcard.MercuryResponseOrigin = "";
                                        objcard.MercuryResponseReturnCode = "";
                                        objcard.MercuryTextResponse = "";

                                        objcard.MercuryInvNo = Dcap_InvoiceNo;
                                        objcard.MercuryProcessData = Dcap_ProcessData;
                                        objcard.MercuryTranCode = Dcap_TranCode;
                                        objcard.MercuryPurchaseAmount = Dcap_TranAmt;
                                        objcard.CardAmount = Dcap_AuthAmt - Dcap_CashBkAmt;
                                        objcard.CardType = Dcap_CardType;
                                        objcard.AuthCode = Dcap_AuthCode;
                                        objcard.Reference = Dcap_RefNo;
                                        objcard.AcqRefData = Dcap_AcqRefData;
                                        objcard.TokenData = Dcap_RecordNo;

                                        objcard.RefCardAct = Dcap_AcctNo;
                                        objcard.RefCardLogo = Dcap_CardType;
                                        objcard.RefCardEntry = CardEntry;
                                        objcard.RefCardAuthID = Dcap_AuthCode;
                                        objcard.RefCardTranID = TranID;
                                        objcard.RefCardMerchID = Dcap_Merchant;
                                        objcard.RefCardAuthAmount = Dcap_AuthAmt;
                                        objcard.CardTranType = "Return";
                                        objcard.AdjustFlag = "Y";
                                        objcard.RefCardBalAmount = Dcap_BalAmt;
                                        objcard.PrintXml = Dcap_PrintDraft;
                                        updtstr = objcard.UpdateCardResponse();
                                        drP["PROCESSCARD"] = "Y";
                                        blCardVarify = true;
                                        WriteToDatacapEMVLogFile("Card Trans Record Updated");
                                    }
                                    else
                                    {
                                        new MessageBoxWindow().Show(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse, "Return Transaction", MessageBoxButton.OK, MessageBoxImage.Information);
                                        WriteToDatacapEMVLogFile(Dcap_CmdStatus + "\n\n" + Dcap_TextResponse);
                                        blCardVarify = false;
                                        Cursor =System.Windows.Input.Cursors.Arrow;
                                        break;
                                    }
                                }
                                else
                                {
                                    WriteToDatacapEMVLogFile("Error");
                                    blCardVarify = false;
                                    Cursor =System.Windows.Input.Cursors.Arrow;
                                    break;
                                }
                            }
                        }
                        */

                        /*
                        if (pmntgwy == 7) // POSLink
                        {
                            POSLinkLogPath = POSLinkLogFilePath();
                            bool boolPOSLinkLessAuthorised = false;
                            POSLink_ResultCode = "";
                            POSLink_ResultTxt = "";
                            POSLink_RefNum = "";
                            POSLink_AuthCode = "";
                            POSLink_CardType = "";
                            POSLink_BogusAccountNum = "";
                            POSLink_CashBack = 0;
                            POSLink_RequestedAmt = 0;
                            POSLink_ApprovedAmt = 0;
                            POSLink_RemainingBalance = 0;
                            POSLink_ExtraBalance = 0;

                            PosDataObject.POS objPOS = new PosDataObject.POS();
                            objPOS.Connection = SystemVariables.Conn;
                            int refinv = objPOS.FetchMaxInvoiceNo();

                            POSLink.PosLink pg = new POSLink.PosLink();

                            pg.CommSetting = GeneralFunctions.GetPOSLinkCommSetup();

                            POSLink.LogManagement plog = new POSLink.LogManagement();
                            plog.LogLevel = 1;
                            plog.LogFilePath = System.IO.Path.GetDirectoryName(POSLinkLogPath);
                            pg.LogManageMent = plog;

                            POSLink.PaymentRequest paymentRequest = new POSLink.PaymentRequest();

                            if (strCard == "Credit Card")
                            {
                                paymentRequest.TenderType = paymentRequest.ParseTenderType("CREDIT");
                            }

                            if (strCard == "Debit Card")
                            {
                                paymentRequest.TenderType = paymentRequest.ParseTenderType("DEBIT");

                                //POSLink_CashBack = 0;
                                //frmPOSCashBackPopup fcbkpopup = new frmPOSCashBackPopup();
                                //try
                                //{
                                //  fcbkpopup.ShowDialog();
                                //if (fcbkpopup.DialogResult == System.Windows.Forms.MessageBoxResult.OK)
                                //{
                                //POSLink_CashBack = fcbkpopup.CashBackAmount;
                                //}
                                //}
                                //finally
                                //{
                                //fcbkpopup.Dispose();
                                //}
                                //paymentRequest.CashBackAmt = Convert.ToString(POSLink_CashBack * 100);
                            }

                            if (strCard == "POSLink Gift Card")
                            {
                                paymentRequest.TenderType = paymentRequest.ParseTenderType("GIFT");
                            }

                            if (strCard == "EBT Cash")
                            {
                                paymentRequest.TenderType = paymentRequest.ParseTenderType("EBT_CASHBENEFIT");
                            }

                            if (strCard == "Food Stamps")
                            {
                                paymentRequest.TenderType = paymentRequest.ParseTenderType("EBT_FOODSTAMP");
                            }

                            paymentRequest.TransType = paymentRequest.ParseTransType("RETURN");

                            paymentRequest.Amount = Convert.ToString(-dblCardAmt * 100);

                            paymentRequest.OrigRefNum = val3;
                            paymentRequest.InvNum = refinv.ToString();
                            paymentRequest.UserID = "";
                            paymentRequest.PassWord = "";
                            paymentRequest.ClerkID = "";
                            paymentRequest.ServerID = "";
                            paymentRequest.ECRRefNum = "1";

                            pg.PaymentRequest = paymentRequest;

                            POSLink.ProcessTransResult result = new POSLink.ProcessTransResult();

                            result = pg.ProcessTrans();

                            if (result.Code == POSLink.ProcessTransResultCode.OK)
                            {
                                POSLink.PaymentResponse paymentResponse = pg.PaymentResponse;
                                if (paymentResponse != null && paymentResponse.ResultCode != null)
                                {
                                    POSLink_ResultCode = paymentResponse.ResultCode;
                                    POSLink_ResultTxt = paymentResponse.ResultTxt;
                                    POSLink_RefNum = paymentResponse.RefNum;

                                    POSLink_RequestedAmt = GeneralFunctions.fnDouble(paymentResponse.RequestedAmount) / 100;
                                    POSLink_ApprovedAmt = GeneralFunctions.fnDouble(paymentResponse.ApprovedAmount) / 100;
                                    POSLink_RemainingBalance = GeneralFunctions.fnDouble(paymentResponse.RemainingBalance) / 100;
                                    POSLink_ExtraBalance = GeneralFunctions.fnDouble(paymentResponse.ExtraBalance) / 100;

                                    POSLink_BogusAccountNum = paymentResponse.BogusAccountNum;
                                    POSLink_CardType = paymentResponse.CardType;


                                    POSLink_AuthCode = paymentResponse.AuthCode;

                                    POSLink_CashBack = GeneralFunctions.GetPAXCashback(paymentResponse.ExtData);

                                    if (POSLink_CashBack != 0) boolPAXCashBack = true;

                                    if (POSLink_ResultCode == "000000") // Approved
                                    {




                                        string updtstr = "";

                                        objcard.MercuryRecordNo = "";
                                        objcard.MercuryResponseOrigin = "";
                                        objcard.MercuryResponseReturnCode = "";
                                        objcard.MercuryTextResponse = "";

                                        objcard.MercuryInvNo = "";
                                        objcard.MercuryProcessData = "";
                                        objcard.MercuryTranCode = "";
                                        objcard.MercuryPurchaseAmount = POSLink_RequestedAmt;
                                        objcard.CardAmount = POSLink_ApprovedAmt - POSLink_CashBack;
                                        objcard.CardType = POSLink_CardType;
                                        objcard.AuthCode = POSLink_AuthCode;
                                        objcard.Reference = POSLink_RefNum;
                                        objcard.AcqRefData = "";
                                        objcard.TokenData = "";

                                        objcard.RefCardAct = POSLink_BogusAccountNum;
                                        objcard.RefCardLogo = POSLink_CardType;
                                        objcard.RefCardEntry = "";
                                        objcard.RefCardAuthID = POSLink_AuthCode;
                                        objcard.RefCardTranID = POSLink_RefNum;
                                        objcard.RefCardMerchID = "";
                                        objcard.RefCardAuthAmount = POSLink_ApprovedAmt;
                                        objcard.CardTranType = "Return";
                                        objcard.AdjustFlag = "Y";
                                        objcard.RefCardBalAmount = POSLink_RemainingBalance;
                                        objcard.PrintXml = "";
                                        updtstr = objcard.UpdateCardResponse();

                                        drP["PROCESSCARD"] = "Y";
                                        blCardVarify = true;

                                    }
                                    else
                                    {
                                        new MessageBoxWindow().Show(POSLink_ResultTxt, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                        Cursor = System.Windows.Input.Cursors.Arrow;
                                        blCardVarify = false;
                                        break;
                                    }

                                }
                                else
                                {
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                    blCardVarify = false;
                                    break;
                                }

                            }
                            else if (result.Code == POSLink.ProcessTransResultCode.TimeOut)
                            {
                                new MessageBoxWindow().Show("Action Timeout.", "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blCardVarify = false;
                                break;
                            }
                            else
                            {
                                new MessageBoxWindow().Show(result.Msg, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                blCardVarify = false;
                                break;

                            }
                        }
                        */

                        if (pmntgwy == 8) // Evo
                        {
                            decimal amount = GeneralFunctions.fnDecimal(string.Format("{0:#.00}", Convert.ToDecimal(dblCardAmt)));

                            var evoTransactionForm = new XeposExternal.frm_EvoTransaction(-amount, GeneralFunctions.fnInt32(val3), isRefundOrVoid: true, isExecuteVoid: false, dtblPart: null, calledfrom: null);
                            blurGrid.Visibility = Visibility.Visible;
                            evoTransactionForm.ShowDialog();
                            blurGrid.Visibility = Visibility.Collapsed;
                            bool evosuccess = objcard.IsXeConnectTransactionRecordExist(GeneralFunctions.fnInt32(val3));

                            try
                            {
                                // EVo logging in DB
                                var respDTO = Newtonsoft.Json.JsonConvert.SerializeObject("Response from EVO CardVarify()->");
                                GeneralFunctions.SetDetailedTransactionLog("frm_POSTenderDLG.CardVarifyForReturn()", "Response --> TransactionCompleted= " + evoTransactionForm.TransactionCompleted.ToString() + " -> " +
                                    respDTO + $" --> Invoice Exists = {evosuccess.ToString()} = -amount = {amount.ToString()}, GeneralFunctions.fnInt32(val3) = {val3.ToString()}, isRefundOrVoid: true, isExecuteVoid: false", val3.ToString());
                            }
                            catch (Exception ex)
                            {
                            }

                            if (evosuccess && evoTransactionForm.TransactionCompleted)
                            {
                                DataTable dtblXE = objcard.FetchXeConnectTransactionRecord(GeneralFunctions.fnInt32(val3));

                                string Xestatuscode = "";
                                string Xeamount = "";
                                string Xetranid = "";
                                string Xeauthcode = "";



                                foreach (DataRow drxe in dtblXE.Rows)
                                {
                                    Xestatuscode = drxe["StatusCode"].ToString();
                                    Xeauthcode = drxe["ApprovalCode"].ToString();
                                    Xetranid = drxe["TransactionId"].ToString();
                                    Xeamount = drxe["Amount"].ToString();
                                }


                                bool boolLessAuthorised = false;

                                if (GeneralFunctions.fnDouble(Xeamount) < dblCardAmt)
                                {
                                    DocMessage.MsgInformation("Card only authorized " + SystemVariables.CurrencySymbol + Xeamount);
                                    boolLessAuthorised = true;
                                }


                                foreach (DataRow dra1 in dtblTender.Rows)
                                {
                                    if ((dra1["TENDER"].ToString() == strCard) && (dra1["CCTRANNO"].ToString() == ""))
                                    {
                                        dra1["CCTRANNO"] = intCardTranID.ToString();
                                        dra1["XeConnectID"] = val3.ToString();
                                        break;
                                    }

                                }


                                string updtstr = "";


                                objcard.CardAmount = GeneralFunctions.fnDouble(Xeamount);

                                objcard.AuthCode = Xeauthcode;
                                objcard.Reference = val3;


                                objcard.RefCardAuthID = Xeauthcode;
                                objcard.RefCardTranID = Xetranid;
                                objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(Xeamount);
                                objcard.CardTranType = "Return";
                                objcard.ID = intCardTranID;
                                objcard.AdjustFlag = "Y";
                                objcard.LoginUserID = SystemVariables.CurrentUserID;
                                updtstr = objcard.UpdateCardTransOnEvoResponse();

                                drP["PROCESSCARD"] = "Y";

                                if (updtstr == "")
                                {
                                    blCardVarify = true;
                                }
                                else
                                {
                                    blCardVarify = false;
                                    break;
                                }

                            }
                            else
                            {
                                blCardVarify = false;
                                break;
                            }

                        }

                        if (pmntgwy == 9)
                        {
                            ps_returnauthcode = val7;
                            ps_error = "";
                            boolPSTerminalAvailablity = false;
                            boolPSComplete = false;
                            ps_tid = "";
                            ps_currency = "";
                            ps_status = "";
                            ps_amt = "";
                            try
                            {
                                ps_amt = (-dblCardAmt).ToString("f2").Replace(".", String.Empty).TrimStart(new Char[] { '0' });
                            }
                            catch
                            {

                            }

                            wsoc = new WebSocket(Settings.Paymentsense_Uri, sslProtocols: SslProtocols.Tls12);

                            wsoc.Opened += Wsoc_Opened30;
                            wsoc.MessageReceived += Wsoc_MessageReceived30;
                            wsoc.Open();
                            System.Threading.Thread.Sleep(1000);

                            manualResetEvent.WaitOne();

                            bool bproceed = false;
                            if (!boolPSTerminalAvailablity)
                            {
                                DocMessage.MsgInformation("Terminal Busy");
                                bproceed = false;
                            }
                            else
                            {
                                if (boolPSComplete)
                                {
                                    if (ps_error != "")
                                    {
                                        DocMessage.MsgInformation(ps_error);
                                        bproceed = false;
                                    }
                                    else
                                    {
                                        if (ps_transactionResult == "SUCCESSFUL")
                                        {
                                            bproceed = true;
                                        }
                                        else
                                        {
                                            DocMessage.MsgInformation(ps_transactionResult);
                                            bproceed = false;
                                        }
                                    }
                                }
                            }

                            if (bproceed)
                            {
                                bool boolLessAuthorised = false;

                                /* if (GeneralFunctions.fnDouble(Xeamount) < dblCardAmt)
                                 {
                                     DocMessage.MsgInformation("Card only authorized " + SystemVariables.CurrencySymbol + Xeamount);
                                     drP["AMOUNT"] = GeneralFunctions.fnDouble(Xeamount);

                                     boolLessAuthorised = true;
                                 } */


                                foreach (DataRow dra1 in dtblTender.Rows)
                                {
                                    if ((dra1["TENDER"].ToString() == strCard) && (dra1["CCTRANNO"].ToString() == ""))
                                    {
                                        dra1["CCTRANNO"] = intCardTranID.ToString();
                                        break;
                                    }

                                }


                                string updtstr = "";


                                objcard.CardAmount = GeneralFunctions.fnDouble(dblCardAmt);

                                objcard.AuthCode = ps_authCode;
                                objcard.Reference = ps_transactionNumber;


                                objcard.RefCardAuthID = ps_authCode;
                                objcard.RefCardTranID = ps_transactionId;
                                objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(dblCardAmt);
                                objcard.CardTranType = "Return";
                                objcard.ID = intCardTranID;
                                objcard.LoginUserID = SystemVariables.CurrentUserID;
                                objcard.AdjustFlag = "Y";
                                updtstr = objcard.UpdateCardTransOnEvoResponse();



                                if (!boolLessAuthorised)
                                {
                                    if (updtstr == "")
                                    {
                                        blCardVarify = true;
                                        drP["PROCESSCARD"] = "Y";
                                        Cursor = System.Windows.Input.Cursors.Arrow;
                                    }
                                    else
                                    {

                                        blCardVarify = false;
                                        Cursor = System.Windows.Input.Cursors.Arrow;
                                        break;
                                    }
                                }
                                else
                                {
                                    if (updtstr == "")
                                    {
                                        drP["PROCESSCARD"] = "Y";
                                    }

                                    blCardVarify = false;
                                    Cursor = System.Windows.Input.Cursors.Arrow;
                                    break;
                                }
                            }
                            else
                            {
                                blCardVarify = false;
                                Cursor = System.Windows.Input.Cursors.Arrow;
                                break;
                            }


                        }

                    }
                    dt.Dispose();

                }
            }



            if (blCardVarify)
            {
                return true;
            }
            else
            {
                if (blCardVarify)
                {
                    //new MessageBoxWindow().Show(Properties.Resources."Transaction failed.", "Credit Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                    return false;
                }
                else
                {
                    blCardVarify = false;
                    return false;
                }
            }

        }

        // Mercury Gift Card Processing after insufficient balance of previous one

        private bool CardVarifyForInstantMercuryGiftCardTransaction(double dblCardAmt)
        {
            return false;
            /*
            intCardTranID = 0;
            blCardVarify = false;
            string strCard = "";
            AuthCode = "";

            intCardTranID = 0;
            strCard = "Mercury Gift Card";

            PosDataObject.POS objcard = new PosDataObject.POS();
            objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
            objcard.CustomerID = intCustID;
            objcard.LoginUserID = SystemVariables.CurrentUserID;
            objcard.EmployeeID = SystemVariables.CurrentUserID;
            objcard.CardType = strCard;
            objcard.CardAmount = dblCardAmt;
            objcard.PaymentGateway = Settings.PaymentGateway;
            objcard.TerminalName = Settings.TerminalName;
            if (Settings.PaymentGateway == 2)
            {
                objcard.LogFileName = MercuryLogFile;
            }
            else if (Settings.PaymentGateway == 3)
            {
                objcard.LogFileName = PrecidiaLogFile;
            }
            else if (Settings.PaymentGateway == 5)
            {
                objcard.LogFileName = DatacapLogFile;
            }
            else if (Settings.PaymentGateway == 6)
            {
                objcard.LogFileName = DatacapEMVLogFile;
            }
            else
            {
                objcard.LogFileName = "";
            }
            try
            {
                string strerr = objcard.InsertCardTrans();
            }
            catch (Exception ex)
            {
                blCardVarify = false;
                new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                GeneralFunctions.SetTransactionLog("Catch - Error inserting Card Trans", ex.Message);
                Cursor =System.Windows.Input.Cursors.Arrow;
                return false;
            }
            intCardTranID = objcard.CardTranID;

            cardidentity.Rows.Add(new object[] { intCardTranID.ToString() });

            Cursor = System.Windows.Input.Cursors.Hand;

            WriteToMercuryLogFile("Mercury Gift Card Tendering for Insufficient balance start");

            string strAuthCode = "0";
            try
            {
                MercuryPayment.clsMercuryPymnt mp = new MercuryPayment.clsMercuryPymnt();
                mp.MerchantID = Settings.MercuryHPMerchantID;
                mp.UserID = Settings.MercuryHPUserID;
                mp.COMPort = GeneralFunctions.fnInt32(Settings.MercuryHPPort);
                mp.InvNo = intCardTranID.ToString();
                mp.PurchaseAmount = dblCardAmt;

                string msg1 = "";
                string msg2 = "";


                if (Settings.ElementHPMode == 0) mp.GiftCardSales(ref msg1);
                if (Settings.ElementHPMode == 1) mp.TestGiftCardSales(ref msg1);


                GeneralFunctions.CreateMercuryTransactionXML(mp.MercuryXmlResponse, mp.Token);

                WriteToMercuryLogFile("Response: " + msg1);

                if (msg1 != "")
                {
                    if (msg1.ToUpper().Trim() == "APPROVED")
                    {
                        double AthAmount = mp.ApprovedAmt == null ? 0 : GeneralFunctions.fnDouble(mp.ApprovedAmt);
                        if (AthAmount < dblCardAmt)
                        {
                            new MessageBoxWindow().Show(Properties.Resources."Card only authorized $","frmPOSTenderDlg_msg_Cardonlyauthorized") + GeneralFunctions.FormatDouble1(AthAmount) + "." + "\n\r" + Properties.Resources."Please select another tender to finish the transaction.","frmPOSTenderDlg_msg_Pleaseselectanothertendertofin"), "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        }
                        try
                        {
                            AuthCode = mp.AuthID;
                            TranID = mp.TranID;
                            CardNum = mp.CardNumber;
                            CardExMM = mp.CardExMM;
                            CardExYY = mp.CardExYY;
                            CardLogo = mp.CardLogo;
                            CardType = mp.CardType;
                            ApprovedAmt = mp.ApprovedAmt;
                            RefNo = mp.RefNo;
                            MercuryPurchaseAmount = mp.PurchaseAmount;
                            MercuryProcessData = mp.MercuryProcessData;
                            MercuryTranCode = mp.MercuryTranCode;
                            MercuryTextResponse = mp.MercuryTextResponse;
                            MercuryRecordNo = mp.MercuryRecordNo;
                            MercuryResponseOrigin = mp.MercuryResponseOrigin;
                            MercuryResponseReturnCode = mp.MercuryResponseReturnCode;
                            MercuryGiftCardBalance = mp.BalanceAmt;
                            CardEntry = mp.CardEntry;
                            Token = mp.Token;
                            AcqRef = mp.AcqRefData;
                            strMercuryMerchantID = mp.MerchantID;

                            if (AuthCode == null) AuthCode = "";
                            if (TranID == null) TranID = "";
                            if (CardNum == null) CardNum = "";
                            if (CardExMM == null) CardExMM = "";
                            if (CardExYY == null) CardExYY = "";
                            if (CardLogo == null) CardLogo = "";
                            if (CardType == null) CardType = "";
                            if (ApprovedAmt == null) ApprovedAmt = "0";
                            if (RefNo == null) RefNo = "";
                            if (CardEntry == null) CardEntry = "";
                            if (Token == null) Token = "";
                            if (AcqRef == null) AcqRef = "";

                            if (MercuryProcessData == null) MercuryProcessData = "";
                            if (MercuryTranCode == null) MercuryTranCode = "";
                            if (MercuryRecordNo == null) MercuryRecordNo = "";
                            if (MercuryResponseOrigin == null) MercuryResponseOrigin = "";
                            if (MercuryResponseReturnCode == null) MercuryResponseReturnCode = "";
                            if (MercuryTextResponse == null) MercuryTextResponse = "";
                            if (MercuryGiftCardBalance == null) MercuryGiftCardBalance = "";

                            if ((MercuryTextResponse.ToUpper().Trim() == "AP") || (MercuryTextResponse.ToUpper().Trim() == "AP*") ||
                                (MercuryTextResponse.ToUpper().Trim() == "APPROVED STANDIN") ||
                                (MercuryTextResponse.ToUpper().Trim() == "AP-NEW INFO") ||
                                (MercuryTextResponse.ToUpper().Trim() == "APPROVED"))
                            {
                                foreach (DataRow dra in dtblTender.Rows)
                                {
                                    if ((dra["TENDER"].ToString() == strCard) && (dra["CCTRANNO"].ToString() == ""))
                                    {
                                        dra["CCTRANNO"] = intCardTranID.ToString();
                                        break;
                                    }
                                }

                                string updtstr = "";

                                objcard.MercuryInvNo = TranID;
                                objcard.MercuryProcessData = MercuryProcessData;
                                objcard.MercuryTranCode = MercuryTranCode;
                                objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                objcard.MercuryRecordNo = MercuryRecordNo;
                                objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                objcard.MercuryTextResponse = MercuryTextResponse;

                                objcard.CardType = CardLogo;
                                objcard.AuthCode = AuthCode;
                                objcard.Reference = RefNo;
                                objcard.AcqRefData = AcqRef;
                                objcard.TokenData = Token;

                                objcard.RefCardAct = CardNum;
                                objcard.RefCardLogo = CardLogo;
                                objcard.RefCardEntry = CardEntry;
                                objcard.RefCardAuthID = AuthCode;
                                objcard.RefCardTranID = TranID;
                                objcard.RefCardMerchID = strMercuryMerchantID;
                                objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                objcard.CardTranType = "Sale";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                objcard.PrintXml = "";
                                updtstr = objcard.UpdateCardResponse();

                                if (updtstr == "") blCardVarify = true;
                                else
                                {
                                    GeneralFunctions.SetTransactionLog("credit card update after approved fail", updtstr);
                                    blCardVarify = false;
                                    return false;
                                }
                                Cursor =System.Windows.Input.Cursors.Arrow;
                            }

                            if (MercuryTextResponse.ToUpper().Trim() == "PARTIAL AP")
                            {
                                foreach (DataRow dra in dtblTender.Rows)
                                {
                                    if ((dra["TENDER"].ToString() == strCard) && (dra["CCTRANNO"].ToString() == ""))
                                    {
                                        dra["CCTRANNO"] = intCardTranID.ToString();
                                        break;
                                    }
                                }
                                string updtstr = "";
                                objcard.MercuryInvNo = TranID;
                                objcard.MercuryProcessData = MercuryProcessData;
                                objcard.MercuryTranCode = MercuryTranCode;
                                objcard.MercuryPurchaseAmount = MercuryPurchaseAmount;
                                objcard.CardAmount = GeneralFunctions.fnDouble(ApprovedAmt);

                                objcard.MercuryRecordNo = MercuryRecordNo;
                                objcard.MercuryResponseOrigin = MercuryResponseOrigin;
                                objcard.MercuryResponseReturnCode = MercuryResponseReturnCode;
                                objcard.MercuryTextResponse = MercuryTextResponse;

                                objcard.CardType = CardLogo;
                                objcard.AuthCode = AuthCode;
                                objcard.Reference = RefNo;
                                objcard.AcqRefData = AcqRef;
                                objcard.TokenData = Token;

                                objcard.RefCardAct = CardNum;
                                objcard.RefCardLogo = CardLogo;
                                objcard.RefCardEntry = CardEntry;
                                objcard.RefCardAuthID = AuthCode;
                                objcard.RefCardTranID = TranID;
                                objcard.RefCardMerchID = strMercuryMerchantID;
                                objcard.RefCardAuthAmount = GeneralFunctions.fnDouble(ApprovedAmt);
                                objcard.CardTranType = "Sale";
                                objcard.AdjustFlag = "N";
                                objcard.RefCardBalAmount = GeneralFunctions.fnDouble(MercuryGiftCardBalance);
                                objcard.PrintXml = "";
                                updtstr = objcard.UpdateCardResponse();
                                if (updtstr == "")
                                {
                                    RearrangeTenderGridAfterPartialApproval(strCard, ApprovedAmt);
                                    blCardVarify = false;
                                    GeneralFunctions.SetTransactionLog("credit card partial approved", updtstr);
                                    return false;
                                }
                                else
                                {
                                    GeneralFunctions.SetTransactionLog("credit card update after partial approved fail", updtstr);
                                    blCardVarify = false;
                                    return false;
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            GeneralFunctions.SetTransactionLog("Catch - credit card update after approved", ex.Message);
                            blCardVarify = false;
                            return false;
                        }

                    }
                    else
                    {
                        blCardVarify = false;
                        PrecidiaErrorText = mp.MercuryTextResponse;
                        if (strCard == "Mercury Gift Card")
                        {
                            MercuryTextResponse = mp.MercuryTextResponse;
                            if (MercuryTextResponse == "Insufficient Account Balance")
                            {
                                bMercuryGiftCardInsufficientBalance = true;
                                ApprovedAmt = mp.ApprovedAmt;
                                MercuryGiftCardBalance = mp.BalanceAmt;
                                int dindx = cardidentity.Rows.Count;
                                cardidentity.Rows.RemoveAt(dindx - 1);
                            }
                            else
                            {
                                new MessageBoxWindow().Show(msg1, "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                            }
                        }
                        else if (strCard == "EBT Cash") new MessageBoxWindow().Show(msg1, "EBT Cash Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        else if (strCard == "EBT Voucher") new MessageBoxWindow().Show(msg1, "EBT Voucher Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                        else new MessageBoxWindow().Show(msg1, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                        Cursor =System.Windows.Input.Cursors.Arrow;
                        return false;
                    }
                }

                
            }
            catch (Exception ex)
            {
                GeneralFunctions.SetTransactionLog("Catch - credit card update", ex.Message);
                blCardVarify = false;

                if (strCard == "Mercury Gift Card") new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.", "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                else if (strCard == "EBT Cash") new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.", "EBT Cash Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                else if (strCard == "EBT Voucher") new MessageBoxWindow().Show(Properties.Resources."Error occured during transaction.", "EBT Voucher Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                else new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);


                Cursor =System.Windows.Input.Cursors.Arrow;
                return false;
            }

            Cursor =System.Windows.Input.Cursors.Arrow;

            if (blCardVarify)
            {
                return true;
            }
            else
            {
                if (blCardVarify)
                {
                    if (strCard == "Mercury Gift Card") new MessageBoxWindow().Show(Properties.Resources."Transaction Failed.","frmPOSTenderDlg_msg_Transactionfailed"), "Gift Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                    else if (strCard == "EBT Cash") new MessageBoxWindow().Show(Properties.Resources."Transaction Failed.","frmPOSTenderDlg_msg_Transactionfailed"), "EBT Cash Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                    else if (strCard == "EBT Voucher") new MessageBoxWindow().Show(Properties.Resources."Transaction Failed.","frmPOSTenderDlg_msg_Transactionfailed"), "EBT Voucher Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                    else new MessageBoxWindow().Show(Properties.Resources."Transaction Failed.", "frmPOSTenderDlg_msg_Transactionfailed"), Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                    return false;
                }
                else
                {
                    blCardVarify = false;
                    return false;
                }
            }*/
        }

        #endregion

        // check if Food Stamp Tendering applicable or not
        private bool IsFSTendering(int intTrnNo)
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsFSTender(intTrnNo);
        }

        #region Printing

        // Invoice Printing after Transaction

        private void PrintInvoice()
        {


            if (Settings.GeneralReceiptPrint == "N")  // Receipt Printer
            {
                blurGrid.Visibility = Visibility.Visible;
                frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                try
                {
                    frm_POSInvoicePrintDlg.PrintType = "Invoice";
                    if (blRentIssued) frm_POSInvoicePrintDlg.PrintType = "Rent Issue";
                    if (blRentRecall) frm_POSInvoicePrintDlg.PrintType = "Return Rent Item";
                    if (blRepairIssued)
                    {
                        if (!blRepairDeposit) frm_POSInvoicePrintDlg.PrintType = "Repair Deliver";
                        else frm_POSInvoicePrintDlg.PrintType = "Repair In";
                    }
                    if (blRepairRecall) frm_POSInvoicePrintDlg.PrintType = "Repair Deliver";
                    if (GiftAidFlag == "Y") frm_POSInvoicePrintDlg.PrintType = "Gift Aid Receipt";
                    frm_POSInvoicePrintDlg.InvNo = intINV;
                    frm_POSInvoicePrintDlg.ApprovalNumber = AuthCode;
                    frm_POSInvoicePrintDlg.TranID = TranID;
                    frm_POSInvoicePrintDlg.CardNumber = CardNum;
                    frm_POSInvoicePrintDlg.CardType = CardType;
                    frm_POSInvoicePrintDlg.CardLogo = CardLogo;
                    frm_POSInvoicePrintDlg.CardExMM = CardExMM;
                    frm_POSInvoicePrintDlg.CardExYY = CardExYY;
                    frm_POSInvoicePrintDlg.RefNo = RefNo;
                    frm_POSInvoicePrintDlg.ApprovedAmt = ApprovedAmt;
                    frm_POSInvoicePrintDlg.CardEntry = CardEntry;
                    frm_POSInvoicePrintDlg.MercuryMerchantID = strMercuryMerchantID;
                    frm_POSInvoicePrintDlg.IsRentIssued = blRentIssued;
                    frm_POSInvoicePrintDlg.IsRentReturned = blRentRecall;
                    frm_POSInvoicePrintDlg.Forced2ReceiptsOnPrecidiaSignatureFailure = blForced2ReceiptsOnPrecidiaSignatureFailure;
                    frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                    frm_POSInvoicePrintDlg.ShowDialog();
                }
                finally
                {
                    blurGrid.Visibility = Visibility.Collapsed;
                }
            }
            else  // A4 printing
            {
                if (GiftAidFlag == "Y")
                {
                    DataTable dtbl = new DataTable();
                    PosDataObject.POS objPOS1 = new PosDataObject.POS();
                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dtbl = objPOS1.FetchInvoiceHeader(intINV, Settings.StoreCode);

                    DataTable dlogo = new DataTable();
                    objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dlogo = objPOS1.FetchStoreLogo();
                    bool boolnulllogo = false;
                    foreach (DataRow drl1 in dtbl.Rows)
                    {
                        foreach (DataRow drl2 in dlogo.Rows)
                        {
                            if (drl2["logo"] == null) boolnulllogo = true;
                            drl1["Logo"] = drl2["logo"];
                        }
                    }

                    int intTranNo = 0;
                    double dblOrderTotal = 0;
                    double dblOrderSubtotal = 0;
                    double dblDiscount = 0;
                    double dblCoupon = 0;
                    double dblTax = 0;
                    double dblSurcharge = 0;
                    int intCID = 0;
                    string strDiscountReason = "";
                    double dblTax1 = 0;
                    double dblTax2 = 0;
                    double dblTax3 = 0;
                    string strTaxNM1 = "";
                    string strTaxNM2 = "";
                    string strTaxNM3 = "";
                    string strservice = "";
                    int intHeaderStatus = 0;
                    double dblRentDeposit = 0;
                    double dblRentReturnDeposit = 0;
                    double dblRepairAmount = 0;
                    double dblRepairAdvanceAmount = 0;
                    string strRepairDeliveryDate = "";
                    string calcrent = "N";

                    double dblFees = 0;
                    double dblFeesTax = 0;

                    double dblFeesCoupon = 0;
                    double dblFeesCouponTax = 0;

                    string strDTaxNM = "";
                    double dblDTax = 0;

                    string strCustomerDOB = "";

                    foreach (DataRow dr in dtbl.Rows)
                    {
                        intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                        intCID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                        dblOrderTotal = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                        dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                        dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                        dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                        dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                        dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                        dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                        strTaxNM1 = dr["TaxNM1"].ToString();
                        strTaxNM2 = dr["TaxNM2"].ToString();
                        strTaxNM3 = dr["TaxNM3"].ToString();

                        dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                        dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                        dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                        dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                        strDiscountReason = dr["DiscountReason"].ToString();
                        strservice = dr["ServiceType"].ToString();
                        intHeaderStatus = GeneralFunctions.fnInt32(dr["Status"].ToString());
                        dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                        dblRepairAmount = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                        dblRepairAdvanceAmount = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                        if (dr["RepairDeliveryDate"].ToString() != "") strRepairDeliveryDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToShortDateString();
                        calcrent = dr["IsRentCalculated"].ToString();

                        strDTaxNM = dr["DTaxName"].ToString();
                        dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                        if (Settings.POSIDRequired == "Y") strCustomerDOB = dr["CustomerDOB"].ToString();
                    }
                    if (intHeaderStatus == 17) dblOrderTotal = dblRepairAmount;
                    blDatacapManualEntry = IsDatacapManual(intTranNo);
                    blCardPayment = IsCardPayment(intTranNo);
                    blHouseAccountPayment = IsHAPayment(intTranNo);
                    blFSTender = IsFSTendering(intTranNo);
                    if (blCardPayment)
                    {
                        if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2))
                        {
                            bool b1 = IsMercuryCardPayment(intTranNo);
                            if (b1)
                            {
                                double amt = GetMercuryCardPaymentAmount(intTranNo);
                                if (amt < Settings.MercurySignAmount) MercuryCardPaymentCheck = true;
                            }
                        }
                    }


                    blRepairPrint = (strservice == "Repair") ? true : false;

                    DataTable dtbl1 = new DataTable();
                    DataTable dtbl2 = new DataTable();
                    DataTable dtbl3 = new DataTable();
                    DataTable dtbl4 = new DataTable();
                    DataTable dtbl5 = new DataTable();

                    OfflineRetailV2.Report.Sales.repInvMain rep_InvMain = new OfflineRetailV2.Report.Sales.repInvMain();
                    OfflineRetailV2.Report.Sales.repInvHeader1 rep_InvHeader1 = new OfflineRetailV2.Report.Sales.repInvHeader1();
                    OfflineRetailV2.Report.Sales.repInvHeader2 rep_InvHeader2 = new OfflineRetailV2.Report.Sales.repInvHeader2();
                    OfflineRetailV2.Report.Sales.repInvGALine rep_InvLine = new OfflineRetailV2.Report.Sales.repInvGALine();
                    OfflineRetailV2.Report.Sales.repInvSubtotal rep_InvSubtotal = new OfflineRetailV2.Report.Sales.repInvSubtotal();
                    OfflineRetailV2.Report.Sales.repInvRentLine rep_InvRentLine = new OfflineRetailV2.Report.Sales.repInvRentLine();
                    OfflineRetailV2.Report.Sales.repInvRentSubTotal rep_InvRentSubTotal = new OfflineRetailV2.Report.Sales.repInvRentSubTotal();
                    OfflineRetailV2.Report.Sales.repInvRentReturnLine rep_InvRentReturnLine = new OfflineRetailV2.Report.Sales.repInvRentReturnLine();
                    OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal rep_InvRentReturnSubTotal = new OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal();
                    OfflineRetailV2.Report.Sales.repInvTax rep_InvTax = new OfflineRetailV2.Report.Sales.repInvTax();
                    OfflineRetailV2.Report.Sales.repPPInvTendering rep_InvTendering = new OfflineRetailV2.Report.Sales.repPPInvTendering();
                    OfflineRetailV2.Report.Sales.repInvGC rep_InvGC = new OfflineRetailV2.Report.Sales.repInvGC();
                    OfflineRetailV2.Report.Sales.repInvMGC rep_InvMGC = new OfflineRetailV2.Report.Sales.repInvMGC();
                    OfflineRetailV2.Report.Sales.repInvCC rep_InvCC = new OfflineRetailV2.Report.Sales.repInvCC();
                    OfflineRetailV2.Report.Sales.repInvHA rep_InvHA = new OfflineRetailV2.Report.Sales.repInvHA();
                    OfflineRetailV2.Report.Sales.repInvSC rep_InvSC = new OfflineRetailV2.Report.Sales.repInvSC();

                    OfflineRetailV2.Report.Sales.repInvSign rep_InvSign = new OfflineRetailV2.Report.Sales.repInvSign();
                    OfflineRetailV2.Report.Sales.repInvCoupon rep_InvCoupon = new OfflineRetailV2.Report.Sales.repInvCoupon();
                    rep_InvMain.rReprint.Text = "";
                    if (Settings.ReceiptFooter == "")
                    {
                        rep_InvMain.rReportFooter.HeightF = 1.0f;
                        rep_InvMain.rReportFooter.LocationF = new PointF(8, 2);
                        rep_InvMain.xrBarCode.LocationF = new PointF(8, 5);
                        rep_InvMain.rCopy.LocationF = new PointF(567, 5);

                        rep_InvMain.xrShape1.LocationF = new PointF(581, 25);
                        rep_InvMain.xrPageInfo2.LocationF = new PointF(594, 25);
                        rep_InvMain.xrPageInfo1.LocationF = new PointF(681, 25);
                        rep_InvMain.xrShape2.LocationF = new PointF(725, 25);

                        rep_InvMain.ReportFooter.Height = 60;
                        rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                    }
                    else
                    {
                        rep_InvMain.ReportFooter.Height = 91;
                        rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;

                    }

                    if (blCardPayment)
                    {
                        if (blCardPayment)
                        {
                            int prm = 0;
                            PosDataObject.POS obcc0 = new PosDataObject.POS();
                            obcc0.Connection = SystemVariables.Conn;
                            prm = obcc0.GetTranIDFromInvoiceID(intINV);
                            DataTable ccdtbl1 = new DataTable();
                            PosDataObject.POS obcc1 = new PosDataObject.POS();
                            obcc1.Connection = SystemVariables.Conn;
                            ccdtbl1 = obcc1.FetchCardData(prm);
                            foreach (DataRow ds in ccdtbl1.Rows)
                            {
                                if ((ds["CardType"].ToString() == "Credit") || (ds["CardType"].ToString() == "Credit Card")) CardType = "Credit";
                                if ((ds["CardType"].ToString() == "Debit") || (ds["CardType"].ToString() == "Debit Card")) CardType = "Debit";
                                if (ds["CardType"].ToString() == "Mercury Gift Card") CardType = "Mercury";
                                if (ds["CardType"].ToString() == "Precidia Gift Card") CardType = "Precidia";
                                if (ds["CardType"].ToString() == "Datacap Gift Card") CardType = "Datacap";
                                if (ds["CardType"].ToString() == "POSLink Gift Card") CardType = "POSLink";
                                if (ds["CardType"].ToString() == "EBT") CardType = "EBT";

                                break;
                            }
                            rep_InvMain.subrepCC.ReportSource = rep_InvCC;
                            rep_InvCC.Report.DataSource = ccdtbl1;
                            rep_InvCC.rRef.Text = intINV.ToString();

                            rep_InvCC.rAct.DataBindings.Add("Text", ccdtbl1, "RefCardAct");
                            rep_InvCC.rCard.DataBindings.Add("Text", ccdtbl1, "RefCardLogo");

                            rep_InvCC.rApprCode.DataBindings.Add("Text", ccdtbl1, "RefCardAuthID");
                            rep_InvCC.rTranID.DataBindings.Add("Text", ccdtbl1, "RefCardTranID");
                            rep_InvCC.rAmt.DataBindings.Add("Text", ccdtbl1, "RefCardAuthAmount");


                            rep_InvCC.rsign1.Visible = true;
                            rep_InvCC.rsign2.Visible = true;

                            rep_InvCC.rsign3.Visible = true;
                            rep_InvCC.rTxt.Visible = true;
                            rep_InvMain.rCopy.Visible = true;
                            rep_InvMain.rCopy.Text = Properties.Resources.CARDHOLDER_COPY;

                            if ((CardType == "Credit") || (CardType == "Credit Card"))
                            {
                                rep_InvCC.rTxt.Text = Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT_ACCORDING_TO_CARD_ISSUER_AGREEMENT;
                                rep_InvCC.rlbl.Text = Properties.Resources.CREDIT_PURCHASE;
                            }
                            if ((CardType == "Debit") || (CardType == "Debit Card"))
                            {
                                rep_InvCC.rsign1.Visible = false;
                                rep_InvCC.rsign2.Visible = false;
                                rep_InvCC.rsign3.Visible = false;
                                rep_InvCC.rTxt.Text = Properties.Resources.PIN_USED + "\n" + Properties.Resources.SIGNATURE_NOT_REQUIRED;
                                rep_InvCC.rlbl.Text = Properties.Resources.DEBIT_PURCHASE;
                            }
                        }
                    }
                    rep_InvMain.subrepH1.ReportSource = rep_InvHeader1;
                    rep_InvHeader1.Report.DataSource = dtbl;
                    rep_InvHeader1.rReprint.Text = "";
                    GeneralFunctions.MakeReportWatermark(rep_InvMain);
                    rep_InvHeader1.rReportHeaderCompany.Text = Settings.ReceiptHeader_Company;
                    rep_InvHeader1.rReportHeader.Text = Settings.ReceiptHeader_Address;
                    rep_InvHeader1.rTraining.Visible = Settings.PrintTrainingMode == "Y";
                    if (strservice == "Sales") rep_InvHeader1.rRefundCaption.Visible = dblOrderTotal < 0;
                    int WO = FetchWorkorderNo(intINV);

                    rep_InvHeader1.rType.Text = "Gift Aid Receipt";



                    rep_InvHeader1.xrTableCell2.Text = "Payment Ref ID";
                    rep_InvHeader1.xrTableCell4.Text = "Date";
                    rep_InvHeader1.rOrderNo.Text = intINV.ToString();
                    if (Settings.PrintLogoInReceipt == "Y")
                    {
                        if (!boolnulllogo) rep_InvHeader1.rPic.DataBindings.Add("Image", dtbl, "Logo");
                    }
                    rep_InvHeader1.rOrderDate.DataBindings.Add("Text", dtbl, "TransDate");

                    rep_InvMain.xrBarCode.Text = intINV.ToString();


                    PosDataObject.POS objPOS2 = new PosDataObject.POS();
                    objPOS2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dtbl1 = objPOS2.FetchGiftAidDetails(intINV, Settings.TaxInclusive, false);

                    string c_name = "";
                    string c_address = "";
                    string c_total = "";


                    foreach(DataRow dr in dtbl1.Rows)
                    {
                        c_name = dr["DiscountText"].ToString();
                        c_address = dr["Notes"].ToString();
                        c_total = dr["TotalPrice"].ToString();
                    }

                    rep_InvMain.subrepH2.ReportSource = rep_InvHeader2;
                    rep_InvHeader2.rlCustName.Text = "Name";
                    rep_InvHeader2.rCustName.Text = c_name;
                    if (c_address.Trim() != "")
                    {
                        rep_InvHeader2.rlCustID.Text = "Address";
                        rep_InvHeader2.rCustID.Text = c_address;
                    }
                    else
                    {
                        rep_InvHeader2.rlCustID.Text = "";
                    }

                    rep_InvHeader2.rlCompany.Text = "";

                    rep_InvMain.subrepLine.ReportSource = rep_InvLine;
                    rep_InvLine.DecimalPlace = Settings.DecimalPlace;
                    rep_InvLine.rlIem.Text = "Gift Aid";
                    rep_InvLine.rlTotal.Text = c_total;








                    PosDataObject.POS objPOS4 = new PosDataObject.POS();
                    objPOS4.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    dtbl3 = objPOS4.FetchInvoiceTender(intTranNo);
                    dtbl3 = RearrangeTenderForCashBack(intTranNo, dtbl3);

                    bool boolHATender = false;
                    bool boolSCrdtTender = false;

                    double dblTenderAmt = 0;
                    int TenderCount = 0;
                    TenderCount = dtbl3.Rows.Count;
                    foreach (DataRow dr1 in dtbl3.Rows)
                    {
                        if (dr1["DisplayAs"].ToString() == "Debit Card Total") continue;
                        dblTenderAmt = dblTenderAmt + GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                        if (dr1["Name"].ToString() == "House Account") boolHATender = true;
                        if (dr1["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                    }

                    rep_InvMain.subrepTender.ReportSource = rep_InvTendering;
                    rep_InvTendering.SubTotal.Text = "Total";
                    rep_InvTendering.Report.DataSource = dtbl3;
                    rep_InvTendering.DecimalPlace = Settings.DecimalPlace;

                    if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                    {
                        PosDataObject.POS obcc99 = new PosDataObject.POS();
                        obcc99.Connection = SystemVariables.Conn;
                        double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intINV, intCID);
                        rep_InvMain.subrepHA.ReportSource = rep_InvHA;
                        rep_InvHA.DecimalPlace = Settings.DecimalPlace;
                        rep_InvHA.rAmt.Text = dval.ToString();
                    }

                    if (boolSCrdtTender)
                    {
                        PosDataObject.POS objscrtbal = new PosDataObject.POS();
                        objscrtbal.Connection = SystemVariables.Conn;
                        double dval = objscrtbal.GetCustomerStoreCreditBalance(intCID);
                        rep_InvMain.subrepSCrdt.ReportSource = rep_InvSC;
                        rep_InvSC.DecimalPlace = Settings.DecimalPlace;
                        rep_InvSC.rAmt.Text = dval.ToString();
                    }

                    if (TenderCount == 0) rep_InvTendering.lbTenderText.Text = "";

                    if (Settings.ShowFeesInReceipt == "Y")
                    {

                        bool bfdata = false;
                        bool bftx = false;
                        DataTable dFees = FetchInvFees(intINV);
                        if (dblFees + dblFeesCoupon != 0)
                        {
                            if (dFees.Rows.Count == 1) rep_InvTendering.lbFees.Text = dFees.Rows[0]["FeesName"].ToString();
                            rep_InvTendering.rFees.Text = (dblFees + dblFeesCoupon).ToString();
                            rep_InvTendering.rFees.Visible = true;
                            rep_InvTendering.lbFees.Visible = true;
                        }
                        else
                        {
                            bfdata = true;
                        }

                        if (dblFeesTax + dblFeesCouponTax != 0)
                        {
                            if (dFees.Rows.Count == 1) rep_InvTendering.lbFeeTx.Text = dFees.Rows[0]["FeesName"].ToString() + " " + "Tax";
                            rep_InvTendering.rFeeTx.Text = (dblFeesTax + dblFeesCouponTax).ToString();
                            rep_InvTendering.rFeeTx.Visible = true;
                            rep_InvTendering.lbFeeTx.Visible = true;
                        }
                        else
                        {
                            bftx = true;
                        }
                        if ((bfdata) && (bftx))
                        {
                            rep_InvTendering.ReportHeader.Visible = false;
                        }
                    }

                    if ((intHeaderStatus == 15) && (calcrent == "Y")) rep_InvTendering.rTotal.Text = dblRentDeposit.ToString();
                    else if ((intHeaderStatus == 15) && (calcrent == "N")) rep_InvTendering.rTotal.Text = (dblOrderTotal + dblRentDeposit).ToString();
                    else rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                    //rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                    rep_InvTendering.rTenderName.DataBindings.Add("Text", dtbl3, "DisplayAs");
                    rep_InvTendering.rTenderAmt.DataBindings.Add("Text", dtbl3, "Amount");

                    rep_InvTendering.rlbAdvance.Text = "";
                    rep_InvTendering.rAdvance.Text = "";
                    rep_InvTendering.rlbDue.Text = "";
                    rep_InvTendering.rDue.Text = "";

                    rep_InvTendering.rtr1.HeightF = 1.0f;
                    rep_InvTendering.rtr2.HeightF = 1.0f;
                    rep_InvTendering.rtbl.HeightF = 55.0f;
                    rep_InvTendering.PageHeader.HeightF = 55.0f;

                    double EffectiveTotal = 0;
                    if ((intHeaderStatus == 15) && (calcrent == "Y")) EffectiveTotal = dblRentDeposit;
                    else if ((intHeaderStatus == 15) && (calcrent == "N")) EffectiveTotal = dblOrderTotal + dblRentDeposit;
                    else if (intHeaderStatus == 17) EffectiveTotal = dblRepairAdvanceAmount;
                    else if (intHeaderStatus == 18) EffectiveTotal = dblRepairAmount - dblRepairAdvanceAmount;
                    else EffectiveTotal = dblOrderTotal;

                    if (dblTenderAmt != EffectiveTotal)
                    {
                        rep_InvTendering.ChangeDue = true;
                        rep_InvTendering.ReportFooter.Visible = true;
                        rep_InvTendering.rChangeDueText.Text = Properties.Resources.Change;
                        rep_InvTendering.rChangeDue.Text = Convert.ToString(dblTenderAmt - EffectiveTotal);
                    }
                    else
                    {
                        rep_InvTendering.ChangeDue = false;
                        rep_InvTendering.ReportFooter.Visible = false;
                    }

                    if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                    {
                        //rep_InvTendering.ChangeDue = false;
                        //rep_InvTendering.ReportFooter.Visibility=Visibility.Collapsed;
                    }

                    if (Settings.POSShowGiftCertBalance == "Y")
                    {
                        PosDataObject.POS objPOS5 = new PosDataObject.POS();
                        objPOS5.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dtbl4 = objPOS5.ActiveGiftCert(intINV, Settings.CentralExportImport, Settings.StoreCode);
                        if (dtbl4.Rows.Count > 0)
                        {
                            rep_InvMain.subrepGC.ReportSource = rep_InvGC;
                            rep_InvGC.Report.DataSource = dtbl4;
                            rep_InvGC.DecimalPlace = Settings.DecimalPlace;
                            rep_InvGC.rGCHeader.Text = Properties.Resources.Gift_Cert__with_balance_as_on__ + DateTime.Today.Date.ToShortDateString();
                            rep_InvGC.rGCName.DataBindings.Add("Text", dtbl4, "GC");
                            rep_InvGC.rGCAmt.DataBindings.Add("Text", dtbl4, "GCAMT");
                        }
                    }

                    // EBT Balance on Receipt

                    PosDataObject.POS objPOS87 = new PosDataObject.POS();
                    objPOS87.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    DataTable dtblEBT = objPOS87.FetchEBTBalanceFromReceipt(intINV);
                    if (dtblEBT.Rows.Count > 0)
                    {
                        OfflineRetailV2.Report.Sales.repInvEBT rep_InvEBT = new OfflineRetailV2.Report.Sales.repInvEBT();
                        rep_InvMain.subrepEBT.ReportSource = rep_InvEBT;
                        rep_InvEBT.Report.DataSource = dtblEBT;
                        rep_InvEBT.DecimalPlace = Settings.DecimalPlace;

                        rep_InvEBT.rEBTCard.DataBindings.Add("Text", dtblEBT, "CardNo");
                        rep_InvEBT.rEBTBal.DataBindings.Add("Text", dtblEBT, "CardBalance");
                    }

                    int prmmgc = 0;
                    PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                    obcc01mgc.Connection = SystemVariables.Conn;
                    prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intINV);
                    DataTable ccdtbl11mgc = new DataTable();
                    PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                    obcc11mgc.Connection = SystemVariables.Conn;
                    ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                    if (ccdtbl11mgc.Rows.Count > 0)
                    {
                        rep_InvMain.subrepMGC.ReportSource = rep_InvMGC;
                        rep_InvMGC.Report.DataSource = ccdtbl11mgc;
                        rep_InvMGC.DecimalPlace = Settings.DecimalPlace;
                        rep_InvMGC.rGCName.DataBindings.Add("Text", ccdtbl11mgc, "RefCardAct");
                        rep_InvMGC.rGCAmt.DataBindings.Add("Text", ccdtbl11mgc, "RefCardBalance");
                    }

                    if (Settings.POSPrintInvoice == 0)
                    {
                        //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
                        try
                        {
                            if (Settings.ReportPrinterName != "") rep_InvMain.PrinterName = Settings.ReportPrinterName;
                            rep_InvMain.CreateDocument();
                            rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                            rep_InvMain.PrintingSystem.ShowPrintStatusDialog = false;

                            //rep_InvMain.ShowPreviewDialog();

                            DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                            window.PreviewControl.DocumentSource = rep_InvMain;
                            window.ShowDialog();

                        }
                        finally
                        {
                            rep_InvMain.Dispose();
                            rep_InvHeader1.Dispose();
                            rep_InvHeader2.Dispose();
                            rep_InvLine.Dispose();
                            rep_InvSubtotal.Dispose();
                            rep_InvTax.Dispose();
                            rep_InvTendering.Dispose();
                            rep_InvGC.Dispose();
                            rep_InvHA.Dispose();
                            rep_InvSign.Dispose();
                            rep_InvCoupon.Dispose();

                            dtbl.Dispose();
                            dtbl1.Dispose();
                            dtbl2.Dispose();
                            dtbl3.Dispose();
                            dtbl4.Dispose();
                            dtbl5.Dispose();
                            ccdtbl11mgc.Dispose();
                        }
                    }

                    if (Settings.POSPrintInvoice == 1)
                    {
                        try
                        {
                            rep_InvMain.CreateDocument();
                            rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                            rep_InvMain.PrinterName = Settings.ReceiptPrinterName;
                            GeneralFunctions.PrintReport(rep_InvMain);
                        }
                        catch
                        {
                        }
                        finally
                        {
                            rep_InvMain.Dispose();
                            rep_InvHeader1.Dispose();
                            rep_InvHeader2.Dispose();
                            rep_InvLine.Dispose();
                            rep_InvSubtotal.Dispose();
                            rep_InvTax.Dispose();
                            rep_InvTendering.Dispose();
                            rep_InvGC.Dispose();
                            rep_InvHA.Dispose();
                            rep_InvCoupon.Dispose();
                            rep_InvSign.Dispose();
                            dtbl.Dispose();
                            dtbl1.Dispose();
                            dtbl2.Dispose();
                            dtbl3.Dispose();
                            dtbl4.Dispose();
                            dtbl5.Dispose();
                        }
                    }


                    


                }
                else
                {
                    if (Settings.PreprintedReceipt == "N") // Not Preprinted format
                    {

                        DataTable dtbl = new DataTable();
                        PosDataObject.POS objPOS1 = new PosDataObject.POS();
                        objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dtbl = objPOS1.FetchInvoiceHeader(intINV, Settings.StoreCode);

                        DataTable dlogo = new DataTable();
                        objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dlogo = objPOS1.FetchStoreLogo();
                        bool boolnulllogo = false;
                        foreach (DataRow drl1 in dtbl.Rows)
                        {
                            foreach (DataRow drl2 in dlogo.Rows)
                            {
                                if (drl2["logo"] == null) boolnulllogo = true;
                                drl1["Logo"] = drl2["logo"];
                            }
                        }

                        int intTranNo = 0;
                        double dblOrderTotal = 0;
                        double dblOrderSubtotal = 0;
                        double dblDiscount = 0;
                        double dblCoupon = 0;
                        double dblTax = 0;
                        double dblSurcharge = 0;
                        int intCID = 0;
                        string strDiscountReason = "";
                        double dblTax1 = 0;
                        double dblTax2 = 0;
                        double dblTax3 = 0;
                        string strTaxNM1 = "";
                        string strTaxNM2 = "";
                        string strTaxNM3 = "";
                        string strservice = "";
                        int intHeaderStatus = 0;
                        double dblRentDeposit = 0;
                        double dblRentReturnDeposit = 0;
                        double dblRepairAmount = 0;
                        double dblRepairAdvanceAmount = 0;
                        string strRepairDeliveryDate = "";
                        string calcrent = "N";

                        double dblFees = 0;
                        double dblFeesTax = 0;

                        double dblFeesCoupon = 0;
                        double dblFeesCouponTax = 0;

                        string strDTaxNM = "";
                        double dblDTax = 0;

                        string strCustomerDOB = "";

                        foreach (DataRow dr in dtbl.Rows)
                        {
                            intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                            intCID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                            dblOrderTotal = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                            dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                            dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                            dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                            dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                            dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                            dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                            strTaxNM1 = dr["TaxNM1"].ToString();
                            strTaxNM2 = dr["TaxNM2"].ToString();
                            strTaxNM3 = dr["TaxNM3"].ToString();

                            dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                            dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                            dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                            dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                            strDiscountReason = dr["DiscountReason"].ToString();
                            strservice = dr["ServiceType"].ToString();
                            intHeaderStatus = GeneralFunctions.fnInt32(dr["Status"].ToString());
                            dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                            dblRepairAmount = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                            dblRepairAdvanceAmount = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                            if (dr["RepairDeliveryDate"].ToString() != "") strRepairDeliveryDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToShortDateString();
                            calcrent = dr["IsRentCalculated"].ToString();

                            strDTaxNM = dr["DTaxName"].ToString();
                            dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                            if (Settings.POSIDRequired == "Y") strCustomerDOB = dr["CustomerDOB"].ToString();
                        }
                        if (intHeaderStatus == 17) dblOrderTotal = dblRepairAmount;
                        blDatacapManualEntry = IsDatacapManual(intTranNo);
                        blCardPayment = IsCardPayment(intTranNo);
                        blHouseAccountPayment = IsHAPayment(intTranNo);
                        blFSTender = IsFSTendering(intTranNo);
                        if (blCardPayment)
                        {
                            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2))
                            {
                                bool b1 = IsMercuryCardPayment(intTranNo);
                                if (b1)
                                {
                                    double amt = GetMercuryCardPaymentAmount(intTranNo);
                                    if (amt < Settings.MercurySignAmount) MercuryCardPaymentCheck = true;
                                }
                            }
                        }


                        blRepairPrint = (strservice == "Repair") ? true : false;

                        DataTable dtbl1 = new DataTable();
                        DataTable dtbl2 = new DataTable();
                        DataTable dtbl3 = new DataTable();
                        DataTable dtbl4 = new DataTable();
                        DataTable dtbl5 = new DataTable();

                        OfflineRetailV2.Report.Sales.repInvMain rep_InvMain = new OfflineRetailV2.Report.Sales.repInvMain();
                        OfflineRetailV2.Report.Sales.repInvHeader1 rep_InvHeader1 = new OfflineRetailV2.Report.Sales.repInvHeader1();
                        OfflineRetailV2.Report.Sales.repInvHeader2 rep_InvHeader2 = new OfflineRetailV2.Report.Sales.repInvHeader2();
                        OfflineRetailV2.Report.Sales.repInvLine rep_InvLine = new OfflineRetailV2.Report.Sales.repInvLine();
                        OfflineRetailV2.Report.Sales.repInvSubtotal rep_InvSubtotal = new OfflineRetailV2.Report.Sales.repInvSubtotal();
                        OfflineRetailV2.Report.Sales.repInvRentLine rep_InvRentLine = new OfflineRetailV2.Report.Sales.repInvRentLine();
                        OfflineRetailV2.Report.Sales.repInvRentSubTotal rep_InvRentSubTotal = new OfflineRetailV2.Report.Sales.repInvRentSubTotal();
                        OfflineRetailV2.Report.Sales.repInvRentReturnLine rep_InvRentReturnLine = new OfflineRetailV2.Report.Sales.repInvRentReturnLine();
                        OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal rep_InvRentReturnSubTotal = new OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal();
                        OfflineRetailV2.Report.Sales.repInvTax rep_InvTax = new OfflineRetailV2.Report.Sales.repInvTax();
                        OfflineRetailV2.Report.Sales.repPPInvTendering rep_InvTendering = new OfflineRetailV2.Report.Sales.repPPInvTendering();
                        OfflineRetailV2.Report.Sales.repInvGC rep_InvGC = new OfflineRetailV2.Report.Sales.repInvGC();
                        OfflineRetailV2.Report.Sales.repInvMGC rep_InvMGC = new OfflineRetailV2.Report.Sales.repInvMGC();
                        OfflineRetailV2.Report.Sales.repInvCC rep_InvCC = new OfflineRetailV2.Report.Sales.repInvCC();
                        OfflineRetailV2.Report.Sales.repInvHA rep_InvHA = new OfflineRetailV2.Report.Sales.repInvHA();
                        OfflineRetailV2.Report.Sales.repInvSC rep_InvSC = new OfflineRetailV2.Report.Sales.repInvSC();

                        OfflineRetailV2.Report.Sales.repInvSign rep_InvSign = new OfflineRetailV2.Report.Sales.repInvSign();
                        OfflineRetailV2.Report.Sales.repInvCoupon rep_InvCoupon = new OfflineRetailV2.Report.Sales.repInvCoupon();
                        rep_InvMain.rReprint.Text = "";
                        if (Settings.ReceiptFooter == "")
                        {
                            rep_InvMain.rReportFooter.HeightF = 1.0f;
                            rep_InvMain.rReportFooter.LocationF = new PointF(8, 2);
                            rep_InvMain.xrBarCode.LocationF = new PointF(8, 5);
                            rep_InvMain.rCopy.LocationF = new PointF(567, 5);

                            rep_InvMain.xrShape1.LocationF = new PointF(581, 25);
                            rep_InvMain.xrPageInfo2.LocationF = new PointF(594, 25);
                            rep_InvMain.xrPageInfo1.LocationF = new PointF(681, 25);
                            rep_InvMain.xrShape2.LocationF = new PointF(725, 25);

                            rep_InvMain.ReportFooter.Height = 60;
                            rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                        }
                        else
                        {
                            rep_InvMain.ReportFooter.Height = 91;
                            rep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;

                        }

                        if (blCardPayment)
                        {
                            if (blCardPayment)
                            {
                                int prm = 0;
                                PosDataObject.POS obcc0 = new PosDataObject.POS();
                                obcc0.Connection = SystemVariables.Conn;
                                prm = obcc0.GetTranIDFromInvoiceID(intINV);
                                DataTable ccdtbl1 = new DataTable();
                                PosDataObject.POS obcc1 = new PosDataObject.POS();
                                obcc1.Connection = SystemVariables.Conn;
                                ccdtbl1 = obcc1.FetchCardData(prm);
                                foreach (DataRow ds in ccdtbl1.Rows)
                                {
                                    if ((ds["CardType"].ToString() == "Credit") || (ds["CardType"].ToString() == "Credit Card")) CardType = "Credit";
                                    if ((ds["CardType"].ToString() == "Debit") || (ds["CardType"].ToString() == "Debit Card")) CardType = "Debit";
                                    if (ds["CardType"].ToString() == "Mercury Gift Card") CardType = "Mercury";
                                    if (ds["CardType"].ToString() == "Precidia Gift Card") CardType = "Precidia";
                                    if (ds["CardType"].ToString() == "Datacap Gift Card") CardType = "Datacap";
                                    if (ds["CardType"].ToString() == "POSLink Gift Card") CardType = "POSLink";
                                    if (ds["CardType"].ToString() == "EBT") CardType = "EBT";

                                    break;
                                }
                                rep_InvMain.subrepCC.ReportSource = rep_InvCC;
                                rep_InvCC.Report.DataSource = ccdtbl1;
                                rep_InvCC.rRef.Text = intINV.ToString();

                                rep_InvCC.rAct.DataBindings.Add("Text", ccdtbl1, "RefCardAct");
                                rep_InvCC.rCard.DataBindings.Add("Text", ccdtbl1, "RefCardLogo");

                                rep_InvCC.rApprCode.DataBindings.Add("Text", ccdtbl1, "RefCardAuthID");
                                rep_InvCC.rTranID.DataBindings.Add("Text", ccdtbl1, "RefCardTranID");
                                rep_InvCC.rAmt.DataBindings.Add("Text", ccdtbl1, "RefCardAuthAmount");


                                rep_InvCC.rsign1.Visible = true;
                                rep_InvCC.rsign2.Visible = true;

                                rep_InvCC.rsign3.Visible = true;
                                rep_InvCC.rTxt.Visible = true;
                                rep_InvMain.rCopy.Visible = true;
                                rep_InvMain.rCopy.Text = Properties.Resources.CARDHOLDER_COPY;

                                if ((CardType == "Credit") || (CardType == "Credit Card"))
                                {
                                    rep_InvCC.rTxt.Text = Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT_ACCORDING_TO_CARD_ISSUER_AGREEMENT;
                                    rep_InvCC.rlbl.Text = Properties.Resources.CREDIT_PURCHASE;
                                }
                                if ((CardType == "Debit") || (CardType == "Debit Card"))
                                {
                                    rep_InvCC.rsign1.Visible = false;
                                    rep_InvCC.rsign2.Visible = false;
                                    rep_InvCC.rsign3.Visible = false;
                                    rep_InvCC.rTxt.Text = Properties.Resources.PIN_USED + "\n" + Properties.Resources.SIGNATURE_NOT_REQUIRED;
                                    rep_InvCC.rlbl.Text = Properties.Resources.DEBIT_PURCHASE;
                                }
                            }
                        }
                        rep_InvMain.subrepH1.ReportSource = rep_InvHeader1;
                        rep_InvHeader1.Report.DataSource = dtbl;
                        rep_InvHeader1.rReprint.Text = "";
                        GeneralFunctions.MakeReportWatermark(rep_InvMain);
                        rep_InvHeader1.rReportHeaderCompany.Text = Settings.ReceiptHeader_Company;
                        rep_InvHeader1.rReportHeader.Text = Settings.ReceiptHeader_Address;
                        rep_InvHeader1.rTraining.Visible = Settings.PrintTrainingMode == "Y";
                        if (strservice == "Sales") rep_InvHeader1.rRefundCaption.Visible = dblOrderTotal < 0;
                        int WO = FetchWorkorderNo(intINV);
                        if (WO != 0)
                        {
                            rep_InvHeader1.rType.Text = Properties.Resources.Work_Order__ + WO.ToString() + "    " + Properties.Resources.Date + " : " + GeneralFunctions.fnDate(FetchWorkorderDate(intINV)).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                        }
                        else
                        {
                            rep_InvHeader1.rType.Text = "";
                        }

                        if (strservice == "Rent")
                        {
                            if (intHeaderStatus == 15) rep_InvHeader1.rType.Text = Properties.Resources.Rent_Issued;
                            if (intHeaderStatus == 16) rep_InvHeader1.rType.Text = Properties.Resources.Rent_Item_Returned;
                        }

                        int RprParent = 0;
                        if (strservice == "Repair")
                        {
                            if (intHeaderStatus == 17)
                            {
                                if (strRepairDeliveryDate != "") rep_InvHeader1.rType.Text = Properties.Resources.Repair_In + "      " + Properties.Resources.Expected_Delivety_Date__ + " : " + strRepairDeliveryDate;
                                else rep_InvHeader1.rType.Text = Properties.Resources.Repair_In;
                            }
                            if (intHeaderStatus == 18)
                            {
                                rep_InvHeader1.rType.Text = Properties.Resources.Repair_Delivered;
                                RprParent = FetchRepairParentID(intINV);
                            }
                        }
                        rep_InvHeader1.rOrderNo.Text = intINV.ToString();
                        if (Settings.PrintLogoInReceipt == "Y")
                        {
                            if (!boolnulllogo) rep_InvHeader1.rPic.DataBindings.Add("Image", dtbl, "Logo");
                        }
                        rep_InvHeader1.rOrderDate.DataBindings.Add("Text", dtbl, "TransDate");

                        rep_InvMain.xrBarCode.Text = intINV.ToString();

                        if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                        {
                            rep_InvHeader1.rOrderDate.DataBindings.Add("Text", dtbl, "RepairDateIn");
                        }


                        if (intCID > 0)
                        {
                            rep_InvMain.subrepH2.ReportSource = rep_InvHeader2;
                            rep_InvHeader2.Report.DataSource = dtbl;
                            rep_InvHeader2.rCustID.DataBindings.Add("Text", dtbl, "CustID");
                            rep_InvHeader2.rCustName.DataBindings.Add("Text", dtbl, "CustName");
                            rep_InvHeader2.rCompany.DataBindings.Add("Text", dtbl, "CustCompany");

                            if (intHeaderStatus == 3)
                            {
                                if (strCustomerDOB != "")
                                {
                                    rep_InvHeader2.rlCustDOB.Text = Properties.Resources.Date_of_Birth;
                                    rep_InvHeader2.rCustDOB.Text = GeneralFunctions.fnDate(strCustomerDOB).ToString(SystemVariables.DateFormat);
                                }
                            }

                            if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                            {
                                rep_InvHeader2.rlCustID.Text = Properties.Resources.Ph_;
                                rep_InvHeader2.rCustID.DataBindings.Add("Text", dtbl, "CustMobile");

                                rep_InvHeader2.rlCompany.DataBindings.Add("Text", dtbl, "RepairItemName");
                                rep_InvHeader2.rCompany.DataBindings.Add("Text", dtbl, "RepairItemSlNo");
                            }
                        }
                        else
                        {
                            if (intHeaderStatus == 3)
                            {
                                if (strCustomerDOB != "")
                                {
                                    rep_InvMain.subrepH2.ReportSource = rep_InvHeader2;
                                    rep_InvHeader2.Report.DataSource = dtbl;
                                    rep_InvHeader2.rCustName.Text = "";
                                    rep_InvHeader2.rCustID.Text = "";
                                    rep_InvHeader2.rCompany.Text = "";
                                    rep_InvHeader2.rlCustName.Text = "";
                                    rep_InvHeader2.rlCustID.Text = "";
                                    rep_InvHeader2.rlCompany.Text = "";

                                    if (intHeaderStatus == 3)
                                    {
                                        if (strCustomerDOB != "")
                                        {
                                            rep_InvHeader2.rlCustDOB.Text = Properties.Resources.Date_of_Birth;
                                            rep_InvHeader2.rCustDOB.Text = GeneralFunctions.fnDate(strCustomerDOB).ToString(SystemVariables.DateFormat);
                                        }
                                    }
                                }
                            }
                        }

                        PosDataObject.POS objPOS2 = new PosDataObject.POS();
                        objPOS2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        if (intHeaderStatus != 18) dtbl1 = objPOS2.FetchInvoiceDetails1(intINV, dblOrderTotal < 0 ? true : false, Settings.TaxInclusive);
                        else dtbl1 = objPOS2.FetchInvoiceDetails1(RprParent, dblOrderTotal < 0 ? true : false, Settings.TaxInclusive);
                        RearrangeForTaggedItemInInvoice(dtbl1);
                        RearrangeForLineDisplay(dtbl1);
                        if ((intHeaderStatus == 16) && (calcrent == "Y"))
                        {
                            foreach (DataRow d in dtbl1.Rows)
                            {
                                d["Qty"] = -GeneralFunctions.fnDouble(d["Qty"].ToString());
                                d["TotalPrice"] = -GeneralFunctions.fnDouble(d["TotalPrice"].ToString());
                            }
                        }
                        if (strservice == "Rent")
                        {
                            if (intHeaderStatus == 15) // issue
                            {
                                rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                                rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                rep_InvRentLine.Report.DataSource = dtbl1;
                                rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                                rep_InvLine.rManualWeight.DataBindings.Add("Text", dtbl1, "ExtraValue1");

                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    rep_InvRentLine.rFeesTxt.Visible = true;
                                    rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                }
                                else
                                {
                                    rep_InvRentLine.rFeesTxt.Visible = false;
                                }
                            }
                            if (intHeaderStatus == 16) // return
                            {
                                if (calcrent == "N")
                                {
                                    rep_InvMain.subrepLine.ReportSource = rep_InvRentReturnLine;
                                    rep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                                    rep_InvRentReturnLine.Report.DataSource = dtbl1;
                                    rep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                    rep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                    rep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                    rep_InvRentReturnLine.rlAmt.Visible = false;
                                    rep_InvRentReturnLine.xrTableCell2.Visible = false;
                                }
                                if (calcrent == "Y")
                                {
                                    rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                                    rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                    rep_InvRentLine.Report.DataSource = dtbl1;
                                    rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                    rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                    rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                    rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                    rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                    rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                    rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                    rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                                    if (Settings.ShowFeesInReceipt == "Y")
                                    {
                                        rep_InvRentLine.rFeesTxt.Visible = true;
                                        rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                    }
                                    else
                                    {
                                        rep_InvRentLine.rFeesTxt.Visible = false;
                                    }
                                }
                            }
                        }
                        else if (strservice == "Repair")
                        {
                            if (intHeaderStatus == 17) // issue
                            {
                                rep_InvMain.subrepLine.ReportSource = rep_InvRentLine;
                                rep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                rep_InvRentLine.Report.DataSource = dtbl1;
                                rep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                rep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                rep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                rep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                rep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                rep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                rep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                rep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    rep_InvRentLine.rFeesTxt.Visible = true;
                                    rep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                }
                                else
                                {
                                    rep_InvRentLine.rFeesTxt.Visible = false;
                                }
                            }
                            if (intHeaderStatus == 18) // return
                            {
                                rep_InvMain.subrepLine.ReportSource = rep_InvRentReturnLine;
                                rep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                                rep_InvRentReturnLine.Report.DataSource = dtbl1;
                                rep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                rep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                rep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                rep_InvRentReturnLine.rlAmt.DataBindings.Add("Text", dtbl1, "TotalPrice");
                            }
                        }
                        else
                        {
                            rep_InvMain.subrepLine.ReportSource = rep_InvLine;
                            rep_InvLine.DecimalPlace = Settings.DecimalPlace;
                            rep_InvLine.Report.DataSource = dtbl1;
                            rep_InvLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                            rep_InvLine.rlSKU.DataBindings.Add("Text", dtbl1, "SKU");
                            rep_InvLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                            rep_InvLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                            rep_InvLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                            rep_InvLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                            rep_InvLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                            rep_InvLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");
                            rep_InvLine.rManualWeight.DataBindings.Add("Text", dtbl1, "ExtraValue1");
                            if (Settings.ShowFeesInReceipt == "Y")
                            {
                                rep_InvLine.rFeesTxt.Visible = true;
                                rep_InvLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                            }
                            else
                            {
                                rep_InvLine.rFeesTxt.Visible = false;
                            }
                        }

                        foreach (DataRow dr12 in dtbl1.Rows)
                        {
                            dblOrderSubtotal = dblOrderSubtotal + GeneralFunctions.fnDouble(dr12["TotalPrice"].ToString()) + GeneralFunctions.fnDouble(dr12["Discount"].ToString());
                        }

                        //dblOrderSubtotal = Settings.TaxInclusive == "N" ? dblOrderSubtotal : dblOrderSubtotal - dblTax;

                        if (strservice == "Rent")
                        {
                            if (intHeaderStatus == 15) // issue
                            {
                                rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentSubTotal;
                                rep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                                rep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                                rep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                                rep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                                rep_InvRentSubTotal.DR = strDiscountReason;
                                rep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                            }

                            if (intHeaderStatus == 16) // return
                            {
                                if (calcrent == "N")
                                {
                                    if (dblOrderTotal != 0)
                                    {
                                        rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentReturnSubTotal;
                                        rep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                        rep_InvRentReturnSubTotal.rReturnDeposit.Text = dblOrderTotal.ToString();
                                    }
                                }

                                if (calcrent == "Y")
                                {
                                    rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentReturnSubTotal;
                                    rep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                    rep_InvRentReturnSubTotal.rReturnDeposit.Text = (-dblRentDeposit).ToString();
                                }
                            }
                        }
                        else if (strservice == "Repair")
                        {
                            if (intHeaderStatus == 17) // issue
                            {
                                rep_InvMain.subrepSubtotal.ReportSource = rep_InvRentSubTotal;
                                rep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                                rep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                                rep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                                rep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                                rep_InvRentSubTotal.DR = strDiscountReason;
                                rep_InvRentSubTotal.rw1.Visible = false;
                                rep_InvRentSubTotal.rw2.Visible = false;
                                rep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                            }
                        }
                        else
                        {
                            rep_InvMain.subrepSubtotal.ReportSource = rep_InvSubtotal;
                            rep_InvSubtotal.DecimalPlace = Settings.DecimalPlace;
                            rep_InvSubtotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                            rep_InvSubtotal.rDiscount.Text = dblDiscount.ToString();
                            rep_InvSubtotal.DR = strDiscountReason;
                            rep_InvSubtotal.rTax.Text = dblTax.ToString();


                        }

                        if (dblTax != 0)
                        {
                            dtbl2.Columns.Add("Name", System.Type.GetType("System.String"));
                            dtbl2.Columns.Add("Amount", System.Type.GetType("System.String"));

                            if (dblTax1 != 0)
                            {
                                dtbl2.Rows.Add(new object[] { strTaxNM1, dblTax1.ToString() });
                            }

                            if (dblTax2 != 0)
                            {
                                dtbl2.Rows.Add(new object[] { strTaxNM2, dblTax2.ToString() });
                            }

                            if (dblTax3 != 0)
                            {
                                dtbl2.Rows.Add(new object[] { strTaxNM3, dblTax3.ToString() });
                            }

                            if (dblDTax != 0)
                            {
                                dtbl2.Rows.Add(new object[] { "Dest. Tax: " + strDTaxNM, dblDTax.ToString() });
                            }

                            rep_InvMain.subrepTax.ReportSource = rep_InvTax;
                            rep_InvTax.DecimalPlace = Settings.DecimalPlace;

                            rep_InvTax.Report.DataSource = dtbl2;
                            rep_InvTax.rDTax1.DataBindings.Add("Text", dtbl2, "Name");
                            rep_InvTax.rDTax2.DataBindings.Add("Text", dtbl2, "Amount");
                        }

                        PosDataObject.POS objPOS23 = new PosDataObject.POS();
                        objPOS23.Connection = new SqlConnection(SystemVariables.ConnectionString);

                        if (intHeaderStatus != 18) dtbl5 = objPOS23.FetchInvoiceCoupons(intINV);
                        else dtbl5 = objPOS23.FetchInvoiceCoupons(RprParent);

                        if (dtbl5.Rows.Count > 0)
                        {
                            rep_InvMain.subrepCoupon.ReportSource = rep_InvCoupon;
                            rep_InvCoupon.DecimalPlace = Settings.DecimalPlace;
                            rep_InvCoupon.Report.DataSource = dtbl5;
                            rep_InvCoupon.rAmt.Text = dblCoupon.ToString();
                            rep_InvCoupon.rDTax1.DataBindings.Add("Text", dtbl5, "Name");
                            rep_InvCoupon.rDTax2.DataBindings.Add("Text", dtbl5, "Amount");
                        }

                        PosDataObject.POS objPOS4 = new PosDataObject.POS();
                        objPOS4.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dtbl3 = objPOS4.FetchInvoiceTender(intTranNo);
                        dtbl3 = RearrangeTenderForCashBack(intTranNo, dtbl3);

                        bool boolHATender = false;
                        bool boolSCrdtTender = false;

                        double dblTenderAmt = 0;
                        int TenderCount = 0;
                        TenderCount = dtbl3.Rows.Count;
                        foreach (DataRow dr1 in dtbl3.Rows)
                        {
                            if (dr1["DisplayAs"].ToString() == "Debit Card Total") continue;
                            dblTenderAmt = dblTenderAmt + GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                            if (dr1["Name"].ToString() == "House Account") boolHATender = true;
                            if (dr1["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                        }

                        rep_InvMain.subrepTender.ReportSource = rep_InvTendering;
                        rep_InvTendering.Report.DataSource = dtbl3;
                        rep_InvTendering.DecimalPlace = Settings.DecimalPlace;

                        if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                        {
                            PosDataObject.POS obcc99 = new PosDataObject.POS();
                            obcc99.Connection = SystemVariables.Conn;
                            double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intINV, intCID);
                            rep_InvMain.subrepHA.ReportSource = rep_InvHA;
                            rep_InvHA.DecimalPlace = Settings.DecimalPlace;
                            rep_InvHA.rAmt.Text = dval.ToString();
                        }

                        if (boolSCrdtTender)
                        {
                            PosDataObject.POS objscrtbal = new PosDataObject.POS();
                            objscrtbal.Connection = SystemVariables.Conn;
                            double dval = objscrtbal.GetCustomerStoreCreditBalance(intCID);
                            rep_InvMain.subrepSCrdt.ReportSource = rep_InvSC;
                            rep_InvSC.DecimalPlace = Settings.DecimalPlace;
                            rep_InvSC.rAmt.Text = dval.ToString();
                        }

                        if (TenderCount == 0) rep_InvTendering.lbTenderText.Text = "";

                        if (Settings.ShowFeesInReceipt == "Y")
                        {

                            bool bfdata = false;
                            bool bftx = false;
                            DataTable dFees = FetchInvFees(intINV);
                            if (dblFees + dblFeesCoupon != 0)
                            {
                                if (dFees.Rows.Count == 1) rep_InvTendering.lbFees.Text = dFees.Rows[0]["FeesName"].ToString();
                                rep_InvTendering.rFees.Text = (dblFees + dblFeesCoupon).ToString();
                                rep_InvTendering.rFees.Visible = true;
                                rep_InvTendering.lbFees.Visible = true;
                            }
                            else
                            {
                                bfdata = true;
                            }

                            if (dblFeesTax + dblFeesCouponTax != 0)
                            {
                                if (dFees.Rows.Count == 1) rep_InvTendering.lbFeeTx.Text = dFees.Rows[0]["FeesName"].ToString() + " " + "Tax";
                                rep_InvTendering.rFeeTx.Text = (dblFeesTax + dblFeesCouponTax).ToString();
                                rep_InvTendering.rFeeTx.Visible = true;
                                rep_InvTendering.lbFeeTx.Visible = true;
                            }
                            else
                            {
                                bftx = true;
                            }
                            if ((bfdata) && (bftx))
                            {
                                rep_InvTendering.ReportHeader.Visible = false;
                            }
                        }

                        if ((intHeaderStatus == 15) && (calcrent == "Y")) rep_InvTendering.rTotal.Text = dblRentDeposit.ToString();
                        else if ((intHeaderStatus == 15) && (calcrent == "N")) rep_InvTendering.rTotal.Text = (dblOrderTotal + dblRentDeposit).ToString();
                        else rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                        //rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                        rep_InvTendering.rTenderName.DataBindings.Add("Text", dtbl3, "DisplayAs");
                        rep_InvTendering.rTenderAmt.DataBindings.Add("Text", dtbl3, "Amount");

                        if (strservice == "Repair")
                        {
                            string MFooter = "";
                            if ((Settings.ReceiptFooter == "") && (Settings.ReceiptLayawayPolicy == ""))
                            {
                                rep_InvMain.ReportFooter.Height = 35;
                                rep_InvMain.rReportFooter.Text = "";
                            }
                            else
                            {
                                if (Settings.ReceiptFooter != "") MFooter = Properties.Resources.CUSTOMER_AGREEMENT_ + Settings.ReceiptFooter;
                                if (Settings.ReceiptLayawayPolicy != "")
                                {
                                    if (Settings.ReceiptFooter == "") MFooter = Properties.Resources.REPAIR_DISCLAIMER_ + Settings.ReceiptLayawayPolicy;
                                    else MFooter = MFooter + " \n " + Properties.Resources.REPAIR_DISCLAIMER_ + Settings.ReceiptLayawayPolicy;
                                }
                                rep_InvMain.ReportFooter.Height = 120;
                                rep_InvMain.rReportFooter.Text = MFooter;

                            }

                            rep_InvMain.subrepRepairSign.ReportSource = rep_InvSign;

                            if (intHeaderStatus == 17)
                            {
                                rep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                                rep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                                rep_InvTendering.rlbDue.Text = Properties.Resources.Balance_Due;
                                rep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();

                                rep_InvSign.rTxt.Text = Properties.Resources.I_AGREE_TO_PAY + " " + (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                            }
                            if (intHeaderStatus == 18)
                            {
                                if (dblRepairAdvanceAmount > 0)
                                {
                                    rep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                                    rep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                                    rep_InvTendering.rlbDue.Text = Properties.Resources.Balance_Due;
                                    rep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                                }
                                else
                                {
                                    rep_InvTendering.rlbAdvance.Text = "";
                                    rep_InvTendering.rAdvance.Text = "";
                                    rep_InvTendering.rlbDue.Text = "";
                                    rep_InvTendering.rDue.Text = "";
                                    rep_InvTendering.rtr1.HeightF = 1.0f;
                                    rep_InvTendering.rtr2.HeightF = 1.0f;
                                    rep_InvTendering.rtbl.HeightF = 55.0f;
                                    rep_InvTendering.PageHeader.HeightF = 55.0f;
                                }
                                rep_InvSign.rTxt.Text = "";
                            }
                        }
                        else
                        {
                            rep_InvTendering.rlbAdvance.Text = "";
                            rep_InvTendering.rAdvance.Text = "";
                            rep_InvTendering.rlbDue.Text = "";
                            rep_InvTendering.rDue.Text = "";

                            rep_InvTendering.rtr1.HeightF = 1.0f;
                            rep_InvTendering.rtr2.HeightF = 1.0f;
                            rep_InvTendering.rtbl.HeightF = 55.0f;
                            rep_InvTendering.PageHeader.HeightF = 55.0f;
                        }

                        double EffectiveTotal = 0;
                        if ((intHeaderStatus == 15) && (calcrent == "Y")) EffectiveTotal = dblRentDeposit;
                        else if ((intHeaderStatus == 15) && (calcrent == "N")) EffectiveTotal = dblOrderTotal + dblRentDeposit;
                        else if (intHeaderStatus == 17) EffectiveTotal = dblRepairAdvanceAmount;
                        else if (intHeaderStatus == 18) EffectiveTotal = dblRepairAmount - dblRepairAdvanceAmount;
                        else EffectiveTotal = dblOrderTotal;

                        if (dblTenderAmt != EffectiveTotal)
                        {
                            rep_InvTendering.ChangeDue = true;
                            rep_InvTendering.ReportFooter.Visible = true;
                            rep_InvTendering.rChangeDueText.Text = Properties.Resources.Change;
                            rep_InvTendering.rChangeDue.Text = Convert.ToString(dblTenderAmt - EffectiveTotal);
                        }
                        else
                        {
                            rep_InvTendering.ChangeDue = false;
                            rep_InvTendering.ReportFooter.Visible = false;
                        }

                        if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                        {
                            //rep_InvTendering.ChangeDue = false;
                            //rep_InvTendering.ReportFooter.Visibility=Visibility.Collapsed;
                        }

                        if (Settings.POSShowGiftCertBalance == "Y")
                        {
                            PosDataObject.POS objPOS5 = new PosDataObject.POS();
                            objPOS5.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            dtbl4 = objPOS5.ActiveGiftCert(intINV, Settings.CentralExportImport, Settings.StoreCode);
                            if (dtbl4.Rows.Count > 0)
                            {
                                rep_InvMain.subrepGC.ReportSource = rep_InvGC;
                                rep_InvGC.Report.DataSource = dtbl4;
                                rep_InvGC.DecimalPlace = Settings.DecimalPlace;
                                rep_InvGC.rGCHeader.Text = Properties.Resources.Gift_Cert__with_balance_as_on__ + DateTime.Today.Date.ToShortDateString();
                                rep_InvGC.rGCName.DataBindings.Add("Text", dtbl4, "GC");
                                rep_InvGC.rGCAmt.DataBindings.Add("Text", dtbl4, "GCAMT");
                            }
                        }

                        // EBT Balance on Receipt

                        PosDataObject.POS objPOS87 = new PosDataObject.POS();
                        objPOS87.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        DataTable dtblEBT = objPOS87.FetchEBTBalanceFromReceipt(intINV);
                        if (dtblEBT.Rows.Count > 0)
                        {
                            OfflineRetailV2.Report.Sales.repInvEBT rep_InvEBT = new OfflineRetailV2.Report.Sales.repInvEBT();
                            rep_InvMain.subrepEBT.ReportSource = rep_InvEBT;
                            rep_InvEBT.Report.DataSource = dtblEBT;
                            rep_InvEBT.DecimalPlace = Settings.DecimalPlace;

                            rep_InvEBT.rEBTCard.DataBindings.Add("Text", dtblEBT, "CardNo");
                            rep_InvEBT.rEBTBal.DataBindings.Add("Text", dtblEBT, "CardBalance");
                        }

                        int prmmgc = 0;
                        PosDataObject.POS obcc01mgc = new PosDataObject.POS();
                        obcc01mgc.Connection = SystemVariables.Conn;
                        prmmgc = obcc01mgc.GetTranIDFromInvoiceID(intINV);
                        DataTable ccdtbl11mgc = new DataTable();
                        PosDataObject.POS obcc11mgc = new PosDataObject.POS();
                        obcc11mgc.Connection = SystemVariables.Conn;
                        ccdtbl11mgc = obcc11mgc.FetchMercuryGiftCardData(prmmgc);

                        if (ccdtbl11mgc.Rows.Count > 0)
                        {
                            rep_InvMain.subrepMGC.ReportSource = rep_InvMGC;
                            rep_InvMGC.Report.DataSource = ccdtbl11mgc;
                            rep_InvMGC.DecimalPlace = Settings.DecimalPlace;
                            rep_InvMGC.rGCName.DataBindings.Add("Text", ccdtbl11mgc, "RefCardAct");
                            rep_InvMGC.rGCAmt.DataBindings.Add("Text", ccdtbl11mgc, "RefCardBalance");
                        }

                        if (Settings.POSPrintInvoice == 0)
                        {
                            //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
                            try
                            {
                                if (Settings.ReportPrinterName != "") rep_InvMain.PrinterName = Settings.ReportPrinterName;
                                rep_InvMain.CreateDocument();
                                rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                                rep_InvMain.PrintingSystem.ShowPrintStatusDialog = false;

                                //rep_InvMain.ShowPreviewDialog();

                                DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                                window.PreviewControl.DocumentSource = rep_InvMain;
                                window.ShowDialog();

                            }
                            finally
                            {
                                rep_InvMain.Dispose();
                                rep_InvHeader1.Dispose();
                                rep_InvHeader2.Dispose();
                                rep_InvLine.Dispose();
                                rep_InvSubtotal.Dispose();
                                rep_InvTax.Dispose();
                                rep_InvTendering.Dispose();
                                rep_InvGC.Dispose();
                                rep_InvHA.Dispose();
                                rep_InvSign.Dispose();
                                rep_InvCoupon.Dispose();

                                dtbl.Dispose();
                                dtbl1.Dispose();
                                dtbl2.Dispose();
                                dtbl3.Dispose();
                                dtbl4.Dispose();
                                dtbl5.Dispose();
                                ccdtbl11mgc.Dispose();
                            }
                        }

                        if (Settings.POSPrintInvoice == 1)
                        {
                            try
                            {
                                rep_InvMain.CreateDocument();
                                rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                                rep_InvMain.PrinterName = Settings.ReceiptPrinterName;
                                GeneralFunctions.PrintReport(rep_InvMain);
                            }
                            catch
                            {
                            }
                            finally
                            {
                                rep_InvMain.Dispose();
                                rep_InvHeader1.Dispose();
                                rep_InvHeader2.Dispose();
                                rep_InvLine.Dispose();
                                rep_InvSubtotal.Dispose();
                                rep_InvTax.Dispose();
                                rep_InvTendering.Dispose();
                                rep_InvGC.Dispose();
                                rep_InvHA.Dispose();
                                rep_InvCoupon.Dispose();
                                rep_InvSign.Dispose();
                                dtbl.Dispose();
                                dtbl1.Dispose();
                                dtbl2.Dispose();
                                dtbl3.Dispose();
                                dtbl4.Dispose();
                                dtbl5.Dispose();
                            }
                        }


                        if (((blCardPayment) && (Settings.IsDuplicateInvoice == "Y") && (!MercuryCardPaymentCheck) && (!blFSTender)) || (IsGCSales(intINV)) || (blRepairPrint) || (blForced2ReceiptsOnPrecidiaSignatureFailure) || (blDatacapManualEntry))
                        {
                            DataTable ddtbl = new DataTable();
                            PosDataObject.POS dobjPOS1 = new PosDataObject.POS();
                            dobjPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            ddtbl = dobjPOS1.FetchInvoiceHeader(intINV, Settings.StoreCode);

                            dlogo = new DataTable();
                            objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            dlogo = objPOS1.FetchStoreLogo();
                            boolnulllogo = false;
                            foreach (DataRow drl1 in ddtbl.Rows)
                            {
                                foreach (DataRow drl2 in dlogo.Rows)
                                {
                                    if (drl2["logo"] == null) boolnulllogo = true;
                                    drl1["Logo"] = drl2["logo"];
                                }
                            }

                            intTranNo = 0;
                            dblOrderTotal = 0;
                            dblOrderSubtotal = 0;
                            dblDiscount = 0;
                            dblCoupon = 0;
                            dblTax = 0;
                            dblSurcharge = 0;
                            intCID = 0;
                            strDiscountReason = "";
                            dblTax1 = 0;
                            dblTax2 = 0;
                            dblTax3 = 0;
                            strTaxNM1 = "";
                            strTaxNM2 = "";
                            strTaxNM3 = "";

                            strservice = "";
                            intHeaderStatus = 0;
                            dblRentDeposit = 0;
                            dblRentReturnDeposit = 0;
                            dblRepairAmount = 0;
                            dblRepairAdvanceAmount = 0;
                            strRepairDeliveryDate = "";
                            calcrent = "N";

                            dblFees = 0;
                            dblFeesTax = 0;

                            dblFeesCoupon = 0;
                            dblFeesCouponTax = 0;

                            strDTaxNM = "";
                            dblDTax = 0;

                            strCustomerDOB = "";


                            foreach (DataRow dr in ddtbl.Rows)
                            {
                                intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                                intCID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                                dblOrderTotal = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                                dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                                dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                                dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                                dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                                dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                                dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                                strTaxNM1 = dr["TaxNM1"].ToString();
                                strTaxNM2 = dr["TaxNM2"].ToString();
                                strTaxNM3 = dr["TaxNM3"].ToString();
                                strDiscountReason = dr["DiscountReason"].ToString();
                                dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                                dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());
                                dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                                dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());
                                strservice = dr["ServiceType"].ToString();
                                intHeaderStatus = GeneralFunctions.fnInt32(dr["Status"].ToString());
                                dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                                dblRepairAmount = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                                dblRepairAdvanceAmount = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                                if (dr["RepairDeliveryDate"].ToString() != "") strRepairDeliveryDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToShortDateString();
                                calcrent = dr["IsRentCalculated"].ToString();

                                strDTaxNM = dr["DTaxName"].ToString();
                                dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());

                                if (Settings.POSIDRequired == "Y") strCustomerDOB = dr["CustomerDOB"].ToString();
                            }

                            if (intHeaderStatus == 17) dblOrderTotal = dblRepairAmount;

                            DataTable ddtbl1 = new DataTable();
                            DataTable ddtbl2 = new DataTable();
                            DataTable ddtbl3 = new DataTable();
                            DataTable ddtbl4 = new DataTable();
                            DataTable ddtbl5 = new DataTable();

                            OfflineRetailV2.Report.Sales.repInvMain drep_InvMain = new OfflineRetailV2.Report.Sales.repInvMain();
                            OfflineRetailV2.Report.Sales.repInvHeader1 drep_InvHeader1 = new OfflineRetailV2.Report.Sales.repInvHeader1();
                            OfflineRetailV2.Report.Sales.repInvHeader2 drep_InvHeader2 = new OfflineRetailV2.Report.Sales.repInvHeader2();
                            OfflineRetailV2.Report.Sales.repInvLine drep_InvLine = new OfflineRetailV2.Report.Sales.repInvLine();
                            OfflineRetailV2.Report.Sales.repInvSubtotal drep_InvSubtotal = new OfflineRetailV2.Report.Sales.repInvSubtotal();
                            OfflineRetailV2.Report.Sales.repInvTax drep_InvTax = new OfflineRetailV2.Report.Sales.repInvTax();
                            OfflineRetailV2.Report.Sales.repPPInvTendering drep_InvTendering = new OfflineRetailV2.Report.Sales.repPPInvTendering();
                            OfflineRetailV2.Report.Sales.repInvGC drep_InvGC = new OfflineRetailV2.Report.Sales.repInvGC();
                            OfflineRetailV2.Report.Sales.repInvMGC drep_InvMGC = new OfflineRetailV2.Report.Sales.repInvMGC();
                            OfflineRetailV2.Report.Sales.repInvHA drep_InvHA = new OfflineRetailV2.Report.Sales.repInvHA();
                            OfflineRetailV2.Report.Sales.repInvSC drep_InvSC = new OfflineRetailV2.Report.Sales.repInvSC();
                            OfflineRetailV2.Report.Sales.repInvCC drep_InvCC = new OfflineRetailV2.Report.Sales.repInvCC();
                            OfflineRetailV2.Report.Sales.repInvCoupon drep_InvCoupon = new OfflineRetailV2.Report.Sales.repInvCoupon();
                            OfflineRetailV2.Report.Sales.repInvSign drep_InvSign = new OfflineRetailV2.Report.Sales.repInvSign();
                            OfflineRetailV2.Report.Sales.repInvRentLine drep_InvRentLine = new OfflineRetailV2.Report.Sales.repInvRentLine();
                            OfflineRetailV2.Report.Sales.repInvRentSubTotal drep_InvRentSubTotal = new OfflineRetailV2.Report.Sales.repInvRentSubTotal();
                            OfflineRetailV2.Report.Sales.repInvRentReturnLine drep_InvRentReturnLine = new OfflineRetailV2.Report.Sales.repInvRentReturnLine();
                            OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal drep_InvRentReturnSubTotal = new OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal();

                            int prm = 0;
                            PosDataObject.POS obcc01 = new PosDataObject.POS();
                            obcc01.Connection = SystemVariables.Conn;
                            prm = obcc01.GetTranIDFromInvoiceID(intINV);
                            DataTable ccdtbl11 = new DataTable();
                            PosDataObject.POS obcc11 = new PosDataObject.POS();
                            obcc11.Connection = SystemVariables.Conn;
                            ccdtbl11 = obcc11.FetchCardData(prm);
                            foreach (DataRow ds1 in ccdtbl11.Rows)
                            {
                                if ((ds1["CardType"].ToString() == "Credit") || (ds1["CardType"].ToString() == "Credit Card")) CardType = "Credit";
                                if ((ds1["CardType"].ToString() == "Debit") || (ds1["CardType"].ToString() == "Debit Card")) CardType = "Debit";
                                if (ds1["CardType"].ToString() == "Mercury Gift Card") CardType = "Mercury";
                                if (ds1["CardType"].ToString() == "Precidia Gift Card") CardType = "Precidia";
                                if (ds1["CardType"].ToString() == "Datacap Gift Card") CardType = "Datacap";
                                if (ds1["CardType"].ToString() == "POSLink Gift Card") CardType = "POSLink";
                                if (ds1["CardType"].ToString() == "EBT") CardType = "EBT";

                                break;
                            }

                            if (((blCardPayment) && (Settings.IsDuplicateInvoice == "Y")) || (blDatacapManualEntry))
                            {

                                drep_InvMain.subrepCC.ReportSource = drep_InvCC;
                                drep_InvCC.Report.DataSource = ccdtbl11;
                                drep_InvCC.rRef.Text = intINV.ToString();

                                drep_InvCC.rAct.DataBindings.Add("Text", ccdtbl11, "RefCardAct");
                                drep_InvCC.rCard.DataBindings.Add("Text", ccdtbl11, "RefCardLogo");

                                drep_InvCC.rApprCode.DataBindings.Add("Text", ccdtbl11, "RefCardAuthID");
                                drep_InvCC.rTranID.DataBindings.Add("Text", ccdtbl11, "RefCardTranID");
                                drep_InvCC.rAmt.DataBindings.Add("Text", ccdtbl11, "RefCardAuthAmount");


                                drep_InvCC.rsign1.Visible = true;
                                drep_InvCC.rsign2.Visible = true;

                                drep_InvCC.rsign3.Visible = true;
                                drep_InvCC.rTxt.Visible = true;
                                drep_InvMain.rCopy.Visible = true;
                                drep_InvMain.rCopy.Text = Properties.Resources.MERCHANT_COPY;

                                if (CardType == "Credit")
                                {
                                    drep_InvCC.rTxt.Text = Properties.Resources.I_AGREE_TO_PAY_ABOVE_TOTAL_AMOUNT_ACCORDING_TO_CARD_ISSUER_AGREEMENT;
                                    drep_InvCC.rlbl.Text = Properties.Resources.CREDIT_PURCHASE;
                                }
                                if (CardType == "Debit")
                                {
                                    drep_InvCC.rsign1.Visible = false;
                                    drep_InvCC.rsign2.Visible = false;
                                    drep_InvCC.rsign3.Visible = false;
                                    drep_InvCC.rTxt.Text = Properties.Resources.PIN_USED + "\n" + Properties.Resources.SIGNATURE_NOT_REQUIRED;
                                    drep_InvCC.rlbl.Text = Properties.Resources.DEBIT_PURCHASE;
                                }
                            }

                            drep_InvMain.rReprint.Text = "";
                            if (Settings.ReceiptFooter == "")
                            {
                                drep_InvMain.rReportFooter.HeightF = 1.0f;
                                drep_InvMain.rReportFooter.LocationF = new System.Drawing.PointF(8, 2);
                                drep_InvMain.xrBarCode.LocationF = new System.Drawing.PointF(8, 5);
                                drep_InvMain.rCopy.LocationF = new System.Drawing.PointF(567, 5);

                                drep_InvMain.xrShape1.LocationF = new System.Drawing.PointF(581, 25);
                                drep_InvMain.xrPageInfo2.LocationF = new System.Drawing.PointF(594, 25);
                                drep_InvMain.xrPageInfo1.LocationF = new System.Drawing.PointF(681, 25);
                                drep_InvMain.xrShape2.LocationF = new System.Drawing.PointF(725, 25);

                                drep_InvMain.ReportFooter.Height = 60;
                                drep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                            }
                            else
                            {
                                drep_InvMain.ReportFooter.Height = 91;
                                drep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                            }

                            drep_InvMain.subrepH1.ReportSource = drep_InvHeader1;
                            drep_InvHeader1.Report.DataSource = ddtbl;
                            drep_InvHeader1.rReprint.Text = "";

                            GeneralFunctions.MakeReportWatermark(drep_InvMain);
                            drep_InvHeader1.rReportHeaderCompany.Text = Settings.ReceiptHeader_Company;
                            drep_InvHeader1.rReportHeader.Text = Settings.ReceiptHeader_Address;

                            WO = FetchWorkorderNo(intINV);
                            if (WO != 0)
                            {
                                drep_InvHeader1.rType.Text = Properties.Resources.Work_Order__ + WO.ToString() + "    " + Properties.Resources.Date + " : " + GeneralFunctions.fnDate(FetchWorkorderDate(intINV)).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                            }
                            else
                            {
                                drep_InvHeader1.rType.Text = "";
                            }

                            if (strservice == "Rent")
                            {
                                if (intHeaderStatus == 15) drep_InvHeader1.rType.Text = Properties.Resources.Rent_Issued;
                                if (intHeaderStatus == 16) drep_InvHeader1.rType.Text = Properties.Resources.Rent_Item_Returned;
                            }

                            RprParent = 0;

                            if (strservice == "Repair")
                            {
                                if (intHeaderStatus == 17)
                                {
                                    if (strRepairDeliveryDate != "") drep_InvHeader1.rType.Text = Properties.Resources.Repair_In + "      " + Properties.Resources.Expected_Delivety_Date__ + " : " + strRepairDeliveryDate;
                                    else drep_InvHeader1.rType.Text = Properties.Resources.Repair_In;
                                }
                                if (intHeaderStatus == 18)
                                {
                                    drep_InvHeader1.rType.Text = Properties.Resources.Repair_Delivered;
                                    RprParent = FetchRepairParentID(intINV);
                                }
                            }
                            drep_InvHeader1.rOrderNo.Text = intINV.ToString();
                            if (Settings.PrintLogoInReceipt == "Y")
                            {
                                if (!boolnulllogo) drep_InvHeader1.rPic.DataBindings.Add("Image", ddtbl, "Logo");
                            }
                            drep_InvHeader1.rOrderDate.DataBindings.Add("Text", ddtbl, "TransDate");
                            if (strservice == "Sales") drep_InvHeader1.rTraining.Visible = Settings.PrintTrainingMode == "Y";
                            drep_InvHeader1.rRefundCaption.Visible = dblOrderTotal < 0;
                            drep_InvMain.xrBarCode.Text = intINV.ToString();

                            if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                            {
                                drep_InvHeader1.rOrderDate.DataBindings.Add("Text", ddtbl, "RepairDateIn");
                            }
                            if (intCID > 0)
                            {
                                drep_InvMain.subrepH2.ReportSource = drep_InvHeader2;
                                drep_InvHeader2.Report.DataSource = ddtbl;
                                drep_InvHeader2.rCustID.DataBindings.Add("Text", ddtbl, "CustID");
                                drep_InvHeader2.rCustName.DataBindings.Add("Text", ddtbl, "CustName");
                                drep_InvHeader2.rCompany.DataBindings.Add("Text", ddtbl, "CustCompany");

                                if (intHeaderStatus == 3)
                                {
                                    if (strCustomerDOB != "")
                                    {
                                        drep_InvHeader2.rlCustDOB.Text = Properties.Resources.Date_of_Birth;
                                        drep_InvHeader2.rCustDOB.Text = GeneralFunctions.fnDate(strCustomerDOB).ToString(SystemVariables.DateFormat);
                                    }
                                }

                                if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                                {
                                    drep_InvHeader2.rlCustID.Text = Properties.Resources.Ph_;
                                    drep_InvHeader2.rCustID.DataBindings.Add("Text", dtbl, "CustMobile");

                                    drep_InvHeader2.rlCompany.DataBindings.Add("Text", dtbl, "RepairItemName");
                                    drep_InvHeader2.rCompany.DataBindings.Add("Text", dtbl, "RepairItemSlNo");
                                }
                            }
                            else
                            {
                                if (intHeaderStatus == 3)
                                {
                                    if (strCustomerDOB != "")
                                    {
                                        drep_InvMain.subrepH2.ReportSource = drep_InvHeader2;
                                        drep_InvHeader2.Report.DataSource = ddtbl;
                                        drep_InvHeader2.rCustName.Text = "";
                                        drep_InvHeader2.rCustID.Text = "";
                                        drep_InvHeader2.rCompany.Text = "";
                                        drep_InvHeader2.rlCustName.Text = "";
                                        drep_InvHeader2.rlCustID.Text = "";
                                        drep_InvHeader2.rlCompany.Text = "";

                                        if (intHeaderStatus == 3)
                                        {
                                            if (strCustomerDOB != "")
                                            {
                                                drep_InvHeader2.rlCustDOB.Text = Properties.Resources.Date_of_Birth;
                                                drep_InvHeader2.rCustDOB.Text = GeneralFunctions.fnDate(strCustomerDOB).ToString(SystemVariables.DateFormat);
                                            }
                                        }
                                    }
                                }
                            }

                            PosDataObject.POS dobjPOS2 = new PosDataObject.POS();
                            dobjPOS2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            if (intHeaderStatus != 18) ddtbl1 = dobjPOS2.FetchInvoiceDetails1(intINV, dblOrderTotal < 0 ? true : false, Settings.TaxInclusive);
                            else ddtbl1 = dobjPOS2.FetchInvoiceDetails1(RprParent, dblOrderTotal < 0 ? true : false, Settings.TaxInclusive);
                            RearrangeForTaggedItemInInvoice(ddtbl1);
                            RearrangeForLineDisplay(ddtbl1);

                            if ((intHeaderStatus == 16) && (calcrent == "Y"))
                            {
                                foreach (DataRow dd in ddtbl1.Rows)
                                {
                                    dd["Qty"] = -GeneralFunctions.fnDouble(dd["Qty"].ToString());
                                    dd["TotalPrice"] = -GeneralFunctions.fnDouble(dd["TotalPrice"].ToString());
                                }
                            }

                            if (strservice == "Rent")
                            {
                                /*
                                if (intHeaderStatus == 15) // issue
                                {
                                    drep_InvMain.subrepLine.ReportSource = drep_InvRentLine;
                                    drep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                    drep_InvRentLine.Report.DataSource = dtbl1;
                                    drep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                    drep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                    drep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                    drep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                    drep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                    drep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                    drep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                    drep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                                    if (Settings.ShowFeesInReceipt == "Y")
                                    {
                                        drep_InvRentLine.rFeesTxt.Visible = true;
                                        drep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                    }
                                    else
                                    {
                                        drep_InvRentLine.rFeesTxt.Visibility=Visibility.Collapsed;
                                    }
                                }
                                if (intHeaderStatus == 16) // return
                                {
                                    if (calcrent == "N")
                                    {
                                        drep_InvMain.subrepLine.ReportSource = drep_InvRentReturnLine;
                                        drep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                                        drep_InvRentReturnLine.Report.DataSource = dtbl1;
                                        drep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                        drep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                        drep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                        drep_InvRentReturnLine.rlAmt.Visibility=Visibility.Collapsed;
                                        drep_InvRentReturnLine.xrTableCell2.Visibility=Visibility.Collapsed;
                                    }
                                    if (calcrent == "Y")
                                    {
                                        drep_InvMain.subrepLine.ReportSource = drep_InvRentLine;
                                        drep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                        drep_InvRentLine.Report.DataSource = dtbl1;
                                        drep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                        drep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                        drep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                        drep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                        drep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                        drep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                        drep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                        drep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                                        if (Settings.ShowFeesInReceipt == "Y")
                                        {
                                            drep_InvRentLine.rFeesTxt.Visible = true;
                                            drep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                        }
                                        else
                                        {
                                            drep_InvRentLine.rFeesTxt.Visibility=Visibility.Collapsed;
                                        }
                                    }
                                }*/
                            }
                            else if (strservice == "Repair")
                            {
                                string MFooter = "";
                                if ((Settings.ReceiptFooter == "") && (Settings.ReceiptLayawayPolicy == ""))
                                {
                                    drep_InvMain.ReportFooter.Height = 35;
                                    drep_InvMain.rReportFooter.Text = "";
                                }
                                else
                                {
                                    if (Settings.ReceiptFooter != "") MFooter = Properties.Resources.CUSTOMER_AGREEMENT_ + Settings.ReceiptFooter;
                                    /*
                                    if (Settings.ReceiptLayawayPolicy != "")
                                    {
                                        if (Settings.ReceiptFooter == "") MFooter = "REPAIR DISCLAIMER: " + Settings.ReceiptLayawayPolicy;
                                        else MFooter = MFooter + " \n " + "REPAIR DISCLAIMER: " + Settings.ReceiptLayawayPolicy;
                                    }*/
                                    drep_InvMain.ReportFooter.Height = 120;
                                    drep_InvMain.rReportFooter.Text = MFooter;

                                }


                                if (intHeaderStatus == 17) // issue
                                {
                                    /*
                                    drep_InvMain.subrepLine.ReportSource = drep_InvRentLine;
                                    drep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                    drep_InvRentLine.Report.DataSource = dtbl1;
                                    drep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                    drep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                    drep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                    drep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                    drep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                    drep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                    drep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                    drep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                                    if (Settings.ShowFeesInReceipt == "Y")
                                    {
                                        drep_InvRentLine.rFeesTxt.Visible = true;
                                        drep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                    }
                                    else
                                    {
                                        drep_InvRentLine.rFeesTxt.Visibility=Visibility.Collapsed;
                                    }*/
                                }
                                if (intHeaderStatus == 18) // return
                                {
                                    /*
                                    drep_InvMain.subrepLine.ReportSource = drep_InvRentReturnLine;
                                    drep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                                    drep_InvRentReturnLine.Report.DataSource = dtbl1;
                                    drep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                    drep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                    drep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                    drep_InvRentReturnLine.rlAmt.DataBindings.Add("Text", dtbl1, "TotalPrice");
                                     */
                                }
                            }
                            else
                            {
                                /*
                                drep_InvMain.subrepLine.ReportSource = drep_InvLine;
                                drep_InvLine.DecimalPlace = Settings.DecimalPlace;
                                drep_InvLine.Report.DataSource = dtbl1;
                                drep_InvLine.rlqty.DataBindings.Add("Text", ddtbl1, "Qty");
                                drep_InvLine.rISKU.DataBindings.Add("Text", ddtbl1, "SKU");
                                drep_InvLine.rlIem.DataBindings.Add("Text", ddtbl1, "Description");
                                drep_InvLine.rDiscTxt.DataBindings.Add("Text", ddtbl1, "DiscountText");
                                drep_InvLine.rlPrice.DataBindings.Add("Text", ddtbl1, "NormalPrice");
                                drep_InvLine.rlDiscount.DataBindings.Add("Text", ddtbl1, "Discount");
                                drep_InvLine.rlSurcharge.DataBindings.Add("Text", ddtbl1, "Price");
                                drep_InvLine.rlTotal.DataBindings.Add("Text", ddtbl1, "TotalPrice");

                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    drep_InvLine.rFeesTxt.Visible = true;
                                    drep_InvLine.rFeesTxt.DataBindings.Add("Text", ddtbl1, "FeesText");
                                }
                                else
                                {
                                    drep_InvLine.rFeesTxt.Visibility=Visibility.Collapsed;
                                }*/
                            }

                            foreach (DataRow dr12 in ddtbl1.Rows)
                            {
                                dblOrderSubtotal = dblOrderSubtotal + GeneralFunctions.fnDouble(dr12["TotalPrice"].ToString()) + GeneralFunctions.fnDouble(dr12["Discount"].ToString());
                            }

                            //dblOrderSubtotal = Settings.TaxInclusive == "N" ? dblOrderSubtotal : dblOrderSubtotal - dblTax;

                            if (strservice == "Rent")
                            {
                                if (intHeaderStatus == 15) // issue
                                {
                                    drep_InvMain.subrepSubtotal.ReportSource = drep_InvRentSubTotal;
                                    drep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                                    drep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                                    drep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                                    drep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                                    drep_InvRentSubTotal.DR = strDiscountReason;
                                    drep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                                }

                                if (intHeaderStatus == 16) // return
                                {
                                    if (calcrent == "N")
                                    {
                                        if (dblOrderTotal != 0)
                                        {
                                            drep_InvMain.subrepSubtotal.ReportSource = drep_InvRentReturnSubTotal;
                                            drep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                            drep_InvRentReturnSubTotal.rReturnDeposit.Text = dblOrderTotal.ToString();
                                        }
                                    }
                                    if (calcrent == "Y")
                                    {
                                        drep_InvMain.subrepSubtotal.ReportSource = drep_InvRentReturnSubTotal;
                                        drep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                        drep_InvRentReturnSubTotal.rReturnDeposit.Text = (-dblRentDeposit).ToString();
                                    }
                                }
                            }
                            else if (strservice == "Repair")
                            {
                                if (intHeaderStatus == 17) // issue
                                {
                                    drep_InvMain.subrepSubtotal.ReportSource = drep_InvRentSubTotal;
                                    drep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                                    drep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                                    drep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                                    drep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                                    drep_InvRentSubTotal.DR = strDiscountReason;
                                    drep_InvRentSubTotal.rw1.Visible = false;
                                    drep_InvRentSubTotal.rw2.Visible = false;
                                    drep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                                }
                            }
                            else
                            {
                                drep_InvMain.subrepSubtotal.ReportSource = drep_InvSubtotal;
                                drep_InvSubtotal.DecimalPlace = Settings.DecimalPlace;
                                drep_InvSubtotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                                drep_InvSubtotal.rDiscount.Text = dblDiscount.ToString();
                                drep_InvSubtotal.DR = strDiscountReason;
                                drep_InvSubtotal.rTax.Text = dblTax.ToString();
                            }

                            if (dblTax != 0)
                            {
                                ddtbl2.Columns.Add("Name", System.Type.GetType("System.String"));
                                ddtbl2.Columns.Add("Amount", System.Type.GetType("System.String"));

                                if (dblTax1 != 0)
                                {
                                    ddtbl2.Rows.Add(new object[] { strTaxNM1, dblTax1.ToString() });
                                }

                                if (dblTax2 != 0)
                                {
                                    ddtbl2.Rows.Add(new object[] { strTaxNM2, dblTax2.ToString() });
                                }

                                if (dblTax3 != 0)
                                {
                                    ddtbl2.Rows.Add(new object[] { strTaxNM3, dblTax3.ToString() });
                                }

                                if (dblDTax != 0)
                                {
                                    ddtbl2.Rows.Add(new object[] { "Dest. Tax: " + strDTaxNM, dblDTax.ToString() });
                                }

                                drep_InvMain.subrepTax.ReportSource = drep_InvTax;
                                drep_InvTax.DecimalPlace = Settings.DecimalPlace;

                                drep_InvTax.Report.DataSource = ddtbl2;
                                drep_InvTax.rDTax1.DataBindings.Add("Text", ddtbl2, "Name");
                                drep_InvTax.rDTax2.DataBindings.Add("Text", ddtbl2, "Amount");
                            }

                            PosDataObject.POS dobjPOS23 = new PosDataObject.POS();
                            dobjPOS23.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            if (intHeaderStatus != 18) ddtbl5 = dobjPOS23.FetchInvoiceCoupons(intINV);
                            else ddtbl5 = dobjPOS23.FetchInvoiceCoupons(RprParent);
                            if (ddtbl5.Rows.Count > 0)
                            {
                                drep_InvMain.subrepCoupon.ReportSource = drep_InvCoupon;
                                drep_InvCoupon.DecimalPlace = Settings.DecimalPlace;
                                drep_InvCoupon.Report.DataSource = dtbl5;
                                drep_InvCoupon.rAmt.Text = dblCoupon.ToString();
                                drep_InvCoupon.rDTax1.DataBindings.Add("Text", ddtbl5, "Name");
                                drep_InvCoupon.rDTax2.DataBindings.Add("Text", ddtbl5, "Amount");
                            }

                            PosDataObject.POS dobjPOS4 = new PosDataObject.POS();
                            dobjPOS4.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            ddtbl3 = dobjPOS4.FetchInvoiceTender(intTranNo);
                            ddtbl3 = RearrangeTenderForCashBack(intTranNo, ddtbl3);

                            boolHATender = false;
                            boolSCrdtTender = false;

                            dblTenderAmt = 0;
                            TenderCount = 0;
                            TenderCount = ddtbl3.Rows.Count;
                            foreach (DataRow dr1 in ddtbl3.Rows)
                            {
                                if (dr1["DisplayAs"].ToString() == "Debit Card Total") continue;
                                dblTenderAmt = dblTenderAmt + GeneralFunctions.fnDouble(dr1["Amount"].ToString());

                                if (dr1["Name"].ToString() == "House Account") boolHATender = true;
                                if (dr1["Name"].ToString() == "Store Credit") boolSCrdtTender = true;
                            }

                            drep_InvMain.subrepTender.ReportSource = drep_InvTendering;
                            drep_InvTendering.Report.DataSource = ddtbl3;
                            drep_InvTendering.DecimalPlace = Settings.DecimalPlace;

                            if (boolHATender && (Settings.HouseAccountBalanceInReceipt == "Y"))
                            {
                                PosDataObject.POS obcc99 = new PosDataObject.POS();
                                obcc99.Connection = SystemVariables.Conn;
                                double dval = obcc99.FetchHouseAccountBalanceForThisReceipt(intINV, intCID);
                                drep_InvMain.subrepHA.ReportSource = drep_InvHA;
                                drep_InvHA.DecimalPlace = Settings.DecimalPlace;
                                drep_InvHA.rAmt.Text = dval.ToString();
                            }

                            if (boolSCrdtTender) // Print Store Credit Balance
                            {
                                PosDataObject.POS objscrtbal1 = new PosDataObject.POS();
                                objscrtbal1.Connection = SystemVariables.Conn;
                                double dval = objscrtbal1.GetCustomerStoreCreditBalance(intCID);
                                drep_InvMain.subrepSCrdt.ReportSource = drep_InvSC;
                                drep_InvSC.DecimalPlace = Settings.DecimalPlace;
                                drep_InvSC.rAmt.Text = dval.ToString();
                            }

                            if (TenderCount == 0) drep_InvTendering.lbTenderText.Text = "";

                            if (Settings.ShowFeesInReceipt == "Y")
                            {
                                bool bfdata = false;
                                bool bftx = false;
                                DataTable dFees = FetchInvFees(intINV);

                                if (dblFees + dblFeesCoupon != 0)
                                {
                                    if (dFees.Rows.Count == 1) drep_InvTendering.lbFees.Text = dFees.Rows[0]["FeesName"].ToString();
                                    drep_InvTendering.rFees.Text = (dblFees + dblFeesCoupon).ToString();
                                    drep_InvTendering.rFees.Visible = true;
                                    drep_InvTendering.lbFees.Visible = true;
                                }
                                else
                                {
                                    bfdata = true;
                                }
                                if (dblFeesTax + dblFeesCouponTax != 0)
                                {
                                    if (dFees.Rows.Count == 1) drep_InvTendering.lbFeeTx.Text = dFees.Rows[0]["FeesName"].ToString() + " " + "Tax";
                                    drep_InvTendering.rFeeTx.Text = (dblFeesTax + dblFeesCouponTax).ToString();
                                    drep_InvTendering.rFeeTx.Visible = true;
                                    drep_InvTendering.lbFeeTx.Visible = true;
                                }
                                else
                                {
                                    bftx = true;
                                }
                                if ((bfdata) && (bftx))
                                {
                                    drep_InvTendering.ReportHeader.Visible = false;
                                }
                            }

                            if ((intHeaderStatus == 15) && (calcrent == "Y")) drep_InvTendering.rTotal.Text = dblRentDeposit.ToString();
                            else if ((intHeaderStatus == 15) && (calcrent == "N")) drep_InvTendering.rTotal.Text = (dblOrderTotal + dblRentDeposit).ToString();
                            else drep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                            //drep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                            drep_InvTendering.rTenderName.DataBindings.Add("Text", ddtbl3, "DisplayAs");
                            drep_InvTendering.rTenderAmt.DataBindings.Add("Text", ddtbl3, "Amount");

                            if (strservice == "Repair")
                            {
                                if (intHeaderStatus == 17)
                                {
                                    drep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                                    drep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                                    drep_InvTendering.rlbDue.Text = Properties.Resources.Balance_Due;
                                    drep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                                }
                                if (intHeaderStatus == 18)
                                {
                                    if (dblRepairAdvanceAmount > 0)
                                    {
                                        drep_InvTendering.rlbAdvance.Text = Properties.Resources.Deposit_Amount;
                                        drep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                                        drep_InvTendering.rlbDue.Text = Properties.Resources.Balance_Due;
                                        drep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                                    }
                                    else
                                    {
                                        drep_InvTendering.rlbAdvance.Text = "";
                                        drep_InvTendering.rAdvance.Text = "";
                                        drep_InvTendering.rlbDue.Text = "";
                                        drep_InvTendering.rDue.Text = "";

                                        drep_InvTendering.rtr1.HeightF = 1.0f;
                                        drep_InvTendering.rtr2.HeightF = 1.0f;
                                        drep_InvTendering.rtbl.HeightF = 55.0f;
                                        drep_InvTendering.PageHeader.HeightF = 55.0f;
                                    }
                                }
                            }
                            else
                            {
                                drep_InvTendering.rlbAdvance.Text = "";
                                drep_InvTendering.rAdvance.Text = "";
                                drep_InvTendering.rlbDue.Text = "";
                                drep_InvTendering.rDue.Text = "";

                                drep_InvTendering.rtr1.HeightF = 1.0f;
                                drep_InvTendering.rtr2.HeightF = 1.0f;
                                drep_InvTendering.rtbl.HeightF = 55.0f;
                                drep_InvTendering.PageHeader.HeightF = 55.0f;
                            }

                            EffectiveTotal = 0;
                            if ((intHeaderStatus == 15) && (calcrent == "Y")) EffectiveTotal = dblRentDeposit;
                            else if ((intHeaderStatus == 15) && (calcrent == "N")) EffectiveTotal = dblOrderTotal + dblRentDeposit;
                            else if (intHeaderStatus == 17) EffectiveTotal = dblRepairAdvanceAmount;
                            else if (intHeaderStatus == 18) EffectiveTotal = dblRepairAmount - dblRepairAdvanceAmount;
                            else EffectiveTotal = dblOrderTotal;

                            if (dblTenderAmt != EffectiveTotal)
                            {
                                drep_InvTendering.ChangeDue = true;
                                drep_InvTendering.ReportFooter.Visible = true;
                                drep_InvTendering.rChangeDueText.Text = Properties.Resources.Change;
                                drep_InvTendering.rChangeDue.Text = Convert.ToString(dblTenderAmt - EffectiveTotal);
                            }
                            else
                            {
                                drep_InvTendering.ChangeDue = false;
                                drep_InvTendering.ReportFooter.Visible = false;
                            }

                            if ((intHeaderStatus == 17) || (intHeaderStatus == 18))
                            {
                                //drep_InvTendering.ChangeDue = false;
                                //drep_InvTendering.ReportFooter.Visibility=Visibility.Collapsed;
                            }

                            if (Settings.POSShowGiftCertBalance == "Y")
                            {
                                PosDataObject.POS dobjPOS5 = new PosDataObject.POS();
                                dobjPOS5.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                dtbl4 = dobjPOS5.ActiveGiftCert(intINV, Settings.CentralExportImport, Settings.StoreCode);
                                if (dtbl4.Rows.Count > 0)
                                {
                                    drep_InvMain.subrepGC.ReportSource = drep_InvGC;
                                    drep_InvGC.Report.DataSource = ddtbl4;
                                    drep_InvGC.DecimalPlace = Settings.DecimalPlace;
                                    drep_InvGC.rGCHeader.Text = Properties.Resources.Gift_Cert__with_balance_as_on__ + DateTime.Today.Date.ToShortDateString();
                                    drep_InvGC.rGCName.DataBindings.Add("Text", ddtbl4, "GC");
                                    drep_InvGC.rGCAmt.DataBindings.Add("Text", ddtbl4, "GCAMT");
                                }
                            }

                            // EBT Balance on Receipt

                            PosDataObject.POS objPOS88 = new PosDataObject.POS();
                            objPOS88.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            DataTable ddtblEBT = objPOS88.FetchEBTBalanceFromReceipt(intINV);
                            if (ddtblEBT.Rows.Count > 0)
                            {
                                OfflineRetailV2.Report.Sales.repInvEBT drep_InvEBT = new OfflineRetailV2.Report.Sales.repInvEBT();
                                drep_InvMain.subrepEBT.ReportSource = drep_InvEBT;
                                drep_InvEBT.Report.DataSource = ddtblEBT;
                                drep_InvEBT.DecimalPlace = Settings.DecimalPlace;

                                drep_InvEBT.rEBTCard.DataBindings.Add("Text", ddtblEBT, "CardNo");
                                drep_InvEBT.rEBTBal.DataBindings.Add("Text", ddtblEBT, "CardBalance");
                            }


                            prmmgc = 0;
                            PosDataObject.POS obcc01mgc1 = new PosDataObject.POS();
                            obcc01mgc1.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc1.GetTranIDFromInvoiceID(intINV);
                            DataTable ccdtbl11mgc1 = new DataTable();
                            PosDataObject.POS obcc11mgc1 = new PosDataObject.POS();
                            obcc11mgc1.Connection = SystemVariables.Conn;
                            ccdtbl11mgc1 = obcc11mgc1.FetchMercuryGiftCardData(prmmgc);

                            if (ccdtbl11mgc1.Rows.Count > 0)
                            {
                                drep_InvMain.subrepMGC.ReportSource = drep_InvMGC;
                                drep_InvMGC.Report.DataSource = ccdtbl11mgc1;
                                drep_InvMGC.DecimalPlace = Settings.DecimalPlace;
                                drep_InvMGC.rGCName.DataBindings.Add("Text", ccdtbl11mgc1, "RefCardAct");
                                drep_InvMGC.rGCAmt.DataBindings.Add("Text", ccdtbl11mgc1, "RefCardBalance");
                            }


                            if (Settings.POSPrintInvoice == 0)
                            {
                                //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
                                try
                                {
                                    if (Settings.ReportPrinterName != "") drep_InvMain.PrinterName = Settings.ReportPrinterName;
                                    drep_InvMain.CreateDocument();
                                    drep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                                    drep_InvMain.PrintingSystem.ShowPrintStatusDialog = false;

                                    //drep_InvMain.ShowPreviewDialog();

                                    DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                                    window.PreviewControl.DocumentSource = drep_InvMain;
                                    window.ShowDialog();

                                }
                                finally
                                {
                                    drep_InvHeader1.Dispose();
                                    drep_InvHeader2.Dispose();
                                    drep_InvLine.Dispose();
                                    drep_InvSubtotal.Dispose();
                                    drep_InvTax.Dispose();
                                    drep_InvTendering.Dispose();
                                    drep_InvGC.Dispose();
                                    drep_InvHA.Dispose();
                                    drep_InvCoupon.Dispose();
                                    drep_InvMain.Dispose();

                                    ddtbl.Dispose();
                                    ddtbl1.Dispose();
                                    ddtbl2.Dispose();
                                    ddtbl3.Dispose();
                                    ddtbl4.Dispose();
                                    ddtbl5.Dispose();
                                    ccdtbl11mgc1.Dispose();
                                }
                            }

                            if (Settings.POSPrintInvoice == 1)
                            {
                                try
                                {
                                    drep_InvMain.CreateDocument();
                                    drep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                                    drep_InvMain.PrinterName = Settings.ReceiptPrinterName;
                                    GeneralFunctions.PrintReport(drep_InvMain);
                                }
                                catch
                                {
                                }
                                finally
                                {
                                    drep_InvMain.Dispose();
                                    drep_InvHeader1.Dispose();
                                    drep_InvHeader2.Dispose();
                                    drep_InvLine.Dispose();
                                    drep_InvSubtotal.Dispose();
                                    drep_InvTax.Dispose();
                                    drep_InvTendering.Dispose();
                                    drep_InvHA.Dispose();
                                    drep_InvGC.Dispose();
                                    drep_InvCoupon.Dispose();
                                    ddtbl.Dispose();
                                    ddtbl1.Dispose();
                                    ddtbl2.Dispose();
                                    ddtbl3.Dispose();
                                    ddtbl4.Dispose();
                                    ddtbl5.Dispose();
                                }
                            }
                        }














                        if (blHouseAccountPayment)
                        {
                            DataTable ddtbl = new DataTable();
                            PosDataObject.POS dobjPOS1 = new PosDataObject.POS();
                            dobjPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            ddtbl = dobjPOS1.FetchInvoiceHeader(intINV, Settings.StoreCode);

                            dlogo = new DataTable();
                            objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            dlogo = objPOS1.FetchStoreLogo();
                            boolnulllogo = false;
                            foreach (DataRow drl1 in ddtbl.Rows)
                            {
                                foreach (DataRow drl2 in dlogo.Rows)
                                {
                                    if (drl2["logo"] == null) boolnulllogo = true;
                                    drl1["Logo"] = drl2["logo"];
                                }
                            }

                            intTranNo = 0;
                            dblOrderTotal = 0;
                            dblOrderSubtotal = 0;
                            dblDiscount = 0;
                            dblCoupon = 0;
                            dblTax = 0;
                            dblSurcharge = 0;
                            intCID = 0;
                            strDiscountReason = "";
                            dblTax1 = 0;
                            dblTax2 = 0;
                            dblTax3 = 0;
                            strTaxNM1 = "";
                            strTaxNM2 = "";
                            strTaxNM3 = "";

                            strservice = "";
                            intHeaderStatus = 0;
                            dblRentDeposit = 0;
                            dblRentReturnDeposit = 0;
                            dblRepairAmount = 0;
                            dblRepairAdvanceAmount = 0;
                            strRepairDeliveryDate = "";
                            calcrent = "N";

                            dblFees = 0;
                            dblFeesTax = 0;

                            dblFeesCoupon = 0;
                            dblFeesCouponTax = 0;

                            strDTaxNM = "";
                            dblDTax = 0;


                            foreach (DataRow dr in ddtbl.Rows)
                            {
                                intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                                intCID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                                dblOrderTotal = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                                dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                                dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                                dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                                dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                                dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                                dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                                strTaxNM1 = dr["TaxNM1"].ToString();
                                strTaxNM2 = dr["TaxNM2"].ToString();
                                strTaxNM3 = dr["TaxNM3"].ToString();
                                strDiscountReason = dr["DiscountReason"].ToString();
                                dblFees = GeneralFunctions.fnDouble(dr["Fees"].ToString());
                                dblFeesTax = GeneralFunctions.fnDouble(dr["FeesTax"].ToString());

                                dblFeesCoupon = GeneralFunctions.fnDouble(dr["FeesCoupon"].ToString());
                                dblFeesCouponTax = GeneralFunctions.fnDouble(dr["FeesCouponTax"].ToString());

                                strservice = dr["ServiceType"].ToString();
                                intHeaderStatus = GeneralFunctions.fnInt32(dr["Status"].ToString());
                                dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());
                                dblRepairAmount = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                                dblRepairAdvanceAmount = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                                if (dr["RepairDeliveryDate"].ToString() != "") strRepairDeliveryDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToShortDateString();
                                calcrent = dr["IsRentCalculated"].ToString();

                                strDTaxNM = dr["DTaxName"].ToString();
                                dblDTax = GeneralFunctions.fnDouble(dr["DTax"].ToString());
                            }

                            DataTable ddtbl1 = new DataTable();
                            DataTable ddtbl2 = new DataTable();
                            DataTable ddtbl3 = new DataTable();
                            DataTable ddtbl4 = new DataTable();
                            DataTable ddtbl5 = new DataTable();

                            OfflineRetailV2.Report.Sales.repInvMain ddrep_InvMain = new OfflineRetailV2.Report.Sales.repInvMain();
                            OfflineRetailV2.Report.Sales.repInvHeader1 ddrep_InvHeader1 = new OfflineRetailV2.Report.Sales.repInvHeader1();
                            OfflineRetailV2.Report.Sales.repInvHeader2 ddrep_InvHeader2 = new OfflineRetailV2.Report.Sales.repInvHeader2();
                            OfflineRetailV2.Report.Sales.repInvLine ddrep_InvLine = new OfflineRetailV2.Report.Sales.repInvLine();
                            OfflineRetailV2.Report.Sales.repInvSubtotal ddrep_InvSubtotal = new OfflineRetailV2.Report.Sales.repInvSubtotal();
                            OfflineRetailV2.Report.Sales.repInvTax ddrep_InvTax = new OfflineRetailV2.Report.Sales.repInvTax();
                            OfflineRetailV2.Report.Sales.repPPInvTendering ddrep_InvTendering = new OfflineRetailV2.Report.Sales.repPPInvTendering();
                            OfflineRetailV2.Report.Sales.repInvGC ddrep_InvGC = new OfflineRetailV2.Report.Sales.repInvGC();
                            OfflineRetailV2.Report.Sales.repInvMGC ddrep_InvMGC = new OfflineRetailV2.Report.Sales.repInvMGC();
                            OfflineRetailV2.Report.Sales.repInvCC ddrep_InvCC = new OfflineRetailV2.Report.Sales.repInvCC();
                            OfflineRetailV2.Report.Sales.repInvCoupon ddrep_InvCoupon = new OfflineRetailV2.Report.Sales.repInvCoupon();

                            OfflineRetailV2.Report.Sales.repInvRentLine ddrep_InvRentLine = new OfflineRetailV2.Report.Sales.repInvRentLine();
                            OfflineRetailV2.Report.Sales.repInvRentSubTotal ddrep_InvRentSubTotal = new OfflineRetailV2.Report.Sales.repInvRentSubTotal();
                            OfflineRetailV2.Report.Sales.repInvRentReturnLine ddrep_InvRentReturnLine = new OfflineRetailV2.Report.Sales.repInvRentReturnLine();
                            OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal ddrep_InvRentReturnSubTotal = new OfflineRetailV2.Report.Sales.repInvRentReturnSubTotal();


                            ddrep_InvMain.subrepCC.ReportSource = ddrep_InvCC;

                            ddrep_InvCC.rRef.Visible = false;

                            ddrep_InvCC.rAct.Visible = false;
                            ddrep_InvCC.rCard.Visible = false;
                            ddrep_InvCC.rApprCode.Visible = false;
                            ddrep_InvCC.rTranID.Visible = false;
                            ddrep_InvCC.rAmt.Visible = false;

                            ddrep_InvCC.rsign1.Visible = true;
                            ddrep_InvCC.rsign2.Visible = true;

                            ddrep_InvCC.rsign3.Visible = true;

                            ddrep_InvCC.xrTable1.Visible = false;

                            ddrep_InvMain.rReprint.Text = "";
                            if (Settings.ReceiptFooter == "")
                            {
                                ddrep_InvMain.rReportFooter.HeightF = 1.0f;
                                ddrep_InvMain.rReportFooter.LocationF = new System.Drawing.PointF(8, 2);
                                ddrep_InvMain.xrBarCode.LocationF = new System.Drawing.PointF(8, 5);
                                ddrep_InvMain.rCopy.LocationF = new System.Drawing.PointF(567, 5);

                                ddrep_InvMain.xrShape1.LocationF = new System.Drawing.PointF(581, 25);
                                ddrep_InvMain.xrPageInfo2.LocationF = new System.Drawing.PointF(594, 25);
                                ddrep_InvMain.xrPageInfo1.LocationF = new System.Drawing.PointF(681, 25);
                                ddrep_InvMain.xrShape2.LocationF = new System.Drawing.PointF(725, 25);

                                ddrep_InvMain.ReportFooter.Height = 60;
                                ddrep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                            }
                            else
                            {
                                ddrep_InvMain.ReportFooter.Height = 91;
                                ddrep_InvMain.rReportFooter.Text = Settings.ReceiptFooter;
                            }

                            ddrep_InvMain.subrepH1.ReportSource = ddrep_InvHeader1;
                            ddrep_InvHeader1.Report.DataSource = ddtbl;
                            ddrep_InvHeader1.rReprint.Text = "";
                            GeneralFunctions.MakeReportWatermark(ddrep_InvMain);
                            ddrep_InvHeader1.rReportHeaderCompany.Text = Settings.ReceiptHeader_Company;
                            ddrep_InvHeader1.rReportHeader.Text = Settings.ReceiptHeader_Address;

                            WO = FetchWorkorderNo(intINV);
                            if (WO != 0)
                            {
                                ddrep_InvHeader1.rType.Text = Properties.Resources.Work_Order__ + WO.ToString() + "    " + Properties.Resources.Date + " : " + GeneralFunctions.fnDate(FetchWorkorderDate(intINV)).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                            }
                            else
                            {
                                ddrep_InvHeader1.rType.Text = "";
                            }

                            if (strservice == "Rent")
                            {
                                if (intHeaderStatus == 15) ddrep_InvHeader1.rType.Text = Properties.Resources.Rent_Issued;
                                if (intHeaderStatus == 16) ddrep_InvHeader1.rType.Text = Properties.Resources.Rent_Item_Returned;
                            }

                            RprParent = 0;

                            if (strservice == "Repair")
                            {
                                if (intHeaderStatus == 17)
                                {
                                    if (strRepairDeliveryDate != "") ddrep_InvHeader1.rType.Text = Properties.Resources.Repair_In + "      " + Properties.Resources.Expected_Delivety_Date__ + " : " + strRepairDeliveryDate;
                                    else ddrep_InvHeader1.rType.Text = Properties.Resources.Repair_In;
                                }
                                if (intHeaderStatus == 18)
                                {
                                    ddrep_InvHeader1.rType.Text = Properties.Resources.Repair_Delivered;
                                    RprParent = FetchRepairParentID(intINV);
                                }
                            }
                            ddrep_InvHeader1.rOrderNo.Text = intINV.ToString();
                            if (Settings.PrintLogoInReceipt == "Y")
                            {
                                if (!boolnulllogo) ddrep_InvHeader1.rPic.DataBindings.Add("Image", ddtbl, "Logo");
                            }
                            ddrep_InvHeader1.rOrderDate.DataBindings.Add("Text", ddtbl, "TransDate");
                            if (strservice == "Sales") ddrep_InvHeader1.rTraining.Visible = Settings.PrintTrainingMode == "Y";
                            ddrep_InvHeader1.rRefundCaption.Visible = dblOrderTotal < 0;
                            ddrep_InvMain.xrBarCode.Text = intINV.ToString();

                            if (intCID > 0)
                            {
                                ddrep_InvMain.subrepH2.ReportSource = ddrep_InvHeader2;
                                ddrep_InvHeader2.Report.DataSource = ddtbl;
                                ddrep_InvHeader2.rCustID.DataBindings.Add("Text", ddtbl, "CustID");
                                ddrep_InvHeader2.rCustName.DataBindings.Add("Text", ddtbl, "CustName");
                                ddrep_InvHeader2.rCompany.DataBindings.Add("Text", ddtbl, "CustCompany");
                            }
                            else
                            {
                                ddrep_InvMain.subrepH2.ReportSource = ddrep_InvHeader2;
                                ddrep_InvHeader2.Report.DataSource = ddtbl;
                                ddrep_InvHeader2.rCustName.Text = "";
                                ddrep_InvHeader2.rCustID.Text = "";
                                ddrep_InvHeader2.rCompany.Text = "";
                                ddrep_InvHeader2.rlCustID.Text = "";
                                ddrep_InvHeader2.rlCustName.Text = "";
                                ddrep_InvHeader2.rlCompany.Text = "";
                            }

                            PosDataObject.POS dobjPOS2 = new PosDataObject.POS();
                            dobjPOS2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            if (intHeaderStatus != 18) ddtbl1 = dobjPOS2.FetchInvoiceDetails1(intINV, dblOrderTotal < 0 ? true : false, Settings.TaxInclusive);
                            else ddtbl1 = dobjPOS2.FetchInvoiceDetails1(RprParent, false, Settings.TaxInclusive);
                            RearrangeForTaggedItemInInvoice(ddtbl1);
                            RearrangeForLineDisplay(ddtbl1);
                            if ((intHeaderStatus == 16) && (calcrent == "Y"))
                            {
                                foreach (DataRow dd in ddtbl1.Rows)
                                {
                                    dd["Qty"] = -GeneralFunctions.fnDouble(dd["Qty"].ToString());
                                    dd["TotalPrice"] = -GeneralFunctions.fnDouble(dd["TotalPrice"].ToString());
                                }
                            }

                            if (strservice == "Rent")
                            {
                                if (intHeaderStatus == 15) // issue
                                {
                                    ddrep_InvMain.subrepLine.ReportSource = ddrep_InvRentLine;
                                    ddrep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                    ddrep_InvRentLine.Report.DataSource = dtbl1;
                                    ddrep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                    ddrep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                    ddrep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                    ddrep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                    ddrep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                    ddrep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                    ddrep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                    ddrep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                                    if (Settings.ShowFeesInReceipt == "Y")
                                    {
                                        ddrep_InvRentLine.rFeesTxt.Visible = true;
                                        ddrep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                    }
                                    else
                                    {
                                        ddrep_InvRentLine.rFeesTxt.Visible = false;
                                    }
                                }
                                if (intHeaderStatus == 16) // return
                                {
                                    if (calcrent == "N")
                                    {
                                        ddrep_InvMain.subrepLine.ReportSource = ddrep_InvRentReturnLine;
                                        ddrep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                                        ddrep_InvRentReturnLine.Report.DataSource = dtbl1;
                                        ddrep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                        ddrep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                        ddrep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                        ddrep_InvRentReturnLine.rlAmt.Visible = false;
                                        ddrep_InvRentReturnLine.xrTableCell2.Visible = false;
                                    }
                                    if (calcrent == "Y")
                                    {
                                        ddrep_InvMain.subrepLine.ReportSource = ddrep_InvRentLine;
                                        ddrep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                        ddrep_InvRentLine.Report.DataSource = dtbl1;
                                        ddrep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                        ddrep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                        ddrep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                        ddrep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                        ddrep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                        ddrep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                        ddrep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                        ddrep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                                        if (Settings.ShowFeesInReceipt == "Y")
                                        {
                                            ddrep_InvRentLine.rFeesTxt.Visible = true;
                                            ddrep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                        }
                                        else
                                        {
                                            ddrep_InvRentLine.rFeesTxt.Visible = false;
                                        }
                                    }
                                }
                            }
                            else if (strservice == "Repair")
                            {
                                if (intHeaderStatus == 17) // issue
                                {
                                    ddrep_InvMain.subrepLine.ReportSource = ddrep_InvRentLine;
                                    ddrep_InvRentLine.DecimalPlace = Settings.DecimalPlace;
                                    ddrep_InvRentLine.Report.DataSource = dtbl1;
                                    ddrep_InvRentLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                    ddrep_InvRentLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                    ddrep_InvRentLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                    ddrep_InvRentLine.rDiscTxt.DataBindings.Add("Text", dtbl1, "DiscountText");
                                    ddrep_InvRentLine.rlPrice.DataBindings.Add("Text", dtbl1, "NormalPrice");
                                    ddrep_InvRentLine.rlDiscount.DataBindings.Add("Text", dtbl1, "Discount");
                                    ddrep_InvRentLine.rlSurcharge.DataBindings.Add("Text", dtbl1, "Price");
                                    ddrep_InvRentLine.rlTotal.DataBindings.Add("Text", dtbl1, "TotalPrice");

                                    if (Settings.ShowFeesInReceipt == "Y")
                                    {
                                        ddrep_InvRentLine.rFeesTxt.Visible = true;
                                        ddrep_InvRentLine.rFeesTxt.DataBindings.Add("Text", dtbl1, "FeesText");
                                    }
                                    else
                                    {
                                        ddrep_InvRentLine.rFeesTxt.Visible = false;
                                    }
                                }
                                if (intHeaderStatus == 18) // return
                                {
                                    ddrep_InvMain.subrepLine.ReportSource = ddrep_InvRentReturnLine;
                                    ddrep_InvRentReturnLine.DecimalPlace = Settings.DecimalPlace;
                                    ddrep_InvRentReturnLine.Report.DataSource = dtbl1;
                                    ddrep_InvRentReturnLine.rlqty.DataBindings.Add("Text", dtbl1, "Qty");
                                    ddrep_InvRentReturnLine.rISKU.DataBindings.Add("Text", dtbl1, "SKU");
                                    ddrep_InvRentReturnLine.rlIem.DataBindings.Add("Text", dtbl1, "Description");
                                    ddrep_InvRentReturnLine.rlAmt.DataBindings.Add("Text", dtbl1, "TotalPrice");
                                }
                            }
                            else
                            {
                                ddrep_InvMain.subrepLine.ReportSource = ddrep_InvLine;
                                ddrep_InvLine.DecimalPlace = Settings.DecimalPlace;
                                ddrep_InvLine.Report.DataSource = dtbl1;
                                ddrep_InvLine.rlqty.DataBindings.Add("Text", ddtbl1, "Qty");
                                ddrep_InvLine.rlSKU.DataBindings.Add("Text", ddtbl1, "SKU");
                                ddrep_InvLine.rlIem.DataBindings.Add("Text", ddtbl1, "Description");
                                ddrep_InvLine.rDiscTxt.DataBindings.Add("Text", ddtbl1, "DiscountText");
                                ddrep_InvLine.rlPrice.DataBindings.Add("Text", ddtbl1, "NormalPrice");
                                ddrep_InvLine.rlDiscount.DataBindings.Add("Text", ddtbl1, "Discount");
                                ddrep_InvLine.rlSurcharge.DataBindings.Add("Text", ddtbl1, "Price");
                                ddrep_InvLine.rlTotal.DataBindings.Add("Text", ddtbl1, "TotalPrice");
                                ddrep_InvLine.rManualWeight.DataBindings.Add("Text", ddtbl1, "ExtraValue1");

                                if (Settings.ShowFeesInReceipt == "Y")
                                {
                                    ddrep_InvLine.rFeesTxt.Visible = true;
                                    ddrep_InvLine.rFeesTxt.DataBindings.Add("Text", ddtbl1, "FeesText");
                                }
                                else
                                {
                                    ddrep_InvLine.rFeesTxt.Visible = false;
                                }
                            }

                            foreach (DataRow dr12 in ddtbl1.Rows)
                            {
                                dblOrderSubtotal = dblOrderSubtotal + GeneralFunctions.fnDouble(dr12["TotalPrice"].ToString()) + GeneralFunctions.fnDouble(dr12["Discount"].ToString());
                            }

                            //dblOrderSubtotal = Settings.TaxInclusive == "N" ? dblOrderSubtotal : dblOrderSubtotal - dblTax;

                            if (strservice == "Rent")
                            {
                                if (intHeaderStatus == 15) // issue
                                {
                                    ddrep_InvMain.subrepSubtotal.ReportSource = ddrep_InvRentSubTotal;
                                    ddrep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                                    ddrep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                                    ddrep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                                    ddrep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                                    ddrep_InvRentSubTotal.DR = strDiscountReason;
                                    ddrep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                                }

                                if (intHeaderStatus == 16) // return
                                {
                                    if (calcrent == "N")
                                    {
                                        if (dblOrderTotal != 0)
                                        {
                                            ddrep_InvMain.subrepSubtotal.ReportSource = ddrep_InvRentReturnSubTotal;
                                            ddrep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                            ddrep_InvRentReturnSubTotal.rReturnDeposit.Text = dblOrderTotal.ToString();
                                        }
                                    }
                                    if (calcrent == "Y")
                                    {
                                        ddrep_InvMain.subrepSubtotal.ReportSource = ddrep_InvRentReturnSubTotal;
                                        ddrep_InvRentReturnSubTotal.DecimalPlace = Settings.DecimalPlace;
                                        ddrep_InvRentReturnSubTotal.rReturnDeposit.Text = (-dblRentDeposit).ToString();
                                    }
                                }
                            }
                            else if (strservice == "Repair")
                            {
                                if (intHeaderStatus == 17) // issue
                                {
                                    ddrep_InvMain.subrepSubtotal.ReportSource = ddrep_InvRentSubTotal;
                                    ddrep_InvRentSubTotal.DecimalPlace = Settings.DecimalPlace;
                                    ddrep_InvRentSubTotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                                    ddrep_InvRentSubTotal.rDeposit.Text = dblRentDeposit.ToString();
                                    ddrep_InvRentSubTotal.rDiscount.Text = dblDiscount.ToString();
                                    ddrep_InvRentSubTotal.DR = strDiscountReason;
                                    ddrep_InvRentSubTotal.rw1.Visible = false;
                                    ddrep_InvRentSubTotal.rw2.Visible = false;
                                    ddrep_InvRentSubTotal.rTax.Text = dblTax.ToString();
                                }
                            }
                            else
                            {
                                ddrep_InvMain.subrepSubtotal.ReportSource = ddrep_InvSubtotal;
                                ddrep_InvSubtotal.DecimalPlace = Settings.DecimalPlace;
                                ddrep_InvSubtotal.rSubTotal.Text = dblOrderSubtotal.ToString();
                                ddrep_InvSubtotal.rDiscount.Text = dblDiscount.ToString();
                                ddrep_InvSubtotal.DR = strDiscountReason;
                                ddrep_InvSubtotal.rTax.Text = dblTax.ToString();
                            }

                            if (dblTax != 0)
                            {
                                ddtbl2.Columns.Add("Name", System.Type.GetType("System.String"));
                                ddtbl2.Columns.Add("Amount", System.Type.GetType("System.String"));

                                if (dblTax1 != 0)
                                {
                                    ddtbl2.Rows.Add(new object[] { strTaxNM1, dblTax1.ToString() });
                                }

                                if (dblTax2 != 0)
                                {
                                    ddtbl2.Rows.Add(new object[] { strTaxNM2, dblTax2.ToString() });
                                }

                                if (dblTax3 != 0)
                                {
                                    ddtbl2.Rows.Add(new object[] { strTaxNM3, dblTax3.ToString() });
                                }

                                if (dblDTax != 0)
                                {
                                    ddtbl2.Rows.Add(new object[] { "Dest. Tax: " + strDTaxNM, dblDTax.ToString() });
                                }

                                ddrep_InvMain.subrepTax.ReportSource = ddrep_InvTax;
                                ddrep_InvTax.DecimalPlace = Settings.DecimalPlace;

                                ddrep_InvTax.Report.DataSource = ddtbl2;
                                ddrep_InvTax.rDTax1.DataBindings.Add("Text", ddtbl2, "Name");
                                ddrep_InvTax.rDTax2.DataBindings.Add("Text", ddtbl2, "Amount");
                            }

                            PosDataObject.POS dobjPOS23 = new PosDataObject.POS();
                            dobjPOS23.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            if (intHeaderStatus != 18) ddtbl5 = dobjPOS23.FetchInvoiceCoupons(intINV);
                            else ddtbl5 = dobjPOS23.FetchInvoiceCoupons(RprParent);
                            if (ddtbl5.Rows.Count > 0)
                            {
                                ddrep_InvMain.subrepCoupon.ReportSource = ddrep_InvCoupon;
                                ddrep_InvCoupon.DecimalPlace = Settings.DecimalPlace;
                                ddrep_InvCoupon.Report.DataSource = dtbl5;
                                ddrep_InvCoupon.rAmt.Text = dblCoupon.ToString();
                                ddrep_InvCoupon.rDTax1.DataBindings.Add("Text", ddtbl5, "Name");
                                ddrep_InvCoupon.rDTax2.DataBindings.Add("Text", ddtbl5, "Amount");
                            }

                            PosDataObject.POS dobjPOS4 = new PosDataObject.POS();
                            dobjPOS4.Connection = new SqlConnection(SystemVariables.ConnectionString);
                            ddtbl3 = dobjPOS4.FetchInvoiceTenderForHouseAccount(intTranNo);

                            dblTenderAmt = 0;
                            foreach (DataRow dr1 in ddtbl3.Rows)
                            {
                                dblTenderAmt = dblTenderAmt + GeneralFunctions.fnDouble(dr1["Amount"].ToString());
                            }

                            ddrep_InvMain.subrepTender.ReportSource = ddrep_InvTendering;
                            ddrep_InvTendering.Report.DataSource = ddtbl3;
                            ddrep_InvTendering.DecimalPlace = Settings.DecimalPlace;

                            if (Settings.ShowFeesInReceipt == "Y")
                            {
                                bool bfdata = false;
                                bool bftx = false;
                                DataTable dFees = FetchInvFees(intINV);
                                if (dblFees + dblFeesCoupon != 0)
                                {
                                    if (dFees.Rows.Count == 1) ddrep_InvTendering.lbFees.Text = dFees.Rows[0]["FeesName"].ToString();
                                    ddrep_InvTendering.rFees.Text = (dblFees + dblFeesCoupon).ToString();
                                    ddrep_InvTendering.rFees.Visible = true;
                                    ddrep_InvTendering.lbFees.Visible = true;
                                }
                                else
                                {
                                    bfdata = true;
                                }
                                if (dblFeesTax + dblFeesCouponTax != 0)
                                {
                                    if (dFees.Rows.Count == 1) ddrep_InvTendering.lbFeeTx.Text = dFees.Rows[0]["FeesName"].ToString() + " " + "Tax";
                                    ddrep_InvTendering.rFeeTx.Text = (dblFeesTax + dblFeesCouponTax).ToString();
                                    ddrep_InvTendering.rFeeTx.Visible = true;
                                    ddrep_InvTendering.lbFeeTx.Visible = true;
                                }
                                else
                                {
                                    bftx = true;
                                }
                                if ((bfdata) && (bftx))
                                {
                                    ddrep_InvTendering.ReportHeader.Visible = false;
                                }
                            }

                            if ((intHeaderStatus == 15) && (calcrent == "Y")) ddrep_InvTendering.rTotal.Text = dblRentDeposit.ToString();
                            else if ((intHeaderStatus == 15) && (calcrent == "N")) ddrep_InvTendering.rTotal.Text = (dblOrderTotal + dblRentDeposit).ToString();
                            else ddrep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                            //drep_InvTendering.rTotal.Text = dblOrderTotal.ToString();

                            ddrep_InvTendering.rTenderName.DataBindings.Add("Text", ddtbl3, "DisplayAs");
                            ddrep_InvTendering.rTenderAmt.DataBindings.Add("Text", ddtbl3, "Amount");
                            ddrep_InvTendering.rChangeDue.Visible = false;
                            ddrep_InvTendering.rChangeDueText.Visible = false;
                            if (strservice == "Repair")
                            {
                                if (intHeaderStatus == 17)
                                {
                                    ddrep_InvTendering.rlbAdvance.Text = Properties.Resources.Advance_Amount;
                                    ddrep_InvTendering.rAdvance.Text = dblRepairAdvanceAmount.ToString();
                                    ddrep_InvTendering.rlbDue.Text = Properties.Resources.Balance_Due;
                                    ddrep_InvTendering.rDue.Text = (dblRepairAmount - dblRepairAdvanceAmount).ToString();
                                }
                                if (intHeaderStatus == 18)
                                {
                                    ddrep_InvTendering.rlbAdvance.Text = "";
                                    ddrep_InvTendering.rAdvance.Text = "";

                                }
                            }
                            else
                            {
                                ddrep_InvTendering.rlbAdvance.Text = "";
                                ddrep_InvTendering.rAdvance.Text = "";
                                ddrep_InvTendering.rlbDue.Text = "";
                                ddrep_InvTendering.rDue.Text = "";

                                ddrep_InvTendering.rtr1.HeightF = 1.0f;
                                ddrep_InvTendering.rtr2.HeightF = 1.0f;
                                ddrep_InvTendering.rtbl.HeightF = 55.0f;
                                ddrep_InvTendering.PageHeader.HeightF = 55.0f;
                            }

                            /*
                            EffectiveTotal = 0;
                            if ((intHeaderStatus == 15) && (calcrent == "Y")) EffectiveTotal = dblRentDeposit;
                            else if ((intHeaderStatus == 15) && (calcrent == "N")) EffectiveTotal = dblOrderTotal + dblRentDeposit;
                            else EffectiveTotal = dblOrderTotal;

                            if (dblTenderAmt != EffectiveTotal)
                            {
                                drep_InvTendering.ChangeDue = true;
                                drep_InvTendering.ReportFooter.Visibility = Visibility.Visible;
                                drep_InvTendering.rChangeDueText.Text = "Change";
                                drep_InvTendering.rChangeDue.Text = Convert.ToString(dblTenderAmt - EffectiveTotal);
                            }
                            else
                            {
                                drep_InvTendering.ChangeDue = false;
                                drep_InvTendering.ReportFooter.Visibility=Visibility.Collapsed;
                            }

                            if (Settings.POSShowGiftCertBalance == "Y")
                            {
                                PosDataObject.POS dobjPOS5 = new PosDataObject.POS();
                                dobjPOS5.Connection = new SqlConnection(SystemVariables.ConnectionString);
                                dtbl4 = dobjPOS5.ActiveGiftCert(intINV, Settings.CentralExportImport, Settings.StoreCode);
                                if (dtbl4.Rows.Count > 0)
                                {
                                    drep_InvMain.subrepGC.ReportSource = drep_InvGC;
                                    drep_InvGC.Report.DataSource = ddtbl4;
                                    drep_InvGC.DecimalPlace = Settings.DecimalPlace;
                                    drep_InvGC.rGCHeader.Text = "Gift Cert. with balance as on : " + DateTime.Today.Date.ToShortDateString();
                                    drep_InvGC.rGCName.DataBindings.Add("Text", ddtbl4, "GC");
                                    drep_InvGC.rGCAmt.DataBindings.Add("Text", ddtbl4, "GCAMT");
                                }
                            }


                            prmmgc = 0;
                            PosDataObject.POS obcc01mgc1 = new PosDataObject.POS();
                            obcc01mgc1.Connection = SystemVariables.Conn;
                            prmmgc = obcc01mgc1.GetTranIDFromInvoiceID(intINV);
                            DataTable ccdtbl11mgc1 = new DataTable();
                            PosDataObject.POS obcc11mgc1 = new PosDataObject.POS();
                            obcc11mgc1.Connection = SystemVariables.Conn;
                            ccdtbl11mgc1 = obcc11mgc1.FetchMercuryGiftCardData(prmmgc);

                            if (ccdtbl11mgc1.Rows.Count > 0)
                            {
                                drep_InvMain.subrepMGC.ReportSource = drep_InvMGC;
                                drep_InvMGC.Report.DataSource = ccdtbl11mgc1;
                                drep_InvMGC.DecimalPlace = Settings.DecimalPlace;
                                drep_InvMGC.rGCName.DataBindings.Add("Text", ccdtbl11mgc1, "RefCardAct");
                                drep_InvMGC.rGCAmt.DataBindings.Add("Text", ccdtbl11mgc1, "RefCardBalance");
                            }
                            */

                            if (Settings.POSPrintInvoice == 0)
                            {

                                //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
                                try
                                {
                                    if (Settings.ReportPrinterName != "") ddrep_InvMain.PrinterName = Settings.ReportPrinterName;
                                    ddrep_InvMain.CreateDocument();
                                    ddrep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                                    ddrep_InvMain.PrintingSystem.ShowPrintStatusDialog = false;

                                    //ddrep_InvMain.ShowPreviewDialog();

                                    DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                                    window.PreviewControl.DocumentSource = ddrep_InvMain;
                                    window.ShowDialog();

                                }
                                finally
                                {

                                    ddrep_InvHeader1.Dispose();
                                    ddrep_InvHeader2.Dispose();
                                    ddrep_InvLine.Dispose();
                                    ddrep_InvSubtotal.Dispose();
                                    ddrep_InvTax.Dispose();
                                    ddrep_InvTendering.Dispose();
                                    ddrep_InvGC.Dispose();
                                    ddrep_InvCoupon.Dispose();
                                    ddrep_InvMain.Dispose();

                                    ddtbl.Dispose();
                                    ddtbl1.Dispose();
                                    ddtbl2.Dispose();
                                    ddtbl3.Dispose();
                                    ddtbl4.Dispose();
                                    ddtbl5.Dispose();
                                }
                            }

                            if (Settings.POSPrintInvoice == 1)
                            {
                                try
                                {
                                    ddrep_InvMain.CreateDocument();
                                    ddrep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                                    ddrep_InvMain.PrinterName = Settings.ReceiptPrinterName;
                                    GeneralFunctions.PrintReport(ddrep_InvMain);
                                }
                                catch
                                {
                                }
                                finally
                                {
                                    ddrep_InvMain.Dispose();
                                    ddrep_InvHeader1.Dispose();
                                    ddrep_InvHeader2.Dispose();
                                    ddrep_InvLine.Dispose();
                                    ddrep_InvSubtotal.Dispose();
                                    ddrep_InvTax.Dispose();
                                    ddrep_InvTendering.Dispose();
                                    ddrep_InvGC.Dispose();
                                    ddrep_InvCoupon.Dispose();
                                    ddtbl.Dispose();
                                    ddtbl1.Dispose();
                                    ddtbl2.Dispose();
                                    ddtbl3.Dispose();
                                    ddtbl4.Dispose();
                                    ddtbl5.Dispose();
                                }
                            }
                        }

                    }
                    else // Preprinted format
                    {
                        bool printlayaway = false;
                        if ((blLayaway) || (blNewLayaway) || (blLayawayRefund)) printlayaway = true;
                        if (printlayaway)
                        {
                            ExecuteCustomerReport();
                            return;
                        }
                        DataTable dtbl = new DataTable();
                        PosDataObject.POS objPOS1 = new PosDataObject.POS();
                        objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dtbl = objPOS1.FetchInvoiceHeader(intINV, Settings.StoreCode);

                        DataTable dlogo = new DataTable();
                        objPOS1.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dlogo = objPOS1.FetchStoreLogo();
                        bool boolnulllogo = false;
                        foreach (DataRow drl1 in dtbl.Rows)
                        {
                            foreach (DataRow drl2 in dlogo.Rows)
                            {
                                if (drl2["logo"] == null) boolnulllogo = true;
                                drl1["Logo"] = drl2["logo"];
                            }
                        }

                        int intTranNo = 0;
                        double dblOrderTotal = 0;
                        double dblOrderSubtotal = 0;
                        double dblDiscount = 0;
                        double dblCoupon = 0;
                        double dblTax = 0;
                        int intCID = 0;
                        string strCInfo = "";
                        string strDiscountReason = "";
                        double dblTax1 = 0;
                        double dblTax2 = 0;
                        double dblTax3 = 0;
                        string strTaxNM1 = "";
                        string strTaxNM2 = "";
                        string strTaxNM3 = "";
                        string strservice = "";
                        int intHeaderStatus = 0;
                        double dblRentDeposit = 0;
                        double dblRepairAmount = 0;
                        double dblRepairAdvanceAmount = 0;
                        string strRepairDeliveryDate = "";
                        string calcrent = "N";

                        foreach (DataRow dr in dtbl.Rows)
                        {
                            intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                            intCID = GeneralFunctions.fnInt32(dr["CID"].ToString());
                            dblOrderTotal = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
                            dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                            dblCoupon = GeneralFunctions.fnDouble(dr["Coupon"].ToString());
                            dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                            dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                            dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                            dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                            strTaxNM1 = dr["TaxNM1"].ToString();
                            strTaxNM2 = dr["TaxNM2"].ToString();
                            strTaxNM3 = dr["TaxNM3"].ToString();

                            strDiscountReason = dr["DiscountReason"].ToString();
                            strservice = dr["ServiceType"].ToString();
                            intHeaderStatus = GeneralFunctions.fnInt32(dr["Status"].ToString());
                            dblRentDeposit = GeneralFunctions.fnDouble(dr["RentDeposit"].ToString());

                            dblRepairAmount = GeneralFunctions.fnDouble(dr["RepairAmount"].ToString());
                            dblRepairAdvanceAmount = GeneralFunctions.fnDouble(dr["RepairAdvanceAmount"].ToString());
                            if (dr["RepairDeliveryDate"].ToString() != "") strRepairDeliveryDate = GeneralFunctions.fnDate(dr["RepairDeliveryDate"].ToString()).ToShortDateString();
                            calcrent = dr["IsRentCalculated"].ToString();
                            strCInfo = dr["CustDetails"].ToString();
                        }

                        blCardPayment = IsCardPayment(intTranNo);

                        DataTable dtbl1 = new DataTable();
                        DataTable dtbl2 = new DataTable();
                        DataTable dtbl3 = new DataTable();
                        DataTable dtbl4 = new DataTable();
                        DataTable dtbl5 = new DataTable();

                        OfflineRetailV2.Report.Sales.PrePrint.repPPInv rep_InvMain = new OfflineRetailV2.Report.Sales.PrePrint.repPPInv();
                        OfflineRetailV2.Report.Sales.PrePrint.repPPInvHeader rep_InvHeader1 = new OfflineRetailV2.Report.Sales.PrePrint.repPPInvHeader();
                        OfflineRetailV2.Report.Sales.PrePrint.repPPInvLine rep_InvLine = new OfflineRetailV2.Report.Sales.PrePrint.repPPInvLine();
                        OfflineRetailV2.Report.Sales.PrePrint.repPPInvSubtotal rep_InvSubtotal = new OfflineRetailV2.Report.Sales.PrePrint.repPPInvSubtotal();
                        OfflineRetailV2.Report.Sales.PrePrint.repPPInvTax rep_InvTax = new OfflineRetailV2.Report.Sales.PrePrint.repPPInvTax();
                        OfflineRetailV2.Report.Sales.PrePrint.repPPInvTendering rep_InvTendering = new OfflineRetailV2.Report.Sales.PrePrint.repPPInvTendering();

                        OfflineRetailV2.Report.Sales.PrePrint.repPPLayLine rep_PPLayLine = new OfflineRetailV2.Report.Sales.PrePrint.repPPLayLine();

                        GeneralFunctions.MakeReportWatermark(rep_InvMain);
                        rep_InvMain.rReportHeader.Text = Settings.MainReceiptHeader;
                        if (Settings.DemoVersion == "Y") rep_InvHeader1.rDemo.Visible = true;
                        else rep_InvHeader1.rDemo.Visible = false;

                        rep_InvMain.subrepH.ReportSource = rep_InvHeader1;
                        rep_InvHeader1.Report.DataSource = dtbl;

                        rep_InvHeader1.rOrder.Text = intINV.ToString();
                        rep_InvHeader1.rDate.DataBindings.Add("Text", dtbl, "TransDate");
                        rep_InvHeader1.rTime.DataBindings.Add("Text", dtbl, "TransDate");

                        if (intCID > 0)
                        {
                            rep_InvHeader1.rCustomer.DataBindings.Add("Text", dtbl, "CustID");
                            rep_InvHeader1.rCustDetails.DataBindings.Add("Text", dtbl, "CustDetails");
                        }
                        else
                        {
                            rep_InvHeader1.rCustomer.Visible = false;
                            rep_InvHeader1.rCustDetails.Visible = false;
                        }

                        rep_InvHeader1.rClerk.DataBindings.Add("Text", dtbl, "EmpID");
                        rep_InvHeader1.rStore.DataBindings.Add("Text", dtbl, "StoreID");
                        rep_InvHeader1.rRegister.DataBindings.Add("Text", dtbl, "RegisterID");

                        PosDataObject.POS objPOS2 = new PosDataObject.POS();
                        objPOS2.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dtbl1 = objPOS2.FetchInvoiceDetails1(intINV, dblOrderTotal < 0 ? true : false, Settings.TaxInclusive);
                        RearrangeForTaggedItemInInvoice(dtbl1);

                        rep_InvMain.subrepL.ReportSource = rep_InvLine;
                        rep_InvLine.DecimalPlace = Settings.DecimalPlace;
                        rep_InvLine.Report.DataSource = dtbl1;
                        rep_InvLine.rQty.DataBindings.Add("Text", dtbl1, "Qty");
                        rep_InvLine.rSKU.DataBindings.Add("Text", dtbl1, "SKU");
                        rep_InvLine.rItem.DataBindings.Add("Text", dtbl1, "Description");
                        rep_InvLine.rRate.DataBindings.Add("Text", dtbl1, "Price");
                        rep_InvLine.rTot.DataBindings.Add("Text", dtbl1, "TotalPrice");
                        rep_InvLine.rDisc.DataBindings.Add("Text", dtbl1, "DiscountInfo");

                        foreach (DataRow dr12 in dtbl1.Rows)
                        {
                            dblOrderSubtotal = dblOrderSubtotal + GeneralFunctions.fnDouble(dr12["TotalPrice"].ToString()); //+ GeneralFunctions.fnDouble(dr12["Discount"].ToString());
                        }

                        //dblOrderSubtotal = Settings.TaxInclusive == "N" ? dblOrderSubtotal : dblOrderSubtotal - dblTax;

                        rep_InvMain.subrepS.ReportSource = rep_InvSubtotal;
                        rep_InvSubtotal.DecimalPlace = Settings.DecimalPlace;
                        rep_InvSubtotal.rSubTotal.Text = dblOrderSubtotal.ToString();

                        if (dblTax != 0)
                        {
                            dtbl2.Columns.Add("Name", System.Type.GetType("System.String"));
                            dtbl2.Columns.Add("Amount", System.Type.GetType("System.String"));

                            if (dblTax1 != 0)
                            {
                                dtbl2.Rows.Add(new object[] { strTaxNM1, dblTax1.ToString() });
                            }

                            if (dblTax2 != 0)
                            {
                                dtbl2.Rows.Add(new object[] { strTaxNM2, dblTax2.ToString() });
                            }

                            if (dblTax3 != 0)
                            {
                                dtbl2.Rows.Add(new object[] { strTaxNM3, dblTax3.ToString() });
                            }

                            rep_InvMain.subrepX.ReportSource = rep_InvTax;
                            rep_InvTax.DecimalPlace = Settings.DecimalPlace;

                            rep_InvTax.Report.DataSource = dtbl2;
                            rep_InvTax.rDTax1.DataBindings.Add("Text", dtbl2, "Name");
                            rep_InvTax.rDTax2.DataBindings.Add("Text", dtbl2, "Amount");
                        }

                        PosDataObject.POS objPOS4 = new PosDataObject.POS();
                        objPOS4.Connection = new SqlConnection(SystemVariables.ConnectionString);
                        dtbl3 = objPOS4.FetchInvoiceTender(intTranNo);
                        dtbl3 = RearrangeTenderForCashBack(intTranNo, dtbl3);
                        double dblTenderAmt = 0;

                        foreach (DataRow dr1 in dtbl3.Rows)
                        {
                            if (dr1["DisplayAs"].ToString() == "Debit Card Total") continue;
                            dblTenderAmt = dblTenderAmt + GeneralFunctions.fnDouble(dr1["Amount"].ToString());
                        }

                        rep_InvMain.subrepT.ReportSource = rep_InvTendering;
                        rep_InvTendering.Report.DataSource = dtbl3;
                        rep_InvTendering.DecimalPlace = Settings.DecimalPlace;
                        rep_InvTendering.rTotal.Text = dblOrderTotal.ToString();
                        rep_InvTendering.rTenderName.DataBindings.Add("Text", dtbl3, "DisplayAs");
                        rep_InvTendering.rTenderAmt.DataBindings.Add("Text", dtbl3, "Amount");

                        double EffectiveTotal = 0;

                        EffectiveTotal = dblOrderTotal;

                        if (dblTenderAmt != EffectiveTotal)
                        {

                        }
                        else
                        {

                        }

                        if (Settings.POSPrintInvoice == 0)
                        {

                            //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
                            try
                            {
                                if (Settings.ReportPrinterName != "") rep_InvMain.PrinterName = Settings.ReportPrinterName;
                                rep_InvMain.CreateDocument();
                                rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                                rep_InvMain.PrintingSystem.ShowPrintStatusDialog = false;

                                //rep_InvMain.ShowPreviewDialog();

                                DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                                window.PreviewControl.DocumentSource = rep_InvMain;
                                window.ShowDialog();

                            }
                            finally
                            {
                                rep_InvMain.Dispose();
                                rep_InvHeader1.Dispose();
                                rep_InvLine.Dispose();
                                rep_InvSubtotal.Dispose();
                                rep_InvTax.Dispose();
                                rep_InvTendering.Dispose();

                                dtbl.Dispose();
                                dtbl1.Dispose();
                                dtbl2.Dispose();
                                dtbl3.Dispose();
                                dtbl4.Dispose();
                                dtbl5.Dispose();
                            }
                        }

                        if (Settings.POSPrintInvoice == 1)
                        {
                            try
                            {
                                rep_InvMain.CreateDocument();
                                rep_InvMain.PrintingSystem.ShowMarginsWarning = false;
                                rep_InvMain.PrinterName = Settings.ReceiptPrinterName;
                                GeneralFunctions.PrintReport(rep_InvMain);
                            }
                            catch
                            {
                            }
                            finally
                            {
                                rep_InvMain.Dispose();
                                rep_InvHeader1.Dispose();
                                rep_InvLine.Dispose();
                                rep_InvSubtotal.Dispose();
                                rep_InvTax.Dispose();
                                rep_InvTendering.Dispose();
                                dtbl.Dispose();
                                dtbl1.Dispose();
                                dtbl2.Dispose();
                                dtbl3.Dispose();
                                dtbl4.Dispose();
                                dtbl5.Dispose();
                            }
                        }
                    }
                }
            }
        }

        private bool IsGCSales(int pinvno)
        {
            if (Settings.PrintDuplicateGiftCertSaleReceipt == "N")
            {
                return false;
            }
            else
            {
                PosDataObject.POS objposTT = new PosDataObject.POS();
                objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
                return objposTT.CheckIfGiftCertSaleReceipt(pinvno);

            }
        }

        // Preprinted Layout Report

        private void ExecuteCustomerReport()
        {
            double tot = 0;
            double pmt = 0;

            //frmPreviewControl frm_PreviewControl = new frmPreviewControl();

            DataTable dtbl = new DataTable();
            PosDataObject.POS objSales = new PosDataObject.POS();
            objSales.Connection = SystemVariables.Conn;
            dtbl = objSales.FetchLayawayHeaderForPreprint(LayawayNoForInvoicePrinting(), intLAYTRAN, false, Settings.StoreCode);

            if (dtbl.Rows.Count == 0)
            {
                DocMessage.MsgInformation(Properties.Resources.No_Record_found_for_Printing);
                dtbl.Dispose();
                return;
            }


            OfflineRetailV2.Report.Layaway.repLayawayPP rep_LayawayCust = new OfflineRetailV2.Report.Layaway.repLayawayPP();
            GeneralFunctions.MakeReportWatermark(rep_LayawayCust);
            rep_LayawayCust.rReportHeader.Text = Settings.ReportHeader;
            //rep_LayawayCust.DecimalPlace = Settings.DecimalPlace;

            DataTable p = new DataTable("Parent");
            p.Columns.Add("TransDate", System.Type.GetType("System.String"));
            p.Columns.Add("StoreID", System.Type.GetType("System.String"));
            p.Columns.Add("RegisterID", System.Type.GetType("System.String"));
            p.Columns.Add("EmpID", System.Type.GetType("System.String"));
            p.Columns.Add("CustID", System.Type.GetType("System.String"));
            p.Columns.Add("CustDetails", System.Type.GetType("System.String"));
            p.Columns.Add("InvoiceNo", System.Type.GetType("System.String"));
            p.Columns.Add("LayawayNo", System.Type.GetType("System.Int32"));
            p.Columns.Add("SKU", System.Type.GetType("System.String"));
            p.Columns.Add("Description", System.Type.GetType("System.String"));
            p.Columns.Add("DiscountInfo", System.Type.GetType("System.String"));
            p.Columns.Add("Qty", System.Type.GetType("System.String"));
            p.Columns.Add("Price", System.Type.GetType("System.String"));
            p.Columns.Add("TotalSale", System.Type.GetType("System.String"));
            p.Columns.Add("DateDue", System.Type.GetType("System.String"));

            foreach (DataRow dr in dtbl.Rows)
            {
                DataRow r1 = p.NewRow();
                r1["TransDate"] = dr["TransDate"].ToString();
                r1["StoreID"] = dr["StoreID"].ToString();
                r1["RegisterID"] = dr["RegisterID"].ToString();
                r1["EmpID"] = dr["EmpID"].ToString();
                r1["CustID"] = dr["CustID"].ToString();
                r1["CustDetails"] = dr["CustDetails"].ToString();
                r1["InvoiceNo"] = dr["InvoiceNo"].ToString();
                r1["LayawayNo"] = GeneralFunctions.fnInt32(dr["LayawayNo"].ToString());
                r1["SKU"] = dr["SKU"].ToString();
                r1["Description"] = dr["Description"].ToString();
                r1["DiscountInfo"] = dr["DiscountInfo"].ToString();
                r1["Qty"] = dr["Qty"].ToString();
                r1["Price"] = dr["Price"].ToString();
                r1["TotalSale"] = dr["TotalSale"].ToString();
                r1["DateDue"] = dr["DateDue"].ToString();
                p.Rows.Add(r1);

                tot = tot + GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
            }

            DataTable dtbl1 = new DataTable();
            PosDataObject.POS objProduct1 = new PosDataObject.POS();
            objProduct1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtbl1 = objProduct1.FetchLayawayPaymentPreprint(LayawayNoForInvoicePrinting(), intLAYNO);

            foreach (DataRow dr2 in dtbl1.Rows)
            {
                pmt = pmt + GeneralFunctions.fnDouble(dr2["Payment"].ToString());
            }

            DataTable dtbl2 = new DataTable();
            PosDataObject.POS objProduct2 = new PosDataObject.POS();
            objProduct2.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtbl2 = objProduct2.FetchInvoiceTender(intLAYTRAN);
            dtbl2 = RearrangeTenderForCashBack(intLAYTRAN, dtbl2);
            string t1 = "";
            string t2 = "";
            foreach (DataRow dr3 in dtbl2.Rows)
            {
                t1 = (t1 == "") ? "Paid in " + dr3["DisplayAs"].ToString() : t1 + "\r\n" + "Paid in " + dr3["DisplayAs"].ToString();
                t2 = (t2 == "") ? SystemVariables.CurrencySymbol + GeneralFunctions.fnDouble(dr3["Amount"].ToString()).ToString("f") : t2 + "\r\n" + SystemVariables.CurrencySymbol + GeneralFunctions.fnDouble(dr3["Amount"].ToString()).ToString("f");
            }
            DataTable c = new DataTable("Child");

            c.Columns.Add("TransDate", System.Type.GetType("System.String"));
            c.Columns.Add("StoreID", System.Type.GetType("System.String"));
            c.Columns.Add("RegisterID", System.Type.GetType("System.String"));
            c.Columns.Add("EmpID", System.Type.GetType("System.String"));
            c.Columns.Add("CustID", System.Type.GetType("System.String"));
            c.Columns.Add("CustDetails", System.Type.GetType("System.String"));
            c.Columns.Add("InvoiceNo", System.Type.GetType("System.String"));
            c.Columns.Add("LayawayNo", System.Type.GetType("System.Int32"));
            c.Columns.Add("SKU", System.Type.GetType("System.String"));
            c.Columns.Add("Description", System.Type.GetType("System.String"));
            c.Columns.Add("DiscountInfo", System.Type.GetType("System.String"));
            c.Columns.Add("Qty", System.Type.GetType("System.String"));
            c.Columns.Add("Price", System.Type.GetType("System.String"));
            c.Columns.Add("TotalSale", System.Type.GetType("System.String"));

            c.Columns.Add("DateDue", System.Type.GetType("System.String"));
            c.Columns.Add("TransactionNo", System.Type.GetType("System.String"));
            c.Columns.Add("PaymentDateTime", System.Type.GetType("System.String"));
            c.Columns.Add("PaymentType", System.Type.GetType("System.String"));
            c.Columns.Add("PaymentDate", System.Type.GetType("System.String"));
            c.Columns.Add("Payment", System.Type.GetType("System.String"));
            c.Columns.Add("BalanceDue", System.Type.GetType("System.String"));
            c.Columns.Add("Tender1", System.Type.GetType("System.String"));
            c.Columns.Add("Tender2", System.Type.GetType("System.String"));

            foreach (DataRow dr in dtbl1.Rows)
            {
                double crgamt = 0;

                DataRow r1 = c.NewRow();
                string a1 = "", a2 = "", a4 = "", a5 = "", a6 = "", a7 = "", a8 = "", a9 = "", a10 = "", a11 = "", a12 = "", a13 = "",
                    a14 = "", a15 = "", a16 = "", a17 = "", a18 = "";
                int a3 = 0;
                foreach (DataRow dr1 in p.Rows)
                {

                    if (dr["InvoiceNo"].ToString() == dr1["InvoiceNo"].ToString())
                    {
                        a11 = dr1["TransDate"].ToString();
                        a12 = dr1["StoreID"].ToString();
                        a13 = dr1["RegisterID"].ToString();
                        a14 = dr1["EmpID"].ToString();
                        a15 = dr1["DiscountInfo"].ToString();
                        a16 = dr1["Qty"].ToString();
                        a17 = dr1["Price"].ToString();
                        a1 = dr1["CustID"].ToString();
                        a2 = dr1["CustDetails"].ToString();
                        a3 = GeneralFunctions.fnInt32(dr1["LayawayNo"].ToString());
                        a4 = dr1["SKU"].ToString();
                        a5 = dr1["Description"].ToString();
                        a6 = dr1["TotalSale"].ToString();
                        a7 = dr1["DateDue"].ToString();

                        break;
                    }
                }

                r1["TransDate"] = a11;
                r1["StoreID"] = a12;
                r1["RegisterID"] = a13;
                r1["EmpID"] = a14;
                r1["DiscountInfo"] = a15;
                r1["Qty"] = a16;
                r1["Price"] = a17;
                r1["CustID"] = a1;
                r1["CustDetails"] = a2;
                r1["InvoiceNo"] = dr["InvoiceNo"].ToString();
                r1["LayawayNo"] = a3;
                r1["SKU"] = a4;
                r1["Description"] = a5;
                r1["TotalSale"] = a6;
                r1["DateDue"] = a7;
                r1["TransactionNo"] = dr["TransactionNo"].ToString();
                r1["PaymentDateTime"] = dr["PaymentDate"].ToString();
                r1["PaymentType"] = dr["PaymentType"].ToString();
                r1["PaymentDate"] = GeneralFunctions.fnDate(dr["PaymentDate"].ToString()).ToString(SystemVariables.DateFormat);
                r1["Payment"] = dr["Payment"].ToString();
                r1["BalanceDue"] = (tot - pmt).ToString();
                r1["Tender1"] = t1;
                r1["Tender2"] = t2;
                c.Rows.Add(r1);

            }

            DataSet ds = new DataSet();
            ds.Tables.Add(p);
            ds.Tables.Add(c);


            DataRelation relation = new DataRelation("ParentChild",
            ds.Tables["Parent"].Columns["InvoiceNo"],
            ds.Tables["Child"].Columns["InvoiceNo"]);
            ds.Relations.Add(relation);
            //relation.Nested = true;
            GeneralFunctions.MakeReportWatermark(rep_LayawayCust);
            rep_LayawayCust.rReportHeader.Text = Settings.MainReceiptHeader;
            rep_LayawayCust.GroupHeader2.GroupFields.Add(rep_LayawayCust.CreateGroupField("CustID"));
            rep_LayawayCust.GroupHeader1.GroupFields.Add(rep_LayawayCust.CreateGroupField("LayawayNo"));
            rep_LayawayCust.GroupHeader1.GroupFields[0].SortOrder = DevExpress.XtraReports.UI.XRColumnSortOrder.Ascending;
            //rep_LayawayCust.GroupHeader3.GroupFields.Add(rep_LayawayCust.CreateGroupField("PaymentDateTime"));

            rep_LayawayCust.DataSource = ds;

            //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
            try
            {
                if (Settings.ReportPrinterName != "") rep_LayawayCust.PrinterName = Settings.ReportPrinterName;
                rep_LayawayCust.CreateDocument();
                rep_LayawayCust.PrintingSystem.ShowMarginsWarning = false;
                rep_LayawayCust.PrintingSystem.ShowPrintStatusDialog = false;

                //rep_LayawayCust.ShowPreviewDialog();

                DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                window.PreviewControl.DocumentSource = rep_LayawayCust;
                window.ShowDialog();

            }
            finally
            {
                rep_LayawayCust.Dispose();

                dtbl.Dispose();
            }
        }

        // Rearrange Tagged Item in Printing

        private void RearrangeForTaggedItemInInvoice(DataTable dtbl)
        {
            foreach (DataRow dr in dtbl.Rows)
            {
                if ((dr["ProductType"].ToString() == "T") && (dr["TaggedInInvoice"].ToString() == "Y"))
                {
                    double qty = GeneralFunctions.fnDouble(dr["Qty"].ToString());
                    DataTable ptbl = new DataTable();
                    PosDataObject.Product objp = new PosDataObject.Product();
                    objp.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    ptbl = objp.FetchTaggedData(GeneralFunctions.fnInt32(dr["ProductID"].ToString()));
                    string str = "";
                    foreach (DataRow dr1 in ptbl.Rows)
                    {
                        double val = qty * GeneralFunctions.fnDouble(dr1["ItemQty"].ToString());
                        if (str == "")
                        {
                            str = dr1["ItemName"].ToString() + "   " + val.ToString();
                        }
                        else
                        {
                            str = str + "\n" + dr1["ItemName"].ToString() + "   " + val.ToString();
                        }
                    }
                    string pval = dr["Description"].ToString() + "\n" + str;
                    dr["Description"] = pval;
                }
            }
        }

        private void RearrangeForLineDisplay(DataTable dtbl)
        {
            foreach (DataRow dr in dtbl.Rows)
            {

                if (dr["ProductType"].ToString() == "W")
                {
                    dr["Price"] = dr["Price"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["Price"].ToString()).ToString()) + "/lb";
                    dr["NormalPrice"] = dr["NormalPrice"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["NormalPrice"].ToString()).ToString()) + "/lb";
                }
                else
                {
                    dr["Price"] = dr["Price"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["Price"].ToString()).ToString());
                    dr["NormalPrice"] = dr["NormalPrice"].ToString() == "" ? "" : GeneralFunctions.FormatDoubleForPrint(GeneralFunctions.fnDouble(dr["NormalPrice"].ToString()).ToString());
                }

                dr["Qty"] = dr["Qty"].ToString() == "" ? "" : GetDisplayQty(dr["Qty"].ToString(), dr["QtyDecimal"].ToString(), dr["ProductType"].ToString());

                if ((Settings.ScaleDevice == "(None)") && (dr["ProductType"].ToString() == "W"))
                {
                    dr["ExtraValue1"] = "Manual Weight";
                }
            }
        }

        private string GetDisplayQty(string pQty, string pDecimal, string pProdType)
        {
            string ReturnS = pQty;
            bool minusval = false;
            if (pQty.StartsWith("-"))
            {
                minusval = true;
                pQty = pQty.Remove(0, 1);
            }
            if (pDecimal == "")
            {
                ReturnS = pQty;
            }
            else
            {
                if ((pProdType == "Z") || (pProdType == "C") || (pProdType == "H"))
                {
                    ReturnS = pQty;
                }
                else
                {
                    decimal dQty = GeneralFunctions.fnDecimal(pQty);
                    int IPart = (int)Decimal.Truncate(dQty);
                    Decimal decimal_part = dQty - Decimal.Truncate(IPart);
                    if (decimal_part == 0)
                    {
                        ReturnS = IPart.ToString();
                    }
                    else
                    {
                        if (pDecimal == "0")
                        {
                            ReturnS = pQty;
                        }
                        else
                        {
                            string TempDecimal = "";
                            string strDecimal = decimal_part.ToString();
                            TempDecimal = strDecimal.Substring(2);

                            if (pDecimal == "1") ReturnS = String.Format("{0:0.0}", GeneralFunctions.fnDecimal(IPart + "." + TempDecimal));
                            if (pDecimal == "2") ReturnS = String.Format("{0:0.00}", GeneralFunctions.fnDecimal(IPart + "." + TempDecimal));
                            if (pDecimal == "3") ReturnS = String.Format("{0:0.000}", GeneralFunctions.fnDecimal(IPart + "." + TempDecimal));

                        }
                    }
                }
            }
            if (pProdType == "W")
            {
                ReturnS = ReturnS + " lb";
            }
            if (minusval)
            {
                ReturnS = "(" + ReturnS + ")";
            }
            return ReturnS;
        }

        private bool IsDatacapManual(int intTrnNo)
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsDatacapManualTendering(intTrnNo);
        }

        // Check if Card Payment Exists or Not ( Printing )

        private bool IsCardPayment(int intTrnNo)
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsCardPayment(intTrnNo);
        }

        // Check if House Account Payment Exists or Not ( Printing )

        private bool IsHAPayment(int intTrnNo)
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsHouseAccountPayment(intTrnNo);
        }

        // Get Work Order Number from Invoice ( Printing )

        private int FetchWorkorderNo(int INV)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objPOS.FetchWorkOrderNo(INV);
        }

        private int FetchRepairParentID(int INV)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objPOS.FetchRepairParentOrder(INV);
        }

        // Get Work Order Date from Invoice ( Printing )

        private string FetchWorkorderDate(int INV)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objPOS.FetchWorkOrderDate(INV);
        }

        private DataTable RearrangeTenderForCashBack(int pTranNo, DataTable dtbl)
        {
            DataTable refData = dtbl.Clone();

            foreach (DataRow dr in dtbl.Rows)
            {
                refData.Rows.Add(new object[] { dr["Name"].ToString(), dr["Amount"].ToString(), dr["Name"].ToString() });
                if (dr["Name"].ToString() == "Debit Card")
                {
                    double cashbk = 0;
                    cashbk = FetchCashBack(pTranNo, GeneralFunctions.fnDouble(dr["Amount"].ToString()));
                    if (cashbk != 0)
                    {
                        refData.Rows.Add(new object[] { "Cash Back", cashbk.ToString(), "Cash Back" });
                        refData.Rows.Add(new object[] { "Debit Card Total", (GeneralFunctions.fnDouble(dr["Amount"].ToString()) + cashbk).ToString(), "Debit Card Total" });
                    }
                }
            }

            return refData;
        }

        // Get Cash Back Amount

        private double FetchCashBack(int TrnNo, double Amt)
        {
            PosDataObject.POS objpos3 = new PosDataObject.POS();
            objpos3.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos3.GetCashBackAmountFromCardTransaction1(TrnNo, Amt);
        }

        // Format Numeric Value

        private string GetFotmatDoubleValue(double dbval)
        {
            string retstr = "";
            if (Settings.DecimalPlace == 3) retstr = dbval.ToString("f3");
            else retstr = dbval.ToString("f");
            if (dbval < 0) retstr = "(" + retstr.Remove(0, 1) + ")";
            return retstr;
        }

        // Get Active Gift Cert. Details

        private DataTable FetchActiveGC(int pCID)
        {
            PosDataObject.POS objposGC = new PosDataObject.POS();
            objposGC.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposGC.ActiveGiftCert(pCID, Settings.CentralExportImport, Settings.StoreCode);
        }

        // Item print on Remote Printer(s) after Transaction

        private void printorders()
        {
            ArrangePrinterData();

            if (dtblPrintData.Rows.Count > 0)
            {
                if (IfPrintOrders())
                {
                    DataTable dtbl = new DataTable();
                    dtbl.Columns.Add("ID", System.Type.GetType("System.String"));

                    int rid = 0;
                    dtblPrintData.DefaultView.Sort = "PrinterID";
                    dtblPrintData.DefaultView.ApplyDefaultSort = true;
                    foreach (DataRowView dr in dtblPrintData.DefaultView)
                    {
                        if ((rid == 0) || (rid != GeneralFunctions.fnInt32(dr["PrinterID"].ToString())))
                        {
                            rid = GeneralFunctions.fnInt32(dr["PrinterID"].ToString());
                            dtbl.Rows.Add(new object[] { rid.ToString() });
                        }
                    }
                    foreach (DataRow dr1 in dtbl.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr1["ID"].ToString()) == 0) continue;
                        prevPrinterID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                        prevPrinterName = getprintername(prevPrinterID);
                        string printername = getprinter(prevPrinterID);
                        if ((printername == "") || (printername == "(None)")) continue;
                        string printertemplateid = getteplateid(prevPrinterID);
                        CheckForNewTemplate(printertemplateid, printername);
                        lineptr = 0;
                        linecnt = 0;
                        dtblstrm.Rows.Clear();
                        GetPrintStream();
                        int i = 1;
                        foreach (DataRow dr in dtblstrm.Rows)
                        {
                            dr["SL"] = i.ToString();
                            i++;
                        }

                        int icopy = (FindNewTemplate) ? NewPrintCopy : 1;

                        for (int pcpy = 0; pcpy < icopy; pcpy++)
                        {
                            try
                            {
                                FlowDocumentScrollViewer FVPrint = new FlowDocumentScrollViewer();

                                CreateFlowControlForItem(FVPrint);

                                var pd = new System.Windows.Controls.PrintDialog();

                                pd.PrintQueue = new System.Printing.PrintQueue(new System.Printing.PrintServer(), printername);

                                System.Windows.Documents.IDocumentPaginatorSource idocument = FVPrint.Document as System.Windows.Documents.IDocumentPaginatorSource;
                                pd.PrintDocument(idocument.DocumentPaginator, "Printing FlowDocument");


                            }
                            catch
                            {
                               
                            }
                        }

                        /*
                        PrintDocument pd = new PrintDocument();
                        PrintPreviewControl prtctrl = new PrintPreviewControl();
                        prtctrl.Document = pd;
                        PrinterSettings ps = new PrinterSettings();
                        ps.PrinterName = printername;
                        try
                        {
                            pd.DefaultPageSettings.PaperSize = ps.DefaultPageSettings.PaperSize;
                        }
                        catch
                        {
                        }
                        pd.PrinterSettings = ps;
                        pd.BeginPrint += new PrintEventHandler(this.beginprint);
                        pd.EndPrint += new PrintEventHandler(this.endprint);
                        pd.PrintPage += new PrintPageEventHandler(this.printpage);

                        if (!pd.PrinterSettings.IsValid)
                        {
                            string msg = String.Format("Can't find printer \"{0}\".", printername);
                            DocMessage.MsgInformation(Properties.Resources.Print_Error__ + msg);
                            return;
                        }
                        pd.Print();*/
                    }
                    dtbl.Dispose();
                }
            }
        }

        private void ArrangePrinterData()
        {
            bool blPrintSavedOrder = true;
            bool chksettings = false;
            dtblPrintData.Rows.Clear();
            DataTable dtbl = new DataTable();
            DataTable dtbl1 = new DataTable();
            DataTable dtbl2 = new DataTable();
            dtbl = dtblPOSDatatbl;
            dtbl1 = dtbl;
            dtbl2 = dtbl;
            foreach (DataRow dr in dtbl.Rows)
            {
                //if (dr["PRINTER"].ToString() == "0") continue;
                if (dr["PRODUCTTYPE"].ToString() == "G") continue;
                bool flg = false;
                foreach (DataRow drF1 in dtblPrintData.Rows)
                {
                    if (drF1["UniqueNo"].ToString() == dr["UNIQUE"].ToString())
                    {
                        flg = true;
                        break;
                    }
                }
                if (flg) continue;
                if (!chksettings)
                {

                    blPrintSavedOrder = true;
                    chksettings = true;
                }
                if (blPrintSavedOrder)
                {
                    string menu = "";
                    string sku = "";
                    menu = dr["PRODUCT"].ToString();
                    double qty = GeneralFunctions.fnDouble(dr["QTY"].ToString());
                    DataTable pdbtbl1 = new DataTable();
                    pdbtbl1 = AttachPrinters(GeneralFunctions.fnInt32(dr["ID"].ToString()), qty);

                    PosDataObject.Product oprod = new PosDataObject.Product();
                    oprod.Connection = SystemVariables.Conn;
                    sku = oprod.GetSKUFromID(GeneralFunctions.fnInt32(dr["ID"].ToString()));
                    if (pdbtbl1.Rows.Count > 0)
                    {

                        foreach (DataRow drp1 in pdbtbl1.Rows)
                        {
                            dtblPrintData.Rows.Add(new object[]
                                                    {
                                                        drp1["PrinterID"].ToString(),
                                                        dr["QTY"].ToString(),sku,menu,
                                                        dr["UNIQUE"].ToString()
                                                    });
                        }
                    }
                    pdbtbl1.Dispose();
                }
            }
        }

        public void beginprint(object sender, PrintEventArgs e)
        {
            f_title = new Font("Lucida Console", 12, System.Drawing.FontStyle.Regular);
            f_body = new Font("Lucida Console", 11, System.Drawing.FontStyle.Regular);
            f_footer = new Font("Lucida Console", 9, System.Drawing.FontStyle.Regular);
        }

        public void endprint(object sender, PrintEventArgs e)
        {
            f_title = null;
            f_body = null;
        }

        public void GetPrintStream()
        {
            if (!FindNewTemplate)
            {
                string SP1 = new string(' ', Settings.NoOfPrintSpace1);
                if (Settings.DemoVersion == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "*** DEMO VERSION ***", "", "" });
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }

                dtblstrm.Rows.Add(new object[] { "", "* " + prevPrinterName + " *", "", "" });

                dtblstrm.Rows.Add(new object[] { "", "Invoice # : " + PrintOrderNo.ToString(), "", "" });
                dtblstrm.Rows.Add(new object[] { "", DateTime.Now.ToString(SystemVariables.DateFormat + " hh:mm:ss tt"), "", "" });

                dtblstrm.Rows.Add(new object[] { "xxx", "xxx", "xxx", "" });

                DataTable prndtblINV = new DataTable();

                int intTranNo = 0;
                int intStoreID = 0;
                int intRegisterID = 0;
                string strEmpID = "";
                string strTransDate = "";

                dtblPrintData.DefaultView.Sort = "UniqueNo asc";
                dtblPrintData.DefaultView.ApplyDefaultSort = true;
                int currst = 0;
                int pervst = 0;
                int stcnt = 0;

                foreach (DataRowView dr in dtblPrintData.DefaultView)
                {
                    if (prevPrinterID != GeneralFunctions.fnInt32(dr["PrinterID"].ToString())) continue;
                    strTransDate = DateTime.Now.ToString(SystemVariables.DateFormat + " hh:mm:ss tt");


                    dtblstrm.Rows.Add(new object[] { "QTY - " + dr["Qty"].ToString(), "", "", "" });
                    string spd1 = "";
                    string spd2 = "";
                    string spd3 = "";
                    SetProductDesc(dr["Menu"].ToString(), dr["SKU"].ToString(), ref spd1, ref spd2, ref spd3);
                    if (spd1 != "")
                    {
                        dtblstrm.Rows.Add(new object[] { spd1, "", "", "" });
                    }
                    if (spd2 != "")
                    {
                        dtblstrm.Rows.Add(new object[] { spd2, "", "", "" });
                    }
                    if (spd3 != "")
                    {
                        dtblstrm.Rows.Add(new object[] { spd3, "", "", "" });
                    }
                    dtblstrm.Rows.Add(new object[] { "", "", "", "" });
                }
            }
            else
            {
                if (Settings.DemoVersion == "Y")
                {
                    dtblstrm.Rows.Add(new object[] { "", "*** DEMO VERSION ***", "", "" });
                }

                foreach (DataRow dr in NewTemplateLinkData.Rows)
                {
                    if (dr["GroupName"].ToString() == "Separator")
                    {

                        dtblstrm.Rows.Add(new object[] { "xx", "xx", "xx", "", "Y", "" });
                    }
                    else if (dr["GroupName"].ToString() == "Logo")
                    {
                        string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                        if (pval != "")
                        {
                            dtblstrm.Rows.Add(new object[] { "", "", "", "logo", "Y", pval });
                        }
                    }
                    else if (dr["GroupName"].ToString() == "Image")
                    {
                        string pval = FindTemplateParameterValueInDatatableForImage(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                        dtblstrm.Rows.Add(new object[] { dr["GroupSubSL"].ToString(), "", "", "Image", "Y", pval });
                    }
                    else if (dr["GroupName"].ToString() == "Text")
                    {
                        string pval = FindTemplateParameterValueInDatatableForText(dr["GroupName"].ToString(), dr["GroupSubSL"].ToString());
                        if (pval != "")
                        {
                            dtblstrm.Rows.Add(new object[] { dr["GroupData"].ToString(), "", "", "", "Y", pval });
                        }
                    }
                    else if (dr["GroupName"].ToString() == "Barcode")
                    {
                        string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());
                        dtblstrm.Rows.Add(new object[] { "barcode", "barcode", "barcode", "", "Y", pval });
                    }
                    else if (dr["GroupName"].ToString() == "Item and Qty")
                    {
                        string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());


                        dtblPrintData.DefaultView.Sort = "UniqueNo asc";
                        dtblPrintData.DefaultView.ApplyDefaultSort = true;
                        
                        foreach (DataRowView dr1 in dtblPrintData.DefaultView)
                        {
                            if (prevPrinterID != GeneralFunctions.fnInt32(dr1["PrinterID"].ToString())) continue;
                           

                            dtblstrm.Rows.Add(new object[] { "QTY - " + dr1["Qty"].ToString(), "", "", "", "Y", pval });
                            string spd1 = "";
                            string spd2 = "";
                            string spd3 = "";
                            SetProductDesc(dr1["Menu"].ToString(), dr1["SKU"].ToString(), ref spd1, ref spd2, ref spd3);
                            if (spd1 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { spd1, "", "", "", "Y", pval });
                            }
                            if (spd2 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { spd2, "", "", "", "Y", pval });
                            }
                            if (spd3 != "")
                            {
                                dtblstrm.Rows.Add(new object[] { spd3, "", "", "", "Y", pval });
                            }
                           
                        }

                    }
                    else
                    {
                        string pval = FindTemplateParameterValueInDatatable(dr["GroupName"].ToString(), dr["SL"].ToString());

                        if (dr["GroupName"].ToString() == "Printer Name")
                        {

                            dtblstrm.Rows.Add(new object[] { "* " + prevPrinterName + " *", "", "", "", "Y", pval });
                        }



                        if (dr["GroupName"].ToString() == "Business Name")
                        {
                            GetRecieptHeaderCompany(pval);
                        }

                        if (dr["GroupName"].ToString() == "Business Address")
                        {
                            GetRecieptHeaderAddress(pval);
                        }



                        if (dr["GroupName"].ToString() == "Invoice Number")
                        {
                            dtblstrm.Rows.Add(new object[] { "Invoice# : " + PrintOrderNo.ToString(), "", "", "", "Y", pval });
                        }



                        if (dr["GroupName"].ToString() == "Date")
                        {
                            dtblstrm.Rows.Add(new object[] { DateTime.Now.ToString(SystemVariables.DateFormat + " hh:mm:ss tt"), "", "", "", "Y", pval });
                        }

                       

                    }
                }
            }
        }

        public void printpage(object sender, PrintPageEventArgs e)
        {

            if (linecnt == 0)
            {
                linecnt = dtblstrm.Rows.Count;
                lineptr = 1;
            }
            printFont = new Font("Arial", 10);
            float linesPerPage = 0;
            float yPos = 0;
            int count = 0;
            float leftMargin = 0;
            float topMargin = 0;
            //leftMargin = e.MarginBounds.Left;
            //topMargin = e.MarginBounds.Top;
            int W = 0;

            if (Settings.GeneralReceiptPrint == "Y") W = 450; else W = 245 + SystemVariables.PageAdjustmentForPrint;

            int H = GeneralFunctions.fnInt32(GeneralFunctions.fnDouble(Math.Round(printFont.GetHeight(e.Graphics)))) + 1;
            // Calculate the number of lines per page.
            linesPerPage = e.PageBounds.Height / H;

            // Print each line of the file.
            System.Drawing.Rectangle border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
            StringFormat f = new StringFormat();
            while ((count < linesPerPage))
            {
                foreach (DataRow dr in dtblstrm.Rows)
                {
                    if (GeneralFunctions.fnInt32(dr["SL"].ToString()) != lineptr) continue;
                    yPos = topMargin + (count * H);

                    if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                    {
                        System.Drawing.Pen pn1 = new System.Drawing.Pen(System.Drawing.Color.Black);
                        pn1.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn1, GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        pn1.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                    {
                        System.Drawing.Pen pn2 = new System.Drawing.Pen(System.Drawing.Color.Black);
                        pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn2, 265 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn2, 60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        pn2.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                    {
                        System.Drawing.Pen pn2 = new System.Drawing.Pen(System.Drawing.Color.Black);
                        pn2.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn2, 350 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn2, 120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        pn2.Dispose();
                    }
                    else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                    {
                        System.Drawing.Pen pn3 = new System.Drawing.Pen(System.Drawing.Color.Black);
                        pn3.DashStyle = System.Drawing.Drawing2D.DashStyle.Dash;
                        if (Settings.GeneralReceiptPrint == "Y")
                        {
                            e.Graphics.DrawLine(pn3, 20 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 475 + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        else
                        {
                            e.Graphics.DrawLine(pn3, -70 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), 240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos));
                        }
                        pn3.Dispose();
                    }
                    else
                    {
                        if (dr["param"].ToString() == "")
                        {
                            border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                            f.Alignment = StringAlignment.Near;
                            f.LineAlignment = StringAlignment.Near;
                            e.Graphics.DrawString(dr["Npos"].ToString(), printFont, System.Drawing.Brushes.Black, border, f);
                            f.Alignment = StringAlignment.Center;
                            f.LineAlignment = StringAlignment.Center;
                            e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, System.Drawing.Brushes.Black, border, f);
                            f.Alignment = StringAlignment.Far;
                            f.LineAlignment = StringAlignment.Far;
                            e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, System.Drawing.Brushes.Black, border, f);
                        }
                        if (dr["param"].ToString() == "red")
                        {
                            border = new System.Drawing.Rectangle(GeneralFunctions.fnInt32(leftMargin), GeneralFunctions.fnInt32(yPos), W, H);
                            f.Alignment = StringAlignment.Near;
                            f.LineAlignment = StringAlignment.Near;
                            e.Graphics.DrawString(dr["Npos"].ToString(), printFont, System.Drawing.Brushes.Red, border, f);
                            f.Alignment = StringAlignment.Center;
                            f.LineAlignment = StringAlignment.Center;
                            e.Graphics.DrawString(dr["Cpos"].ToString(), printFont, System.Drawing.Brushes.Red, border, f);
                            f.Alignment = StringAlignment.Far;
                            f.LineAlignment = StringAlignment.Far;
                            e.Graphics.DrawString(dr["Fpos"].ToString(), printFont, System.Drawing.Brushes.Red, border, f);
                        }
                    }
                }

                count++;
                lineptr++;
            }

            if (lineptr <= linecnt) e.HasMorePages = true; else e.HasMorePages = false;
        }

        private DataTable AttachPrinters(int MenuID, double pval)
        {
            PosDataObject.Product objrest = new PosDataObject.Product();
            objrest.Connection = SystemVariables.Conn;
            return objrest.ShowPrintersForRemotePrint(MenuID, "Product", pval);
        }

        private string getprintername(int pID)
        {
            PosDataObject.Setup objstup = new PosDataObject.Setup();
            objstup.Connection = SystemVariables.Conn;
            return objstup.GetPrinterName(pID);
        }

        private string getprinter(int pID)
        {
            DataTable dtbl = new DataTable();
            string retstr = "";
            PosDataObject.Setup objstup = new PosDataObject.Setup();
            objstup.Connection = new SqlConnection(SystemVariables.ConnectionString);

            dtbl = objstup.FetchLinkPrinterData(Settings.TerminalName);
            if (dtbl.Rows.Count > 0)
            {
                foreach (DataRow dr in dtbl.Rows)
                {
                    int indx = dr["ParamName"].ToString().IndexOf("All Printers - ");
                    int PrniterID = 0;
                    PrniterID = GeneralFunctions.fnInt32(dr["ParamName"].ToString().Substring(15, dr["ParamName"].ToString().Length - 15));
                    if (PrniterID == pID)
                    {
                        retstr = dr["LinkPrinter"].ToString();
                        break;
                    }
                }
            }
            return retstr;
        }


        private string getteplateid(int pID)
        {
            DataTable dtbl = new DataTable();
            string retstr = "";
            PosDataObject.Setup objstup = new PosDataObject.Setup();
            objstup.Connection = new SqlConnection(SystemVariables.ConnectionString);

            dtbl = objstup.FetchLinkTemplateData(Settings.TerminalName);
            if (dtbl.Rows.Count > 0)
            {
                foreach (DataRow dr in dtbl.Rows)
                {
                    
                    int PrniterID = 0;
                    PrniterID = GeneralFunctions.fnInt32(dr["ParamName"].ToString().Substring(16, dr["ParamName"].ToString().Length - 16));
                    if (PrniterID == pID)
                    {
                        retstr = dr["LinkTemplate"].ToString();
                        break;
                    }
                }
            }
            return retstr;
        }

        // confirmation before remote printing

        private bool IfPrintOrders()
        {
            bool ret = false;
            if (Settings.POSPrintTender == 0) ret = true;
            if (Settings.POSPrintTender == 1) ret = false;
            if (Settings.POSPrintTender == 2)
            {
                if (new MessageBoxWindow().Show(Properties.Resources.Do_you_want_to_print_tendered_items_on_remote_printer_, Properties.Resources.Print_items_confirmation, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes) ret = true;
                else ret = false;
            }
            return ret;
        }

        private void SetProductDesc(string PD, string SKU, ref string PD1, ref string PD2, ref string PD3)
        {
            int intFirstLine = 0;
            intFirstLine = 40;

            bool fl = false;
            bool sl = false;
            bool tl = false;

            if ((PD.Length + SKU.Length + 3) <= intFirstLine)
            {
                PD1 = SKU + " - " + PD;
                PD2 = "";
                PD3 = "";
            }
            else
            {
                string stradd = "";

                foreach (char c in SKU + " - " + PD + "\n")
                {
                    if ((c.ToString() != " ") && (c.ToString() != "\n"))
                        stradd = stradd + c.ToString();

                    if ((!fl) && (!sl) && (!tl))
                    {
                        if (PD1.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD1 == "")
                                    PD1 = stradd;
                                else
                                    PD1 = PD1 + " " + stradd;

                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD1 == "")
                                    PD1 = stradd;
                                else
                                    PD1 = PD1 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            fl = true;
                        }
                    }
                    else if ((fl) && (!sl) && (!tl))
                    {
                        if (PD2.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD2 == "")
                                    PD2 = stradd;
                                else
                                    PD2 = PD2 + " " + stradd;
                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD2 == "")
                                    PD2 = stradd;
                                else
                                    PD2 = PD2 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            sl = true;
                        }
                    }

                    else if ((fl) && (sl) && (!tl))
                    {
                        if (PD3.Length + stradd.Length <= intFirstLine)
                        {
                            if (c.ToString() == " ")
                            {
                                if (PD3 == "")
                                    PD3 = stradd;
                                else
                                    PD3 = PD3 + " " + stradd;
                                stradd = "";
                            }
                            if (c.ToString() == "\n")
                            {
                                if (PD3 == "")
                                    PD3 = stradd;
                                else
                                    PD3 = PD3 + " " + stradd;
                                stradd = "";
                                break;
                            }
                        }
                        else
                        {
                            tl = true;
                        }
                    }
                    else
                    {
                    }

                }
            }
        }

        private bool IsMercuryCardPayment(int intTrnNo)
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.IsMercuryCreditCardPayment(intTrnNo);
        }

        private double GetMercuryCardPaymentAmount(int intTrnNo)
        {
            PosDataObject.POS objposTT = new PosDataObject.POS();
            objposTT.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objposTT.GetMercuryCreditCardPayment(intTrnNo);
        }


        #endregion

        #region Cash Drawer

        // Check Access to Cash Drawer 

        private bool IsOpenCashDrawer()
        {
            bool val = false;
            if (IsExistTenderForOpenCashdrawer())
            {
                if (SystemVariables.CurrentUserID <= 0) return true;
                if (blFunctionBtnAccess) val = SecurityPermission.AcssOpenCashDrawer;
                else
                {
                    if (intSuperUserID <= 0) val = true;
                    else
                    {
                        PosDataObject.Security objsec = new PosDataObject.Security();
                        objsec.Connection = SystemVariables.Conn;
                        val = objsec.GetAccessCashdrawerForSuperuser(intSuperUserID);
                    }
                }
            }
            return val;
        }

        // Check if Applied Tender needs Cash Drawer functionality

        private bool IsExistTenderForOpenCashdrawer()
        {
            bool find = false;
            foreach (DataRow dr in dtblTender.Rows)
            {
                PosDataObject.TenderTypes objsec = new PosDataObject.TenderTypes();
                objsec.Connection = SystemVariables.Conn;
                string s = "";
                s = objsec.GetCashdrawerOpenFlag(GeneralFunctions.fnInt32(dr["ID"].ToString()));

                if (dr["TENDER"].ToString() == "Debit Card")
                {
                    if ((s == "Y") && (boolPAXCashBack))
                    {
                        find = true;
                        break;
                    }
                }
                else
                {

                    if (s == "Y")
                    {
                        find = true;
                        break;
                    }
                }
            }
            return find;
        }

        #endregion

        #region Precidia Functions

        private void PrecidiaResetPIN()
        {
            blCG4 = false;
            PrecidiaDisplayResult = "";
            PrecidiaDisplayResultText = "";
            PrecidiaDisplayResponse = "";

            XmlDocument XDoc = new XmlDocument();

            // Create root node.
            XmlElement XElemRoot = XDoc.CreateElement("PLRequest");

            XDoc.AppendChild(XElemRoot);

            XmlElement XTemp = XDoc.CreateElement("Command");
            XTemp.InnerText = "PPRESET";
            XElemRoot.AppendChild(XTemp);

            XmlDocument XmlResponse = new XmlDocument();

            XTemp = XDoc.CreateElement("KeepAlive");
            XTemp.InnerText = "N";
            XElemRoot.AppendChild(XTemp);

            XTemp = XDoc.CreateElement("ClientMAC");
            XTemp.InnerText = Settings.PrecidiaClientMAC;
            XElemRoot.AppendChild(XTemp);

            bool bTelnet = false;
            try
            {
                SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                bTelnet = true;
            }
            catch (Exception ex)
            {
                bTelnet = false;
            }

            if (bTelnet)
            {
                if (XmlResponse.InnerXml != "")
                {
                    SocketResponse_PPRESET(XmlResponse);

                    string DisplayResult = PrecidiaDisplayResult;
                    string DisplayResultText = PrecidiaDisplayResultText;
                    string DisplayResponse = PrecidiaDisplayResponse;
                    if (DisplayResult == "SUCCESS")
                    {
                        try
                        {
                            PrecidiaLaneOpen();
                        }
                        catch
                        {
                        }
                    }
                }
            }
        }

        private void PrecidiaLaneOpen()
        {
            blCG3 = false;
            PrecidiaDisplayResult = "";
            PrecidiaDisplayResultText = "";
            PrecidiaDisplayResponse = "";

            XmlDocument XDoc = new XmlDocument();

            // Create root node.
            XmlElement XElemRoot = XDoc.CreateElement("PLRequest");
            XDoc.AppendChild(XElemRoot);

            XmlElement XTemp = XDoc.CreateElement("Command");
            XTemp.InnerText = "PPDISPLAY";
            XElemRoot.AppendChild(XTemp);

            XTemp = XDoc.CreateElement("Lines");
            XTemp.InnerText = "2";
            XElemRoot.AppendChild(XTemp);

            XTemp = XDoc.CreateElement("Text");
            XTemp.InnerText = "***Lane Open***";
            XElemRoot.AppendChild(XTemp);

            XmlDocument XmlResponse = new XmlDocument();

            XTemp = XDoc.CreateElement("KeepAlive");
            XTemp.InnerText = "N";
            XElemRoot.AppendChild(XTemp);

            XTemp = XDoc.CreateElement("ClientMAC");
            XTemp.InnerText = Settings.PrecidiaClientMAC;
            XElemRoot.AppendChild(XTemp);

            bool bTelnet = false;
            try
            {
                SslTcpClient.RunClient(Settings.PrecidiaPOSLynxMAC, Settings.PrecidiaPort, XDoc, ref XmlResponse);
                bTelnet = true;
            }
            catch (Exception ex)
            {
                bTelnet = false;
            }

            if (bTelnet)
            {
                if (XmlResponse.InnerXml != "")
                {
                    SocketResponse_Display(XmlResponse);

                    string DisplayResult = PrecidiaDisplayResult;
                    string DisplayResultText = PrecidiaDisplayResultText;
                    string DisplayResponse = PrecidiaDisplayResponse;
                }
            }
        }

        private void PrecidiaTransactionDeclined()
        {
            if (Settings.PrecidiaLaneOpen == "Y")
            {
                try
                {
                    PrecidiaLaneOpen();
                }
                catch
                {
                }
            }
        }


        private void PrecidiaTerminalError()
        {
            if (new MessageBoxWindow().Show(Properties.Resources.Terminal_Error___Resend_Transaction_, "Error", MessageBoxButton.OKCancel, MessageBoxImage.Question) == MessageBoxResult.OK)
            {
                btnOKClick();
            }
            else
            {
                DataTable dtbl = new DataTable();
                dtbl.Columns.Add("POS", System.Type.GetType("System.String"));

                int rwindex = 0;
                foreach (DataRow dr0 in dtblTender.Rows)
                {
                    string cctran = dr0["CCTRANNO"].ToString();

                    bool f = false;
                    int i = 0;
                    foreach (DataRow dr in cardidentity.Rows)
                    {
                        if (dr["CardID"].ToString() == cctran)
                        {
                            f = true;
                            break;
                        }
                        i++;
                    }
                    if (f)
                    {
                        cardidentity.Rows.RemoveAt(i);
                        dtbl.Rows.Add(new object[] { rwindex.ToString() });
                    }
                    rwindex++;
                }
                foreach (DataRow dr in dtbl.Rows)
                {
                    dtblTender.Rows.RemoveAt(GeneralFunctions.fnInt32(dr["POS"].ToString()));
                }


                grdTender.ItemsSource = dtblTender;
                FoodStampTendering = false;
                ArrangeSettings();

                numAmount.Text = GeneralFunctions.FormatDouble(dblBalance).ToString();
                GeneralFunctions.SetFocus(numAmount);
                numAmount.SelectionLength = 0;

                if (Settings.PrecidiaLaneOpen == "Y")
                {
                    try
                    {
                        PrecidiaLaneOpen();
                    }
                    catch
                    {
                    }
                }
            }

        }

        private void PrecidiaDisplayOnError()
        {
            if (PrecidiaResponse == 1)
            {
                PrecidiaTransactionDeclined();
            }
            if (PrecidiaResponse == 2)
            {
                lbPrecidiaErrorResponse.Text = lbPrecidiaErrorResponse.Text == "" ? PrecidiaDisplayResultText + " ... " + Properties.Resources.Click__Done__again_to_Resend_Transaction :
                    lbPrecidiaErrorResponse.Text + "  " + PrecidiaDisplayResultText + " ... " + Properties.Resources.Click__Done__again_to_Resend_Transaction;
                lbPrecidiaErrorResponse.Visibility = Visibility.Visible;

                //PrecidiaTerminalError();
            }
        }

        #endregion

        // Currency Click Event

        private void btnOKClick()
        {
            PrecidiaResponse = -1;
            try
            {
                bool IsEBTTendering = false;
                bool IsCCTendering = false;
                btnOK.IsEnabled = false;
                btnClearTender.IsEnabled = false;
                btnCancel.IsEnabled = false;
                Cursor = System.Windows.Input.Cursors.Arrow; ;

                if ((Settings.GeneralReceiptPrint == "N") && (Settings.POSPrintInvoice != 2))
                {
                    if ((blLayaway) || (blNewLayaway) || (blLayawayRefund))
                    {
                        /*if (Settings.ReceiptPrinterName == "")
                        {
                            DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                            return;
                        }*/
                    }
                    else
                    {
                        /*if (blReturnItem)
                        {
                            if (Settings.ReceiptPrintOnReturn == "Y")
                            {
                                if (Settings.ReceiptPrinterName == "")
                                {
                                    DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                                    return;
                                }
                            }
                        }
                        else
                        {
                            if (Settings.ReceiptPrinterName == "")
                            {
                                DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                                return;
                            }
                        }*/

                        /*if (Settings.ReceiptPrinterName == "")
                        {
                            DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                            return;
                        }*/
                    }
                }

                /*if (GeneralFunctions.FormatDouble(dblChange) > GeneralFunctions.FormatDouble(Settings.GiftCertMaxChange))
                {
                    CheckGCTender();
                    if (!blProceed) return;
                }*/

                if (!blRepairDeposit)
                {
                    if ((!blNewLayaway) && (!blLayaway) && (!blLayawayRefund))
                    {
                        CheckStockBeforeTransaction();

                        if (dtblZeroStock.Rows.Count > 0)
                        {
                            blurGrid.Visibility = Visibility.Visible;
                            frm_POSOutOfStockDlg frm_POSOutOfStockDlg = new frm_POSOutOfStockDlg();
                            try
                            {
                                frm_POSOutOfStockDlg.Stock = dtblZeroStock;
                                frm_POSOutOfStockDlg.ShowDialog();
                            }
                            finally
                            {
                                blurGrid.Visibility = Visibility.Collapsed;
                            }
                        }

                        if (dtblZeroStock.Rows.Count > 0) return;

                        if (intCustID > 0)
                        {
                            if (!CheckStoreCreditBeforeTransaction()) return;  // Check Store Credit;
                            if (!CheckHouseAccountBeforeTransaction()) return;  // Check House Account;
                        }
                    }

                    if (blLayaway)
                    {
                        CheckStockBeforeLayawayTransaction();
                        if (dtblZeroStock.Rows.Count > 0)
                        {
                            blurGrid.Visibility = Visibility.Visible;
                            frm_POSOutOfStockDlg frm_POSOutOfStockDlg = new frm_POSOutOfStockDlg();
                            try
                            {
                                frm_POSOutOfStockDlg.Stock = dtblZeroStock;
                                frm_POSOutOfStockDlg.ShowDialog();
                            }
                            finally
                            {
                                blurGrid.Visibility = Visibility.Collapsed;
                            }
                        }
                        if (dtblZeroStock.Rows.Count > 0) return;

                        if (intCustID > 0)
                        {
                            if (!CheckStoreCreditBeforeTransaction()) return;   // Check Store Credit;
                            if (!CheckHouseAccountBeforeTransaction()) return;  // Check House Account;
                        }
                    }
                }

                bool CCf = false;
                DataTable dtblNew = new DataTable();

                dtblNew = grdTender.ItemsSource as DataTable;

                foreach (DataRow dr in dtblNew.Rows)
                {
                    if ((dr["TENDER"].ToString() == "Visa") ||
                    (dr["TENDER"].ToString() == "MasterCard") ||
                    (dr["TENDER"].ToString() == "American Express") ||
                    (dr["TENDER"].ToString() == "Discover") ||
                    (dr["TENDER"].ToString() == "Diner") ||
                    (dr["TENDER"].ToString() == "Debit Card") ||
                    (dr["TENDER"].ToString() == "Credit Card") ||
                    (dr["TENDER"].ToString() == "Credit Card - Voice Auth") ||
                    (dr["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)") ||
                    (dr["TENDER"].ToString() == "Credit Card (STAND-IN)")
                    || (dr["TENDER"].ToString() == "Mercury Gift Card")
                    || (dr["TENDER"].ToString() == "Precidia Gift Card")
                    || (dr["TENDER"].ToString() == "Datacap Gift Card")
                    || (dr["TENDER"].ToString() == "POSLink Gift Card")
                    || (dr["TENDER"].ToString() == "Food Stamps")
                    || (dr["TENDER"].ToString() == "EBT Cash")
                    || (dr["TENDER"].ToString() == "EBT Voucher"))
                    {
                        CCf = true;
                        break;
                    }
                }

                dtblNew.Dispose();

                if (CCf)
                {
                    if (Settings.POSCardPayment == "Y")
                    {
                        if (Settings.PaymentGateway == 1)
                        {
                            if (Settings.ElementHPAccountID == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Hosted_Payment_paramters_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                return;
                            }
                        }

                        if (Settings.PaymentGateway == 2)
                        {
                            if (Settings.MercuryHPMerchantID == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Hosted_Payment_paramters_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                return;
                            }
                        }

                        if (Settings.PaymentGateway == 3)
                        {
                            if (Settings.PrecidiaClientMAC == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Precidia_Client_MAC_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                return;
                            }
                        }

                        if (CheckIfCardTenderingExists())
                        {
                            //if ((Settings.PaymentGateway == 3) && (!CheckPrecidiaProcced())) return;

                            if ((blReturnItem) || (blLayawayRefund) || (blRentRecall))
                            {
                                if (!CardVarifyForReturn())
                                {
                                    if (Settings.PaymentGateway == 6)
                                    {
                                        CallPadResetCount = 0;
                                        CallEMVPadReset();

                                        if (CallPadResetCount == 5)
                                        {
                                            CallPadResetCount = 0;
                                            if (Dcap_PPAD_CmdStatus != "Success") new MessageBoxWindow().Show(Dcap_PPAD_CmdStatus + "\n\n" + Dcap_PPAD_TextResponse, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                        }
                                    }
                                    return;
                                }
                            }
                            else
                            {
                                IsCCTendering = true;
                                if (!CardVarify())
                                {
                                    if (Settings.PaymentGateway == 6)
                                    {
                                        CallPadResetCount = 0;
                                        CallEMVPadReset();

                                        if (CallPadResetCount == 5)
                                        {
                                            CallPadResetCount = 0;
                                            if (Dcap_PPAD_CmdStatus != "Success") new MessageBoxWindow().Show(Dcap_PPAD_CmdStatus + "\n\n" + Dcap_PPAD_TextResponse, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                        }
                                    }

                                    if (bMercuryGiftCardInsufficientBalance)
                                    {
                                        bMercuryGiftCardInsufficientBalance = false;
                                        if (new MessageBoxWindow().Show(Properties.Resources.Transaction_Declined + "\n" + Properties.Resources.Balance_of_this_card_is.Replace("$", SystemVariables.CurrencySymbol) + GeneralFunctions.fnDouble(MercuryGiftCardBalance).ToString("f") + "." + "\n" + "" + Properties.Resources.Would_you_like_to_apply_the_balance_to_this_Ticket_, "Insufficient Card Balance", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                                        {
                                            foreach (DataRow dr in dtblTender.Rows)
                                            {
                                                if ((dr["TENDER"].ToString() == "Mercury Gift Card") && (GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()) == GeneralFunctions.fnDouble(ApprovedAmt))
                                                    && (dr["CCTRANNO"].ToString() == ""))
                                                {
                                                    dr["AMOUNT"] = GeneralFunctions.fnDouble(MercuryGiftCardBalance).ToString("f");
                                                    if (CardVarifyForInstantMercuryGiftCardTransaction(GeneralFunctions.fnDouble(MercuryGiftCardBalance)))
                                                        dr["PROCESSCARD"] = "Y";
                                                    break;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            int indx = -1;
                                            foreach (DataRow dr in dtblTender.Rows)
                                            {
                                                indx++;
                                                if ((dr["TENDER"].ToString() == "Mercury Gift Card") && (GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()) == GeneralFunctions.fnDouble(ApprovedAmt))
                                                    && (dr["CCTRANNO"].ToString() == ""))
                                                {
                                                    break;
                                                }
                                            }
                                            dtblTender.Rows.RemoveAt(indx);
                                        }

                                        grdTender.ItemsSource = dtblTender;
                                        FoodStampTendering = false;
                                        ArrangeSettings();

                                        numAmount.Text = GeneralFunctions.FormatDouble(dblBalance).ToString();
                                        numAmount.SelectionLength = 0;
                                        return;
                                    }

                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                                    {
                                        if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                                        if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;
                                        PrecidiaDisplayOnError();
                                    }
                                    GeneralFunctions.SetFocus(numAmount);
                                    return;
                                }
                                else
                                {
                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                                }
                            }
                        }

                        if (CheckIfEBTTenderingExists())
                        {
                            //if ((Settings.PaymentGateway == 3) && (!CheckPrecidiaProcced2())) return;

                            if ((blReturnItem) || (blLayawayRefund) || (blRentRecall))
                            {
                                if (!EBTVarifyForReturn())
                                {
                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                                    {
                                        if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                                        if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;
                                        PrecidiaDisplayOnError();
                                    }
                                    GeneralFunctions.SetFocus(numAmount);
                                    return;
                                }
                                else
                                {
                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                                }
                            }
                            else
                            {
                                IsEBTTendering = true;
                                if (!EBTVarify())
                                {
                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                                    {
                                        if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                                        if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;
                                        PrecidiaDisplayOnError();
                                    }
                                    GeneralFunctions.SetFocus(numAmount);
                                    return;
                                }
                                else
                                {
                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                                }
                            }
                        }
                    }

                    if ((IsCCTendering) || (IsEBTTendering))
                    {
                        bool f = false;
                        foreach (DataRow drP in dtblTender.Rows)
                        {
                            if ((drP["TENDER"].ToString() == "Visa") || (drP["TENDER"].ToString() == "MasterCard") || (drP["TENDER"].ToString() == "American Express") ||
                                (drP["TENDER"].ToString() == "Discover") || (drP["TENDER"].ToString() == "Diner") || (drP["TENDER"].ToString() == "Debit Card") ||
                                (drP["TENDER"].ToString() == "Credit Card") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth") ||
                                (drP["TENDER"].ToString() == "Credit Card (STAND-IN)") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)")
                                || (drP["TENDER"].ToString() == "Mercury Gift Card") || (drP["TENDER"].ToString() == "Precidia Gift Card")
                                || (drP["TENDER"].ToString() == "Datacap Gift Card") || (drP["TENDER"].ToString() == "POSLink Gift Card") || (drP["TENDER"].ToString() == "Food Stamps")
                                || (drP["TENDER"].ToString() == "EBT Cash") || (drP["TENDER"].ToString() == "EBT Voucher"))
                            {
                                if (drP["CCTRANNO"].ToString() == "")
                                {
                                    f = true;
                                    break;
                                }
                            }
                        }
                        if (f)
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }

                    double dblCardAmt = 0;
                    string strCard = "";
                    foreach (DataRow drP in dtblTender.Rows)
                    {
                        if ((drP["TENDER"].ToString() == "Visa") || (drP["TENDER"].ToString() == "MasterCard") || (drP["TENDER"].ToString() == "American Express") ||
                            (drP["TENDER"].ToString() == "Discover") || (drP["TENDER"].ToString() == "Diner") || (drP["TENDER"].ToString() == "Debit Card") ||
                            (drP["TENDER"].ToString() == "Credit Card") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth") ||
                            (drP["TENDER"].ToString() == "Credit Card (STAND-IN)") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)")
                            || (drP["TENDER"].ToString() == "Mercury Gift Card") || (drP["TENDER"].ToString() == "Precidia Gift Card")
                            || (drP["TENDER"].ToString() == "Datacap Gift Card") || (drP["TENDER"].ToString() == "POSLink Gift Card") || (drP["TENDER"].ToString() == "Food Stamps")
                            || (drP["TENDER"].ToString() == "EBT Cash") || (drP["TENDER"].ToString() == "EBT Voucher"))
                        {
                            if (drP["CCTRANNO"].ToString() != "") continue;
                            dblCardAmt = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drP["AMOUNT"].ToString()));
                            strCard = drP["TENDER"].ToString();
                        }
                    }
                }

                if (blMercuryGiftCardIssue)
                {
                    if (!IsValidMarcuryGiftCardIssue())
                    {
                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                        {
                            if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                            if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;
                            PrecidiaDisplayOnError();
                        }
                        GeneralFunctions.SetFocus(numAmount);
                        mgccardidentity.Rows.Clear();
                        return;
                    }
                    else
                    {
                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                    }
                }

                if (blMercuryGiftCardReload)
                {
                    if (!IsValidMarcuryGiftCardReload())
                    {
                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                        {
                            if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                            if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;
                            PrecidiaDisplayOnError();
                        }
                        GeneralFunctions.SetFocus(numAmount);
                        mgccardidentity.Rows.Clear();
                        return;
                    }
                    else
                    {
                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                    }
                }




                string srterrmsg = "";
                PosDataObject.POS objpos = new PosDataObject.POS();
                objpos.Connection = SystemVariables.Conn;
                objpos.EmployeeID = SystemVariables.CurrentUserID;
                objpos.LoginUserID = SystemVariables.CurrentUserID;
                objpos.CustomerID = intCustID;
                objpos.Return = blReturnItem;
                objpos.NewLayaway = blNewLayaway;
                objpos.Layaway = blLayaway;
                objpos.LayawayRefund = blLayawayRefund;
                objpos.RentReturn = blRentRecall;
                objpos.ServiceType = strServiceType;
                objpos.MGCIssue = blMercuryGiftCardIssue;
                objpos.MercuryGCIssueCardID = tempMercuryGCCardID;

                if (blSale)
                {
                    objpos.TransType = 1; // sale
                    objpos.Status = 3;
                }

                if (blWorkOrderTransaction)
                {
                    objpos.TransType = 12; // WorkOrder Payment
                    objpos.Status = 3;
                    objpos.SuspendInvoiceNo = intSuspendInvoiceNo;
                }

                if (blResumeTransaction)
                {
                    objpos.TransType = 3; // Resume Transaction
                    objpos.Status = 3;
                    objpos.SuspendInvoiceNo = intSuspendInvoiceNo;
                }

                if (blNewLayaway)
                {
                    objpos.TransType = 2; // Layaway deposit
                    objpos.Status = 1;
                }

                if (blLayaway)
                {
                    objpos.TransType = 2; // Layaway Payment
                    objpos.Status = 3;
                }

                if (blLayawayRefund)
                {
                    objpos.TransType = 2; // Layaway Payment
                    objpos.Status = 5;
                }

                if (blRentIssued)
                {
                    objpos.TransType = 15; // Rent Issue
                    objpos.Status = 15;
                }

                if (blRentRecall)
                {
                    objpos.TransType = 16; // Rent Issue
                    objpos.Status = 16;
                }

                /*if ((blRepairIssued) || (blRepairRecall))
                {
                    objpos.TransType = 18; // Rent
                    objpos.Status = 18;
                }*/

                if (blRepairIssued)
                {
                    objpos.TransType = 17; // Repair Issue
                    objpos.Status = 17;
                    if (!blRepairDeposit) objpos.RepairIssueNClosed = true;
                    else objpos.RepairIssueNClosed = false;
                }

                if (blRepairRecall)
                {
                    objpos.TransType = 18; // Repair Delivered
                    objpos.Status = 18;
                }

                objpos.RentalSecurityDeposit = dblRentSecurityDeposit;
                objpos.IssueRentInvNo = intIssueRentInvNo;
                objpos.IsRentCalculated = Settings.CalculateRentLater;

                DateTime rpin = Convert.ToDateTime(null);
                DateTime rpdelvy = Convert.ToDateTime(null);
                DateTime rpnotf = Convert.ToDateTime(null);
                string strrpnotes1 = "";
                string strrpnotes2 = "";
                string strrpnotes3 = "";
                string strrpritm = "";
                string strrprsl = "";
                string strrpfind = "";

                if (strServiceType == "Repair")
                {
                    foreach (DataRow drrp in dtblRepairItemInfo.Rows)
                    {
                        strrpnotes1 = drrp["ProblemDesc"].ToString();
                        strrpnotes2 = drrp["RepairDesc"].ToString();
                        strrpnotes3 = drrp["Remarks"].ToString();
                        strrpritm = drrp["ItemTag"].ToString();
                        strrprsl = drrp["ItemSL"].ToString();
                        rpin = GeneralFunctions.fnDate(drrp["DateIn"].ToString());
                        if (drrp["ExpectedDeliveryDate"].ToString() != "") rpdelvy = GeneralFunctions.fnDate(drrp["ExpectedDeliveryDate"].ToString());
                        if (drrp["NotifiedDate"].ToString() != "") rpnotf = GeneralFunctions.fnDate(drrp["NotifiedDate"].ToString());
                        strrpfind = drrp["RepairFindUs"].ToString();
                    }
                    objpos.RepairDepositTransaction = blRepairDeposit;
                    objpos.RepairDepositLinkID = intRepairInvoiceForDeposit;
                }

                objpos.RepairFindUs = strrpfind;
                objpos.RepairItemName = strrpritm;
                objpos.RepairItemSL = strrprsl;
                objpos.RepairDateIn = rpin;
                objpos.RepairDeliveryDate = rpdelvy;
                objpos.RepairNotifiedDate = rpnotf;
                objpos.RepairProblem = strrpnotes1;
                objpos.RepairNotes = strrpnotes2;
                objpos.RepairRemarks = strrpnotes3;

                objpos.RepairAmount = dblRepairAmount;
                objpos.RepairAdvanceAmount = dblRepairAdvance;

                objpos.RepairTenderAmount = dblRepairTender;
                objpos.IssueRepairInvNo = intIssueRepairInvNo;

                objpos.ReceiptCnt = 1;

                if (!blNewLayaway)
                {
                    if (!blRentIssued) objpos.TotalSale = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)));
                    if (blRentIssued) objpos.TotalSale = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)) - GeneralFunctions.fnDouble(numRentDeposit.Text.Substring(numRentDeposit.Text.IndexOf(" ") + 1)));
                    if (blRepairRecall) objpos.TotalSale = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)) + GeneralFunctions.fnDouble(numRepairAdvance.Text.Substring(numRepairAdvance.Text.IndexOf(" ") + 1)));
                    objpos.Tax = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTax.Text.Substring(numTax.Text.IndexOf(" ") + 1)));
                    //if (blRepairIssued || blRepairRecall) objpos.Tax = GetTaxForRepair();
                }

                if (blNewLayaway)
                {
                    objpos.Tax = 0;
                    objpos.TotalSale = 0;
                    objpos.LayawayDateDue = dtLayawayDateDue;
                }

                objpos.Discount = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numDiscount.Text.Substring(numDiscount.Text.IndexOf(" ") + 1)));
                objpos.Coupon = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numCoupon.Text.Substring(numCoupon.Text.IndexOf(" ") + 1)));
                objpos.CouponPerc = dblCouponPerc;
                objpos.DiscountReason = strDiscountReason;

                objpos.TotalFees = dblFees;
                objpos.TotalFeesTax = dblFeesTax;

                objpos.TotalFeesCoupon = dblFeesCouponAmount;
                objpos.TotalFeesCouponTax = dblFeesCouponTaxAmount;

                objpos.DTaxID = CustDTaxID;
                objpos.DTax = blNewLayaway ? CustDTaxValue : dblDTx;


                if ((blResumeTransaction) || (blSale) || (blWorkOrderTransaction))
                {
                    pdtblForStockUpdate = FinalDataTable();
                    objpos.ItemDataTable = pdtblForStockUpdate;
                }
                if (blWorkOrderTransaction) objpos.WorkOrder1 = dtblWODatatbl;
                if ((blLayaway) || (blLayawayRefund)) objpos.ItemDataTable = dtblLayawayPayment;
                if (blLayaway) pdtblForStockUpdate = dtblLayawayPayment;
                if (blNewLayaway)
                {
                    pdtblForStockUpdate = FinalDataTable();
                    objpos.ItemDataTable = GetLayawayInvoiceTable();
                }

                if ((blRentIssued) || (blRentRecall))
                {
                    pdtblForStockUpdate = FinalDataTableForRent();
                    objpos.ItemDataTable = pdtblForStockUpdate;
                }

                if ((blRepairIssued) || (blRepairRecall))
                {
                    pdtblForStockUpdate = FinalDataTableForRepair();
                    objpos.ItemDataTable = pdtblForStockUpdate;
                }

                objpos.TenderDataTable = grdTender.ItemsSource as DataTable;
                objpos.TaxID1 = intTaxID1;
                objpos.TaxID2 = intTaxID2;
                objpos.TaxID3 = intTaxID3;
                objpos.Tax1 = GeneralFunctions.FormatDouble(dblTax1);
                objpos.Tax2 = GeneralFunctions.FormatDouble(dblTax2);
                objpos.Tax3 = GeneralFunctions.FormatDouble(dblTax3);

                objpos.ChangeAmount = dblChange;
                objpos.ApptDataTable = dtblApptDatatbl;
                objpos.ErrorMsg = "";

                // static value
                objpos.StoreID = 1;
                objpos.RegisterID = 1;
                objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
                objpos.TransNoteNo = 0;
                objpos.LayawayNo = 0;
                objpos.TransMSeconds = 0;
                // static value

                objpos.TerminalName = Settings.TerminalName;

                objpos.CardTranID = intCardTranID;

                objpos.ChangedByAdmin = intSuperUserID;
                objpos.FunctionButtonAccess = blFunctionBtnAccess;

                if (Settings.AcceptTips == "Y")
                {
                    objpos.AuthorisedTranNo = AuthCode;
                    objpos.SaleTranNo = "";
                }
                else
                {
                    objpos.AuthorisedTranNo = "";
                    objpos.SaleTranNo = AuthCode;
                }

                objpos.tblCardID = cardidentity;
                objpos.MercuryGiftCardDataTable = mgccardidentity;

                objpos.GCCentralFlag = Settings.CentralExportImport;
                objpos.GCOPStore = GCOPSTORE;

                objpos.OperateStore = Settings.StoreCode;
                objpos.ParentReturnInvNo = intSelectedReturnInvoiceNo;
                objpos.BeginTransaction();

                if (objpos.CreateInvoice())
                {
                    intINV = objpos.ID;
                    PrintOrderNo = intINV;
                    if (blNewLayaway) intLAYNO = objpos.LayawayID;
                    intLAYTRAN = objpos.TransactionNo;
                }
                objpos.EndTransaction();
                srterrmsg = objpos.ErrorMsg;
                if (srterrmsg == "")
                {
                    DataTable dtblXeConnectUpdate = grdTender.ItemsSource as DataTable;

                    foreach (DataRow drXe in dtblXeConnectUpdate.Rows)
                    {
                        if (GeneralFunctions.fnInt32(drXe["XeConnectID"].ToString()) > 0)
                        {
                            PosDataObject.POS objPOSXE = new PosDataObject.POS();
                            objPOSXE.Connection = SystemVariables.Conn;
                            objPOSXE.SetInvoiceOnXeConnect(GeneralFunctions.fnInt32(drXe["XeConnectID"].ToString()), intINV);
                        }
                    }


                    if (Settings.ReceiptPrinterName != "")
                    {
                        if (IsOpenCashDrawer())
                        {
                            try
                            {
                                RawPrinterHelper.OpenCashDrawer1(Settings.ReceiptPrinterName, Settings.CashDrawerCode);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                    {
                        SecondMonitor.ClearWeightInfo();
                        if (!blReturnItem) SecondMonitor.FinalTenderingDisplay(GeneralFunctions.fnDouble(numChangeDue.Text.Substring(numChangeDue.Text.IndexOf(" ") + 1)));
                        else SecondMonitor.FinalTenderingDisplay(-GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)));
                    }
                    frm_POS.DisplayPoleText(2, "N", "N", "", Properties.Resources.Thank_You);
                    //Application.DoEvents();--Sam

                    if (POSDatatbl != null)
                    {
                        printorders();
                    }

                    if (Settings.POSPrintInvoice != 2)
                    {
                        if (((blLayaway) || (blNewLayaway) || (blLayawayRefund)) && (Settings.PreprintedReceipt == "N"))
                        {
                            blurGrid.Visibility = Visibility.Visible;
                            frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                            try
                            {
                                frm_POSInvoicePrintDlg.LayTran = intLAYTRAN;
                                frm_POSInvoicePrintDlg.LayawayDtbl = LayawayNoForInvoicePrinting();
                                frm_POSInvoicePrintDlg.PrintType = "Layaway";
                                frm_POSInvoicePrintDlg.IsLayawayRefund = blLayawayRefund;
                                frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                                frm_POSInvoicePrintDlg.ShowDialog();
                            }
                            finally
                            {
                                blurGrid.Visibility = Visibility.Collapsed;
                            }
                        }
                        else
                        {
                            PrintInvoice();
                        }
                    }

                    if (Settings.POSCardPayment == "Y")
                    {
                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                        {
                            if (PrecidiaResponse == 0)
                            {
                                if (Settings.PrecidiaLaneOpen == "Y")
                                {
                                    try
                                    {
                                        PrecidiaLaneOpen();
                                    }
                                    catch
                                    {
                                    }
                                }
                            }
                        }
                    }

                    if (Settings.POSDisplayChangeDue == "Y")
                    {
                        blurGrid.Visibility = Visibility.Visible;
                        frmPOSShowBalanceDlg frm_POSShowBalanceDlg = new frmPOSShowBalanceDlg();
                        try
                        {
                            double CashBackAmount = 0;
                            if ((Settings.POSCardPayment == "Y") && ((Settings.PaymentGateway == 3) || (Settings.PaymentGateway == 5) || (Settings.PaymentGateway == 7)) && CCf)
                            {
                                PosDataObject.POS objps = new PosDataObject.POS();
                                objps.Connection = SystemVariables.Conn;
                                CashBackAmount = objps.GetCashBackAmountFromCardTransaction(intINV);
                            }

                            frm_POS.DisplayPoleText(2, "N", "B", Properties.Resources.ChangeDue, GeneralFunctions.FormatDouble2((!blReturnItem ? dblChange : -dblTotalsale) + CashBackAmount).ToString());
                            frm_POSShowBalanceDlg.Totalsale = GeneralFunctions.FormatDouble(dblTotalsale);
                            frm_POSShowBalanceDlg.Tender = GeneralFunctions.FormatDouble((!blReturnItem ? dblTender : 0));
                            frm_POSShowBalanceDlg.Change = GeneralFunctions.FormatDouble((!blReturnItem ? dblChange : -dblTotalsale) + CashBackAmount);
                            frm_POSShowBalanceDlg.ShowDialog();
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                        finally
                        {
                            if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                            {
                                SecondMonitor.ClearWeightInfo();
                                SecondMonitor.ClearTenderingDisplay();
                            }

                            blFinalFlag = true;
                            Close();
                        }
                    }
                    else
                    {
                        blFinalFlag = true;
                        Close();
                    }
                }
                else
                {
                    GeneralFunctions.SetTransactionLog("Invoice generation fail", srterrmsg);
                }
            }
            catch (Exception ex)
            {
                GeneralFunctions.SetTransactionLog("Catch - tender done", ex.Message);
            }
            finally
            {
                if (GeneralFunctions.fnDouble(numBalanceDue.Text.Substring(numBalanceDue.Text.IndexOf(" ") + 1)) == 0)
                {
                    if (!boolInvoiceCreated)
                    {
                        btnOK.IsEnabled = true;
                    }
                }
                else btnOK.IsEnabled = false;

                btnClearTender.IsEnabled = true;
                btnCancel.IsEnabled = true;
                Cursor = System.Windows.Input.Cursors.Arrow;
            }
        }



        // Assign Cart before sales transaction

        private DataTable FinalDataTable()
        {
            DataTable dtblFinal = new DataTable();
            dtblFinal.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ONHANDQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NORMALQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("COST", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("QTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("RATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DEPT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("CAT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMDESC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMID", System.Type.GetType("System.String"));
            // add for Layaway Invoice

            dtblFinal.Columns.Add("TAX1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TOTALSALE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTREASON", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("LAYAWAYAMOUNT", System.Type.GetType("System.String"));

            // add for invoice notes
            dtblFinal.Columns.Add("NOTES", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMDISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("RENTTYPE", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("RENTDURATION", System.Type.GetType("System.Double"));//35
            dtblFinal.Columns.Add("RENTAMOUNT", System.Type.GetType("System.Double"));//36
            dtblFinal.Columns.Add("RENTDEPOSIT", System.Type.GetType("System.Double"));//37

            dtblFinal.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//38
            dtblFinal.Columns.Add("TX1", System.Type.GetType("System.Double"));//39
            dtblFinal.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//40
            dtblFinal.Columns.Add("TX2", System.Type.GetType("System.Double"));//41
            dtblFinal.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//42
            dtblFinal.Columns.Add("TX3", System.Type.GetType("System.Double"));//43

            dtblFinal.Columns.Add("MIXMATCHID", System.Type.GetType("System.Int32"));//46
            dtblFinal.Columns.Add("MIXMATCHFLAG", System.Type.GetType("System.String"));//47
            dtblFinal.Columns.Add("MIXMATCHTYPE", System.Type.GetType("System.String"));//48
            dtblFinal.Columns.Add("MIXMATCHVALUE", System.Type.GetType("System.Double"));//49
            dtblFinal.Columns.Add("MIXMATCHQTY", System.Type.GetType("System.Int32"));//50
            dtblFinal.Columns.Add("MIXMATCHUNIQUE", System.Type.GetType("System.Int32"));//51
            dtblFinal.Columns.Add("MIXMATCHLAST", System.Type.GetType("System.String"));//52

            // for Fees & Charges
            dtblFinal.Columns.Add("FEESID", System.Type.GetType("System.Int32"));//62
            dtblFinal.Columns.Add("FEESLOGIC", System.Type.GetType("System.String"));//63
            dtblFinal.Columns.Add("FEESVALUE", System.Type.GetType("System.Double"));//64
            dtblFinal.Columns.Add("FEESTAXRATE", System.Type.GetType("System.Double"));//65
            dtblFinal.Columns.Add("FEES", System.Type.GetType("System.Double"));//66
            dtblFinal.Columns.Add("FEESTAX", System.Type.GetType("System.Double"));//67
            dtblFinal.Columns.Add("FEESTEXT", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("FEESQTY", System.Type.GetType("System.String"));//68

            dtblFinal.Columns.Add("SALEPRICEID", System.Type.GetType("System.Int32"));//69

            // customer Destination Tax
            dtblFinal.Columns.Add("DTXID", System.Type.GetType("System.Int32"));//71
            dtblFinal.Columns.Add("DTXTYPE", System.Type.GetType("System.Int32"));//72
            dtblFinal.Columns.Add("DTXRATE", System.Type.GetType("System.Double"));//73
            dtblFinal.Columns.Add("DTX", System.Type.GetType("System.Double"));//74

            dtblFinal.Columns.Add("EDITF", System.Type.GetType("System.String"));//75
            dtblFinal.Columns.Add("PROMPTPRICE", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("BUYNGETFREEHEADERID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREECATEGORY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREENAME", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("AGE", System.Type.GetType("System.Int32"));

            // Add for Tax Inclusive
            dtblFinal.Columns.Add("GRATE", System.Type.GetType("System.Double"));
            dtblFinal.Columns.Add("GPRICE", System.Type.GetType("System.Double"));
            dtblFinal.Columns.Add("UOM", System.Type.GetType("System.String"));
            // fetch TaxID, TaxName first

            string strTaxID1 = "0";
            string strTaxID2 = "0";
            string strTaxID3 = "0";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";
            string strTaxRate1 = "0";
            string strTaxRate2 = "0";
            string strTaxRate3 = "0";
            int iTaxType1 = 0;
            int iTaxType2 = 0;
            int iTaxType3 = 0;
            double TaxVal1 = 0;
            double TaxVal2 = 0;
            double TaxVal3 = 0;
            int intCount = 0;

            //Mix n Match

            int iMixID = 0;
            int iMixQty = 0;
            int iMixUnique = 0;
            double dMixVal = 0;
            string sMixType = "";
            string sMixFlag = "N";
            string sMixLast = "N";


            // Fees & Charges

            int iFeeID = 0;
            string sFeeLogic = "";
            double dFeeVal = 0;
            double dFeeTxRate = 0;
            double dFee = 0;
            double dFeeTx = 0;
            string sFeeText = "";
            string sFeeQty = "N";
            // Sale price

            int iSalePriceID = 0;

            int idtxid = 0;
            int idtxtype = 0;
            double ddtxrate = 0;
            double ddtx = 0;

            int iAge = 0;

            double dGRate = 0;
            double dGPrice = 0;

            DataTable dtblTaxHeader = new DataTable();
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTaxHeader = objTax.FetchActiveTax();
            foreach (DataRow dr in dtblTaxHeader.Rows)
            {
                intCount++;
                if (intCount == 1)
                {
                    strTaxID1 = dr["ID"].ToString();
                    strTaxName1 = dr["TaxName"].ToString();
                    strTaxRate1 = dr["TaxRate"].ToString();
                }
                if (intCount == 2)
                {
                    strTaxID2 = dr["ID"].ToString();
                    strTaxName2 = dr["TaxName"].ToString();
                    strTaxRate2 = dr["TaxRate"].ToString();
                }
                if (intCount == 3)
                {
                    strTaxID3 = dr["ID"].ToString();
                    strTaxName3 = dr["TaxName"].ToString();
                    strTaxRate3 = dr["TaxRate"].ToString();
                    break;
                }
            }
            dtblTaxHeader.Dispose();

            if ((!blReturnItem) && (!blRentRecall))
            {
                foreach (DataRow dr1 in dtblPOSDatatbl.Rows)
                {
                    iTaxType1 = 0;
                    iTaxType2 = 0;
                    iTaxType3 = 0;
                    TaxVal1 = 0;
                    TaxVal2 = 0;
                    TaxVal3 = 0;

                    string pSKU = "";
                    string pDept = "";
                    string pCat = "";
                    string pT1 = "N";
                    string pT2 = "N";
                    string pT3 = "N";

                    int tx1ty = 0;
                    int tx2ty = 0;
                    int tx3ty = 0;

                    int tx1id = 0;
                    int tx2id = 0;
                    int tx3id = 0;

                    double tx1 = 0;
                    double tx2 = 0;
                    double tx3 = 0;




                    tx1ty = GeneralFunctions.fnInt32(dr1["TX1TYPE"].ToString());
                    tx2ty = GeneralFunctions.fnInt32(dr1["TX2TYPE"].ToString());
                    tx3ty = GeneralFunctions.fnInt32(dr1["TX3TYPE"].ToString());

                    tx1id = GeneralFunctions.fnInt32(dr1["TX1ID"].ToString());
                    tx2id = GeneralFunctions.fnInt32(dr1["TX2ID"].ToString());
                    tx3id = GeneralFunctions.fnInt32(dr1["TX3ID"].ToString());

                    tx1 = GeneralFunctions.fnDouble(dr1["TX1"].ToString());
                    tx2 = GeneralFunctions.fnDouble(dr1["TX2"].ToString());
                    tx3 = GeneralFunctions.fnDouble(dr1["TX3"].ToString());


                    iMixID = GeneralFunctions.fnInt32(dr1["MIXMATCHID"].ToString());
                    iMixQty = GeneralFunctions.fnInt32(dr1["MIXMATCHQTY"].ToString());
                    iMixUnique = GeneralFunctions.fnInt32(dr1["MIXMATCHUNIQUE"].ToString());
                    dMixVal = GeneralFunctions.fnDouble(dr1["MIXMATCHVALUE"].ToString());

                    sMixFlag = dr1["MIXMATCHFLAG"].ToString();
                    sMixLast = dr1["MIXMATCHLAST"].ToString();
                    sMixType = dr1["MIXMATCHTYPE"].ToString();

                    iFeeID = GeneralFunctions.fnInt32(dr1["FEESID"].ToString());
                    sFeeLogic = dr1["FEESLOGIC"].ToString();
                    dFeeVal = GeneralFunctions.fnDouble(dr1["FEESVALUE"].ToString());
                    dFeeTxRate = GeneralFunctions.fnDouble(dr1["FEESTAXRATE"].ToString());
                    dFee = GeneralFunctions.fnDouble(dr1["FEES"].ToString());
                    dFeeTx = GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString());
                    sFeeText = dr1["FEESTEXT"].ToString();
                    sFeeQty = dr1["FEESQTY"].ToString();

                    iSalePriceID = GeneralFunctions.fnInt32(dr1["SALEPRICEID"].ToString());

                    idtxid = GeneralFunctions.fnInt32(dr1["DTXID"].ToString());
                    idtxtype = GeneralFunctions.fnInt32(dr1["DTXTYPE"].ToString());
                    ddtxrate = GeneralFunctions.fnDouble(dr1["DTXRATE"].ToString());
                    ddtx = GeneralFunctions.fnDouble(dr1["DTX"].ToString());

                    iAge = GeneralFunctions.fnInt32(dr1["AGE"].ToString());

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx1id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx1id > 0))
                    {
                        iTaxType1 = tx1ty;
                        TaxVal1 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx2id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx2id > 0))
                    {
                        iTaxType1 = tx2ty;
                        TaxVal1 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx3id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx3id > 0))
                    {
                        iTaxType1 = tx3ty;
                        TaxVal1 = tx3;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx1id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx1id > 0))
                    {
                        iTaxType2 = tx1ty;
                        TaxVal2 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx2id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx2id > 0))
                    {
                        iTaxType2 = tx2ty;
                        TaxVal2 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx3id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx3id > 0))
                    {
                        iTaxType2 = tx3ty;
                        TaxVal2 = tx3;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx1id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx1id > 0))
                    {
                        iTaxType3 = tx1ty;
                        TaxVal3 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx2id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx2id > 0))
                    {
                        iTaxType3 = tx2ty;
                        TaxVal3 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx3id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx3id > 0))
                    {
                        iTaxType3 = tx3ty;
                        TaxVal3 = tx3;
                    }

                    if (dr1["PRODUCTTYPE"].ToString() == "G") // Gift Certificate
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "GC",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "O") // Bottle Refund
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "BTL",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "X") // Mercury Gift Card
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        Settings.PaymentGateway == 5 ? "DGC" : (Settings.PaymentGateway == 7 ? "PLGC" : (Settings.PaymentGateway == 3 ? "PGC" : "MGC")),
                                        pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "A") // Account Pay
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "AR",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "I") // Gift Aid
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "GA",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        "","0","0","0",dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "C") // Coupon
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","2",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "H") // Fees Coupon
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "FEE COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","2",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "Z") // MixMatch
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "Mix n Match",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","9",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "B") // Blank Line
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),
                                        dr1["TAXID2"].ToString(),
                                        dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),
                                        dr1["TAXABLE2"].ToString(),
                                        dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),
                                        dr1["TAXRATE2"].ToString(),
                                        dr1["TAXRATE3"].ToString(),
                                        "Blank",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),0,
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else
                    {
                        int pID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                        FetchItemAdditionData(pID, ref pSKU, ref pDept, ref pCat);

                        if (strTaxExempt == "N")
                        {
                            GetTaxable(pID, strTaxID1, strTaxID2, strTaxID3, ref pT1, ref pT2, ref pT3);
                        }

                        if (dr1["EDITF"].ToString() == "N")
                        {
                            dtblFinal.Rows.Add(new object[]
                            {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,
                                        pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,
                                        idtxid,idtxtype,ddtxrate,ddtx,dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),iAge,
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()
                            });
                        }


                        if (dr1["EDITF"].ToString() == "Y")
                        {
                            dtblFinal.Rows.Add(new object[]
                            {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),
                                        dr1["TAXID2"].ToString(),
                                        dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),
                                        dr1["TAXABLE2"].ToString(),
                                        dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),
                                        dr1["TAXRATE2"].ToString(),
                                        dr1["TAXRATE3"].ToString(),
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,
                                        idtxid,idtxtype,ddtxrate,ddtx,dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),iAge,
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()
                           });
                        }
                    }
                }
            }
            else
            {
                foreach (DataRow drR in dtblPOSDatatbl.Rows)
                {
                    iMixID = GeneralFunctions.fnInt32(drR["MIXMATCHID"].ToString());
                    iMixQty = GeneralFunctions.fnInt32(drR["MIXMATCHQTY"].ToString());
                    iMixUnique = GeneralFunctions.fnInt32(drR["MIXMATCHUNIQUE"].ToString());
                    dMixVal = GeneralFunctions.fnDouble(drR["MIXMATCHVALUE"].ToString());

                    sMixFlag = drR["MIXMATCHFLAG"].ToString();
                    sMixLast = drR["MIXMATCHLAST"].ToString();
                    sMixType = drR["MIXMATCHTYPE"].ToString();

                    iFeeID = GeneralFunctions.fnInt32(drR["FEESID"].ToString());
                    sFeeLogic = drR["FEESLOGIC"].ToString();
                    dFeeVal = GeneralFunctions.fnDouble(drR["FEESVALUE"].ToString());
                    dFeeTxRate = GeneralFunctions.fnDouble(drR["FEESTAXRATE"].ToString());
                    dFee = GeneralFunctions.fnDouble(drR["FEES"].ToString());
                    dFeeTx = GeneralFunctions.fnDouble(drR["FEESTAX"].ToString());
                    sFeeText = drR["FEESTEXT"].ToString();
                    sFeeQty = drR["FEESQTY"].ToString();

                    iSalePriceID = GeneralFunctions.fnInt32(drR["SALEPRICEID"].ToString());

                    idtxid = GeneralFunctions.fnInt32(drR["DTXID"].ToString());
                    idtxtype = GeneralFunctions.fnInt32(drR["DTXTYPE"].ToString());
                    ddtxrate = GeneralFunctions.fnDouble(drR["DTXRATE"].ToString());
                    ddtx = GeneralFunctions.fnDouble(drR["DTX"].ToString());

                    iAge = GeneralFunctions.fnInt32(drR["AGE"].ToString());

                    dGRate = GeneralFunctions.fnDouble(drR["GRATE"].ToString());
                    dGPrice = GeneralFunctions.fnDouble(drR["GPRICE"].ToString());


                    DataTable dtblR = new DataTable();
                    PosDataObject.POS objR = new PosDataObject.POS();
                    objR.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    int d = GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString());
                    dtblR = objR.FetchItemDetails(GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString()));

                    foreach (DataRow drR1 in dtblR.Rows)
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        drR1["ProductID"].ToString(),
                                        drR1["Description"].ToString(),
                                        drR1["ProductType"].ToString(),
                                        "0",
                                        "0",
                                        drR1["Cost"].ToString(),
                                        drR["Qty"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["NormalPrice"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["TaxID1"].ToString(),
                                        drR1["TaxID2"].ToString(),
                                        drR1["TaxID3"].ToString(),
                                        drR1["Taxable1"].ToString(),
                                        drR1["Taxable2"].ToString(),
                                        drR1["Taxable3"].ToString(),
                                        drR1["TaxRate1"].ToString(),
                                        drR1["TaxRate2"].ToString(),
                                        drR1["TaxRate3"].ToString(),
                                        drR1["SKU"].ToString(),
                                        drR1["DepartmentID"].ToString(),
                                        drR1["CategoryID"].ToString(),
                                        drR1["UOMCount"].ToString(),
                                        drR1["UOMPrice"].ToString(),
                                        drR1["UOMDesc"].ToString(),
                                        drR1["MatrixOptionID"].ToString(),
                                        drR1["OptionValue1"].ToString(),
                                        drR1["OptionValue2"].ToString(),
                                        drR1["OptionValue3"].ToString(),
                                        drR["MATRIXOID"].ToString(),
                                        "0","0","0","0","0","0","","0",
                                        drR["NOTES"].ToString(),
                                        drR1["DiscLogic"].ToString(),
                                        drR1["DiscValue"].ToString(),
                                        drR1["Discount"].ToString(),
                                        drR1["DiscountID"].ToString(),
                                        drR1["DiscountText"].ToString(),"1",
                                        drR["RENTTYPE"].ToString(),
                                        drR["RENTDURATION"].ToString(),
                                        drR["RENTAMOUNT"].ToString(),
                                        drR["RENTDEPOSIT"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iMixID,sMixFlag,sMixType,dMixVal,iMixQty,iMixUnique,sMixLast,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        iSalePriceID,idtxid,idtxtype,ddtxrate,ddtx,
                                        drR["EDITF"].ToString(),
                                        drR["PROMPTPRICE"].ToString(),
                                        drR["BUYNGETFREEHEADERID"].ToString(),
                                        drR["BUYNGETFREECATEGORY"].ToString(),
                                        drR["BUYNGETFREENAME"].ToString(),iAge,
                                        dGRate,dGPrice,
                                        drR["UOM"].ToString()});
                    }
                    dtblR.Dispose();
                }
            }

            intTaxID1 = GeneralFunctions.fnInt32(strTaxID1);
            intTaxID2 = GeneralFunctions.fnInt32(strTaxID2);
            intTaxID3 = GeneralFunctions.fnInt32(strTaxID3);

            if (strTaxExempt == "N")
            {
                if ((!blNewLayaway) && (!blRentRecall))
                {
                    DataTable dtblTax = grdTax.ItemsSource as DataTable;
                    foreach (DataRow drTax in dtblTax.Rows)
                    {
                        if (drTax["DTAX"].ToString() == "Y") continue;
                        if (drTax["TAXID"].ToString() == strTaxID1) dblTax1 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                        if (drTax["TAXID"].ToString() == strTaxID2) dblTax2 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                        if (drTax["TAXID"].ToString() == strTaxID3) dblTax3 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                    }
                    dtblTax.Dispose();
                }
            }

            return dtblFinal;
        }

        // Fetch SKU, department code, category code from Item

        private void FetchItemAdditionData(int pID, ref string pSKU, ref string pDept, ref string pCat)
        {
            DataTable dtblProduct = new DataTable();
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblProduct = objProduct.ShowRecord(pID);
            foreach (DataRow dr in dtblProduct.Rows)
            {
                pSKU = dr["SKU"].ToString();
                pDept = dr["DepartmentID"].ToString();
                pCat = dr["CategoryID"].ToString();
            }
            dtblProduct.Dispose();
        }

        private void GetTaxable(int pID, string pTID1, string pTID2, string pTID3, ref string pT1, ref string pT2, ref string pT3)
        {
            pT1 = "N";
            pT2 = "N";
            pT3 = "N";
            DataTable dtblTax1 = new DataTable();
            PosDataObject.Product objTax = new PosDataObject.Product();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);

            if ((strServiceType == "Sales") || (strServiceType == "Repair")) dtblTax1 = objTax.ShowActiveTaxes(pID);
            if (strServiceType == "Rent") dtblTax1 = objTax.ShowActiveRentTaxes(pID);

            foreach (DataRow drt in dtblTax1.Rows)
            {
                if (drt["TAXID"].ToString() == pTID1) pT1 = "Y";
                if (drt["TAXID"].ToString() == pTID2) pT2 = "Y";
                if (drt["TAXID"].ToString() == pTID3) pT3 = "Y";
            }
            dtblTax1.Dispose();
        }

    

        // check validity of gift cert. 

        private int IfExistGC(string intGC, string strGCstore)
        {
            PosDataObject.POS objGC = new PosDataObject.POS();
            objGC.Connection = SystemVariables.Conn;
            return objGC.IfExistGiftCert(intGC, strGCstore, Settings.CentralExportImport);
        }

        // check if balance exists in gift cert.

        private int IfNotRedeemedGC(string intGC, string strGCstore)
        {
            PosDataObject.POS objGC1 = new PosDataObject.POS();
            objGC1.Connection = SystemVariables.Conn;
            return objGC1.IfNotRedeemGiftCert(intGC, strGCstore, Settings.CentralExportImport);
        }

        // fetch gift cert. balance

        private double FetchGCAmount(string intGC, string strGCStore)
        {
            PosDataObject.POS objGC2 = new PosDataObject.POS();
            objGC2.Connection = SystemVariables.Conn;
            return GeneralFunctions.FormatDouble(objGC2.FetchGiftCertAmount(intGC, strGCStore, Settings.CentralExportImport));
        }


        private int GetTenderTypeID(string strName)
        {
            int inTID = 0;
            DataTable dtblTtype = new DataTable();
            dtblTtype = grdTenderType.ItemsSource as DataTable;
            foreach (DataRow drT in dtblTtype.Rows)
            {
                if (drT["NAME"].ToString() == strName)
                {
                    inTID = GeneralFunctions.fnInt32(drT["ID"].ToString());
                    break;
                }
            }
            dtblTtype.Dispose();
            return inTID;
        }

        // check for Gift Cert. Tendering

        private async void CheckGCTender()
        {
            bool blGCExist = false;
            foreach (DataRow drT in dtblTender.Rows)
            {
                if (drT["GIFTCERTIFICATE"].ToString() != "")
                {
                    blGCExist = true;
                    break;
                }
            }
            if (blGCExist)
            {
                blurGrid.Visibility = Visibility.Visible;
                frmPOSNewGC_SCDlg frm_POSNewGC_SCDlg = new frmPOSNewGC_SCDlg();
                try
                {
                    frm_POSNewGC_SCDlg.Amount = dblChange;
                    frm_POSNewGC_SCDlg.CustID = intCustID;
                    frm_POSNewGC_SCDlg.TenderDT = dtblTender;
                    frm_POSNewGC_SCDlg.POSDT = dtblPOSDatatbl;
                    frm_POSNewGC_SCDlg.ShowDialog();
                    if (frm_POSNewGC_SCDlg.DialogResult == true)
                    {
                        if (!frm_POSNewGC_SCDlg.NewGC)
                        {
                            DataTable dtblTtype = new DataTable();
                            int intC = -1;
                            dtblTtype = grdTenderType.ItemsSource as DataTable;
                            foreach (DataRow drT in dtblTtype.Rows)
                            {
                                intC++;
                                if (drT["NAME"].ToString() == "Store Credit") break;
                            }
                            dtblTtype.Dispose();
                            gridView1.FocusedRowHandle = intC;
                            blStoreCredit = true;

                            dtblTender.Rows.Add(new object[] {   await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colID),
                                                await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType,colTender),
                                                await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colDisplayAs),
                                                GeneralFunctions.FormatDouble(-dblChange).ToString(),"","","","0","","","N","N","0" });

                            string line1 = "";
                            string line2 = "";
                            RearrangeDTxt(-dblChange, await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colDisplayAs), ref line1, ref line2);
                            frm_POS.DisplayPoleText(2, "N", "N", line1, line2);

                            grdTender.ItemsSource = dtblTender;
                            ArrangeSettings();
                            blProceed = true;
                            //numAmount.Text = GeneralFunctions.FormatDouble(-dblChange);
                        }
                        else
                        {
                            bool blPrevGC = false;
                            foreach (DataRow drP in dtblPOSDatatbl.Rows)
                            {
                                if (drP["ID"].ToString() == frm_POSNewGC_SCDlg.GCno) blPrevGC = true;
                                break;
                            }
                            if (!blPrevGC)
                            {
                                dtblPOSDatatbl.Rows.Add(new object[] {
                                        frm_POSNewGC_SCDlg.GCno,
                                        "GC#:"+frm_POSNewGC_SCDlg.GCno,
                                        "G",
                                        "0",
                                        "0",
                                        "0",
                                        "1",
                                        frm_POSNewGC_SCDlg.Amount.ToString(),
                                        "0",
                                        frm_POSNewGC_SCDlg.Amount.ToString(),"0","0","","0","","",""});
                                dblSubtotal = GeneralFunctions.FormatDouble(dblSubtotal + frm_POSNewGC_SCDlg.Amount);
                                ArrangeSettings();
                                blProceed = true;
                            }
                            else
                            {
                                new MessageBoxWindow().Show(Properties.Resources.This_Certificate_is_already_added_in_the_Cart_, "Gift Certificate Validation", MessageBoxButton.OK, MessageBoxImage.Information);
                                blProceed = false;
                            }
                        }
                    }
                    else blProceed = false;
                }
                finally
                {
                    blurGrid.Visibility = Visibility.Collapsed;
                }
            }
            else blProceed = true;
        }

        // add quantity with the previous one ( for a single item )

        private double PrevQty(int PID)
        {
            double dbqty = 0;
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if (((dr["PRODUCTTYPE"].ToString() != "G") && (dr["PRODUCTTYPE"].ToString() != "AR") && (dr["PRODUCTTYPE"].ToString() != "X") && (dr["PRODUCTTYPE"].ToString() != "O")) &&
                    (dr["ID"].ToString() == PID.ToString())) dbqty = dbqty + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["QTY"].ToString()));

            }
            return dbqty;
        }

        // add quantity with the previous one ( for a single item ) in Layway

        private double PrevLayQty(int PID)
        {
            double dbqty = 0;
            foreach (DataRow dr in dtblLayawayPayment.Rows)
            {
                if (((dr["ProductType"].ToString() != "G") && (dr["ProductType"].ToString() != "AR") && (dr["ProductType"].ToString() != "X") && (dr["ProductType"].ToString() != "O")) &&
                    (dr["ProductID"].ToString() == PID.ToString())) dbqty = dbqty + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["Qty"].ToString()));

            }
            return dbqty;
        }

        // Fetch Stock Qty of an item

        private DataTable GetGeneralStockData(int PID)
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchGeneralStockData(PID);
        }

        // Fetch Stock Qty of a matrix item

        private double GetMartixStock(int MOID, string OV1, string OV2, string OV3)
        {
            PosDataObject.POS objpos2 = new PosDataObject.POS();
            objpos2.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos2.FetchMatrixAvailableStock(MOID, OV1, OV2, OV3);
        }

        private DataTable GetMatrixData(int PID)
        {
            PosDataObject.POS objpos3 = new PosDataObject.POS();
            objpos3.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos3.FetchMatrixOptionData(PID);
        }

        // Check Stock of items before processing

        private void CheckStockBeforeTransaction()
        {
            dtblZeroStock.Rows.Clear();
            int intLine = 0;
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "AR")
                    || (dr["PRODUCTTYPE"].ToString() == "A") || (dr["PRODUCTTYPE"].ToString() == "C")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")
                    || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                int PID = GeneralFunctions.fnInt32(dr["ID"].ToString());
                bool blExists = false;
                string cPType = "";
                string cZeroStock = "Y";
                double cQty = 0;
                double AddQty = 0;
                string mxid = "";
                DataTable dtblstk = new DataTable();
                dtblstk = GetGeneralStockData(PID);
                foreach (DataRow dr4 in dtblstk.Rows)
                {
                    cPType = dr4["ProductType"].ToString();
                    cZeroStock = dr4["AllowZeroStock"].ToString();
                    cQty = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr4["QtyOnHand"].ToString()));
                }
                dtblstk.Dispose();
                if (cZeroStock == "Y")
                {
                    continue;
                }
                else
                {
                    if (cPType == "M")
                    {
                        cQty = GeneralFunctions.FormatDouble(GetMartixStock(GeneralFunctions.fnInt32(dr["MATRIXOID"].ToString()),
                               dr["MATRIXOV1"].ToString(), dr["MATRIXOV2"].ToString(), dr["MATRIXOV3"].ToString()));
                        mxid = dr["MATRIXOID"].ToString();
                    }

                    AddQty = PrevQty(PID);
                    if (GeneralFunctions.FormatDouble(cQty - AddQty) < 0)
                    {
                        foreach (DataRow dr1 in dtblZeroStock.Rows)
                        {
                            if (dr1["ID"].ToString() == PID.ToString())
                            {
                                if (dr1["PRODUCTTYPE"].ToString() != "M")
                                {
                                    blExists = true;
                                    break;
                                }
                                else
                                {
                                    if (dr1["MATRIXOID"].ToString() == mxid)
                                        blExists = true;
                                    break;
                                }
                            }
                        }

                        if (!blExists)
                        {
                            intLine++;

                            if (dr["PRODUCTTYPE"].ToString() != "M")
                            {
                                dtblZeroStock.Rows.Add(new object[] {  dr["ID"].ToString(),
                                              intLine.ToString() + ". " + dr["PRODUCT"].ToString(),dr["PRODUCTTYPE"].ToString(),"","","",""});

                            }
                            else
                            {
                                string strNM1 = "";
                                string strNM2 = "";
                                string strNM3 = "";
                                DataTable dtblM = new DataTable();
                                dtblM = GetMatrixData(GeneralFunctions.fnInt32(mxid));
                                foreach (DataRow dr2 in dtblM.Rows)
                                {
                                    strNM1 = dr2["ON1"].ToString();
                                    strNM2 = dr2["ON2"].ToString();
                                    strNM3 = dr2["ON3"].ToString();
                                }
                                dtblM.Dispose();

                                dtblZeroStock.Rows.Add(new object[] {  dr["ID"].ToString(),
                                              intLine.ToString() + ". " +dr["PRODUCT"].ToString() + "   " + strNM1 + ": " + dr["MATRIXOV1"].ToString()
                                              + "  " + strNM2 + ": " + dr["MATRIXOV2"].ToString() + "  " + strNM3 + ": " + dr["MATRIXOV3"].ToString(),
                                              dr["PRODUCTTYPE"].ToString(),mxid,dr["MATRIXOV1"].ToString(),dr["MATRIXOV2"].ToString(),dr["MATRIXOV3"].ToString()});
                            }
                            blExists = false;
                        }
                    }

                }

            }
        }

        // Check Store Credit Balance satisfy ( if exists )

        private bool CheckStoreCreditBeforeTransaction()
        {
            bool IsStoreCr = false;
            double dblAmount = 0;
            double dblStrCredit = 0;
            foreach (DataRow drT in dtblTender.Rows)
            {
                if (drT["TENDER"].ToString() == "Store Credit")
                {
                    IsStoreCr = true;
                    break;
                }
            }

            if (!IsStoreCr)
                return true;
            else
            {
                foreach (DataRow drT1 in dtblTender.Rows)
                {
                    if (drT1["TENDER"].ToString() == "Store Credit")
                    {
                        dblAmount = dblAmount + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drT1["AMOUNT"].ToString()));
                    }
                }

                PosDataObject.Customer objCust = new PosDataObject.Customer();
                objCust.Connection = new SqlConnection(SystemVariables.ConnectionString);
                DataTable dtblstr = new DataTable();
                dtblstr = objCust.FetchStoreCrAcctCr(intCustID);
                foreach (DataRow drs in dtblstr.Rows)
                {
                    dblStrCredit = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drs["StoreCredit"].ToString()));
                }
                dtblstr.Dispose();

                if (Settings.AllowNegativeStoreCredit == "Y")
                {
                    return true;
                }
                else
                {
                    if (dblAmount > dblStrCredit)
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Insufficient_Store_Credit_balance, Properties.Resources.Store_Credit_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return false;
                    }
                    else
                        return true;
                }
            }

        }

        // Check Customer House Account Balance satisfy ( if exists )

        private bool CheckHouseAccountBeforeTransaction()
        {
            bool IsHouseAcct = false;
            double dblAmount = 0;
            double dblARCredit = 0;
            double dblARBalance = 0;
            foreach (DataRow drT in dtblTender.Rows)
            {
                if (drT["TENDER"].ToString() == "House Account")
                {
                    IsHouseAcct = true;
                    break;
                }
            }

            if (!IsHouseAcct)
                return true;
            else
            {
                foreach (DataRow drT1 in dtblTender.Rows)
                {
                    if (drT1["TENDER"].ToString() == "House Account")
                    {
                        dblAmount = dblAmount + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drT1["AMOUNT"].ToString()));
                    }
                }

                PosDataObject.Customer objCust = new PosDataObject.Customer();
                objCust.Connection = new SqlConnection(SystemVariables.ConnectionString);
                DataTable dtblstr = new DataTable();
                dtblstr = objCust.FetchStoreCrAcctCr(intCustID);
                foreach (DataRow drs in dtblstr.Rows)
                {
                    dblARCredit = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drs["ARCreditLimit"].ToString()));
                }
                dtblstr.Dispose();
                dblARBalance = GeneralFunctions.FormatDouble(GetCustomerHouseAcctBalance());
                if (dblAmount > GeneralFunctions.FormatDouble(dblARCredit - dblARBalance))
                {
                    new MessageBoxWindow().Show(Properties.Resources.Insufficient_Store_Credit_balance, Properties.Resources.House_Account_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    return false;
                }
                else return true;
            }

        }

        // fetch customer house account balance amount

        private double GetCustomerHouseAcctBalance()
        {
            PosDataObject.Customer objCust = new PosDataObject.Customer();
            objCust.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objCust.FetchCustomerAcctBalance(intCustID);
        }

        // Check Stock of items before layaway processing

        private void CheckStockBeforeLayawayTransaction()
        {
            dtblZeroStock.Rows.Clear();
            int intLine = 0;
            foreach (DataRow dr in dtblLayawayPayment.Rows)
            {
                if ((dr["ProductType"].ToString() == "G") || (dr["ProductType"].ToString() == "AR")
                    || (dr["ProductType"].ToString() == "X") || (dr["ProductType"].ToString() == "O")
                    || (dr["ProductType"].ToString() == "C") || (dr["ProductType"].ToString() == "H")) continue;
                if (dr["Balance"].ToString() != dr["Deposit"].ToString()) continue;
                int PID = GeneralFunctions.fnInt32(dr["ProductID"].ToString());
                bool blExists = false;
                string cPType = "";
                string cZeroStock = "Y";
                double cQty = 0;
                double AddQty = 0;
                string mxid = "";
                DataTable dtblstk = new DataTable();
                dtblstk = GetGeneralStockData(PID);
                foreach (DataRow dr4 in dtblstk.Rows)
                {
                    cPType = dr4["ProductType"].ToString();
                    cZeroStock = dr4["AllowZeroStock"].ToString();
                    cQty = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr4["QtyOnHand"].ToString()));
                }
                dtblstk.Dispose();
                if (cZeroStock == "Y")
                {
                    continue;
                }
                else
                {
                    if (cPType == "M")
                    {
                        cQty = GeneralFunctions.FormatDouble(GetMartixStock(GeneralFunctions.fnInt32(dr["MatrixOptionID"].ToString()),
                               dr["OptionValue1"].ToString(), dr["OptionValue2"].ToString(), dr["OptionValue3"].ToString()));
                        mxid = dr["MatrixOptionID"].ToString();
                    }

                    AddQty = PrevLayQty(PID);
                    if (GeneralFunctions.FormatDouble(cQty - AddQty) < 0)
                    {
                        foreach (DataRow dr1 in dtblZeroStock.Rows)
                        {
                            if (dr1["ID"].ToString() == PID.ToString())
                            {
                                if (dr1["PRODUCTTYPE"].ToString() != "M")
                                {
                                    blExists = true;
                                    break;
                                }
                                else
                                {
                                    if (dr1["MATRIXOID"].ToString() == mxid)
                                        blExists = true;
                                    break;
                                }
                            }
                        }

                        if (!blExists)
                        {
                            intLine++;

                            if (dr["ProductType"].ToString() != "M")
                            {
                                dtblZeroStock.Rows.Add(new object[] {  dr["ProductID"].ToString(),
                                              intLine.ToString() + ". " + dr["Description"].ToString(),dr["ProductType"].ToString(),"","","",""});

                            }
                            else
                            {
                                string strNM1 = "";
                                string strNM2 = "";
                                string strNM3 = "";
                                DataTable dtblM = new DataTable();
                                dtblM = GetMatrixData(GeneralFunctions.fnInt32(mxid));
                                foreach (DataRow dr2 in dtblM.Rows)
                                {
                                    strNM1 = dr2["ON1"].ToString();
                                    strNM2 = dr2["ON2"].ToString();
                                    strNM3 = dr2["ON3"].ToString();
                                }
                                dtblM.Dispose();

                                dtblZeroStock.Rows.Add(new object[] {  dr["ProductID"].ToString(),
                                              intLine.ToString() + ". " +dr["Description"].ToString() + "   " + strNM1 + ": " + dr["OptionValue1"].ToString()
                                              + "  " + strNM2 + ": " + dr["OptionValue2"].ToString() + "  " + strNM3 + ": " + dr["OptionValue3"].ToString(),
                                              dr["ProductType"].ToString(),mxid,dr["OptionValue1"].ToString(),dr["OptionValue2"].ToString(),dr["OptionValue3"].ToString()});
                            }
                            blExists = false;
                        }
                    }

                }

            }
        }

        // Set Layaway info before processing

        private DataTable GetLayawayInvoiceTable()
        {

            DataTable dtbl = new DataTable();
            dtbl = pdtblForStockUpdate;

            int Rcount = pdtblForStockUpdate.Rows.Count;
            int Ccount = 0;
            double dblTotalDiscount = 0;
            double dblTotalSaleAmt = 0;
            foreach (DataRow dr in pdtblForStockUpdate.Rows)
            {
                Ccount++;

                double Tax1 = 0;
                double Tax2 = 0;
                double Tax3 = 0;
                double DTax = 0;
                double dblPrice = 0;
                double dblDiscount = 0;
                dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["PRICE"].ToString()));
                dblDiscount = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["ITEMDISCOUNT"].ToString()));

                dblTotalDiscount = GeneralFunctions.FormatDouble(dblTotalDiscount + dblDiscount);

                if (strTaxExempt == "N")
                {
                    if (dr["TAXABLE1"].ToString() == "Y")
                        Tax1 = (GeneralFunctions.fnInt32(dr["TX1TYPE"].ToString()) == 0) ? GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TAXRATE1"].ToString()) * dblPrice / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TX1"].ToString()));
                    if (dr["TAXABLE2"].ToString() == "Y")
                        Tax2 = (GeneralFunctions.fnInt32(dr["TX2TYPE"].ToString()) == 0) ? GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TAXRATE2"].ToString()) * dblPrice / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TX2"].ToString()));
                    if (dr["TAXABLE3"].ToString() == "Y")
                        Tax3 = (GeneralFunctions.fnInt32(dr["TX3TYPE"].ToString()) == 0) ? GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TAXRATE3"].ToString()) * dblPrice / 100) : GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["TX3"].ToString()));
                    if (GeneralFunctions.fnInt32(dr["DTXID"].ToString()) > 0)
                        DTax = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["DTX"].ToString()));
                }

                dr["TAX1"] = Tax1.ToString();
                dr["TAX2"] = Tax2.ToString();
                dr["TAX3"] = Tax3.ToString();
                dr["TAX"] = Convert.ToString(Tax1 + Tax2 + Tax3 + DTax);
                dr["DISCOUNT"] = dblDiscount.ToString();
                dr["TOTALSALE"] = Convert.ToString(Tax1 + Tax2 + Tax3 + DTax + dblPrice);
                dr["DISCOUNTREASON"] = strDiscountReason;
                dblTax1 = Tax1;
                dblTax2 = Tax2;
                dblTax3 = Tax3;

                dblTax = Tax1 + Tax2 + Tax3 + DTax;
                dblTotalSaleAmt = GeneralFunctions.FormatDouble(dblTotalSaleAmt + Tax1 + Tax2 + Tax3 + DTax + dblPrice);
            }

            Ccount = 0;
            double dblSumLayawayTender = 0;
            foreach (DataRow dr1 in pdtblForStockUpdate.Rows)
            {
                Ccount++;
                double dblLayawayTender = 0;
                if (Ccount != Rcount)
                {
                    dblLayawayTender = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr1["TOTALSALE"].ToString()) * dblTender / dblTotalSaleAmt);

                    dblSumLayawayTender = dblSumLayawayTender + dblLayawayTender;
                }
                else
                {
                    dblLayawayTender = GeneralFunctions.FormatDouble(dblTender - dblSumLayawayTender);
                }

                dr1["LAYAWAYAMOUNT"] = dblLayawayTender.ToString();
            }
            return dtbl;
        }

        // assign Layaway number for invoice printing

        private DataTable LayawayNoForInvoicePrinting()
        {
            dtblLayawayForInvoice = new DataTable();
            dtblLayawayForInvoice.Columns.Add("LAYAWAYNO", System.Type.GetType("System.String"));
            if (blNewLayaway)
            {
                dtblLayawayForInvoice.Rows.Add(new object[] {
                                        intLAYNO.ToString() });
            }
            else
            {
                foreach (DataRow dr in dtblLayawayPayment.Rows)
                {
                    dtblLayawayForInvoice.Rows.Add(new object[] {
                                        dr["LayawayNo"].ToString() });
                }
            }

            return dtblLayawayForInvoice;
        }

        // display looged user, current time etc.

        private void GetPOSCounterInfo()
        {
            if (SystemVariables.CurrentUserID <= 0)
                lbClerk.Text = " " + Properties.Resources.Clerk__ + "  " + Properties.Resources.Admin;
            else
                lbClerk.Text = " " + Properties.Resources.Clerk__ + "  " + SystemVariables.CurrentUserCode;

            lbInvoice.Text = Properties.Resources.Invoice__ + "  " + intMaxInvNo.ToString() + "  ";

            lbCustID.Text = ""; ;
            lbCustName.Text = "";
            lbCustAddress.Text = "";
            lbCustNotes.Text = "";
            lbCustBal.Text = "";
            lbCustTax.Text = "";

            string refTaxExempt = "";
            string refDiscountLevel = "";
            string refTaxID = "";
            string refStoreCr = "";
            string refCID = "";
            string refCName = "";
            string refCAdd = "";
            double dblBalance = 0;
            string refARCredit = "";
            string refNotes = "";
            if (intCustID > 0)
            {
                FetchCustomer(intCustID, ref refCID, ref refCName, ref refCAdd,
                            ref refTaxExempt, ref refDiscountLevel, ref refTaxID, ref refStoreCr,
                            ref refARCredit, ref refNotes);
                strTaxExempt = refTaxExempt;
                //strDiscountLevel = refDiscountLevel;
                dblBalance = GetAccountBalance(intCustID);
                lbCustID.Text = Properties.Resources.Customer_ID_ + refCID;
                lbCustName.Text = refCName;
                lbCustAddress.Text = refCAdd;
                lbCustNotes.Text = refNotes;
                ArrangeCustomerLine(GeneralFunctions.fnDouble(refStoreCr), dblBalance, refTaxID);
                dblStoreCr = GeneralFunctions.fnDouble(refStoreCr);
                dblCustAcctLimit = GeneralFunctions.fnDouble(refARCredit);
                dblCustAcctBalance = dblBalance;
            }
        }

        // Get Customer Info.

        private void FetchCustomer(int iCustID, ref string refCID, ref string refCName, ref string refCAdd, ref string refTaxExempt,
                                 ref string refDiscountLevel, ref string refTaxID, ref string refStoreCr, ref string refARCredit, ref string refNotes)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = new SqlConnection(SystemVariables.ConnectionString);
            DataTable dtblCust = objPOS.FetchCustomerRecord(iCustID);
            foreach (DataRow dr in dtblCust.Rows)
            {
                refTaxExempt = dr["TaxExempt"].ToString();
                refDiscountLevel = dr["DiscountLevel"].ToString();
                if (refDiscountLevel == "") refDiscountLevel = "A";
                refTaxID = dr["TaxID"].ToString();
                refStoreCr = dr["StoreCredit"].ToString();
                refARCredit = dr["ARCreditLimit"].ToString();
                refNotes = dr["POSNotes"].ToString();
                refCID = dr["CustomerID"].ToString();
                refCName = dr["Salutation"].ToString() + " " + dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                if (dr["Address1"].ToString().Trim() != "") refCAdd = dr["Address1"].ToString();
                if (dr["City"].ToString().Trim() != "")
                {
                    if (refCAdd == "") refCAdd = dr["City"].ToString();
                    else refCAdd = refCAdd + "\n" + dr["City"].ToString();
                }
            }
            dtblCust.Dispose();
        }

        // get customer account balance

        private double GetAccountBalance(int intCID)
        {
            PosDataObject.POS objPOS = new PosDataObject.POS();
            objPOS.Connection = SystemVariables.Conn;
            return objPOS.FetchCustomerAcctPayBalance(intCID);
        }

        // Display regenerated info for the customer

        private void ArrangeCustomerLine(double Scr, double ABal, string Tx)
        {
            string str1 = "";
            string str2 = "";
            if (Settings.DecimalPlace == 3)
            {
                if (Scr < 0) str1 = str1 + Properties.Resources.Store_Cr_ + " (" + Scr.ToString("f3").Remove(0, 1) + ")";
                else str1 = str1 + Properties.Resources.Store_Cr_ + Scr.ToString("f3");
                if (ABal < 0) str1 = str1 + "    " + Properties.Resources.Acct_Balance_ + " (" + ABal.ToString("f3").Remove(0, 1) + ")";
                else str1 = str1 + "    " + Properties.Resources.Acct_Balance_ + ABal.ToString("f3");
            }
            else
            {
                if (Scr < 0) str1 = str1 + Properties.Resources.Store_Cr_ + " (" + Scr.ToString("f").Remove(0, 1) + ")";
                else str1 = str1 + Properties.Resources.Store_Cr_ + Scr.ToString("f");
                if (ABal < 0) str1 = str1 + "    " + Properties.Resources.Acct_Balance_ + " (" + ABal.ToString("f3").Remove(0, 1) + ")";
                else str1 = str1 + "    " + Properties.Resources.Acct_Balance_ + ABal.ToString("f");
            }
            if (Tx != "") str2 = str2 + Properties.Resources.Tax_ID_ + Tx;
            else str2 = "";

            lbCustBal.Text = str1;
            lbCustTax.Text = str2;
        }

        // check Store Credit & if satisfy set Tender Amount

        private bool CheckAndSetStoreCreditAmount()
        {
            bool blFind = false;
            foreach (DataRow dr in dtblTender.Rows)
            {
                if (dr["TENDER"].ToString() == "Store Credit")
                {
                    blFind = true;
                    break;
                }
            }
            if (blFind)
            {
                new MessageBoxWindow().Show(Properties.Resources.This_Store_Credit_has_already_been_issued_, Properties.Resources.Store_Credit_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                return false;
            }

            if (Settings.DecimalPlace == 3)
            {
                if (GeneralFunctions.fnDouble(dblStoreCr.ToString("f3")) > GeneralFunctions.fnDouble(dblBalance.ToString("f3")))
                    numAmount.Text = GeneralFunctions.fnDouble(dblBalance.ToString("f3")).ToString();
                else
                {
                    if (Settings.AllowNegativeStoreCredit == "Y")
                    {
                        numAmount.Text = GeneralFunctions.fnDouble(dblBalance.ToString("f3")).ToString();
                    }
                    else
                    {
                        numAmount.Text = GeneralFunctions.fnDouble(dblStoreCr.ToString("f3")).ToString();
                    }
                }
            }
            else
            {
                if (GeneralFunctions.fnDouble(dblStoreCr.ToString("f")) > GeneralFunctions.fnDouble(dblBalance.ToString("f")))
                    numAmount.Text = GeneralFunctions.fnDouble(dblBalance.ToString("f")).ToString();
                else
                {
                    if (Settings.AllowNegativeStoreCredit == "Y")
                    {
                        numAmount.Text = GeneralFunctions.fnDouble(dblBalance.ToString("f")).ToString();
                    }
                    else
                    {
                        numAmount.Text = GeneralFunctions.fnDouble(dblStoreCr.ToString("f")).ToString();
                    }
                }
            }

            return true;
        }

        // check House Account & if satisfy set Tender Amount

        private bool CheckAndSetHouseAccountAmount()
        {
            bool blFind = false;
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() == "A")
                {
                    blFind = true;
                    break;
                }
            }
            if (blFind)
            {
                new MessageBoxWindow().Show(Properties.Resources.House_Account_payments_can_not_be_made_with_House_Account_tender_type, Properties.Resources.House_Account_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                return false;
            }

            if (Settings.DecimalPlace == 3)
            {
                if (GeneralFunctions.fnDouble(numAmount.Text.ToString()) <= GeneralFunctions.fnDouble((dblCustAcctLimit - dblCustAcctBalance).ToString("f3")))
                {
                    return true;
                }
                else
                {
                    new MessageBoxWindow().Show(Properties.Resources.The_tender_amount_will_exceed_the_customer_s_House_Account_limit_of + " " + dblCustAcctLimit.ToString("f3") + ". " + Properties.Resources.The_current_balance_is + dblCustAcctBalance.ToString("f3"), Properties.Resources.House_Account_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    return false;
                }
            }
            else
            {
                if (GeneralFunctions.fnDouble(numAmount.Text.ToString()) <= GeneralFunctions.fnDouble((dblCustAcctLimit - dblCustAcctBalance).ToString("f")))
                {
                    return true;
                }
                else
                {
                    new MessageBoxWindow().Show(Properties.Resources.The_tender_amount_will_exceed_the_customer_s_House_Account_limit_of + " " + dblCustAcctLimit.ToString("f") + ". " + Properties.Resources.The_current_balance_is + dblCustAcctBalance.ToString("f"), Properties.Resources.House_Account_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    return false;
                }
            }
        }

        // check House Account & if satisfy set Tender Amount (Layaway)

        private bool CheckAndSetHouseAccountAmountForLayaway()
        {
            bool blFind = false;
            foreach (DataRow dr in dtblLayawayPayment.Rows)
            {
                if (dr["PRODUCTTYPE"].ToString() == "A")
                {
                    blFind = true;
                    break;
                }
            }
            if (blFind)
            {
                new MessageBoxWindow().Show(Properties.Resources.House_Account_payments_can_not_be_made_with_House_Account_tender_type, Properties.Resources.House_Account_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                return false;
            }

            if (Settings.DecimalPlace == 3)
            {
                if (GeneralFunctions.fnDouble(numAmount.Text.ToString()) <= GeneralFunctions.fnDouble((dblCustAcctBalance - dblCustAcctLimit).ToString("f3")))
                {
                    return true;
                }
                else
                {
                    new MessageBoxWindow().Show(Properties.Resources.The_tender_amount_will_exceed_the_customer_s_House_Account_limit_of + " " + dblCustAcctLimit.ToString("f3") + ". " + Properties.Resources.The_current_balance_is + " " + dblCustAcctBalance.ToString("f3"), Properties.Resources.House_Account_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    return false;
                }
            }
            else
            {
                if (GeneralFunctions.fnDouble(numAmount.Text.ToString()) <= GeneralFunctions.fnDouble((dblCustAcctBalance - dblCustAcctLimit).ToString("f")))
                {
                    return true;
                }
                else
                {
                    new MessageBoxWindow().Show(Properties.Resources.The_tender_amount_will_exceed_the_customer_s_House_Account_limit_of + " " + dblCustAcctLimit.ToString("f") + ". " + Properties.Resources.The_current_balance_is + " " + dblCustAcctBalance.ToString("f"), Properties.Resources.House_Account_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                    return false;
                }
            }
        }

        private int ReturnID(string prm)
        {
            PosDataObject.POS objcard = new PosDataObject.POS();
            objcard.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objcard.GetCardTypeID(prm);
        }

        private int GetTranID(int prm)
        {
            PosDataObject.POS objp = new PosDataObject.POS();
            objp.Connection = SystemVariables.Conn;
            return objp.GetTranID1(prm);
        }

        // Get Customer Name from Record ID

        private string GetCustomerName(int CID)
        {
            if (CID == 0) return "";
            else
            {
                string strcname = "";
                PosDataObject.POS objPOSCust = new PosDataObject.POS();
                objPOSCust.Connection = new SqlConnection(SystemVariables.ConnectionString);
                DataTable dtblCust = objPOSCust.FetchCustomerRecord(CID);
                foreach (DataRow dr in dtblCust.Rows)
                {
                    strcname = dr["FirstName"].ToString() + " " + dr["LastName"].ToString();
                }
                return strcname;
            }

        }

        private void btnUP_Click(object sender, RoutedEventArgs e)
        {
            int rcnt = (grdTenderType.ItemsSource as DataTable).Rows.Count - 1;
            int rwhnd = gridView1.FocusedRowHandle;

            if (rwhnd - 10 >= 0)
            {
                if (rwhnd >= 0) gridView1.FocusedRowHandle = rwhnd - 10;
                //grdTenderType.MakeRowVisible(rwhnd - 10 > 0 ? 0 : rwhnd - 10, false);
            }
        }

        private void btnDown_Click(object sender, RoutedEventArgs e)
        {
            int rcnt = (grdTenderType.ItemsSource as DataTable).Rows.Count - 1;
            int rwhnd = gridView1.FocusedRowHandle;

            if (rwhnd + 10 <= rcnt)
            {
                if (rwhnd >= 0) gridView1.FocusedRowHandle = rwhnd + 10;
                //gridView1.MakeRowVisible(rwhnd + 10 == rcnt ? rwhnd + 10 : rcnt, false);
            }
        }

        private void btnUP1_Click(object sender, RoutedEventArgs e)
        {
            gridView2.FocusedRowHandle = gridView2.FocusedRowHandle - 1;
        }

        private void btnDown1_Click(object sender, RoutedEventArgs e)
        {
            gridView2.FocusedRowHandle = gridView2.FocusedRowHandle + 1;
        }

        // Check Security Permission

        private bool CheckFunctionButton(string scode)
        {
            blFunctionBtnAccess = false;
            if (SystemVariables.CurrentUserID <= 0)
            {
                blFunctionBtnAccess = true;
                return true;
            }

            PosDataObject.Security objSecurity = new PosDataObject.Security();
            objSecurity.Connection = new SqlConnection(SystemVariables.ConnectionString);
            int result = objSecurity.IsExistsPOSAccess(SystemVariables.CurrentUserID, scode);
            if (result == 0)
            {
                if (blAllowByAdmin)
                {
                    return true;
                }
                else
                {
                    bool bl2 = false;
                    blurGrid.Visibility = Visibility.Visible;
                    frm_POSLoginDlg frm_POSLoginDlg2 = new frm_POSLoginDlg();
                    try
                    {
                        frm_POSLoginDlg2.SecurityCode = scode;
                        frm_POSLoginDlg2.ShowDialog();
                        if (frm_POSLoginDlg2.DialogResult == true)
                        {
                            bl2 = true;
                            blAllowByAdmin = frm_POSLoginDlg2.AllowByAdmin;
                            intSuperUserID = frm_POSLoginDlg2.SuperUserID;
                        }
                    }
                    finally
                    {
                        blurGrid.Visibility = Visibility.Collapsed;
                    }
                    if (!bl2) return false;
                    else return true;
                }
            }
            else
            {
                blFunctionBtnAccess = true;
                return true;
            }
        }

        // Check if Food Stamp Tender Applicable or not

        private bool IsFSTenderApplicable()
        {
            bool f = false;
            int i = 0;
            foreach (DataRow dr in dtblTender.Rows)
            {
                i++;
                if (i == 1)
                {
                    if ((dr["TENDER"].ToString() == "Food Stamps") || (dr["TENDER"].ToString() == "EBT Voucher") || (dr["TENDER"].ToString() == "EBT Cash"))
                    {
                        f = true;
                    }
                    break;
                }
            }
            return f;
        }

        // Get Food Stamp Tender Toatl

        private double PreviousFSTender()
        {
            double dblPrice = 0;
            foreach (DataRow dr in dtblTender.Rows)
            {
                if ((dr["TENDER"].ToString() == "Food Stamps") || (dr["TENDER"].ToString() == "EBT Voucher") || (dr["TENDER"].ToString() == "EBT Cash"))
                {
                    dblPrice = dblPrice + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()));
                }
            }
            return dblPrice;
        }

        // Get Bottle Refund Amount (from the transaction details)

        private double GetBottleRefundAmount()
        {
            double pr = 0;
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if (!(dr["PRODUCTTYPE"].ToString() == "O")) continue;
                pr = pr + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }

            return pr;
        }

        // Get Food Stamp Amount (from the transaction details)

        private double GetFoodStampAmount(ref double fstx)
        {
            double pr = 0;
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "B") || (dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (GetFStamp(GeneralFunctions.fnInt32(dr["ID"].ToString())) != "Y") continue;

                double rate = 0;
                double qty = 1;
                // if (dr["RATE"].ToString() == "") rate = 0; else rate = GeneralFunctions.fnDouble(dr["RATE"].ToString());
                //if (dr["QTY"].ToString() == "") qty = 1; else qty = GeneralFunctions.fnDouble(dr["QTY"].ToString());

                pr = pr + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["PRICE"].ToString()));

                fstx = fstx + GeneralFunctions.fnDouble(dr["TX1"].ToString()) +
                    GeneralFunctions.fnDouble(dr["TX2"].ToString()) + GeneralFunctions.fnDouble(dr["TX3"].ToString());
            }

            foreach (DataRow dr1 in dtblPOSDatatbl.Rows)
            {
                if (dr1["FEESID"].ToString() == "0") continue;
                if (IsFoodStampableFees(GeneralFunctions.fnInt32(dr1["FEESID"].ToString())))
                {
                    if (IsApplyToQtyFees(GeneralFunctions.fnInt32(dr1["FEESID"].ToString())))
                    {
                        pr = pr + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr1["QTY"].ToString()) * (GeneralFunctions.fnDouble(dr1["FEES"].ToString()) + GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString())));
                    }
                    else
                    {
                        pr = pr + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr1["FEES"].ToString()) + GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString()));
                    }
                }
            }

            double cpnAmount = 0;
            double cpnPerc = 0;
            double cpnTotal = 0;

            CouponCalculation_FoodStamp(dtblPOSDatatbl, ref cpnAmount, ref cpnPerc, ref cpnTotal);
            pr = pr - cpnAmount;

            return pr;
        }

        // calculate Discount of Food Stamp Item

        private void CouponCalculation_FoodStamp(DataTable dtbl, ref double resultAmount, ref double resultPerc, ref double TotAmount)
        {
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")) continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                if (GetFStamp(GeneralFunctions.fnInt32(dr["ID"].ToString())) != "Y") continue;
                TotAmount = TotAmount + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            double dpp = 0;
            double dAA = 0;
            double dp = 0;
            double dA = 0;
            double retamt = 0;
            resultAmount = 0;
            double AppAmount = 0;
            if (strServiceType == "Repair") return;
            int cnt = -1;

            dtbl.DefaultView.Sort = "ITEMINDEX asc";
            dtbl.DefaultView.ApplyDefaultSort = true;

            foreach (DataRowView dr in dtbl.DefaultView)
            {
                cnt++;
                dp = 0;
                dA = 0;
                AppAmount = 0;
                if (dr["PRODUCTTYPE"].ToString() != "C") continue;
                if (dr["PRODUCTTYPE"].ToString() != "Z") continue;
                if (dr["DISCLOGIC"].ToString() == "P") dp = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());
                if (dr["DISCLOGIC"].ToString() == "A") dA = GeneralFunctions.fnDouble(dr["DISCVALUE"].ToString());


                if (CheckIfRestrictedItem(GeneralFunctions.fnInt32(dr["ID"].ToString())))
                {
                    // discount calculation on restricted items
                    AppAmount = RestrictItemApplicableAmount_FS(GeneralFunctions.fnInt32(dr["ID"].ToString()));

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    resultAmount = resultAmount + retamt;
                }
                else
                {
                    // discount calculation on all items

                    AppAmount = AllItemApplicableAmount_FS();

                    if ((((dp != 0) || (dA != 0))) && (AppAmount > 0))
                    {
                        retamt = (AppAmount * dp / 100) + dA;
                        dAA = dAA + dA;
                        dpp = dpp + dp;
                    }
                    resultAmount = resultAmount + retamt;
                }
            }
            resultAmount = GeneralFunctions.FormatDouble(resultAmount);
            if (TotAmount != 0) resultPerc = dpp + GeneralFunctions.fnDouble(dAA * 100 / TotAmount);
        }

        // get restricted discount applicable to the foodstample item

        private double RestrictItemApplicableAmount_FS(int DID)
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["DISCOUNTID"].ToString() != "0") continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                if (GetFStamp(GeneralFunctions.fnInt32(dr["ID"].ToString())) != "Y") continue;
                string chr = "N";
                PosDataObject.POS objp = new PosDataObject.POS();
                objp.Connection = new SqlConnection(SystemVariables.ConnectionString);
                objp.IsApplicableForRestrictedDiscount(GeneralFunctions.fnInt32(dr["ID"].ToString()), DID, ref chr);
                if (chr == "Y") ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }

        // get all discount applicable to the foodstample item

        private double AllItemApplicableAmount_FS()
        {
            double ret = 0;
            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "G") || (dr["PRODUCTTYPE"].ToString() == "A")
                    || (dr["PRODUCTTYPE"].ToString() == "X") || (dr["PRODUCTTYPE"].ToString() == "O") || (dr["PRODUCTTYPE"].ToString() == "Z")
                    || (dr["PRODUCTTYPE"].ToString() == "H")) continue;
                if (dr["PRICE"].ToString() == "") continue;
                if (dr["DISCOUNTID"].ToString() != "0") continue;
                if (IsNonDiscountableItem(GeneralFunctions.fnInt32(dr["ID"].ToString()))) continue;
                if (GetFStamp(GeneralFunctions.fnInt32(dr["ID"].ToString())) != "Y") continue;
                ret = ret + GeneralFunctions.fnDouble(dr["PRICE"].ToString());
            }
            return ret;
        }

        // Check if Quantity is applicable with Fees and charge

        private bool IsApplyToQtyFees(int FID)
        {
            PosDataObject.POS opos = new PosDataObject.POS();
            opos.Connection = SystemVariables.Conn;
            return opos.IsApplyToQtyFees(FID);
        }

        // Check if Food Stamp is applicable with Fees and charge

        private bool IsFoodStampableFees(int FID)
        {
            PosDataObject.POS opos = new PosDataObject.POS();
            opos.Connection = SystemVariables.Conn;
            return opos.IsFoodStampableFees(FID);
        }

        // Check if an Item is Food Stampable

        private string GetFStamp(int PID)
        {
            PosDataObject.Product objProduct = new PosDataObject.Product();
            objProduct.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objProduct.GetFoodStampFlag(PID);
        }

        // Get Cash Tender Details 

        private void GetCashTenderTypeData()
        {
            PosDataObject.TenderTypes tnd = new PosDataObject.TenderTypes();
            tnd.Connection = SystemVariables.Conn;
            tnd.GetCashRecord(ref CashTID, ref CashTName, ref CashTDisplay);
        }


        // Assign Cart before repair transaction

        private DataTable FinalDataTableForRepair()
        {
            DataTable dtblFinal = new DataTable();
            dtblFinal.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ONHANDQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NORMALQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("COST", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("QTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("RATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DEPT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("CAT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMDESC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMID", System.Type.GetType("System.String"));
            // add for layaway Invoice
            dtblFinal.Columns.Add("TAX1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TOTALSALE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTREASON", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("LAYAWAYAMOUNT", System.Type.GetType("System.String"));

            // add for invoice notes
            dtblFinal.Columns.Add("NOTES", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMDISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("RENTTYPE", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("RENTDURATION", System.Type.GetType("System.Double"));//35
            dtblFinal.Columns.Add("RENTAMOUNT", System.Type.GetType("System.Double"));//36
            dtblFinal.Columns.Add("RENTDEPOSIT", System.Type.GetType("System.Double"));//37

            dtblFinal.Columns.Add("REPAIRITEMTAG", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("REPAIRITEMSLNO", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("REPAIRITEMPURCHASEDATE", System.Type.GetType("System.String"));//34

            dtblFinal.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//38
            dtblFinal.Columns.Add("TX1", System.Type.GetType("System.Double"));//39
            dtblFinal.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//40
            dtblFinal.Columns.Add("TX2", System.Type.GetType("System.Double"));//41
            dtblFinal.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//42
            dtblFinal.Columns.Add("TX3", System.Type.GetType("System.Double"));//43

            // for Fees & Charges
            dtblFinal.Columns.Add("FEESID", System.Type.GetType("System.Int32"));//62
            dtblFinal.Columns.Add("FEESLOGIC", System.Type.GetType("System.String"));//63
            dtblFinal.Columns.Add("FEESVALUE", System.Type.GetType("System.Double"));//64
            dtblFinal.Columns.Add("FEESTAXRATE", System.Type.GetType("System.Double"));//65
            dtblFinal.Columns.Add("FEES", System.Type.GetType("System.Double"));//66
            dtblFinal.Columns.Add("FEESTAX", System.Type.GetType("System.Double"));//67
            dtblFinal.Columns.Add("FEESTEXT", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("FEESQTY", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("EDITF", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("PROMPTPRICE", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("BUYNGETFREEHEADERID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREECATEGORY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREENAME", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("GRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("GPRICE", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("UOM", System.Type.GetType("System.String"));


            // fetch TaxID, TaxName first

            string strTaxID1 = "0";
            string strTaxID2 = "0";
            string strTaxID3 = "0";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";
            string strTaxRate1 = "0";
            string strTaxRate2 = "0";
            string strTaxRate3 = "0";

            int iTaxType1 = 0;
            int iTaxType2 = 0;
            int iTaxType3 = 0;
            double TaxVal1 = 0;
            double TaxVal2 = 0;
            double TaxVal3 = 0;

            int intCount = 0;


            // Fees & Charges

            int iFeeID = 0;
            string sFeeLogic = "";
            double dFeeVal = 0;
            double dFeeTxRate = 0;
            double dFee = 0;
            double dFeeTx = 0;
            string sFeeText = "";
            string sFeeQty = "N";
            string ef = "N";
            string prompt = "N";
            DataTable dtblTaxHeader = new DataTable();
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTaxHeader = objTax.FetchActiveTax();
            foreach (DataRow dr in dtblTaxHeader.Rows)
            {
                intCount++;
                if (intCount == 1)
                {
                    strTaxID1 = dr["ID"].ToString();
                    strTaxName1 = dr["TaxName"].ToString();
                    strTaxRate1 = dr["TaxRate"].ToString();
                }
                if (intCount == 2)
                {
                    strTaxID2 = dr["ID"].ToString();
                    strTaxName2 = dr["TaxName"].ToString();
                    strTaxRate2 = dr["TaxRate"].ToString();
                }
                if (intCount == 3)
                {
                    strTaxID3 = dr["ID"].ToString();
                    strTaxName3 = dr["TaxName"].ToString();
                    strTaxRate3 = dr["TaxRate"].ToString();
                    break;
                }
            }
            dtblTaxHeader.Dispose();

            //if (blRepairIssued)
            //{
            foreach (DataRow dr1 in dtblPOSDatatbl.Rows)
            {
                string pSKU = "";
                string pDept = "";
                string pCat = "";
                string pT1 = "N";
                string pT2 = "N";
                string pT3 = "N";

                iTaxType1 = 0;
                iTaxType2 = 0;
                iTaxType3 = 0;
                TaxVal1 = 0;
                TaxVal2 = 0;
                TaxVal3 = 0;
                ef = "N";

                int tx1ty = 0;
                int tx2ty = 0;
                int tx3ty = 0;

                int tx1id = 0;
                int tx2id = 0;
                int tx3id = 0;

                double tx1 = 0;
                double tx2 = 0;
                double tx3 = 0;

                double dGRate = 0;
                double dGPrice = 0;

                tx1ty = GeneralFunctions.fnInt32(dr1["TX1TYPE"].ToString());
                tx2ty = GeneralFunctions.fnInt32(dr1["TX2TYPE"].ToString());
                tx3ty = GeneralFunctions.fnInt32(dr1["TX3TYPE"].ToString());

                tx1id = GeneralFunctions.fnInt32(dr1["TX1ID"].ToString());
                tx2id = GeneralFunctions.fnInt32(dr1["TX2ID"].ToString());
                tx3id = GeneralFunctions.fnInt32(dr1["TX3ID"].ToString());

                tx1 = GeneralFunctions.fnDouble(dr1["TX1"].ToString());
                tx2 = GeneralFunctions.fnDouble(dr1["TX2"].ToString());
                tx3 = GeneralFunctions.fnDouble(dr1["TX3"].ToString());

                iFeeID = GeneralFunctions.fnInt32(dr1["FEESID"].ToString());
                sFeeLogic = dr1["FEESLOGIC"].ToString();
                dFeeVal = GeneralFunctions.fnDouble(dr1["FEESVALUE"].ToString());
                dFeeTxRate = GeneralFunctions.fnDouble(dr1["FEESTAXRATE"].ToString());
                dFee = GeneralFunctions.fnDouble(dr1["FEES"].ToString());
                dFeeTx = GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString());
                sFeeText = dr1["FEESTEXT"].ToString();
                sFeeQty = dr1["FEESQTY"].ToString();

                dGRate = GeneralFunctions.fnDouble(dr1["GRATE"].ToString());
                dGPrice = GeneralFunctions.fnDouble(dr1["GPRICE"].ToString());

                ef = dr1["EDITF"].ToString();
                prompt = dr1["PROMPTPRICE"].ToString();
                if ((GeneralFunctions.fnInt32(strTaxID1) == tx1id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx1id > 0))
                {
                    iTaxType1 = tx1ty;
                    TaxVal1 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx2id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx2id > 0))
                {
                    iTaxType1 = tx2ty;
                    TaxVal1 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID1) == tx3id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx3id > 0))
                {
                    iTaxType1 = tx3ty;
                    TaxVal1 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx1id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx1id > 0))
                {
                    iTaxType2 = tx1ty;
                    TaxVal2 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx2id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx2id > 0))
                {
                    iTaxType2 = tx2ty;
                    TaxVal2 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID2) == tx3id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx3id > 0))
                {
                    iTaxType2 = tx3ty;
                    TaxVal2 = tx3;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx1id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx1id > 0))
                {
                    iTaxType3 = tx1ty;
                    TaxVal3 = tx1;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx2id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx2id > 0))
                {
                    iTaxType3 = tx2ty;
                    TaxVal3 = tx2;
                }

                if ((GeneralFunctions.fnInt32(strTaxID3) == tx3id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx3id > 0))
                {
                    iTaxType3 = tx3ty;
                    TaxVal3 = tx3;
                }


                if (dr1["PRODUCTTYPE"].ToString() == "G") // Gift Certificate
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "GC",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,
                                        dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "A") // Account Pay
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "AR",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,
                                        dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "C") // Coupon
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,
                                        dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "H") // Fees Ticket
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "FEE COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,
                                        dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "Z") // Special Mix n Match
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "Mix n Match",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,
                                        dr1["UOM"].ToString()});
                }
                else if (dr1["PRODUCTTYPE"].ToString() == "B") // Blank Line
                {
                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        "Blank",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),"0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                }
                else
                {
                    int pID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                    FetchItemAdditionData(pID, ref pSKU, ref pDept, ref pCat);

                    if (strTaxExempt == "N")
                    {
                        GetTaxable(pID, strTaxID1, strTaxID2, strTaxID3, ref pT1, ref pT2, ref pT3);
                    }

                    dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),"0","0","0","0","0","0","0","","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),dr1["DISCVALUE"].ToString(),dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,ef,prompt,
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),dGRate,dGPrice,dr1["UOM"].ToString()});
                }
            }

            //}

            /*if ( blRepairRecall)
            {
                foreach (DataRow drR in dtblPOSDatatbl.Rows)
                {
                    DataTable dtblR = new DataTable();
                    PosDataObject.POS objR = new PosDataObject.POS();
                    objR.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    int d = GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString());
                    dtblR = objR.FetchItemDetails(GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString()));
                    foreach (DataRow drR1 in dtblR.Rows)
                    {
                        dtblFinal.Rows.Add(new object[] { 
                                        drR1["ProductID"].ToString(),
                                        drR1["Description"].ToString(),
                                        drR1["ProductType"].ToString(),
                                        "0",
                                        "0",
                                        drR1["Cost"].ToString(),
                                        drR["Qty"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["NormalPrice"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["TaxID1"].ToString(),
                                        drR1["TaxID2"].ToString(),
                                        drR1["TaxID3"].ToString(),
                                        drR1["Taxable1"].ToString(),
                                        drR1["Taxable2"].ToString(),
                                        drR1["Taxable3"].ToString(),
                                        drR1["TaxRate1"].ToString(),
                                        drR1["TaxRate2"].ToString(),
                                        drR1["TaxRate3"].ToString(),
                                        drR1["SKU"].ToString(),
                                        drR1["DepartmentID"].ToString(),
                                        drR1["CategoryID"].ToString(),
                                        drR1["UOMCount"].ToString(),
                                        drR1["UOMPrice"].ToString(),
                                        drR1["UOMDesc"].ToString(),
                                        drR1["MatrixOptionID"].ToString(),
                                        drR1["OptionValue1"].ToString(),
                                        drR1["OptionValue2"].ToString(),
                                        drR1["OptionValue3"].ToString(),drR["MATRIXOID"].ToString(),
                                        "0","0","0","0","0","0","","0",drR["NOTES"].ToString(),
                                        drR1["DiscLogic"].ToString(),drR1["DiscValue"].ToString(),drR1["Discount"].ToString(),
                                        drR1["DiscountID"].ToString(),drR1["DiscountText"].ToString(),"1",
                                        drR["RENTTYPE"].ToString(),drR["RENTDURATION"].ToString(),
                                        drR["RENTAMOUNT"].ToString(),drR["RENTDEPOSIT"].ToString(),
                                        drR["REPAIRITEMTAG"].ToString(),
                                        drR["REPAIRITEMSLNO"].ToString(),
                                        drR["REPAIRITEMPURCHASEDATE"].ToString()});
                    }
                    dtblR.Dispose();
                }
            }*/

            intTaxID1 = GeneralFunctions.fnInt32(strTaxID1);
            intTaxID2 = GeneralFunctions.fnInt32(strTaxID2);
            intTaxID3 = GeneralFunctions.fnInt32(strTaxID3);

            DataTable dtblTax = grdTax.ItemsSource as DataTable;
            if (dtblTax != null)
            {
                foreach (DataRow drTax in dtblTax.Rows)
                {
                    if (drTax["TAXID"].ToString() == strTaxID1) dblTax1 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                    if (drTax["TAXID"].ToString() == strTaxID2) dblTax2 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                    if (drTax["TAXID"].ToString() == strTaxID3) dblTax3 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                }
                dtblTax.Dispose();
            }


            return dtblFinal;
        }

        // Assign Cart before rental transaction

        private DataTable FinalDataTableForRent()
        {
            DataTable dtblFinal = new DataTable();
            dtblFinal.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRODUCTTYPE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ONHANDQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NORMALQTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("COST", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("QTY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("RATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("NRATE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("PRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXID3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXABLE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAXRATE3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DEPT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("CAT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMPRICE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("UOMDESC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("MATRIXOV3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMID", System.Type.GetType("System.String"));

            // add for layaway Invoice
            dtblFinal.Columns.Add("TAX1", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX2", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX3", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TAX", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("TOTALSALE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTREASON", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("LAYAWAYAMOUNT", System.Type.GetType("System.String"));

            // add for invoice notes
            dtblFinal.Columns.Add("NOTES", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("DISCLOGIC", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCVALUE", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMDISCOUNT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("DISCOUNTTEXT", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("ITEMINDEX", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("RENTTYPE", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("RENTDURATION", System.Type.GetType("System.Double"));//35
            dtblFinal.Columns.Add("RENTAMOUNT", System.Type.GetType("System.Double"));//36
            dtblFinal.Columns.Add("RENTDEPOSIT", System.Type.GetType("System.Double"));//37

            dtblFinal.Columns.Add("REPAIRITEMTAG", System.Type.GetType("System.String"));//38
            dtblFinal.Columns.Add("REPAIRITEMSLNO", System.Type.GetType("System.String"));//34
            dtblFinal.Columns.Add("REPAIRITEMPURCHASEDATE", System.Type.GetType("System.String"));//34

            dtblFinal.Columns.Add("TX1TYPE", System.Type.GetType("System.Int32"));//38
            dtblFinal.Columns.Add("TX1", System.Type.GetType("System.Double"));//39
            dtblFinal.Columns.Add("TX2TYPE", System.Type.GetType("System.Int32"));//40
            dtblFinal.Columns.Add("TX2", System.Type.GetType("System.Double"));//41
            dtblFinal.Columns.Add("TX3TYPE", System.Type.GetType("System.Int32"));//42
            dtblFinal.Columns.Add("TX3", System.Type.GetType("System.Double"));//43

            // for Fees & Charges
            dtblFinal.Columns.Add("FEESID", System.Type.GetType("System.Int32"));//62
            dtblFinal.Columns.Add("FEESLOGIC", System.Type.GetType("System.String"));//63
            dtblFinal.Columns.Add("FEESVALUE", System.Type.GetType("System.Double"));//64
            dtblFinal.Columns.Add("FEESTAXRATE", System.Type.GetType("System.Double"));//65
            dtblFinal.Columns.Add("FEES", System.Type.GetType("System.Double"));//66
            dtblFinal.Columns.Add("FEESTAX", System.Type.GetType("System.Double"));//67
            dtblFinal.Columns.Add("FEESTEXT", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("FEESQTY", System.Type.GetType("System.String"));//68

            dtblFinal.Columns.Add("EDITF", System.Type.GetType("System.String"));//68
            dtblFinal.Columns.Add("PROMPTPRICE", System.Type.GetType("System.String"));//68

            dtblFinal.Columns.Add("BUYNGETFREEHEADERID", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREECATEGORY", System.Type.GetType("System.String"));
            dtblFinal.Columns.Add("BUYNGETFREENAME", System.Type.GetType("System.String"));

            dtblFinal.Columns.Add("GRATE", System.Type.GetType("System.Double"));
            dtblFinal.Columns.Add("GPRICE", System.Type.GetType("System.Double"));

            dtblFinal.Columns.Add("UOM", System.Type.GetType("System.String"));

            // fetch TaxID, TaxName first

            string strTaxID1 = "0";
            string strTaxID2 = "0";
            string strTaxID3 = "0";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";
            string strTaxRate1 = "0";
            string strTaxRate2 = "0";
            string strTaxRate3 = "0";
            int iTaxType1 = 0;
            int iTaxType2 = 0;
            int iTaxType3 = 0;
            double TaxVal1 = 0;
            double TaxVal2 = 0;
            double TaxVal3 = 0;
            int intCount = 0;

            // Fees & Charges

            int iFeeID = 0;
            string sFeeLogic = "";
            double dFeeVal = 0;
            double dFeeTxRate = 0;
            double dFee = 0;
            double dFeeTx = 0;
            string sFeeText = "";
            string sFeeQty = "N";



            DataTable dtblTaxHeader = new DataTable();
            PosDataObject.Tax objTax = new PosDataObject.Tax();
            objTax.Connection = new SqlConnection(SystemVariables.ConnectionString);
            dtblTaxHeader = objTax.FetchActiveTax();
            foreach (DataRow dr in dtblTaxHeader.Rows)
            {
                intCount++;
                if (intCount == 1)
                {
                    strTaxID1 = dr["ID"].ToString();
                    strTaxName1 = dr["TaxName"].ToString();
                    strTaxRate1 = dr["TaxRate"].ToString();
                }
                if (intCount == 2)
                {
                    strTaxID2 = dr["ID"].ToString();
                    strTaxName2 = dr["TaxName"].ToString();
                    strTaxRate2 = dr["TaxRate"].ToString();
                }
                if (intCount == 3)
                {
                    strTaxID3 = dr["ID"].ToString();
                    strTaxName3 = dr["TaxName"].ToString();
                    strTaxRate3 = dr["TaxRate"].ToString();
                    break;
                }
            }
            dtblTaxHeader.Dispose();

            if (blRentIssued)
            {
                foreach (DataRow dr1 in dtblPOSDatatbl.Rows)
                {
                    string pSKU = "";
                    string pDept = "";
                    string pCat = "";
                    string pT1 = "N";
                    string pT2 = "N";
                    string pT3 = "N";

                    iTaxType1 = 0;
                    iTaxType2 = 0;
                    iTaxType3 = 0;
                    TaxVal1 = 0;
                    TaxVal2 = 0;
                    TaxVal3 = 0;

                    int tx1ty = 0;
                    int tx2ty = 0;
                    int tx3ty = 0;

                    int tx1id = 0;
                    int tx2id = 0;
                    int tx3id = 0;

                    double tx1 = 0;
                    double tx2 = 0;
                    double tx3 = 0;

                    double dGRate = 0;
                    double dGPrice = 0;

                    tx1ty = GeneralFunctions.fnInt32(dr1["TX1TYPE"].ToString());
                    tx2ty = GeneralFunctions.fnInt32(dr1["TX2TYPE"].ToString());
                    tx3ty = GeneralFunctions.fnInt32(dr1["TX3TYPE"].ToString());

                    tx1id = GeneralFunctions.fnInt32(dr1["TX1ID"].ToString());
                    tx2id = GeneralFunctions.fnInt32(dr1["TX2ID"].ToString());
                    tx3id = GeneralFunctions.fnInt32(dr1["TX3ID"].ToString());

                    tx1 = GeneralFunctions.fnDouble(dr1["TX1"].ToString());
                    tx2 = GeneralFunctions.fnDouble(dr1["TX2"].ToString());
                    tx3 = GeneralFunctions.fnDouble(dr1["TX3"].ToString());

                    iFeeID = GeneralFunctions.fnInt32(dr1["FEESID"].ToString());
                    sFeeLogic = dr1["FEESLOGIC"].ToString();
                    dFeeVal = GeneralFunctions.fnDouble(dr1["FEESVALUE"].ToString());
                    dFeeTxRate = GeneralFunctions.fnDouble(dr1["FEESTAXRATE"].ToString());
                    dFee = GeneralFunctions.fnDouble(dr1["FEES"].ToString());
                    dFeeTx = GeneralFunctions.fnDouble(dr1["FEESTAX"].ToString());
                    sFeeText = dr1["FEESTEXT"].ToString();
                    sFeeQty = dr1["FEESQTY"].ToString();

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx1id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx1id > 0))
                    {
                        iTaxType1 = tx1ty;
                        TaxVal1 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx2id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx2id > 0))
                    {
                        iTaxType1 = tx2ty;
                        TaxVal1 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID1) == tx3id) && (GeneralFunctions.fnInt32(strTaxID1) > 0) && (tx3id > 0))
                    {
                        iTaxType1 = tx3ty;
                        TaxVal1 = tx3;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx1id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx1id > 0))
                    {
                        iTaxType2 = tx1ty;
                        TaxVal2 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx2id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx2id > 0))
                    {
                        iTaxType2 = tx2ty;
                        TaxVal2 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID2) == tx3id) && (GeneralFunctions.fnInt32(strTaxID2) > 0) && (tx3id > 0))
                    {
                        iTaxType2 = tx3ty;
                        TaxVal2 = tx3;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx1id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx1id > 0))
                    {
                        iTaxType3 = tx1ty;
                        TaxVal3 = tx1;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx2id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx2id > 0))
                    {
                        iTaxType3 = tx2ty;
                        TaxVal3 = tx2;
                    }

                    if ((GeneralFunctions.fnInt32(strTaxID3) == tx3id) && (GeneralFunctions.fnInt32(strTaxID3) > 0) && (tx3id > 0))
                    {
                        iTaxType3 = tx3ty;
                        TaxVal3 = tx3;
                    }


                    if (dr1["PRODUCTTYPE"].ToString() == "G") // Gift Certificate
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "GC",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","",
                                        "0",dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),
                                        dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "A") // Account Pay
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,
                                        strTaxRate1,strTaxRate2,strTaxRate3,
                                        "AR",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        "","0","0","0","","1",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "C") // Coupon
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "H") // Fees Ticket
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "FEE COUPON",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "Z") // Special Mix n Match
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        "0",
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        "Mix n Match",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0","","0",
                                        dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        "0","","0",
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else if (dr1["PRODUCTTYPE"].ToString() == "B") // Blank Line
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        "Blank",pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),
                                        "1",
                                        iTaxType1,TaxVal1,iTaxType2,
                                        TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                    }
                    else
                    {
                        int pID = GeneralFunctions.fnInt32(dr1["ID"].ToString());
                        FetchItemAdditionData(pID, ref pSKU, ref pDept, ref pCat);

                        if (strTaxExempt == "N")
                        {
                            GetTaxable(pID, strTaxID1, strTaxID2, strTaxID3, ref pT1, ref pT2, ref pT3);
                        }

                        if (dr1["EDITF"].ToString() == "N")
                        {

                            dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        strTaxID1,strTaxID2,strTaxID3,pT1,pT2,pT3,strTaxRate1,strTaxRate2,strTaxRate3,
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                        }

                        if (dr1["EDITF"].ToString() == "Y")
                        {

                            dtblFinal.Rows.Add(new object[] {
                                        dr1["ID"].ToString(),
                                        dr1["PRODUCT"].ToString(),
                                        dr1["PRODUCTTYPE"].ToString(),
                                        dr1["ONHANDQTY"].ToString(),
                                        dr1["NORMALQTY"].ToString(),
                                        dr1["COST"].ToString(),
                                        dr1["QTY"].ToString(),
                                        dr1["RATE"].ToString(),
                                        dr1["NRATE"].ToString(),
                                        dr1["PRICE"].ToString(),
                                        dr1["TAXID1"].ToString(),dr1["TAXID2"].ToString(),dr1["TAXID3"].ToString(),
                                        dr1["TAXABLE1"].ToString(),dr1["TAXABLE2"].ToString(),dr1["TAXABLE3"].ToString(),
                                        dr1["TAXRATE1"].ToString(),dr1["TAXRATE2"].ToString(),dr1["TAXRATE3"].ToString(),
                                        pSKU,pDept,pCat,
                                        dr1["UOMCOUNT"].ToString(),
                                        dr1["UOMPRICE"].ToString(),
                                        dr1["UOMDESC"].ToString(),
                                        dr1["MATRIXOID"].ToString(),
                                        dr1["MATRIXOV1"].ToString(),
                                        dr1["MATRIXOV2"].ToString(),
                                        dr1["MATRIXOV3"].ToString(),
                                        "0","0","0","0","0","0","0",
                                        "","0",dr1["NOTES"].ToString(),
                                        dr1["DISCLOGIC"].ToString(),
                                        dr1["DISCVALUE"].ToString(),
                                        dr1["DISCOUNT"].ToString(),
                                        dr1["DISCOUNTID"].ToString(),
                                        dr1["DISCOUNTTEXT"].ToString(),"1",
                                        dr1["RENTTYPE"].ToString(),
                                        dr1["RENTDURATION"].ToString(),
                                        dr1["RENTAMOUNT"].ToString(),
                                        dr1["RENTDEPOSIT"].ToString(),
                                        dr1["REPAIRITEMTAG"].ToString(),
                                        dr1["REPAIRITEMSLNO"].ToString(),
                                        dr1["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        dr1["EDITF"].ToString(),dr1["PROMPTPRICE"].ToString(),
                                        dr1["BUYNGETFREEHEADERID"].ToString(),
                                        dr1["BUYNGETFREECATEGORY"].ToString(),
                                        dr1["BUYNGETFREENAME"].ToString(),
                                        GeneralFunctions.fnDouble(dr1["GRATE"].ToString()),
                                        GeneralFunctions.fnDouble(dr1["GPRICE"].ToString()),
                                        dr1["UOM"].ToString()});
                        }

                    }
                }

            }

            if (blRentRecall)
            {
                foreach (DataRow drR in dtblPOSDatatbl.Rows)
                {
                    DataTable dtblR = new DataTable();
                    PosDataObject.POS objR = new PosDataObject.POS();
                    objR.Connection = new SqlConnection(SystemVariables.ConnectionString);
                    int d = GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString());
                    dtblR = objR.FetchItemDetails(GeneralFunctions.fnInt32(drR["MATRIXOID"].ToString()));
                    foreach (DataRow drR1 in dtblR.Rows)
                    {
                        dtblFinal.Rows.Add(new object[] {
                                        drR1["ProductID"].ToString(),
                                        drR1["Description"].ToString(),
                                        drR1["ProductType"].ToString(),
                                        "0",
                                        "0",
                                        drR1["Cost"].ToString(),
                                        drR["Qty"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["NormalPrice"].ToString(),
                                        drR1["Price"].ToString(),
                                        drR1["TaxID1"].ToString(),
                                        drR1["TaxID2"].ToString(),
                                        drR1["TaxID3"].ToString(),
                                        drR1["Taxable1"].ToString(),
                                        drR1["Taxable2"].ToString(),
                                        drR1["Taxable3"].ToString(),
                                        drR1["TaxRate1"].ToString(),
                                        drR1["TaxRate2"].ToString(),
                                        drR1["TaxRate3"].ToString(),
                                        drR1["SKU"].ToString(),
                                        drR1["DepartmentID"].ToString(),
                                        drR1["CategoryID"].ToString(),
                                        drR1["UOMCount"].ToString(),
                                        drR1["UOMPrice"].ToString(),
                                        drR1["UOMDesc"].ToString(),
                                        drR1["MatrixOptionID"].ToString(),
                                        drR1["OptionValue1"].ToString(),
                                        drR1["OptionValue2"].ToString(),
                                        drR1["OptionValue3"].ToString(),
                                        drR["MATRIXOID"].ToString(),
                                        "0","0","0","0","0","0","","0",
                                        drR["NOTES"].ToString(),
                                        drR1["DiscLogic"].ToString(),
                                        drR1["DiscValue"].ToString(),
                                        drR1["Discount"].ToString(),
                                        drR1["DiscountID"].ToString(),
                                        drR1["DiscountText"].ToString(),"1",
                                        drR["RENTTYPE"].ToString(),
                                        drR["RENTDURATION"].ToString(),
                                        drR["RENTAMOUNT"].ToString(),
                                        drR["RENTDEPOSIT"].ToString(),
                                        drR["REPAIRITEMTAG"].ToString(),
                                        drR["REPAIRITEMSLNO"].ToString(),
                                        drR["REPAIRITEMPURCHASEDATE"].ToString(),
                                        iTaxType1,TaxVal1,iTaxType2,TaxVal2,iTaxType3,TaxVal3,
                                        iFeeID,sFeeLogic,dFeeVal,dFeeTxRate,dFee,dFeeTx,sFeeText,sFeeQty,
                                        drR["EDITF"].ToString(),drR["PROMPTPRICE"].ToString(),
                                        drR["BUYNGETFREEHEADERID"].ToString(),
                                        drR["BUYNGETFREECATEGORY"].ToString(),
                                        drR["BUYNGETFREENAME"].ToString(),
                                        GeneralFunctions.fnDouble(drR1["GRate"].ToString()),
                                        GeneralFunctions.fnDouble(drR1["GPrice"].ToString()),
                                        drR["UOM"].ToString()});
                    }
                    dtblR.Dispose();
                }
            }

            intTaxID1 = GeneralFunctions.fnInt32(strTaxID1);
            intTaxID2 = GeneralFunctions.fnInt32(strTaxID2);
            intTaxID3 = GeneralFunctions.fnInt32(strTaxID3);

            DataTable dtblTax = grdTax.ItemsSource as DataTable;
            if (dtblTax != null)
            {
                foreach (DataRow drTax in dtblTax.Rows)
                {
                    if (drTax["DTax"].ToString() == "Y") continue;
                    if (drTax["TAXID"].ToString() == strTaxID1) dblTax1 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                    if (drTax["TAXID"].ToString() == strTaxID2) dblTax2 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                    if (drTax["TAXID"].ToString() == strTaxID3) dblTax3 = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drTax["Amount"].ToString()));
                }
                dtblTax.Dispose();
            }


            return dtblFinal;
        }

        private async void btnOK_Click(object sender, RoutedEventArgs e)
        {

            
            boolPAXCashBack = false;

            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 7)) // PAX LOG
            {
                POSLinkLogFile = "";
                PosDataObject.POS objPOS = new PosDataObject.POS();
                objPOS.Connection = SystemVariables.Conn;
                int MxI = objPOS.FetchMaxInvoiceNo();
                POSLinkLogFile_Test = MxI.ToString() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                POSLinkLogPath_Test = POSLinkLogFilePath_Test();
                WriteToPOSLinkLogFile("Start: " + DateTime.Now.ToString((SystemVariables.DateFormat.Replace("/", "-")) + " HH:mm:ss")); // PAX LOG
            }

            blForced2ReceiptsOnPrecidiaSignatureFailure = false;
            PrecidiaSignature = true;
            lbPrecidiaErrorResponse.Visibility = Visibility.Collapsed;
            PrecidiaErrorText = "";
            PrecidiaDisplayResult = "";
            PrecidiaDisplayResultText = "";
            PrecidiaDisplayResponse = "";
            PrecidiaResponse = -1;

            try
            {
                bool IsEBTTendering = false;
                bool IsCCTendering = false;
                btnOK.IsEnabled = false;
                btnClearTender.IsEnabled = false;
                btnCancel.IsEnabled = false;
                Cursor = System.Windows.Input.Cursors.Wait;

                if ((Settings.GeneralReceiptPrint == "N") && (Settings.POSPrintInvoice != 2))
                {
                    if ((blLayaway) || (blNewLayaway) || (blLayawayRefund))
                    {
                        /*if (Settings.ReceiptPrinterName == "")
                        {
                            DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                            return;
                        }*/
                    }
                    else
                    {
                        /*if (Settings.ReceiptPrinterName == "")
                        {
                            DocMessage.MsgInformation(Properties.Resources."Please Define Receipt Printer in Setup.","frmAttendanceBrw_msg_PleaseDefineReceiptPrinterinSe"));
                            return;
                        }*/
                    }
                }

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 7))
                {
                    WriteToPOSLinkLogFile("After Printer Setup Check"); // PAX LOG
                }

                /*if (GeneralFunctions.FormatDouble(dblChange) > GeneralFunctions.FormatDouble(Settings.GiftCertMaxChange))
                {
                    CheckGCTender();
                    if (!blProceed) return;
                }*/

                if ((blPaidin) || (blPaidout) || (blSafedrop))
                {

                }
                else
                {
                    if (!blRepairDeposit)
                    {

                        if ((!blNewLayaway) && (!blLayaway) && (!blLayawayRefund))
                        {

                            CheckStockBeforeTransaction();

                            if (dtblZeroStock.Rows.Count > 0)
                            {
                                blurGrid.Visibility = Visibility.Visible;
                                frm_POSOutOfStockDlg frm_POSOutOfStockDlg = new frm_POSOutOfStockDlg();
                                try
                                {
                                    frm_POSOutOfStockDlg.Stock = dtblZeroStock;
                                    frm_POSOutOfStockDlg.ShowDialog();
                                }
                                finally
                                {
                                    frm_POSOutOfStockDlg.Close();
                                    blurGrid.Visibility = Visibility.Collapsed;
                                }
                            }

                            if (dtblZeroStock.Rows.Count > 0) return;

                            if (intCustID > 0)
                            {

                                if (!CheckStoreCreditBeforeTransaction()) return;  // Check Store Credit;
                                if (!CheckHouseAccountBeforeTransaction()) return;  // Check House Account;
                            }
                        }

                        if (blLayaway)
                        {
                            CheckStockBeforeLayawayTransaction();
                            if (dtblZeroStock.Rows.Count > 0)
                            {
                                blurGrid.Visibility = Visibility.Visible;
                                frm_POSOutOfStockDlg frm_POSOutOfStockDlg = new frm_POSOutOfStockDlg();
                                try
                                {
                                    frm_POSOutOfStockDlg.Stock = dtblZeroStock;
                                    frm_POSOutOfStockDlg.ShowDialog();
                                }
                                finally
                                {
                                    frm_POSOutOfStockDlg.Close();
                                    blurGrid.Visibility = Visibility.Collapsed;
                                }
                            }
                            if (dtblZeroStock.Rows.Count > 0) return;

                            if (intCustID > 0)
                            {
                                if (!CheckStoreCreditBeforeTransaction()) return;   // Check Store Credit;
                                if (!CheckHouseAccountBeforeTransaction()) return;  // Check House Account;
                            }
                        }
                    }
                }
                
                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 7))
                {
                    WriteToPOSLinkLogFile("Before Card Payment Check"); // PAX LOG
                }

                bool DcapEMVflag = false;
                bool CCf = false;
                DataTable dtblNew = new DataTable();

                dtblNew = grdTender.ItemsSource as DataTable;

                double creditcard_amount = 0;
                
                foreach (DataRow dr in dtblNew.Rows)
                {
                    if (((dr["TENDER"].ToString() == "Visa") ||
                    (dr["TENDER"].ToString() == "MasterCard") ||
                    (dr["TENDER"].ToString() == "American Express") ||
                    (dr["TENDER"].ToString() == "Discover") ||
                    (dr["TENDER"].ToString() == "Diner") ||
                    (dr["TENDER"].ToString() == "Debit Card") ||
                    (dr["TENDER"].ToString() == "Credit Card") ||
                    (dr["TENDER"].ToString() == "Credit Card - Voice Auth") ||
                    (dr["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)") ||
                    (dr["TENDER"].ToString() == "Credit Card (STAND-IN)")
                    || (dr["TENDER"].ToString() == "Mercury Gift Card")
                    || (dr["TENDER"].ToString() == "Precidia Gift Card")
                    || (dr["TENDER"].ToString() == "Datacap Gift Card")
                    || (dr["TENDER"].ToString() == "POSLink Gift Card")
                    || (dr["TENDER"].ToString() == "Food Stamps")
                    || (dr["TENDER"].ToString() == "EBT Cash")
                    || (dr["TENDER"].ToString() == "EBT Voucher")) && (dr["PROCESSCARD"].ToString() == "N"))
                    {
                        CCf = true;
                        break;
                    }
                }
                
                bool dlDebitTendering = false;

                foreach (DataRow dr in dtblNew.Rows)
                {
                    if ((dr["TENDER"].ToString() == "Visa") ||
                    (dr["TENDER"].ToString() == "MasterCard") ||
                    (dr["TENDER"].ToString() == "American Express") ||
                    (dr["TENDER"].ToString() == "Discover") ||
                    (dr["TENDER"].ToString() == "Credit Card") ||
                    (dr["TENDER"].ToString() == "Mercury Gift Card")
                    || (dr["TENDER"].ToString() == "Precidia Gift Card") ||
                    (dr["TENDER"].ToString() == "Datacap Gift Card") ||
                    (dr["TENDER"].ToString() == "POSLink Gift Card") ||
                    (dr["TENDER"].ToString() == "Credit Card - Voice Auth") ||
                    (dr["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)") ||
                    (dr["TENDER"].ToString() == "Credit Card (STAND-IN)"))
                    {
                        creditcard_amount = creditcard_amount + GeneralFunctions.fnDouble(dr["AMOUNT"].ToString());
                    }

                    if (dr["TENDER"].ToString() == "Debit Card")
                    {
                        dlDebitTendering = true;
                        
                    }
                }

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 6)) // Datacap EMV
                {
                    foreach (DataRow dr in dtblNew.Rows)
                    {
                        if (((dr["TENDER"].ToString() == "Visa") ||
                        (dr["TENDER"].ToString() == "MasterCard") ||
                        (dr["TENDER"].ToString() == "American Express") ||
                        (dr["TENDER"].ToString() == "Discover") ||
                        (dr["TENDER"].ToString() == "Diner") ||
                        (dr["TENDER"].ToString() == "Debit Card") ||
                        (dr["TENDER"].ToString() == "Credit Card") ||
                        (dr["TENDER"].ToString() == "Credit Card - Voice Auth")) && (dr["PROCESSCARD"].ToString() == "N"))
                        {
                            DcapEMVflag = true;
                            break;
                        }
                    }
                }

                dtblNew.Dispose();
                

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 7))
                {
                    WriteToPOSLinkLogFile("After Card Payment Check"); // PAX LOG
                }

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3) && (CCf || blMercuryGiftCardIssue || blMercuryGiftCardReload))
                {
                    PrecidiaLogFile = "";

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int MxI = objPOS.FetchMaxInvoiceNo();
                    PrecidiaLogFile = MxI.ToString() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                    PrecidiaLogPath = PrecidiaLogFilePath();
                    WriteToPrecidiaLogFile("Start: " + DateTime.Now.ToString((SystemVariables.DateFormat.Replace("/", "-")) + " HH:mm:ss"));
                }


                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2) && (CCf || blMercuryGiftCardIssue || blMercuryGiftCardReload))
                {
                    MercuryLogFile = "";

                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int MxI = objPOS.FetchMaxInvoiceNo();
                    MercuryLogFile = MxI.ToString() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                    MercuryLogPath = MercuryLogFilePath();
                    WriteToMercuryLogFile("Start: " + DateTime.Now.ToString((SystemVariables.DateFormat.Replace("/", "-")) + " HH:mm:ss"));
                }

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 5) && CCf)
                {
                    DatacapLogFile = "";
                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int MxI = objPOS.FetchMaxInvoiceNo();
                    DatacapLogFile = MxI.ToString() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                    DatacapLogPath = DatacapLogFilePath();
                    WriteToDatacapLogFile("Start: " + DateTime.Now.ToString((SystemVariables.DateFormat.Replace("/", "-")) + " HH:mm:ss"));
                }

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 6) && CCf)
                {
                    DatacapEMVLogFile = "";
                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int MxI = objPOS.FetchMaxInvoiceNo();
                    DatacapEMVLogFile = MxI.ToString() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                    DatacapEMVLogPath = DatacapEMVLogFilePath();
                    WriteToDatacapEMVLogFile("Start: " + DateTime.Now.ToString((SystemVariables.DateFormat.Replace("/", "-")) + " HH:mm:ss"));
                }


                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 7) && CCf)
                {
                    POSLinkLogFile = "";
                    PosDataObject.POS objPOS = new PosDataObject.POS();
                    objPOS.Connection = SystemVariables.Conn;
                    int MxI = objPOS.FetchMaxInvoiceNo();
                    POSLinkLogFile = MxI.ToString() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                    POSLinkLogPath = POSLinkLogFilePath();
                    //WriteToPOSLinkLogFile("Start: " + DateTime.Now.ToString("MM-dd-yyyy HH:mm:ss"));
                }

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 6))
                {
                    if (DcapEMVflag) CCf = true;
                    else CCf = false;
                }

                if (CCf)
                {
                    
                    if (Settings.POSCardPayment == "Y")
                    {
                        if (Settings.PaymentGateway == 1)
                        {
                            if (Settings.ElementHPAccountID == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Hosted_Payment_paramters_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                return;
                            }
                        }

                        if (Settings.PaymentGateway == 2)
                        {
                            if (Settings.MercuryHPMerchantID == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Hosted_Payment_paramters_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToMercuryLogFile("Setup of Hosted Payment paramters not found");
                                return;
                            }

                            if (!dlDebitTendering)
                            {
                                if ((creditcard_amount > 0) && (creditcard_amount > GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1))))
                                {
                                    new MessageBoxWindow().Show(Properties.Resources.You_can_t_over_tender_a_Credit_Card, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                    WriteToMercuryLogFile("Credit Card Over Tendering not allowed");
                                    return;
                                }
                            }
                        }

                        if (Settings.PaymentGateway == 3)
                        {
                            if (Settings.PrecidiaClientMAC == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Precidia_Client_MAC_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToPrecidiaLogFile("Setup of Precidia Client MAC not found");
                                return;
                            }

                            if (Settings.PrecidiaPOSLynxMAC == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Precidia_POSLynx_MAC_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToPrecidiaLogFile("Setup of Precidia POSLynx MAC not found");
                                return;
                            }


                            if (!dlDebitTendering)
                            {
                                if ((creditcard_amount > 0) && (creditcard_amount > GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1))))
                                {
                                    new MessageBoxWindow().Show(Properties.Resources.You_can_t_over_tender_a_Credit_Card, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                    return;
                                }
                            }
                        }

                        if (Settings.PaymentGateway == 5)
                        {
                            if (Settings.DatacapServer == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_server_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToDatacapLogFile("Setup of Datacap server not found");
                                return;
                            }

                            if (Settings.DatacapMID == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_MID_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToDatacapLogFile("Setup of Datacap MID not found");
                                return;
                            }
                        }


                        if (Settings.PaymentGateway == 6) // Datacap EMV
                        {
                            if (Settings.DatacapEMVServerIP == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_server_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToDatacapEMVLogFile("Setup of Datacap EMV server not found");
                                return;
                            }

                            if (Settings.DatacapEMVMID == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_Merchant_ID_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToDatacapEMVLogFile("Setup of Datacap EMV Merchant ID not found");
                                return;
                            }

                            if (Settings.DatacapEMVSecurityDevice == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_Security_Device_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToDatacapEMVLogFile("Setup of Datacap EMV Security Device not found");
                                return;
                            }

                            if (Settings.DatacapEMVCOMPort == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_Datacap_EMV_Security_COM_Port_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToDatacapEMVLogFile("Setup of Datacap EMV Security Device COM Port not found");
                                return;
                            }
                        }


                        if (Settings.PaymentGateway == 7) // POSLink
                        {
                            if (Settings.POSLinkCommType == "")
                            {
                                new MessageBoxWindow().Show(Properties.Resources.Please_setup_POSLink_Communication_in_General_Settings_, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                                WriteToPOSLinkLogFile("Please setup POSLink Communication in General Settings."); // PAX LOG
                                return;
                            }
                        }

                        if (Settings.PaymentGateway == 8) // Evo Payment
                        {
                            
                            if ((Settings.EvoConnectFileLocation == "") || (Settings.EvoApi == ""))
                            {
                                DocMessage.MsgInformation("Please setup Hosted Payment parameters in General Settings");
                                return;
                            }
                        }

                        if (Settings.PaymentGateway == 9) // Paymentsense
                        {

                            if ((Settings.Paymentsense_AccountName == "") || (Settings.Paymentsense_ApiKey == ""))
                            {
                                DocMessage.MsgInformation("Please setup Paymentsense Payment parameters in General Settings");
                                return;
                            }
                        }

                        if (CheckIfCardTenderingExists())
                        {
                            
                            //if ((Settings.PaymentGateway == 3) && (!CheckPrecidiaProcced())) return;

                            if ((blReturnItem) || (blLayawayRefund) || (blRentRecall))
                            {
                                if (Settings.PaymentGateway == 3)
                                {
                                    WriteToPrecidiaLogFile("Start : CardVarifyForReturn()");
                                }

                                if (Settings.PaymentGateway == 2)
                                {
                                    WriteToMercuryLogFile("Start : CardVarifyForReturn()");
                                }

                                if (Settings.PaymentGateway == 5)
                                {
                                    WriteToDatacapLogFile("Start : CardVarifyForReturn()");
                                }

                                if (Settings.PaymentGateway == 6)
                                {
                                    WriteToDatacapEMVLogFile("Start : CardVarifyForReturn()");
                                }

                                if (!CardVarifyForReturn())
                                {
                                    if (Settings.PaymentGateway == 3)
                                    {
                                        if (PrecidiaErrorText == "") PrecidiaErrorText = Properties.Resources.Response_File_Not_Found;
                                        lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                                        lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                                    }

                                    if (Settings.PaymentGateway == 2)
                                    {
                                        lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                                        lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                                    }

                                    GeneralFunctions.SetFocus(numAmount);
                                    return;
                                }
                            }
                            else
                            {
                               
                                IsCCTendering = true;

                                if (Settings.PaymentGateway == 3)
                                {
                                    WriteToPrecidiaLogFile("Start : CardVarify()");
                                }

                                if (Settings.PaymentGateway == 2)
                                {
                                    WriteToMercuryLogFile("Start : CardVarify()");
                                }

                                if (Settings.PaymentGateway == 5)
                                {
                                    WriteToDatacapLogFile("Start : CardVarify()");
                                }

                                if (Settings.PaymentGateway == 6)
                                {
                                    WriteToDatacapEMVLogFile("Start : CardVarify()");
                                }

                                if (Settings.PaymentGateway == 7)
                                {
                                    WriteToPOSLinkLogFile("Start : CardVarify()"); // PAX LOG
                                }

                                
                                if (!CardVarify())
                                {
                                    

                                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 7))
                                    {
                                        WriteToPOSLinkLogFile("Card Varify function Fails"); // PAX LOG
                                    }

                                    if (Settings.PaymentGateway == 6)
                                    {
                                        CallPadResetCount = 0;
                                        CallEMVPadReset();

                                        if (CallPadResetCount == 5)
                                        {
                                            CallPadResetCount = 0;
                                            //if (Dcap_PPAD_CmdStatus != "Success") new MessageBoxWindow().Show(Dcap_PPAD_CmdStatus + "\n\n" + Dcap_PPAD_TextResponse, "Card Payment", MessageBoxButton.OK, MessageBoxImage.Information);
                                        }
                                    }

                                    if (bMercuryGiftCardInsufficientBalance)
                                    {
                                        bMercuryGiftCardInsufficientBalance = false;
                                        if (new MessageBoxWindow().Show(Properties.Resources.Transaction_Declined + "\n" + Properties.Resources.Balance_of_this_card_is.Replace("$", SystemVariables.CurrencySymbol) + GeneralFunctions.fnDouble(MercuryGiftCardBalance).ToString("f") + "." + "\n" + "" + Properties.Resources.Would_you_like_to_apply_the_balance_to_this_Ticket_, Properties.Resources.Insufficient_Store_Credit_balance, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                                        {
                                            foreach (DataRow dr in dtblTender.Rows)
                                            {
                                                if ((dr["TENDER"].ToString() == "Mercury Gift Card") && (GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()) == GeneralFunctions.fnDouble(ApprovedAmt))
                                                    && (dr["CCTRANNO"].ToString() == ""))
                                                {
                                                    dr["AMOUNT"] = GeneralFunctions.fnDouble(MercuryGiftCardBalance).ToString("f");
                                                    if (CardVarifyForInstantMercuryGiftCardTransaction(GeneralFunctions.fnDouble(MercuryGiftCardBalance)))
                                                        dr["PROCESSCARD"] = "Y";
                                                    break;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            int indx = -1;
                                            foreach (DataRow dr in dtblTender.Rows)
                                            {
                                                indx++;
                                                if ((dr["TENDER"].ToString() == "Mercury Gift Card") && (GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()) == GeneralFunctions.fnDouble(ApprovedAmt))
                                                    && (dr["CCTRANNO"].ToString() == ""))
                                                {
                                                    break;
                                                }
                                            }
                                            dtblTender.Rows.RemoveAt(indx);
                                        }

                                        grdTender.ItemsSource = dtblTender;
                                        FoodStampTendering = false;
                                        ArrangeSettings();

                                        numAmount.Text = GeneralFunctions.FormatDouble(dblBalance).ToString();
                                        numAmount.SelectionLength = 0;
                                        return;
                                    }

                                    if (Settings.PaymentGateway == 2)
                                    {
                                        lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                                        lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                                    }

                                    if (Settings.PaymentGateway == 3)
                                    {
                                        if (PrecidiaErrorText == "") PrecidiaErrorText = "Response File Not Found";
                                        lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                                        lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                                    }

                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                                    {
                                        WriteToPrecidiaLogFile("Precidia Display Result: " + PrecidiaDisplayResultText);

                                        if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                                        if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;

                                        PrecidiaDisplayOnError();
                                    }

                                    ArrangeSettings();
                                    numAmount.Text = GeneralFunctions.FormatDouble(dblBalance).ToString();
                                    numAmount.SelectionLength = 0;
                                    GeneralFunctions.SetFocus(numAmount);
                                    return;
                                }
                                else
                                {
                                   
                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                                }
                            }
                        }

                        if (CheckIfEBTTenderingExists())
                        {
                            if ((blReturnItem) || (blLayawayRefund) || (blRentRecall))
                            {
                                if (Settings.PaymentGateway == 3)
                                {
                                    WriteToPrecidiaLogFile("Start : EBTVarifyForReturn()");
                                }

                                if (Settings.PaymentGateway == 2)
                                {
                                    WriteToMercuryLogFile("Start : EBTVarifyForReturn()");
                                }

                                if (Settings.PaymentGateway == 5)
                                {
                                    WriteToDatacapLogFile("Start : EBTVarifyForReturn()");
                                }

                                if (Settings.PaymentGateway == 6)
                                {
                                    WriteToDatacapEMVLogFile("Start : EBTVarifyForReturn()");
                                }

                                if (!EBTVarifyForReturn())
                                {
                                    if (Settings.PaymentGateway == 2)
                                    {
                                        lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                                        lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                                    }

                                    if (Settings.PaymentGateway == 3)
                                    {
                                        if (PrecidiaErrorText == "") PrecidiaErrorText = "Response File Not Found";
                                        lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                                        lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                                    }

                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                                    {
                                        WriteToPrecidiaLogFile("Precidia Display Result: " + PrecidiaDisplayResultText);

                                        if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                                        if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;
                                        PrecidiaDisplayOnError();
                                    }
                                    GeneralFunctions.SetFocus(numAmount);
                                    return;
                                }
                                else
                                {
                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                                }
                            }
                            else
                            {
                                IsEBTTendering = true;

                                if (Settings.PaymentGateway == 3)
                                {
                                    WriteToPrecidiaLogFile("Start : EBTVarify()");
                                }

                                if (Settings.PaymentGateway == 2)
                                {
                                    WriteToMercuryLogFile("Start : EBTVarify()");
                                }

                                if (Settings.PaymentGateway == 5)
                                {
                                    WriteToDatacapLogFile("Start : EBTVarify()");
                                }

                                if (Settings.PaymentGateway == 6)
                                {
                                    WriteToDatacapEMVLogFile("Start : EBTVarify()");
                                }


                                if (!EBTVarify())
                                {
                                    if (Settings.PaymentGateway == 2)
                                    {
                                        lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                                        lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                                    }

                                    if (Settings.PaymentGateway == 3)
                                    {
                                        if (PrecidiaErrorText == "") PrecidiaErrorText = "Response File Not Found";
                                        lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                                        lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                                    }

                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                                    {
                                        WriteToPrecidiaLogFile("Precidia Display Result: " + PrecidiaDisplayResultText);

                                        if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                                        if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;
                                        PrecidiaDisplayOnError();
                                    }
                                    ArrangeSettings();
                                    numAmount.Text = GeneralFunctions.FormatDouble(dblBalance).ToString();
                                    numAmount.SelectionLength = 0;
                                    GeneralFunctions.SetFocus(numAmount);
                                    return;
                                }
                                else
                                {
                                    if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                                }
                            }
                        }
                    }

                    if ((IsCCTendering) || (IsEBTTendering))
                    {
                        
                        bool f = false;
                        foreach (DataRow drP in dtblTender.Rows)
                        {
                            if ((drP["TENDER"].ToString() == "Visa") || (drP["TENDER"].ToString() == "MasterCard") || (drP["TENDER"].ToString() == "American Express") ||
                                (drP["TENDER"].ToString() == "Discover") || (drP["TENDER"].ToString() == "Diner") || (drP["TENDER"].ToString() == "Debit Card") ||
                                (drP["TENDER"].ToString() == "Credit Card") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth") ||
                                (drP["TENDER"].ToString() == "Credit Card (STAND-IN)") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)")
                                || (drP["TENDER"].ToString() == "Mercury Gift Card") || (drP["TENDER"].ToString() == "Precidia Gift Card") || (drP["TENDER"].ToString() == "Datacap Gift Card")
                                || (drP["TENDER"].ToString() == "POSLink Gift Card") || (drP["TENDER"].ToString() == "Food Stamps")
                                || (drP["TENDER"].ToString() == "EBT Cash") || (drP["TENDER"].ToString() == "EBT Voucher"))
                            {
                                if (drP["CCTRANNO"].ToString() == "")
                                {
                                    f = true;
                                    break;
                                }
                            }
                        }
                        if (f)
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Error_occured_during_transaction, Properties.Resources.Credit_Card_Payment, MessageBoxButton.OK, MessageBoxImage.Information);
                            GeneralFunctions.SetFocus(numAmount);
                            return;
                        }
                    }
                    
                    double dblCardAmt = 0;
                    string strCard = "";
                    foreach (DataRow drP in dtblTender.Rows)
                    {
                        if ((drP["TENDER"].ToString() == "Visa") || (drP["TENDER"].ToString() == "MasterCard") || (drP["TENDER"].ToString() == "American Express") ||
                            (drP["TENDER"].ToString() == "Discover") || (drP["TENDER"].ToString() == "Diner") || (drP["TENDER"].ToString() == "Debit Card") ||
                            (drP["TENDER"].ToString() == "Credit Card") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth") ||
                            (drP["TENDER"].ToString() == "Credit Card (STAND-IN)") || (drP["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)")
                            || (drP["TENDER"].ToString() == "Mercury Gift Card") || (drP["TENDER"].ToString() == "Precidia Gift Card")
                            || (drP["TENDER"].ToString() == "Datacap Gift Card") || (drP["TENDER"].ToString() == "POSLink Gift Card") || (drP["TENDER"].ToString() == "Food Stamps")
                            || (drP["TENDER"].ToString() == "EBT Cash") || (drP["TENDER"].ToString() == "EBT Voucher"))
                        {
                            if (drP["CCTRANNO"].ToString() != "") continue;
                            dblCardAmt = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(drP["AMOUNT"].ToString()));
                            strCard = drP["TENDER"].ToString();
                        }
                    }
                }

                
                if (blMercuryGiftCardIssue)
                {
                    if (Settings.PaymentGateway == 3)
                    {
                        WriteToPrecidiaLogFile("Start : IsValidMarcuryGiftCardIssue()");
                    }

                    if (Settings.PaymentGateway == 2)
                    {
                        WriteToMercuryLogFile("Start : IsValidMarcuryGiftCardIssue()");
                    }


                    if (!IsValidMarcuryGiftCardIssue())
                    {
                        if (Settings.PaymentGateway == 2)
                        {
                            lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                            lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                        }

                        if (Settings.PaymentGateway == 3)
                        {
                            if (PrecidiaErrorText == "") PrecidiaErrorText = "Response File Not Found";
                            lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                            lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                        }

                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                        {
                            WriteToPrecidiaLogFile("Precidia Display Result: " + PrecidiaDisplayResultText);

                            if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                            if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;
                            PrecidiaDisplayOnError();
                        }
                        GeneralFunctions.SetFocus(numAmount);
                        mgccardidentity.Rows.Clear();
                        return;
                    }
                    else
                    {
                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                    }
                }

                if (blMercuryGiftCardReload)
                {
                    if (Settings.PaymentGateway == 3)
                    {
                        WriteToPrecidiaLogFile("Start : IsValidMarcuryGiftCardReload()");
                    }

                    if (Settings.PaymentGateway == 2)
                    {
                        WriteToMercuryLogFile("Start : IsValidMarcuryGiftCardReload()");
                    }

                    if (!IsValidMarcuryGiftCardReload())
                    {
                        if (Settings.PaymentGateway == 2)
                        {
                            lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                            lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                        }

                        if (Settings.PaymentGateway == 3)
                        {
                            if (PrecidiaErrorText == "") PrecidiaErrorText = "Response File Not Found";
                            lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                            lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                        }

                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                        {
                            WriteToPrecidiaLogFile("Precidia Display Result: " + PrecidiaDisplayResultText);

                            if (PrecidiaDisplayResultText == "TRANSACTION DECLINED") PrecidiaResponse = 1;
                            if (PrecidiaDisplayResultText != "TRANSACTION DECLINED") PrecidiaResponse = 2;
                            PrecidiaDisplayOnError();
                        }
                        GeneralFunctions.SetFocus(numAmount);
                        mgccardidentity.Rows.Clear();
                        return;
                    }
                    else
                    {
                        if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y")) PrecidiaResponse = 0;
                    }
                }

                GiftAidFlag = "N";

                try
                {
                    foreach (DataRow dr in dtblPOSDatatbl.Rows)
                    {
                        if (dr["PRODUCTTYPE"].ToString() == "I")
                        {
                            GiftAidFlag = "Y";
                            break;
                        }
                    }
                }
                catch
                {

                }

                string srterrmsg = "";
                PosDataObject.POS objpos = new PosDataObject.POS();
                objpos.Connection = SystemVariables.Conn;
                objpos.EmployeeID = SystemVariables.CurrentUserID;
                objpos.LoginUserID = SystemVariables.CurrentUserID;
                objpos.CustomerID = intCustID;
                objpos.Return = blReturnItem;
                objpos.NewLayaway = blNewLayaway;
                objpos.Layaway = blLayaway;
                objpos.LayawayRefund = blLayawayRefund;
                objpos.RentReturn = blRentRecall;
                objpos.ServiceType = strServiceType;
                objpos.MGCIssue = blMercuryGiftCardIssue;
                objpos.MercuryGCIssueCardID = tempMercuryGCCardID;
                objpos.CustomerOrdering = blCustomerOrdering;
                objpos.CustomerOrderNo = intCustomerOrderNo;

                if ((blPaidin) || (blPaidout) || (blSafedrop))
                {
                    if (blPaidout) objpos.TransType = 6;
                    if (blPaidin) objpos.TransType = 66;
                    if (blSafedrop) objpos.TransType = 67;
                    objpos.Notes = strPaidInOutExplanation;
                    objpos.PaidOutAmount = dblPaidInOutAmount;
                }
                else
                {
                    if (blSale)
                    {
                        objpos.TransType = 1; // sale
                        objpos.Status = 3;
                    }

                    if (blWorkOrderTransaction)
                    {
                        objpos.TransType = 12; // WorkOrder Payment
                        objpos.Status = 3;
                        objpos.SuspendInvoiceNo = intSuspendInvoiceNo;
                    }

                    if (blResumeTransaction)
                    {
                        objpos.TransType = 3; // Resume Transaction
                        objpos.Status = 3;
                        objpos.SuspendInvoiceNo = intSuspendInvoiceNo;
                    }

                    if (blNewLayaway)
                    {
                        objpos.TransType = 2; // Layaway deposit
                        objpos.Status = 1;
                    }

                    if (blLayaway)
                    {
                        objpos.TransType = 2; // Layaway Payment
                        objpos.Status = 3;
                    }

                    if (blLayawayRefund)
                    {
                        objpos.TransType = 2; // Layaway Payment
                        objpos.Status = 5;
                    }

                    if (blRentIssued)
                    {
                        objpos.TransType = 15; // Rent Issue
                        objpos.Status = 15;
                    }

                    if (blRentRecall)
                    {
                        objpos.TransType = 16; // Rent Issue
                        objpos.Status = 16;
                    }



                    if (blRepairIssued)
                    {
                        objpos.TransType = 17; // Repair Issue
                        objpos.Status = 17;
                        if (!blRepairDeposit) objpos.RepairIssueNClosed = true;
                        else objpos.RepairIssueNClosed = false;
                    }

                    if (blRepairRecall)
                    {
                        objpos.TransType = 18; // Repair Delivered
                        objpos.Status = 18;
                    }

                    objpos.RentalSecurityDeposit = dblRentSecurityDeposit;
                    objpos.IssueRentInvNo = intIssueRentInvNo;
                    objpos.IsRentCalculated = Settings.CalculateRentLater;

                    DateTime rpin = Convert.ToDateTime(null);
                    DateTime rpdelvy = Convert.ToDateTime(null);
                    DateTime rpnotf = Convert.ToDateTime(null);
                    string strrpnotes1 = "";
                    string strrpnotes2 = "";
                    string strrpnotes3 = "";
                    string strrpritm = "";
                    string strrprsl = "";
                    string strrpfind = "";

                    if (strServiceType == "Repair")
                    {
                        foreach (DataRow drrp in dtblRepairItemInfo.Rows)
                        {
                            strrpnotes1 = drrp["ProblemDesc"].ToString();
                            strrpnotes2 = drrp["RepairDesc"].ToString();
                            strrpnotes3 = drrp["Remarks"].ToString();
                            strrpritm = drrp["ItemTag"].ToString();
                            strrprsl = drrp["ItemSL"].ToString();
                            rpin = GeneralFunctions.fnDate(drrp["DateIn"].ToString());
                            if (drrp["ExpectedDeliveryDate"].ToString() != "") rpdelvy = GeneralFunctions.fnDate(drrp["ExpectedDeliveryDate"].ToString());
                            if (drrp["NotifiedDate"].ToString() != "") rpnotf = GeneralFunctions.fnDate(drrp["NotifiedDate"].ToString());
                            strrpfind = drrp["RepairFindUs"].ToString();
                        }
                        objpos.RepairDepositTransaction = blRepairDeposit;
                        objpos.RepairDepositLinkID = intRepairInvoiceForDeposit;
                    }

                    objpos.RepairFindUs = strrpfind;
                    objpos.RepairItemName = strrpritm;
                    objpos.RepairItemSL = strrprsl;
                    objpos.RepairDateIn = rpin;
                    objpos.RepairDeliveryDate = rpdelvy;
                    objpos.RepairNotifiedDate = rpnotf;
                    objpos.RepairProblem = strrpnotes1;
                    objpos.RepairNotes = strrpnotes2;
                    objpos.RepairRemarks = strrpnotes3;

                    objpos.RepairAmount = dblRepairAmount;
                    objpos.RepairAdvanceAmount = dblRepairAdvance;

                    objpos.RepairTenderAmount = dblRepairTender;
                    objpos.IssueRepairInvNo = intIssueRepairInvNo;

                    objpos.ReceiptCnt = 1;

                    if (!blNewLayaway)
                    {
                        if (!blRentIssued) objpos.TotalSale = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1))));
                        if (blRentIssued) objpos.TotalSale = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1))) - GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numRentDeposit.Text.Substring(numRentDeposit.Text.IndexOf(" ") + 1))));
                        if (blRepairRecall) objpos.TotalSale = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1))) + GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numRepairAdvance.Text.Substring(numRepairAdvance.Text.IndexOf(" ") + 1))));
                        objpos.Tax = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numTax.Text.Substring(numTax.Text.IndexOf(" ") + 1))));
                        //if (blRepairIssued || blRepairRecall) objpos.Tax = GetTaxForRepair();
                    }

                    if (blNewLayaway)
                    {
                        objpos.Tax = 0;
                        objpos.TotalSale = 0;
                        objpos.LayawayDateDue = dtLayawayDateDue;
                    }

                    objpos.Discount = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numDiscount.Text.Substring(numDiscount.Text.IndexOf(" ") + 1))));
                    objpos.Coupon = GeneralFunctions.FormatDouble(GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numCoupon.Text.Substring(numCoupon.Text.IndexOf(" ") + 1))));
                    objpos.CouponPerc = dblCouponPerc;
                    objpos.DiscountReason = strDiscountReason;

                    objpos.TotalFees = dblFees;
                    objpos.TotalFeesTax = dblFeesTax;
                    objpos.TotalFeesCoupon = dblFeesCouponAmount;
                    objpos.TotalFeesCouponTax = dblFeesCouponTaxAmount;

                    objpos.DTaxID = CustDTaxID;
                    objpos.DTax = blNewLayaway ? CustDTaxValue : dblDTx;


                    if ((blResumeTransaction) || (blSale) || (blWorkOrderTransaction))
                    {
                        pdtblForStockUpdate = FinalDataTable();
                        objpos.ItemDataTable = pdtblForStockUpdate;
                    }
                    if (blWorkOrderTransaction) objpos.WorkOrder1 = dtblWODatatbl;
                    if ((blLayaway) || (blLayawayRefund)) objpos.ItemDataTable = dtblLayawayPayment;
                    if (blLayaway) pdtblForStockUpdate = dtblLayawayPayment;
                    if (blNewLayaway)
                    {
                        pdtblForStockUpdate = FinalDataTable();
                        objpos.ItemDataTable = GetLayawayInvoiceTable();
                    }

                    if ((blRentIssued) || (blRentRecall))
                    {
                        pdtblForStockUpdate = FinalDataTableForRent();
                        objpos.ItemDataTable = pdtblForStockUpdate;
                    }

                    if ((blRepairIssued) || (blRepairRecall))
                    {
                        pdtblForStockUpdate = FinalDataTableForRepair();
                        objpos.ItemDataTable = pdtblForStockUpdate;
                    }

                    objpos.ApptDataTable = dtblApptDatatbl;

                    objpos.TaxID1 = intTaxID1;
                    objpos.TaxID2 = intTaxID2;
                    objpos.TaxID3 = intTaxID3;
                    objpos.Tax1 = GeneralFunctions.FormatDouble(dblTax1);
                    objpos.Tax2 = GeneralFunctions.FormatDouble(dblTax2);
                    objpos.Tax3 = GeneralFunctions.FormatDouble(dblTax3);

                    



                    objpos.CustomerDOB = dtCustomerDOB;
                    objpos.ParentReturnInvNo = intSelectedReturnInvoiceNo;

                    objpos.GiftAid = GiftAidFlag;
                }

                objpos.TenderDataTable = grdTender.ItemsSource as DataTable;
                objpos.ChangeAmount = dblChange;

                if (Settings.AcceptTips == "Y")
                {
                    objpos.AuthorisedTranNo = AuthCode;
                    objpos.SaleTranNo = "";
                }
                else
                {
                    objpos.AuthorisedTranNo = "";
                    objpos.SaleTranNo = AuthCode;
                }



                objpos.ErrorMsg = "";

                // static value
                objpos.StoreID = 1;
                objpos.RegisterID = 1;
                objpos.CloseoutID = GeneralFunctions.GetCloseOutID();
                objpos.TransNoteNo = 0;
                objpos.LayawayNo = 0;
                objpos.TransMSeconds = 0;
                // static value

                objpos.TerminalName = Settings.TerminalName;

                objpos.CardTranID = intCardTranID;

                objpos.ChangedByAdmin = intSuperUserID;
                objpos.FunctionButtonAccess = blFunctionBtnAccess;

                objpos.tblCardID = cardidentity;
                objpos.MercuryGiftCardDataTable = mgccardidentity;

                objpos.GCCentralFlag = Settings.CentralExportImport;
                objpos.GCOPStore = GCOPSTORE;

                objpos.OperateStore = Settings.StoreCode;

                

                objpos.BeginTransaction();

                if (objpos.CreateInvoice())
                {
                    boolInvoiceCreated = true;
                    intINV = objpos.ID;
                    PrintOrderNo = intINV;
                    if (blNewLayaway) intLAYNO = objpos.LayawayID;
                    intLAYTRAN = objpos.TransactionNo;

                    if ((blPaidin) || (blPaidout) || (blSafedrop))
                    {
                        PaidInOutTranId = objpos.TransactionNo;
                    }
                }
                objpos.EndTransaction();
                srterrmsg = objpos.ErrorMsg;
                if (srterrmsg == "")
                {
                    DataTable dtblXeConnectUpdate = grdTender.ItemsSource as DataTable;

                    foreach (DataRow drXe in dtblXeConnectUpdate.Rows)
                    {
                        if (GeneralFunctions.fnInt32(drXe["XeConnectID"].ToString()) > 0)
                        {
                            PosDataObject.POS objPOSXE = new PosDataObject.POS();
                            objPOSXE.Connection = SystemVariables.Conn;
                            objPOSXE.SetInvoiceOnXeConnect(GeneralFunctions.fnInt32(drXe["XeConnectID"].ToString()), intINV);
                        }
                    }

                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3) && (CCf || blMercuryGiftCardIssue || blMercuryGiftCardReload))
                    {
                        WriteToPrecidiaLogFile("Transaction complete");

                        if (!PrecidiaSignature)
                        {
                            lbPrecidiaErrorResponse.Text = PrecidiaErrorText;
                            lbPrecidiaErrorResponse.Visibility = Visibility.Visible;
                            blForced2ReceiptsOnPrecidiaSignatureFailure = true;
                        }
                    }

                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2) && (CCf || blMercuryGiftCardIssue || blMercuryGiftCardReload))
                    {
                        WriteToMercuryLogFile("Transaction complete");
                    }

                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 5) && CCf)
                    {
                        WriteToDatacapLogFile("Transaction complete");
                    }

                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 6) && CCf)
                    {
                        WriteToDatacapEMVLogFile("Transaction complete");
                    }

                    if (Settings.ReceiptPrinterName != "")
                    {
                        if (IsOpenCashDrawer())
                        {
                            try
                            {
                                RawPrinterHelper.OpenCashDrawer1(Settings.ReceiptPrinterName, Settings.CashDrawerCode);
                            }
                            catch
                            {
                            }
                        }
                    }

                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2) && (CCf || blMercuryGiftCardIssue || blMercuryGiftCardReload))
                    {
                        WriteToMercuryLogFile("Cash Drawer passed");
                    }

                    if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                    {
                        SecondMonitor.ClearWeightInfo();
                        if (!blReturnItem) SecondMonitor.FinalTenderingDisplay(GeneralFunctions.fnDouble(numChangeDue.Text.Substring(numChangeDue.Text.IndexOf(" ") + 1)));
                        else SecondMonitor.FinalTenderingDisplay(-GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)));
                    }
                    frm_POS.DisplayPoleText(2, "N", "N", "", Properties.Resources.Thank_You);

                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2) && (CCf || blMercuryGiftCardIssue || blMercuryGiftCardReload))
                    {
                        WriteToMercuryLogFile("Second Monitor passed");
                    }

                    //Application.DoEvents();--Sam



                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2) && (CCf || blMercuryGiftCardIssue || blMercuryGiftCardReload))
                    {
                        WriteToMercuryLogFile("printorders() - start");
                    }

                    if (POSDatatbl != null)
                    {
                        printorders();
                    }

                    if ((blPaidin) || (blPaidout) || (blSafedrop))
                    {
                        string printty = "";
                        double tranAmt = 0;
                        if (blPaidin) printty = "Paid In";
                        if (blPaidout) printty = "Paid Out";
                        if (blSafedrop) printty = "Safe Drop";

                        if (blPaidin) tranAmt = PaidInOutAmount;
                        if (blPaidout) tranAmt = -PaidInOutAmount;
                        if (blSafedrop) tranAmt = -PaidInOutAmount;

                        frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                        try
                        {
                            frm_POSInvoicePrintDlg.InvNo = intINV;
                            frm_POSInvoicePrintDlg.PrintType = printty;
                            frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                            frm_POSInvoicePrintDlg.PaidOutDesc = PaidInOutExplanation;
                            frm_POSInvoicePrintDlg.PaidOutAmount = tranAmt;
                            frm_POSInvoicePrintDlg.PaidOutTranNo = PaidInOutTranId;
                            frm_POSInvoicePrintDlg.ShowDialog();
                        }
                        finally
                        {
                            blFinalFlag = true;
                            Close();
                        }
                    }
                    else
                    {

                        if (Settings.POSPrintInvoice != 2)
                        {
                            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3) && (CCf || blMercuryGiftCardIssue || blMercuryGiftCardReload))
                            {
                                WriteToPrecidiaLogFile("Receipt print start");
                            }

                            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2) && (CCf || blMercuryGiftCardIssue || blMercuryGiftCardReload))
                            {
                                WriteToMercuryLogFile("Receipt print start");
                            }



                            if (((blLayaway) || (blNewLayaway) || (blLayawayRefund)) && (Settings.PreprintedReceipt == "N"))
                            {
                                blurGrid.Visibility = Visibility.Visible;
                                frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                                try
                                {
                                    frm_POSInvoicePrintDlg.LayTran = intLAYTRAN;
                                    frm_POSInvoicePrintDlg.LayawayDtbl = LayawayNoForInvoicePrinting();
                                    frm_POSInvoicePrintDlg.PrintType = "Layaway";
                                    frm_POSInvoicePrintDlg.Forced2ReceiptsOnPrecidiaSignatureFailure = blForced2ReceiptsOnPrecidiaSignatureFailure;
                                    frm_POSInvoicePrintDlg.IsLayawayRefund = blLayawayRefund;
                                    frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                                    frm_POSInvoicePrintDlg.ShowDialog();
                                }
                                finally
                                {
                                    blurGrid.Visibility = Visibility.Collapsed;
                                }
                            }
                            else
                            {
                                PrintInvoice();
                            }
                        }

                        if (Settings.POSCardPayment == "Y")
                        {
                            if ((Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                            {
                                if (PrecidiaResponse == 0)
                                {
                                    if (Settings.PrecidiaLaneOpen == "Y")
                                    {
                                        try
                                        {
                                            PrecidiaLaneOpen();
                                        }
                                        catch
                                        {
                                        }
                                    }
                                }
                            }
                        }

                        if (Settings.POSDisplayChangeDue == "Y")
                        {
                            blurGrid.Visibility = Visibility.Visible;
                            frmPOSShowBalanceDlg frm_POSShowBalanceDlg = new frmPOSShowBalanceDlg();
                            try
                            {
                                double CashBackAmount = 0;
                                if ((Settings.POSCardPayment == "Y") && ((Settings.PaymentGateway == 3) || (Settings.PaymentGateway == 5) || (Settings.PaymentGateway == 7)) && CCf)
                                {
                                    PosDataObject.POS objps = new PosDataObject.POS();
                                    objps.Connection = SystemVariables.Conn;
                                    CashBackAmount = objps.GetCashBackAmountFromCardTransaction(intINV);
                                }
                                frm_POS.DisplayPoleText(2, "N", "B", Properties.Resources.ChangeDue, GeneralFunctions.FormatDouble2((!blReturnItem ? dblChange : -dblTotalsale) + CashBackAmount).ToString());
                                frm_POSShowBalanceDlg.Totalsale = GeneralFunctions.FormatDouble(dblTotalsale);
                                frm_POSShowBalanceDlg.Tender = GeneralFunctions.FormatDouble((!blReturnItem ? dblTender : 0));
                                frm_POSShowBalanceDlg.Change = GeneralFunctions.FormatDouble((!blReturnItem ? dblChange : -dblTotalsale) + CashBackAmount);
                                frm_POSShowBalanceDlg.ShowDialog();
                            }
                            finally
                            {
                                blurGrid.Visibility = Visibility.Collapsed;
                                if ((Settings.CheckSecondMonitor == "Y") && (Screen.AllScreens.Length >= Settings.ScreenCountForSecondMonitor))
                                {
                                    SecondMonitor.ClearWeightInfo();
                                    SecondMonitor.ClearTenderingDisplay();
                                }

                                blFinalFlag = true;
                                Close();
                            }
                        }
                        else
                        {
                            blFinalFlag = true;
                            Close();
                        }
                    }
                }
                else
                {
                    
                    GeneralFunctions.SetTransactionLog("Invoice generation fail", srterrmsg);
                }
            }
            catch (Exception ex)
            {
                GeneralFunctions.SetTransactionLog("Error General : ", ex.Message);

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 7))
                {
                    WriteToPOSLinkLogFile("Tender Exception : " + ex.Message); // PAX LOG
                }

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2))
                {
                    WriteToMercuryLogFile("Tender Exception : " + ex.Message); // Mercury LOG
                }

                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 5))
                {
                    WriteToDatacapLogFile("Tender Exception : " + ex.Message); // Datacap LOG
                }
            }
            finally
            {
                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 7))
                {
                    WriteToPOSLinkLogFile("End"); // PAX LOG
                }

                if (GeneralFunctions.fnDouble(numBalanceDue.Text.Substring(numBalanceDue.Text.IndexOf(" ") + 1)) == 0)
                {
                    if (!boolInvoiceCreated) btnOK.IsEnabled = true;
                }
                else btnOK.IsEnabled = false;

                btnCancel.IsEnabled = true;
                btnClearTender.IsEnabled = true;
                Cursor = System.Windows.Input.Cursors.Arrow;
            }
        }

        private void timer1_Tick(object sender, RoutedEventArgs e)
        {
            lbTime.Text = DateTime.Now.ToShortTimeString();
        }

  

        

        private async void gridView2_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            // if ((await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, gridView2, colTenderType) == "Gift Certificate") &&
            //(await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, gridView2, colGCFlag) == "N"))
            if (await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, grdTender, colTenderType) == "Gift Certificate")
            {
                string GCNO = (await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, grdTender, colGC)).ToString();
                string GSTORE = await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, grdTender, colGCStore);
                pnlGiftCert.Visibility = Visibility.Visible;
                //pnlGiftCert.BringToFront();
                lbGC.Text = Properties.Resources.Gift_Cert_____ + GCNO.ToString();
                if (Settings.CentralExportImport == "N") lbGC.Text = GCNO.ToString();
                if (Settings.CentralExportImport == "Y")
                {
                    if (GSTORE == Settings.StoreCode) lbGC.Text = GCNO.ToString();
                    if (GSTORE != Settings.StoreCode) lbGC.Text = GCNO.ToString() + "  (" + Properties.Resources.store_ +GSTORE + ")";
                }
                double dblGCAmount = 0;
                double dblGridAmt = 0;
                double gcbal = 0;
                string GStore = (await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, grdTender, colGCStore)).ToString();
                if ((await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, grdTender, colGCOld) == "N") &&
                    (await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, grdTender, colGCFlag) == "N"))
                {
                    dblGCAmount = FetchGCAmount(GCNO, GStore);
                    dblGridAmt = GeneralFunctions.fnDouble(await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, grdTender, colAmount));
                    gcbal = dblGCAmount - dblGridAmt;
                }

                if ((await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, grdTender, colGCOld) == "Y") &&
                    (await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, grdTender, colGCFlag) == "Y"))
                {
                    dblGCAmount = dblGiftOldAmt;
                    dblGridAmt = GeneralFunctions.fnDouble((await GeneralFunctions.GetCellValue1(gridView2.FocusedRowHandle, grdTender, colAmount)).ToString());
                    gcbal = dblGCAmount - dblGridAmt;
                }
                if (Settings.DecimalPlace == 3) lbGCAmt.Text = gcbal.ToString("#0.000");
                if (Settings.DecimalPlace == 2) lbGCAmt.Text = gcbal.ToString("#0.00");
            }
            else
            {
                pnlGiftCert.Visibility = Visibility.Collapsed;
                //pnlGiftCert.SendToBack();
            }
        }

        private void gridView2_CalcRowHeight(object sender, DevExpress.XtraGrid.Views.Grid.RowHeightEventArgs e)
        {
            e.RowHeight = 25;
        }

        private async void numAmount_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if ((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Gift Certificate")
                    || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Store Credit")
                    || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "House Account"))
            {
                if (!CheckFunctionButton("31p")) return;
            }
            if (GeneralFunctions.fnDouble(numAmount.Text) == 0) return;
            if (e.Key == Key.Enter)
            {
                if (grdTenderType.ItemsSource == null) return;
                int intRowID = 0;
                if ((grdTenderType.ItemsSource as DataTable).Rows.Count == 0) return;
                intRowID = gridView1.FocusedRowHandle;
                if (intRowID < 0) return;

                if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "House Account")
                {
                    if (!blLayaway)
                    {
                        if (!CheckAndSetHouseAccountAmount()) return;
                    }
                    else
                    {
                        if (!CheckAndSetHouseAccountAmountForLayaway()) return;
                    }
                }

                if ((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Visa") ||
                (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "MasterCard") ||
                (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "American Express") ||
                (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Discover") ||
                (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Diner") ||
                (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Debit Card") ||
                (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card") ||
                (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card - Voice Auth") ||
                (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card - Voice Auth (STAND-IN)") ||
                (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card (STAND-IN)"))
                {
                    //if (CheckIfCardTenderingExists()) return;
                }

                bool blfinddata = false;
                string strselectid = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colID);
                int intfocusrow = 0;

                double dblPrice = 0;
                foreach (DataRow dr in dtblTender.Rows)
                {
                    if (!blGiftTender)
                    {
                        if (dr["ID"].ToString() == strselectid)
                        {
                            dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()));
                            dr["AMOUNT"] = (dblPrice + numAmount.Text).ToString();
                            blfinddata = true;
                            break;
                        }
                    }
                    else
                    {
                        if (dr["GIFTCERTIFICATE"].ToString() == GCNO.ToString())
                        {
                            dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()));
                            dr["AMOUNT"] = (dblPrice + numAmount.Text).ToString();
                            blfinddata = true;
                            break;
                        }
                    }
                    intfocusrow++;
                }

                if (!blfinddata)
                {
                    string line1 = "";
                    string line2 = "";
                    if (blGiftTender)
                    {
                        string strGCFlag = "N";
                        if (blGiftNew) strGCFlag = "Y";

                        string strGCOld = "N";
                        string oldbal = "0";
                        if (blGiftOld)
                        {
                            strGCOld = "Y";
                            oldbal = GeneralFunctions.FormatDouble(dblGiftOldAmt).ToString();
                        }

                        dtblTender.Rows.Add(new object[] {   await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colID),
                                              await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType,colTender),
                                              await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType,colDisplayAs),
                                              GeneralFunctions.FormatDouble(double.Parse(numAmount.Text)).ToString(), GCNO.ToString(),strGCFlag,strGCOld,oldbal,"",GCSTORE,
                                              "N","N","0"});

                        line1 = "";
                        line2 = "";
                        RearrangeDTxt(double.Parse(numAmount.Text), await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colDisplayAs), ref line1, ref line2);
                        frm_POS.DisplayPoleText(2, "N", "N", line1, line2);
                    }
                    else
                    {
                        dtblTender.Rows.Add(new object[] {   await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colID),
                                              await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType,colTender),
                                              await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType,colDisplayAs),
                                              GeneralFunctions.FormatDouble(double.Parse(numAmount.Text)).ToString(),"","","","0","","","N","N","0"});

                        line1 = "";
                        line2 = "";
                        RearrangeDTxt(double.Parse(numAmount.Text), await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colDisplayAs), ref line1, ref line2);
                        frm_POS.DisplayPoleText(2, "N", "N", line1, line2);
                    }
                    grdTender.ItemsSource = dtblTender;
                    gridView2.FocusedRowHandle = dtblTender.Rows.Count - 1;
                }
                else
                {
                    grdTender.ItemsSource = dtblTender;
                    gridView2.FocusedRowHandle = intfocusrow;
                }

                ArrangeSettings();

                numAmount.Text = "0";
            }
        }

        private void numAmount_Enter(object sender, RoutedEventArgs e)
        {
           
        }

        private async void simpleButton2_Click(object sender, RoutedEventArgs e)
        {
            boolPAXCashBack = false;
            lbPrecidiaErrorResponse.Text = "";
            lbPrecidiaErrorResponse.Visibility = Visibility.Collapsed;
            btnClearTender.IsEnabled = false;

            if (gridView2.FocusedRowHandle < 0)
            {
                btnClearTender.IsEnabled = true;
                return;
            }
            if ((grdTender.ItemsSource as DataTable).Rows.Count == 0)
            {
                btnClearTender.IsEnabled = true;
                return;
            }
            if ((grdTender.ItemsSource as DataTable).Rows.Count> 0)
            {
                frm_POS.DisplayPoleText(2, "N", "B", "", " Cancel Terdering.. ");
            }
            int rwindex = gridView2.FocusedRowHandle;
            string tendr = await GeneralFunctions.GetCellValue1(rwindex, grdTender, colTenderType);
            string cctran = await GeneralFunctions.GetCellValue1(rwindex, grdTender, colCCTranNo);

            if (cctran != "")
            {
                bool f = false;
                int i = 0;
                foreach (DataRow dr in cardidentity.Rows)
                {
                    if (dr["CardID"].ToString() == cctran)
                    {
                        f = true;
                        break;
                    }
                    i++;
                }
                if (f)
                {
                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3))
                    {
                        lbPrecidiaErrorResponse.Visibility = Visibility.Collapsed;
                        PrecidiaErrorText = "";
                        PrecidiaLogFile = "";
                        PrecidiaLogFile = "Remove_Tender_" + GeneralFunctions.GetHostName() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                        PrecidiaLogPath = PrecidiaLogFilePath();
                        WriteToPrecidiaLogFile("Start: " + DateTime.Now.ToString((SystemVariables.DateFormat.Replace("/", "-")) + " HH:mm:ss"));
                        WriteToPrecidiaLogFile("Card Tran ID: " + cctran.ToString());
                    }

                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2))
                    {
                        MercuryLogFile = "";
                        MercuryLogFile = "Remove_Tender_" + GeneralFunctions.GetHostName() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                        MercuryLogPath = MercuryLogFilePath();
                        WriteToMercuryLogFile("Start: " + DateTime.Now.ToString((SystemVariables.DateFormat.Replace("/", "-")) + " HH:mm:ss"));
                        WriteToMercuryLogFile("Card Tran ID: " + cctran.ToString());
                    }

                    if (VoidCC(GeneralFunctions.fnInt32(cctran)))
                    {
                        if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3)) WriteToPrecidiaLogFile("Tender Removed");
                        if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2)) WriteToMercuryLogFile("Tender Removed");
                    }
                    cardidentity.Rows.RemoveAt(i);
                    dtblTender.Rows.RemoveAt(rwindex);
                }
            }
            else
            {
                dtblTender.Rows.RemoveAt(rwindex);
            }
            grdTender.ItemsSource = dtblTender;
            FoodStampTendering = false;
            ArrangeSettings();

            numAmount.Text = GeneralFunctions.FormatDouble(dblBalance).ToString();
            GeneralFunctions.SetFocus(numAmount);
            numAmount.SelectionLength = 0;

            btnClearTender.IsEnabled = true;
        }

        private void btnCancel_Click(object sender, RoutedEventArgs e)
        {
            bCancelClick = false;

            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
            {
                PrecidiaResetPIN();
            }

            bool f = true;
            if ((grdTender.ItemsSource as DataTable).Rows.Count> 0)
            {
                DataTable dtbl = new DataTable();
                dtbl = grdTender.ItemsSource as DataTable;

                int rwindex = 1;
                foreach (DataRow dr in dtbl.Rows)
                {
                    string cctran = dr["CCTRANNO"].ToString();
                    if (cctran != "")
                    {
                        if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3) && (rwindex == 1))
                        {
                            lbPrecidiaErrorResponse.Visibility = Visibility.Collapsed;
                            PrecidiaErrorText = "";
                            PrecidiaLogFile = "";
                            PrecidiaLogFile = "Cancel_Tender_" + GeneralFunctions.GetHostName() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                            PrecidiaLogPath = PrecidiaLogFilePath();
                            WriteToPrecidiaLogFile("Start: " + DateTime.Now.ToString((SystemVariables.DateFormat.Replace("/", "-")) + " HH:mm:ss"));
                        }

                        if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2) && (rwindex == 1))
                        {
                            MercuryLogFile = "";
                            MercuryLogFile = "Cancel_Tender_" + GeneralFunctions.GetHostName() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                            MercuryLogPath = MercuryLogFilePath();
                            WriteToMercuryLogFile("Start: " + DateTime.Now.ToString((SystemVariables.DateFormat.Replace("/", "-")) + " HH:mm:ss"));
                        }

                        if (VoidCC(GeneralFunctions.fnInt32(cctran)))
                        {
                            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3)) WriteToPrecidiaLogFile("Cancelled");
                            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2)) WriteToMercuryLogFile("Cancelled");
                        }
                        else
                        {
                            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3)) WriteToPrecidiaLogFile("Not Cancelled");
                            if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2)) WriteToMercuryLogFile("Not Cancelled");
                            //f = false;
                        }
                    }

                    rwindex++;

                }

            }
            bCancelClick = true;
            boolPAXCashBack = false;
            if (f)
                DialogResult = false;
            else
                DialogResult = null;
        }

        private void posNumKeyBoard1_Enter(object sender, RoutedEventArgs e)
        {
            if (pnlGiftCert.Visibility==Visibility.Visible)
            {
                pnlGiftCert.Visibility = Visibility.Collapsed;
                //pnlGiftCert.SendToBack();
            }
        }

        private void grdTenderType_Click(object sender, RoutedEventArgs e)
        {

        }

        private void watcher_display_Created(object source, FileSystemEventArgs e)
        {
            if (!blCG3)
            {
                if (File.Exists(CGmonitor + PrecidiaResponseDisplayFile))
                {
                    System.Threading.Thread.Sleep(2000);
                    XmlDocument XDoc1 = new XmlDocument();
                    XDoc1.Load(CGmonitor + PrecidiaResponseDisplayFile);
                    XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
                    for (int i = 0; i < nd.Count; ++i)
                    {
                        PrecidiaDisplayResult = nd[i].InnerText.ToUpper();
                    }

                    XmlNodeList nd1 = XDoc1.GetElementsByTagName("ResultText");
                    for (int i = 0; i < nd1.Count; ++i)
                    {
                        PrecidiaDisplayResultText = nd1[i].InnerText.ToUpper();
                    }

                    XmlNodeList nd2 = XDoc1.GetElementsByTagName("Response");
                    for (int i = 0; i < nd2.Count; ++i)
                    {
                        PrecidiaDisplayResponse = nd2[i].InnerText.ToUpper();
                    }

                    XDoc1 = null;
                    blCG3 = true;
                    watcher.EnableRaisingEvents = false;
                }
            }
        }

        private void watcher_ppreset_Created(object source, FileSystemEventArgs e)
        {
            if (!blCG4)
            {
                if (File.Exists(CGmonitor + PrecidiaResponseDisplayFile))
                {
                    System.Threading.Thread.Sleep(1000);
                    XmlDocument XDoc1 = new XmlDocument();
                    XDoc1.Load(CGmonitor + PrecidiaResponseDisplayFile);
                    XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
                    for (int i = 0; i < nd.Count; ++i)
                    {
                        PrecidiaDisplayResult = nd[i].InnerText.ToUpper();
                    }

                    XmlNodeList nd1 = XDoc1.GetElementsByTagName("ResultText");
                    for (int i = 0; i < nd1.Count; ++i)
                    {
                        PrecidiaDisplayResultText = nd1[i].InnerText.ToUpper();
                    }

                    XmlNodeList nd2 = XDoc1.GetElementsByTagName("Response");
                    for (int i = 0; i < nd2.Count; ++i)
                    {
                        PrecidiaDisplayResponse = nd2[i].InnerText.ToUpper();
                    }

                    XDoc1 = null;
                    blCG4 = true;
                    watcher.EnableRaisingEvents = false;
                }
            }
        }

        private void btnResetPIN_Click(object sender, RoutedEventArgs e)
        {
            PrecidiaResetPIN();
        }

        private void btnPrecidiaManual_Click(object sender, RoutedEventArgs e)
        {
            if (!blPressManual)
            {
                //btnPrecidiaManual.LookAndFeel.UseDefaultLookAndFeel = false;--Sam
                //btnPrecidiaManual.LookAndFeel.Style = DevExpress.LookAndFeel.LookAndFeelStyle.Office2003;
                //btnPrecidiaManual.Appearance.BackColor = System.Drawing.Color.DodgerBlue;
                //btnPrecidiaManual.Appearance.BackColor2 = System.Drawing.Color.DodgerBlue;
                //btnPrecidiaManual.Appearance.ForeColor = System.Drawing.Color.White;
                blPressManual = true;
                if ((Settings.PaymentGateway == 5) || (Settings.PaymentGateway == 6) || (Settings.PaymentGateway == 7))
                {
                    foreach (DataRow dr in dtblTender.Rows)
                    {
                        dr["MANUAL"] = "Y";
                    }
                }
            }
            else
            {
                //btnPrecidiaManual.Appearance.ForeColor = System.Drawing.Color.Black;--Sam
                //btnPrecidiaManual.LookAndFeel.UseDefaultLookAndFeel = true;
                //btnPrecidiaManual.LookAndFeel.Style = DevExpress.LookAndFeel.LookAndFeelStyle.Skin;
                blPressManual = false;

                if ((Settings.PaymentGateway == 5) || (Settings.PaymentGateway == 6) || (Settings.PaymentGateway == 7))
                {
                    foreach (DataRow dr in dtblTender.Rows)
                    {
                        dr["MANUAL"] = "N";
                    }
                }
            }
        }

        private void btnEscape_Click(object sender, RoutedEventArgs e)
        {

            SendKeys.Send("{ESC}");
        }

        #region Precidia Log

        private string PrecidiaLogFilePath()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            //csConnPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\Precidia Logs";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\Precidia Logs";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath + "\\" + PrecidiaLogFile;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\" + PrecidiaLogFile;
            }
            return strfilename;
        }

        private void WriteToPrecidiaLogFile(string txt)
        {
            FileStream fileStrm;
            if (File.Exists(PrecidiaLogPath)) fileStrm = new FileStream(PrecidiaLogPath, FileMode.Append, FileAccess.Write);
            else fileStrm = new FileStream(PrecidiaLogPath, FileMode.OpenOrCreate, FileAccess.Write);

            StreamWriter sw = new StreamWriter(fileStrm);
            sw.WriteLine(txt);
            sw.Close();
            fileStrm.Close();
        }

        #endregion

        #region Not Used

        private void GeneralReceiptPrinting(string PrintType, int pID, bool pLRefund, DataTable pdtbl)
        {
            if (PrintType == "Invoice") GeneralRPrinting(pID);
        }

        private void GeneralRPrinting(int pID)
        {
            //frmPreviewControl frm_PreviewControl = new frmPreviewControl();
            DataTable dtbl = new DataTable();
            DataTable dtbl1 = new DataTable();
            DataTable dtbl2 = new DataTable();
            DataTable prndtblINV = new DataTable();
            DataTable prndtblINV1 = new DataTable();
            DataTable prndtblINV2 = new DataTable();
            DataTable dtblGC = new DataTable();
            DataTable dtblItem = new DataTable();

            dtblItem.Columns.Add("ID", System.Type.GetType("System.String"));
            dtblItem.Columns.Add("ProductType", System.Type.GetType("System.String"));
            dtblItem.Columns.Add("Description", System.Type.GetType("System.String"));
            dtblItem.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtblItem.Columns.Add("Price", System.Type.GetType("System.String"));
            dtblItem.Columns.Add("Qty", System.Type.GetType("System.String"));
            dtblItem.Columns.Add("TotalPrice", System.Type.GetType("System.String"));
            dtblItem.Columns.Add("DP", System.Type.GetType("System.String"));

            OfflineRetailV2.Report.Invoice.repReceiptMain rep_ReceiptMain = new OfflineRetailV2.Report.Invoice.repReceiptMain();
            OfflineRetailV2.Report.Invoice.repReceiptHeader rep_ReceiptHeader = new OfflineRetailV2.Report.Invoice.repReceiptHeader();
            OfflineRetailV2.Report.Invoice.repReceiptSubHeader rep_ReceiptSubHeader = new OfflineRetailV2.Report.Invoice.repReceiptSubHeader();
            OfflineRetailV2.Report.Invoice.repReceiptItem rep_ReceiptItem = new OfflineRetailV2.Report.Invoice.repReceiptItem();
            OfflineRetailV2.Report.Invoice.repReceiptTaxTotal rep_ReceiptTaxTotal = new OfflineRetailV2.Report.Invoice.repReceiptTaxTotal();
            OfflineRetailV2.Report.Invoice.repReceiptTender rep_ReceiptTender = new OfflineRetailV2.Report.Invoice.repReceiptTender();

            OfflineRetailV2.Report.Invoice.repReceiptChangeDue rep_ReceiptChangeDue = new OfflineRetailV2.Report.Invoice.repReceiptChangeDue();
            OfflineRetailV2.Report.Invoice.repReceiptGCBal rep_ReceiptGCBal = new OfflineRetailV2.Report.Invoice.repReceiptGCBal();
            OfflineRetailV2.Report.Invoice.repReceiptFooter rep_ReceiptFooter = new OfflineRetailV2.Report.Invoice.repReceiptFooter();

            rep_ReceiptMain.srHeader.ReportSource = rep_ReceiptHeader;

            if (Settings.TotalReceiptHeader.Trim() != "")
            {
                string OrginalH = ""; // Settings.TotalReceiptHeader;
                ArrangeText(Settings.TotalReceiptHeader, 26, ref OrginalH);
                char FindH = '\n';
                int NumberOfOccurancesH = 0;

                string CopyOrginalH = string.Copy(OrginalH);
                string CopyOrginalH1 = "";
                int PlaceH = 0;

                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                if (PlaceH != -1)
                {
                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    CopyOrginalH1 = OrginalH.Substring(0, PlaceH - 1);
                }
                else
                {
                    CopyOrginalH1 = CopyOrginalH;
                    CopyOrginalH = "";
                }

                rep_ReceiptHeader.rHeader.Text = CopyOrginalH1;
                rep_ReceiptHeader.rDetail.Text = CopyOrginalH;
            }
            else
            {
                rep_ReceiptHeader.rHeader.Text = "";
                rep_ReceiptHeader.rDetail.Text = "";
            }

            if (Settings.DemoVersion == "Y") rep_ReceiptHeader.rDemo.Visible = true;
            else rep_ReceiptHeader.rDemo.Visible = false;

            int intTrnNo = 0;
            int intTranNo = 0;
            int intStoreID = 0;
            int intRegisterID = 0;
            string strEmpID = "";
            string strCID = "";
            string strCustID = "";
            string strCustName = "";
            string strCustCompany = "";
            string strTransDate = "";

            double dblTax = 0;
            double dblTax1 = 0;
            double dblTax2 = 0;
            double dblTax3 = 0;
            double dblDiscount = 0;
            double dblTotalSale = 0;

            string strDiscountReason = "";
            string strTaxName1 = "";
            string strTaxName2 = "";
            string strTaxName3 = "";

            prndtblINV = FetchInvHeader(pID);
            foreach (DataRow dr in prndtblINV.Rows)
            {
                intTranNo = GeneralFunctions.fnInt32(dr["TranNo"].ToString());
                intTrnNo = intTranNo;
                intStoreID = GeneralFunctions.fnInt32(dr["StoreID"].ToString());
                intRegisterID = GeneralFunctions.fnInt32(dr["RegisterID"].ToString());
                strEmpID = dr["EmpID"].ToString();
                strCID = dr["CID"].ToString();
                strCustID = dr["CustID"].ToString();
                strCustName = dr["CustName"].ToString();
                strCustCompany = dr["CustCompany"].ToString();
                strTransDate = GeneralFunctions.fnDate(dr["TransDate"].ToString()).ToString(SystemVariables.DateFormat + " hh:mm:ss tt");
                strDiscountReason = dr["DiscountReason"].ToString();
                strTaxName1 = dr["TaxNM1"].ToString();
                strTaxName2 = dr["TaxNM2"].ToString();
                strTaxName3 = dr["TaxNM3"].ToString();

                dblTax = GeneralFunctions.fnDouble(dr["Tax"].ToString());
                dblTax1 = GeneralFunctions.fnDouble(dr["Tax1"].ToString());
                dblTax2 = GeneralFunctions.fnDouble(dr["Tax2"].ToString());
                dblTax3 = GeneralFunctions.fnDouble(dr["Tax3"].ToString());
                dblDiscount = GeneralFunctions.fnDouble(dr["Discount"].ToString());
                dblTotalSale = GeneralFunctions.fnDouble(dr["TotalSale"].ToString());
            }
            prndtblINV.Dispose();

            rep_ReceiptMain.srSubheader.ReportSource = rep_ReceiptSubHeader;

            rep_ReceiptSubHeader.rHeader.Text = Properties.Resources.Receipt_Number;
            rep_ReceiptSubHeader.rNo.Text = pID.ToString();
            if (strCustCompany != "")
            {
                rep_ReceiptSubHeader.rCompany.Text = Properties.Resources.Company;
                rep_ReceiptSubHeader.rC.Text = strCustCompany;
            }
            else
            {
                rep_ReceiptSubHeader.rCompany.Visible = false;
                rep_ReceiptSubHeader.rC.Visible = false;

                rep_ReceiptSubHeader.rCID.Location = new System.Drawing.Point(rep_ReceiptSubHeader.rCName.Location.X, rep_ReceiptSubHeader.rCName.Location.Y);
                rep_ReceiptSubHeader.rCI.Location = new System.Drawing.Point(rep_ReceiptSubHeader.rCN.Location.X, rep_ReceiptSubHeader.rCN.Location.Y);
                rep_ReceiptSubHeader.rCName.Location = new System.Drawing.Point(rep_ReceiptSubHeader.rCompany.Location.X, rep_ReceiptSubHeader.rCompany.Location.Y);
                rep_ReceiptSubHeader.rCN.Location = new System.Drawing.Point(rep_ReceiptSubHeader.rC.Location.X, rep_ReceiptSubHeader.rC.Location.Y);
                rep_ReceiptSubHeader.rLine.Location = new System.Drawing.Point(rep_ReceiptSubHeader.rCID.Location.X, rep_ReceiptSubHeader.rCID.Location.Y + 28);

            }

            if (strCustName != "")
            {
                rep_ReceiptSubHeader.rCName.Text = Properties.Resources.Customer;
                rep_ReceiptSubHeader.rCN.Text = strCustName;
            }
            else
            {
                rep_ReceiptSubHeader.rCName.Visible = false;
                rep_ReceiptSubHeader.rCN.Visible = false;

                rep_ReceiptSubHeader.rCID.Location = new System.Drawing.Point(rep_ReceiptSubHeader.rCName.Location.X, rep_ReceiptSubHeader.rCName.Location.Y);
                rep_ReceiptSubHeader.rCI.Location = new System.Drawing.Point(rep_ReceiptSubHeader.rCN.Location.X, rep_ReceiptSubHeader.rCN.Location.Y);
                rep_ReceiptSubHeader.rLine.Location = new System.Drawing.Point(rep_ReceiptSubHeader.rCID.Location.X, rep_ReceiptSubHeader.rCID.Location.Y + 28);

            }

            if (strCustID != "")
            {
                rep_ReceiptSubHeader.rCID.Text = Properties.Resources.Customer_ID;
                rep_ReceiptSubHeader.rCI.Text = strCustID;
            }
            else
            {
                rep_ReceiptSubHeader.rCID.Visible = false;
                rep_ReceiptSubHeader.rCI.Visible = false;
                rep_ReceiptSubHeader.rLine.Location = new System.Drawing.Point(rep_ReceiptSubHeader.rCID.Location.X, rep_ReceiptSubHeader.rCID.Location.Y + 28);
            }
            if ((strCustCompany == "") && (strCustName == "") && (strCustID == ""))
            {
                rep_ReceiptSubHeader.rLine.Visible = false;
                rep_ReceiptSubHeader.Detail.Height = 1;
            }
            else
            {
                rep_ReceiptSubHeader.Detail.Height = rep_ReceiptSubHeader.rLine.Location.Y + 10;
            }



            prndtblINV1 = FetchInvDetails(pID);
            double dblTempTotal = 0;
            foreach (DataRow dr in prndtblINV1.Rows)
            {
                double dblTotalPrice = 0;
                dblTotalPrice = GeneralFunctions.fnDouble(dr["TotalPrice"].ToString());
                dblTempTotal = dblTempTotal + dblTotalPrice;
                string desc = "";
                if (dr["ProductType"].ToString() == "M")
                {
                    desc = dr["Description"].ToString();
                    if (dr["MOP1"].ToString() != "")
                    {
                        desc = desc + "\n" + dr["MOP1"].ToString();
                    }
                    if (dr["MOP2"].ToString() != "")
                    {
                        desc = desc + "\n" + dr["MOP2"].ToString();
                    }
                    if (dr["MOP3"].ToString() != "")
                    {
                        desc = desc + "\n" + dr["MOP3"].ToString();
                    }

                    dtblItem.Rows.Add(new object[] {dr["ID"].ToString(),
                                                dr["ProductType"].ToString(),
                                                desc,
                                                dr["SKU"].ToString(),
                                                dr["Price"].ToString(),
                                                dr["Qty"].ToString(),
                                                dr["TotalPrice"].ToString(),
                                                dr["DP"].ToString()});
                }
                else
                {
                    dtblItem.Rows.Add(new object[] {dr["ID"].ToString(),
                                                dr["ProductType"].ToString(),
                                                dr["Description"].ToString(),
                                                dr["SKU"].ToString(),
                                                dr["Price"].ToString(),
                                                dr["Qty"].ToString(),
                                                dr["TotalPrice"].ToString(),
                                                dr["DP"].ToString()});
                }
            }

            rep_ReceiptMain.srItem.ReportSource = rep_ReceiptItem;
            rep_ReceiptItem.Report.DataSource = dtblItem;
            rep_ReceiptItem.DecimalPlace = Settings.DecimalPlace;
            rep_ReceiptItem.GroupHeader1.GroupFields.Add(rep_ReceiptItem.CreateGroupField("ID"));
            rep_ReceiptItem.rDP.DataBindings.Add("Text", dtblItem, "DP");
            rep_ReceiptItem.rItem.DataBindings.Add("Text", dtblItem, "Description");
            rep_ReceiptItem.rSKU.DataBindings.Add("Text", dtblItem, "SKU");
            rep_ReceiptItem.rQty.DataBindings.Add("Text", dtblItem, "Qty");
            rep_ReceiptItem.rRate.DataBindings.Add("Text", dtblItem, "Price");
            rep_ReceiptItem.rPrice.DataBindings.Add("Text", dtblItem, "TotalPrice");

            if (dblDiscount != 0)
            {
                if (strDiscountReason != "")
                    rep_ReceiptItem.rDReason.Text = "( " + strDiscountReason + " )";
                else
                    rep_ReceiptItem.rDReason.Text = "";
                rep_ReceiptItem.rDAmount.Text = GetFotmatDoubleValue(dblDiscount);
            }
            else
            {
                rep_ReceiptItem.rDiscount.Visible = false;
                rep_ReceiptItem.rDReason.Visible = false;
                rep_ReceiptItem.rDAmount.Visible = false;
                rep_ReceiptItem.rLine.Location = new System.Drawing.Point(rep_ReceiptItem.rLine.Location.X, 2);
                rep_ReceiptItem.rSubtotal.Location = new System.Drawing.Point(rep_ReceiptItem.rSubtotal.Location.X, 10);
                rep_ReceiptItem.rSubtotalAmount.Location = new System.Drawing.Point(rep_ReceiptItem.rSubtotalAmount.Location.X, 10);
                rep_ReceiptItem.ReportFooter.Height = rep_ReceiptItem.rSubtotal.Location.Y + 28;
            }
            rep_ReceiptItem.rSubtotalAmount.Text = GetFotmatDoubleValue(dblTempTotal);

            rep_ReceiptMain.srTaxTotal.ReportSource = rep_ReceiptTaxTotal;

            if (dblTax == 0)
            {
                rep_ReceiptTaxTotal.rTax.Visible = false;
                rep_ReceiptTaxTotal.rTN1.Visible = false;
                rep_ReceiptTaxTotal.rT1.Visible = false;
                rep_ReceiptTaxTotal.rTN2.Visible = false;
                rep_ReceiptTaxTotal.rT2.Visible = false;
                rep_ReceiptTaxTotal.rTN3.Visible = false;
                rep_ReceiptTaxTotal.rT3.Visible = false;
                rep_ReceiptTaxTotal.PageHeader.Height = 1;
            }
            else
            {
                if (dblTax1 != 0)
                {
                    rep_ReceiptTaxTotal.rTN1.Text = "Tax:" + strTaxName1;
                    rep_ReceiptTaxTotal.rT1.Text = GetFotmatDoubleValue(dblTax1);
                }
                else
                {
                    rep_ReceiptTaxTotal.rTN1.Visible = false;
                    rep_ReceiptTaxTotal.rT1.Visible = false;
                    rep_ReceiptTaxTotal.rTN3.Location = new System.Drawing.Point(rep_ReceiptTaxTotal.rTN2.Location.X, rep_ReceiptTaxTotal.rTN2.Location.Y);
                    rep_ReceiptTaxTotal.rT3.Location = new System.Drawing.Point(rep_ReceiptTaxTotal.rT2.Location.X, rep_ReceiptTaxTotal.rT2.Location.Y);
                    rep_ReceiptTaxTotal.rTN2.Location = new System.Drawing.Point(rep_ReceiptTaxTotal.rTN1.Location.X, rep_ReceiptTaxTotal.rTN1.Location.Y);
                    rep_ReceiptTaxTotal.rT2.Location = new System.Drawing.Point(rep_ReceiptTaxTotal.rT1.Location.X, rep_ReceiptTaxTotal.rT1.Location.Y);
                }

                if (dblTax2 != 0)
                {
                    rep_ReceiptTaxTotal.rTN2.Text = Properties.Resources.Tax_ + strTaxName2;
                    rep_ReceiptTaxTotal.rT2.Text = GetFotmatDoubleValue(dblTax2);
                }
                else
                {
                    rep_ReceiptTaxTotal.rTN2.Visible = false;
                    rep_ReceiptTaxTotal.rT2.Visible = false;
                    rep_ReceiptTaxTotal.rTN3.Location = new System.Drawing.Point(rep_ReceiptTaxTotal.rTN2.Location.X, rep_ReceiptTaxTotal.rTN2.Location.Y);
                    rep_ReceiptTaxTotal.rT3.Location = new System.Drawing.Point(rep_ReceiptTaxTotal.rT2.Location.X, rep_ReceiptTaxTotal.rT2.Location.Y);
                }

                if (dblTax3 != 0)
                {
                    rep_ReceiptTaxTotal.rTN3.Text = Properties.Resources.Tax_ + strTaxName3;
                    rep_ReceiptTaxTotal.rT3.Text = GetFotmatDoubleValue(dblTax3);
                }
                else
                {
                    rep_ReceiptTaxTotal.rTN3.Visible = false;
                    rep_ReceiptTaxTotal.rT3.Visible = false;
                }
                if (rep_ReceiptTaxTotal.rTN3.Visible)
                    rep_ReceiptTaxTotal.PageHeader.Height = rep_ReceiptTaxTotal.rTN3.Location.Y + 28;
                else
                {
                    if (rep_ReceiptTaxTotal.rTN2.Visible)
                    {
                        rep_ReceiptTaxTotal.PageHeader.Height = rep_ReceiptTaxTotal.rTN2.Location.Y + 28;
                    }
                    else
                    {
                        rep_ReceiptTaxTotal.PageHeader.Height = rep_ReceiptTaxTotal.rTN1.Location.Y + 28;
                    }
                }



            }
            rep_ReceiptTaxTotal.rTotalAmount.Text = GetFotmatDoubleValue(dblTotalSale);
            prndtblINV2 = FetchInvTender(intTrnNo);
            double dblTempTender = 0;
            foreach (DataRow dr in prndtblINV2.Rows)
            {
                double dblAmount = 0;
                dblAmount = GeneralFunctions.fnDouble(dr["Amount"].ToString());
                dblTempTender = dblTempTender + dblAmount;
            }
            rep_ReceiptMain.srTender.ReportSource = rep_ReceiptTender;
            rep_ReceiptTender.Report.DataSource = prndtblINV2;
            rep_ReceiptTender.DecimalPlace = Settings.DecimalPlace;
            rep_ReceiptTender.rTenderName.DataBindings.Add("Text", prndtblINV2, "Name");
            rep_ReceiptTender.rTenderAmount.DataBindings.Add("Text", prndtblINV2, "Amount");


            if (dblTotalSale - dblTempTender != 0) // --------------- Change Due --------------
            {
                rep_ReceiptMain.srChange.ReportSource = rep_ReceiptChangeDue;
                rep_ReceiptChangeDue.rChange.Text = "(" + GetFotmatDoubleValue(dblTempTender - dblTotalSale) + ")";
            }


            if (strCID != "0")   // -------------- gift certificate balance
            {
                if (Settings.POSShowGiftCertBalance == "Y")
                {

                    dtblGC = FetchActiveGC(GeneralFunctions.fnInt32(strCID));
                    if (dtblGC.Rows.Count > 0)
                    {
                        rep_ReceiptMain.srGC.ReportSource = rep_ReceiptGCBal;
                        rep_ReceiptGCBal.Report.DataSource = dtblGC;
                        rep_ReceiptGCBal.DecimalPlace = Settings.DecimalPlace;
                        rep_ReceiptGCBal.rGC.DataBindings.Add("Text", dtblGC, "GC");
                        rep_ReceiptGCBal.rGCAMount.DataBindings.Add("Text", dtblGC, "GCAMT");

                        rep_ReceiptGCBal.rGCDate.Text = DateTime.Today.Date.ToShortDateString();

                    }
                }
            }





            rep_ReceiptMain.srFooter.ReportSource = rep_ReceiptFooter;
            rep_ReceiptFooter.rDate.Text = strTransDate;
            rep_ReceiptFooter.rStore.Text = intStoreID.ToString();
            rep_ReceiptFooter.rClerk.Text = strEmpID;
            rep_ReceiptFooter.rHeader.Text = Settings.ReceiptFooter;
            if (Settings.ReceiptFooter == "")
            {
                rep_ReceiptFooter.rHeader.Visible = false;
                rep_ReceiptFooter.ReportFooter.Height = rep_ReceiptFooter.rDate.Location.Y + 28;
            }

            //frmPreviewControl1 frm_PreviewControl = new frmPreviewControl1();
            try
            {
                if (Settings.ReportPrinterName != "") rep_ReceiptMain.PrinterName = Settings.ReportPrinterName;
                rep_ReceiptMain.CreateDocument();
                rep_ReceiptMain.PrintingSystem.ShowMarginsWarning = false;
                rep_ReceiptMain.PrintingSystem.ShowPrintStatusDialog = false;

                //rep_ReceiptMain.ShowPreviewDialog();

                DocumentPreviewWindow window = new DocumentPreviewWindow() { WindowState = WindowState.Maximized };
                window.PreviewControl.DocumentSource = rep_ReceiptMain;
                window.ShowDialog();

            }
            finally
            {
                rep_ReceiptHeader.Dispose();
                rep_ReceiptSubHeader.Dispose();
                rep_ReceiptItem.Dispose();
                rep_ReceiptTaxTotal.Dispose();
                rep_ReceiptTender.Dispose();
                rep_ReceiptMain.Dispose();

                dtbl.Dispose();
                dtbl1.Dispose();
                dtbl2.Dispose();
                prndtblINV1.Dispose();
                dtblGC.Dispose();
            }
        }

        private void ArrangeText(string txt, int charlineper, ref string reftxt)
        {
            int intLine = 0;
            if (Settings.GeneralReceiptPrint == "Y") intLine = 55;
            else intLine = charlineper;

            bool fl = false;
            bool sl = false;
            bool tl = false;

            if (txt.Length <= intLine)
            {
                reftxt = txt;
            }
            else
            {
                int strlengh = txt.Length;
                int i = 0;
                string stradd = "";
                string linetxt = "";
                foreach (char c in txt)
                {
                    i++;
                    if ((c.ToString() != "\n") && (c.ToString() != "\r"))
                        stradd = stradd + c.ToString();

                    if (linetxt.Length + stradd.Length < intLine)
                    {
                        if (c.ToString() == " ")
                        {
                            if (linetxt == "")
                                linetxt = stradd;
                            else
                                linetxt = linetxt + " " + stradd;
                            //reftxt = reftxt + linetxt;
                            stradd = "";
                        }
                        if ((c.ToString() == "\n") || (c.ToString() == "\r"))
                        {
                            if (linetxt == "") linetxt = stradd; else linetxt = linetxt + " " + stradd;
                            reftxt = reftxt + linetxt;

                            if (c.ToString() == "\n") reftxt = reftxt + " \n";
                            stradd = "";
                            linetxt = "";
                        }
                    }
                    else
                    {
                        if (c.ToString() == " ")
                        {
                            reftxt = reftxt + linetxt + stradd + " \n";
                            linetxt = "";
                            stradd = "";
                        }
                        else
                        {
                            reftxt = reftxt + linetxt + " \n";
                            linetxt = "";
                        }
                    }
                }

                if (linetxt != "")
                {
                    reftxt = reftxt + linetxt + stradd; //+ "\n";
                }
            }
        }

        private DataTable FetchInvHeader(int INO)
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchInvoiceHeader(INO, Settings.StoreCode);
        }

        private DataTable FetchInvDetails(int INO)
        {
            PosDataObject.POS objpos2 = new PosDataObject.POS();
            objpos2.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos2.FetchInvoiceDetails(INO, Settings.TaxInclusive, false);
        }

        private DataTable FetchInvTender(int INO)
        {
            PosDataObject.POS objpos3 = new PosDataObject.POS();
            objpos3.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos3.FetchInvoiceTender(INO);
        }

        private double GetDTaxAmount(int pTaxID, double pRate, int pType, double AppAmount)
        {
            double tx = 0;

            if (pType == 0)
            {
                tx = (pRate * AppAmount) / 100;
            }
            else
            {
                tx = GeneralFunctions.GetTaxFromTaxTable(pTaxID, pRate, AppAmount);
            }
            return tx;
        }

        private void RearrangeDTxt(double val, string ttype, ref string line1, ref string line2)
        {
            string tempstr1 = "";
            string tempstr2 = "";
            if (val > 0) tempstr1 = SystemVariables.CurrencySymbol + GeneralFunctions.FormatDouble(val).ToString("#0.00"); else tempstr1 = "-" + SystemVariables.CurrencySymbol + GeneralFunctions.FormatDouble(-val).ToString("#0.00");
            tempstr2 = " " + ttype;
            if ((tempstr1.Length + tempstr2.Length) <= 20)
            {
                line1 = tempstr1 + tempstr2;
                line2 = "";
            }
            else
            {
                int ln = tempstr1.Length + tempstr2.Length;
                line1 = (tempstr1 + tempstr2).Substring(0, 20);
                line2 = (tempstr1 + tempstr2).Substring(20, (ln - 20));
            }
        }

        private void watcher_signature_Created(object source, FileSystemEventArgs e)
        {
            if (!blCG2)
            {
                if (File.Exists(CGmonitor + CGsignature_A))
                {
                    System.Threading.Thread.Sleep(1000);
                    XmlDocument XDoc1 = new XmlDocument();
                    XDoc1.Load(CGmonitor + CGsignature_A);
                    XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
                    for (int i = 0; i < nd.Count; ++i)
                    {
                        CGresp_signature = nd[i].InnerText.ToUpper();
                    }

                    XDoc1 = null;
                    blCG2 = true;
                    watcher.EnableRaisingEvents = false;
                }
            }
        }

        private void watcher_cashback_Created(object source, FileSystemEventArgs e)
        {
            if (!blCG1)
            {
                if (File.Exists(CGmonitor + CGcashback_A))
                {
                    System.Threading.Thread.Sleep(1000);
                    XmlDocument XDoc1 = new XmlDocument();
                    XDoc1.Load(CGmonitor + CGcashback_A);
                    XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
                    for (int i = 0; i < nd.Count; ++i)
                    {
                        CGresp_Cashbk = nd[i].InnerText.ToUpper();
                    }

                    if (CGresp_Cashbk.ToUpper().Trim() == "SUCCESS")
                    {
                        CG_Cashbk = 0;
                        try
                        {
                            XmlNodeList nd2 = XDoc1.GetElementsByTagName("Response");
                            for (int i = 0; i < nd2.Count; ++i)
                            {
                                if (nd2[i].InnerText != "")
                                {
                                    CG_Cashbk = GeneralFunctions.fnDouble(nd2[i].InnerText.Replace(SystemVariables.CurrencySymbol, ""));
                                }
                            }
                        }
                        catch
                        {
                        }
                    }

                    XDoc1 = null;
                    blCG1 = true;
                    watcher.EnableRaisingEvents = false;
                }
            }
        }

        private void watcher_Created(object source, FileSystemEventArgs e)
        {
            if (!blCG)
            {
                if (File.Exists(CGmonitor + CGanswerfile))
                {
                    System.Threading.Thread.Sleep(1000);
                    XmlDocument XDoc1 = new XmlDocument();
                    XDoc1.Load(CGmonitor + CGanswerfile);
                    XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
                    for (int i = 0; i < nd.Count; ++i)
                    {
                        CGresp = nd[i].InnerText.ToUpper();
                    }
                    XmlNodeList nd1 = XDoc1.GetElementsByTagName("ResultText");
                    for (int i = 0; i < nd1.Count; ++i)
                    {
                        CGresptxt = nd1[i].InnerText;
                    }

                    //if (CGresp.ToUpper().Trim() == "APPROVED")
                    //{
                    AuthCode = "";
                    TranID = "";
                    CardNum = "";
                    CardExMM = "";
                    CardExYY = "";
                    CardLogo = "";
                    CardType = "";
                    ApprovedAmt = "";
                    RefNo = "";
                    CardEntry = "";
                    AcqRef = "";
                    Token = "";
                    MerchantID = "";
                    MercuryProcessData = "";
                    MercuryTextResponse = "";
                    MercuryPurchaseAmount = 0;
                    MercuryTranCode = "";
                    MercuryResponseOrigin = "";
                    MercuryRecordNo = "";
                    MercuryResponseReturnCode = "";
                    PrecidiaCashBack = "";

                    try
                    {
                        XmlNodeList nd2 = XDoc1.GetElementsByTagName("Authorization");
                        for (int i = 0; i < nd2.Count; ++i)
                        {
                            AuthCode = nd2[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd3 = XDoc1.GetElementsByTagName("AuthAmt");
                        for (int i = 0; i < nd3.Count; ++i)
                        {
                            ApprovedAmt = nd3[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd4 = XDoc1.GetElementsByTagName("CardNumber");
                        for (int i = 0; i < nd4.Count; ++i)
                        {
                            CardNum = nd4[i].InnerText;
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        XmlNodeList nd5 = XDoc1.GetElementsByTagName("Id");
                        for (int i = 0; i < nd5.Count; ++i)
                        {
                            Token = nd5[i].InnerText;
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        XmlNodeList nd6 = XDoc1.GetElementsByTagName("RecNum");
                        for (int i = 0; i < nd6.Count; ++i)
                        {
                            TranID = nd6[i].InnerText;
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        XmlNodeList nd7 = XDoc1.GetElementsByTagName("CardType");
                        for (int i = 0; i < nd7.Count; ++i)
                        {
                            CardLogo = nd7[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd8 = XDoc1.GetElementsByTagName("MerchantId");
                        for (int i = 0; i < nd8.Count; ++i)
                        {
                            MerchantID = nd8[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd9 = XDoc1.GetElementsByTagName("RefData");
                        for (int i = 0; i < nd9.Count; ++i)
                        {
                            RefNo = nd9[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd10 = XDoc1.GetElementsByTagName("Cashback");
                        for (int i = 0; i < nd10.Count; ++i)
                        {
                            PrecidiaCashBack = nd10[i].InnerText;
                        }
                    }
                    catch
                    {
                    }


                    try
                    {
                        XmlNodeList nd11 = XDoc1.GetElementsByTagName("FoodBalance");
                        for (int i = 0; i < nd11.Count; ++i)
                        {
                            PrecidiaFoodStampBalance = nd11[i].InnerText;
                        }
                    }
                    catch
                    {
                    }
                    //}

                    XDoc1 = null;
                    blCG = true;
                    watcher.EnableRaisingEvents = false;
                }
            }
        }

        private void watcher_gc_Created(object source, FileSystemEventArgs e)
        {
            if (!blCGgc)
            {
                if (File.Exists(CGmonitor + CGgc_A))
                {
                    System.Threading.Thread.Sleep(1000);
                    XmlDocument XDoc1 = new XmlDocument();
                    XDoc1.Load(CGmonitor + CGgc_A);
                    XmlNodeList nd = XDoc1.GetElementsByTagName("Result");
                    for (int i = 0; i < nd.Count; ++i)
                    {
                        CGresp = nd[i].InnerText.ToUpper();
                    }
                    XmlNodeList nd1 = XDoc1.GetElementsByTagName("ResultText");
                    for (int i = 0; i < nd1.Count; ++i)
                    {
                        CGresptxt = nd1[i].InnerText;
                    }

                    //if (CGresp.ToUpper().Trim() == "APPROVED")
                    //{
                    AuthCode = "";
                    TranID = "";
                    CardNum = "";
                    CardExMM = "";
                    CardExYY = "";
                    CardLogo = "";
                    CardType = "";
                    ApprovedAmt = "";
                    RefNo = "";
                    CardEntry = "";
                    AcqRef = "";
                    Token = "";
                    MerchantID = "";
                    MercuryProcessData = "";
                    MercuryTextResponse = "";
                    MercuryPurchaseAmount = 0;
                    MercuryTranCode = "";
                    MercuryResponseOrigin = "";
                    MercuryRecordNo = "";
                    MercuryResponseReturnCode = "";
                    MercuryGiftCardBalance = "";
                    PrecidiaCashBack = "";
                    try
                    {
                        XmlNodeList nd2 = XDoc1.GetElementsByTagName("Authorization");
                        for (int i = 0; i < nd2.Count; ++i)
                        {
                            AuthCode = nd2[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd3 = XDoc1.GetElementsByTagName("AuthAmt");
                        for (int i = 0; i < nd3.Count; ++i)
                        {
                            ApprovedAmt = nd3[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd4 = XDoc1.GetElementsByTagName("CardNumber");
                        for (int i = 0; i < nd4.Count; ++i)
                        {
                            CardNum = nd4[i].InnerText;
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        XmlNodeList nd5 = XDoc1.GetElementsByTagName("Id");
                        for (int i = 0; i < nd5.Count; ++i)
                        {
                            Token = nd5[i].InnerText;
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        XmlNodeList nd6 = XDoc1.GetElementsByTagName("RecNum");
                        for (int i = 0; i < nd6.Count; ++i)
                        {
                            TranID = nd6[i].InnerText;
                        }
                    }
                    catch
                    {
                    }
                    try
                    {
                        XmlNodeList nd7 = XDoc1.GetElementsByTagName("CardType");
                        for (int i = 0; i < nd7.Count; ++i)
                        {
                            CardLogo = nd7[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd8 = XDoc1.GetElementsByTagName("MerchantId");
                        for (int i = 0; i < nd8.Count; ++i)
                        {
                            MerchantID = nd8[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd9 = XDoc1.GetElementsByTagName("RefData");
                        for (int i = 0; i < nd9.Count; ++i)
                        {
                            RefNo = nd9[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd10 = XDoc1.GetElementsByTagName("Cashback");
                        for (int i = 0; i < nd10.Count; ++i)
                        {
                            PrecidiaCashBack = nd10[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd12 = XDoc1.GetElementsByTagName("Balance");
                        for (int i = 0; i < nd12.Count; ++i)
                        {
                            MercuryGiftCardBalance = nd12[i].InnerText;
                        }
                    }
                    catch
                    {
                    }

                    try
                    {
                        XmlNodeList nd11 = XDoc1.GetElementsByTagName("FoodBalance");
                        for (int i = 0; i < nd11.Count; ++i)
                        {
                            PrecidiaFoodStampBalance = nd11[i].InnerText;
                        }
                    }
                    catch
                    {
                    }
                    //}

                    XDoc1 = null;
                    blCGgc = true;
                    watcher.EnableRaisingEvents = false;

                }
            }
        }

        #endregion

        #region Mercury Log

        private string MercuryLogFilePath()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            //csConnPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\Mercury Logs";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\Mercury Logs";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath + "\\" + MercuryLogFile;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\" + MercuryLogFile;
            }
            return strfilename;
        }

        private void WriteToMercuryLogFile(string txt)
        {
            FileStream fileStrm;
            if (File.Exists(MercuryLogPath)) fileStrm = new FileStream(MercuryLogPath, FileMode.Append, FileAccess.Write);
            else fileStrm = new FileStream(MercuryLogPath, FileMode.OpenOrCreate, FileAccess.Write);

            StreamWriter sw = new StreamWriter(fileStrm);
            sw.WriteLine(txt);
            sw.Close();
            fileStrm.Close();
        }

        #endregion

        #region Datacap Log

        private string DatacapLogFilePath()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\Datacap Logs";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\Datacap Logs";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath + "\\" + DatacapLogFile;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\" + DatacapLogFile;
            }
            return strfilename;
        }

        private void WriteToDatacapLogFile(string txt)
        {
            FileStream fileStrm;
            if (File.Exists(DatacapLogPath)) fileStrm = new FileStream(DatacapLogPath, FileMode.Append, FileAccess.Write);
            else fileStrm = new FileStream(DatacapLogPath, FileMode.OpenOrCreate, FileAccess.Write);

            StreamWriter sw = new StreamWriter(fileStrm);
            sw.WriteLine(txt);
            sw.Close();
            fileStrm.Close();
        }

        #endregion

        #region Datacap EMV Log

        private string DatacapEMVLogFilePath()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\DatacapEMV Logs";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\DatacapEMV Logs";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath + "\\" + DatacapEMVLogFile;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\" + DatacapEMVLogFile;
            }
            return strfilename;
        }

        private void WriteToDatacapEMVLogFile(string txt)
        {
            FileStream fileStrm;
            if (File.Exists(DatacapEMVLogPath)) fileStrm = new FileStream(DatacapEMVLogPath, FileMode.Append, FileAccess.Write);
            else fileStrm = new FileStream(DatacapEMVLogPath, FileMode.OpenOrCreate, FileAccess.Write);

            StreamWriter sw = new StreamWriter(fileStrm);
            sw.WriteLine(txt);
            sw.Close();
            fileStrm.Close();
        }

        #endregion

        #region POSLink Log

        private string POSLinkLogFilePath()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\POSLink Logs";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\POSLink Logs";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath + "\\" + POSLinkLogFile;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\" + POSLinkLogFile;
            }
            return strfilename;
        }

        private string POSLinkLogFilePath_Test()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\POSLink Logs";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\POSLink Logs";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath + "\\" + POSLinkLogFile_Test;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath + "\\" + POSLinkLogFile_Test;
            }
            return strfilename;
        }

        private string POSLinkSignatureFilePath()
        {

            string csConnPath = "";
            string strfilename = "";
            string strdirpath = "";

            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments);
            var directory = new DirectoryInfo(documentsPath);
            csConnPath = directory.Parent.FullName;

            if (csConnPath.EndsWith("\\")) strdirpath = csConnPath + SystemVariables.BrandName + "\\POSLink Logs\\Sign";
            else strdirpath = csConnPath + "\\" + SystemVariables.BrandName + "\\POSLink Logs\\Sign";

            if (Directory.Exists(strdirpath))
            {
                strfilename = strdirpath;
            }
            else
            {
                Directory.CreateDirectory(strdirpath);
                strfilename = strdirpath;
            }
            return strfilename;
        }

        private void WriteToPOSLinkLogFile(string txt)
        {
            FileStream fileStrm;
            if (File.Exists(POSLinkLogPath)) fileStrm = new FileStream(POSLinkLogPath_Test, FileMode.Append, FileAccess.Write);
            else fileStrm = new FileStream(POSLinkLogPath_Test, FileMode.OpenOrCreate, FileAccess.Write);

            StreamWriter sw = new StreamWriter(fileStrm);
            sw.WriteLine(txt);
            sw.Close();
            fileStrm.Close();
        }

        #endregion

        /// <summary>
        /// Datacap EMV Pin Pad Reset
        /// </summary>
        private void CallEMVPadReset()
        {
            /*
            if (CallPadResetCount != 5)
            {
                DSIEMVXLib.DsiEMVX dd1 = new DSIEMVXLib.DsiEMVX();
                string output = dd1.ProcessTransaction(GeneralFunctions.PrepareEMVPadResetXML());
                Dcap_PPAD_CmdStatus = "";
                Dcap_PPAD_TextResponse = "";
                string cmdstatus = GeneralFunctions.GetEMVPadResetStatus(output);
                Dcap_PPAD_TextResponse = GeneralFunctions.GetEMVPadResetTextResponse(output);
                Dcap_PPAD_CmdStatus = cmdstatus;
                GeneralFunctions.StoreResponseSequence(output);
                if (cmdstatus != "Success")
                {
                    CallPadResetCount++;
                    CallEMVPadReset();
                }
                else
                {
                    CallPadResetCount = 0;
                }
            }
            else
            {
                return;
            }*/
        }





        private DataTable FetchInvFees(int pInvNo)
        {
            PosDataObject.POS objpos1 = new PosDataObject.POS();
            objpos1.Connection = new SqlConnection(SystemVariables.ConnectionString);
            return objpos1.FetchFeesInInvoice(pInvNo);
        }
        TextBlock lbPrecidiaErrorResponse = new TextBlock();
        private void frmPOSTenderDlg_FormClosing(object sender, CancelEventArgs e)
        {
            if ((!bCancelClick) && ((grdTender.ItemsSource as DataTable).Rows.Count > 0) && (GeneralFunctions.fnDouble(numTender.Text.Substring(numTender.Text.IndexOf(" ") + 1)) < GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1))))
            {
                if (new MessageBoxWindow().Show(Properties.Resources.Tendering_is_not_complete__Do_you_want_to_Exit_, Properties.Resources.Tender_Screen_Exit_Confirmation, MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                {
                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3) && (Settings.PrecidiaUsePINPad == "Y"))
                    {
                        PrecidiaResetPIN();
                    }

                    bool f = true;
                    if ((grdTender.ItemsSource as DataTable).Rows.Count> 0)
                    {
                        DataTable dtbl = new DataTable();
                        dtbl = grdTender.ItemsSource as DataTable;

                        int rwindex = 1;
                        foreach (DataRow dr in dtbl.Rows)
                        {
                            string cctran = dr["CCTRANNO"].ToString();
                            if (cctran != "")
                            {
                                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3) && (rwindex == 1))
                                {
                                    lbPrecidiaErrorResponse.Visibility = Visibility.Collapsed;
                                    PrecidiaErrorText = "";
                                    PrecidiaLogFile = "";
                                    PrecidiaLogFile = "Cancel_Tender_" + GeneralFunctions.GetHostName() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                                    PrecidiaLogPath = PrecidiaLogFilePath();
                                    WriteToPrecidiaLogFile("Start: " + DateTime.Now.ToString((SystemVariables.DateFormat.Replace("/", "-")) + " HH:mm:ss"));
                                }

                                if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2) && (rwindex == 1))
                                {
                                    MercuryLogFile = "";
                                    MercuryLogFile = "Cancel_Tender_" + GeneralFunctions.GetHostName() + "_" + DateTime.Now.ToString(SystemVariables.DateFormat.Replace("/", "").Replace("-", "")) + "_" + DateTime.Now.ToString("HHmmss") + ".txt";
                                    MercuryLogPath = MercuryLogFilePath();
                                    WriteToMercuryLogFile("Start: " + DateTime.Now.ToString((SystemVariables.DateFormat.Replace("/", "-")) + " HH:mm:ss"));
                                }

                                if (VoidCC(GeneralFunctions.fnInt32(cctran)))
                                {
                                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3)) WriteToPrecidiaLogFile("Cancelled");
                                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2)) WriteToMercuryLogFile("Cancelled");
                                }
                                else
                                {
                                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 3)) WriteToPrecidiaLogFile("Not Cancelled");
                                    if ((Settings.POSCardPayment == "Y") && (Settings.PaymentGateway == 2)) WriteToMercuryLogFile("Not Cancelled");
                                    //f = false;
                                }
                            }

                            rwindex++;

                        }

                    }
                }
                else
                {
                    e.Cancel = true;
                }
            }
        }

        private void PayByCardButton_Click(object sender, RoutedEventArgs e)
        {
            if (decimal.Parse(numTender.Text) > 0)
            {
                PosDataObject.POS objPOS = new PosDataObject.POS();
                objPOS.Connection = SystemVariables.Conn;
                int invoiceNo = objPOS.FetchMaxInvoiceNo();

                //var evoTransactionForm = new frm_EvoTransaction(decimal.Parse(numTender.Text), invoiceNo, isRefundOrVoid: false);
                //evoTransactionForm.ShowDialog();
            }
            else
            {
                new MessageBoxWindow().Show("Add a Payment first.", "Info", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        #region Preview Invoice

        private DataTable GetPreviewInvoiceHeader()
        {
            DataTable dtbl = new DataTable();

            dtbl.Columns.Add("StoreID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("EmpID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Terminal", System.Type.GetType("System.String"));
            dtbl.Columns.Add("InvoiceNo", System.Type.GetType("System.String"));
            dtbl.Columns.Add("ServiceType", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustName", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustCompany", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustDetails", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustStore", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustMobile", System.Type.GetType("System.String"));
            dtbl.Columns.Add("CustomerShortAddress", System.Type.GetType("System.String"));

            dtbl.Columns.Add("Tax", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Discount", System.Type.GetType("System.String"));
            dtbl.Columns.Add("TotalSale", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DiscountReason", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Coupon", System.Type.GetType("System.String"));
            dtbl.Columns.Add("RentDeposit", System.Type.GetType("System.String"));
            dtbl.Columns.Add("RentReturnDeposit", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RentReturnFlag", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairDeliveryDate", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairNotifiedDate", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairProblem", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairNotes", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairRemarks", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairAdvanceAmount", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairAmount", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairDueAmount", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairStatus", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RentParentID", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairParentID", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("IsRentCalculated", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Fees", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesTax", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesCoupon", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesCouponTax", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DTaxName", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DTax", System.Type.GetType("System.String"));

            //dtbl.Columns.Add("RepairItemName", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairItemSlNo", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairDateIn", System.Type.GetType("System.String"));

            //dtbl.Columns.Add("CustomerOrderRef", System.Type.GetType("System.String"));

            //dtbl.Columns.Add("CustomerDOB", System.Type.GetType("System.String"));




            PosDataObject.POS objpos = new PosDataObject.POS();
            objpos.Connection = SystemVariables.Conn;
            DataTable dtblC = objpos.FetchCustomerInfoForPreviewInvoice(intCustID, Settings.StoreCode);

            string cval_1 = "0";
            string cval_2 = "";
            string cval_3 = "";
            string cval_4 = "";
            string cval_5 = "";
            string cval_6 = "";
            string cval_7 = "";
            string cval_8 = "";


            foreach (DataRow dr in dtblC.Rows)
            {
                cval_1 = dr["CID"].ToString();
                cval_2 = dr["CustID"].ToString();
                cval_3 = dr["CustName"].ToString();
                cval_4 = dr["CustCompany"].ToString();
                cval_5 = dr["CustDetails"].ToString();
                cval_6 = dr["CustStore"].ToString();
                cval_7 = dr["CustMobile"].ToString();
                cval_8 = dr["CustomerShortAddress"].ToString();
            }

            dtbl.Rows.Add(new object[] {
                "1",
                SystemVariables.CurrentUserID.ToString(),
                Settings.TerminalName,
                intMaxInvNo.ToString(),
                strServiceType,
                cval_1,cval_2,cval_3,cval_4,cval_5,cval_6,cval_7,cval_8,
                numTax.Text,
                numDiscount.Text,
                numTotalsale.Text,
                "",
                numCoupon.Text,
                0,
                0,
                numFee.Text,
                numFeeTax.Text,
                0,0,"",0
            });

            dtblC.Dispose();

            return dtbl;
        }


        private DataTable GetPreviewInvoiceDetails()
        {
            DataTable dtbl = new DataTable();

            dtbl.Columns.Add("ProductType", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Description", System.Type.GetType("System.String"));
            dtbl.Columns.Add("SKU", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Price", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Qty", System.Type.GetType("System.String"));
            dtbl.Columns.Add("TotalPrice", System.Type.GetType("System.String"));
            dtbl.Columns.Add("MOP1", System.Type.GetType("System.String"));
            dtbl.Columns.Add("MOP2", System.Type.GetType("System.String"));
            dtbl.Columns.Add("MOP3", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DP", System.Type.GetType("System.String"));
            dtbl.Columns.Add("NormalPrice", System.Type.GetType("System.String"));
            dtbl.Columns.Add("UOMPrice", System.Type.GetType("System.String"));
            dtbl.Columns.Add("UOMCount", System.Type.GetType("System.String"));
            dtbl.Columns.Add("UOMDesc", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Notes", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaggedInInvoice", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Discount", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DiscountText", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DiscountID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DiscLogic", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DiscValue", System.Type.GetType("System.String"));
            dtbl.Columns.Add("ItemIndex", System.Type.GetType("System.String"));

            dtbl.Columns.Add("ServiceType", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RentType", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RentEffectFrom", System.Type.GetType("System.String"));
            dtbl.Columns.Add("RentDuration", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RentReturnFlag", System.Type.GetType("System.String"));

            dtbl.Columns.Add("RepairItemTag", System.Type.GetType("System.String"));
            dtbl.Columns.Add("RepairItemSLNO", System.Type.GetType("System.String"));
            dtbl.Columns.Add("RepairItemPurchaseDate", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("RepairItemDeliveryDate", System.Type.GetType("System.String"));

            //dtbl.Columns.Add("Taxable1", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("Taxable2", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("Taxable3", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxRate1", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxRate2", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxRate3", System.Type.GetType("System.String"));

            //dtbl.Columns.Add("TaxType1", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxType2", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxType3", System.Type.GetType("System.String"));

            //dtbl.Columns.Add("TaxTotal1", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxTotal2", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("TaxTotal3", System.Type.GetType("System.String"));

            dtbl.Columns.Add("FeesID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesText", System.Type.GetType("System.String"));
            dtbl.Columns.Add("Fees", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesTax", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesValue", System.Type.GetType("System.String"));
            dtbl.Columns.Add("FeesQty", System.Type.GetType("System.String"));

            dtbl.Columns.Add("SalePriceID", System.Type.GetType("System.String"));

            dtbl.Columns.Add("DTaxID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("DTax", System.Type.GetType("System.String"));
            dtbl.Columns.Add("EditFlag", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("QtyDecimal", System.Type.GetType("System.String"));
            //dtbl.Columns.Add("PromptPrice", System.Type.GetType("System.String"));

            dtbl.Columns.Add("BuyNGetFreeHeaderID", System.Type.GetType("System.String"));
            dtbl.Columns.Add("BuyNGetFreeCategory", System.Type.GetType("System.String"));
            dtbl.Columns.Add("BuyNGetFreeName", System.Type.GetType("System.String"));

            dtbl.Columns.Add("GRate", System.Type.GetType("System.String"));
            dtbl.Columns.Add("GPrice", System.Type.GetType("System.String"));



            foreach (DataRow dr in dtblPOSDatatbl.Rows)
            {
                double TP = 0;
                string sM1 = "";
                string sM2 = "";
                string sM3 = "";
                double renttime = 0;
                string sSKU = "";
                if ((dr["PRODUCTTYPE"].ToString() == "C") || (dr["PRODUCTTYPE"].ToString() == "Z") || (dr["PRODUCTTYPE"].ToString() == "H")) continue;

                PosDataObject.Product objP = new PosDataObject.Product();
                objP.Connection = SystemVariables.Conn;
                sSKU = objP.GetSKUFromID(GeneralFunctions.fnInt32(dr["ID"].ToString()));

                if (dr["PRODUCTTYPE"].ToString() == "B")
                {
                    sSKU = "Blank";
                }

                if (dr["PRODUCTTYPE"].ToString() == "A")
                {
                    sSKU = "AR";
                }

                if (dr["PRODUCTTYPE"].ToString() == "G")
                {
                    sSKU = "GC";
                }

                if (dr["PRODUCTTYPE"].ToString() == "M")
                {
                    DataTable dtblMx = new DataTable();
                    dtblMx = objP.FetchMatrixOptionForInvoice(GeneralFunctions.fnInt32(dr["MATRIXOID"].ToString()));
                    string MO1 = "";
                    string MO2 = "";
                    string MO3 = "";
                    foreach (DataRow drM in dtblMx.Rows)
                    {
                        MO1 = drM["Option1Name"].ToString();
                        MO2 = drM["Option2Name"].ToString();
                        MO3 = drM["Option3Name"].ToString();
                    }
                    dtblMx.Dispose();
                    if ((MO1 != "") || (dr["MATRIXOV1"].ToString() != ""))
                        sM1 = MO1 + ": " + dr["MATRIXOV1"].ToString();
                    if ((MO2 != "") || (dr["MATRIXOV2"].ToString() != ""))
                        sM2 = MO2 + ": " + dr["MATRIXOV2"].ToString();
                    if ((MO3 != "") || (dr["MATRIXOV3"].ToString() != ""))
                        sM3 = MO3 + ": " + dr["MATRIXOV3"].ToString();
                }
                if (dr["SERVICE"].ToString() == "Rent")
                    renttime = GeneralFunctions.fnDouble(dr["RENTDURATION"].ToString());
                else
                    renttime = 1;

                TP = 0;
                TP = GeneralFunctions.fnDouble(dr["QTY"].ToString()) * GeneralFunctions.fnDouble(Settings.TaxInclusive == "N" ? dr["RATE"].ToString() : dr["GRATE"].ToString()) * renttime - (Settings.TaxInclusive == "N" ? GeneralFunctions.fnDouble(dr["DISCOUNT"].ToString()) : 0);
                dtbl.Rows.Add(new object[] {
                                                    dr["PRODUCTTYPE"].ToString(),
                                                    dr["PRODUCT"].ToString(),
                                                    sSKU,
                                                    Settings.TaxInclusive == "N" ? dr["RATE"].ToString() : dr["GRATE"].ToString(),
                                                    dr["Qty"].ToString(),
                                                    TP.ToString(),sM1,sM2,sM3,dr["DP"].ToString(),
                                                    dr["NRATE"].ToString(),
                                                    dr["UOMPRICE"].ToString(),
                                                    dr["UOMCOUNT"].ToString(),
                                                    dr["UOMDESC"].ToString(),
                                                    dr["NOTES"].ToString(),
                                                    //
                                                    dr["DISCOUNT"].ToString(),
                                                    dr["DISCOUNTTEXT"].ToString(),
                                                    dr["DISCOUNTID"].ToString(),
                                                    dr["DISCLOGIC"].ToString(),
                                                    dr["DISCVALUE"].ToString(),
                                                    dr["ITEMINDEX"].ToString(),
                                                    dr["SERVICE"].ToString(),
                                                    //dr["RentApplicable"].ToString(),
                                                    //dr["RentEffectiveFrom"].ToString(),
                                                    dr["RENTDURATION"].ToString(),
                                                    //dr["RentReturnFlag"].ToString(),
                                                    dr["REPAIRITEMTAG"].ToString(),
                                                    dr["REPAIRITEMSLNO"].ToString(),
                                                    dr["REPAIRITEMPURCHASEDATE"].ToString(),
                                                    //dr["RepairItemDeliveryDate"].ToString(),
                                                    //dr["Taxable1"].ToString(),
                                                    //dr["Taxable2"].ToString(),
                                                    //dr["Taxable3"].ToString(),
                                                    //dr["TaxRate1"].ToString(),
                                                    //dr["TaxRate2"].ToString(),
                                                    //dr["TaxRate3"].ToString(),
                                                    //dr["TaxType1"].ToString(),
                                                    //dr["TaxType2"].ToString(),
                                                    //dr["TaxType3"].ToString(),
                                                    //dr["TaxTotal1"].ToString(),
                                                    //dr["TaxTotal2"].ToString(),
                                                    //dr["TaxTotal3"].ToString(),
                                                    dr["FeesID"].ToString(),
                                                    dr["FeesText"].ToString(),
                                                    dr["Fees"].ToString(),
                                                    dr["FeesTax"].ToString(),
                                                    dr["FeesValue"].ToString(),
                                                    dr["FeesQty"].ToString(),
                                                    dr["SalePriceID"].ToString(),
                                                    dr["DTXID"].ToString(),
                                                    dr["DTX"].ToString(),
                                                    dr["EDITF"].ToString(),
                                                    //dr["QtyDecimal"].ToString(),
                                                    //dr["PromptPrice"].ToString(),
                                                    dr["BuyNGetFreeHeaderID"].ToString(),
                                                    dr["BuyNGetFreeCategory"].ToString(),
                                                    dr["BuyNGetFreeName"].ToString(),
                                                    dr["GRATE"].ToString(),
                                                    dr["GPRICE"].ToString()
                                                     });


            }


            return dtbl;
        }

        #endregion

        private void btnPreview_Click(object sender, RoutedEventArgs e)
        {
            DataTable dtblInvoiceHeader = GetPreviewInvoiceHeader();
            DataTable dtblInvoiceDetails = GetPreviewInvoiceDetails();
            DataTable dtblTaxDetails = grdTax.ItemsSource as DataTable;

            if (Settings.GeneralReceiptPrint == "N")  // Receipt Printer
            {
                blurGrid.Visibility = Visibility.Visible;
                frmPOSInvoicePrintDlg frm_POSInvoicePrintDlg = new frmPOSInvoicePrintDlg();
                try
                {
                    frm_POSInvoicePrintDlg.PrintType = "Preview Invoice";
                    if (blRentIssued) frm_POSInvoicePrintDlg.PrintType = "Preview Rent Issue";
                    if (blRentRecall) frm_POSInvoicePrintDlg.PrintType = "Preview Return Rent Item";
                    if (blRepairIssued)
                    {
                        if (!blRepairDeposit) frm_POSInvoicePrintDlg.PrintType = "Preview Repair Deliver";
                        else frm_POSInvoicePrintDlg.PrintType = "Preview Repair In";
                    }
                    if (blRepairRecall) frm_POSInvoicePrintDlg.PrintType = "Preview Repair Deliver";
                    frm_POSInvoicePrintDlg.InvNo = intINV;
                    frm_POSInvoicePrintDlg.IsRentIssued = blRentIssued;
                    frm_POSInvoicePrintDlg.IsRentReturned = blRentRecall;

                    frm_POSInvoicePrintDlg.PreviewInvoiceHeader = dtblInvoiceHeader;
                    frm_POSInvoicePrintDlg.PreviewInvoiceDetails = dtblInvoiceDetails;
                    frm_POSInvoicePrintDlg.PreviewTaxDetails = dtblTaxDetails;

                    frm_POSInvoicePrintDlg.CashdrawerOpenFlag = false;
                    frm_POSInvoicePrintDlg.ShowDialog();
                }
                finally
                {
                    blurGrid.Visibility = Visibility.Collapsed;
                }
            }
        }

        private void numAmount_GotKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)
        {
            //numAmount.SelectionLength = 0;
            //numAmount.Text = GeneralFunctions.FormatDouble(dblBalance).ToString();
        }

        private void btn5_Click(object sender, RoutedEventArgs e)
        {
            double val = GeneralFunctions.fnDouble((sender as  System.Windows.Controls.Button).Tag);

            bool blfinddata = false;

            foreach (DataRow dr1 in dtblTender.Rows)
            {
                if (dr1["ID"].ToString() == CashTID.ToString())
                {
                    double dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr1["AMOUNT"].ToString()));
                    dr1["AMOUNT"] = (dblPrice + val).ToString();
                    blfinddata = true;
                    break;
                }
            }

            if (!blfinddata)
            {
                dtblTender.Rows.Add(new object[] { CashTID.ToString(), CashTName, CashTDisplay,
                                                   GeneralFunctions.FormatDouble(val).ToString(), "", "", "", "0", "", "" , "N","N","0"});

            }

            grdTender.ItemsSource = dtblTender;

            gridView2.FocusedRowHandle = dtblTender.Rows.Count - 1;

           
            ArrangeSettings();


            numAmount.Text = GeneralFunctions.FormatDouble1(dblBalance);
            GeneralFunctions.SetFocus(numAmount);
            numAmount.SelectionLength = 0;

            if (btnOK.IsEnabled)
            {
                try
                {
                    (sender as System.Windows.Controls.Button).IsEnabled = false;
                    btnOK_Click(sender, e);
                }
                finally
                {
                    (sender as System.Windows.Controls.Button).IsEnabled = true;
                }
            }
        }

        private async void gridView1_FocusedRowChanged(object sender, DevExpress.Xpf.Grid.FocusedRowChangedEventArgs e)
        {
            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Gift Certificate")
            {
                //numAmount.Text = 0;
                //pnlGiftCert.Visibility = Visibility.Visible;
                blGiftTender = true;
                blStoreCredit = false;
            }
            else if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Store Credit")
            {
                //numAmount.Text = 0;
                //pnlGiftCert.Visibility=Visibility.Collapsed;
                blGiftTender = false;
                blStoreCredit = true;
            }
            else
            {
                //pnlGiftCert.Visibility=Visibility.Collapsed;
                blGiftTender = false;
                blStoreCredit = false;
            }
        }
            
 

        private void TenterType_Click(object sender, RoutedEventArgs e)
        {
            blGiftTender = false;
            int iTenderID = 0;
            string sTenderName = "";
            iTenderID = GeneralFunctions.fnInt32((sender as System.Windows.Controls.Button).Tag.ToString().Substring(0, (sender as System.Windows.Controls.Button).Tag.ToString().IndexOf("|")));
            sTenderName = (sender as System.Windows.Controls.Button).Tag.ToString().Substring((sender as System.Windows.Controls.Button).Tag.ToString().IndexOf("|") + 1);
            string sDisplay = ((sender as System.Windows.Controls.Button).Content as TextBlock).Text.ToString();

            string storedval = numAmount.Text;

            if (sTenderName == "Check")
            {
                if (Settings.POSAcceptCheck == "Y")
                {
                    int checkid = 0;
                    PosDataObject.TenderTypes otndt = new PosDataObject.TenderTypes();
                    otndt.Connection = SystemVariables.Conn;
                    checkid = otndt.FetchCheckID();
                    double prevchkamt = 0;
                    DataTable dtemp = grdTender.ItemsSource as DataTable;
                    foreach (DataRow dr in dtemp.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["ID"].ToString()) == checkid)
                        {
                            prevchkamt = prevchkamt + GeneralFunctions.fnDouble(dr["AMOUNT"].ToString());
                        }
                    }
                    dtemp.Dispose();

                    if (prevchkamt + GeneralFunctions.fnDouble(numAmount.Text) > GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)))
                    {
                        DocMessage.MsgInformation("Maximum Tender allowed with Check is" + " " + numTotalsale.Text);
                        return;
                    }
                }
            }

            if (Settings.EasyTendering == "Y")
            {
                if (GeneralFunctions.fnDouble(numAmount.Text) >= 100)
                {
                    if ((GeneralFunctions.fnDouble(numAmount.Text) - Math.Truncate(GeneralFunctions.fnDouble(numAmount.Text))) == 0)
                    {
                        if (GeneralFunctions.fnDouble(numAmount.Text) >= dblBalance)
                        {
                            string tempval = numAmount.Text.Trim().Remove(numAmount.Text.Trim().Length - 3);
                            numAmount.Text = GeneralFunctions.FormatDouble1(GeneralFunctions.fnDouble(tempval.Insert(tempval.Length - 2, ".")));
                        }
                    }
                }
            }

            /*
            pnlGiftCert.Visible = false;
            pnlGiftCert.SendToBack();
            gridView1.OptionsSelection.EnableAppearanceFocusedCell = true;
            gridView1.OptionsSelection.EnableAppearanceFocusedRow = true;
            gridView1.OptionsSelection.EnableAppearanceHideSelection = true;
            */

            if ((sTenderName == "Gift Certificate")
                    || (sTenderName == "Store Credit")
                    || (sTenderName == "House Account"))
            {
                if (!CheckFunctionButton("31p")) return;
            }

            if (sTenderName == "Gift Certificate")
            {
                if ((blPaidout) || (blPaidin) || (blSafedrop)) return;
                if (!CheckFunctionButton("31p")) return;
                GCNO = "";
                blurGrid.Visibility = Visibility.Visible;
                frm_POSGCDlg frm_POSGCDlg = new frm_POSGCDlg();
                try
                {
                    frm_POSGCDlg.CustomerID = intCustID;
                    frm_POSGCDlg.ShowDialog();
                    if (frm_POSGCDlg.DialogResult == true)
                    {
                        GCNO = frm_POSGCDlg.GiftCertNo;
                        GCSTORE = frm_POSGCDlg.StoreCode;
                    }
                }
                finally
                {
                    frm_POSGCDlg.Close();
                    blurGrid.Visibility = Visibility.Collapsed;
                }

                if (GCNO == "") return;
                if (IfExistGC(GCNO, GCSTORE) == 0)
                {
                    bool blProceedGC = true;
                    bool blfind = false;
                    foreach (DataRow dr in dtblPOSDatatbl.Rows)
                    {
                        
                        if (Settings.CentralExportImport == "N")
                        {
                            if (dr["PRODUCTTYPE"].ToString() == "G" && (dr["ID"].ToString() == GCNO.ToString()))
                            {
                                blfind = true;
                                break;
                            }
                        }

                        if (Settings.CentralExportImport == "Y")
                        {
                            if (dr["PRODUCTTYPE"].ToString() == "G" && (dr["ID"].ToString() == GCNO.ToString()) && (GCSTORE == GCOPSTORE))
                            {
                                blfind = true;
                                break;
                            }
                        }
                    }
                    if (blfind)
                    {
                        DocMessage.MsgInformation("This Gift Certificate # already exists in this transaction");
                        blGiftNew = false;
                        return;
                    }
                    if (Settings.CentralExportImport == "Y")
                    {
                        if (GCOPSTORE != GCSTORE)
                        {
                            DocMessage.MsgInformation("Invalid Gift Certificate");
                            return;
                        }
                    }

                    DocMessage.MsgInformation("Gift Cert# : " + GCNO.ToString() + " " + "does not exists");
                    blGiftNew = false;
                    return;
                    /*
                    if (DocMessage.MsgConfirmation("Gift Cert. # : " + GCNO.ToString() + " " + "not stored." + "Is it a older untracked certificate?") == MessageBoxResult.Yes)
                    {
                        blGiftNew = true;
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSGCAmtDlg frm_POSGCAmtDlg = new frm_POSGCAmtDlg();
                        try
                        {
                            frm_POSGCAmtDlg.GiftCertNo = GCNO;
                            frm_POSGCAmtDlg.GiftCertAmt = GeneralFunctions.fnDouble(numAmount.Text);
                            frm_POSGCAmtDlg.ShowDialog();
                            if (frm_POSGCAmtDlg.DialogResult == true)
                            {
                                dblGiftOldAmt = frm_POSGCAmtDlg.GiftCertAmt;
                                blGiftOld = true;
                                if (dblGiftOldAmt == GeneralFunctions.fnDouble(numAmount.Text))
                                {
                                    numAmount.Text = dblGiftOldAmt.ToString("f2");
                                }
                                else if (dblGiftOldAmt < GeneralFunctions.fnDouble(numAmount.Text))
                                {
                                    numAmount.Text = dblGiftOldAmt.ToString("f2");
                                }
                                else
                                {
                                    numAmount.Text = numAmount.Text;
                                }

                                pnlGiftCert.Visibility = Visibility.Visible;

                                if (Settings.CentralExportImport == "N") lbGC.Text = GCNO.ToString();
                                if (Settings.CentralExportImport == "Y")
                                {
                                    if (GCSTORE == Settings.StoreCode) lbGC.Text = GCNO.ToString();
                                    if (GCSTORE != Settings.StoreCode) lbGC.Text = GCNO.ToString() + "  (store: " + GCSTORE + ")";
                                }
                                double gcbal = dblGiftOldAmt - GeneralFunctions.fnDouble(numAmount.Text);
                                if (Settings.DecimalPlace == 3) lbGCAmt.Text = gcbal.ToString("#0.000");
                                if (Settings.DecimalPlace == 2) lbGCAmt.Text = gcbal.ToString("#0.00");


                            }
                            else
                            {
                                blGiftNew = false;
                                blGiftOld = false;
                                return;
                            }
                        }
                        finally
                        {
                            frm_POSGCAmtDlg.Close();
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                    }
                    else
                    {
                        blGiftNew = false;
                        return;
                    }
                    */
                }
                else
                {
                    if (IfNotRedeemedGC(GCNO, GCSTORE) == 0)
                    {
                        blGiftNew = false;
                        DocMessage.MsgInformation("This Certificate has redeemed previosly");
                        return;
                    }
                    else
                    {
                        blGiftNew = false;
                        double dblGCAmount = FetchGCAmount(GCNO, GCSTORE);
                        if (dblGCAmount == GeneralFunctions.fnDouble(numAmount.Text))
                        {
                            numAmount.Text = dblGCAmount.ToString("f2");
                        }
                        else if (dblGCAmount < GeneralFunctions.fnDouble(numAmount.Text))
                        {
                            numAmount.Text = dblGCAmount.ToString("f2");
                        }
                        else
                        {
                            numAmount.Text = numAmount.Text;
                        }
                        pnlGiftCert.Visibility = Visibility.Visible;

                        if (Settings.CentralExportImport == "N") lbGC.Text = GCNO.ToString();
                        if (Settings.CentralExportImport == "Y")
                        {
                            if (GCSTORE == Settings.StoreCode) lbGC.Text = GCNO.ToString();
                            if (GCSTORE != Settings.StoreCode) lbGC.Text = GCNO.ToString() + "  (store: " + GCSTORE + ")";
                        }
                        double gcbal = dblGCAmount - GeneralFunctions.fnDouble(numAmount.Text);
                        if (Settings.DecimalPlace == 3) lbGCAmt.Text = gcbal.ToString("#0.000");
                        if (Settings.DecimalPlace == 2) lbGCAmt.Text = gcbal.ToString("#0.00");

                        blGiftTender = true;
                    }
                }


                /*if (blGiftNew)
                {
                    numAmount.Properties.ReadOnly = false;
                }
                else
                {
                    numAmount.Properties.ReadOnly = true;
                }*/
            }

            if (sTenderName == "Store Credit")
            {
                if (intCustID == 0) return;
                if (!CheckAndSetStoreCreditAmount()) return;
            }

            if ((sTenderName == "Food Stamps")
                || (sTenderName == "EBT Voucher")
                || (sTenderName == "EBT Cash"))
            {
                //numAmount.Properties.ReadOnly = true;
                if ((!blNewLayaway) && (!blLayaway) && (!blLayawayRefund) && (!blReturnItem) && (!blRentRecall) && (dblTotalsale >= 0))
                {

                    double dblFTx = 0;
                    double dblFV = GetFoodStampAmount(ref dblFTx);
                    double dblPreviousFSTender = PreviousFSTender();
                    dblFV = dblFV - dblPreviousFSTender;
                    if (dblFV <= 0)
                    {
                        numAmount.IsEnabled = true;
                        return;
                    }
                    else
                    {
                        if (GeneralFunctions.fnDouble(numAmount.Text) != dblFV) numAmount.Text = numAmount.Text;// -GeneralFunctions.FormatDouble(dblFTx);
                        if (GeneralFunctions.fnDouble(numAmount.Text) > dblFV)
                        {
                            numAmount.Text = GeneralFunctions.FormatDouble1(dblFV);
                        }
                    }
                }
                else
                {
                    if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                    {
                        if (!CheckEBTPayment)
                        {
                            DocMessage.MsgInformation("No Food Stamps Payment for the item(s) found");
                            return;
                        }
                    }
                    else numAmount.Text = "0.00";
                }
            }
            else
            {
                if ((!blReturnItem) && (!blRepairRecall) && ((!blRentRecall) || (blRentRecall && (sRentCalcFlag == "Y"))) && (!blLayawayRefund) && (dblTotalsale >= 0)) numAmount.IsEnabled = true;
                //else numAmount.Properties.ReadOnly = true;
            }

            if (GeneralFunctions.fnDouble(numAmount.Text) == 0) return;

            int intRowID = 0;

            if (sTenderName == "House Account")
            {
                if (intCustID == 0) return;
                if (!blLayaway)
                {
                    if (!CheckAndSetHouseAccountAmount()) return;
                }
                else
                {
                    if (!CheckAndSetHouseAccountAmountForLayaway()) return;
                }
            }

            if ((sTenderName == "Visa") ||
                    (sTenderName == "MasterCard") ||
                    (sTenderName == "American Express") ||
                    (sTenderName == "Discover") ||
                    (sTenderName == "Diner") ||
                    (sTenderName == "Debit Card") ||
                    (sTenderName == "Credit Card") ||
                    (sTenderName == "Credit Card - Voice Auth") ||
                    (sTenderName == "Credit Card (STAND-IN)")
                || (sTenderName == "Credit Card - Voice Auth (STAND-IN)"))
            {
                if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                {
                    if (!((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N"))))
                    {
                        if ((SystemVariables.CurrentUserID > 0) && (!SecurityPermission.AcssNegativeCardTransaction))
                        {
                            DocMessage.MsgInformation("Negative Tendering not allowed");
                            return;
                        }
                    }
                    else
                    {
                        if ((!CheckCardPayment) && (Settings.POSCardPayment == "Y"))
                        {
                            DocMessage.MsgInformation("No Card Payment for the item(s) found");
                            return;
                        }
                    }
                }
            }

            if (sTenderName == "Mercury Gift Card")
            {
                //if (CheckIfCardTenderingExists()) return;

                if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                {
                    if (!CheckCardPayment)
                    {
                        DocMessage.MsgInformation("No Mercury Gift Card Payment for the item(s) found");
                        return;
                    }
                }
            }

            if (sTenderName == "Precidia Gift Card")
            {
                //if (CheckIfCardTenderingExists()) return;

                if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                {
                    if (!CheckCardPayment)
                    {
                        DocMessage.MsgInformation("No Precidia Gift Card Payment for the item(s) found");
                        return;
                    }
                }
            }

            if (sTenderName == "Datacap Gift Card")
            {
                //if (CheckIfCardTenderingExists()) return;

                if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                {
                    if (!CheckCardPayment)
                    {
                        DocMessage.MsgInformation("No Datacap Gift Card Payment for the item(s) found");
                        return;
                    }
                }
            }

            if (sTenderName == "POSLink Gift Card")
            {
                //if (CheckIfCardTenderingExists()) return;
                //Block
                /*
                if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                {
                    if (!CheckCardPayment)
                    {
                        MyMessageBox.ShowBox(Translation.SetMultilingualTextInCodes("No POSLink Gift Card Payment for the item(s) found", "frmPOSTenderDlg_msg_NoPOSLinkGiftCardPaymentforthe"), Translation.SetMultilingualTextInCodes("POSLink Gift Card Tender Validation", "frmPOSTenderDlg_msg_POSLinkGiftCardTenderValidatio"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }*/
            }

            bool blfinddata = false;
            string strselectid = iTenderID.ToString();
            int intfocusrow = 0;

            double dblPrice = 0;
            foreach (DataRow dr in dtblTender.Rows)
            {
                if (!blGiftTender)
                {
                    if ((dr["TENDER"].ToString() == "Visa") ||
                    (dr["TENDER"].ToString() == "MasterCard") ||
                    (dr["TENDER"].ToString() == "American Express") ||
                    (dr["TENDER"].ToString() == "Discover") ||
                    (dr["TENDER"].ToString() == "Diner") ||
                    (dr["TENDER"].ToString() == "Debit Card") ||
                    (dr["TENDER"].ToString() == "Credit Card") ||
                    (dr["TENDER"].ToString() == "Credit Card - Voice Auth") ||
                    (dr["TENDER"].ToString() == "Credit Card (STAND-IN)") ||
                    (dr["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)") ||
                    (dr["TENDER"].ToString() == "Mercury Gift Card")
                    || (dr["TENDER"].ToString() == "Precidia Gift Card")
                    || (dr["TENDER"].ToString() == "Datacap Gift Card")
                    || (dr["TENDER"].ToString() == "POSLink Gift Card"))
                    {
                        continue;
                    }
                    else
                    {
                        if (dr["ID"].ToString() == strselectid)
                        {
                            dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()));
                            dr["AMOUNT"] = (dblPrice + GeneralFunctions.fnDouble(numAmount.Text)).ToString();
                            blfinddata = true;
                            break;
                        }
                    }
                }
                else
                {
                    if ((dr["GIFTCERTIFICATE"].ToString() == GCNO.ToString()) && (dr["GCSTORE"].ToString() == GCSTORE))
                    {
                        dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()));
                        dr["AMOUNT"] = (dblPrice + GeneralFunctions.fnDouble(numAmount.Text)).ToString();
                        blfinddata = true;
                        break;
                    }
                }
                intfocusrow++;
            }

            if (!blfinddata)
            {
                if (blGiftTender)
                {
                    string strGCFlag = "N";
                    if (blGiftNew) strGCFlag = "Y";
                    string strGCOld = "N";
                    string oldbal = "0";
                    if (blGiftOld)
                    {
                        strGCOld = "Y";
                        oldbal = GeneralFunctions.FormatDouble(dblGiftOldAmt).ToString();
                    }
                    dtblTender.Rows.Add(new object[] {  iTenderID.ToString(),
                                                        sTenderName,
                                                        sDisplay,
                                                        GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(numAmount.Text)).ToString(),
                                                        GCNO.ToString(),strGCFlag,strGCOld,oldbal,"",GCSTORE,"N","N","0" });

                    string line1 = "";
                    string line2 = "";
                    RearrangeDTxt(GeneralFunctions.fnDouble(numAmount.Text), sDisplay, ref line1, ref line2);
                    //Block frm_POS.DisplayPoleText(2, "N", "N", line1, line2);
                }
                else
                {
                    if ((blReturnItem) || (blLayawayRefund) || (blRentRecall && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                    {
                        if ((GeneralFunctions.fnDouble(numAmount.Text) >= 0) && (!blBottleRefund)) return;
                    }

                    string manl = "N";

                    if ((Settings.POSCardPayment == "Y") && ((Settings.PaymentGateway == 3) || (Settings.PaymentGateway == 5) || (Settings.PaymentGateway == 6) || (Settings.PaymentGateway == 7)))
                    {
                        if (((sTenderName == "Visa") ||
                            (sTenderName == "MasterCard") ||
                            (sTenderName == "American Express") ||
                            (sTenderName == "Discover") ||
                            (sTenderName == "Diner") ||
                            //(GeneralFunctions.GetCellValue(gridView1.FocusedRowHandle, gridView1, colTender) == "Debit Card")||
                            (sTenderName == "Credit Card") ||
                            (sTenderName == "Credit Card - Voice Auth") ||
                            (sTenderName == "Credit Card (STAND-IN)")
                            || (sTenderName == "Credit Card - Voice Auth (STAND-IN)")
                            || (sTenderName == "Food Stamps")
                            || (sTenderName == "EBT Cash")
                            || (sTenderName == "EBT Voucher")) && (blPressManual))
                        {
                            manl = "Y";
                            //Block
                            /*
                            btnPrecidiaManual.Appearance.ForeColor = Color.Black;
                            btnPrecidiaManual.LookAndFeel.UseDefaultLookAndFeel = true;
                            btnPrecidiaManual.LookAndFeel.Style = DevExpress.LookAndFeel.LookAndFeelStyle.Skin;*/
                            blPressManual = false;
                        }
                    }

                    dtblTender.Rows.Add(new object[] {  iTenderID.ToString(),
                                                        sTenderName,
                                                        sDisplay,
                                                        numAmount.Text,"","","","0","","",
                                                        manl,"N","0" });
                    string line1 = "";
                    string line2 = "";
                    RearrangeDTxt(GeneralFunctions.fnDouble(numAmount.Text), sDisplay, ref line1, ref line2);
                    //Block frm_POS.DisplayPoleText(2, "N", "N", line1, line2);
                }
                grdTender.ItemsSource = dtblTender;
                gridView2.FocusedRowHandle = dtblTender.Rows.Count - 1;
            }
            else
            {
                grdTender.ItemsSource = dtblTender;
                gridView2.FocusedRowHandle = intfocusrow;
            }

            ArrangeSettings();

            numAmount.Text = "0.00";

            // enter
            numAmount.Text = GeneralFunctions.FormatDouble1(GeneralFunctions.FormatDouble(dblBalance));
            GeneralFunctions.SetFocus(numAmount);
            numAmount.SelectionLength = 0;
        }

        private async Task TenderType()
        {
            string storedval = numAmount.Text;

            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Check")
            {
                if (Settings.POSAcceptCheck == "Y")
                {
                    int checkid = 0;
                    PosDataObject.TenderTypes otndt = new PosDataObject.TenderTypes();
                    otndt.Connection = SystemVariables.Conn;
                    checkid = otndt.FetchCheckID();
                    double prevchkamt = 0;
                    DataTable dtemp = grdTender.ItemsSource as DataTable;
                    foreach (DataRow dr in dtemp.Rows)
                    {
                        if (GeneralFunctions.fnInt32(dr["ID"].ToString()) == checkid)
                        {
                            prevchkamt = prevchkamt + GeneralFunctions.fnDouble(dr["AMOUNT"].ToString());
                        }
                    }
                    dtemp.Dispose();

                    if (prevchkamt + double.Parse(numAmount.Text) > GeneralFunctions.fnDouble(numTotalsale.Text.Substring(numTotalsale.Text.IndexOf(" ") + 1)))
                    {
                        new MessageBoxWindow().Show(Properties.Resources.Maximum_Tender_allowed_with_Check_is + " " + numTotalsale.Text.ToString(), Properties.Resources.Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }
            }

            if (Settings.EasyTendering == "Y")
            {
                if (double.Parse(numAmount.Text) >= 100)
                {
                    if ((double.Parse(numAmount.Text) - Math.Truncate(double.Parse(numAmount.Text))) == 0)
                    {
                        if (double.Parse(numAmount.Text) >= dblBalance)
                        {
                            string tempval = numAmount.Text.Trim().Remove(numAmount.Text.Trim().Length - 3);
                            numAmount.Text = GeneralFunctions.fnDouble(tempval.Insert(tempval.Length - 2, ".")).ToString();
                        }
                    }
                }
            }

            pnlGiftCert.Visibility = Visibility.Collapsed;
            //pnlGiftCert.SendToBack();--Sam
            //Todo: gridView1.OptionsSelection.EnableAppearanceFocusedCell = true;
            //gridView1.OptionsSelection.EnableAppearanceFocusedRow = true;
            //gridView1.OptionsSelection.EnableAppearanceHideSelection = true;

            if ((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Gift Certificate")
                    || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Store Credit")
                    || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "House Account"))
            {
                if (!CheckFunctionButton("31p")) return;
            }

            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Gift Certificate")
            {
                if (!CheckFunctionButton("31p")) return;
                GCNO = "";
                blurGrid.Visibility = Visibility.Visible;
                frm_POSGCDlg frm_POSGCDlg = new frm_POSGCDlg();
                try
                {
                    frm_POSGCDlg.CustomerID = intCustID;
                    frm_POSGCDlg.ShowDialog();
                    if (frm_POSGCDlg.DialogResult == true)
                    {
                        GCNO = frm_POSGCDlg.GiftCertNo;
                        GCSTORE = frm_POSGCDlg.StoreCode;
                    }
                }
                finally
                {
                    blurGrid.Visibility = Visibility.Collapsed;
                }

                if (GCNO == "") return;
                if (IfExistGC(GCNO, GCSTORE) == 0)
                {
                    bool blfind = false;
                    foreach (DataRow dr in dtblPOSDatatbl.Rows)
                    {
                        if (Settings.CentralExportImport == "N")
                        {
                            if (dr["PRODUCTTYPE"].ToString() == "G" && (dr["ID"].ToString() == GCNO.ToString()))
                            {
                                blfind = true;
                                break;
                            }
                        }

                        if (Settings.CentralExportImport == "Y")
                        {
                            if (dr["PRODUCTTYPE"].ToString() == "G" && (dr["ID"].ToString() == GCNO.ToString()) && (GCSTORE == GCOPSTORE))
                            {
                                blfind = true;
                                break;
                            }
                        }
                    }
                    if (blfind)
                    {
                        new MessageBoxWindow().Show(Properties.Resources.This_Gift_Certificate___already_exists_in_this_transaction, Properties.Resources.Gift_Certificate_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        blGiftNew = false;
                        return;
                    }
                    if (Settings.CentralExportImport == "Y")
                    {
                        if (GCOPSTORE != GCSTORE)
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Invalid_Gift_Certificate, Properties.Resources.Gift_Certificate_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                    if (new MessageBoxWindow().Show(Properties.Resources.Gift_Cert_____ + GCNO.ToString() + " " + Properties.Resources.not_stored_ + "\n" + Properties.Resources.Is_it_a_older_untracked_certificate_, Properties.Resources.Gift_Certificate_Validation, MessageBoxButton.YesNo, MessageBoxImage.Information) == MessageBoxResult.Yes)
                    {
                        blGiftNew = true;
                        blurGrid.Visibility = Visibility.Visible;
                        frm_POSGCAmtDlg frm_POSGCAmtDlg = new frm_POSGCAmtDlg();
                        try
                        {
                            frm_POSGCAmtDlg.GiftCertNo = GCNO;
                            frm_POSGCAmtDlg.GiftCertAmt = double.Parse(numAmount.Text);
                            frm_POSGCAmtDlg.ShowDialog();
                            if (frm_POSGCAmtDlg.DialogResult == true)
                            {
                                dblGiftOldAmt = frm_POSGCAmtDlg.GiftCertAmt;
                                blGiftOld = true;
                                if (dblGiftOldAmt == double.Parse(numAmount.Text))
                                {
                                    numAmount.Text = dblGiftOldAmt.ToString();
                                }
                                else if (dblGiftOldAmt < double.Parse(numAmount.Text))
                                {
                                    numAmount.Text = dblGiftOldAmt.ToString();
                                }
                                else
                                {
                                    numAmount.Text = numAmount.Text;
                                }

                                pnlGiftCert.Visibility = Visibility.Visible;
                                //pnlGiftCert.BringToFront();--Sam
                                if (Settings.CentralExportImport == "N") lbGC.Text = GCNO.ToString();
                                if (Settings.CentralExportImport == "Y")
                                {
                                    if (GCSTORE == Settings.StoreCode) lbGC.Text = GCNO.ToString();
                                    if (GCSTORE != Settings.StoreCode) lbGC.Text = GCNO.ToString() + "  (store: " + GCSTORE + ")";
                                }
                                double gcbal = dblGiftOldAmt - double.Parse(numAmount.Text);
                                if (Settings.DecimalPlace == 3) lbGCAmt.Text = gcbal.ToString("#0.000");
                                if (Settings.DecimalPlace == 2) lbGCAmt.Text = gcbal.ToString("#0.00");
                            }
                            else
                            {
                                blGiftNew = false;
                                blGiftOld = false;
                                return;
                            }
                        }
                        finally
                        {
                            blurGrid.Visibility = Visibility.Collapsed;
                        }
                    }
                    else
                    {
                        blGiftNew = false;
                        return;
                    }
                }
                else
                {
                    if (IfNotRedeemedGC(GCNO, GCSTORE) == 0)
                    {
                        blGiftNew = false;
                        new MessageBoxWindow().Show(Properties.Resources.This_Certificate_has_redeemed_previosly, "Gift Certificate Validation", MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                    else
                    {
                        blGiftNew = false;
                        double dblGCAmount = FetchGCAmount(GCNO, GCSTORE);
                        if (dblGCAmount == double.Parse(numAmount.Text))
                        {
                            numAmount.Text = dblGCAmount.ToString();
                        }
                        else if (dblGCAmount < double.Parse(numAmount.Text))
                        {
                            numAmount.Text = dblGCAmount.ToString();
                        }
                        else
                        {
                            numAmount.Text = numAmount.Text;
                        }
                        pnlGiftCert.Visibility = Visibility.Visible;
                        //pnlGiftCert.BringToFront();--Sam
                        if (Settings.CentralExportImport == "N") lbGC.Text = GCNO.ToString();
                        if (Settings.CentralExportImport == "Y")
                        {
                            if (GCSTORE == Settings.StoreCode) lbGC.Text = GCNO.ToString();
                            if (GCSTORE != Settings.StoreCode) lbGC.Text = GCNO.ToString() + "  (store: " + GCSTORE + ")";
                        }
                        double gcbal = dblGCAmount - double.Parse(numAmount.Text);
                        if (Settings.DecimalPlace == 3) lbGCAmt.Text = gcbal.ToString("#0.000");
                        if (Settings.DecimalPlace == 2) lbGCAmt.Text = gcbal.ToString("#0.00");
                    }
                }


                /*if (blGiftNew)
                {
                    numAmount.IsReadOnly = false;
                }
                else
                {
                    numAmount.IsReadOnly = true;
                }*/
            }

            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Store Credit")
            {
                if (intCustID == 0) return;
                if (!CheckAndSetStoreCreditAmount()) return;
            }

            if ((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Food Stamps")
                || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "EBT Voucher")
                || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "EBT Cash"))
            {
                //numAmount.IsReadOnly = true;
                if ((!blNewLayaway) && (!blLayaway) && (!blLayawayRefund) && (!blReturnItem) && (!blRentRecall) && (dblTotalsale >= 0))
                {

                    double dblFTx = 0;
                    double dblFV = GetFoodStampAmount(ref dblFTx);
                    double dblPreviousFSTender = PreviousFSTender();
                    dblFV = dblFV - dblPreviousFSTender;
                    if (dblFV <= 0)
                    {
                        numAmount.IsReadOnly = false;
                        return;
                    }
                    else
                    {
                        if (double.Parse(numAmount.Text) != dblFV) numAmount.Text = numAmount.Text;// -GeneralFunctions.FormatDouble(dblFTx);
                        if (double.Parse(numAmount.Text) > dblFV)
                        {
                            numAmount.Text = dblFV.ToString();
                        }
                    }
                }
                else
                {
                    if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                    {
                        if (!CheckEBTPayment)
                        {
                            new MessageBoxWindow().Show(Properties.Resources.No_Food_Stamps_Payment_for_the_item_s__found, Properties.Resources.Card_Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                    else numAmount.Text = "0";
                }
            }
            else
            {
                if ((!blReturnItem) && (!blRepairRecall) && ((!blRentRecall) || (blRentRecall && (sRentCalcFlag == "Y"))) && (!blLayawayRefund) && (dblTotalsale >= 0)) numAmount.IsReadOnly = false;
                //else numAmount.IsReadOnly = true;
            }

            if (double.Parse(numAmount.Text) == 0) return;

            int intRowID = 0;
            if ((grdTenderType.ItemsSource as DataTable).Rows.Count == 0) return;
            intRowID = gridView1.FocusedRowHandle;
            if (intRowID < 0) return;

            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "House Account")
            {
                if (intCustID == 0) return;
                if (!blLayaway)
                {
                    if (!CheckAndSetHouseAccountAmount()) return;
                }
                else
                {
                    if (!CheckAndSetHouseAccountAmountForLayaway()) return;
                }
            }

            if ((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Visa") ||
                    (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "MasterCard") ||
                    (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "American Express") ||
                    (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Discover") ||
                    (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Diner") ||
                    (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Debit Card") ||
                    (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card") ||
                    (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card - Voice Auth") ||
                    (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card (STAND-IN)")
                || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card - Voice Auth (STAND-IN)"))
            {
                if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                {
                    if (!((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N"))))
                    {
                        if ((SystemVariables.CurrentUserID > 0) && (!SecurityPermission.AcssNegativeCardTransaction))
                        {
                            new MessageBoxWindow().Show(Properties.Resources.Negative_Tendering_not_allowed, Properties.Resources.Card_Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                    else
                    {
                        if ((!CheckCardPayment) && (Settings.POSCardPayment == "Y"))
                        {
                            new MessageBoxWindow().Show(Properties.Resources.No_Card_Payment_for_the_item_s__found, Properties.Resources.Card_Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                            return;
                        }
                    }
                }
            }

            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Mercury Gift Card")
            {
                //if (CheckIfCardTenderingExists()) return;

                if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                {
                    if (!CheckCardPayment)
                    {
                        new MessageBoxWindow().Show(Properties.Resources.No_Mercury_Gift_Card_Payment_for_the_item_s__found, Properties.Resources.Mercury_Gift_Card_Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }
            }

            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Precidia Gift Card")
            {
                //if (CheckIfCardTenderingExists()) return;

                if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                {
                    if (!CheckCardPayment)
                    {
                        new MessageBoxWindow().Show(Properties.Resources.No_Precidia_Gift_Card_Payment_for_the_item_s__found, Properties.Resources.Precidia_Gift_Card_Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }
            }

            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Datacap Gift Card")
            {
                //if (CheckIfCardTenderingExists()) return;

                if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                {
                    if (!CheckCardPayment)
                    {
                        new MessageBoxWindow().Show(Properties.Resources.No_Datacap_Gift_Card_Payment_for_the_item_s__found, Properties.Resources.Datacap_Gift_Card_Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }
            }

            if (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "POSLink Gift Card")
            {
                //if (CheckIfCardTenderingExists()) return;

                if ((blReturnItem) || (blLayawayRefund) || ((blRentRecall) && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                {
                    if (!CheckCardPayment)
                    {
                        new MessageBoxWindow().Show(Properties.Resources.No_POSLink_Gift_Card_Payment_for_the_item_s__found, Properties.Resources.POSLink_Gift_Card_Tender_Validation, MessageBoxButton.OK, MessageBoxImage.Information);
                        return;
                    }
                }
            }

            bool blfinddata = false;
            string strselectid = await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colID);
            int intfocusrow = 0;

            double dblPrice = 0;
            foreach (DataRow dr in dtblTender.Rows)
            {
                if (!blGiftTender)
                {
                    if ((dr["TENDER"].ToString() == "Visa") ||
                    (dr["TENDER"].ToString() == "MasterCard") ||
                    (dr["TENDER"].ToString() == "American Express") ||
                    (dr["TENDER"].ToString() == "Discover") ||
                    (dr["TENDER"].ToString() == "Diner") ||
                    (dr["TENDER"].ToString() == "Debit Card") ||
                    (dr["TENDER"].ToString() == "Credit Card") ||
                    (dr["TENDER"].ToString() == "Credit Card - Voice Auth") ||
                    (dr["TENDER"].ToString() == "Credit Card (STAND-IN)") ||
                    (dr["TENDER"].ToString() == "Credit Card - Voice Auth (STAND-IN)") ||
                    (dr["TENDER"].ToString() == "Mercury Gift Card")
                    || (dr["TENDER"].ToString() == "Precidia Gift Card")
                    || (dr["TENDER"].ToString() == "Datacap Gift Card")
                    || (dr["TENDER"].ToString() == "POSLink Gift Card"))
                    {
                        continue;
                    }
                    else
                    {
                        if (dr["ID"].ToString() == strselectid)
                        {
                            dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()));
                            dr["AMOUNT"] = (dblPrice + numAmount.Text).ToString();
                            blfinddata = true;
                            break;
                        }
                    }
                }
                else
                {
                    if ((dr["GIFTCERTIFICATE"].ToString() == GCNO.ToString()) && (dr["GCSTORE"].ToString() == GCSTORE))
                    {
                        dblPrice = GeneralFunctions.FormatDouble(GeneralFunctions.fnDouble(dr["AMOUNT"].ToString()));
                        dr["AMOUNT"] = (dblPrice + numAmount.Text).ToString();
                        blfinddata = true;
                        break;
                    }
                }
                intfocusrow++;
            }

            if (!blfinddata)
            {
                if (blGiftTender)
                {
                    string strGCFlag = "N";
                    if (blGiftNew) strGCFlag = "Y";
                    string strGCOld = "N";
                    string oldbal = "0";
                    if (blGiftOld)
                    {
                        strGCOld = "Y";
                        oldbal = GeneralFunctions.FormatDouble(dblGiftOldAmt).ToString();
                    }
                    dtblTender.Rows.Add(new object[] {  await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colID),
                                                        await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType,colTender),
                                                        await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colDisplayAs),
                                                        GeneralFunctions.FormatDouble(double.Parse(numAmount.Text)).ToString(),
                                                        GCNO.ToString(),strGCFlag,strGCOld,oldbal,"",GCSTORE,"N","N","0" });

                    string line1 = "";
                    string line2 = "";
                    RearrangeDTxt(double.Parse(numAmount.Text), await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colDisplayAs), ref line1, ref line2);
                    frm_POS.DisplayPoleText(2, "N", "N", line1, line2);
                }
                else
                {
                    if ((blReturnItem) || (blLayawayRefund) || (blRentRecall && (sRentCalcFlag == "N")) || (dblTotalsale < 0))
                    {
                        if ((GeneralFunctions.FormatDouble(double.Parse(numAmount.Text)) >= 0) && (!blBottleRefund)) return;
                    }

                    string manl = "N";

                    if ((Settings.POSCardPayment == "Y") && ((Settings.PaymentGateway == 3) || (Settings.PaymentGateway == 5) || (Settings.PaymentGateway == 6) || (Settings.PaymentGateway == 7)))
                    {
                        if (((await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Visa") ||
                            (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "MasterCard") ||
                            (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "American Express") ||
                            (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Discover") ||
                            (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Diner") ||
                            //(await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Debit Card")||
                            (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card") ||
                            (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card - Voice Auth") ||
                            (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card (STAND-IN)")
                            || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Credit Card - Voice Auth (STAND-IN)")
                            || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "Food Stamps")
                            || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "EBT Cash")
                            || (await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colTender) == "EBT Voucher")) && (blPressManual))
                        {
                            manl = "Y";
                            //btnPrecidiaManual.Appearance.ForeColor = System.Drawing.Color.Black;
                            //btnPrecidiaManual.LookAndFeel.UseDefaultLookAndFeel = true;
                            //btnPrecidiaManual.LookAndFeel.Style = DevExpress.LookAndFeel.LookAndFeelStyle.Skin;
                            blPressManual = false;
                        }
                    }

                    dtblTender.Rows.Add(new object[] {  await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colID),
                                                        await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType,colTender),
                                                        await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colDisplayAs),
                                                        GeneralFunctions.FormatDouble(double.Parse(numAmount.Text)).ToString(),"","","","0","","",
                                                        manl,"N","0" });
                    string line1 = "";
                    string line2 = "";
                    RearrangeDTxt(double.Parse(numAmount.Text), await GeneralFunctions.GetCellValue1(gridView1.FocusedRowHandle, grdTenderType, colDisplayAs), ref line1, ref line2);
                    frm_POS.DisplayPoleText(2, "N", "N", line1, line2);
                }
                grdTender.ItemsSource = dtblTender;
                gridView2.FocusedRowHandle = dtblTender.Rows.Count - 1;
            }
            else
            {
                grdTender.ItemsSource = dtblTender;
                gridView2.FocusedRowHandle = intfocusrow;
            }

            ArrangeSettings();

            numAmount.Text = "0";

            // enter
            numAmount.Text = GeneralFunctions.FormatDouble(dblBalance).ToString();
            GeneralFunctions.SetFocus(numAmount);
            numAmount.SelectionLength = 0;
        }

        private async void Cheque_Click(object sender, RoutedEventArgs e)
        {
            gridView1.FocusedRowHandle = 1;
            await TenderType();
        }

        private async void CreditCardButton_Click(object sender, RoutedEventArgs e)
        {
            gridView1.FocusedRowHandle = 2;
            await TenderType();
        }

        private async void DebitCardButton_Click(object sender, RoutedEventArgs e)
        {
            gridView1.FocusedRowHandle = 3;
            await TenderType();
        }

        private void btnKey1_Click(object sender, RoutedEventArgs e)
        {
            KeyConverter k = new KeyConverter();
            Key mykey;
            string keyval = "";
            if ((sender as System.Windows.Controls.Button).Content.ToString() == ".")
            {
                mykey = Key.Decimal;
                keyval = ".";
            }
            else if ((sender as System.Windows.Controls.Button).Content.ToString() == "-")
            {
                mykey = Key.OemMinus;
                keyval = "-";
            }
            else if ((sender as System.Windows.Controls.Button).Content.ToString() == "System.Windows.Controls.Image")
            {
                if ((sender as System.Windows.Controls.Button).Tag.ToString() == "Delete")
                {
                    mykey = Key.Delete;
                    keyval = "Delete";
                }
                else
                {
                    mykey = Key.Back;
                    keyval = "Back";
                }
            }
            else
            {
                mykey = (Key)k.ConvertFromString((sender as System.Windows.Controls.Button).Content.ToString());
                keyval = (sender as System.Windows.Controls.Button).Content.ToString();
            }



            if (keyval == "Delete")
            {
                GeneralFunctions.SendKeys.SendNumeric(mykey, keyval);
                numAmount.Text = "0";
                numAmount.Focus();
                numAmount.SelectAll();
                numAmount.Tag = null;
                CurrentSelectionStart = 0;
            }
            else if (keyval == "Back")
            {
                string returnNumber = "";
                object tg = numAmount.Tag;
                bool decimalpress = false;
                if (tg != null)
                {
                    decimalpress = tg.ToString() == ".";
                }
                int ReturnCursorPos = InputNumberRightLoLeft(keyval, CurrentSelectionStart, GeneralFunctions.fnDouble(numAmount.Text).ToString("f2"), decimalpress, ref returnNumber);
                //GeneralFunctions.SendKeys.SendNumeric(mykey, returnNumber);
                numAmount.EditValue = returnNumber;
                //numAmount.Focus();
                numAmount.Select(numAmount.Text.Length + 1, 0);
                /*
                txtEdit.SelectionLength = 0;
                txtEdit.SelectionStart = ReturnCursorPos;
                CurrentSelectionStart = txtEdit.SelectionStart;*/
            }
            else
            {

                string returnNumber = "";
                object tg = numAmount.Tag;
                bool decimalpress = false;
                if (tg != null)
                {
                    decimalpress = tg.ToString() == ".";
                }
                int ReturnCursorPos = InputNumberRightLoLeft(keyval, CurrentSelectionStart, GeneralFunctions.fnDouble(numAmount.Text).ToString("f2"), decimalpress, ref returnNumber);
                //GeneralFunctions.SendKeys.SendNumeric(mykey, returnNumber);
                
                //GeneralFunctions.SendKeys.SendSpecial(mykey, returnNumber);
                if (keyval == ".")
                {
                    numAmount.Tag = ".";
                }
                else
                {
                    numAmount.EditValue = returnNumber;
                }
                //numAmount.Focus();

                numAmount.Select(numAmount.Text.Length + 1, 0);

                /*txtEdit.SelectionLength = 0;
                txtEdit.SelectionStart = ReturnCursorPos;
                CurrentSelectionStart = txtEdit.SelectionStart;*/


            }


            //GeneralFunctions.SendKeys.SendSpecial(mykey, keyval);

            /*if (keyval == "Delete")
            {
                Dispatcher.BeginInvoke(new Action(() => (numAmount).SelectAll()));
            }*/
        }

        private void UpScrollButton_Click(object sender, RoutedEventArgs e)
        {
            bool b = RearrangeTenderTypeBeforeDisplay("U");
            if (b)
            {
                DisplayTenderType();
            }
        }

        private void DownScrollButton_Click(object sender, RoutedEventArgs e)
        {
            bool b = RearrangeTenderTypeBeforeDisplay("D");
            if (b)
            {
                DisplayTenderType();
            }
        }

        private void NumAmount_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            e.Handled = new Regex("[^0-9.-]+").IsMatch(e.Text);
        }

        private void NumAmount_GotFocus(object sender, RoutedEventArgs e)
        {
            numAmount.SelectionLength = 0;
            numAmount.Text = GeneralFunctions.FormatDouble1(dblBalance);
            //numAmount.Select(numAmount.Text.Length + 1, 0);
            //e.Handled = true;
            Dispatcher.BeginInvoke(new Action(() => ((TextEdit)sender).Select(((TextEdit)sender).Text.Length + 1,0)));
        }

        public class respdtl
        {

            public int amountBase { get; set; }
            public int amountCashback { get; set; }
            public int amountGratuity { get; set; }
            public int amountTotal { get; set; }
            public string applicationId { get; set; }
            public string applicationLabel { get; set; }
            public string authCode { get; set; }
            public string cardSchemeName { get; set; }
            public string cardholderVerificationMethod { get; set; }
            public string currency { get; set; }
            public string dateOfExpiry { get; set; }
            public string dateOfStart { get; set; }
            public string paymentMethod { get; set; }
            public string primaryAccountNumber { get; set; }
            public string primaryAccountNumberSequence { get; set; }
            public object receiptLines { get; set; }
            public string tid { get; set; }
            public string transactionId { get; set; }
            public string transactionNumber { get; set; }
            public string transactionResult { get; set; }
            public string transactionTime { get; set; }
            public string transactionType { get; set; }
        }

        public class termdtl
        {

            public string tid { get; set; }
            public string currency { get; set; }
            public string status { get; set; }

        }

        public class errordtl
        {

            public string message { get; set; }
            public string code { get; set; }

        }



        #region Function for All New Template Customisation


        private string GetFotmatDoubleValueWithCurrency(double dbval)
        {
            string retstr = "";
            if (Settings.DecimalPlace == 3) retstr = dbval.ToString("f3");
            else retstr = dbval.ToString("f");
            if (dbval < 0) retstr = "(" + SystemVariables.CurrencySymbol + retstr.Remove(0, 1) + ")";
            else
                retstr = SystemVariables.CurrencySymbol + retstr;
            return retstr;
        }

        private void CheckForNewTemplate(string reftemplateId, string refprinter)
        {
            if ((reftemplateId == "") || (reftemplateId == "0"))
            {
                FindNewTemplate = false;
            }
            else
            {
                NewPrintCopy = 1;
                NewPrinterName = "";
                int printerID = 0;
                NewTemplateID = GeneralFunctions.fnInt32(reftemplateId);
                NewTemplateSize = "";
                FindNewTemplate = false;
                T_Width = 270;
                NewTemplateLinkData = new DataTable();
                chrperline = 55;

                PosDataObject.ReceiptTemplate objsetup = new PosDataObject.ReceiptTemplate();
                objsetup.Connection = SystemVariables.Conn;
                objsetup.FetchItemTemplateDetails(NewTemplateID, ref NewTemplateSize, ref NewPrintCopy);

                if (NewTemplateID > 0)
                {
                    NewTemplateLinkData = objsetup.FetchLinkData(NewTemplateID);


                    

                    NewPrinterName = refprinter;
                    if (NewTemplateLinkData.Rows.Count > 0)
                    {
                        FindNewTemplate = true;
                        if (NewTemplateSize == "80 mm")
                        {
                            T_Width = 270 - SystemVariables.PageAdjustmentForPrint;
                            chrperline = 55;
                        }
                        else
                        {
                            T_Width = 196 - SystemVariables.PageAdjustmentForPrint;
                            chrperline = 30;
                        }
                    }

                }
            }

        }

        private string FindTemplateParameterValueInDatatable(string paramdefination)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "'");
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextAlign"].ToString() + "|" + dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString() + "|" + dr["CtrlWidth"].ToString() + "|" + dr["CtrlHeight"].ToString();
            }
            return returnstring;
        }

        private string FindTemplateParameterValueInDatatable(string paramdefination, string sl)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and SL = " + sl);
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextAlign"].ToString() + "|" + dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString() + "|" + dr["CtrlWidth"].ToString() + "|" + dr["CtrlHeight"].ToString();
            }
            return returnstring;
        }

        private string FindTemplateParameterValueInDatatableForText(string paramdefination, string subslno)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and GroupSubSL = " + subslno);
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextAlign"].ToString() + "|" + dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString() + "|" + dr["CtrlWidth"].ToString() + "|" + dr["CtrlHeight"].ToString();
            }
            return returnstring;
        }

        private string FindTemplateParameterValueInDatatableForImage(string paramdefination, string subslno)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and GroupSubSL = " + subslno);
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextAlign"].ToString() + "|" + dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString() + "|" + dr["CtrlWidth"].ToString() + "|" + dr["CtrlHeight"].ToString();
            }
            return returnstring;
        }

        private byte[] GetMoreImage(string paramdefination, string subslno)
        {

            byte[] returnval = null;
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and GroupSubSL = " + subslno);
            foreach (DataRow dr in Drs)
            {
                returnval = (byte[])dr["CustomImage"];
            }
            return returnval;
        }

        private void SetMoreImage(System.Windows.Controls.Image imglogo, byte[] bytdata)
        {
            byte[] content = bytdata;
            try
            {
                // assign byte array data into memory stream 
                MemoryStream stream = new MemoryStream(content);

                // set transparent bitmap with 32 X 32 size by memory stream data 
                Bitmap b = new Bitmap(stream);
                Bitmap output = new Bitmap(b, new System.Drawing.Size(32, 32));
                output.MakeTransparent();

                System.Windows.Media.Imaging.BitmapImage bi = new System.Windows.Media.Imaging.BitmapImage();
                bi.BeginInit();
                System.Drawing.Image tempImage = (System.Drawing.Image)output;
                MemoryStream ms = new MemoryStream();
                tempImage.Save(ms, System.Drawing.Imaging.ImageFormat.Bmp);

                stream.Seek(0, SeekOrigin.Begin);

                bi.StreamSource = stream;

                bi.EndInit();

                imglogo.Source = bi;

            }
            catch (Exception ex)
            {
                imglogo.Source = null;
            }
        }

        private void GetSeparateValue(string pstring, ref string palign, ref string pstyle, ref int pfont, ref int pcwidth, ref int pcheight)
        {
            String[] splitstring = pstring.Split('|');
            int i = 0;
            foreach (string s in splitstring)
            {
                i++;
                if (i == 1) palign = s;
                if (i == 2) pstyle = s;
                if (i == 3) pfont = GeneralFunctions.fnInt32(s);
                if (i == 4) pcwidth = GeneralFunctions.fnInt32(s);
                if (i == 5) pcheight = GeneralFunctions.fnInt32(s);
            }
        }

        private System.Windows.HorizontalAlignment GetRowAlignment(string alignval)
        {
            if (alignval == "left") return System.Windows.HorizontalAlignment.Left;
            else if (alignval == "right") return System.Windows.HorizontalAlignment.Right;
            else return System.Windows.HorizontalAlignment.Center;
        }

        private System.Windows.TextAlignment GetTextAlignment(string alignval)
        {
            if (alignval == "left") return TextAlignment.Left;
            else if (alignval == "right") return TextAlignment.Right;
            else return TextAlignment.Center;
        }

        private void SetTextStyle(System.Windows.Documents.Paragraph para, string styleval)
        {
            if (styleval == "normal")
            {
                para.FontStyle = FontStyles.Normal;
            }
            if (styleval == "italic")
            {
                para.FontStyle = FontStyles.Italic;
            }
            if (styleval == "bold")
            {
                para.FontWeight = FontWeights.Bold;
            }
        }

        private double GetFontSize(int fsize)
        {
            if (fsize == 0) return 11f;
            else return (float)fsize;
        }


        private string FindTemplateParameterValueInDatatableOrderHeader(string paramdefination, string sl)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and SL = " + sl);
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString() + "|" + dr["ShowHeader1"].ToString() + "|" + dr["ShowHeader2"].ToString() + "|" + dr["ShowHeader3"].ToString()
                    + "|" + dr["Header1Caption"].ToString() + "|" + dr["Header2Caption"].ToString() + "|" + dr["Header3Caption"].ToString();
            }
            return returnstring;
        }


        private string FindTemplateParameterValueInDatatableOrderHeader1(string paramdefination)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "'");
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["ShowHeader1"].ToString() + "|" + dr["ShowHeader2"].ToString() + "|" + dr["ShowHeader3"].ToString();
            }
            return returnstring;
        }

        private string FindTemplateParameterValueInDatatableOrderDetail(string paramdefination, string sl)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "' and SL = " + sl);
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString();
            }
            return returnstring;
        }

        private void GetSeparateValueItem(string pstring, ref string pstyle, ref int pfont)
        {
            String[] splitstring = pstring.Split('|');
            int i = 0;
            foreach (string s in splitstring)
            {
                i++;

                if (i == 1) pstyle = s;
                if (i == 2) pfont = GeneralFunctions.fnInt32(s);

            }
        }

        private void GetSeparateValueHeaderDetail(string pstring, ref string pstyle, ref int pfont,
            ref string pcheckH1, ref string pcheckH2, ref string pcheckH3,
            ref string pcaption1, ref string pcaption2, ref string pcaption3)
        {
            String[] splitstring = pstring.Split('|');
            int i = 0;
            foreach (string s in splitstring)
            {
                i++;

                if (i == 1) pstyle = s;
                if (i == 2) pfont = GeneralFunctions.fnInt32(s);
                if (i == 3) pcheckH1 = s;
                if (i == 4) pcheckH2 = s;
                if (i == 5) pcheckH3 = s;
                if (i == 6) pcaption1 = s;
                if (i == 7) pcaption2 = s;
                if (i == 8) pcaption3 = s;
            }
        }


        private string FindTemplateParameterValueInDatatableOrderDetail1(string paramdefination)
        {

            string returnstring = "";
            DataRow[] Drs = NewTemplateLinkData.Select("GroupName='" + paramdefination + "'");
            foreach (DataRow dr in Drs)
            {
                returnstring = dr["TextStyle"].ToString() + "|" + dr["FontSize"].ToString();
            }
            return returnstring;
        }


        private bool GetRecieptHeaderCompany(string templatevalue)
        {
            if (Settings.ReceiptHeader_Company.Trim() != "")
            {
                string OrginalH = "";// Settings.TotalReceiptHeader;

                ArrangeText(Settings.ReceiptHeader_Company, chrperline, ref OrginalH);

                char FindH = '\n';
                int NumberOfOccurancesH = 0;

                string CopyOrginalH = string.Copy(OrginalH);
                int PlaceH = 0;

                NumberOfOccurancesH = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                while (PlaceH != -1)
                {
                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                    if (cutstr.Length > chrperline)
                    {
                        int len = cutstr.Length;
                        while (len >= chrperline)
                        {
                            NumberOfOccurancesH++;
                            len = len - chrperline;
                            if (cutstr != "")
                            {
                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", templatevalue });
                                cutstr = cutstr.Substring(chrperline, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", templatevalue });
                        }
                    }
                    else
                    {
                        if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", templatevalue });
                    }

                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    NumberOfOccurancesH++;
                }

                if (CopyOrginalH.Length > 50)
                {
                    int len = CopyOrginalH.Length;
                    while (len >= 50)
                    {
                        NumberOfOccurancesH++;
                        len = len - 50;
                        if (CopyOrginalH != "")
                        {
                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 50), "", "", "", "Y", templatevalue });
                            CopyOrginalH = CopyOrginalH.Substring(50, len);
                        }
                    }
                    if (len != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", templatevalue });
                    }
                }
                else
                {
                    if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", templatevalue });
                }


                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                else
                {
                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                }

            }

            return true;
        }

        private bool GetRecieptHeaderAddress(string templatevalue)
        {
            if (Settings.ReceiptHeader_Address.Trim() != "")
            {
                string OrginalH = "";// Settings.TotalReceiptHeader;

                ArrangeText(Settings.ReceiptHeader_Address, chrperline, ref OrginalH);

                char FindH = '\n';
                int NumberOfOccurancesH = 0;

                string CopyOrginalH = string.Copy(OrginalH);
                int PlaceH = 0;

                NumberOfOccurancesH = 0;
                PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                while (PlaceH != -1)
                {
                    string cutstr = CopyOrginalH.Substring(0, PlaceH - 1);

                    if (cutstr.Length > chrperline)
                    {
                        int len = cutstr.Length;
                        while (len >= chrperline)
                        {
                            NumberOfOccurancesH++;
                            len = len - chrperline;
                            if (cutstr != "")
                            {
                                dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, chrperline), "", "", "", "Y", templatevalue });
                                cutstr = cutstr.Substring(chrperline, len);
                            }
                        }
                        if (len != 0)
                        {
                            dtblstrm.Rows.Add(new object[] { cutstr.Substring(0, len), "", "", "", "Y", templatevalue });
                        }
                    }
                    else
                    {
                        if (cutstr != "") dtblstrm.Rows.Add(new object[] { cutstr, "", "", "", "Y", templatevalue });
                    }

                    CopyOrginalH = CopyOrginalH.Substring(PlaceH + 1);
                    PlaceH = CopyOrginalH.IndexOf(FindH.ToString());
                    NumberOfOccurancesH++;
                }

                if (CopyOrginalH.Length > 50)
                {
                    int len = CopyOrginalH.Length;
                    while (len >= 50)
                    {
                        NumberOfOccurancesH++;
                        len = len - 50;
                        if (CopyOrginalH != "")
                        {
                            dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, 50), "", "", "", "Y", templatevalue });
                            CopyOrginalH = CopyOrginalH.Substring(50, len);
                        }
                    }
                    if (len != 0)
                    {
                        dtblstrm.Rows.Add(new object[] { CopyOrginalH.Substring(0, len), "", "", "", "Y", templatevalue });
                    }
                }
                else
                {
                    if (CopyOrginalH != "") dtblstrm.Rows.Add(new object[] { CopyOrginalH, "", "", "", "Y", templatevalue });
                }


                if (NumberOfOccurancesH == 0) NumberOfOccurancesH = 1;
                else
                {
                    if ((OrginalH.Substring(0, OrginalH.Length - 2) != FindH.ToString())) NumberOfOccurancesH = NumberOfOccurancesH + 1;
                }

            }

            return true;
        }

        #endregion


        private void CreateFlowControlForItem(FlowDocumentScrollViewer FDSV)
        {
            int receiptWidth = 0;
            receiptWidth = T_Width;

            //if (Settings.GeneralReceiptPrint == "Y") receiptWidth = 450; else receiptWidth = 245 + SystemVariables.PageAdjustmentForPrint;

            float yPos = 0;
            int count = 0;
            float leftMargin = 0;
            float topMargin = 0;

            FlowDocument FDoc = new FlowDocument();
            FDoc.Background = System.Windows.Media.Brushes.White; 
            FDoc.LineHeight = 1;
            FDoc.PageWidth = GeneralFunctions.fnDouble(receiptWidth);



            System.Windows.Media.FontFamily fontFamily = new System.Windows.Media.FontFamily("Arial");
            double fontDpiSize = 9;
            double fontHeight = Math.Ceiling(fontDpiSize * fontFamily.LineSpacing);
            int H = GeneralFunctions.fnInt32(fontHeight) + 1;

            int counter = 0;

            if (!FindNewTemplate)
            {
                foreach (DataRow dr in dtblstrm.Rows)
                {
                    ++counter;
                    if (counter > 112)
                    {

                    }
                    yPos = topMargin + (count * H);

                    if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDoc.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDoc.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(265 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDoc.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(350 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDoc.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(20 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(-70 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDoc.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                 
                    else
                    {
                        if (dr["param"].ToString() == "")
                        {
                            Table tab = new Table();
                            tab.CellSpacing = 0;
                            FDoc.Blocks.Add(tab);
                            //FDocPrint.Blocks.Add(tab);
                            TableRowGroup trgrp = new TableRowGroup();
                            tab.RowGroups.Add(trgrp);
                            TableRow tr = new TableRow();


                            TableCell tc1 = new TableCell();
                            Paragraph para1 = new Paragraph();
                            para1.TextAlignment = TextAlignment.Left;
                            para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                            para1.FontSize = 11f;
                            para1.Foreground = System.Windows.Media.Brushes.Black;
                            para1.Inlines.Add(dr["Npos"].ToString());
                            tc1.Blocks.Add(para1);

                            TableCell tc2 = new TableCell();
                            Paragraph para2 = new Paragraph();
                            para2.TextAlignment = TextAlignment.Center;
                            para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                            para2.FontSize = 11f;
                            para2.Foreground = System.Windows.Media.Brushes.Black;
                            para2.Inlines.Add(dr["Cpos"].ToString());
                            tc2.ColumnSpan = 2;
                            tc2.Blocks.Add(para2);

                            TableCell tc3 = new TableCell();
                            Paragraph para3 = new Paragraph();
                            para3.TextAlignment = TextAlignment.Right;
                            para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                            para3.Margin = new Thickness(0, 0, 5, 0);

                            para3.FontSize = 11f;
                            para3.Foreground = System.Windows.Media.Brushes.Black;
                            para3.Inlines.Add(dr["Fpos"].ToString());
                            tc3.Blocks.Add(para3);


                            AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                            trgrp.Rows.Add(tr);

                        }
                        else
                        {
                             if (dr["param"].ToString() == "B")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 12f;
                                para1.FontWeight = FontWeights.Bold;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 12f;
                                para2.FontWeight = FontWeights.Bold;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 12f;
                                para3.FontWeight = FontWeights.Bold;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);
                            }
                            else if (dr["param"].ToString() == "s")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 8.75f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 8.75f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 8.75f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);
                            }

                            #region OldCode
                            /*
                            else if (dr["param"].ToString() == "OneColumn")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 11f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);
                                tc1.ColumnSpan = 3;

                                tr.Cells.Add(tc1);

                                trgrp.Rows.Add(tr);

                            }
                            else if (dr["param"].ToString() == "TwoOneColumn")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 11f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);
                                tc1.ColumnSpan = 2;

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 8.75f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);

                                tr.Cells.Add(tc1);
                                tr.Cells.Add(tc3);

                                trgrp.Rows.Add(tr);

                            }
                            */
                            #endregion
                            else
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 10f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 10f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 10f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);

                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);
                            }
                        }
                    }

                    count++;
                }
            }
            else
            {
                foreach (DataRow dr in dtblstrm.Rows)
                {
                    ++counter;
                    if (counter > 112)
                    {

                    }
                    yPos = topMargin + (count * H);

                    if ((dr["Npos"].ToString() == "xxxx") && (dr["Cpos"].ToString() == "xxxx") && (dr["Fpos"].ToString() == "xxxx"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDoc.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "xxx") && (dr["Cpos"].ToString() == "xxx") && (dr["Fpos"].ToString() == "xxx"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = GeneralFunctions.fnDouble(leftMargin);
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDoc.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "xx") && (dr["Cpos"].ToString() == "xx") && (dr["Fpos"].ToString() == "xx"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(265 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(60 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDoc.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "x") && (dr["Cpos"].ToString() == "x") && (dr["Fpos"].ToString() == "x"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(350 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(475 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDoc.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }
                    else if ((dr["Npos"].ToString() == "sig") && (dr["Cpos"].ToString() == "sig") && (dr["Fpos"].ToString() == "sig"))
                    {
                        Line pLine = new Line();
                        pLine.Stretch = Stretch.Fill;
                        pLine.Stroke = System.Windows.Media.Brushes.Black;
                        pLine.X1 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(20 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(120 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y1 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));
                        pLine.X2 = Settings.GeneralReceiptPrint == "Y" ? GeneralFunctions.fnDouble(-70 + GeneralFunctions.fnInt32(leftMargin)) : GeneralFunctions.fnDouble(240 + SystemVariables.PageAdjustmentForPrint + GeneralFunctions.fnInt32(leftMargin));
                        pLine.Y2 = GeneralFunctions.fnDouble(GeneralFunctions.fnInt32(yPos));

                        DoubleCollection dashes = new DoubleCollection();
                        dashes.Add(2);
                        dashes.Add(2);
                        pLine.StrokeDashArray = dashes;
                        pLine.StrokeDashCap = PenLineCap.Round;

                        Paragraph pgph = new Paragraph();
                        pgph.Inlines.Add(pLine);

                        FDoc.Blocks.Add(pgph);
                        //FDocPrint.Blocks.Add(pgph);
                    }

                    else if ((dr["Npos"].ToString() == "barcode") && (dr["Cpos"].ToString() == "barcode") && (dr["Fpos"].ToString() == "barcode"))
                    {
                        string palign = "";
                        string pstyle = "";
                        int pfont = 0;
                        int pcwidth = 0;
                        int pcheight = 0;

                        GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);


                        DevExpress.Xpf.Editors.BarCodeEdit barcd_dy = new DevExpress.Xpf.Editors.BarCodeEdit();
                        barcd_dy.Width = 180;
                        barcd_dy.Height = 48;
                        barcd_dy.Module = 2;
                        barcd_dy.ShowText = false;
                        DevExpress.Xpf.Editors.Code128StyleSettings code128 = new DevExpress.Xpf.Editors.Code128StyleSettings();
                        barcd_dy.StyleSettings = code128;
                        string lno = "0";
                        barcd_dy.EditValue = lno;
                        

                        BlockUIContainer bc = new BlockUIContainer();
                        //barcd.Visibility = System.Windows.Visibility.Visible;

                        StackPanel sp = new StackPanel();
                        sp.Width = pcwidth;
                        sp.Height = pcheight;
                        sp.Orientation = System.Windows.Controls.Orientation.Horizontal;
                        sp.HorizontalAlignment = GetRowAlignment(palign);
                        sp.Background = new SolidColorBrush(Colors.Transparent);

                        sp.Children.Add(barcd_dy);
                        DevExpress.Xpf.Editors.BarCodeEdit br = new DevExpress.Xpf.Editors.BarCodeEdit();


                        bc.Child = sp;
                        FDoc.Blocks.Add(bc);
                        //FDocPrint.Blocks.Add(bc);

                    }
                    else
                    {
                        if ((dr["param"].ToString() == "Image") && (dr["paramnew"].ToString() == "Y"))
                        {
                            string palign = "";
                            string pstyle = "";
                            int pfont = 0;
                            int pcwidth = 0;
                            int pcheight = 0;
                            GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);

                            System.Windows.Controls.Image moreImage = new System.Windows.Controls.Image();
                            SetMoreImage(moreImage, GetMoreImage("Image", dr["Npos"].ToString()));


                            moreImage.Width = (float)pcwidth;
                            moreImage.Height = (float)pcheight;
                            moreImage.Stretch = Stretch.Uniform;
                            moreImage.Margin = new Thickness(0, 0, 0, 0);



                            Grid grid = new Grid();
                            grid.Width = (float)pcwidth;
                            grid.Height = (float)pcheight;
                            grid.Children.Add(moreImage);

                            BlockUIContainer bc = new BlockUIContainer();
                            //barcd.Visibility = System.Windows.Visibility.Visible;

                            StackPanel sp = new StackPanel();
                            sp.Width = (float)pcwidth;
                            sp.Height = (float)pcheight;
                            sp.Orientation = System.Windows.Controls.Orientation.Horizontal;

                            sp.HorizontalAlignment = GetRowAlignment(palign);
                            sp.Background = new SolidColorBrush(Colors.Transparent);

                            sp.Children.Add(grid);

                            bc.Child = sp;
                            FDoc.Blocks.Add(bc);
                        }
                        else if ((dr["param"].ToString() == "") && (dr["paramnew"].ToString() == "Y"))
                        {

                            string palign = "";
                            string pstyle = "";
                            int pfont = 0;
                            int pcwidth = 0;
                            int pcheight = 0;
                            GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);

                            Table tab = new Table();
                            tab.CellSpacing = 0;
                            FDoc.Blocks.Add(tab);
                            TableRowGroup trgrp = new TableRowGroup();
                            tab.RowGroups.Add(trgrp);
                            TableRow tr = new TableRow();



                            TableCell tc1 = new TableCell();
                            Paragraph para1 = new Paragraph();
                            para1.TextAlignment = GetTextAlignment(palign);
                            para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                            para1.FontSize = GetFontSize(pfont);
                            SetTextStyle(para1, pstyle);
                            para1.Foreground = System.Windows.Media.Brushes.Black;
                            para1.Inlines.Add(dr["Npos"].ToString());
                            tc1.Blocks.Add(para1);


                            tr.Cells.Add(tc1);
                            trgrp.Rows.Add(tr);

                        }
                        else if ((dr["param"].ToString() == "") && (dr["paramnew"].ToString() == ""))
                        {
                            Table tab = new Table();
                            tab.CellSpacing = 0;
                            FDoc.Blocks.Add(tab);
                            //FDocPrint.Blocks.Add(tab);
                            TableRowGroup trgrp = new TableRowGroup();
                            tab.RowGroups.Add(trgrp);
                            TableRow tr = new TableRow();


                            TableCell tc1 = new TableCell();
                            Paragraph para1 = new Paragraph();
                            para1.TextAlignment = TextAlignment.Left;
                            para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                            para1.FontSize = 11f;
                            para1.Foreground = System.Windows.Media.Brushes.Black;
                            para1.Inlines.Add(dr["Npos"].ToString());
                            tc1.Blocks.Add(para1);

                            TableCell tc2 = new TableCell();
                            Paragraph para2 = new Paragraph();
                            para2.TextAlignment = TextAlignment.Center;
                            para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                            para2.FontSize = 11f;
                            para2.Foreground = System.Windows.Media.Brushes.Black;
                            para2.Inlines.Add(dr["Cpos"].ToString());
                            tc2.ColumnSpan = 2;
                            tc2.Blocks.Add(para2);

                            TableCell tc3 = new TableCell();
                            Paragraph para3 = new Paragraph();
                            para3.TextAlignment = TextAlignment.Right;
                            para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                            para3.Margin = new Thickness(0, 0, 5, 0);

                            para3.FontSize = 11f;
                            para3.Foreground = System.Windows.Media.Brushes.Black;
                            para3.Inlines.Add(dr["Fpos"].ToString());
                            tc3.Blocks.Add(para3);


                            AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                            trgrp.Rows.Add(tr);

                        }
                        else
                        {
                            if ((dr["param"].ToString() == "logo"))
                            {
                                System.Windows.Controls.Image imglogoDynamic = new System.Windows.Controls.Image();
                                GeneralFunctions.LoadPhotofromDB("Logo", 0, imglogoDynamic);

                                if (imglogoDynamic.Source != null)
                                {
                                    string palign = "";
                                    string pstyle = "";
                                    int pfont = 0;
                                    int pcwidth = 0;
                                    int pcheight = 0;
                                    GetSeparateValue(dr["paramvalue"].ToString(), ref palign, ref pstyle, ref pfont, ref pcwidth, ref pcheight);
                                    imglogoDynamic.Width = (float)pcwidth;
                                    imglogoDynamic.Height = (float)pcheight;
                                    imglogoDynamic.Stretch = Stretch.Uniform;
                                    imglogoDynamic.Margin = new Thickness(0, 0, 0, 0);



                                    Grid grid = new Grid();
                                    grid.Width = (float)pcwidth;
                                    grid.Height = (float)pcheight;
                                    grid.Children.Add(imglogoDynamic);

                                    BlockUIContainer bc = new BlockUIContainer();

                                    StackPanel sp = new StackPanel();
                                    sp.Width = (float)pcwidth;
                                    sp.Height = (float)pcheight;
                                    sp.Orientation = System.Windows.Controls.Orientation.Horizontal;

                                    sp.HorizontalAlignment = GetRowAlignment(palign);
                                    sp.Background = new SolidColorBrush(Colors.Transparent);

                                    sp.Children.Add(grid);

                                    bc.Child = sp;
                                    FDoc.Blocks.Add(bc);
                                    //FDocPrint.Blocks.Add(bc);
                                }

                            }
                            else if (dr["param"].ToString() == "B")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 12f;
                                para1.FontWeight = FontWeights.Bold;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 12f;
                                para2.FontWeight = FontWeights.Bold;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 12f;
                                para3.FontWeight = FontWeights.Bold;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);
                            }
                            else if (dr["param"].ToString() == "s")
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 8.75f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 8.75f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 8.75f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);


                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);
                            }
                            else if (dr["param"].ToString() == "Header")
                            {

                                string pstyle = "";
                                int pfont = 0;

                                string pcheckH1 = "";
                                string pcheckH2 = "";
                                string pcheckH3 = "";
                                string pcaption1 = "";
                                string pcaption2 = "";
                                string pcaption3 = "";

                                GetSeparateValueHeaderDetail(dr["paramvalue"].ToString(), ref pstyle, ref pfont,
                                   ref pcheckH1, ref pcheckH2, ref pcheckH3,
                                   ref pcaption1, ref pcaption2, ref pcaption3);

                                if ((pcheckH1 == "Y") || (pcheckH2 == "Y") || (pcheckH2 == "Y"))
                                {

                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDoc.Blocks.Add(tab);

                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();

                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = GetFontSize(pfont);
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    SetTextStyle(para1, pstyle);
                                    para1.Inlines.Add(pcaption1);
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = GetFontSize(pfont);
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    SetTextStyle(para2, pstyle);
                                    para2.Inlines.Add(pcaption2);
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.FontSize = GetFontSize(pfont);
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    SetTextStyle(para3, pstyle);
                                    para3.Inlines.Add(pcaption3);
                                    tc3.Blocks.Add(para3);


                                    if (pcheckH1 == "Y")
                                    {
                                        tr.Cells.Add(tc1);
                                    }
                                    if (pcheckH2 == "Y")
                                    {
                                        tr.Cells.Add(tc2);
                                    }
                                    if (pcheckH3 == "Y")
                                    {
                                        tr.Cells.Add(tc3);
                                    }

                                    trgrp.Rows.Add(tr);
                                }


                            }
                            else if (dr["param"].ToString() == "Detail")
                            {

                                string pstyle = "";
                                int pfont = 0;

                                string pcheckH1 = "";
                                string pcheckH2 = "";
                                string pcheckH3 = "";
                                string pcaption1 = "";
                                string pcaption2 = "";
                                string pcaption3 = "";

                                GetSeparateValueHeaderDetail(dr["paramvalue"].ToString(), ref pstyle, ref pfont,
                                   ref pcheckH1, ref pcheckH2, ref pcheckH3,
                                   ref pcaption1, ref pcaption2, ref pcaption3);

                                if ((pcheckH1 == "Y") || (pcheckH2 == "Y") || (pcheckH2 == "Y"))
                                {

                                    Table tab = new Table();
                                    tab.CellSpacing = 0;
                                    FDoc.Blocks.Add(tab);

                                    TableRowGroup trgrp = new TableRowGroup();
                                    tab.RowGroups.Add(trgrp);
                                    TableRow tr = new TableRow();

                                    TableCell tc1 = new TableCell();
                                    Paragraph para1 = new Paragraph();
                                    para1.TextAlignment = TextAlignment.Left;
                                    para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para1.FontSize = GetFontSize(pfont);
                                    para1.Foreground = System.Windows.Media.Brushes.Black;
                                    SetTextStyle(para1, pstyle);
                                    para1.Inlines.Add(dr["Npos"].ToString());
                                    tc1.Blocks.Add(para1);

                                    TableCell tc2 = new TableCell();
                                    Paragraph para2 = new Paragraph();
                                    para2.TextAlignment = TextAlignment.Center;
                                    para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para2.FontSize = GetFontSize(pfont);
                                    para2.Foreground = System.Windows.Media.Brushes.Black;
                                    SetTextStyle(para2, pstyle);
                                    para2.Inlines.Add(dr["Cpos"].ToString());
                                    tc2.Blocks.Add(para2);

                                    TableCell tc3 = new TableCell();
                                    Paragraph para3 = new Paragraph();
                                    para3.TextAlignment = TextAlignment.Right;
                                    para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                    para3.FontSize = GetFontSize(pfont);
                                    para3.Foreground = System.Windows.Media.Brushes.Black;
                                    SetTextStyle(para3, pstyle);
                                    para3.Inlines.Add(dr["Fpos"].ToString());
                                    tc3.Blocks.Add(para3);


                                    if (pcheckH1 == "Y")
                                    {
                                        tr.Cells.Add(tc1);
                                    }
                                    if (pcheckH2 == "Y")
                                    {
                                        tr.Cells.Add(tc2);
                                    }
                                    if (pcheckH3 == "Y")
                                    {
                                        tr.Cells.Add(tc3);
                                    }

                                    trgrp.Rows.Add(tr);
                                }


                            }
                            else if (dr["param"].ToString() == "Item")
                            {

                                string pstyle = "";
                                int pfont = 0;


                                GetSeparateValueItem(dr["paramvalue"].ToString(), ref pstyle, ref pfont);

                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);

                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();

                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = GetFontSize(pfont);
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                SetTextStyle(para1, pstyle);
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                tr.Cells.Add(tc1);

                                trgrp.Rows.Add(tr);


                            }

                            else
                            {
                                Table tab = new Table();
                                tab.CellSpacing = 0;
                                FDoc.Blocks.Add(tab);
                                //FDocPrint.Blocks.Add(tab);
                                TableRowGroup trgrp = new TableRowGroup();
                                tab.RowGroups.Add(trgrp);
                                TableRow tr = new TableRow();


                                TableCell tc1 = new TableCell();
                                Paragraph para1 = new Paragraph();
                                para1.TextAlignment = TextAlignment.Left;
                                para1.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para1.FontSize = 10f;
                                para1.Foreground = System.Windows.Media.Brushes.Black;
                                para1.Inlines.Add(dr["Npos"].ToString());
                                tc1.Blocks.Add(para1);

                                TableCell tc2 = new TableCell();
                                Paragraph para2 = new Paragraph();
                                para2.TextAlignment = TextAlignment.Center;
                                para2.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para2.FontSize = 10f;
                                para2.Foreground = System.Windows.Media.Brushes.Black;
                                para2.Inlines.Add(dr["Cpos"].ToString());
                                tc2.Blocks.Add(para2);

                                TableCell tc3 = new TableCell();
                                Paragraph para3 = new Paragraph();
                                para3.TextAlignment = TextAlignment.Right;
                                para3.FontFamily = new System.Windows.Media.FontFamily("Arial");
                                para3.Margin = new Thickness(0, 0, 5, 0);
                                para3.FontSize = 10f;
                                para3.Foreground = System.Windows.Media.Brushes.Black;
                                para3.Inlines.Add(dr["Fpos"].ToString());
                                tc3.Blocks.Add(para3);

                                AdjustColumnsInRow(dr, tc1, tc2, tc3, tr);

                                trgrp.Rows.Add(tr);
                            }
                        }
                    }

                    count++;
                }
            }


            FDSV.Document = FDoc;
            FDSV.Zoom = 120;

            //printPCtrl.Document = FDoc;
            //printPCtrl.Zoom = 120;

            //FVPrint.Document = FDocPrint;
            //FVPrint.Zoom = 120;


        }

        private void AdjustColumnsInRow(DataRow dr, TableCell tc1, TableCell tc2, TableCell tc3, TableRow tr)
        {
            if (dr["Cpos"].ToString().Trim() == "" && dr["Fpos"].ToString().Trim() == "")
            {
                tc1.ColumnSpan = 3;
                tr.Cells.Add(tc1);
            }
            else if (dr["Cpos"].ToString().Trim() == "")
            {
                tc1.ColumnSpan = 2;
                tr.Cells.Add(tc1);
                tr.Cells.Add(tc3);
            }
            else
            {
                tr.Cells.Add(tc1);
                tr.Cells.Add(tc2);
                tr.Cells.Add(tc3);
            }
        }

        private void ScrlViewer_ManipulationBoundaryFeedback(object sender, ManipulationBoundaryFeedbackEventArgs e)
        {
            e.Handled = true;
        }



        private int InputNumberRightLoLeft(string ival, int currCursorPos, string presentnumber, bool booldecimalpress, ref string returnNumber)
        {
            int retcursorpos = currCursorPos;



            string prevval = presentnumber;
            int positiondot = presentnumber.IndexOf(".");
            if (positiondot != -1) // Decimal value
            {
                string digitsbeforedecimal = presentnumber.Substring(0, positiondot);
                string decimal1 = presentnumber.Substring(positiondot + 1, 1);
                string decimal2 = presentnumber.Substring(positiondot + 2, 1);

                if (ival == "-")
                {
                    if (prevval.Contains("-"))
                    {
                        returnNumber = prevval;
                    }
                    else
                    {
                        returnNumber = "-" + prevval;
                    }
                }

                if (ival == "Back")
                {
                    if (!booldecimalpress)
                    {
                        if ((digitsbeforedecimal == "-0") || (digitsbeforedecimal == "0"))
                        {
                            decimal2 = decimal1;
                            decimal1 = "0";
                            returnNumber = digitsbeforedecimal + "." + decimal1 + decimal2;
                        }
                        else
                        {
                            decimal2 = decimal1;
                            decimal1 = digitsbeforedecimal.Substring(digitsbeforedecimal.Length - 1);
                            digitsbeforedecimal = digitsbeforedecimal.Substring(0, digitsbeforedecimal.Length - 1);
                            if ((digitsbeforedecimal == "-") || (digitsbeforedecimal == ""))
                            {
                                digitsbeforedecimal = digitsbeforedecimal + "0";
                            }
                            returnNumber = digitsbeforedecimal + "." + decimal1 + decimal2;
                        }
                    }
                    else
                    {
                        decimal2 = decimal1;
                        decimal1 = "0";
                        returnNumber = digitsbeforedecimal + "." + decimal1 + decimal2;

                    }
                }

                if ((ival == "1") || (ival == "2") || (ival == "3") || (ival == "4") || (ival == "5")
                    || (ival == "6") || (ival == "7") || (ival == "8") || (ival == "9") || (ival == "0"))
                {
                    if (!booldecimalpress)
                    {
                        if ((digitsbeforedecimal == "-0") || (digitsbeforedecimal == "0"))
                        {
                            digitsbeforedecimal = digitsbeforedecimal.Replace("0", decimal1);
                        }
                        else
                        {
                            digitsbeforedecimal = digitsbeforedecimal + decimal1;
                        }
                        decimal1 = decimal2;
                        decimal2 = ival;
                        returnNumber = digitsbeforedecimal + "." + decimal1 + decimal2;
                    }
                    else
                    {
                        decimal1 = decimal2;
                        decimal2 = ival;
                        returnNumber = digitsbeforedecimal + "." + decimal1 + decimal2;
                    }

                    /*
                    if (currCursorPos == 0)
                    {
                        if (prevval.Contains("-"))
                        {
                            returnNumber = "-" + ival + ".00";
                            retcursorpos = currCursorPos + 1;
                        }
                        else
                        {
                            returnNumber = ival + ".00";
                            retcursorpos = currCursorPos + 1;
                        }

                       
                    }
                    else
                    {
                        if (currCursorPos == positiondot)
                        {
                            string digitsbeforecursor = presentnumber.Substring(0, currCursorPos);
                            if (Convert.ToInt32(digitsbeforecursor) == 0)
                            {
                                returnNumber = ival + "." + decimal1 + decimal2;
                                retcursorpos = currCursorPos;
                            }
                            else
                            {
                                returnNumber = digitsbeforecursor + ival + "." + decimal1 + decimal2;
                                retcursorpos = currCursorPos + 1;
                            }
                        }
                        else if (currCursorPos < positiondot)
                        {
                            string digitsbeforecursor = presentnumber.Substring(0, currCursorPos);
                            string digitsaftercursor = presentnumber.Substring(currCursorPos + 1);
                            returnNumber = digitsbeforecursor + ival + digitsaftercursor;
                            retcursorpos = currCursorPos + 1;
                        }
                        else
                        {
                            if (currCursorPos == positiondot + 1)
                            {
                                returnNumber = digitsbeforedecimal + "." + ival + decimal2;
                                retcursorpos = currCursorPos + 1;
                            }

                            if (currCursorPos == positiondot + 2)
                            {
                                returnNumber = digitsbeforedecimal + "." + decimal1 + ival;
                                retcursorpos = currCursorPos + 1;
                            }

                            if (currCursorPos > positiondot + 2)
                            {
                                returnNumber = prevval;
                                retcursorpos = currCursorPos;
                            }
                        }
                    }
                    */
                }



                

            }
            else  // Integer Value
            {
                /*

                if (txtEdit.Text.Length == txtEdit.MaxLength)
                {
                    if ((ival == "0") || (ival == "1") || (ival == "2") || (ival == "3") || (ival == "4") || (ival == "5") || (ival == "6") || (ival == "7") ||
                        (ival == "8") || (ival == "9"))
                    {
                        returnNumber = prevval;
                        retcursorpos = currCursorPos;
                    }

                    if (ival == "Back") // backspace
                    {
                        if (prevval.Length == 1)
                        {
                            returnNumber = "0";
                            retcursorpos = 0;
                        }
                        else
                        {
                            prevval = prevval.Substring(0, prevval.Length - 1);
                            returnNumber = prevval;
                            retcursorpos = currCursorPos - 1;
                        }
                    }
                }
                else
                {
                    if ((ival == "1") || (ival == "2") || (ival == "3") || (ival == "4") || (ival == "5")
                        || (ival == "6") || (ival == "7") || (ival == "8") || (ival == "9") || (ival == "0"))
                    {
                        if (currCursorPos == 0)
                        {
                            if (prevval.Contains("-"))
                            {
                                string actualval = prevval.Substring(1);
                                if (actualval == "0")
                                {
                                    actualval = ival;
                                }
                                else
                                {
                                    actualval = actualval + ival;
                                }
                                returnNumber = "-" + actualval;

                                retcursorpos = currCursorPos + 1;
                            }
                            else
                            {
                                string actualval = prevval;
                                if (actualval == "0")
                                {
                                    actualval = ival;
                                }
                                else
                                {
                                    actualval = actualval + ival;
                                }

                                returnNumber = actualval;
                                retcursorpos = currCursorPos + 1;
                            }


                        }
                        else
                        {
                            string digitsbeforecursor = presentnumber.Substring(0, currCursorPos);
                            returnNumber = digitsbeforecursor + ival;
                            retcursorpos = currCursorPos + 1;
                        }
                    }


                    if (ival == "Back") // backspace
                    {
                        if (prevval.Length == 1)
                        {
                            returnNumber = "0";
                            retcursorpos = 0;
                        }
                        else
                        {
                            prevval = prevval.Substring(0, prevval.Length - 1);
                            returnNumber = prevval;
                            retcursorpos = currCursorPos - 1;
                        }
                    }
                }
                */
            }


            return retcursorpos;
        }
    }
}
